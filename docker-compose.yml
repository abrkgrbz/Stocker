version: '3.8'

# Root docker-compose.yml for Coolify
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stocker-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-StockerDb2024!}
      POSTGRES_DB: stocker_master
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./deployment/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - stocker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: stocker-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-Redis2024!} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - stocker-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-Redis2024!}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Service
  api:
    build:
      context: .
      dockerfile: ./deployment/Dockerfile.api
    image: stocker-api:latest
    container_name: stocker-api
    restart: unless-stopped
    environment:
      # ASP.NET Core
      ASPNETCORE_ENVIRONMENT: ${ENVIRONMENT:-Development}
      ASPNETCORE_URLS: http://+:80
      
      # Database
      ConnectionStrings__MasterDb: Host=postgres;Port=5432;Database=stocker_master;Username=postgres;Password=${DB_PASSWORD:-StockerDb2024!}
      ConnectionStrings__Redis: redis:6379,password=${REDIS_PASSWORD:-Redis2024!}
      
      # JWT
      JwtSettings__SecretKey: ${JWT_SECRET:-ThisIsAVerySecureSecretKeyForStockerTestEnvironment2024!}
      JwtSettings__Issuer: Stocker
      JwtSettings__Audience: Stocker
      JwtSettings__AccessTokenExpirationMinutes: 60
      JwtSettings__RefreshTokenExpirationDays: 7
      
      # Password Policy
      PasswordPolicy__MinimumLength: 8
      PasswordPolicy__RequireUppercase: true
      PasswordPolicy__RequireLowercase: true
      PasswordPolicy__RequireDigit: true
      PasswordPolicy__RequireNonAlphanumeric: true
      
      # SignalR
      SignalR__EnableDetailedErrors: true
      
      # CORS
      CORS__Origins: http://localhost:3000,http://localhost:5104
      
      # Logging
      Serilog__MinimumLevel: Debug
    ports:
      - "5104:80"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stocker-network
    volumes:
      - ./deployment/logs:/app/logs
      - ./deployment/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Optional - comment out if not needed)
  web:
    build:
      context: .
      dockerfile: ./deployment/Dockerfile.web
    image: stocker-web:latest
    container_name: stocker-web
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:5104
      REACT_APP_SIGNALR_URL: http://localhost:5104
      REACT_APP_ENVIRONMENT: Development
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - stocker-network
    profiles:
      - full

  # Database Admin
  adminer:
    image: adminer:latest
    container_name: stocker-adminer
    restart: unless-stopped
    ports:
      - "8090:8080"
    networks:
      - stocker-network
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: dracula
    depends_on:
      - postgres
    profiles:
      - dev

networks:
  stocker-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local