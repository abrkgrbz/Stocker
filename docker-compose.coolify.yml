version: '3.8'

# Simplified Docker Compose for Coolify deployment
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stocker-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: StockerDb2024!
      POSTGRES_DB: stocker_master
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - stocker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: stocker-redis
    command: redis-server --requirepass Redis2024!
    networks:
      - stocker-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "Redis2024!", "ping"]
      interval: 10s
      retries: 5

  # API Service
  api:
    build:
      context: ..
      dockerfile: /Dockerfile.api
    container_name: stocker-api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:80
      ConnectionStrings__MasterDb: Host=postgres;Port=5432;Database=stocker_master;Username=postgres;Password=StockerDb2024!
      ConnectionStrings__Redis: redis:6379,password=Redis2024!
      JwtSettings__SecretKey: ThisIsAVerySecureSecretKeyForStockerTestEnvironment2024!
      JwtSettings__Issuer: Stocker
      JwtSettings__Audience: Stocker
      SignalR__EnableDetailedErrors: true
      CORS__Origins: http://localhost:3000,http://localhost:5104
    ports:
      - "5104:80"
    depends_on:
      - postgres
      - redis
    networks:
      - stocker-network

  # Frontend
  web:
    build:
      context: ..
      dockerfile: /Dockerfile.web
    container_name: stocker-web
    environment:
      REACT_APP_API_URL: http://localhost:5104
      REACT_APP_SIGNALR_URL: http://localhost:5104
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - stocker-network

networks:
  stocker-network:
    driver: bridge

volumes:
  postgres-data: