version: '3.8'

services:
  # Frontend (React)
  stocker-web:
    build:
      context: ./stocker-web
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=${VITE_API_URL:-https://api.stoocker.app}
      - VITE_SIGNALR_URL=${VITE_SIGNALR_URL:-https://api.stoocker.app/hubs}
    networks:
      - stocker-network
    depends_on:
      - stocker-api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`stoocker.app`) || Host(`www.stoocker.app`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls=true"
      - "traefik.http.routers.web.tls.certresolver=letsencrypt"
      - "traefik.http.services.web.loadbalancer.server.port=3000"
      # HTTP to HTTPS redirect
      - "traefik.http.routers.web-http.rule=Host(`stoocker.app`) || Host(`www.stoocker.app`)"
      - "traefik.http.routers.web-http.entrypoints=web"
      - "traefik.http.routers.web-http.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  # Backend API (.NET)
  stocker-api:
    build:
      context: .
      dockerfile: src/API/Stocker.API/Dockerfile
    ports:
      - "${API_PORT:-5000}:5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Production}
      - ASPNETCORE_URLS=http://+:5000
      # Database connections
      - ConnectionStrings__DefaultConnection=Server=database;Database=StockerTenantDb;User Id=sa;Password=${SA_PASSWORD:-YourStrongPassword123!};TrustServerCertificate=true;MultipleActiveResultSets=true
      - ConnectionStrings__MasterConnection=Server=database;Database=StockerMasterDb;User Id=sa;Password=${SA_PASSWORD:-YourStrongPassword123!};TrustServerCertificate=true;MultipleActiveResultSets=true
      - ConnectionStrings__TenantConnection=Server=database;Database=StockerTenantDb;User Id=sa;Password=${SA_PASSWORD:-YourStrongPassword123!};TrustServerCertificate=true;MultipleActiveResultSets=true
      # JWT Settings
      - JwtSettings__Secret=${JwtSettings__Secret:-your-super-secret-jwt-key-minimum-32-characters-long-2024}
      - JwtSettings__Issuer=${JwtSettings__Issuer:-https://api.stoocker.app}
      - JwtSettings__Audience=${JwtSettings__Audience:-https://stoocker.app}
      - JwtSettings__AccessTokenExpirationMinutes=60
      - JwtSettings__RefreshTokenExpirationDays=7
      # Email Settings
      - EmailSettings__SmtpHost=${EmailSettings__SmtpHost:-mail.privateemail.com}
      - EmailSettings__SmtpPort=${EmailSettings__SmtpPort:-465}
      - EmailSettings__SmtpUsername=${EmailSettings__SmtpUsername:-info@stoocker.app}
      - EmailSettings__SmtpPassword=${EmailSettings__SmtpPassword}
      - EmailSettings__EnableSsl=${EmailSettings__EnableSsl:-true}
      - EmailSettings__FromEmail=${EmailSettings__FromEmail:-info@stoocker.app}
      - EmailSettings__FromName=${EmailSettings__FromName:-Stoocker}
      - EmailSettings__UseStartTls=${EmailSettings__UseStartTls:-false}
      - EmailSettings__EnableEmail=true
      - EmailSettings__BaseUrl=${FQDN:-https://stoocker.app}
      - EmailSettings__TemplatesPath=EmailTemplates
      - EmailSettings__Timeout=30000
    depends_on:
      - database
      - redis
    networks:
      - stocker-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.stoocker.app`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=5000"
      # HTTP to HTTPS redirect
      - "traefik.http.routers.api-http.rule=Host(`api.stoocker.app`)"
      - "traefik.http.routers.api-http.entrypoints=web"
      - "traefik.http.routers.api-http.middlewares=redirect-to-https"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MSSQL Database
  database:
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SA_PASSWORD:-YourStrongPassword123!}
      - MSSQL_PID=${MSSQL_PID:-Developer}
    volumes:
      - mssql_data:/var/opt/mssql
      - mssql_backup:/var/opt/mssql/backup
    networks:
      - stocker-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrongPassword123!' -Q 'SELECT 1' -b -o /dev/null && echo 'healthy' || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 20
      start_period: 60s

  # Redis for SignalR backplane
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - stocker-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

networks:
  stocker-network:
    driver: bridge

volumes:
  mssql_data:
    driver: local
  mssql_backup:
    driver: local
  redis_data:
    driver: local