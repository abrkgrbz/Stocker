using FluentAssertions;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Moq;
using Stocker.API.Middleware;
using Stocker.Application.Common.Exceptions;
using System;
using System.IO;
using System.Net;
using System.Text.Json;
using System.Threading.Tasks;
using Xunit;

namespace Stocker.IntegrationTests.Infrastructure
{
    public class GlobalExceptionHandlingMiddlewareTests
    {
        private readonly Mock<ILogger<GlobalExceptionHandlingMiddleware>> _loggerMock;
        private readonly GlobalExceptionHandlingMiddleware _middleware;

        public GlobalExceptionHandlingMiddlewareTests()
        {
            _loggerMock = new Mock<ILogger<GlobalExceptionHandlingMiddleware>>();
            _middleware = new GlobalExceptionHandlingMiddleware(
                next: (innerHttpContext) => Task.CompletedTask,
                logger: _loggerMock.Object
            );
        }

        [Fact]
        public async Task HandleAsync_ValidationException_Returns400BadRequest()
        {
            // Arrange
            var context = new DefaultHttpContext();
            context.Response.Body = new MemoryStream();
            
            var validationException = new ValidationException(new Dictionary<string, string[]>
            {
                ["Email"] = new[] { "Email is required", "Email format is invalid" },
                ["Password"] = new[] { "Password must be at least 8 characters" }
            });

            // Act
            await _middleware.HandleAsync(context, validationException);

            // Assert
            context.Response.StatusCode.Should().Be((int)HttpStatusCode.BadRequest);
            context.Response.ContentType.Should().Be("application/problem+json");

            context.Response.Body.Seek(0, SeekOrigin.Begin);
            var reader = new StreamReader(context.Response.Body);
            var responseBody = await reader.ReadToEndAsync();
            
            var problemDetails = JsonSerializer.Deserialize<ValidationProblemDetails>(responseBody, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            problemDetails.Should().NotBeNull();
            problemDetails.Status.Should().Be(400);
            problemDetails.Title.Should().Be("Validation error");
            problemDetails.Errors.Should().ContainKey("Email");
            problemDetails.Errors["Email"].Should().Contain("Email is required");
        }

        [Fact]
        public async Task HandleAsync_NotFoundException_Returns404NotFound()
        {
            // Arrange
            var context = new DefaultHttpContext();
            context.Response.Body = new MemoryStream();
            
            var notFoundException = new NotFoundException("User", "123");

            // Act
            await _middleware.HandleAsync(context, notFoundException);

            // Assert
            context.Response.StatusCode.Should().Be((int)HttpStatusCode.NotFound);
            context.Response.ContentType.Should().Be("application/problem+json");

            context.Response.Body.Seek(0, SeekOrigin.Begin);
            var reader = new StreamReader(context.Response.Body);
            var responseBody = await reader.ReadToEndAsync();
            
            var problemDetails = JsonSerializer.Deserialize<ProblemDetails>(responseBody, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            problemDetails.Should().NotBeNull();
            problemDetails.Status.Should().Be(404);
            problemDetails.Title.Should().Be("Not Found");
            problemDetails.Detail.Should().Be("User (123) was not found.");
        }

        [Fact]
        public async Task HandleAsync_BusinessRuleException_Returns400BadRequest()
        {
            // Arrange
            var context = new DefaultHttpContext();
            context.Response.Body = new MemoryStream();
            
            var businessException = new BusinessRuleException("Cannot process order without payment");

            // Act
            await _middleware.HandleAsync(context, businessException);

            // Assert
            context.Response.StatusCode.Should().Be((int)HttpStatusCode.BadRequest);
            context.Response.ContentType.Should().Be("application/problem+json");

            context.Response.Body.Seek(0, SeekOrigin.Begin);
            var reader = new StreamReader(context.Response.Body);
            var responseBody = await reader.ReadToEndAsync();
            
            var problemDetails = JsonSerializer.Deserialize<ProblemDetails>(responseBody, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            problemDetails.Should().NotBeNull();
            problemDetails.Status.Should().Be(400);
            problemDetails.Title.Should().Be("Business Rule Violation");
            problemDetails.Detail.Should().Be("Cannot process order without payment");
        }

        [Fact]
        public async Task HandleAsync_ConflictException_Returns409Conflict()
        {
            // Arrange
            var context = new DefaultHttpContext();
            context.Response.Body = new MemoryStream();
            
            var conflictException = new ConflictException("Email already exists");

            // Act
            await _middleware.HandleAsync(context, conflictException);

            // Assert
            context.Response.StatusCode.Should().Be((int)HttpStatusCode.Conflict);
            context.Response.ContentType.Should().Be("application/problem+json");

            context.Response.Body.Seek(0, SeekOrigin.Begin);
            var reader = new StreamReader(context.Response.Body);
            var responseBody = await reader.ReadToEndAsync();
            
            var problemDetails = JsonSerializer.Deserialize<ProblemDetails>(responseBody, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            problemDetails.Should().NotBeNull();
            problemDetails.Status.Should().Be(409);
            problemDetails.Title.Should().Be("Conflict");
            problemDetails.Detail.Should().Be("Email already exists");
        }

        [Fact]
        public async Task HandleAsync_ForbiddenException_Returns403Forbidden()
        {
            // Arrange
            var context = new DefaultHttpContext();
            context.Response.Body = new MemoryStream();
            
            var forbiddenException = new ForbiddenException("Access denied to this resource");

            // Act
            await _middleware.HandleAsync(context, forbiddenException);

            // Assert
            context.Response.StatusCode.Should().Be((int)HttpStatusCode.Forbidden);
            context.Response.ContentType.Should().Be("application/problem+json");

            context.Response.Body.Seek(0, SeekOrigin.Begin);
            var reader = new StreamReader(context.Response.Body);
            var responseBody = await reader.ReadToEndAsync();
            
            var problemDetails = JsonSerializer.Deserialize<ProblemDetails>(responseBody, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            problemDetails.Should().NotBeNull();
            problemDetails.Status.Should().Be(403);
            problemDetails.Title.Should().Be("Forbidden");
            problemDetails.Detail.Should().Be("Access denied to this resource");
        }

        [Fact]
        public async Task HandleAsync_UnauthorizedException_Returns401Unauthorized()
        {
            // Arrange
            var context = new DefaultHttpContext();
            context.Response.Body = new MemoryStream();
            
            var unauthorizedException = new UnauthorizedException("Invalid credentials");

            // Act
            await _middleware.HandleAsync(context, unauthorizedException);

            // Assert
            context.Response.StatusCode.Should().Be((int)HttpStatusCode.Unauthorized);
            context.Response.ContentType.Should().Be("application/problem+json");

            context.Response.Body.Seek(0, SeekOrigin.Begin);
            var reader = new StreamReader(context.Response.Body);
            var responseBody = await reader.ReadToEndAsync();
            
            var problemDetails = JsonSerializer.Deserialize<ProblemDetails>(responseBody, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            problemDetails.Should().NotBeNull();
            problemDetails.Status.Should().Be(401);
            problemDetails.Title.Should().Be("Unauthorized");
            problemDetails.Detail.Should().Be("Invalid credentials");
        }

        [Fact]
        public async Task HandleAsync_GenericException_Returns500InternalServerError()
        {
            // Arrange
            var context = new DefaultHttpContext();
            context.Response.Body = new MemoryStream();
            
            var genericException = new Exception("Something went wrong");

            // Act
            await _middleware.HandleAsync(context, genericException);

            // Assert
            context.Response.StatusCode.Should().Be((int)HttpStatusCode.InternalServerError);
            context.Response.ContentType.Should().Be("application/problem+json");

            context.Response.Body.Seek(0, SeekOrigin.Begin);
            var reader = new StreamReader(context.Response.Body);
            var responseBody = await reader.ReadToEndAsync();
            
            var problemDetails = JsonSerializer.Deserialize<ProblemDetails>(responseBody, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            problemDetails.Should().NotBeNull();
            problemDetails.Status.Should().Be(500);
            problemDetails.Title.Should().Be("Internal Server Error");
            problemDetails.Detail.Should().Be("An unexpected error occurred.");
        }

        [Fact]
        public async Task HandleAsync_LogsErrorWithCorrectLogLevel()
        {
            // Arrange
            var context = new DefaultHttpContext();
            context.Response.Body = new MemoryStream();
            
            var exception = new BusinessRuleException("Test business error");

            // Act
            await _middleware.HandleAsync(context, exception);

            // Assert
            _loggerMock.Verify(
                x => x.Log(
                    LogLevel.Warning,
                    It.IsAny<EventId>(),
                    It.Is<It.IsAnyType>((v, t) => v.ToString().Contains("Business rule violation")),
                    It.IsAny<Exception>(),
                    It.IsAny<Func<It.IsAnyType, Exception, string>>()),
                Times.Once);
        }

        [Fact]
        public async Task HandleAsync_PreservesTraceIdInProblemDetails()
        {
            // Arrange
            var context = new DefaultHttpContext();
            context.Response.Body = new MemoryStream();
            context.TraceIdentifier = "test-trace-123";
            
            var exception = new NotFoundException("Product", "456");

            // Act
            await _middleware.HandleAsync(context, exception);

            // Assert
            context.Response.Body.Seek(0, SeekOrigin.Begin);
            var reader = new StreamReader(context.Response.Body);
            var responseBody = await reader.ReadToEndAsync();
            
            var problemDetails = JsonSerializer.Deserialize<ProblemDetails>(responseBody, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            problemDetails.Should().NotBeNull();
            problemDetails.Extensions.Should().ContainKey("traceId");
            problemDetails.Extensions["traceId"].ToString().Should().Be("test-trace-123");
        }
    }
}