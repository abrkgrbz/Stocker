name: Deploy to Test Environment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20.x'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Restore .NET dependencies
      run: dotnet restore
    
    - name: Build .NET
      run: dotnet build --no-restore -c Release
    
    - name: Test .NET
      run: dotnet test --no-build --verbosity normal -c Release
      continue-on-error: true
    
    - name: Install frontend dependencies
      working-directory: ./stocker-web
      run: npm ci
    
    - name: Build frontend
      working-directory: ./stocker-web
      run: npm run build
    
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Coolify
      run: |
        curl -X POST ${{ secrets.COOLIFY_WEBHOOK_URL }} \
          -H "Content-Type: application/json" \
          -d '{
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "message": "${{ github.event.head_commit.message }}",
            "author": "${{ github.actor }}"
          }'
    
    - name: Wait for deployment
      run: sleep 30
    
    - name: Health check
      run: |
        for i in {1..10}; do
          if curl -f ${{ secrets.TEST_API_URL }}/health; then
            echo "API is healthy"
            break
          fi
          echo "Waiting for API to be ready..."
          sleep 10
        done
    
    - name: Run migrations
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Running database migrations..."
        # This would be done via Coolify exec or SSH
        # For now, it's handled by Coolify post-deploy hooks