version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: stocker-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"       # AMQP Port
      - "15672:15672"     # Management UI Port
      - "15692:15692"     # Prometheus metrics port
    environment:
      # Default user credentials
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-StockerRabbit2024!}
      # Virtual host
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST:-stocker}
      # Node name
      - RABBITMQ_NODENAME=rabbit@stocker
      # Enable plugins
      - RABBITMQ_PLUGINS_ENABLE=rabbitmq_management,rabbitmq_prometheus,rabbitmq_shovel,rabbitmq_shovel_management
      # Memory settings
      - RABBITMQ_VM_MEMORY_HIGH_WATERMARK=0.4
      - RABBITMQ_DISK_FREE_LIMIT=2GB
      # Log level
      - RABBITMQ_LOG_LEVEL=info
      # Management plugin settings
      - RABBITMQ_MANAGEMENT_PATH_PREFIX=/rabbitmq
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - stocker-network

  # RabbitMQ initialization container
  rabbitmq-init:
    image: rabbitmq:3.12-management-alpine
    container_name: stocker-rabbitmq-init
    depends_on:
      rabbitmq:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      # Wait for RabbitMQ to be fully ready
      sleep 10;
      
      # Configure exchanges and queues using rabbitmqctl
      rabbitmqctl --node rabbit@stocker add_user ${RABBITMQ_APP_USER:-stockerapp} ${RABBITMQ_APP_PASSWORD:-StockerApp2024!} 2>/dev/null || true;
      rabbitmqctl --node rabbit@stocker set_user_tags ${RABBITMQ_APP_USER:-stockerapp} administrator;
      rabbitmqctl --node rabbit@stocker set_permissions -p ${RABBITMQ_VHOST:-stocker} ${RABBITMQ_APP_USER:-stockerapp} '.*' '.*' '.*';
      
      # Create exchanges
      rabbitmqadmin -u ${RABBITMQ_USER:-admin} -p ${RABBITMQ_PASSWORD:-StockerRabbit2024!} -V ${RABBITMQ_VHOST:-stocker} declare exchange name=stocker.events type=topic durable=true;
      rabbitmqadmin -u ${RABBITMQ_USER:-admin} -p ${RABBITMQ_PASSWORD:-StockerRabbit2024!} -V ${RABBITMQ_VHOST:-stocker} declare exchange name=stocker.commands type=direct durable=true;
      rabbitmqadmin -u ${RABBITMQ_USER:-admin} -p ${RABBITMQ_PASSWORD:-StockerRabbit2024!} -V ${RABBITMQ_VHOST:-stocker} declare exchange name=stocker.dlx type=topic durable=true;
      
      # Create queues
      rabbitmqadmin -u ${RABBITMQ_USER:-admin} -p ${RABBITMQ_PASSWORD:-StockerRabbit2024!} -V ${RABBITMQ_VHOST:-stocker} declare queue name=email.notifications durable=true arguments='{\"x-message-ttl\":86400000,\"x-dead-letter-exchange\":\"stocker.dlx\"}';
      rabbitmqadmin -u ${RABBITMQ_USER:-admin} -p ${RABBITMQ_PASSWORD:-StockerRabbit2024!} -V ${RABBITMQ_VHOST:-stocker} declare queue name=tenant.provisioning durable=true arguments='{\"x-message-ttl\":3600000,\"x-dead-letter-exchange\":\"stocker.dlx\"}';
      rabbitmqadmin -u ${RABBITMQ_USER:-admin} -p ${RABBITMQ_PASSWORD:-StockerRabbit2024!} -V ${RABBITMQ_VHOST:-stocker} declare queue name=inventory.updates durable=true arguments='{\"x-dead-letter-exchange\":\"stocker.dlx\"}';
      rabbitmqadmin -u ${RABBITMQ_USER:-admin} -p ${RABBITMQ_PASSWORD:-StockerRabbit2024!} -V ${RABBITMQ_VHOST:-stocker} declare queue name=audit.logs durable=true;
      rabbitmqadmin -u ${RABBITMQ_USER:-admin} -p ${RABBITMQ_PASSWORD:-StockerRabbit2024!} -V ${RABBITMQ_VHOST:-stocker} declare queue name=dead.letter durable=true;
      
      # Bind queues to exchanges
      rabbitmqadmin -u ${RABBITMQ_USER:-admin} -p ${RABBITMQ_PASSWORD:-StockerRabbit2024!} -V ${RABBITMQ_VHOST:-stocker} declare binding source=stocker.events destination=email.notifications routing_key=email.*;
      rabbitmqadmin -u ${RABBITMQ_USER:-admin} -p ${RABBITMQ_PASSWORD:-StockerRabbit2024!} -V ${RABBITMQ_VHOST:-stocker} declare binding source=stocker.commands destination=tenant.provisioning routing_key=tenant.provision;
      rabbitmqadmin -u ${RABBITMQ_USER:-admin} -p ${RABBITMQ_PASSWORD:-StockerRabbit2024!} -V ${RABBITMQ_VHOST:-stocker} declare binding source=stocker.events destination=inventory.updates routing_key=inventory.*;
      rabbitmqadmin -u ${RABBITMQ_USER:-admin} -p ${RABBITMQ_PASSWORD:-StockerRabbit2024!} -V ${RABBITMQ_VHOST:-stocker} declare binding source=stocker.events destination=audit.logs routing_key=#;
      rabbitmqadmin -u ${RABBITMQ_USER:-admin} -p ${RABBITMQ_PASSWORD:-StockerRabbit2024!} -V ${RABBITMQ_VHOST:-stocker} declare binding source=stocker.dlx destination=dead.letter routing_key=#;
      
      echo 'RabbitMQ configuration completed successfully';
      exit 0;
      "
    networks:
      - stocker-network

volumes:
  rabbitmq_data:
    driver: local
  rabbitmq_logs:
    driver: local

networks:
  stocker-network:
    external: true