version: '3.8'

services:
  # PostgreSQL for storing backup metadata
  backup-db:
    image: postgres:15-alpine
    container_name: stocker-backup-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=restic
      - POSTGRES_USER=${BACKUP_DB_USER:-restic}
      - POSTGRES_PASSWORD=${BACKUP_DB_PASSWORD:-ResticBackup2024!}
    volumes:
      - backup_db_data:/var/lib/postgresql/data
    networks:
      - stocker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${BACKUP_DB_USER:-restic}"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Restic REST Server for backup storage
  restic-rest:
    image: restic/rest-server:latest
    container_name: stocker-restic-rest
    restart: unless-stopped
    environment:
      - OPTIONS=--no-auth
      - DATA_DIRECTORY=/data
      - PASSWORD=${RESTIC_PASSWORD:-StockerBackup2024!}
      - DISABLE_AUTHENTICATION=${DISABLE_AUTH:-false}
      - USERNAME=${RESTIC_USERNAME:-admin}
    ports:
      - "8000:8000"
    volumes:
      - restic_data:/data
    networks:
      - stocker-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup orchestrator service
  backup-orchestrator:
    image: restic/restic:latest
    container_name: stocker-backup-orchestrator
    restart: unless-stopped
    depends_on:
      - restic-rest
      - backup-db
    environment:
      # Restic configuration
      - RESTIC_REPOSITORY=rest:http://restic-rest:8000/
      - RESTIC_PASSWORD=${RESTIC_PASSWORD:-StockerBackup2024!}
      # Backup targets
      - BACKUP_SOURCES=/backup/sources
      # Retention policy
      - RESTIC_KEEP_DAILY=7
      - RESTIC_KEEP_WEEKLY=4
      - RESTIC_KEEP_MONTHLY=12
      - RESTIC_KEEP_YEARLY=3
      # Schedule (cron format)
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      # MinIO configuration for remote backup
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER:-admin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD:-StockerMinio2024!}
      - AWS_DEFAULT_REGION=${MINIO_REGION:-us-east-1}
    volumes:
      # Mount volumes to backup
      - mssql_data:/backup/sources/database:ro
      - redis_data:/backup/sources/redis:ro
      - minio_data:/backup/sources/minio:ro
      - seq_data:/backup/sources/seq:ro
      - ./backup/scripts:/scripts:ro
      - ./backup/config:/config:ro
    entrypoint: >
      /bin/sh -c "
      # Initialize repository if not exists
      restic snapshots || restic init;
      
      # Create backup script
      cat > /backup.sh << 'EOF'
      #!/bin/sh
      echo 'Starting backup at' \$$(date);
      
      # Database backup (SQL Server)
      echo 'Backing up SQL Server databases...';
      sqlcmd -S database -U sa -P '${SA_PASSWORD}' -Q 'BACKUP DATABASE StockerMasterDb TO DISK=\"/backup/sources/database/StockerMasterDb.bak\" WITH FORMAT, INIT' 2>/dev/null || true;
      sqlcmd -S database -U sa -P '${SA_PASSWORD}' -Q 'BACKUP DATABASE StockerTenantDb TO DISK=\"/backup/sources/database/StockerTenantDb.bak\" WITH FORMAT, INIT' 2>/dev/null || true;
      
      # Perform backup
      restic backup /backup/sources \
        --tag automated \
        --tag daily \
        --host stocker-prod;
      
      # Prune old snapshots
      restic forget \
        --keep-daily \$$RESTIC_KEEP_DAILY \
        --keep-weekly \$$RESTIC_KEEP_WEEKLY \
        --keep-monthly \$$RESTIC_KEEP_MONTHLY \
        --keep-yearly \$$RESTIC_KEEP_YEARLY \
        --prune;
      
      # Check repository integrity
      restic check;
      
      echo 'Backup completed at' \$$(date);
      EOF
      
      chmod +x /backup.sh;
      
      # Run backup on schedule
      while true; do
        # Calculate seconds until next scheduled run
        current_time=\$$(date +%s);
        next_run=\$$(date -d 'tomorrow 02:00' +%s);
        sleep_seconds=\$$((next_run - current_time));
        
        if [ \$$sleep_seconds -gt 0 ]; then
          echo \"Next backup in \$$sleep_seconds seconds\";
          sleep \$$sleep_seconds;
        fi
        
        /backup.sh;
      done
      "
    networks:
      - stocker-network

  # Backup UI for monitoring and management
  backup-ui:
    image: lobaro/restic-backup-docker:latest
    container_name: stocker-backup-ui
    restart: unless-stopped
    depends_on:
      - restic-rest
    environment:
      - RESTIC_REPOSITORY=rest:http://restic-rest:8000/
      - RESTIC_PASSWORD=${RESTIC_PASSWORD:-StockerBackup2024!}
      - BACKUP_CRON=${BACKUP_SCHEDULE:-0 2 * * *}
      - CHECK_CRON=0 6 * * 0
      - PRUNE_CRON=0 4 * * *
    ports:
      - "8001:80"
    volumes:
      - ./backup/ui-config:/config
    networks:
      - stocker-network

volumes:
  backup_db_data:
    driver: local
  restic_data:
    driver: local
  # Reference to existing volumes (from other compose files)
  mssql_data:
    external: true
  redis_data:
    external: true
  minio_data:
    external: true
  seq_data:
    external: true

networks:
  stocker-network:
    external: true