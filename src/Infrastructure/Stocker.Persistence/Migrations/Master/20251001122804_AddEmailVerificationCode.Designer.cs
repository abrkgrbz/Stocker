// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stocker.Persistence.Contexts;

#nullable disable

namespace Stocker.Persistence.Migrations.Master
{
    [DbContext(typeof(MasterDbContext))]
    [Migration("20251001122804_AddEmailVerificationCode")]
    partial class AddEmailVerificationCode
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("master")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Stocker.Domain.Entities.Settings.SystemSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("SystemSettings", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TaxRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Invoices_InvoiceNumber");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Invoices_Status");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Invoices_TenantId");

                    b.HasIndex("Status", "DueDate")
                        .HasDatabaseName("IX_Invoices_Status_DueDate");

                    b.ToTable("Invoices", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("IX_InvoiceItems_InvoiceId");

                    b.ToTable("InvoiceItems", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.MasterUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LockoutEndAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PasswordChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreferredLanguage")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Timezone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("TwoFactorSecret")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_MasterUsers_IsActive");

                    b.HasIndex("UserType")
                        .HasDatabaseName("IX_MasterUsers_UserType");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_MasterUsers_Username");

                    b.ToTable("MasterUsers", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TrialDays")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Packages_IsActive");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Packages_Type");

                    b.HasIndex("IsPublic", "DisplayOrder")
                        .HasDatabaseName("IX_Packages_IsPublic_DisplayOrder");

                    b.ToTable("Packages", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.PackageFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("FeatureCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsHighlighted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("IX_PackageFeatures_PackageId");

                    b.HasIndex("PackageId", "FeatureCode")
                        .IsUnique()
                        .HasDatabaseName("IX_PackageFeatures_PackageId_FeatureCode");

                    b.ToTable("PackageFeatures", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.PackageModule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsIncluded")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxEntities")
                        .HasColumnType("int");

                    b.Property<string>("ModuleCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("IX_PackageModules_PackageId");

                    b.HasIndex("PackageId", "ModuleCode")
                        .IsUnique()
                        .HasDatabaseName("IX_PackageModules_PackageId_ModuleCode");

                    b.ToTable("PackageModules", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRefund")
                        .HasColumnType("bit");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefundReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("IX_Payments_InvoiceId");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("IX_Payments_ProcessedAt");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Payments_Status");

                    b.ToTable("Payments", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("bit");

                    b.Property<string>("BillingCycle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CurrentPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CurrentPeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubscriptionNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TrialEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Subscriptions_Status");

                    b.HasIndex("SubscriptionNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Subscriptions_SubscriptionNumber");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Subscriptions_TenantId");

                    b.HasIndex("Status", "CurrentPeriodEnd")
                        .HasDatabaseName("IX_Subscriptions_Status_CurrentPeriodEnd");

                    b.ToTable("Subscriptions", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.SubscriptionModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxEntities")
                        .HasColumnType("int");

                    b.Property<string>("ModuleCode")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionModules", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.SubscriptionUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionUsages", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Tenants_Code");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Tenants_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Tenants_IsActive");

                    b.ToTable("Tenants", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.TenantBackup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("BackupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("BackupName");

                    b.Property<string>("BackupType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BackupType");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CompletedAt");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Description");

                    b.Property<string>("DownloadUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("DownloadUrl");

                    b.Property<string>("EncryptionKey")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("EncryptionKey");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ErrorMessage");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpiresAt");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("FilePath");

                    b.Property<bool>("IncludesConfiguration")
                        .HasColumnType("bit")
                        .HasColumnName("IncludesConfiguration");

                    b.Property<bool>("IncludesDatabase")
                        .HasColumnType("bit")
                        .HasColumnName("IncludesDatabase");

                    b.Property<bool>("IncludesFiles")
                        .HasColumnType("bit")
                        .HasColumnName("IncludesFiles");

                    b.Property<bool>("IsCompressed")
                        .HasColumnType("bit")
                        .HasColumnName("IsCompressed");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("bit")
                        .HasColumnName("IsEncrypted");

                    b.Property<bool>("IsRestorable")
                        .HasColumnType("bit")
                        .HasColumnName("IsRestorable");

                    b.Property<DateTime?>("LastRestoredAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastRestoredAt");

                    b.Property<string>("Metadata")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Metadata");

                    b.Property<int>("RestoreCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("RestoreCount");

                    b.Property<string>("RestoreNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("RestoreNotes");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("RetryCount");

                    b.Property<long>("SizeInBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("SizeInBytes");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Status");

                    b.Property<string>("StorageLocation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("StorageLocation");

                    b.Property<string>("Tags")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tags");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<Guid?>("TenantId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_TenantBackups_CreatedAt");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_TenantBackups_TenantId");

                    b.HasIndex("TenantId1");

                    b.HasIndex("TenantId", "BackupType")
                        .HasDatabaseName("IX_TenantBackups_TenantId_BackupType");

                    b.HasIndex("TenantId", "CreatedAt")
                        .HasDatabaseName("IX_TenantBackups_TenantId_CreatedAt");

                    b.HasIndex("TenantId", "Status")
                        .HasDatabaseName("IX_TenantBackups_TenantId_Status");

                    b.ToTable("TenantBackups", "Master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.TenantBilling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountHolder")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("AutoPaymentEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("BankBranch")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BillingCycle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BillingDay")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CardAddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CardExpiryMonth")
                        .HasColumnType("int");

                    b.Property<int?>("CardExpiryYear")
                        .HasColumnType("int");

                    b.Property<string>("CardHolderName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CardNumberMasked")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CardToken")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CardType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("ConsolidatedBilling")
                        .HasColumnType("bit");

                    b.Property<string>("CostCenter")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int?>("GracePeriodDays")
                        .HasColumnType("int");

                    b.Property<string>("IBAN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<decimal?>("LastPaymentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastPaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("LatePaymentInterestRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("NextBillingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PayPalAccountId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PayPalEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal?>("PaymentLimit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PaymentTermsDays")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PreferredPaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoutingNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("SendInvoiceByEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("SendInvoiceByPost")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SwiftCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaxOffice")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("PreferredPaymentMethod");

                    b.HasIndex("TenantId")
                        .IsUnique();

                    b.ToTable("TenantBillings", "Master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.TenantContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApprovalNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("AutoRenewal")
                        .HasColumnType("bit");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContractType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("ContractValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("DocumentHash")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DocumentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("EarlyTerminationFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NoticePeriodDays")
                        .HasColumnType("int");

                    b.Property<string>("PaymentTerms")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RenewalPeriodMonths")
                        .HasColumnType("int");

                    b.Property<decimal?>("RenewalPriceIncrease")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("bit");

                    b.Property<int?>("ResolutionTimeHours")
                        .HasColumnType("int");

                    b.Property<int?>("ResponseTimeHours")
                        .HasColumnType("int");

                    b.Property<string>("SignedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("SignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SignerEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SignerTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SpecialConditions")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SupportLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TenantId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TerminatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TerminationReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Terms")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("UptimeGuarantee")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("ContractNumber")
                        .IsUnique();

                    b.HasIndex("EndDate");

                    b.HasIndex("StartDate");

                    b.HasIndex("Status");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId1")
                        .IsUnique()
                        .HasFilter("[TenantId1] IS NOT NULL");

                    b.HasIndex("Status", "EndDate");

                    b.HasIndex("TenantId", "Status");

                    b.ToTable("TenantContracts", "Master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.TenantDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DomainName")
                        .IsUnique()
                        .HasDatabaseName("IX_TenantDomains_DomainName");

                    b.HasIndex("TenantId", "IsPrimary")
                        .IsUnique()
                        .HasDatabaseName("IX_TenantDomains_TenantId_Primary")
                        .HasFilter("[IsPrimary] = 1");

                    b.ToTable("TenantDomains", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.TenantHealthCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<int>("ActiveConnections")
                        .HasColumnType("int")
                        .HasColumnName("ActiveConnections");

                    b.Property<int>("ActiveUsers")
                        .HasColumnType("int")
                        .HasColumnName("ActiveUsers");

                    b.Property<int>("ApiErrorRate")
                        .HasColumnType("int")
                        .HasColumnName("ApiErrorRate");

                    b.Property<int>("ApiRequestsPerMinute")
                        .HasColumnType("int")
                        .HasColumnName("ApiRequestsPerMinute");

                    b.Property<long>("ApiResponseTimeMs")
                        .HasColumnType("bigint")
                        .HasColumnName("ApiResponseTimeMs");

                    b.Property<DateTime>("CheckedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CheckedAt");

                    b.Property<int>("ConcurrentSessions")
                        .HasColumnType("int")
                        .HasColumnName("ConcurrentSessions");

                    b.Property<double>("CpuUsagePercent")
                        .HasPrecision(5, 2)
                        .HasColumnType("float(5)")
                        .HasColumnName("CpuUsagePercent");

                    b.Property<long>("DatabaseResponseTimeMs")
                        .HasColumnType("bigint")
                        .HasColumnName("DatabaseResponseTimeMs");

                    b.Property<long>("DatabaseSizeMb")
                        .HasColumnType("bigint")
                        .HasColumnName("DatabaseSizeMb");

                    b.Property<int>("ErrorCount")
                        .HasColumnType("int")
                        .HasColumnName("ErrorCount");

                    b.Property<string>("Errors")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Errors");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int")
                        .HasColumnName("FailedLoginAttempts");

                    b.Property<bool>("HasSecurityUpdates")
                        .HasColumnType("bit")
                        .HasColumnName("HasSecurityUpdates");

                    b.Property<int>("HealthScore")
                        .HasColumnType("int")
                        .HasColumnName("HealthScore");

                    b.Property<bool>("IsApiHealthy")
                        .HasColumnType("bit")
                        .HasColumnName("IsApiHealthy");

                    b.Property<bool>("IsBackgroundJobsHealthy")
                        .HasColumnType("bit")
                        .HasColumnName("IsBackgroundJobsHealthy");

                    b.Property<bool>("IsBackupHealthy")
                        .HasColumnType("bit")
                        .HasColumnName("IsBackupHealthy");

                    b.Property<bool>("IsCacheHealthy")
                        .HasColumnType("bit")
                        .HasColumnName("IsCacheHealthy");

                    b.Property<bool>("IsDatabaseHealthy")
                        .HasColumnType("bit")
                        .HasColumnName("IsDatabaseHealthy");

                    b.Property<bool>("IsEmailServiceHealthy")
                        .HasColumnType("bit")
                        .HasColumnName("IsEmailServiceHealthy");

                    b.Property<bool>("IsNotificationServiceHealthy")
                        .HasColumnType("bit")
                        .HasColumnName("IsNotificationServiceHealthy");

                    b.Property<bool>("IsStorageHealthy")
                        .HasColumnType("bit")
                        .HasColumnName("IsStorageHealthy");

                    b.Property<DateTime?>("LastBackupDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastBackupDate");

                    b.Property<long>("LastBackupSizeMb")
                        .HasColumnType("bigint")
                        .HasColumnName("LastBackupSizeMb");

                    b.Property<DateTime?>("LastSecurityScan")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastSecurityScan");

                    b.Property<double>("MemoryUsagePercent")
                        .HasPrecision(5, 2)
                        .HasColumnType("float(5)")
                        .HasColumnName("MemoryUsagePercent");

                    b.Property<string>("OverallStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("OverallStatus");

                    b.Property<int>("SecurityIncidents")
                        .HasColumnType("int")
                        .HasColumnName("SecurityIncidents");

                    b.Property<long>("StorageAvailableMb")
                        .HasColumnType("bigint")
                        .HasColumnName("StorageAvailableMb");

                    b.Property<int>("StorageUsagePercent")
                        .HasColumnType("int")
                        .HasColumnName("StorageUsagePercent");

                    b.Property<long>("StorageUsedMb")
                        .HasColumnType("bigint")
                        .HasColumnName("StorageUsedMb");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TenantId");

                    b.Property<Guid?>("TenantId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WarningCount")
                        .HasColumnType("int")
                        .HasColumnName("WarningCount");

                    b.Property<string>("Warnings")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Warnings");

                    b.HasKey("Id");

                    b.HasIndex("CheckedAt")
                        .HasDatabaseName("IX_TenantHealthChecks_CheckedAt");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_TenantHealthChecks_TenantId");

                    b.HasIndex("TenantId1");

                    b.HasIndex("TenantId", "CheckedAt")
                        .HasDatabaseName("IX_TenantHealthChecks_TenantId_CheckedAt");

                    b.ToTable("TenantHealthChecks", "Master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.TenantLimits", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiLimitAction")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AuditLogRetentionDays")
                        .HasColumnType("int");

                    b.Property<int>("BackupRetentionDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CurrentAdminUsers")
                        .HasColumnType("int");

                    b.Property<int>("CurrentApiKeys")
                        .HasColumnType("int");

                    b.Property<int>("CurrentBackupsThisMonth")
                        .HasColumnType("int");

                    b.Property<int>("CurrentConcurrentUsers")
                        .HasColumnType("int");

                    b.Property<int>("CurrentCustomDomains")
                        .HasColumnType("int");

                    b.Property<int>("CurrentCustomFields")
                        .HasColumnType("int");

                    b.Property<int>("CurrentCustomModules")
                        .HasColumnType("int");

                    b.Property<int>("CurrentCustomReports")
                        .HasColumnType("int");

                    b.Property<long>("CurrentDailyApiCalls")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrentDailyTransactions")
                        .HasColumnType("bigint");

                    b.Property<int>("CurrentDatabaseConnections")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentDatabaseSizeGB")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("CurrentEmailTemplates")
                        .HasColumnType("int");

                    b.Property<int>("CurrentExportsToday")
                        .HasColumnType("int");

                    b.Property<int>("CurrentIntegrations")
                        .HasColumnType("int");

                    b.Property<long>("CurrentMonthlyApiCalls")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrentMonthlyEmails")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrentMonthlySMS")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrentMonthlyTransactions")
                        .HasColumnType("bigint");

                    b.Property<decimal>("CurrentStorageGB")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("CurrentUsers")
                        .HasColumnType("int");

                    b.Property<int>("CurrentWebhooks")
                        .HasColumnType("int");

                    b.Property<int>("CurrentWorkflows")
                        .HasColumnType("int");

                    b.Property<int>("DataRetentionDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLimitExceededNotificationSent")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastResetDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastWarningNotificationSent")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxAdminUsers")
                        .HasColumnType("int");

                    b.Property<int>("MaxApiCallsPerMinute")
                        .HasColumnType("int");

                    b.Property<int>("MaxApiKeys")
                        .HasColumnType("int");

                    b.Property<int>("MaxBackupsPerMonth")
                        .HasColumnType("int");

                    b.Property<int>("MaxCPUCores")
                        .HasColumnType("int");

                    b.Property<int>("MaxConcurrentUsers")
                        .HasColumnType("int");

                    b.Property<int>("MaxCustomDomains")
                        .HasColumnType("int");

                    b.Property<int>("MaxCustomFields")
                        .HasColumnType("int");

                    b.Property<int>("MaxCustomModules")
                        .HasColumnType("int");

                    b.Property<int>("MaxCustomReports")
                        .HasColumnType("int");

                    b.Property<long>("MaxDailyApiCalls")
                        .HasColumnType("bigint");

                    b.Property<long>("MaxDailyTransactions")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxDatabaseConnections")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxDatabaseSizeGB")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("MaxEmailTemplates")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxExportSizeGB")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("MaxExportsPerDay")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxFileUploadSizeMB")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("MaxIntegrations")
                        .HasColumnType("int");

                    b.Property<int>("MaxMemoryGB")
                        .HasColumnType("int");

                    b.Property<long>("MaxMonthlyApiCalls")
                        .HasColumnType("bigint");

                    b.Property<long>("MaxMonthlyEmails")
                        .HasColumnType("bigint");

                    b.Property<long>("MaxMonthlySMS")
                        .HasColumnType("bigint");

                    b.Property<long>("MaxMonthlyTransactions")
                        .HasColumnType("bigint");

                    b.Property<decimal>("MaxStorageGB")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("MaxTransactionsPerMinute")
                        .HasColumnType("int");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("int");

                    b.Property<int>("MaxWebhooks")
                        .HasColumnType("int");

                    b.Property<int>("MaxWorkflows")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NextResetDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SendLimitExceededNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("SendWarningNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("StorageLimitAction")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionLimitAction")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserLimitAction")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("WarningThresholdPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("LastResetDate");

                    b.HasIndex("NextResetDate");

                    b.HasIndex("TenantId")
                        .IsUnique();

                    b.ToTable("TenantLimits", "Master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.TenantRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("AdminEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("AdminEmail");

                    b.Property<string>("AdminFirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("AdminLastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("AdminPhone")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("AdminTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("AdminUsername")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BillingCycle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyWebsite")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ContactEmail");

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPersonSurname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ContactPhone");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailVerificationCode")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EmailVerificationToken")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeCount")
                        .HasColumnType("int");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("MarketingEmailsAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("MarketingSmsAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneVerificationCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("PhoneVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PhoneVerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PrivacyPolicyAccepted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PrivacyPolicyAcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PromoCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReferralCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegistrationCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RejectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("SelectedPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaxOffice")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TermsAccepted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("TermsAcceptedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TermsVersion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationCode")
                        .IsUnique();

                    b.HasIndex("RegistrationDate");

                    b.HasIndex("SelectedPackageId");

                    b.HasIndex("Status");

                    b.HasIndex("TenantId")
                        .IsUnique()
                        .HasFilter("[TenantId] IS NOT NULL");

                    b.HasIndex("Status", "RegistrationDate");

                    b.ToTable("TenantRegistrations", "Master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.UserLoginHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginHistories", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Invoice", b =>
                {
                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<Guid>("InvoiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Apartment")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("BillingApartment");

                            b1.Property<string>("Building")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("BillingBuilding");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("BillingCity");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("BillingCountry");

                            b1.Property<string>("Floor")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("BillingFloor");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("BillingPostalCode");

                            b1.Property<string>("State")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("BillingState");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("BillingStreet");

                            b1.HasKey("InvoiceId");

                            b1.ToTable("Invoices", "master");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "PaidAmount", b1 =>
                        {
                            b1.Property<Guid>("InvoiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PaidAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("PaidCurrency");

                            b1.HasKey("InvoiceId");

                            b1.ToTable("Invoices", "master");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "Subtotal", b1 =>
                        {
                            b1.Property<Guid>("InvoiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("SubtotalAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("SubtotalCurrency");

                            b1.HasKey("InvoiceId");

                            b1.ToTable("Invoices", "master");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "TaxAmount", b1 =>
                        {
                            b1.Property<Guid>("InvoiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TaxAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("TaxCurrency");

                            b1.HasKey("InvoiceId");

                            b1.ToTable("Invoices", "master");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "TotalAmount", b1 =>
                        {
                            b1.Property<Guid>("InvoiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("TotalCurrency");

                            b1.HasKey("InvoiceId");

                            b1.ToTable("Invoices", "master");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");
                        });

                    b.Navigation("BillingAddress");

                    b.Navigation("PaidAmount")
                        .IsRequired();

                    b.Navigation("Subtotal")
                        .IsRequired();

                    b.Navigation("TaxAmount")
                        .IsRequired();

                    b.Navigation("TotalAmount")
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.InvoiceItem", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Invoice", null)
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "LineTotal", b1 =>
                        {
                            b1.Property<Guid>("InvoiceItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("LineTotalAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("LineTotalCurrency");

                            b1.HasKey("InvoiceItemId");

                            b1.ToTable("InvoiceItems", "master");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceItemId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "UnitPrice", b1 =>
                        {
                            b1.Property<Guid>("InvoiceItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("UnitPriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("UnitPriceCurrency");

                            b1.HasKey("InvoiceItemId");

                            b1.ToTable("InvoiceItems", "master");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceItemId");
                        });

                    b.Navigation("LineTotal")
                        .IsRequired();

                    b.Navigation("UnitPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.MasterUser", b =>
                {
                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("MasterUserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("Email");

                            b1.HasKey("MasterUserId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_MasterUsers_Email");

                            b1.ToTable("MasterUsers", "master");

                            b1.WithOwner()
                                .HasForeignKey("MasterUserId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("MasterUserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("MasterUserId");

                            b1.ToTable("MasterUsers", "master");

                            b1.WithOwner()
                                .HasForeignKey("MasterUserId");
                        });

                    b.OwnsOne("Stocker.Domain.Master.ValueObjects.EmailVerificationToken", "EmailVerificationToken", b1 =>
                        {
                            b1.Property<Guid>("MasterUserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("EmailVerificationTokenCreatedAt");

                            b1.Property<DateTime>("ExpiresAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("EmailVerificationTokenExpiresAt");

                            b1.Property<bool>("IsUsed")
                                .HasColumnType("bit")
                                .HasColumnName("EmailVerificationTokenIsUsed");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("EmailVerificationToken");

                            b1.Property<DateTime?>("UsedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("EmailVerificationTokenUsedAt");

                            b1.HasKey("MasterUserId");

                            b1.ToTable("MasterUsers", "master");

                            b1.WithOwner()
                                .HasForeignKey("MasterUserId");
                        });

                    b.OwnsOne("Stocker.Domain.Master.ValueObjects.HashedPassword", "Password", b1 =>
                        {
                            b1.Property<Guid>("MasterUserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Hash")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("PasswordHash");

                            b1.Property<string>("Salt")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("PasswordSalt");

                            b1.HasKey("MasterUserId");

                            b1.ToTable("MasterUsers", "master");

                            b1.WithOwner()
                                .HasForeignKey("MasterUserId");
                        });

                    b.OwnsMany("Stocker.Domain.Master.ValueObjects.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("DeviceInfo")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<DateTime>("ExpiresAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("IpAddress")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("Token")
                                .HasDatabaseName("IX_MasterUserRefreshTokens_Token");

                            b1.HasIndex("UserId");

                            b1.ToTable("MasterUserRefreshTokens", "master");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("EmailVerificationToken");

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("PhoneNumber");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Package", b =>
                {
                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "BasePrice", b1 =>
                        {
                            b1.Property<Guid>("PackageId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("BasePriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("BasePriceCurrency");

                            b1.HasKey("PackageId");

                            b1.ToTable("Packages", "master");

                            b1.WithOwner()
                                .HasForeignKey("PackageId");
                        });

                    b.OwnsOne("Stocker.Domain.Master.ValueObjects.PackageLimit", "Limits", b1 =>
                        {
                            b1.Property<Guid>("PackageId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("MaxApiCalls")
                                .HasColumnType("int")
                                .HasColumnName("MaxApiCallsPerMonth");

                            b1.Property<int>("MaxProjects")
                                .HasColumnType("int")
                                .HasColumnName("MaxProjects");

                            b1.Property<int>("MaxStorage")
                                .HasColumnType("int")
                                .HasColumnName("MaxStorageGB");

                            b1.Property<int>("MaxUsers")
                                .HasColumnType("int")
                                .HasColumnName("MaxUsers");

                            b1.Property<string>("ModuleLimits")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ModuleLimits");

                            b1.HasKey("PackageId");

                            b1.ToTable("Packages", "master");

                            b1.WithOwner()
                                .HasForeignKey("PackageId");
                        });

                    b.Navigation("BasePrice")
                        .IsRequired();

                    b.Navigation("Limits")
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.PackageFeature", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Package", null)
                        .WithMany("Features")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.PackageModule", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Package", null)
                        .WithMany("Modules")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Payment", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Invoice", null)
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("Currency");

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payments", "master");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Subscription", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocker.Domain.Master.Entities.Tenant", "Tenant")
                        .WithMany("Subscriptions")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("SubscriptionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("PriceCurrency");

                            b1.HasKey("SubscriptionId");

                            b1.ToTable("Subscriptions", "master");

                            b1.WithOwner()
                                .HasForeignKey("SubscriptionId");
                        });

                    b.Navigation("Package");

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.SubscriptionModule", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Subscription", null)
                        .WithMany("Modules")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.SubscriptionUsage", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Subscription", null)
                        .WithMany("Usages")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Tenant", b =>
                {
                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Email", "ContactEmail", b1 =>
                        {
                            b1.Property<Guid>("TenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("ContactEmail");

                            b1.HasKey("TenantId");

                            b1.HasIndex("Value")
                                .HasDatabaseName("IX_Tenants_ContactEmail");

                            b1.ToTable("Tenants", "master");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.PhoneNumber", "ContactPhone", b1 =>
                        {
                            b1.Property<Guid>("TenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("ContactPhone");

                            b1.HasKey("TenantId");

                            b1.ToTable("Tenants", "master");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");
                        });

                    b.OwnsOne("Stocker.Domain.Master.ValueObjects.ConnectionString", "ConnectionString", b1 =>
                        {
                            b1.Property<Guid>("TenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("ConnectionString");

                            b1.HasKey("TenantId");

                            b1.ToTable("Tenants", "master");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");
                        });

                    b.Navigation("ConnectionString")
                        .IsRequired();

                    b.Navigation("ContactEmail")
                        .IsRequired();

                    b.Navigation("ContactPhone");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.TenantBackup", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocker.Domain.Master.Entities.Tenant", null)
                        .WithMany("Backups")
                        .HasForeignKey("TenantId1");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.TenantBilling", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Tenant", "Tenant")
                        .WithOne("BillingInfo")
                        .HasForeignKey("Stocker.Domain.Master.Entities.TenantBilling", "TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Email", "CCEmail", b1 =>
                        {
                            b1.Property<Guid>("TenantBillingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("CCEmail");

                            b1.HasKey("TenantBillingId");

                            b1.ToTable("TenantBillings", "Master");

                            b1.WithOwner()
                                .HasForeignKey("TenantBillingId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.PhoneNumber", "ContactPhone", b1 =>
                        {
                            b1.Property<Guid>("TenantBillingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("ContactPhone");

                            b1.HasKey("TenantBillingId");

                            b1.ToTable("TenantBillings", "Master");

                            b1.WithOwner()
                                .HasForeignKey("TenantBillingId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Email", "InvoiceEmail", b1 =>
                        {
                            b1.Property<Guid>("TenantBillingId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("InvoiceEmail");

                            b1.HasKey("TenantBillingId");

                            b1.ToTable("TenantBillings", "Master");

                            b1.WithOwner()
                                .HasForeignKey("TenantBillingId");
                        });

                    b.Navigation("CCEmail");

                    b.Navigation("ContactPhone");

                    b.Navigation("InvoiceEmail")
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.TenantContract", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Tenant", "Tenant")
                        .WithMany("Contracts")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Stocker.Domain.Master.Entities.Tenant", null)
                        .WithOne("ActiveContract")
                        .HasForeignKey("Stocker.Domain.Master.Entities.TenantContract", "TenantId1");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.TenantDomain", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Tenant", null)
                        .WithMany("Domains")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.TenantHealthCheck", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocker.Domain.Master.Entities.Tenant", null)
                        .WithMany("HealthChecks")
                        .HasForeignKey("TenantId1");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.TenantLimits", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Tenant", "Tenant")
                        .WithOne("Limits")
                        .HasForeignKey("Stocker.Domain.Master.Entities.TenantLimits", "TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.TenantRegistration", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Package", "SelectedPackage")
                        .WithMany()
                        .HasForeignKey("SelectedPackageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stocker.Domain.Master.Entities.Tenant", "Tenant")
                        .WithOne("Registration")
                        .HasForeignKey("Stocker.Domain.Master.Entities.TenantRegistration", "TenantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SelectedPackage");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.UserLoginHistory", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.MasterUser", null)
                        .WithMany("LoginHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Invoice", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.MasterUser", b =>
                {
                    b.Navigation("LoginHistory");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Package", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Subscription", b =>
                {
                    b.Navigation("Modules");

                    b.Navigation("Usages");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Tenant", b =>
                {
                    b.Navigation("ActiveContract");

                    b.Navigation("Backups");

                    b.Navigation("BillingInfo");

                    b.Navigation("Contracts");

                    b.Navigation("Domains");

                    b.Navigation("HealthChecks");

                    b.Navigation("Limits");

                    b.Navigation("Registration");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
