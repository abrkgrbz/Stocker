// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stocker.Persistence.Contexts;

#nullable disable

namespace Stocker.Persistence.Migrations.Master
{
    [DbContext(typeof(MasterDbContext))]
    partial class MasterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("master")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TaxRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Invoices_InvoiceNumber");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Invoices_Status");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Invoices_TenantId");

                    b.HasIndex("Status", "DueDate")
                        .HasDatabaseName("IX_Invoices_Status_DueDate");

                    b.ToTable("Invoices", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("IX_InvoiceItems_InvoiceId");

                    b.ToTable("InvoiceItems", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.MasterUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LockoutEndAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PasswordChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreferredLanguage")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Timezone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("TwoFactorSecret")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_MasterUsers_IsActive");

                    b.HasIndex("UserType")
                        .HasDatabaseName("IX_MasterUsers_UserType");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_MasterUsers_Username");

                    b.ToTable("MasterUsers", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TrialDays")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Packages_IsActive");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Packages_Type");

                    b.HasIndex("IsPublic", "DisplayOrder")
                        .HasDatabaseName("IX_Packages_IsPublic_DisplayOrder");

                    b.ToTable("Packages", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.PackageFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("FeatureCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsHighlighted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("IX_PackageFeatures_PackageId");

                    b.HasIndex("PackageId", "FeatureCode")
                        .IsUnique()
                        .HasDatabaseName("IX_PackageFeatures_PackageId_FeatureCode");

                    b.ToTable("PackageFeatures", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.PackageModule", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsIncluded")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxEntities")
                        .HasColumnType("int");

                    b.Property<string>("ModuleCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PackageId")
                        .HasDatabaseName("IX_PackageModules_PackageId");

                    b.HasIndex("PackageId", "ModuleCode")
                        .IsUnique()
                        .HasDatabaseName("IX_PackageModules_PackageId_ModuleCode");

                    b.ToTable("PackageModules", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRefund")
                        .HasColumnType("bit");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefundReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("IX_Payments_InvoiceId");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("IX_Payments_ProcessedAt");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Payments_Status");

                    b.ToTable("Payments", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoRenew")
                        .HasColumnType("bit");

                    b.Property<string>("BillingCycle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CurrentPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CurrentPeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubscriptionNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TrialEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Subscriptions_Status");

                    b.HasIndex("SubscriptionNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Subscriptions_SubscriptionNumber");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Subscriptions_TenantId");

                    b.HasIndex("Status", "CurrentPeriodEnd")
                        .HasDatabaseName("IX_Subscriptions_Status_CurrentPeriodEnd");

                    b.ToTable("Subscriptions", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.SubscriptionModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxEntities")
                        .HasColumnType("int");

                    b.Property<string>("ModuleCode")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionModules", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.SubscriptionUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionUsages", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Tenants_Code");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Tenants_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Tenants_IsActive");

                    b.ToTable("Tenants", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.TenantDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DomainName")
                        .IsUnique()
                        .HasDatabaseName("IX_TenantDomains_DomainName");

                    b.HasIndex("TenantId", "IsPrimary")
                        .IsUnique()
                        .HasDatabaseName("IX_TenantDomains_TenantId_Primary")
                        .HasFilter("[IsPrimary] = 1");

                    b.ToTable("TenantDomains", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.TenantFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EnabledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeatureCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsEnabled")
                        .HasDatabaseName("IX_TenantFeatures_IsEnabled");

                    b.HasIndex("TenantId", "FeatureCode")
                        .IsUnique()
                        .HasDatabaseName("IX_TenantFeatures_TenantId_FeatureCode");

                    b.ToTable("TenantFeatures", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.UserLoginHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLoginHistories", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.UserTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MasterUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MasterUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTenants", "master");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Invoice", b =>
                {
                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<Guid>("InvoiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Apartment")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("BillingApartment");

                            b1.Property<string>("Building")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("BillingBuilding");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("BillingCity");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("BillingCountry");

                            b1.Property<string>("Floor")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("BillingFloor");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("BillingPostalCode");

                            b1.Property<string>("State")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("BillingState");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("BillingStreet");

                            b1.HasKey("InvoiceId");

                            b1.ToTable("Invoices", "master");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "PaidAmount", b1 =>
                        {
                            b1.Property<Guid>("InvoiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PaidAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("PaidCurrency");

                            b1.HasKey("InvoiceId");

                            b1.ToTable("Invoices", "master");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "Subtotal", b1 =>
                        {
                            b1.Property<Guid>("InvoiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("SubtotalAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("SubtotalCurrency");

                            b1.HasKey("InvoiceId");

                            b1.ToTable("Invoices", "master");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "TaxAmount", b1 =>
                        {
                            b1.Property<Guid>("InvoiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TaxAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("TaxCurrency");

                            b1.HasKey("InvoiceId");

                            b1.ToTable("Invoices", "master");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "TotalAmount", b1 =>
                        {
                            b1.Property<Guid>("InvoiceId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("TotalCurrency");

                            b1.HasKey("InvoiceId");

                            b1.ToTable("Invoices", "master");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceId");
                        });

                    b.Navigation("BillingAddress");

                    b.Navigation("PaidAmount")
                        .IsRequired();

                    b.Navigation("Subtotal")
                        .IsRequired();

                    b.Navigation("TaxAmount")
                        .IsRequired();

                    b.Navigation("TotalAmount")
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.InvoiceItem", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Invoice", null)
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "LineTotal", b1 =>
                        {
                            b1.Property<Guid>("InvoiceItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("LineTotalAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("LineTotalCurrency");

                            b1.HasKey("InvoiceItemId");

                            b1.ToTable("InvoiceItems", "master");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceItemId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "UnitPrice", b1 =>
                        {
                            b1.Property<Guid>("InvoiceItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("UnitPriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("UnitPriceCurrency");

                            b1.HasKey("InvoiceItemId");

                            b1.ToTable("InvoiceItems", "master");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceItemId");
                        });

                    b.Navigation("LineTotal")
                        .IsRequired();

                    b.Navigation("UnitPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.MasterUser", b =>
                {
                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("MasterUserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("Email");

                            b1.HasKey("MasterUserId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_MasterUsers_Email");

                            b1.ToTable("MasterUsers", "master");

                            b1.WithOwner()
                                .HasForeignKey("MasterUserId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("MasterUserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("MasterUserId");

                            b1.ToTable("MasterUsers", "master");

                            b1.WithOwner()
                                .HasForeignKey("MasterUserId");
                        });

                    b.OwnsOne("Stocker.Domain.Master.ValueObjects.HashedPassword", "Password", b1 =>
                        {
                            b1.Property<Guid>("MasterUserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Hash")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("PasswordHash");

                            b1.Property<string>("Salt")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("PasswordSalt");

                            b1.HasKey("MasterUserId");

                            b1.ToTable("MasterUsers", "master");

                            b1.WithOwner()
                                .HasForeignKey("MasterUserId");
                        });

                    b.OwnsMany("Stocker.Domain.Master.ValueObjects.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("DeviceInfo")
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<DateTime>("ExpiresAt")
                                .HasColumnType("datetime2");

                            b1.Property<string>("IpAddress")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("Token")
                                .HasDatabaseName("IX_MasterUserRefreshTokens_Token");

                            b1.HasIndex("UserId");

                            b1.ToTable("MasterUserRefreshTokens", "master");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("PhoneNumber");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Package", b =>
                {
                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "BasePrice", b1 =>
                        {
                            b1.Property<Guid>("PackageId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("BasePriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("BasePriceCurrency");

                            b1.HasKey("PackageId");

                            b1.ToTable("Packages", "master");

                            b1.WithOwner()
                                .HasForeignKey("PackageId");
                        });

                    b.OwnsOne("Stocker.Domain.Master.ValueObjects.PackageLimit", "Limits", b1 =>
                        {
                            b1.Property<Guid>("PackageId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("MaxApiCalls")
                                .HasColumnType("int")
                                .HasColumnName("MaxApiCallsPerMonth");

                            b1.Property<int>("MaxProjects")
                                .HasColumnType("int")
                                .HasColumnName("MaxProjects");

                            b1.Property<int>("MaxStorage")
                                .HasColumnType("int")
                                .HasColumnName("MaxStorageGB");

                            b1.Property<int>("MaxUsers")
                                .HasColumnType("int")
                                .HasColumnName("MaxUsers");

                            b1.Property<string>("ModuleLimits")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ModuleLimits");

                            b1.HasKey("PackageId");

                            b1.ToTable("Packages", "master");

                            b1.WithOwner()
                                .HasForeignKey("PackageId");
                        });

                    b.Navigation("BasePrice")
                        .IsRequired();

                    b.Navigation("Limits")
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.PackageFeature", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Package", null)
                        .WithMany("Features")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.PackageModule", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Package", null)
                        .WithMany("Modules")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Payment", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Invoice", null)
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("Currency");

                            b1.HasKey("PaymentId");

                            b1.ToTable("Payments", "master");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Subscription", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocker.Domain.Master.Entities.Tenant", "Tenant")
                        .WithMany("Subscriptions")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("SubscriptionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("PriceCurrency");

                            b1.HasKey("SubscriptionId");

                            b1.ToTable("Subscriptions", "master");

                            b1.WithOwner()
                                .HasForeignKey("SubscriptionId");
                        });

                    b.Navigation("Package");

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.SubscriptionModule", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Subscription", null)
                        .WithMany("Modules")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.SubscriptionUsage", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Subscription", null)
                        .WithMany("Usages")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Tenant", b =>
                {
                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Email", "ContactEmail", b1 =>
                        {
                            b1.Property<Guid>("TenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("ContactEmail");

                            b1.HasKey("TenantId");

                            b1.HasIndex("Value")
                                .HasDatabaseName("IX_Tenants_ContactEmail");

                            b1.ToTable("Tenants", "master");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.PhoneNumber", "ContactPhone", b1 =>
                        {
                            b1.Property<Guid>("TenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("ContactPhone");

                            b1.HasKey("TenantId");

                            b1.ToTable("Tenants", "master");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");
                        });

                    b.OwnsOne("Stocker.Domain.Master.ValueObjects.ConnectionString", "ConnectionString", b1 =>
                        {
                            b1.Property<Guid>("TenantId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)")
                                .HasColumnName("ConnectionString");

                            b1.HasKey("TenantId");

                            b1.ToTable("Tenants", "master");

                            b1.WithOwner()
                                .HasForeignKey("TenantId");
                        });

                    b.Navigation("ConnectionString")
                        .IsRequired();

                    b.Navigation("ContactEmail")
                        .IsRequired();

                    b.Navigation("ContactPhone");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.TenantDomain", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Tenant", null)
                        .WithMany("Domains")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.TenantFeature", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.Tenant", null)
                        .WithMany("Features")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.UserLoginHistory", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.MasterUser", null)
                        .WithMany("LoginHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.UserTenant", b =>
                {
                    b.HasOne("Stocker.Domain.Master.Entities.MasterUser", null)
                        .WithMany("UserTenants")
                        .HasForeignKey("MasterUserId");

                    b.HasOne("Stocker.Domain.Master.Entities.MasterUser", null)
                        .WithMany("Tenants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Invoice", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.MasterUser", b =>
                {
                    b.Navigation("LoginHistory");

                    b.Navigation("Tenants");

                    b.Navigation("UserTenants");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Package", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Subscription", b =>
                {
                    b.Navigation("Modules");

                    b.Navigation("Usages");
                });

            modelBuilder.Entity("Stocker.Domain.Master.Entities.Tenant", b =>
                {
                    b.Navigation("Domains");

                    b.Navigation("Features");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
