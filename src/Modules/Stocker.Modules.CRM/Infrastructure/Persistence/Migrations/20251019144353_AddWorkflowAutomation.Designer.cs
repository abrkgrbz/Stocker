// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stocker.Modules.CRM.Infrastructure.Persistence;

#nullable disable

namespace Stocker.Modules.CRM.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(CRMDbContext))]
    [Migration("20251019144353_AddWorkflowAutomation")]
    partial class AddWorkflowAutomation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("crm")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AssignedToId")
                        .HasColumnType("int");

                    b.Property<string>("CallDirection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CallRecordingUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DealId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("EmailBcc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailCc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EmailHasAttachments")
                        .HasColumnType("bit");

                    b.Property<string>("EmailSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LeadId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeetingAgenda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeetingAttendees")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MeetingEndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeetingLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeetingNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MeetingStartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OpportunityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskOutcome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TaskProgress")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ContactId1");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("DealId");

                    b.HasIndex("DealId1");

                    b.HasIndex("LeadId");

                    b.HasIndex("LeadId1");

                    b.HasIndex("OpportunityId");

                    b.ToTable("Activities", "crm");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActualResponse")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("EmailBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailFromAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailFromName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailReplyTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmailTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpectedResponse")
                        .HasColumnType("int");

                    b.Property<string>("LandingPageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("NumberBounced")
                        .HasColumnType("int");

                    b.Property<int>("NumberClicked")
                        .HasColumnType("int");

                    b.Property<int>("NumberDelivered")
                        .HasColumnType("int");

                    b.Property<int>("NumberOpened")
                        .HasColumnType("int");

                    b.Property<int>("NumberSent")
                        .HasColumnType("int");

                    b.Property<int>("NumberUnsubscribed")
                        .HasColumnType("int");

                    b.Property<string>("Objective")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentCampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TargetAudience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UtmCampaign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtmContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtmMedium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtmSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtmTerm")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentCampaignId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "Status");

                    b.HasIndex("TenantId", "Type");

                    b.HasIndex("TenantId", "StartDate", "EndDate");

                    b.ToTable("Campaigns", "crm");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.CampaignMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BounceReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BouncedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<Guid>("CampaignId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClickCount")
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ContactId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ConvertedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ConvertedOpportunityId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ConvertedOpportunityId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FirstClickDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FirstOpenDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasConverted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastClickDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastOpenDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<Guid?>("LeadId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OpenCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RespondedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UnsubscribedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId1");

                    b.HasIndex("ContactId1");

                    b.HasIndex("ConvertedOpportunityId1");

                    b.HasIndex("LeadId1");

                    b.ToTable("CampaignMembers", "crm");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "CustomerId");

                    b.HasIndex("TenantId", "Email");

                    b.HasIndex("TenantId", "IsActive");

                    b.HasIndex("TenantId", "CustomerId", "IsPrimary");

                    b.ToTable("Contacts", "CRM");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("AnnualRevenue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfEmployees")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "CompanyName");

                    b.HasIndex("TenantId", "Email")
                        .IsUnique();

                    b.HasIndex("TenantId", "IsActive");

                    b.ToTable("Customers", "CRM");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.CustomerSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Criteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MemberCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "IsActive");

                    b.HasIndex("TenantId", "Type");

                    b.ToTable("CustomerSegments", "crm");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.CustomerSegmentMember", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Reason")
                        .HasColumnType("int");

                    b.Property<Guid>("SegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("TenantId");

                    b.HasIndex("SegmentId", "CustomerId")
                        .IsUnique();

                    b.HasIndex("TenantId", "CustomerId");

                    b.HasIndex("TenantId", "SegmentId");

                    b.ToTable("CustomerSegmentMembers", "crm");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.CustomerTag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("TenantId");

                    b.HasIndex("CustomerId", "Tag")
                        .IsUnique();

                    b.HasIndex("TenantId", "CustomerId");

                    b.HasIndex("TenantId", "Tag");

                    b.ToTable("CustomerTags", "crm");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Deal", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActivitiesCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActualCloseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("EmailsCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpectedCloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Labels")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LostReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("NextActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<decimal>("Probability")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RecurringCycles")
                        .HasColumnType("int");

                    b.Property<int?>("RecurringPeriod")
                        .HasColumnType("int");

                    b.Property<int?>("RottenDays")
                        .HasColumnType("int");

                    b.Property<Guid>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PipelineId");

                    b.HasIndex("StageId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "CustomerId");

                    b.HasIndex("TenantId", "ExpectedCloseDate");

                    b.HasIndex("TenantId", "PipelineId");

                    b.HasIndex("TenantId", "StageId");

                    b.HasIndex("TenantId", "Status");

                    b.ToTable("Deals", "crm", t =>
                        {
                            t.Property("Currency")
                                .HasColumnName("Deal_Currency");
                        });
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.DealProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DealId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RecurringCycles")
                        .HasColumnType("int");

                    b.Property<string>("RecurringPeriod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DealId");

                    b.HasIndex("DealId1");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "DealId");

                    b.HasIndex("TenantId", "ProductId");

                    b.ToTable("DealProducts", "crm");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("EncryptionKey")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Metadata")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ParentDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("StorageProvider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tags")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UploadedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_Documents_Category");

                    b.HasIndex("IsArchived")
                        .HasDatabaseName("IX_Documents_IsArchived");

                    b.HasIndex("ParentDocumentId")
                        .HasDatabaseName("IX_Documents_ParentDocumentId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Documents_TenantId");

                    b.HasIndex("UploadedBy")
                        .HasDatabaseName("IX_Documents_UploadedBy");

                    b.HasIndex("EntityId", "EntityType", "TenantId")
                        .HasDatabaseName("IX_Documents_Entity_Tenant");

                    b.ToTable("Documents", "crm");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Lead", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("AnnualRevenue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("AssignedToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConvertedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ConvertedToCustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NumberOfEmployees")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "AssignedToUserId");

                    b.HasIndex("TenantId", "ConvertedToCustomerId");

                    b.HasIndex("TenantId", "Email")
                        .IsUnique();

                    b.HasIndex("TenantId", "Rating");

                    b.HasIndex("TenantId", "Score");

                    b.HasIndex("TenantId", "Status");

                    b.ToTable("Leads", "CRM");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.LeadScoringHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LeadId")
                        .HasColumnType("int");

                    b.Property<Guid>("LeadId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NewScore")
                        .HasColumnType("int");

                    b.Property<int>("PreviousScore")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuleApplied")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScoreChange")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScoredAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LeadId1");

                    b.ToTable("LeadScoringHistories", "crm");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.LeadScoringRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LeadScoringRules", "crm");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivityId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttachmentUrls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DealId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LeadId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OpportunityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ActivityId1");

                    b.HasIndex("ContactId");

                    b.HasIndex("ContactId1");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("DealId");

                    b.HasIndex("DealId1");

                    b.HasIndex("LeadId");

                    b.HasIndex("LeadId1");

                    b.HasIndex("OpportunityId");

                    b.ToTable("Notes", "crm");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Opportunity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActualCloseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CampaignId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompetitorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("ExpectedCloseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LostReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NextStep")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentOpportunityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<decimal>("Probability")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<Guid>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CampaignId1");

                    b.HasIndex("ContactId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LeadId");

                    b.HasIndex("ParentOpportunityId");

                    b.HasIndex("PipelineId");

                    b.HasIndex("StageId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "CustomerId");

                    b.HasIndex("TenantId", "ExpectedCloseDate");

                    b.HasIndex("TenantId", "LeadId");

                    b.HasIndex("TenantId", "PipelineId");

                    b.HasIndex("TenantId", "StageId");

                    b.HasIndex("TenantId", "Status");

                    b.ToTable("Opportunities", "crm");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.OpportunityProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("OpportunityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OpportunityId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OpportunityId");

                    b.HasIndex("OpportunityId1");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "OpportunityId");

                    b.HasIndex("TenantId", "ProductId");

                    b.ToTable("OpportunityProducts", "crm");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Pipeline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Pipelines", "crm");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.PipelineStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLost")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWon")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PipelineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Probability")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RottenDays")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PipelineId");

                    b.ToTable("PipelineStages", "crm");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ExecutionCount")
                        .HasColumnType("int");

                    b.Property<int>("ExecutionOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastExecutedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TriggerConditions")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TriggerType")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Workflows_IsActive");

                    b.HasIndex("EntityType", "TriggerType")
                        .HasDatabaseName("IX_Workflows_EntityType_TriggerType");

                    b.HasIndex("TenantId", "IsActive")
                        .HasDatabaseName("IX_Workflows_Tenant_Active");

                    b.ToTable("Workflows", "crm");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.WorkflowExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CompletedSteps")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentStepOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("FailedSteps")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalSteps")
                        .HasColumnType("int");

                    b.Property<string>("TriggerData")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TriggeredBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_WorkflowExecutions_Status");

                    b.HasIndex("EntityId", "EntityType")
                        .HasDatabaseName("IX_WorkflowExecutions_Entity");

                    b.HasIndex("TenantId", "StartedAt")
                        .HasDatabaseName("IX_WorkflowExecutions_Tenant_StartedAt");

                    b.HasIndex("WorkflowId", "Status")
                        .HasDatabaseName("IX_WorkflowExecutions_Workflow_Status");

                    b.ToTable("WorkflowExecutions", "crm");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.WorkflowStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionConfiguration")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<string>("Conditions")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ContinueOnError")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DelayMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsEnabled")
                        .HasDatabaseName("IX_WorkflowSteps_IsEnabled");

                    b.HasIndex("WorkflowId", "StepOrder")
                        .HasDatabaseName("IX_WorkflowSteps_Workflow_Order");

                    b.ToTable("WorkflowSteps", "crm");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.WorkflowStepExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("InputData")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OutputData")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkflowExecutionId")
                        .HasColumnType("int");

                    b.Property<int>("WorkflowStepId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_WorkflowStepExecutions_Status");

                    b.HasIndex("WorkflowStepId");

                    b.HasIndex("WorkflowExecutionId", "StepOrder")
                        .HasDatabaseName("IX_WorkflowStepExecutions_Execution_Order");

                    b.ToTable("WorkflowStepExecutions", "crm");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Activity", b =>
                {
                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId1");

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId1");

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Deal", null)
                        .WithMany("Activities")
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Deal", "Deal")
                        .WithMany()
                        .HasForeignKey("DealId1");

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Lead", null)
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId1");

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Opportunity", "Opportunity")
                        .WithMany("Activities")
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Contact");

                    b.Navigation("Customer");

                    b.Navigation("Deal");

                    b.Navigation("Lead");

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Campaign", b =>
                {
                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Campaign", "ParentCampaign")
                        .WithMany("ChildCampaigns")
                        .HasForeignKey("ParentCampaignId");

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "ActualCost", b1 =>
                        {
                            b1.Property<Guid>("CampaignId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ActualCost");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("ActualCostCurrency");

                            b1.HasKey("CampaignId");

                            b1.ToTable("Campaigns", "crm");

                            b1.WithOwner()
                                .HasForeignKey("CampaignId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "ActualRevenue", b1 =>
                        {
                            b1.Property<Guid>("CampaignId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ActualRevenue");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("ActualRevenueCurrency");

                            b1.HasKey("CampaignId");

                            b1.ToTable("Campaigns", "crm");

                            b1.WithOwner()
                                .HasForeignKey("CampaignId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "BudgetedCost", b1 =>
                        {
                            b1.Property<Guid>("CampaignId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("BudgetedCost");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("BudgetedCurrency");

                            b1.HasKey("CampaignId");

                            b1.ToTable("Campaigns", "crm");

                            b1.WithOwner()
                                .HasForeignKey("CampaignId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "ExpectedRevenue", b1 =>
                        {
                            b1.Property<Guid>("CampaignId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("ExpectedRevenue");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("ExpectedRevenueCurrency");

                            b1.HasKey("CampaignId");

                            b1.ToTable("Campaigns", "crm");

                            b1.WithOwner()
                                .HasForeignKey("CampaignId");
                        });

                    b.Navigation("ActualCost")
                        .IsRequired();

                    b.Navigation("ActualRevenue")
                        .IsRequired();

                    b.Navigation("BudgetedCost")
                        .IsRequired();

                    b.Navigation("ExpectedRevenue")
                        .IsRequired();

                    b.Navigation("ParentCampaign");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.CampaignMember", b =>
                {
                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Members")
                        .HasForeignKey("CampaignId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId1");

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Opportunity", "ConvertedOpportunity")
                        .WithMany()
                        .HasForeignKey("ConvertedOpportunityId1");

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId1");

                    b.Navigation("Campaign");

                    b.Navigation("Contact");

                    b.Navigation("ConvertedOpportunity");

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Contact", b =>
                {
                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Customer", "Customer")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.CustomerSegmentMember", b =>
                {
                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Customer", null)
                        .WithMany("SegmentMemberships")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.CustomerSegment", "Segment")
                        .WithMany("Members")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.CustomerTag", b =>
                {
                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Customer", null)
                        .WithMany("Tags")
                        .HasForeignKey("CustomerId1");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Deal", b =>
                {
                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Pipeline", "Pipeline")
                        .WithMany()
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.PipelineStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "RecurringValue", b1 =>
                        {
                            b1.Property<Guid>("DealId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("RecurringValue");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("RecurringCurrency");

                            b1.HasKey("DealId");

                            b1.ToTable("Deals", "crm");

                            b1.WithOwner()
                                .HasForeignKey("DealId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "Value", b1 =>
                        {
                            b1.Property<Guid>("DealId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Value");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("Currency");

                            b1.HasKey("DealId");

                            b1.ToTable("Deals", "crm");

                            b1.WithOwner()
                                .HasForeignKey("DealId");
                        });

                    b.Navigation("Contact");

                    b.Navigation("Customer");

                    b.Navigation("Pipeline");

                    b.Navigation("RecurringValue");

                    b.Navigation("Stage");

                    b.Navigation("Value")
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.DealProduct", b =>
                {
                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Deal", null)
                        .WithMany()
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Deal", "Deal")
                        .WithMany("Products")
                        .HasForeignKey("DealId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "DiscountAmount", b1 =>
                        {
                            b1.Property<Guid>("DealProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("DiscountAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("DiscountCurrency");

                            b1.HasKey("DealProductId");

                            b1.ToTable("DealProducts", "crm");

                            b1.WithOwner()
                                .HasForeignKey("DealProductId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "TaxAmount", b1 =>
                        {
                            b1.Property<Guid>("DealProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TaxAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("TaxCurrency");

                            b1.HasKey("DealProductId");

                            b1.ToTable("DealProducts", "crm");

                            b1.WithOwner()
                                .HasForeignKey("DealProductId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "TotalPrice", b1 =>
                        {
                            b1.Property<Guid>("DealProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalPrice");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("TotalPriceCurrency");

                            b1.HasKey("DealProductId");

                            b1.ToTable("DealProducts", "crm");

                            b1.WithOwner()
                                .HasForeignKey("DealProductId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "UnitPrice", b1 =>
                        {
                            b1.Property<Guid>("DealProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("UnitPrice");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("Currency");

                            b1.HasKey("DealProductId");

                            b1.ToTable("DealProducts", "crm");

                            b1.WithOwner()
                                .HasForeignKey("DealProductId");
                        });

                    b.Navigation("Deal");

                    b.Navigation("DiscountAmount")
                        .IsRequired();

                    b.Navigation("TaxAmount")
                        .IsRequired();

                    b.Navigation("TotalPrice")
                        .IsRequired();

                    b.Navigation("UnitPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Lead", b =>
                {
                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Campaign", null)
                        .WithMany("GeneratedLeads")
                        .HasForeignKey("CampaignId");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.LeadScoringHistory", b =>
                {
                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Note", b =>
                {
                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Activity", "Activity")
                        .WithMany()
                        .HasForeignKey("ActivityId1");

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId1");

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId1");

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Deal", null)
                        .WithMany()
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Deal", "Deal")
                        .WithMany("Notes")
                        .HasForeignKey("DealId1");

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Lead", null)
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId1");

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Opportunity", "Opportunity")
                        .WithMany("Notes")
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Activity");

                    b.Navigation("Contact");

                    b.Navigation("Customer");

                    b.Navigation("Deal");

                    b.Navigation("Lead");

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Opportunity", b =>
                {
                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Campaign", null)
                        .WithMany("GeneratedOpportunities")
                        .HasForeignKey("CampaignId1");

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Opportunity", "ParentOpportunity")
                        .WithMany()
                        .HasForeignKey("ParentOpportunityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Pipeline", "Pipeline")
                        .WithMany()
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.PipelineStage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("OpportunityId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("Currency");

                            b1.HasKey("OpportunityId");

                            b1.ToTable("Opportunities", "crm");

                            b1.WithOwner()
                                .HasForeignKey("OpportunityId");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Contact");

                    b.Navigation("Customer");

                    b.Navigation("Lead");

                    b.Navigation("ParentOpportunity");

                    b.Navigation("Pipeline");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.OpportunityProduct", b =>
                {
                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Opportunity", null)
                        .WithMany()
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Opportunity", "Opportunity")
                        .WithMany("Products")
                        .HasForeignKey("OpportunityId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "DiscountAmount", b1 =>
                        {
                            b1.Property<Guid>("OpportunityProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("DiscountAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("DiscountCurrency");

                            b1.HasKey("OpportunityProductId");

                            b1.ToTable("OpportunityProducts", "crm");

                            b1.WithOwner()
                                .HasForeignKey("OpportunityProductId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "TotalPrice", b1 =>
                        {
                            b1.Property<Guid>("OpportunityProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("TotalPrice");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("TotalPriceCurrency");

                            b1.HasKey("OpportunityProductId");

                            b1.ToTable("OpportunityProducts", "crm");

                            b1.WithOwner()
                                .HasForeignKey("OpportunityProductId");
                        });

                    b.OwnsOne("Stocker.Domain.Common.ValueObjects.Money", "UnitPrice", b1 =>
                        {
                            b1.Property<Guid>("OpportunityProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("UnitPrice");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasColumnName("Currency");

                            b1.HasKey("OpportunityProductId");

                            b1.ToTable("OpportunityProducts", "crm");

                            b1.WithOwner()
                                .HasForeignKey("OpportunityProductId");
                        });

                    b.Navigation("DiscountAmount")
                        .IsRequired();

                    b.Navigation("Opportunity");

                    b.Navigation("TotalPrice")
                        .IsRequired();

                    b.Navigation("UnitPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.PipelineStage", b =>
                {
                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Pipeline", "Pipeline")
                        .WithMany("Stages")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pipeline");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.WorkflowExecution", b =>
                {
                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Workflow", "Workflow")
                        .WithMany("Executions")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.WorkflowStep", b =>
                {
                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.Workflow", "Workflow")
                        .WithMany("Steps")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.WorkflowStepExecution", b =>
                {
                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.WorkflowExecution", "WorkflowExecution")
                        .WithMany("StepExecutions")
                        .HasForeignKey("WorkflowExecutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stocker.Modules.CRM.Domain.Entities.WorkflowStep", "WorkflowStep")
                        .WithMany()
                        .HasForeignKey("WorkflowStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkflowExecution");

                    b.Navigation("WorkflowStep");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("ChildCampaigns");

                    b.Navigation("GeneratedLeads");

                    b.Navigation("GeneratedOpportunities");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("SegmentMemberships");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.CustomerSegment", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Deal", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Notes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Opportunity", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Notes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Pipeline", b =>
                {
                    b.Navigation("Stages");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.Workflow", b =>
                {
                    b.Navigation("Executions");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("Stocker.Modules.CRM.Domain.Entities.WorkflowExecution", b =>
                {
                    b.Navigation("StepExecutions");
                });
#pragma warning restore 612, 618
        }
    }
}
