using MediatR;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Stocker.API.Controllers.Base;
// using Stocker.Application.Common.Interfaces;
using Stocker.Application.DTOs.Tenant.Users;
using Stocker.Application.Features.Tenant.Users.Commands;
using Stocker.Application.Features.Tenant.Users.Queries;
// using Stocker.Identity.Services;
using Stocker.Persistence.Contexts;

namespace Stocker.API.Controllers.Tenant;

[Route("api/tenant/[controller]")]
[ApiController]
[Authorize]
public class UsersController : ApiController
{
    private readonly IMediator _mediator;
    // private readonly ICurrentTenantService _currentTenantService;
    // private readonly ICurrentUserService _currentUserService;
    private readonly TenantDbContext _context;
    // private readonly IPasswordService _passwordService;

    public UsersController(
        IMediator mediator,
        TenantDbContext context)
    {
        _mediator = mediator;
        // _currentTenantService = currentTenantService;
        // _currentUserService = currentUserService;
        _context = context;
        // _passwordService = passwordService;
    }

    [HttpGet]
    [ProducesResponseType(typeof(ApiResponse<UsersListDto>), 200)]
    [ProducesResponseType(typeof(ApiResponse<object>), 500)]
    public async Task<IActionResult> GetUsers(
        [FromQuery] int page = 1,
        [FromQuery] int pageSize = 10,
        [FromQuery] string? search = null,
        [FromQuery] string? role = null,
        [FromQuery] string? status = null)
    {
        var query = new GetUsersQuery
        {
            TenantId = Guid.NewGuid(), // _currentTenantService.TenantId
            Page = page,
            PageSize = pageSize,
            Search = search,
            Role = role,
            Status = status
        };

        var result = await _mediator.Send(query);

        return Ok(new ApiResponse<UsersListDto>
        {
            Success = true,
            Data = result,
            Message = "Kullanıcılar başarıyla listelendi"
        });
    }

    [HttpGet("{id}")]
    [ProducesResponseType(typeof(ApiResponse<UserDetailDto>), 200)]
    [ProducesResponseType(typeof(ApiResponse<object>), 404)]
    [ProducesResponseType(typeof(ApiResponse<object>), 500)]
    public async Task<IActionResult> GetUser(Guid id)
    {
        var query = new GetUserByIdQuery
        {
            TenantId = Guid.NewGuid(), // _currentTenantService.TenantId
            UserId = id
        };

        var result = await _mediator.Send(query);

        if (result == null)
        {
            return NotFound(new ApiResponse<object>
            {
                Success = false,
                Message = "Kullanıcı bulunamadı"
            });
        }

        return Ok(new ApiResponse<UserDetailDto>
        {
            Success = true,
            Data = result,
            Message = "Kullanıcı detayları başarıyla getirildi"
        });
    }

    [HttpPost]
    [ProducesResponseType(typeof(ApiResponse<UserDto>), 200)]
    [ProducesResponseType(typeof(ApiResponse<object>), 400)]
    [ProducesResponseType(typeof(ApiResponse<object>), 500)]
    public async Task<IActionResult> CreateUser([FromBody] CreateUserRequest request)
    {
        try
        {
            var command = new CreateUserCommand
            {
                TenantId = Guid.NewGuid(), // _currentTenantService.TenantId
                Username = request.Username,
                Email = request.Email,
                Password = request.Password,
                FirstName = request.FirstName,
                LastName = request.LastName,
                Role = request.Role,
                Department = request.Department,
                Branch = request.Branch,
                Phone = request.Phone,
                CreatedBy = Guid.NewGuid().ToString() // _currentUserService.UserId
            };

            var result = await _mediator.Send(command);

            return Ok(new ApiResponse<UserDto>
            {
                Success = true,
                Data = result,
                Message = "Kullanıcı başarıyla oluşturuldu"
            });
        }
        catch (InvalidOperationException ex)
        {
            return BadRequest(new ApiResponse<object>
            {
                Success = false,
                Message = ex.Message
            });
        }
    }

    [HttpPut("{id}")]
    [ProducesResponseType(typeof(ApiResponse<bool>), 200)]
    [ProducesResponseType(typeof(ApiResponse<bool>), 404)]
    [ProducesResponseType(typeof(ApiResponse<bool>), 400)]
    [ProducesResponseType(typeof(ApiResponse<bool>), 500)]
    public async Task<IActionResult> UpdateUser(Guid id, [FromBody] UpdateUserRequest request)
    {
        try
        {
            var command = new UpdateUserCommand
            {
                TenantId = Guid.NewGuid(), // _currentTenantService.TenantId
                UserId = id,
                Email = request.Email,
                FirstName = request.FirstName,
                LastName = request.LastName,
                Role = request.Role,
                Department = request.Department,
                Branch = request.Branch,
                Phone = request.Phone,
                ModifiedBy = Guid.NewGuid().ToString() // _currentUserService.UserId
            };

            var result = await _mediator.Send(command);

            if (!result)
            {
                return NotFound(new ApiResponse<bool>
                {
                    Success = false,
                    Message = "Kullanıcı bulunamadı"
                });
            }

            return Ok(new ApiResponse<bool>
            {
                Success = true,
                Data = true,
                Message = "Kullanıcı başarıyla güncellendi"
            });
        }
        catch (InvalidOperationException ex)
        {
            return BadRequest(new ApiResponse<bool>
            {
                Success = false,
                Message = ex.Message
            });
        }
    }

    [HttpDelete("{id}")]
    [ProducesResponseType(typeof(ApiResponse<bool>), 200)]
    [ProducesResponseType(typeof(ApiResponse<bool>), 404)]
    [ProducesResponseType(typeof(ApiResponse<bool>), 400)]
    [ProducesResponseType(typeof(ApiResponse<bool>), 500)]
    public async Task<IActionResult> DeleteUser(Guid id)
    {
        try
        {
            var command = new DeleteUserCommand
            {
                TenantId = Guid.NewGuid(), // _currentTenantService.TenantId
                UserId = id,
                DeletedBy = Guid.NewGuid().ToString() // _currentUserService.UserId
            };

            var result = await _mediator.Send(command);

            if (!result)
            {
                return NotFound(new ApiResponse<bool>
                {
                    Success = false,
                    Message = "Kullanıcı bulunamadı"
                });
            }

            return Ok(new ApiResponse<bool>
            {
                Success = true,
                Data = true,
                Message = "Kullanıcı başarıyla silindi"
            });
        }
        catch (InvalidOperationException ex)
        {
            return BadRequest(new ApiResponse<bool>
            {
                Success = false,
                Message = ex.Message
            });
        }
    }

    [HttpPost("{id}/toggle-status")]
    [ProducesResponseType(typeof(ApiResponse<ToggleUserStatusResult>), 200)]
    [ProducesResponseType(typeof(ApiResponse<object>), 404)]
    [ProducesResponseType(typeof(ApiResponse<object>), 400)]
    [ProducesResponseType(typeof(ApiResponse<object>), 500)]
    public async Task<IActionResult> ToggleUserStatus(Guid id)
    {
        try
        {
            var command = new ToggleUserStatusCommand
            {
                TenantId = Guid.NewGuid(), // _currentTenantService.TenantId
                UserId = id,
                ModifiedBy = Guid.NewGuid().ToString() // _currentUserService.UserId
            };

            var result = await _mediator.Send(command);

            return Ok(new ApiResponse<ToggleUserStatusResult>
            {
                Success = true,
                Data = result,
                Message = $"Kullanıcı {(result.IsActive ? "aktif edildi" : "devre dışı bırakıldı")}"
            });
        }
        catch (InvalidOperationException ex)
        {
            if (ex.Message == "Kullanıcı bulunamadı")
            {
                return NotFound(new ApiResponse<object>
                {
                    Success = false,
                    Message = ex.Message
                });
            }

            return BadRequest(new ApiResponse<object>
            {
                Success = false,
                Message = ex.Message
            });
        }
    }

    [HttpPost("{id}/reset-password")]
    public async Task<IActionResult> ResetPassword(Guid id)
    {
        try
        {
            var tenantId = Guid.NewGuid(); // _currentTenantService.TenantId
            var currentUserId = Guid.NewGuid().ToString(); // _currentUserService.UserId

            var user = await _context.TenantUsers
                .Where(u => u.TenantId == tenantId && u.Id == id && !u.IsDeleted)
                .FirstOrDefaultAsync();

            if (user == null)
            {
                return NotFound(new ApiResponse<object>
                {
                    Success = false,
                    Message = "Kullanıcı bulunamadı"
                });
            }

            // Generate temporary password
            var temporaryPassword = GenerateTemporaryPassword();
            user.Password = temporaryPassword; // _passwordService.HashPassword(temporaryPassword);
            user.PasswordChangedDate = DateTime.UtcNow;
            user.RequiresPasswordChange = true;
            user.ModifiedDate = DateTime.UtcNow;
            user.ModifiedBy = currentUserId;

            await _context.SaveChangesAsync();

            _logger.LogInformation("Password reset for user: {UserId} by {CurrentUserId}", id, currentUserId);

            // In production, send this via email instead of returning it
            return Ok(new ApiResponse<object>
            {
                Success = true,
                Data = new { temporaryPassword },
                Message = "Şifre başarıyla sıfırlandı. Geçici şifre kullanıcıya iletilmelidir."
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error resetting password");
            return StatusCode(500, new ApiResponse<object>
            {
                Success = false,
                Message = "Şifre sıfırlanırken bir hata oluştu"
            });
        }
    }

    [HttpGet("{id}/permissions")]
    public async Task<IActionResult> GetUserPermissions(Guid id)
    {
        try
        {
            var tenantId = Guid.NewGuid(); // _currentTenantService.TenantId
            
            var user = await _context.TenantUsers
                .Include(u => u.Role)
                    .ThenInclude(r => r.RolePermissions)
                        .ThenInclude(rp => rp.Permission)
                .Include(u => u.UserPermissions)
                    .ThenInclude(up => up.Permission)
                .Where(u => u.TenantId == tenantId && u.Id == id && !u.IsDeleted)
                .FirstOrDefaultAsync();

            if (user == null)
            {
                return NotFound(new ApiResponse<object>
                {
                    Success = false,
                    Message = "Kullanıcı bulunamadı"
                });
            }

            // Get all available permissions grouped by module
            var allPermissions = await _context.Permissions
                .Where(p => p.TenantId == tenantId || p.TenantId == null)
                .GroupBy(p => p.Module)
                .Select(g => new
                {
                    name = g.Key,
                    permissions = g.Select(p => new
                    {
                        code = p.Code,
                        name = p.Name,
                        granted = user.Role.RolePermissions.Any(rp => rp.PermissionId == p.Id) ||
                                 user.UserPermissions.Any(up => up.PermissionId == p.Id)
                    }).ToList()
                })
                .ToListAsync();

            var response = new
            {
                modules = allPermissions
            };

            return Ok(new ApiResponse<object>
            {
                Success = true,
                Data = response,
                Message = "Kullanıcı yetkileri başarıyla getirildi"
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error getting user permissions");
            return StatusCode(500, new ApiResponse<object>
            {
                Success = false,
                Message = "Kullanıcı yetkileri alınırken bir hata oluştu"
            });
        }
    }

    [HttpPut("{id}/permissions")]
    public async Task<IActionResult> UpdateUserPermissions(Guid id, [FromBody] UpdatePermissionsRequest request)
    {
        try
        {
            var tenantId = Guid.NewGuid(); // _currentTenantService.TenantId
            var currentUserId = Guid.NewGuid().ToString(); // _currentUserService.UserId

            var user = await _context.TenantUsers
                .Include(u => u.UserPermissions)
                .Where(u => u.TenantId == tenantId && u.Id == id && !u.IsDeleted)
                .FirstOrDefaultAsync();

            if (user == null)
            {
                return NotFound(new ApiResponse<bool>
                {
                    Success = false,
                    Message = "Kullanıcı bulunamadı"
                });
            }

            // Remove existing user-specific permissions
            _context.UserPermissions.RemoveRange(user.UserPermissions);

            // Add new permissions
            foreach (var permissionCode in request.Permissions)
            {
                var permission = await _context.Permissions
                    .Where(p => p.Code == permissionCode && (p.TenantId == tenantId || p.TenantId == null))
                    .FirstOrDefaultAsync();

                if (permission != null)
                {
                    _context.UserPermissions.Add(new Domain.Tenant.Entities.UserPermission
                    {
                        Id = Guid.NewGuid(),
                        UserId = user.Id,
                        PermissionId = permission.Id,
                        TenantId = tenantId,
                        CreatedDate = DateTime.UtcNow,
                        CreatedBy = currentUserId
                    });
                }
            }

            await _context.SaveChangesAsync();

            _logger.LogInformation("User permissions updated for user: {UserId} by {CurrentUserId}", id, currentUserId);

            return Ok(new ApiResponse<bool>
            {
                Success = true,
                Data = true,
                Message = "Kullanıcı yetkileri başarıyla güncellendi"
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error updating user permissions");
            return StatusCode(500, new ApiResponse<bool>
            {
                Success = false,
                Message = "Kullanıcı yetkileri güncellenirken bir hata oluştu"
            });
        }
    }

    [HttpGet("roles")]
    public async Task<IActionResult> GetRoles()
    {
        try
        {
            var tenantId = Guid.NewGuid(); // _currentTenantService.TenantId

            var roles = await _context.Roles
                .Where(r => r.TenantId == tenantId && !r.IsDeleted)
                .Select(r => new
                {
                    id = r.Id,
                    name = r.Name,
                    description = r.Description,
                    userCount = _context.TenantUsers.Count(u => u.RoleId == r.Id && !u.IsDeleted)
                })
                .ToListAsync();

            return Ok(new ApiResponse<object>
            {
                Success = true,
                Data = roles,
                Message = "Roller başarıyla listelendi"
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error getting roles");
            return StatusCode(500, new ApiResponse<object>
            {
                Success = false,
                Message = "Roller alınırken bir hata oluştu"
            });
        }
    }

    private string GenerateTemporaryPassword()
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
        var random = new Random();
        var password = new string(Enumerable.Repeat(chars, 12)
            .Select(s => s[random.Next(s.Length)]).ToArray());
        return password;
    }
}

public class CreateUserRequest
{
    public string Username { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;
    public string Password { get; set; } = string.Empty;
    public string FirstName { get; set; } = string.Empty;
    public string LastName { get; set; } = string.Empty;
    public string Role { get; set; } = string.Empty;
    public string? Department { get; set; }
    public string? Branch { get; set; }
    public string? Phone { get; set; }
}

public class UpdateUserRequest
{
    public string? Email { get; set; }
    public string? FirstName { get; set; }
    public string? LastName { get; set; }
    public string? Role { get; set; }
    public string? Department { get; set; }
    public string? Branch { get; set; }
    public string? Phone { get; set; }
}

public class UpdatePermissionsRequest
{
    public List<string> Permissions { get; set; } = new();
}