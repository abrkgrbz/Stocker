@page "/packages"
@using Stocker.Web.Admin.Services
@using System.Text.Json
@inject IPackageService PackageService
@inject ILogger<Packages> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Package Management</PageTitle>

<h3>Package Management</h3>

<div class="container-fluid mt-4">
    <!-- Package List -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Packages</h5>
                    <button class="btn btn-primary" @onclick="ShowCreateModal">
                        <i class="fas fa-plus"></i> Create Package
                    </button>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (packages != null && packages.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Description</th>
                                        <th>Price</th>
                                        <th>Max Users</th>
                                        <th>Max Storage (GB)</th>
                                        <th>Status</th>
                                        <th>Created</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var package in packages)
                                    {
                                        <tr>
                                            <td><strong>@package.Name</strong></td>
                                            <td>@(package.Description ?? "-")</td>
                                            <td>₺@package.BasePrice.ToString("N2")</td>
                                            <td>@package.MaxUsers</td>
                                            <td>@package.MaxStorage GB</td>
                                            <td>
                                                <span class="badge @(package.IsActive ? "bg-success" : "bg-secondary")">
                                                    @(package.IsActive ? "Active" : "Inactive")
                                                </span>
                                            </td>
                                            <td>@package.CreatedAt.ToString("dd/MM/yyyy")</td>
                                            <td>
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <button class="btn btn-outline-info" @onclick="() => ViewPackageDetails(package)">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <button class="btn btn-outline-warning" @onclick="() => ShowEditModal(package)">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-outline-danger" @onclick="() => DeletePackage(package.Id)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            No packages found. Create your first package to get started.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Package Details Modal -->
    @if (selectedPackage != null)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" @onclick="CloseDetailsModal">
            <div class="modal-dialog modal-lg" @onclick:stopPropagation="true">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Package Details: @selectedPackage.Name</h5>
                        <button type="button" class="btn-close" @onclick="CloseDetailsModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p><strong>Name:</strong> @selectedPackage.Name</p>
                                <p><strong>Description:</strong> @(selectedPackage.Description ?? "N/A")</p>
                                <p><strong>Base Price:</strong> ₺@selectedPackage.BasePrice.ToString("N2")</p>
                                <p><strong>Billing Cycle:</strong> @selectedPackage.BillingCycle</p>
                            </div>
                            <div class="col-md-6">
                                <p><strong>Max Users:</strong> @selectedPackage.MaxUsers</p>
                                <p><strong>Max Storage:</strong> @selectedPackage.MaxStorage GB</p>
                                <p><strong>Status:</strong> @(selectedPackage.IsActive ? "Active" : "Inactive")</p>
                                <p><strong>Created:</strong> @selectedPackage.CreatedAt.ToString("dd/MM/yyyy HH:mm")</p>
                            </div>
                        </div>

                        @if (selectedPackage.Features.Any())
                        {
                            <hr />
                            <h6>Features</h6>
                            <ul class="list-group list-group-flush">
                                @foreach (var feature in selectedPackage.Features)
                                {
                                    <li class="list-group-item">
                                        <i class="fas fa-check text-success"></i>
                                        <strong>@feature.FeatureCode:</strong> @feature.FeatureName
                                    </li>
                                }
                            </ul>
                        }

                        @if (selectedPackage.Modules.Any())
                        {
                            <hr />
                            <h6>Modules</h6>
                            <ul class="list-group list-group-flush">
                                @foreach (var module in selectedPackage.Modules)
                                {
                                    <li class="list-group-item">
                                        <i class="fas @(module.IsIncluded ? "fa-check text-success" : "fa-times text-danger")"></i>
                                        <strong>@module.ModuleCode:</strong> @module.ModuleName
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseDetailsModal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Create/Edit Modal -->
    @if (showCreateEditModal)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" @onclick="CloseCreateEditModal">
            <div class="modal-dialog modal-lg" @onclick:stopPropagation="true">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isEditMode ? "Edit Package" : "Create New Package")</h5>
                        <button type="button" class="btn-close" @onclick="CloseCreateEditModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Name *</label>
                                    <input type="text" class="form-control" @bind="formModel.Name" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <textarea class="form-control" @bind="formModel.Description" rows="3"></textarea>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Base Price (₺) *</label>
                                    <input type="number" class="form-control" @bind="formModel.BasePrice" step="0.01" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Max Users *</label>
                                    <input type="number" class="form-control" @bind="formModel.MaxUsers" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Max Storage (GB) *</label>
                                    <input type="number" class="form-control" @bind="formModel.MaxStorage" />
                                </div>
                                <div class="mb-3">
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" @bind="formModel.IsActive" />
                                        <label class="form-check-label">Active</label>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Features Section -->
                        <div class="row mt-3">
                            <div class="col-12">
                                <h6>Features</h6>
                                <div class="mb-2">
                                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="AddFeature">
                                        <i class="fas fa-plus"></i> Add Feature
                                    </button>
                                </div>
                                @if (formModel.Features != null && formModel.Features.Any())
                                {
                                    <table class="table table-sm">
                                        <thead>
                                            <tr>
                                                <th>Feature Code</th>
                                                <th>Feature Name</th>
                                                <th>Enabled</th>
                                                <th>Action</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @for (int i = 0; i < formModel.Features.Count; i++)
                                            {
                                                var index = i;
                                                <tr>
                                                    <td><input type="text" class="form-control form-control-sm" @bind="formModel.Features[index].FeatureCode" /></td>
                                                    <td><input type="text" class="form-control form-control-sm" @bind="formModel.Features[index].FeatureName" /></td>
                                                    <td>
                                                        <input type="checkbox" class="form-check-input" @bind="formModel.Features[index].IsEnabled" />
                                                    </td>
                                                    <td>
                                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveFeature(index)">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                            </div>
                        </div>

                        <!-- Modules Section -->
                        <div class="row mt-3">
                            <div class="col-12">
                                <h6>Modules</h6>
                                <div class="mb-2">
                                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="AddModule">
                                        <i class="fas fa-plus"></i> Add Module
                                    </button>
                                </div>
                                @if (formModel.Modules != null && formModel.Modules.Any())
                                {
                                    <table class="table table-sm">
                                        <thead>
                                            <tr>
                                                <th>Module Code</th>
                                                <th>Module Name</th>
                                                <th>Included</th>
                                                <th>Action</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @for (int i = 0; i < formModel.Modules.Count; i++)
                                            {
                                                var index = i;
                                                <tr>
                                                    <td><input type="text" class="form-control form-control-sm" @bind="formModel.Modules[index].ModuleCode" /></td>
                                                    <td><input type="text" class="form-control form-control-sm" @bind="formModel.Modules[index].ModuleName" /></td>
                                                    <td>
                                                        <input type="checkbox" class="form-check-input" @bind="formModel.Modules[index].IsIncluded" />
                                                    </td>
                                                    <td>
                                                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoveModule(index)">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseCreateEditModal">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="SavePackage" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            @(isEditMode ? "Update" : "Create")
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Alert Messages -->
    @if (!string.IsNullOrEmpty(alertMessage))
    {
        <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
            <div class="alert @alertClass alert-dismissible fade show" role="alert">
                @alertMessage
                <button type="button" class="btn-close" @onclick="ClearAlert"></button>
            </div>
        </div>
    }
</div>

@code {
    private List<PackageDto>? packages;
    private PackageDto? selectedPackage;
    private CreatePackageRequest formModel = new();
    private bool isLoading = false;
    private bool isSaving = false;
    private bool showCreateEditModal = false;
    private bool isEditMode = false;
    private Guid editingPackageId;
    private string alertMessage = "";
    private string alertClass = "alert-info";

    protected override async Task OnInitializedAsync()
    {
        await LoadPackages();
    }

    private async Task LoadPackages()
    {
        isLoading = true;
        try
        {
            var response = await PackageService.GetPackagesAsync();
            packages = response?.Packages ?? new List<PackageDto>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading packages");
            ShowAlert("Failed to load packages", "alert-danger");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ViewPackageDetails(PackageDto package)
    {
        selectedPackage = package;
    }

    private void CloseDetailsModal()
    {
        selectedPackage = null;
    }

    private void ShowCreateModal()
    {
        isEditMode = false;
        formModel = new CreatePackageRequest
        {
            IsActive = true,
            MaxUsers = 10,
            MaxStorage = 100,
            Features = new List<PackageFeatureDto>(),
            Modules = new List<PackageModuleDto>()
        };
        showCreateEditModal = true;
    }

    private void ShowEditModal(PackageDto package)
    {
        isEditMode = true;
        editingPackageId = package.Id;
        formModel = new CreatePackageRequest
        {
            Name = package.Name,
            Description = package.Description,
            BasePrice = package.BasePrice,
            BillingCycle = package.BillingCycle,
            MaxUsers = package.MaxUsers,
            MaxStorage = package.MaxStorage,
            IsActive = package.IsActive,
            Features = package.Features?.ToList() ?? new List<PackageFeatureDto>(),
            Modules = package.Modules?.ToList() ?? new List<PackageModuleDto>()
        };
        showCreateEditModal = true;
    }

    private void CloseCreateEditModal()
    {
        showCreateEditModal = false;
        formModel = new();
    }

    private async Task SavePackage()
    {
        if (string.IsNullOrWhiteSpace(formModel.Name))
        {
            ShowAlert("Package name is required", "alert-warning");
            return;
        }

        isSaving = true;
        try
        {
            bool success;
            if (isEditMode)
            {
                var updateRequest = new UpdatePackageRequest
                {
                    Name = formModel.Name,
                    Description = formModel.Description,
                    BasePrice = formModel.BasePrice,
                    BillingCycle = formModel.BillingCycle,
                    MaxUsers = formModel.MaxUsers,
                    MaxStorage = formModel.MaxStorage,
                    IsActive = formModel.IsActive
                };
                success = await PackageService.UpdatePackageAsync(editingPackageId, updateRequest);
            }
            else
            {
                var result = await PackageService.CreatePackageAsync(formModel);
                success = result != null;
            }

            if (success)
            {
                ShowAlert($"Package {(isEditMode ? "updated" : "created")} successfully", "alert-success");
                CloseCreateEditModal();
                await LoadPackages();
            }
            else
            {
                ShowAlert($"Failed to {(isEditMode ? "update" : "create")} package", "alert-danger");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving package");
            ShowAlert("An error occurred while saving the package", "alert-danger");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeletePackage(Guid id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this package?"))
        {
            try
            {
                var success = await PackageService.DeletePackageAsync(id);
                if (success)
                {
                    ShowAlert("Package deleted successfully", "alert-success");
                    await LoadPackages();
                }
                else
                {
                    ShowAlert("Failed to delete package", "alert-danger");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error deleting package");
                ShowAlert("An error occurred while deleting the package", "alert-danger");
            }
        }
    }

    private void AddFeature()
    {
        formModel.Features ??= new List<PackageFeatureDto>();
        formModel.Features.Add(new PackageFeatureDto { IsEnabled = true });
    }

    private void RemoveFeature(int index)
    {
        formModel.Features?.RemoveAt(index);
    }

    private void AddModule()
    {
        formModel.Modules ??= new List<PackageModuleDto>();
        formModel.Modules.Add(new PackageModuleDto { IsIncluded = true });
    }

    private void RemoveModule(int index)
    {
        formModel.Modules?.RemoveAt(index);
    }

    private void ShowAlert(string message, string cssClass)
    {
        alertMessage = message;
        alertClass = cssClass;
    }

    private void ClearAlert()
    {
        alertMessage = "";
    }
}