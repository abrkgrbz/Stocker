@page "/tenants"
@rendermode InteractiveServer
@using Stocker.Web.Admin.Models
@using Stocker.Web.Admin.Services
@inject ITenantService TenantService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Tenant Yönetimi</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h3>Tenant Yönetimi</h3>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="NavigateToCreate">
                <i class="bi bi-plus-circle"></i> Yeni Tenant
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Yükleniyor...</span>
            </div>
        </div>
    }
    else if (tenants.Any())
    {
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Kod</th>
                        <th>Ad</th>
                        <th>Domain</th>
                        <th>İletişim Email</th>
                        <th>Durum</th>
                        <th>Oluşturulma</th>
                        <th>İşlemler</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var tenant in tenants)
                    {
                        <tr>
                            <td>@tenant.Code</td>
                            <td>@tenant.Name</td>
                            <td>@tenant.Domain</td>
                            <td>@(tenant.ContactEmail ?? "-")</td>
                            <td>
                                @if (tenant.IsActive)
                                {
                                    <span class="badge bg-success">Aktif</span>
                                }
                                else
                                {
                                    <span class="badge bg-danger">Pasif</span>
                                }
                            </td>
                            <td>@(tenant.CreatedAt?.ToString("dd.MM.yyyy") ?? "-")</td>
                            <td>
                                <div class="btn-group btn-group-sm" role="group">
                                    <button class="btn btn-outline-info" @onclick="() => ViewDetails(tenant.Id)" title="Detay">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                    <button class="btn btn-outline-primary" @onclick="() => EditTenant(tenant.Id)" title="Düzenle">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    @if (tenant.IsActive)
                                    {
                                        <button class="btn btn-outline-warning" @onclick="() => DeactivateTenant(tenant)" title="Pasif Yap">
                                            <i class="bi bi-pause-circle"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-outline-success" @onclick="() => ActivateTenant(tenant)" title="Aktif Yap">
                                            <i class="bi bi-play-circle"></i>
                                        </button>
                                    }
                                    <button class="btn btn-outline-danger" @onclick="() => DeleteTenant(tenant)" title="Sil">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle"></i> Henüz kayıtlı tenant bulunmuyor.
        </div>
    }
</div>

@code {
    private List<TenantDto> tenants = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadTenants();
    }

    private async Task LoadTenants()
    {
        isLoading = true;
        tenants = await TenantService.GetAllTenantsAsync();
        isLoading = false;
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/tenants/create", forceLoad: false);
    }

    private void ViewDetails(Guid id)
    {
        Navigation.NavigateTo($"/tenants/{id}");
    }

    private void EditTenant(Guid id)
    {
        Navigation.NavigateTo($"/tenants/edit/{id}");
    }

    private async Task ActivateTenant(TenantDto tenant)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", 
            $"{tenant.Name} adlı tenant'ı aktif hale getirmek istediğinize emin misiniz?");
        
        if (confirmed)
        {
            var result = await TenantService.ActivateTenantAsync(tenant.Id);
            if (result)
            {
                await LoadTenants();
            }
        }
    }

    private async Task DeactivateTenant(TenantDto tenant)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", 
            $"{tenant.Name} adlı tenant'ı pasif hale getirmek istediğinize emin misiniz?");
        
        if (confirmed)
        {
            var result = await TenantService.DeactivateTenantAsync(tenant.Id);
            if (result)
            {
                await LoadTenants();
            }
        }
    }

    private async Task DeleteTenant(TenantDto tenant)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", 
            $"{tenant.Name} adlı tenant'ı silmek istediğinize emin misiniz? Bu işlem geri alınamaz!");
        
        if (confirmed)
        {
            var result = await TenantService.DeleteTenantAsync(tenant.Id);
            if (result)
            {
                await LoadTenants();
            }
        }
    }
}