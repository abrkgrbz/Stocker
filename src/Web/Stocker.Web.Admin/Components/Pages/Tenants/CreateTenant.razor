@page "/tenants/create"
@rendermode InteractiveServer
@using Stocker.Web.Admin.Models
@using Stocker.Web.Admin.Services
@inject ITenantService TenantService
@inject NavigationManager Navigation

<PageTitle>Yeni Tenant Oluştur</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card">
                <div class="card-header">
                    <h4>Yeni Tenant Oluştur</h4>
                </div>
                <div class="card-body">
                    <EditForm Model="@model" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label for="name" class="form-label">Tenant Adı</label>
                            <InputText id="name" class="form-control" @bind-Value="model.Name" placeholder="Örn: ABC Şirketi" />
                            <ValidationMessage For="@(() => model.Name)" />
                        </div>

                        <div class="mb-3">
                            <label for="code" class="form-label">Tenant Kodu</label>
                            <InputText id="code" class="form-control" @bind-Value="model.Code" placeholder="Örn: ABC001" />
                            <small class="form-text text-muted">Benzersiz bir kod giriniz</small>
                            <ValidationMessage For="@(() => model.Code)" />
                        </div>

                        <div class="mb-3">
                            <label for="domain" class="form-label">Domain</label>
                            <InputText id="domain" class="form-control" @bind-Value="model.Domain" placeholder="Örn: abc.example.com" />
                            <ValidationMessage For="@(() => model.Domain)" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">İletişim Email</label>
                            <InputText id="email" type="email" class="form-control" @bind-Value="model.ContactEmail" placeholder="Örn: admin@abc.com" />
                            <ValidationMessage For="@(() => model.ContactEmail)" />
                        </div>

                        <div class="mb-3">
                            <label for="phone" class="form-label">İletişim Telefonu</label>
                            <InputText id="phone" class="form-control" @bind-Value="model.ContactPhone" placeholder="Örn: +90 555 123 4567" />
                            <ValidationMessage For="@(() => model.ContactPhone)" />
                        </div>

                        <div class="mb-3">
                            <label for="package" class="form-label">Paket Seçimi</label>
                            <select id="package" class="form-select" @bind="model.PackageId">
                                <option value="">-- Paket Seçiniz --</option>
                                <option value="C6DF34BA-F183-447F-ABBA-5861E92BD9A1">Başlangıç Paketi</option>
                            </select>
                            <ValidationMessage For="@(() => model.PackageId)" />
                        </div>

                        <div class="mb-3">
                            <label for="billing" class="form-label">Faturalama Periyodu</label>
                            <select id="billing" class="form-select" @bind="model.BillingCycle">
                                <option value="1">Aylık</option>
                                <option value="2">3 Aylık</option>
                                <option value="3">6 Aylık</option>
                                <option value="4">Yıllık</option>
                            </select>
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-secondary" @onclick="Cancel">
                                <i class="bi bi-arrow-left"></i> İptal
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Oluşturuluyor...</span>
                                }
                                else
                                {
                                    <i class="bi bi-check-circle"></i>
                                    <span> Tenant Oluştur</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    <i class="bi bi-exclamation-triangle"></i> @errorMessage
                </div>
            }
        </div>
    </div>
</div>

@code {
    private CreateTenantRequest model = new();
    private bool isSubmitting = false;
    private string errorMessage = string.Empty;

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        errorMessage = string.Empty;

        try
        {
            var result = await TenantService.CreateTenantAsync(model);
            if (result != null)
            {
                Navigation.NavigateTo("/tenants");
            }
            else
            {
                errorMessage = "Tenant oluşturulurken bir hata oluştu.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Hata: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/tenants");
    }
}