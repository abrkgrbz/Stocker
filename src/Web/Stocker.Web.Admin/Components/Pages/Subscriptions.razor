@page "/subscriptions"
@using Stocker.Web.Admin.Services
@inject ISubscriptionService SubscriptionService
@inject ITenantService TenantService
@inject IPackageService PackageService
@inject ILogger<Subscriptions> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Subscription Management</PageTitle>

<h3>Subscription Management</h3>

<div class="container-fluid mt-4">
    <!-- Filters -->
    <div class="row mb-3">
        <div class="col-md-3">
            <label class="form-label">Status Filter</label>
            <select class="form-select" @bind="statusFilter" @bind:event="oninput" @onchange="ApplyFilters">
                <option value="">All Status</option>
                <option value="Trial">Trial</option>
                <option value="Active">Active</option>
                <option value="PastDue">Past Due</option>
                <option value="Suspended">Suspended</option>
                <option value="Cancelled">Cancelled</option>
                <option value="Expired">Expired</option>
            </select>
        </div>
        <div class="col-md-3">
            <label class="form-label">Auto Renew</label>
            <select class="form-select" @bind="autoRenewFilter" @bind:event="oninput" @onchange="ApplyFilters">
                <option value="">All</option>
                <option value="true">Yes</option>
                <option value="false">No</option>
            </select>
        </div>
        <div class="col-md-3 d-flex align-items-end">
            <button class="btn btn-primary" @onclick="ShowCreateModal">
                <i class="fas fa-plus"></i> New Subscription
            </button>
        </div>
    </div>

    <!-- Subscription List -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Subscriptions</h5>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (subscriptions != null && subscriptions.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Subscription #</th>
                                        <th>Tenant</th>
                                        <th>Package</th>
                                        <th>Status</th>
                                        <th>Billing</th>
                                        <th>Price</th>
                                        <th>Period</th>
                                        <th>Auto Renew</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var subscription in subscriptions)
                                    {
                                        <tr>
                                            <td><code>@subscription.SubscriptionNumber</code></td>
                                            <td>@subscription.TenantName</td>
                                            <td>@subscription.PackageName</td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(subscription.Status)">
                                                    @subscription.Status
                                                </span>
                                            </td>
                                            <td>@subscription.BillingCycle</td>
                                            <td>@subscription.Currency @subscription.Price.ToString("N2")</td>
                                            <td>
                                                <small>
                                                    @subscription.CurrentPeriodStart.ToString("dd/MM/yyyy") - 
                                                    @subscription.CurrentPeriodEnd.ToString("dd/MM/yyyy")
                                                </small>
                                            </td>
                                            <td>
                                                @if (subscription.AutoRenew)
                                                {
                                                    <i class="fas fa-check text-success"></i>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-times text-danger"></i>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm" role="group">
                                                    <button class="btn btn-outline-info" @onclick="() => ViewSubscriptionDetails(subscription)">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <button class="btn btn-outline-warning" @onclick="() => ShowEditModal(subscription)">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    @if (subscription.Status != "Cancelled" && subscription.Status != "Expired")
                                                    {
                                                        <button class="btn btn-outline-danger" @onclick="() => CancelSubscription(subscription)">
                                                            <i class="fas fa-ban"></i>
                                                        </button>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            No subscriptions found.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Details Modal -->
    @if (selectedSubscription != null)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" @onclick="CloseDetailsModal">
            <div class="modal-dialog modal-lg" @onclick:stopPropagation="true">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Subscription Details: @selectedSubscription.SubscriptionNumber</h5>
                        <button type="button" class="btn-close" @onclick="CloseDetailsModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p><strong>Tenant:</strong> @selectedSubscription.TenantName</p>
                                <p><strong>Package:</strong> @selectedSubscription.PackageName</p>
                                <p><strong>Status:</strong> 
                                    <span class="badge @GetStatusBadgeClass(selectedSubscription.Status)">
                                        @selectedSubscription.Status
                                    </span>
                                </p>
                                <p><strong>Billing Cycle:</strong> @selectedSubscription.BillingCycle</p>
                                <p><strong>Price:</strong> @selectedSubscription.Currency @selectedSubscription.Price.ToString("N2")</p>
                            </div>
                            <div class="col-md-6">
                                <p><strong>Start Date:</strong> @selectedSubscription.StartDate.ToString("dd/MM/yyyy")</p>
                                <p><strong>Current Period:</strong> @selectedSubscription.CurrentPeriodStart.ToString("dd/MM/yyyy") - @selectedSubscription.CurrentPeriodEnd.ToString("dd/MM/yyyy")</p>
                                @if (selectedSubscription.TrialEndDate.HasValue)
                                {
                                    <p><strong>Trial Ends:</strong> @selectedSubscription.TrialEndDate.Value.ToString("dd/MM/yyyy")</p>
                                }
                                <p><strong>Auto Renew:</strong> @(selectedSubscription.AutoRenew ? "Yes" : "No")</p>
                                <p><strong>User Count:</strong> @selectedSubscription.UserCount</p>
                            </div>
                        </div>

                        @if (selectedSubscription.CancelledAt.HasValue)
                        {
                            <hr />
                            <div class="alert alert-warning">
                                <strong>Cancelled:</strong> @selectedSubscription.CancelledAt.Value.ToString("dd/MM/yyyy HH:mm")<br />
                                <strong>Reason:</strong> @selectedSubscription.CancellationReason
                            </div>
                        }

                        @if (selectedSubscription.Modules.Any())
                        {
                            <hr />
                            <h6>Modules</h6>
                            <ul class="list-group list-group-flush">
                                @foreach (var module in selectedSubscription.Modules)
                                {
                                    <li class="list-group-item">
                                        <i class="fas @(module.IsActive ? "fa-check text-success" : "fa-times text-danger")"></i>
                                        <strong>@module.ModuleCode:</strong> @module.ModuleName
                                        @if (module.MaxEntities.HasValue)
                                        {
                                            <span class="text-muted">(Max: @module.MaxEntities)</span>
                                        }
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseDetailsModal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Create/Edit Modal -->
    @if (showCreateEditModal)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" @onclick="CloseCreateEditModal">
            <div class="modal-dialog modal-lg" @onclick:stopPropagation="true">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isEditMode ? "Edit Subscription" : "Create New Subscription")</h5>
                        <button type="button" class="btn-close" @onclick="CloseCreateEditModal"></button>
                    </div>
                    <div class="modal-body">
                        @if (!isEditMode)
                        {
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Tenant *</label>
                                        <select class="form-select" @bind="formModel.TenantId">
                                            <option value="">Select Tenant</option>
                                            @if (tenants != null)
                                            {
                                                @foreach (var tenant in tenants)
                                                {
                                                    <option value="@tenant.Id">@tenant.Name</option>
                                                }
                                            }
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Package *</label>
                                        <select class="form-select" @bind="formModel.PackageId" @bind:event="oninput" @onchange="OnPackageChanged">
                                            <option value="">Select Package</option>
                                            @if (packages != null)
                                            {
                                                @foreach (var package in packages)
                                                {
                                                    <option value="@package.Id">@package.Name - ₺@package.BasePrice.ToString("N2")</option>
                                                }
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Billing Cycle *</label>
                                        <select class="form-select" @bind="formModel.BillingCycle">
                                            <option value="0">Monthly</option>
                                            <option value="1">Quarterly</option>
                                            <option value="2">Semi-Annually</option>
                                            <option value="3">Annually</option>
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Custom Price (optional)</label>
                                        <input type="number" class="form-control" @bind="formModel.CustomPrice" step="0.01" placeholder="Leave empty to use package price" />
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Start Date</label>
                                        <input type="date" class="form-control" @bind="formModel.StartDate" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Trial Days</label>
                                        <input type="number" class="form-control" @bind="formModel.TrialDays" min="0" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">User Count</label>
                                        <input type="number" class="form-control" @bind="formModel.UserCount" min="1" />
                                    </div>
                                    <div class="mb-3">
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" @bind="formModel.AutoRenew" />
                                            <label class="form-check-label">Auto Renew</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <!-- Edit Mode - Limited Fields -->
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Billing Cycle</label>
                                        <select class="form-select" @bind="editModel.BillingCycle">
                                            <option value="">Keep Current</option>
                                            <option value="0">Monthly</option>
                                            <option value="1">Quarterly</option>
                                            <option value="2">Semi-Annually</option>
                                            <option value="3">Annually</option>
                                        </select>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Price</label>
                                        <input type="number" class="form-control" @bind="editModel.Price" step="0.01" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">User Count</label>
                                        <input type="number" class="form-control" @bind="editModel.UserCount" min="1" />
                                    </div>
                                    <div class="mb-3">
                                        <div class="form-check form-switch">
                                            <input class="form-check-input" type="checkbox" @bind="editModel.AutoRenew" />
                                            <label class="form-check-label">Auto Renew</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseCreateEditModal">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="SaveSubscription" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            @(isEditMode ? "Update" : "Create")
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Alert Messages -->
    @if (!string.IsNullOrEmpty(alertMessage))
    {
        <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
            <div class="alert @alertClass alert-dismissible fade show" role="alert">
                @alertMessage
                <button type="button" class="btn-close" @onclick="ClearAlert"></button>
            </div>
        </div>
    }
</div>

@code {
    private List<SubscriptionDto>? subscriptions;
    private List<TenantListDto>? tenants;
    private List<PackageDto>? packages;
    private SubscriptionDto? selectedSubscription;
    private CreateSubscriptionRequest formModel = new();
    private UpdateSubscriptionRequest editModel = new();
    private bool isLoading = false;
    private bool isSaving = false;
    private bool showCreateEditModal = false;
    private bool isEditMode = false;
    private Guid editingSubscriptionId;
    private string alertMessage = "";
    private string alertClass = "alert-info";
    private string statusFilter = "";
    private string autoRenewFilter = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadSubscriptions();
        await LoadTenants();
        await LoadPackages();
    }

    private async Task LoadSubscriptions()
    {
        isLoading = true;
        try
        {
            bool? autoRenew = null;
            if (!string.IsNullOrEmpty(autoRenewFilter))
            {
                autoRenew = autoRenewFilter == "true";
            }

            var response = await SubscriptionService.GetSubscriptionsAsync(null, statusFilter, autoRenew);
            subscriptions = response?.Subscriptions ?? new List<SubscriptionDto>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading subscriptions");
            ShowAlert("Failed to load subscriptions", "alert-danger");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadTenants()
    {
        try
        {
            var response = await TenantService.GetTenantsAsync();
            tenants = response?.Tenants ?? new List<TenantListDto>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading tenants");
        }
    }

    private async Task LoadPackages()
    {
        try
        {
            var response = await PackageService.GetPackagesAsync();
            packages = response?.Packages ?? new List<PackageDto>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading packages");
        }
    }

    private async Task ApplyFilters()
    {
        await LoadSubscriptions();
    }

    private void ViewSubscriptionDetails(SubscriptionDto subscription)
    {
        selectedSubscription = subscription;
    }

    private void CloseDetailsModal()
    {
        selectedSubscription = null;
    }

    private void ShowCreateModal()
    {
        isEditMode = false;
        formModel = new CreateSubscriptionRequest
        {
            BillingCycle = 0, // Monthly
            AutoRenew = true,
            UserCount = 1,
            Currency = "TRY"
        };
        showCreateEditModal = true;
    }

    private void ShowEditModal(SubscriptionDto subscription)
    {
        isEditMode = true;
        editingSubscriptionId = subscription.Id;
        editModel = new UpdateSubscriptionRequest
        {
            Price = subscription.Price,
            Currency = subscription.Currency,
            UserCount = subscription.UserCount,
            AutoRenew = subscription.AutoRenew
        };
        showCreateEditModal = true;
    }

    private void CloseCreateEditModal()
    {
        showCreateEditModal = false;
        formModel = new();
        editModel = new();
    }

    private void OnPackageChanged()
    {
        // Package seçildiğinde custom price'ı temizle
        formModel.CustomPrice = null;
    }

    private async Task SaveSubscription()
    {
        if (!isEditMode)
        {
            if (formModel.TenantId == Guid.Empty || formModel.PackageId == Guid.Empty)
            {
                ShowAlert("Please select both Tenant and Package", "alert-warning");
                return;
            }
        }

        isSaving = true;
        try
        {
            bool success;
            if (isEditMode)
            {
                success = await SubscriptionService.UpdateSubscriptionAsync(editingSubscriptionId, editModel);
            }
            else
            {
                var result = await SubscriptionService.CreateSubscriptionAsync(formModel);
                success = result != null;
            }

            if (success)
            {
                ShowAlert($"Subscription {(isEditMode ? "updated" : "created")} successfully", "alert-success");
                CloseCreateEditModal();
                await LoadSubscriptions();
            }
            else
            {
                ShowAlert($"Failed to {(isEditMode ? "update" : "create")} subscription", "alert-danger");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving subscription");
            ShowAlert("An error occurred while saving the subscription", "alert-danger");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task CancelSubscription(SubscriptionDto subscription)
    {
        var reason = await JSRuntime.InvokeAsync<string>("prompt", "Please provide a cancellation reason:");
        if (!string.IsNullOrEmpty(reason))
        {
            try
            {
                var success = await SubscriptionService.CancelSubscriptionAsync(subscription.Id, reason);
                if (success)
                {
                    ShowAlert("Subscription cancelled successfully", "alert-success");
                    await LoadSubscriptions();
                }
                else
                {
                    ShowAlert("Failed to cancel subscription", "alert-danger");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error cancelling subscription");
                ShowAlert("An error occurred while cancelling the subscription", "alert-danger");
            }
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Trial" => "bg-info",
            "Active" => "bg-success",
            "PastDue" => "bg-warning",
            "Suspended" => "bg-secondary",
            "Cancelled" => "bg-danger",
            "Expired" => "bg-dark",
            _ => "bg-secondary"
        };
    }

    private void ShowAlert(string message, string cssClass)
    {
        alertMessage = message;
        alertClass = cssClass;
    }

    private void ClearAlert()
    {
        alertMessage = "";
    }
}