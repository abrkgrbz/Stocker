@page "/login"
@using Stocker.Web.Portal.Models
@using Stocker.Web.Portal.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow">
                <div class="card-body p-5">
                    <h2 class="text-center mb-4">Stocker Portal Giriş</h2>
                    
                    <TenantInfo />
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            @errorMessage
                            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                        </div>
                    }

                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="username" class="form-label">Kullanıcı Adı</label>
                            <InputText @bind-Value="loginModel.Email" 
                                       class="form-control" 
                                       id="username" 
                                       placeholder="Kullanıcı adınız" />
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Şifre</label>
                            <InputText @bind-Value="loginModel.Password" 
                                       type="password" 
                                       class="form-control" 
                                       id="password" 
                                       placeholder="Şifreniz" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="rememberMe">
                            <label class="form-check-label" for="rememberMe">
                                Beni hatırla
                            </label>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Giriş yapılıyor...</span>
                                }
                                else
                                {
                                    <span>Giriş Yap</span>
                                }
                            </button>
                        </div>

                        <hr class="my-4">

                        <div class="text-center">
                            <p class="mb-0">Hesabınız yok mu?</p>
                            <a href="/register" class="text-decoration-none">Hemen Kayıt Olun</a>
                        </div>

                        <div class="text-center mt-3">
                            <a href="/forgot-password" class="text-decoration-none small">Şifremi Unuttum</a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var result = await AuthService.LoginAsync(loginModel);
            
            if (result.Success)
            {
                // Başarılı giriş - Ana sayfaya yönlendir
                // Force reload yapma, authentication state'in güncellenmesini bekle
                await Task.Delay(100); // LocalStorage yazma işleminin tamamlanması için kısa bekleme
                Navigation.NavigateTo("/", false);
            }
            else
            {
                errorMessage = string.Join(", ", result.Errors);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Giriş yapılırken bir hata oluştu. Lütfen tekrar deneyin.";
        }
        finally
        {
            isLoading = false;
        }
    }
}