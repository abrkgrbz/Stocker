@page "/tenant-management"
@using Stocker.Web.Portal.Services
@using System.Text.Json
@inject IApiService ApiService
@inject ILogger<TenantManagement> Logger
@inject NavigationManager Navigation

<h3>Tenant Yönetimi ve CRM Test</h3>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <h5>Mevcut Tenant'lar</h5>
                </div>
                <div class="card-body">
                    <button class="btn btn-primary mb-3" @onclick="LoadTenants" disabled="@isLoading">
                        @if (isLoading && currentOperation == "load")
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        Tenant'ları Listele
                    </button>

                    @if (tenants != null && tenants.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Tenant ID</th>
                                        <th>İsim</th>
                                        <th>Kod</th>
                                        <th>Veritabanı</th>
                                        <th>Durum</th>
                                        <th>CRM Durumu</th>
                                        <th>İşlemler</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var tenant in tenants)
                                    {
                                        <tr>
                                            <td><small>@tenant.Id</small></td>
                                            <td>@tenant.Name</td>
                                            <td>@tenant.Code</td>
                                            <td>@tenant.DatabaseName</td>
                                            <td>
                                                <span class="badge @(tenant.IsActive ? "bg-success" : "bg-danger")">
                                                    @(tenant.IsActive ? "Aktif" : "Pasif")
                                                </span>
                                            </td>
                                            <td>
                                                @if (crmStatuses.ContainsKey(tenant.Id))
                                                {
                                                    <span class="badge @(crmStatuses[tenant.Id] ? "bg-info" : "bg-secondary")">
                                                        @(crmStatuses[tenant.Id] ? "CRM Aktif" : "CRM Pasif")
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                                }
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => SelectTenant(tenant)">
                                                    Seç
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info">
                            Tenant listesi yüklenmedi. "Tenant'ları Listele" butonuna tıklayın.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (selectedTenant != null)
    {
        <div class="row mt-4">
            <div class="col-md-12">
                <div class="card border-primary">
                    <div class="card-header bg-primary text-white">
                        <h5>Seçili Tenant: @selectedTenant.Name (@selectedTenant.Code)</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p><strong>Tenant ID:</strong> @selectedTenant.Id</p>
                                <p><strong>Veritabanı:</strong> @selectedTenant.DatabaseName</p>
                                <p><strong>E-posta:</strong> @selectedTenant.ContactEmail</p>
                            </div>
                            <div class="col-md-6">
                                <div class="btn-group" role="group">
                                    <button class="btn btn-success" @onclick="EnableCRMForSelectedTenant" disabled="@isLoading">
                                        @if (isLoading && currentOperation == "enable")
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        }
                                        CRM'i Etkinleştir
                                    </button>
                                    <button class="btn btn-warning" @onclick="DisableCRMForSelectedTenant" disabled="@isLoading">
                                        @if (isLoading && currentOperation == "disable")
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        }
                                        CRM'i Kapat
                                    </button>
                                    <button class="btn btn-info" @onclick="CheckSelectedTenantCRMStatus" disabled="@isLoading">
                                        @if (isLoading && currentOperation == "check")
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        }
                                        Durumu Kontrol Et
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="alert @messageClass alert-dismissible fade show" role="alert">
                    @message
                    <button type="button" class="btn-close" @onclick="ClearMessage"></button>
                </div>
            </div>
        </div>
    }

    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>Yeni Tenant Oluştur (Test İçin)</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <input type="text" class="form-control" placeholder="Tenant Adı" @bind="newTenantName" />
                        </div>
                        <div class="col-md-3">
                            <input type="text" class="form-control" placeholder="Tenant Kodu" @bind="newTenantCode" />
                        </div>
                        <div class="col-md-3">
                            <input type="email" class="form-control" placeholder="E-posta" @bind="newTenantEmail" />
                        </div>
                        <div class="col-md-3">
                            <button class="btn btn-success w-100" @onclick="CreateNewTenant" disabled="@isLoading">
                                @if (isLoading && currentOperation == "create")
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                Tenant Oluştur
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<TenantDto>? tenants;
    private TenantDto? selectedTenant;
    private Dictionary<Guid, bool> crmStatuses = new();
    private bool isLoading = false;
    private string currentOperation = "";
    private string message = "";
    private string messageClass = "alert-info";

    private string newTenantName = "";
    private string newTenantCode = "";
    private string newTenantEmail = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadTenants();
    }

    private async Task LoadTenants()
    {
        isLoading = true;
        currentOperation = "load";
        message = "";

        try
        {
            var response = await ApiService.GetAsync<TenantsResponse>("/api/master/tenants");
            
            if (response?.Data != null)
            {
                tenants = response.Data;
                ShowMessage($"{tenants.Count} tenant yüklendi.", "alert-success");
                
                // Her tenant için CRM durumunu kontrol et
                foreach (var tenant in tenants)
                {
                    _ = CheckCRMStatusForTenant(tenant.Id);
                }
            }
            else
            {
                ShowMessage("Tenant listesi alınamadı.", "alert-warning");
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Hata: {ex.Message}", "alert-danger");
            Logger.LogError(ex, "Tenant listesi yüklenirken hata oluştu");
        }
        finally
        {
            isLoading = false;
            currentOperation = "";
        }
    }

    private async Task CheckCRMStatusForTenant(Guid tenantId)
    {
        try
        {
            var response = await ApiService.GetAsync<CRMStatusResponse>($"/api/admin/tenant-modules/{tenantId}/crm/status");
            if (response != null)
            {
                crmStatuses[tenantId] = response.CRMEnabled;
                StateHasChanged();
            }
        }
        catch
        {
            crmStatuses[tenantId] = false;
        }
    }

    private void SelectTenant(TenantDto tenant)
    {
        selectedTenant = tenant;
        ShowMessage($"'{tenant.Name}' tenant'ı seçildi.", "alert-info");
    }

    private async Task EnableCRMForSelectedTenant()
    {
        if (selectedTenant == null) return;

        isLoading = true;
        currentOperation = "enable";

        try
        {
            var response = await ApiService.PostAsync<ApiResponse>($"/api/admin/tenant-modules/{selectedTenant.Id}/crm/enable", new { });
            
            if (response != null)
            {
                ShowMessage($"CRM başarıyla etkinleştirildi: {response.Message}", "alert-success");
                await CheckCRMStatusForTenant(selectedTenant.Id);
            }
            else
            {
                ShowMessage("CRM etkinleştirilemedi.", "alert-danger");
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Hata: {ex.Message}", "alert-danger");
            Logger.LogError(ex, "CRM etkinleştirilirken hata oluştu");
        }
        finally
        {
            isLoading = false;
            currentOperation = "";
        }
    }

    private async Task DisableCRMForSelectedTenant()
    {
        if (selectedTenant == null) return;

        isLoading = true;
        currentOperation = "disable";

        try
        {
            var response = await ApiService.PostAsync<ApiResponse>($"/api/admin/tenant-modules/{selectedTenant.Id}/crm/disable", new { });
            
            if (response != null)
            {
                ShowMessage($"CRM devre dışı bırakıldı: {response.Message}", "alert-warning");
                await CheckCRMStatusForTenant(selectedTenant.Id);
            }
            else
            {
                ShowMessage("CRM devre dışı bırakılamadı.", "alert-danger");
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Hata: {ex.Message}", "alert-danger");
            Logger.LogError(ex, "CRM devre dışı bırakılırken hata oluştu");
        }
        finally
        {
            isLoading = false;
            currentOperation = "";
        }
    }

    private async Task CheckSelectedTenantCRMStatus()
    {
        if (selectedTenant == null) return;

        isLoading = true;
        currentOperation = "check";

        try
        {
            await CheckCRMStatusForTenant(selectedTenant.Id);
            var status = crmStatuses.ContainsKey(selectedTenant.Id) && crmStatuses[selectedTenant.Id];
            ShowMessage($"CRM Durumu: {(status ? "Aktif" : "Pasif")}", status ? "alert-success" : "alert-warning");
        }
        finally
        {
            isLoading = false;
            currentOperation = "";
        }
    }

    private async Task CreateNewTenant()
    {
        if (string.IsNullOrEmpty(newTenantName) || string.IsNullOrEmpty(newTenantCode) || string.IsNullOrEmpty(newTenantEmail))
        {
            ShowMessage("Lütfen tüm alanları doldurun!", "alert-danger");
            return;
        }

        isLoading = true;
        currentOperation = "create";

        try
        {
            var request = new
            {
                Name = newTenantName,
                Code = newTenantCode,
                ContactEmail = newTenantEmail,
                Description = $"Test tenant - {DateTime.Now}"
            };

            var response = await ApiService.PostAsync<ApiResponse>("/api/master/tenants", request);
            
            if (response != null)
            {
                ShowMessage($"Tenant başarıyla oluşturuldu!", "alert-success");
                newTenantName = "";
                newTenantCode = "";
                newTenantEmail = "";
                await LoadTenants();
            }
            else
            {
                ShowMessage("Tenant oluşturulamadı.", "alert-danger");
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Hata: {ex.Message}", "alert-danger");
            Logger.LogError(ex, "Tenant oluşturulurken hata oluştu");
        }
        finally
        {
            isLoading = false;
            currentOperation = "";
        }
    }

    private void ShowMessage(string msg, string cssClass)
    {
        message = msg;
        messageClass = cssClass;
    }

    private void ClearMessage()
    {
        message = "";
    }

    // DTO modelleri
    public class TenantsResponse
    {
        public List<TenantDto>? Data { get; set; }
        public int TotalCount { get; set; }
    }

    public class TenantDto
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public string Code { get; set; } = "";
        public string DatabaseName { get; set; } = "";
        public bool IsActive { get; set; }
        public string ContactEmail { get; set; } = "";
    }

    public class CRMStatusResponse
    {
        public Guid TenantId { get; set; }
        public bool CRMEnabled { get; set; }
        public string DatabaseName { get; set; } = "";
    }

    public class ApiResponse
    {
        public string Message { get; set; } = "";
        public string? Error { get; set; }
    }
}