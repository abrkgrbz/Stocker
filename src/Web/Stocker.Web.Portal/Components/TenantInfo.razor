@inject IHttpContextAccessor HttpContextAccessor
@inject IConfiguration Configuration

<div class="alert alert-info">
    <h6>Tenant Test Information</h6>
    <p class="mb-1"><strong>Current Host:</strong> @CurrentHost</p>
    <p class="mb-1"><strong>Detected Subdomain:</strong> @(DetectedSubdomain ?? "None")</p>
    <p class="mb-1"><strong>Tenant Code:</strong> @(DetectedSubdomain ?? "No tenant detected")</p>
    <p class="mb-0"><strong>API Base URL:</strong> @ApiBaseUrl</p>
</div>

@code {
    private string? CurrentHost { get; set; }
    private string? DetectedSubdomain { get; set; }
    private string? ApiBaseUrl { get; set; }

    protected override void OnInitialized()
    {
        try
        {
            CurrentHost = HttpContextAccessor.HttpContext?.Request.Host.Host ?? "Unknown";
            DetectedSubdomain = ExtractSubdomain(CurrentHost);
            ApiBaseUrl = Configuration["ApiSettings:BaseUrl"] ?? "Not configured";
        }
        catch (Exception ex)
        {
            CurrentHost = $"Error: {ex.Message}";
        }
    }

    private string? ExtractSubdomain(string host)
    {
        if (host.StartsWith("localhost", StringComparison.OrdinalIgnoreCase) || 
            host.StartsWith("127.0.0.1") ||
            host.StartsWith("[::1]"))
        {
            return null;
        }

        var parts = host.Split('.');
        if (parts.Length >= 3)
        {
            var subdomain = parts[0];
            if (subdomain == "www" || subdomain == "api" || subdomain == "admin")
                return null;
            return subdomain.ToLower();
        }

        return null;
    }
}