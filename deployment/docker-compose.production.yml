version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stocker-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-stocker_master}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - stocker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: stocker-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    networks:
      - stocker-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # API Service
  stocker-api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.api
    image: stocker-api:${VERSION:-latest}
    container_name: stocker-api
    restart: unless-stopped
    environment:
      # ASP.NET Core
      ASPNETCORE_ENVIRONMENT: ${ENVIRONMENT:-Production}
      ASPNETCORE_URLS: http://+:80;https://+:443
      
      # Database
      ConnectionStrings__MasterDb: Host=postgres;Port=5432;Database=${DB_NAME:-stocker_master};Username=${DB_USER:-postgres};Password=${DB_PASSWORD}
      ConnectionStrings__Redis: redis:6379,password=${REDIS_PASSWORD}
      
      # JWT Settings
      JwtSettings__SecretKey: ${JWT_SECRET}
      JwtSettings__Issuer: ${JWT_ISSUER:-Stocker}
      JwtSettings__Audience: ${JWT_AUDIENCE:-Stocker}
      JwtSettings__AccessTokenExpirationMinutes: ${JWT_ACCESS_EXPIRY:-60}
      JwtSettings__RefreshTokenExpirationDays: ${JWT_REFRESH_EXPIRY:-7}
      
      # Password Policy
      PasswordPolicy__MinimumLength: 8
      PasswordPolicy__RequireUppercase: true
      PasswordPolicy__RequireLowercase: true
      PasswordPolicy__RequireDigit: true
      PasswordPolicy__RequireNonAlphanumeric: true
      
      # SignalR
      SignalR__EnableDetailedErrors: ${SIGNALR_DETAILED_ERRORS:-false}
      
      # CORS
      CORS__Origins: ${CORS_ORIGINS:-http://localhost:3000}
      
      # Serilog
      Serilog__MinimumLevel: ${LOG_LEVEL:-Information}
    ports:
      - "${API_PORT:-5104}:80"
      - "${API_HTTPS_PORT:-5105}:443"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - stocker-network
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./certs:/https:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Frontend Web Application
  stocker-web:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.web
    image: stocker-web:${VERSION:-latest}
    container_name: stocker-web
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: ${PUBLIC_API_URL:-http://localhost:5104}
      REACT_APP_SIGNALR_URL: ${PUBLIC_SIGNALR_URL:-http://localhost:5104}
      REACT_APP_ENVIRONMENT: ${ENVIRONMENT:-Production}
    ports:
      - "${WEB_PORT:-3000}:80"
    depends_on:
      - stocker-api
    networks:
      - stocker-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Database Admin (Optional - remove in production)
  adminer:
    image: adminer:latest
    container_name: stocker-adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8090}:8080"
    networks:
      - stocker-network
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: dracula
    profiles:
      - debug
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: stocker-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      - stocker-api
      - stocker-web
    networks:
      - stocker-network
    profiles:
      - proxy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  stocker-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local