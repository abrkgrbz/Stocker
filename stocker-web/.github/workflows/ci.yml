name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'stocker-web/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'stocker-web/**'
      - '.github/workflows/ci.yml'

defaults:
  run:
    working-directory: stocker-web

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: stocker-web/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: stocker-web/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests with coverage
        run: npm run test:coverage
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          directory: ./stocker-web/coverage
          flags: frontend
          name: stocker-web
          fail_ci_if_error: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: stocker-web/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Check bundle size
        run: |
          echo "Bundle size report:"
          du -sh dist/
          find dist -name "*.js" -size +500k -exec ls -lh {} \;
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: stocker-web/dist/
          retention-days: 7

  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: stocker-web/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run accessibility tests
        run: npm test -- src/__tests__/a11y/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: stocker-web/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Run Snyk security test
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=stocker-web/package.json

  quality-gates:
    name: Quality Gates Check
    runs-on: ubuntu-latest
    needs: [lint, test, build, accessibility]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: stocker-web/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check coverage thresholds
        run: |
          npm run test:coverage
          echo "Checking if coverage meets thresholds..."
          # Coverage thresholds are defined in vitest.config.ts
      
      - name: Validate quality metrics
        run: |
          echo "âœ… Quality Gates Summary:"
          echo "- Linting: Passed"
          echo "- Tests: Passed"
          echo "- Build: Successful"
          echo "- Accessibility: Validated"
          echo "- Coverage: Meets thresholds (60%+)"