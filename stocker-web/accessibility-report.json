{
  "summary": {
    "filesScanned": 177,
    "filesWithIssues": 113,
    "totalIssues": 126,
    "timestamp": "2025-09-17T04:06:04.032Z"
  },
  "issues": [
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { Component, ErrorInfo, ReactNode } from 'react'\rimport { Button, Result } from 'antd'\rimport { ReloadOutlined } from '@ant-design/icons'\rinterface Props {\r  children: ReactNode\r  fallback?: ReactNode\r}\rinterface State {\r  hasError: boolean\r  error: Error | null\r  errorInfo: ErrorInfo | null\r}\rclass ErrorBoundary extends Component<Props, State> {\r  constructor(props: Props) {\r    super(props)\r    this.state = {\r      hasError: false,\r      error: null,\r      errorInfo: null\r    }\r  }\r  static getDerivedStateFromError(error: Error): State {\r    return {\r      hasError: true,\r      error,\r      errorInfo: null\r    }\r  }\r  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r    // Log error to console in development\r    if (import.meta.env.DEV) {\r    }\r    // Report to Sentry in production\r    if (import.meta.env.PROD && window.Sentry) {\r      window.Sentry.captureException(error, {\r        contexts: {\r          react: {\r            componentStack: errorInfo.componentStack\r          }\r        }\r      })\r    }\r    this.setState({\r      error,\r      errorInfo\r    })\r  }\r  handleReset = () => {\r    this.setState({\r      hasError: false,\r      error: null,\r      errorInfo: null\r    })\r    // Optionally reload the page\r    window.location.reload()\r  }\r  render() {\r    if (this.state.hasError) {\r      if (this.props.fallback) {\r        return this.props.fallback\r      }\r      return (\r        <div style={{\r          height: '100vh',\r          display: 'flex',\r          alignItems: 'center',\r          justifyContent: 'center',\r          padding: '20px'\r        }}>\r          <Result\r            status=\"500\"\r            title=\"Bir şeyler yanlış gitti\"\r            subTitle=\"Üzgünüz, beklenmeyen bir hata oluştu. Lütfen sayfayı yenileyin veya daha sonra tekrar deneyin.\"\r            extra={[\r              <Button \r                type=\"primary\" \r                icon={<ReloadOutlined />}\r                onClick={this.handleReset}\r                key=\"reload\"\r               aria-label=\"reload outlined\">\r                Sayfayı Yenile\r              </Button>,\r              <Button \r                key=\"home\"\r                onClick={() => window.location.href = '/'}\r              >\r                Ana Sayfaya Dön\r              </Button>\r            ]}\r          />\r          {import.meta.env.DEV && this.state.error && (\r            <details style={{\r              marginTop: '20px',\r              padding: '20px',\r              background: '#f5f5f5',\r              borderRadius: '4px',\r              maxWidth: '800px',\r              overflow: 'auto'\r            }}>\r              <summary style={{ cursor: 'pointer', fontWeight: 'bold' }}>\r                Hata Detayları (Sadece Geliştirme Modunda)\r              </summary>\r              <pre style={{ marginTop: '10px', whiteSpace: 'pre-wrap' }}>\r                {this.state.error.toString()}\r                {this.state.errorInfo?.componentStack}\r              </pre>\r            </details>\r          )}\r        </div>\r      )\r    }\r    return this.props.children\r  }\r}\rexport default ErrorBoundary",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/components/ErrorBoundary/ErrorBoundary.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Modal,\r  Result,\r  Button,\r  Input,\r  Space,\r  Typography,\r  Alert,\r  Progress,\r  message,\r  Spin\r} from 'antd';\rimport {\r  MailOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  ReloadOutlined,\r  SendOutlined,\r  ClockCircleOutlined,\r  SafetyOutlined\r} from '@ant-design/icons';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rinterface EmailVerificationProps {\r  email: string;\r  onVerified: () => void;\r  onResend?: () => Promise<void>;\r  autoSend?: boolean;\r}\rexport const EmailVerification: React.FC<EmailVerificationProps> = ({\r  email,\r  onVerified,\r  onResend,\r  autoSend = true\r}) => {\r  const [status, setStatus] = useState<'pending' | 'sent' | 'verified' | 'expired'>('pending');\r  const [verificationCode, setVerificationCode] = useState('');\r  const [loading, setLoading] = useState(false);\r  const [resendTimer, setResendTimer] = useState(0);\r  const [attempts, setAttempts] = useState(0);\r  const maxAttempts = 5;\r  useEffect(() => {\r    if (autoSend && status === 'pending') {\r      sendVerificationEmail();\r    }\r  }, []);\r  useEffect(() => {\r    let interval: NodeJS.Timeout;\r    if (resendTimer > 0) {\r      interval = setInterval(() => {\r        setResendTimer((prev) => prev - 1);\r      }, 1000);\r    }\r    return () => clearInterval(interval);\r  }, [resendTimer]);\r  const sendVerificationEmail = async () => {\r    setLoading(true);\r    try {\r      // Simulate API call\r      await new Promise(resolve => setTimeout(resolve, 1500));\r      setStatus('sent');\r      setResendTimer(60); // 60 seconds cooldown\r      message.success(`Doğrulama e-postası ${email} adresine gönderildi`);\r    } catch (error) {\r      message.error('E-posta gönderilemedi. Lütfen tekrar deneyin.');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleResend = async () => {\r    if (resendTimer > 0) return;\r    setAttempts(prev => prev + 1);\r    if (attempts >= maxAttempts) {\r      message.error('Çok fazla deneme yaptınız. Lütfen daha sonra tekrar deneyin.');\r      return;\r    }\r    if (onResend) {\r      await onResend();\r    } else {\r      await sendVerificationEmail();\r    }\r  };\r  const handleVerifyCode = async () => {\r    if (verificationCode.length !== 6) {\r      message.error('Lütfen 6 haneli doğrulama kodunu girin');\r      return;\r    }\r    setLoading(true);\r    try {\r      // Simulate verification\r      await new Promise(resolve => setTimeout(resolve, 1500));\r      // Mock verification - in real app, check with backend\r      if (verificationCode === '123456') {\r        setStatus('verified');\r        message.success('E-posta adresiniz başarıyla doğrulandı!');\r        setTimeout(() => {\r          onVerified();\r        }, 2000);\r      } else {\r        message.error('Doğrulama kodu hatalı');\r      }\r    } catch (error) {\r      message.error('Doğrulama başarısız');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const renderContent = () => {\r    switch (status) {\r      case 'pending':\r        return (\r          <div className=\"email-verification-content\">\r            <Spin size=\"large\" />\r            <Title level={4} style={{ marginTop: 24 }}>\r              E-posta Gönderiliyor...\r            </Title>\r          </div>\r        );\r      case 'sent':\r        return (\r          <motion.div\r            className=\"email-verification-content\"\r            initial={{ opacity: 0, y: 20 }}\r            animate={{ opacity: 1, y: 0 }}\r            transition={{ duration: 0.3 }}\r          >\r            <div className=\"email-icon-container\">\r              <MailOutlined style={{ fontSize: 64, color: '#667eea' }} />\r            </div>\r            <Title level={3}>E-posta Doğrulama</Title>\r            <Paragraph style={{ textAlign: 'center', marginBottom: 24 }}>\r              <Text>{email}</Text> adresine bir doğrulama kodu gönderdik.\r              <br />\r              Lütfen e-postanızı kontrol edin ve 6 haneli kodu girin.\r            </Paragraph>\r            <div className=\"verification-code-input\">\r              <Input\r                size=\"large\"\r                placeholder=\"000000\"\r                maxLength={6}\r                value={verificationCode}\r                onChange={(e) = aria-label=\"input field\"> setVerificationCode(e.target.value.replace(/\\D/g, ''))}\r                onPressEnter={handleVerifyCode}\r                style={{\r                  fontSize: 24,\r                  textAlign: 'center',\r                  letterSpacing: 8,\r                  fontWeight: 600\r                }}\r              />\r            </div>\r            <Space direction=\"vertical\" style={{ width: '100%', marginTop: 24 }}>\r              <Button\r                type=\"primary\"\r                size=\"large\"\r                block\r                loading={loading}\r                onClick={handleVerifyCode}\r                disabled={verificationCode.length !== 6}\r                icon={<CheckCircleOutlined />}\r               aria-label=\"check circle outlined\">\r                Doğrula\r              </Button>\r              <Button\r                size=\"large\"\r                block\r                onClick={handleResend}\r                disabled={resendTimer > 0}\r                icon={<ReloadOutlined />}\r              >\r                {resendTimer > 0 \r                  ? `Tekrar gönder (${resendTimer}s)` \r                  : 'Kodu Tekrar Gönder'}\r              </Button>\r            </Space>\r            {attempts > 0 && (\r              <Alert\r                message={`${maxAttempts - attempts} deneme hakkınız kaldı`}\r                type=\"warning\"\r                showIcon\r                style={{ marginTop: 16 }}\r              />\r            )}\r            <div className=\"email-tips\">\r              <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                <SafetyOutlined /> E-posta gelmedi mi? Spam klasörünü kontrol edin.\r              </Text>\r            </div>\r          </motion.div>\r        );\r      case 'verified':\r        return (\r          <motion.div\r            className=\"email-verification-content\"\r            initial={{ opacity: 0, scale: 0.8 }}\r            animate={{ opacity: 1, scale: 1 }}\r            transition={{ duration: 0.5 }}\r          >\r            <Result\r              status=\"success\"\r              title=\"E-posta Doğrulandı!\"\r              subTitle=\"E-posta adresiniz başarıyla doğrulandı. Yönlendiriliyorsunuz...\"\r              icon={<CheckCircleOutlined style={{ color: '#52c41a' }} />}\r            />\r          </motion.div>\r        );\r      case 'expired':\r        return (\r          <motion.div\r            className=\"email-verification-content\"\r            initial={{ opacity: 0, y: 20 }}\r            animate={{ opacity: 1, y: 0 }}\r          >\r            <Result\r              status=\"warning\"\r              title=\"Doğrulama Süresi Doldu\"\r              subTitle=\"Doğrulama kodunuzun süresi doldu. Lütfen yeni bir kod isteyin.\"\r              icon={<ClockCircleOutlined />}\r              extra={[\r                <Button\r                  type=\"primary\"\r                  key=\"resend\"\r                  onClick={handleResend}\r                  icon={<SendOutlined />}\r                 aria-label=\"send outlined\">\r                  Yeni Kod Gönder\r                </Button>\r              ]}\r            />\r          </motion.div>\r        );\r      default:\r        return null;\r    }\r  };\r  return (\r    <div className=\"email-verification-container\">\r      <AnimatePresence mode=\"wait\">\r        {renderContent()}\r      </AnimatePresence>\r    </div>\r  );\r};\r// Email Verification Modal Component\rinterface EmailVerificationModalProps {\r  visible: boolean;\r  email: string;\r  onClose: () => void;\r  onVerified: () => void;\r}\rexport const EmailVerificationModal: React.FC<EmailVerificationModalProps> = ({\r  visible,\r  email,\r  onClose,\r  onVerified\r}) => {\r  return (\r    <Modal\r      title={null}\r      open={visible}\r      onCancel={onClose}\r      footer={null}\r      width={500}\r      centered\r      className=\"email-verification-modal\"\r      closeIcon={null}\r      maskClosable={false}\r    >\r      <EmailVerification\r        email={email}\r        onVerified={() => {\r          onVerified();\r          onClose();\r        }}\r      />\r    </Modal>\r  );\r};\r// Inline Email Verification Component\rinterface InlineEmailVerificationProps {\r  email: string;\r  onVerified: () => void;\r}\rexport const InlineEmailVerification: React.FC<InlineEmailVerificationProps> = ({\r  email,\r  onVerified\r}) => {\r  const [sent, setSent] = useState(false);\r  const [code, setCode] = useState('');\r  const [loading, setLoading] = useState(false);\r  const handleSend = async () => {\r    setLoading(true);\r    try {\r      await new Promise(resolve => setTimeout(resolve, 1000));\r      setSent(true);\r      message.success('Doğrulama kodu gönderildi');\r    } catch (error) {\r      message.error('Kod gönderilemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleVerify = async () => {\r    if (code.length !== 6) return;\r    setLoading(true);\r    try {\r      await new Promise(resolve => setTimeout(resolve, 1000));\r      message.success('E-posta doğrulandı!');\r      onVerified();\r    } catch (error) {\r      message.error('Doğrulama başarısız');\r    } finally {\r      setLoading(false);\r    }\r  };\r  return (\r    <div className=\"inline-email-verification\">\r      <Alert\r        message=\"E-posta Doğrulama Gerekli\"\r        description={`${email} adresini doğrulamanız gerekiyor`}\r        type=\"warning\"\r        showIcon\r        action={\r          !sent ? (\r            <Button\r              size=\"small\"\r              type=\"primary\"\r              loading={loading}\r              onClick={handleSend}\r            >\r              Kod Gönder\r            </Button>\r          ) : (\r            <Space>\r              <Input\r                size=\"small\"\r                placeholder=\"6 haneli kod\"\r                maxLength={6}\r                value={code}\r                onChange={(e) = aria-label=\"input field\"> setCode(e.target.value.replace(/\\D/g, ''))}\r                style={{ width: 120 }}\r              />\r              <Button\r                size=\"small\"\r                type=\"primary\"\r                loading={loading}\r                onClick={handleVerify}\r                disabled={code.length !== 6}\r              >\r                Doğrula\r              </Button>\r            </Space>\r          )\r        }\r      />\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/components/EmailVerification/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Input,\r  Button,\r  Space,\r  Tag,\r  Alert,\r  Typography,\r  Tooltip,\r  message,\r  Card,\r  Divider,\r  Progress,\r  Modal\r} from 'antd';\rimport {\r  GiftOutlined,\r  CopyOutlined,\r  CheckCircleOutlined,\r  UserAddOutlined,\r  TrophyOutlined,\r  PercentageOutlined,\r  ShareAltOutlined,\r  QrcodeOutlined,\r  TeamOutlined,\r  DollarOutlined\r} from '@ant-design/icons';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport { QRCodeSVG } from 'qrcode.react';\rimport './style.css';\rconst { Text, Title, Paragraph } = Typography;\rinterface ReferralInputProps {\r  value?: string;\r  onChange?: (code: string) => void;\r  onValidate?: (code: string) => Promise<ReferralInfo | null>;\r  placeholder?: string;\r  autoCheck?: boolean;\r}\rinterface ReferralInfo {\r  code: string;\r  discount: number;\r  discountType: 'percentage' | 'fixed';\r  referrerName?: string;\r  expiresAt?: Date;\r  usageLimit?: number;\r  usageCount?: number;\r  benefits?: string[];\r}\rexport const ReferralInput: React.FC<ReferralInputProps> = ({\r  value = '',\r  onChange,\r  onValidate,\r  placeholder = 'Referans kodunuz varsa girin',\r  autoCheck = true\r}) => {\r  const [code, setCode] = useState(value);\r  const [checking, setChecking] = useState(false);\r  const [referralInfo, setReferralInfo] = useState<ReferralInfo | null>(null);\r  const [error, setError] = useState<string | null>(null);\r  useEffect(() => {\r    if (autoCheck && code.length >= 4) {\r      checkReferralCode();\r    }\r  }, [code]);\r  const checkReferralCode = async () => {\r    if (!code || code.length < 4) return;\r    setChecking(true);\r    setError(null);\r    try {\r      // Simulate API call\r      await new Promise(resolve => setTimeout(resolve, 1000));\r      // Mock validation\r      if (code.toUpperCase() === 'WELCOME20' || code.toUpperCase() === 'FRIEND50') {\r        const info: ReferralInfo = {\r          code: code.toUpperCase(),\r          discount: code.toUpperCase() === 'WELCOME20' ? 20 : 50,\r          discountType: 'percentage',\r          referrerName: 'John Doe',\r          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\r          usageLimit: 100,\r          usageCount: 45,\r          benefits: [\r            'İlk ay %' + (code.toUpperCase() === 'WELCOME20' ? '20' : '50') + ' indirim',\r            'Ücretsiz premium destek',\r            '2x depolama alanı'\r          ]\r        };\r        setReferralInfo(info);\r        message.success('Referans kodu geçerli! İndirim uygulandı.');\r        if (onValidate) {\r          const result = await onValidate(code);\r          if (result) {\r            setReferralInfo(result);\r          }\r        }\r      } else {\r        setError('Geçersiz referans kodu');\r        setReferralInfo(null);\r      }\r    } catch (err) {\r      setError('Referans kodu kontrol edilemedi');\r    } finally {\r      setChecking(false);\r    }\r  };\r  const handleCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r    const newCode = e.target.value.toUpperCase().replace(/[^A-Z0-9]/g, '');\r    setCode(newCode);\r    if (onChange) {\r      onChange(newCode);\r    }\r  };\r  return (\r    <div className=\"referral-input-container\">\r      <div className=\"referral-input-wrapper\">\r        <Input\r          size=\"large\"\r          placeholder={placeholder}\r          prefix={<GiftOutlined style={{ color: '#667eea' }} / aria-label=\"input field\">}\r          value={code}\r          onChange={handleCodeChange}\r          maxLength={20}\r          suffix={\r            checking ? (\r              <span style={{ color: '#667eea' }}>Kontrol ediliyor...</span>\r            ) : referralInfo ? (\r              <CheckCircleOutlined style={{ color: '#52c41a' }} />\r            ) : null\r          }\r        />\r        {!autoCheck && (\r          <Button\r            type=\"primary\"\r            loading={checking}\r            onClick={checkReferralCode}\r            disabled={code.length < 4}\r          >\r            Uygula\r          </Button>\r        )}\r      </div>\r      <AnimatePresence>\r        {referralInfo && (\r          <motion.div\r            initial={{ opacity: 0, height: 0 }}\r            animate={{ opacity: 1, height: 'auto' }}\r            exit={{ opacity: 0, height: 0 }}\r            transition={{ duration: 0.3 }}\r          >\r            <Alert\r              message={\r                <Space>\r                  <TrophyOutlined />\r                  <span>Tebrikler! {referralInfo.referrerName && `${referralInfo.referrerName} tarafından davet edildiniz.`}</span>\r                </Space>\r              }\r              description={\r                <div>\r                  <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\r                    <div>\r                      <Tag color=\"green\" icon={<PercentageOutlined />}>\r                        {referralInfo.discountType === 'percentage' \r                          ? `%${referralInfo.discount} İndirim` \r                          : `${referralInfo.discount}₺ İndirim`}\r                      </Tag>\r                      {referralInfo.expiresAt && (\r                        <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                          {new Date(referralInfo.expiresAt).toLocaleDateString('tr-TR')} tarihine kadar geçerli\r                        </Text>\r                      )}\r                    </div>\r                    {referralInfo.benefits && (\r                      <div className=\"referral-benefits\">\r                        {referralInfo.benefits.map((benefit, index) => (\r                          <div key={index} className=\"benefit-item\">\r                            <CheckCircleOutlined style={{ color: '#52c41a' }} />\r                            <Text>{benefit}</Text>\r                          </div>\r                        ))}\r                      </div>\r                    )}\r                  </Space>\r                </div>\r              }\r              type=\"success\"\r              showIcon\r              closable\r              style={{ marginTop: 12 }}\r            />\r          </motion.div>\r        )}\r        {error && (\r          <motion.div\r            initial={{ opacity: 0 }}\r            animate={{ opacity: 1 }}\r            exit={{ opacity: 0 }}\r          >\r            <Alert\r              message={error}\r              type=\"error\"\r              showIcon\r              closable\r              onClose={() => setError(null)}\r              style={{ marginTop: 12 }}\r            />\r          </motion.div>\r        )}\r      </AnimatePresence>\r    </div>\r  );\r};\r// Referral Share Component\rinterface ReferralShareProps {\r  referralCode: string;\r  referralUrl?: string;\r  rewards?: {\r    referrer: string;\r    referred: string;\r  };\r}\rexport const ReferralShare: React.FC<ReferralShareProps> = ({\r  referralCode,\r  referralUrl = `${window.location.origin}/register?ref=${referralCode}`,\r  rewards = {\r    referrer: '1 ay ücretsiz kullanım',\r    referred: '%20 indirim'\r  }\r}) => {\r  const [copied, setCopied] = useState(false);\r  const [showQR, setShowQR] = useState(false);\r  const copyToClipboard = (text: string) => {\r    navigator.clipboard.writeText(text);\r    setCopied(true);\r    message.success('Kopyalandı!');\r    setTimeout(() => setCopied(false), 2000);\r  };\r  const shareVia = (platform: string) => {\r    const text = `Stocker'a katıl ve ${rewards.referred} kazan! Referans kodum: ${referralCode}`;\r    const url = referralUrl;\r    switch (platform) {\r      case 'whatsapp':\r        window.open(`https://wa.me/?text=${encodeURIComponent(text + ' ' + url)}`);\r        break;\r      case 'twitter':\r        window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`);\r        break;\r      case 'linkedin':\r        window.open(`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}`);\r        break;\r      case 'email':\r        window.location.href = `mailto:?subject=Stocker Davetiyesi&body=${encodeURIComponent(text + '\\n\\n' + url)}`;\r        break;\r    }\r  };\r  return (\r    <Card className=\"referral-share-card\">\r      <div className=\"referral-share-header\">\r        <Title level={4}>\r          <GiftOutlined /> Arkadaşlarını Davet Et, Kazan!\r        </Title>\r        <Paragraph>\r          Her başarılı davet için <Tag color=\"green\">{rewards.referrer}</Tag> kazan.\r          Arkadaşların da <Tag color=\"blue\">{rewards.referred}</Tag> kazansın!\r        </Paragraph>\r      </div>\r      <Divider />\r      <div className=\"referral-code-display\">\r        <Text strong>Referans Kodun:</Text>\r        <div className=\"code-box\">\r          <Text code className=\"referral-code\">{referralCode}</Text>\r          <Button\r            icon={copied ? <CheckCircleOutlined /> : <CopyOutlined />}\r            onClick={() = aria-label=\"button\"> copyToClipboard(referralCode)}\r            type={copied ? 'primary' : 'default'}\r          >\r            {copied ? 'Kopyalandı' : 'Kopyala'}\r          </Button>\r        </div>\r      </div>\r      <div className=\"referral-url-display\">\r        <Text strong>Davet Linki:</Text>\r        <div className=\"url-box\">\r          <Text ellipsis className=\"referral-url\">{referralUrl}</Text>\r          <Space>\r            <Tooltip title=\"QR Kod\">\r              <Button\r                icon={<QrcodeOutlined />}\r                onClick={() = aria-label=\"qrcode outlined\"> setShowQR(true)}\r              />\r            </Tooltip>\r            <Button\r              icon={<CopyOutlined />}\r              onClick={() = aria-label=\"copy outlined\"> copyToClipboard(referralUrl)}\r            />\r          </Space>\r        </div>\r      </div>\r      <Divider />\r      <div className=\"share-buttons\">\r        <Text strong style={{ display: 'block', marginBottom: 12 }}>Paylaş:</Text>\r        <Space wrap>\r          <Button\r            onClick={() => shareVia('whatsapp')}\r            style={{ background: '#25D366', color: 'white', border: 'none' }}\r          >\r            WhatsApp\r          </Button>\r          <Button\r            onClick={() => shareVia('twitter')}\r            style={{ background: '#1DA1F2', color: 'white', border: 'none' }}\r          >\r            Twitter\r          </Button>\r          <Button\r            onClick={() => shareVia('linkedin')}\r            style={{ background: '#0077B5', color: 'white', border: 'none' }}\r          >\r            LinkedIn\r          </Button>\r          <Button\r            onClick={() => shareVia('email')}\r            icon={<MailOutlined />}\r          >\r            E-posta\r          </Button>\r        </Space>\r      </div>\r      <Modal\r        title=\"QR Kod\"\r        open={showQR}\r        onCancel={() => setShowQR(false)}\r        footer={null}\r        width={320}\r        centered\r      >\r        <div style={{ textAlign: 'center', padding: 20 }}>\r          <QRCodeSVG value={referralUrl} size={200} />\r          <Paragraph style={{ marginTop: 16 }}>\r            Bu QR kodu paylaşarak arkadaşlarını davet edebilirsin\r          </Paragraph>\r        </div>\r      </Modal>\r    </Card>\r  );\r};\r// Referral Stats Component\rinterface ReferralStatsProps {\r  stats: {\r    totalReferrals: number;\r    successfulReferrals: number;\r    pendingReferrals: number;\r    totalEarnings: number;\r    nextReward: string;\r    nextRewardProgress: number;\r  };\r}\rexport const ReferralStats: React.FC<ReferralStatsProps> = ({ stats }) => {\r  return (\r    <Card className=\"referral-stats-card\">\r      <Title level={4}>\r        <TrophyOutlined /> Referans İstatistiklerin\r      </Title>\r      <div className=\"stats-grid\">\r        <div className=\"stat-item\">\r          <div className=\"stat-icon\">\r            <TeamOutlined />\r          </div>\r          <div className=\"stat-content\">\r            <Text type=\"secondary\">Toplam Davet</Text>\r            <Title level={3}>{stats.totalReferrals}</Title>\r          </div>\r        </div>\r        <div className=\"stat-item\">\r          <div className=\"stat-icon success\">\r            <CheckCircleOutlined />\r          </div>\r          <div className=\"stat-content\">\r            <Text type=\"secondary\">Başarılı</Text>\r            <Title level={3}>{stats.successfulReferrals}</Title>\r          </div>\r        </div>\r        <div className=\"stat-item\">\r          <div className=\"stat-icon warning\">\r            <ClockCircleOutlined />\r          </div>\r          <div className=\"stat-content\">\r            <Text type=\"secondary\">Beklemede</Text>\r            <Title level={3}>{stats.pendingReferrals}</Title>\r          </div>\r        </div>\r        <div className=\"stat-item\">\r          <div className=\"stat-icon primary\">\r            <DollarOutlined />\r          </div>\r          <div className=\"stat-content\">\r            <Text type=\"secondary\">Kazancın</Text>\r            <Title level={3}>₺{stats.totalEarnings}</Title>\r          </div>\r        </div>\r      </div>\r      <Divider />\r      <div className=\"next-reward\">\r        <Text strong>Sonraki Ödül: {stats.nextReward}</Text>\r        <Progress\r          percent={stats.nextRewardProgress}\r          strokeColor={{\r            '0%': '#667eea',\r            '100%': '#764ba2'\r          }}\r          status=\"active\"\r        />\r        <Text type=\"secondary\" style={{ fontSize: 12 }}>\r          {100 - stats.nextRewardProgress}% kaldı\r        </Text>\r      </div>\r    </Card>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/components/ReferralCode/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { Button, Space, Divider, message, Spin } from 'antd';\rimport {\r  GoogleOutlined,\r  GithubOutlined,\r  LinkedinOutlined,\r  TwitterOutlined,\r  AppleOutlined,\r  WindowsOutlined\r} from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport './style.css';\rinterface SocialLoginProps {\r  onSuccess?: (provider: string, data: any) => void;\r  onError?: (provider: string, error: any) => void;\r  providers?: string[];\r  layout?: 'horizontal' | 'vertical' | 'grid';\r  size?: 'small' | 'middle' | 'large';\r  showLabels?: boolean;\r}\rconst defaultProviders = ['google', 'microsoft', 'linkedin'];\rconst providerConfig = {\r  google: {\r    name: 'Google',\r    icon: <GoogleOutlined />,\r    color: '#4285F4',\r    clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID || '',\r    scope: 'openid email profile'\r  },\r  microsoft: {\r    name: 'Microsoft',\r    icon: <WindowsOutlined />,\r    color: '#00A4EF',\r    clientId: process.env.REACT_APP_MICROSOFT_CLIENT_ID || '',\r    scope: 'openid email profile'\r  },\r  linkedin: {\r    name: 'LinkedIn',\r    icon: <LinkedinOutlined />,\r    color: '#0077B5',\r    clientId: process.env.REACT_APP_LINKEDIN_CLIENT_ID || '',\r    scope: 'r_emailaddress r_liteprofile'\r  },\r  github: {\r    name: 'GitHub',\r    icon: <GithubOutlined />,\r    color: '#333',\r    clientId: process.env.REACT_APP_GITHUB_CLIENT_ID || '',\r    scope: 'user:email'\r  },\r  apple: {\r    name: 'Apple',\r    icon: <AppleOutlined />,\r    color: '#000',\r    clientId: process.env.REACT_APP_APPLE_CLIENT_ID || '',\r    scope: 'name email'\r  },\r  twitter: {\r    name: 'Twitter',\r    icon: <TwitterOutlined />,\r    color: '#1DA1F2',\r    clientId: process.env.REACT_APP_TWITTER_CLIENT_ID || '',\r    scope: 'users.read tweet.read'\r  }\r};\rexport const SocialLogin: React.FC<SocialLoginProps> = ({\r  onSuccess,\r  onError,\r  providers = defaultProviders,\r  layout = 'horizontal',\r  size = 'large',\r  showLabels = true\r}) => {\r  const [loading, setLoading] = useState<string | null>(null);\r  const handleSocialLogin = async (provider: string) => {\r    setLoading(provider);\r    try {\r      const config = providerConfig[provider as keyof typeof providerConfig];\r      if (!config.clientId) {\r        throw new Error(`${provider} client ID not configured`);\r      }\r      // OAuth flow implementation\r      switch (provider) {\r        case 'google':\r          await handleGoogleLogin(config);\r          break;\r        case 'microsoft':\r          await handleMicrosoftLogin(config);\r          break;\r        case 'linkedin':\r          await handleLinkedInLogin(config);\r          break;\r        case 'github':\r          await handleGitHubLogin(config);\r          break;\r        default:\r          throw new Error(`${provider} login not implemented`);\r      }\r    } catch (error) {\r      message.error(`${provider} ile giriş başarısız`);\r      if (onError) {\r        onError(provider, error);\r      }\r    } finally {\r      setLoading(null);\r    }\r  };\r  const handleGoogleLogin = async (config: any) => {\r    // Load Google Sign-In SDK\r    return new Promise((resolve, reject) => {\r      const script = document.createElement('script');\r      script.src = 'https://accounts.google.com/gsi/client';\r      script.async = true;\r      script.defer = true;\r      script.onload = () => {\r        const google = (window as any).google;\r        google.accounts.id.initialize({\r          client_id: config.clientId,\r          callback: (response: any) => {\r            if (response.credential) {\r              // Decode JWT token\r              const payload = JSON.parse(atob(response.credential.split('.')[1]));\r              message.success('Google ile giriş başarılı!');\r              if (onSuccess) {\r                onSuccess('google', {\r                  token: response.credential,\r                  profile: payload\r                });\r              }\r              resolve(payload);\r            } else {\r              reject(new Error('Google login failed'));\r            }\r          }\r        });\r        google.accounts.id.prompt();\r      };\r      script.onerror = () => reject(new Error('Failed to load Google SDK'));\r      document.body.appendChild(script);\r    });\r  };\r  const handleMicrosoftLogin = async (config: any) => {\r    // Microsoft OAuth URL\r    const authUrl = new URL('https://login.microsoftonline.com/common/oauth2/v2.0/authorize');\r    authUrl.searchParams.append('client_id', config.clientId);\r    authUrl.searchParams.append('response_type', 'code');\r    authUrl.searchParams.append('redirect_uri', window.location.origin + '/auth/callback/microsoft');\r    authUrl.searchParams.append('scope', config.scope);\r    authUrl.searchParams.append('state', generateState());\r    // Open popup window\r    const popup = window.open(\r      authUrl.toString(),\r      'microsoft-login',\r      'width=500,height=600'\r    );\r    // Listen for callback\r    return new Promise((resolve, reject) => {\r      const checkInterval = setInterval(() => {\r        try {\r          if (popup?.closed) {\r            clearInterval(checkInterval);\r            reject(new Error('Login cancelled'));\r          }\r        } catch (e) {\r          // Cross-origin error, ignore\r        }\r      }, 1000);\r      // Listen for message from popup\r      window.addEventListener('message', (event) => {\r        if (event.origin !== window.location.origin) return;\r        if (event.data.type === 'microsoft-auth-success') {\r          clearInterval(checkInterval);\r          popup?.close();\r          message.success('Microsoft ile giriş başarılı!');\r          if (onSuccess) {\r            onSuccess('microsoft', event.data.payload);\r          }\r          resolve(event.data.payload);\r        }\r      });\r    });\r  };\r  const handleLinkedInLogin = async (config: any) => {\r    // LinkedIn OAuth URL\r    const authUrl = new URL('https://www.linkedin.com/oauth/v2/authorization');\r    authUrl.searchParams.append('response_type', 'code');\r    authUrl.searchParams.append('client_id', config.clientId);\r    authUrl.searchParams.append('redirect_uri', window.location.origin + '/auth/callback/linkedin');\r    authUrl.searchParams.append('scope', config.scope);\r    authUrl.searchParams.append('state', generateState());\r    window.location.href = authUrl.toString();\r  };\r  const handleGitHubLogin = async (config: any) => {\r    // GitHub OAuth URL\r    const authUrl = new URL('https://github.com/login/oauth/authorize');\r    authUrl.searchParams.append('client_id', config.clientId);\r    authUrl.searchParams.append('redirect_uri', window.location.origin + '/auth/callback/github');\r    authUrl.searchParams.append('scope', config.scope);\r    authUrl.searchParams.append('state', generateState());\r    window.location.href = authUrl.toString();\r  };\r  const generateState = () => {\r    return Math.random().toString(36).substring(2, 15);\r  };\r  const renderButton = (provider: string) => {\r    const config = providerConfig[provider as keyof typeof providerConfig];\r    if (!config) return null;\r    const isLoading = loading === provider;\r    return (\r      <motion.div\r        key={provider}\r        whileHover={{ scale: 1.02 }}\r        whileTap={{ scale: 0.98 }}\r      >\r        <Button\r          className={`social-login-btn social-login-${provider}`}\r          size={size}\r          icon={isLoading ? <Spin size=\"small\" /> : config.icon}\r          onClick={() = aria-label=\"button\"> handleSocialLogin(provider)}\r          disabled={loading !== null}\r          block={layout === 'vertical'}\r          style={{\r            borderColor: config.color,\r            color: loading === null ? config.color : undefined\r          }}\r        >\r          {showLabels && `${config.name} ile ${isLoading ? 'Bağlanıyor...' : 'Devam Et'}`}\r        </Button>\r      </motion.div>\r    );\r  };\r  const containerClass = `social-login-container social-login-${layout}`;\r  return (\r    <div className={containerClass}>\r      {layout === 'grid' ? (\r        <div className=\"social-login-grid\">\r          {providers.map(renderButton)}\r        </div>\r      ) : (\r        <Space \r          direction={layout === 'vertical' ? 'vertical' : 'horizontal'}\r          size=\"middle\"\r          style={{ width: layout === 'vertical' ? '100%' : 'auto' }}\r        >\r          {providers.map(renderButton)}\r        </Space>\r      )}\r    </div>\r  );\r};\r// Quick Social Login Bar\rinterface QuickSocialLoginProps {\r  onLogin: (provider: string, data: any) => void;\r}\rexport const QuickSocialLogin: React.FC<QuickSocialLoginProps> = ({ onLogin }) => {\r  return (\r    <div className=\"quick-social-login\">\r      <Divider>\r        <span style={{ fontSize: 13, color: '#8b95a7' }}>veya hızlı giriş</span>\r      </Divider>\r      <SocialLogin\r        providers={['google', 'microsoft', 'linkedin']}\r        layout=\"horizontal\"\r        size=\"middle\"\r        showLabels={false}\r        onSuccess={onLogin}\r      />\r    </div>\r  );\r};\r// Social Account Link Component\rinterface SocialAccountLinkProps {\r  linkedAccounts?: string[];\r  onLink: (provider: string) => void;\r  onUnlink: (provider: string) => void;\r}\rexport const SocialAccountLink: React.FC<SocialAccountLinkProps> = ({\r  linkedAccounts = [],\r  onLink,\r  onUnlink\r}) => {\r  const allProviders = Object.keys(providerConfig);\r  return (\r    <div className=\"social-account-link\">\r      <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\r        {allProviders.map(provider => {\r          const config = providerConfig[provider as keyof typeof providerConfig];\r          const isLinked = linkedAccounts.includes(provider);\r          return (\r            <div key={provider} className=\"social-account-item\">\r              <Space>\r                {config.icon}\r                <span>{config.name}</span>\r              </Space>\r              <Button\r                size=\"small\"\r                type={isLinked ? 'default' : 'primary'}\r                onClick={() => isLinked ? onUnlink(provider) : onLink(provider)}\r              >\r                {isLinked ? 'Bağlantıyı Kaldır' : 'Bağla'}\r              </Button>\r            </div>\r          );\r        })}\r      </Space>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/components/SocialLogin/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingLabels",
      "line": 237,
      "code": "<Input",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/components/TenantLoginModal/index.tsx",
      "severity": "error",
      "message": "Input without label or aria-label"
    },
    {
      "type": "noKeyboardHandlers",
      "line": 265,
      "code": "onClick={handleTenantLogin}",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/components/TenantLoginModal/index.tsx",
      "severity": "warning",
      "message": "Interactive element missing keyboard handler"
    },
    {
      "type": "noKeyboardHandlers",
      "line": 297,
      "code": "onClick={() => handleQuickAccess(tenant.slug)}",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/components/TenantLoginModal/index.tsx",
      "severity": "warning",
      "message": "Interactive element missing keyboard handler"
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useRef, useEffect } from 'react';\rimport {\r  Modal,\r  Input,\r  Button,\r  Space,\r  Typography,\r  Alert,\r  Tabs,\r  QRCode,\r  message,\r  Spin,\r  Divider,\r  Steps\r} from 'antd';\rimport {\r  MobileOutlined,\r  MailOutlined,\r  SafetyOutlined,\r  KeyOutlined,\r  CheckCircleOutlined,\r  CopyOutlined,\r  ReloadOutlined,\r  QrcodeOutlined\r} from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst { Step } = Steps;\rinterface TwoFactorSetupProps {\r  visible: boolean;\r  onClose: () => void;\r  onComplete: (method: string, data: any) => void;\r  userEmail?: string;\r  userPhone?: string;\r}\rexport const TwoFactorSetup: React.FC<TwoFactorSetupProps> = ({\r  visible,\r  onClose,\r  onComplete,\r  userEmail,\r  userPhone\r}) => {\r  const [activeTab, setActiveTab] = useState('authenticator');\r  const [currentStep, setCurrentStep] = useState(0);\r  const [qrCodeUrl, setQrCodeUrl] = useState('');\r  const [secretKey, setSecretKey] = useState('');\r  const [verificationCode, setVerificationCode] = useState('');\r  const [backupCodes, setBackupCodes] = useState<string[]>([]);\r  const [loading, setLoading] = useState(false);\r  useEffect(() => {\r    if (visible && activeTab === 'authenticator') {\r      generateAuthenticatorSetup();\r    }\r  }, [visible, activeTab]);\r  const generateAuthenticatorSetup = async () => {\r    setLoading(true);\r    try {\r      // Simulate API call\r      setTimeout(() => {\r        const secret = generateRandomSecret();\r        const otpUrl = `otpauth://totp/Stocker:${userEmail}?secret=${secret}&issuer=Stocker`;\r        setSecretKey(secret);\r        setQrCodeUrl(otpUrl);\r        setLoading(false);\r      }, 1000);\r    } catch (error) {\r      message.error('2FA kurulumu başlatılamadı');\r      setLoading(false);\r    }\r  };\r  const generateRandomSecret = () => {\r    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\r    let secret = '';\r    for (let i = 0; i < 32; i++) {\r      secret += chars[Math.floor(Math.random() * chars.length)];\r    }\r    return secret;\r  };\r  const generateBackupCodes = () => {\r    const codes = [];\r    for (let i = 0; i < 10; i++) {\r      const code = Math.random().toString(36).substring(2, 10).toUpperCase();\r      codes.push(code);\r    }\r    return codes;\r  };\r  const handleVerifyCode = async () => {\r    if (verificationCode.length !== 6) {\r      message.error('Lütfen 6 haneli kodu girin');\r      return;\r    }\r    setLoading(true);\r    try {\r      // Simulate verification\r      setTimeout(() => {\r        const codes = generateBackupCodes();\r        setBackupCodes(codes);\r        setCurrentStep(2);\r        message.success('2FA başarıyla etkinleştirildi!');\r        setLoading(false);\r      }, 1500);\r    } catch (error) {\r      message.error('Doğrulama kodu hatalı');\r      setLoading(false);\r    }\r  };\r  const handleSMSSetup = async () => {\r    setLoading(true);\r    try {\r      // Send SMS code\r      setTimeout(() => {\r        message.success('Doğrulama kodu SMS olarak gönderildi');\r        setCurrentStep(1);\r        setLoading(false);\r      }, 1500);\r    } catch (error) {\r      message.error('SMS gönderilemedi');\r      setLoading(false);\r    }\r  };\r  const handleEmailSetup = async () => {\r    setLoading(true);\r    try {\r      // Send email code\r      setTimeout(() => {\r        message.success('Doğrulama kodu e-posta adresinize gönderildi');\r        setCurrentStep(1);\r        setLoading(false);\r      }, 1500);\r    } catch (error) {\r      message.error('E-posta gönderilemedi');\r      setLoading(false);\r    }\r  };\r  const copyToClipboard = (text: string) => {\r    navigator.clipboard.writeText(text);\r    message.success('Kopyalandı!');\r  };\r  const downloadBackupCodes = () => {\r    const content = backupCodes.join('\\n');\r    const blob = new Blob([content], { type: 'text/plain' });\r    const url = URL.createObjectURL(blob);\r    const a = document.createElement('a');\r    a.href = url;\r    a.download = 'stocker-backup-codes.txt';\r    a.click();\r  };\r  const renderAuthenticatorSetup = () => (\r    <div className=\"twofa-setup-content\">\r      <Steps current={currentStep} style={{ marginBottom: 32 }}>\r        <Step title=\"QR Kod\" icon={<QrcodeOutlined />} />\r        <Step title=\"Doğrula\" icon={<SafetyOutlined />} />\r        <Step title=\"Yedek Kodlar\" icon={<KeyOutlined />} />\r      </Steps>\r      {currentStep === 0 && (\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          animate={{ opacity: 1, y: 0 }}\r          transition={{ duration: 0.3 }}\r        >\r          <Alert\r            message=\"Authenticator Uygulaması Kurulumu\"\r            description=\"Google Authenticator veya Microsoft Authenticator uygulamasını kullanarak QR kodu tarayın\"\r            type=\"info\"\r            showIcon\r            style={{ marginBottom: 24 }}\r          />\r          <div className=\"qr-code-container\">\r            {loading ? (\r              <Spin size=\"large\" />\r            ) : (\r              <QRCode value={qrCodeUrl} size={200} />\r            )}\r          </div>\r          <Divider>veya manuel olarak girin</Divider>\r          <div className=\"secret-key-container\">\r            <Text strong>Gizli Anahtar:</Text>\r            <div className=\"secret-key-box\">\r              <Text code className=\"secret-key\">{secretKey}</Text>\r              <Button\r                icon={<CopyOutlined />}\r                onClick={() = aria-label=\"copy outlined\"> copyToClipboard(secretKey)}\r                size=\"small\"\r              >\r                Kopyala\r              </Button>\r            </div>\r          </div>\r          <Button\r            type=\"primary\"\r            block\r            size=\"large\"\r            onClick={() => setCurrentStep(1)}\r            style={{ marginTop: 24 }}\r          >\r            Devam Et\r          </Button>\r        </motion.div>\r      )}\r      {currentStep === 1 && (\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          animate={{ opacity: 1, y: 0 }}\r          transition={{ duration: 0.3 }}\r        >\r          <Alert\r            message=\"Doğrulama Kodu\"\r            description=\"Authenticator uygulamanızda görünen 6 haneli kodu girin\"\r            type=\"info\"\r            showIcon\r            style={{ marginBottom: 24 }}\r          />\r          <div className=\"verification-input\">\r            <Input\r              size=\"large\"\r              placeholder=\"000000\"\r              maxLength={6}\r              value={verificationCode}\r              onChange={(e) = aria-label=\"input field\"> setVerificationCode(e.target.value.replace(/\\D/g, ''))}\r              style={{\r                fontSize: 24,\r                textAlign: 'center',\r                letterSpacing: 8,\r                fontWeight: 600\r              }}\r            />\r          </div>\r          <Space style={{ width: '100%', marginTop: 24 }} direction=\"vertical\">\r            <Button\r              type=\"primary\"\r              block\r              size=\"large\"\r              loading={loading}\r              onClick={handleVerifyCode}\r              disabled={verificationCode.length !== 6}\r            >\r              Doğrula ve Etkinleştir\r            </Button>\r            <Button\r              block\r              size=\"large\"\r              onClick={() => setCurrentStep(0)}\r            >\r              Geri\r            </Button>\r          </Space>\r        </motion.div>\r      )}\r      {currentStep === 2 && (\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          animate={{ opacity: 1, y: 0 }}\r          transition={{ duration: 0.3 }}\r        >\r          <div className=\"success-icon\">\r            <CheckCircleOutlined style={{ fontSize: 64, color: '#52c41a' }} />\r          </div>\r          <Title level={3} style={{ textAlign: 'center', marginTop: 24 }}>\r            2FA Başarıyla Etkinleştirildi!\r          </Title>\r          <Alert\r            message=\"Yedek Kodlarınız\"\r            description=\"Bu kodları güvenli bir yerde saklayın. Telefonunuzu kaybederseniz bu kodlarla giriş yapabilirsiniz.\"\r            type=\"warning\"\r            showIcon\r            style={{ marginTop: 24, marginBottom: 16 }}\r          />\r          <div className=\"backup-codes-grid\">\r            {backupCodes.map((code, index) => (\r              <div key={index} className=\"backup-code\">\r                <Text code>{code}</Text>\r              </div>\r            ))}\r          </div>\r          <Space style={{ width: '100%', marginTop: 24 }} direction=\"vertical\">\r            <Button\r              type=\"primary\"\r              block\r              size=\"large\"\r              icon={<CopyOutlined />}\r              onClick={() = aria-label=\"copy outlined\"> copyToClipboard(backupCodes.join('\\n'))}\r            >\r              Tümünü Kopyala\r            </Button>\r            <Button\r              block\r              size=\"large\"\r              onClick={downloadBackupCodes}\r            >\r              İndir (.txt)\r            </Button>\r            <Button\r              type=\"primary\"\r              block\r              size=\"large\"\r              onClick={() => onComplete('authenticator', { secretKey, backupCodes })}\r            >\r              Tamamla\r            </Button>\r          </Space>\r        </motion.div>\r      )}\r    </div>\r  );\r  const renderSMSSetup = () => (\r    <div className=\"twofa-setup-content\">\r      {currentStep === 0 && (\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          animate={{ opacity: 1, y: 0 }}\r          transition={{ duration: 0.3 }}\r        >\r          <Alert\r            message=\"SMS ile 2FA\"\r            description=\"Her girişte telefonunuza SMS ile doğrulama kodu gönderilecek\"\r            type=\"info\"\r            showIcon\r            style={{ marginBottom: 24 }}\r          />\r          <div className=\"phone-input-container\">\r            <Text strong>Telefon Numarası:</Text>\r            <Input\r              size=\"large\"\r              prefix={<MobileOutlined / aria-label=\"input field\">}\r              value={userPhone || '+90 5XX XXX XX XX'}\r              disabled\r              style={{ marginTop: 8 }}\r            />\r          </div>\r          <Button\r            type=\"primary\"\r            block\r            size=\"large\"\r            loading={loading}\r            onClick={handleSMSSetup}\r            style={{ marginTop: 24 }}\r            icon={<MobileOutlined />}\r           aria-label=\"mobile outlined\">\r            SMS Kodu Gönder\r          </Button>\r        </motion.div>\r      )}\r      {currentStep === 1 && (\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          animate={{ opacity: 1, y: 0 }}\r          transition={{ duration: 0.3 }}\r        >\r          <Alert\r            message=\"SMS Doğrulama\"\r            description={`${userPhone} numarasına gönderilen 6 haneli kodu girin`}\r            type=\"info\"\r            showIcon\r            style={{ marginBottom: 24 }}\r          />\r          <div className=\"verification-input\">\r            <Input\r              size=\"large\"\r              placeholder=\"000000\"\r              maxLength={6}\r              value={verificationCode}\r              onChange={(e) = aria-label=\"input field\"> setVerificationCode(e.target.value.replace(/\\D/g, ''))}\r              style={{\r                fontSize: 24,\r                textAlign: 'center',\r                letterSpacing: 8,\r                fontWeight: 600\r              }}\r            />\r          </div>\r          <Space style={{ width: '100%', marginTop: 24 }} direction=\"vertical\">\r            <Button\r              type=\"primary\"\r              block\r              size=\"large\"\r              loading={loading}\r              onClick={() => {\r                message.success('SMS 2FA etkinleştirildi!');\r                onComplete('sms', { phone: userPhone });\r              }}\r              disabled={verificationCode.length !== 6}\r            >\r              Doğrula ve Etkinleştir\r            </Button>\r            <Button\r              block\r              onClick={() => handleSMSSetup()}\r              icon={<ReloadOutlined />}\r            >\r              Tekrar Gönder\r            </Button>\r          </Space>\r        </motion.div>\r      )}\r    </div>\r  );\r  return (\r    <Modal\r      title={\r        <Space>\r          <SafetyOutlined />\r          <span>İki Faktörlü Kimlik Doğrulama (2FA)</span>\r        </Space>\r      }\r      open={visible}\r      onCancel={onClose}\r      footer={null}\r      width={600}\r      centered\r      className=\"twofa-modal\"\r    >\r      <Tabs activeKey={activeTab} onChange={setActiveTab}>\r        <TabPane\r          tab={\r            <Space>\r              <KeyOutlined />\r              <span>Authenticator App</span>\r            </Space>\r          }\r          key=\"authenticator\"\r        >\r          {renderAuthenticatorSetup()}\r        </TabPane>\r        <TabPane\r          tab={\r            <Space>\r              <MobileOutlined />\r              <span>SMS</span>\r            </Space>\r          }\r          key=\"sms\"\r        >\r          {renderSMSSetup()}\r        </TabPane>\r        <TabPane\r          tab={\r            <Space>\r              <MailOutlined />\r              <span>E-posta</span>\r            </Space>\r          }\r          key=\"email\"\r          disabled\r        >\r          <Alert\r            message=\"Yakında\"\r            description=\"E-posta ile 2FA özelliği yakında eklenecek\"\r            type=\"info\"\r            showIcon\r          />\r        </TabPane>\r      </Tabs>\r    </Modal>\r  );\r};\r// 2FA Verification Component for Login\rinterface TwoFactorVerifyProps {\r  visible: boolean;\r  method: 'authenticator' | 'sms' | 'email';\r  onVerify: (code: string) => void;\r  onCancel: () => void;\r  onResend?: () => void;\r}\rexport const TwoFactorVerify: React.FC<TwoFactorVerifyProps> = ({\r  visible,\r  method,\r  onVerify,\r  onCancel,\r  onResend\r}) => {\r  const [code, setCode] = useState('');\r  const [loading, setLoading] = useState(false);\r  const inputRefs = useRef<(Input | null)[]>([]);\r  const handleSubmit = () => {\r    if (code.length === 6) {\r      setLoading(true);\r      onVerify(code);\r    }\r  };\r  return (\r    <Modal\r      title=\"İki Faktörlü Doğrulama\"\r      open={visible}\r      onCancel={onCancel}\r      footer={null}\r      width={400}\r      centered\r      className=\"twofa-verify-modal\"\r    >\r      <div style={{ textAlign: 'center', padding: '20px 0' }}>\r        <SafetyOutlined style={{ fontSize: 48, color: '#667eea', marginBottom: 20 }} />\r        <Paragraph>\r          {method === 'authenticator' && 'Authenticator uygulamanızdaki 6 haneli kodu girin'}\r          {method === 'sms' && 'Telefonunuza gönderilen 6 haneli kodu girin'}\r          {method === 'email' && 'E-posta adresinize gönderilen 6 haneli kodu girin'}\r        </Paragraph>\r        <Input\r          size=\"large\"\r          placeholder=\"000000\"\r          maxLength={6}\r          value={code}\r          onChange={(e) = aria-label=\"input field\"> setCode(e.target.value.replace(/\\D/g, ''))}\r          onPressEnter={handleSubmit}\r          style={{\r            fontSize: 24,\r            textAlign: 'center',\r            letterSpacing: 8,\r            fontWeight: 600,\r            marginBottom: 24\r          }}\r        />\r        <Space direction=\"vertical\" style={{ width: '100%' }}>\r          <Button\r            type=\"primary\"\r            block\r            size=\"large\"\r            loading={loading}\r            onClick={handleSubmit}\r            disabled={code.length !== 6}\r          >\r            Doğrula\r          </Button>\r          {method === 'sms' && onResend && (\r            <Button\r              type=\"link\"\r              onClick={onResend}\r            >\r              Kodu Tekrar Gönder\r            </Button>\r          )}\r        </Space>\r      </div>\r    </Modal>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/components/TwoFactorAuth/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useEffect, useState } from 'react';\rimport { useSearchParams, useNavigate } from 'react-router-dom';\rimport { Card, Button, Result, Spin, message, Typography } from 'antd';\rimport { CheckCircleOutlined, CloseCircleOutlined, MailOutlined } from '@ant-design/icons';\rimport { authAPI } from '@/shared/api/auth.api';\rimport './style.css';\rconst { Title, Paragraph } = Typography;\rconst EmailVerificationPage: React.FC = () => {\r  const [searchParams] = useSearchParams();\r  const navigate = useNavigate();\r  const [verificationStatus, setVerificationStatus] = useState<'pending' | 'success' | 'error'>('pending');\r  const [errorMessage, setErrorMessage] = useState<string>('');\r  const [isResending, setIsResending] = useState(false);\r  const [resendCooldown, setResendCooldown] = useState(0);\r  const email = searchParams.get('email');\r  const token = searchParams.get('token');\r  useEffect(() => {\r    if (email && token) {\r      verifyEmail();\r    } else {\r      setVerificationStatus('error');\r      setErrorMessage('Geçersiz doğrulama linki');\r    }\r  }, [email, token]);\r  useEffect(() => {\r    if (resendCooldown > 0) {\r      const timer = setTimeout(() => {\r        setResendCooldown(resendCooldown - 1);\r      }, 1000);\r      return () => clearTimeout(timer);\r    }\r  }, [resendCooldown]);\r  const verifyEmail = async () => {\r    if (!email || !token) return;\r    try {\r      const response = await authAPI.verifyEmail({ email, token });\r      if (response.data.success) {\r        setVerificationStatus('success');\r        message.success(response.data.message || 'Email başarıyla doğrulandı!');\r        // Redirect to login after 3 seconds\r        setTimeout(() => {\r          navigate(response.data.redirectUrl || '/login');\r        }, 3000);\r      } else {\r        setVerificationStatus('error');\r        setErrorMessage(response.data.message || 'Doğrulama başarısız');\r      }\r    } catch (error: any) {\r      setVerificationStatus('error');\r      setErrorMessage(error.response?.data?.message || 'Doğrulama sırasında bir hata oluştu');\r    }\r  };\r  const handleResendEmail = async () => {\r    if (!email || isResending || resendCooldown > 0) return;\r    setIsResending(true);\r    try {\r      const response = await authAPI.resendVerificationEmail({ email });\r      if (response.data.success) {\r        message.success(response.data.message || 'Doğrulama emaili tekrar gönderildi');\r        setResendCooldown(60); // 60 second cooldown\r      } else {\r        message.error(response.data.message || 'Email gönderilemedi');\r      }\r    } catch (error: any) {\r      if (error.response?.data?.message?.includes('saniye sonra')) {\r        // Extract seconds from rate limit message\r        const match = error.response.data.message.match(/(\\d+) saniye/);\r        if (match) {\r          setResendCooldown(parseInt(match[1]));\r        }\r      }\r      message.error(error.response?.data?.message || 'Email gönderilemedi');\r    } finally {\r      setIsResending(false);\r    }\r  };\r  const handleGoToLogin = () => {\r    navigate('/login');\r  };\r  return (\r    <div className=\"email-verification-container\">\r      <Card className=\"email-verification-card\">\r        {verificationStatus === 'pending' && (\r          <div className=\"verification-loading\">\r            <Spin size=\"large\" />\r            <Title level={3}>Email Doğrulanıyor...</Title>\r            <Paragraph>Lütfen bekleyin, email adresiniz doğrulanıyor.</Paragraph>\r          </div>\r        )}\r        {verificationStatus === 'success' && (\r          <Result\r            status=\"success\"\r            icon={<CheckCircleOutlined style={{ color: '#52c41a' }} />}\r            title=\"Email Başarıyla Doğrulandı!\"\r            subTitle=\"Hesabınız aktifleştirildi. Giriş sayfasına yönlendiriliyorsunuz...\"\r            extra={[\r              <Button type=\"primary\" key=\"login\" onClick={handleGoToLogin}>\r                Hemen Giriş Yap\r              </Button>\r            ]}\r          />\r        )}\r        {verificationStatus === 'error' && (\r          <Result\r            status=\"error\"\r            icon={<CloseCircleOutlined style={{ color: '#ff4d4f' }} />}\r            title=\"Doğrulama Başarısız\"\r            subTitle={errorMessage}\r            extra={[\r              email && (\r                <Button\r                  key=\"resend\"\r                  type=\"primary\"\r                  icon={<MailOutlined />}\r                  loading={isResending}\r                  disabled={resendCooldown  aria-label=\"mail outlined\"> 0}\r                  onClick={handleResendEmail}\r                >\r                  {resendCooldown > 0 \r                    ? `Tekrar Gönder (${resendCooldown}s)` \r                    : 'Doğrulama Emailini Tekrar Gönder'}\r                </Button>\r              ),\r              <Button key=\"login\" onClick={handleGoToLogin}>\r                Giriş Sayfasına Git\r              </Button>\r            ]}\r          />\r        )}\r      </Card>\r    </div>\r  );\r};\rexport default EmailVerificationPage;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/pages/EmailVerification/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { Link, useNavigate } from 'react-router-dom';\rimport { Form, Input, Button, Card, Typography, Alert, Steps } from 'antd';\rimport { MailOutlined, LockOutlined, ArrowLeftOutlined } from '@ant-design/icons';\rimport { Toast } from '@/shared/components/Toast';\rimport { formRules } from '@/shared/utils/validators';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Step } = Steps;\rinterface ForgotPasswordForm {\r  email: string;\r}\rinterface ResetPasswordForm {\r  code: string;\r  password: string;\r  confirmPassword: string;\r}\rexport const ForgotPasswordPage: React.FC = () => {\r  const [form] = Form.useForm();\r  const [resetForm] = Form.useForm();\r  const navigate = useNavigate();\r  const [currentStep, setCurrentStep] = useState(0);\r  const [email, setEmail] = useState('');\r  const [isLoading, setIsLoading] = useState(false);\r  const handleSendResetCode = async (values: ForgotPasswordForm) => {\r    setIsLoading(true);\r    try {\r      // API call to send reset code\r      // await authApi.sendPasswordResetCode(values.email);\r      // Simulate API call\r      await new Promise(resolve => setTimeout(resolve, 1500));\r      Toast.success('Şifre sıfırlama kodu email adresinize gönderildi.');\r      setEmail(values.email);\r      setCurrentStep(1);\r    } catch (error) {\r      Toast.error('Kod gönderilirken bir hata oluştu. Lütfen tekrar deneyin.');\r    } finally {\r      setIsLoading(false);\r    }\r  };\r  const handleResetPassword = async (values: ResetPasswordForm) => {\r    setIsLoading(true);\r    try {\r      // API call to reset password\r      // await authApi.resetPassword({\r      //   email,\r      //   code: values.code,\r      //   newPassword: values.password\r      // });\r      // Simulate API call\r      await new Promise(resolve => setTimeout(resolve, 1500));\r      Toast.success('Şifreniz başarıyla güncellendi. Giriş yapabilirsiniz.');\r      setCurrentStep(2);\r      setTimeout(() => {\r        navigate('/login');\r      }, 2000);\r    } catch (error) {\r      Toast.error('Şifre güncellenirken bir hata oluştu. Lütfen tekrar deneyin.');\r    } finally {\r      setIsLoading(false);\r    }\r  };\r  const handleResendCode = async () => {\r    setIsLoading(true);\r    try {\r      // await authApi.sendPasswordResetCode(email);\r      await new Promise(resolve => setTimeout(resolve, 1500));\r      Toast.success('Yeni kod gönderildi.');\r    } catch (error) {\r      Toast.error('Kod gönderilirken bir hata oluştu.');\r    } finally {\r      setIsLoading(false);\r    }\r  };\r  return (\r    <div className=\"forgot-password-container\">\r      <div className=\"forgot-password-content\">\r        <Card className=\"forgot-password-card\">\r          <div className=\"forgot-password-header\">\r            <Title level={2}>Şifremi Unuttum</Title>\r            <Paragraph type=\"secondary\">\r              {currentStep === 0 && 'Email adresinizi girin, size şifre sıfırlama kodu gönderelim.'}\r              {currentStep === 1 && 'Email adresinize gönderilen kodu girin ve yeni şifrenizi belirleyin.'}\r              {currentStep === 2 && 'Şifreniz başarıyla güncellendi!'}\r            </Paragraph>\r          </div>\r          <Steps current={currentStep} className=\"forgot-password-steps\">\r            <Step title=\"Email\" />\r            <Step title=\"Doğrulama\" />\r            <Step title=\"Tamamlandı\" />\r          </Steps>\r          {currentStep === 0 && (\r            <Form\r              form={form}\r              layout=\"vertical\"\r              onFinish={handleSendResetCode}\r              className=\"forgot-password-form\"\r            >\r              <Form.Item\r                name=\"email\"\r                label=\"Email Adresi\"\r                rules={[\r                  formRules.required('Email adresi zorunludur'),\r                  formRules.email('Geçerli bir email adresi giriniz'),\r                ]}\r              >\r                <Input\r                  size=\"large\"\r                  prefix={<MailOutlined / aria-label=\"input field\">}\r                  placeholder=\"ornek@email.com\"\r                  autoComplete=\"email\"\r                />\r              </Form.Item>\r              <Form.Item>\r                <Button\r                  type=\"primary\"\r                  htmlType=\"submit\"\r                  size=\"large\"\r                  block\r                  loading={isLoading}\r                >\r                  Kod Gönder\r                </Button>\r              </Form.Item>\r              <div className=\"forgot-password-footer\">\r                <Link to=\"/login\">\r                  <ArrowLeftOutlined /> Giriş sayfasına dön\r                </Link>\r              </div>\r            </Form>\r          )}\r          {currentStep === 1 && (\r            <Form\r              form={resetForm}\r              layout=\"vertical\"\r              onFinish={handleResetPassword}\r              className=\"forgot-password-form\"\r            >\r              <Alert\r                message={`Doğrulama kodu ${email} adresine gönderildi.`}\r                type=\"info\"\r                showIcon\r                style={{ marginBottom: 24 }}\r              />\r              <Form.Item\r                name=\"code\"\r                label=\"Doğrulama Kodu\"\r                rules={[\r                  formRules.required('Doğrulama kodu zorunludur'),\r                  formRules.min(6, 'Doğrulama kodu en az 6 karakter olmalıdır'),\r                ]}\r              >\r                <Input\r                  size=\"large\"\r                  placeholder=\"6 haneli kodu girin\"\r                  maxLength={6}\r                / aria-label=\"input field\">\r              </Form.Item>\r              <Form.Item\r                name=\"password\"\r                label=\"Yeni Şifre\"\r                rules={[\r                  formRules.required('Şifre zorunludur'),\r                  formRules.password(),\r                ]}\r              >\r                <Input.Password\r                  size=\"large\"\r                  prefix={<LockOutlined / aria-label=\"input field\">}\r                  placeholder=\"Yeni şifrenizi girin\"\r                />\r              </Form.Item>\r              <Form.Item\r                name=\"confirmPassword\"\r                label=\"Şifre Tekrar\"\r                dependencies={['password']}\r                rules={[\r                  formRules.required('Şifre tekrarı zorunludur'),\r                  ({ getFieldValue }) => ({\r                    validator(_, value) {\r                      if (!value || getFieldValue('password') === value) {\r                        return Promise.resolve();\r                      }\r                      return Promise.reject(new Error('Şifreler eşleşmiyor'));\r                    },\r                  }),\r                ]}\r              >\r                <Input.Password\r                  size=\"large\"\r                  prefix={<LockOutlined / aria-label=\"input field\">}\r                  placeholder=\"Şifrenizi tekrar girin\"\r                />\r              </Form.Item>\r              <Form.Item>\r                <Button\r                  type=\"primary\"\r                  htmlType=\"submit\"\r                  size=\"large\"\r                  block\r                  loading={isLoading}\r                >\r                  Şifreyi Güncelle\r                </Button>\r              </Form.Item>\r              <div className=\"forgot-password-footer\">\r                <Button type=\"link\" onClick={handleResendCode} disabled={isLoading}>\r                  Kodu tekrar gönder\r                </Button>\r                <Link to=\"/login\">\r                  <ArrowLeftOutlined /> Giriş sayfasına dön\r                </Link>\r              </div>\r            </Form>\r          )}\r          {currentStep === 2 && (\r            <div className=\"forgot-password-success\">\r              <div className=\"success-icon\">✓</div>\r              <Title level={3}>Şifreniz Güncellendi!</Title>\r              <Paragraph>\r                Yeni şifreniz ile giriş yapabilirsiniz. Yönlendiriliyorsunuz...\r              </Paragraph>\r              <Button type=\"primary\" size=\"large\" onClick={() => navigate('/login')}>\r                Giriş Yap\r              </Button>\r            </div>\r          )}\r        </Card>\r      </div>\r    </div>\r  );\r};\rexport default ForgotPasswordPage;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/pages/ForgotPasswordPage/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React from 'react';\rimport { useNavigate, useLocation } from 'react-router-dom';\rimport { Form, Input, Button, Typography, Space } from 'antd';\rimport { MailOutlined, LockOutlined, LoginOutlined, RocketOutlined, HomeOutlined } from '@ant-design/icons';\rimport { useAuthStore } from '@/app/store/auth.store';\rimport { LoginRequest } from '@/shared/types';\rimport companyService from '@/services/companyService';\rimport { showApiResponse, showWelcomeAlert } from '@/shared/utils/sweetAlert';\rimport Swal from 'sweetalert2';\rimport './style.css';\rconst { Title, Text } = Typography;\rexport const LoginPage: React.FC = () => {\r  const navigate = useNavigate();\r  const location = useLocation();\r  const { login, isLoading } = useAuthStore();\r  const [form] = Form.useForm();\r  const handleSubmit = async (values: any) => {\r    // Show loading\r    showApiResponse.loading('Giriş yapılıyor...');\r    try {\r      // If tenant code is provided, set it as a header\r      if (values.tenantCode) {\r        localStorage.setItem('X-Tenant-Code', values.tenantCode);\r      }\r      const loginData: LoginRequest = {\r        email: values.email,\r        password: values.password,\r        tenantCode: values.tenantCode\r      };\r      await login(loginData);\r      // Close loading\r      Swal.close();\r      // Wait for auth store to be updated\r      await new Promise(resolve => setTimeout(resolve, 100));\r      // Get the fresh user data after login\r      const authStore = useAuthStore.getState();\r      const userName = authStore.user?.firstName || authStore.user?.email || 'Kullanıcı';\r      const userRole = authStore.user?.roles?.[0];\r      const from = (location.state as any)?.from?.pathname;\r      // Check if company exists for tenant users BEFORE navigation\r      if (userRole !== 'SystemAdmin') {\r        try {\r          const hasCompany = await companyService.checkCompanyExists();\r          if (!hasCompany) {\r            showApiResponse.info(\r              'Şirket bilgilerinizi tamamlamanız gerekiyor. Yönlendiriliyorsunuz...',\r              'Şirket Kurulumu'\r            );\r            setTimeout(() => {\r              navigate('/company-setup', { replace: true });\r            }, 1000);\r            return;\r          }\r        } catch (companyError) {\r        }\r      }\r      // Navigate FIRST, immediately based on role\r      let targetPath = '/';\r      if (from) {\r        targetPath = from;\r      } else if (userRole === 'SystemAdmin') {\r        targetPath = '/master';\r      } else if (userRole === 'TenantAdmin' || userRole === 'Admin') {\r        targetPath = '/admin';\r      } else {\r        // For regular users, we need to use the tenant ID\r        const tenantId = authStore.user?.tenantId || localStorage.getItem('stocker_tenant') || 'default';\r        targetPath = `/app/${tenantId}`;\r      }\r      // Show welcome alert first (non-blocking)\r      const roleDisplayName = userRole === 'SystemAdmin' ? 'Sistem Yöneticisi' : \r                             userRole === 'TenantAdmin' ? 'Kiracı Yöneticisi' :\r                             userRole === 'Admin' ? 'Yönetici' : 'Kullanıcı';\r      showWelcomeAlert(userName, roleDisplayName);\r      // Use window.location for hard navigation to ensure page reload\r      // This will trigger a full page reload and re-initialization\r      setTimeout(() => {\r        // Use window.location.href for guaranteed navigation\r        window.location.href = targetPath;\r      }, 1000);\r    } catch (error: any) {\r      // Close loading\r      Swal.close();\r      // Show detailed error message\r      if (error.response) {\r        // API returned an error response\r        showApiResponse.error(error, 'Giriş başarısız');\r      } else if (error.message) {\r        // Network or other error\r        showApiResponse.error(\r          { response: { data: { message: error.message } } },\r          'Giriş başarısız'\r        );\r      } else {\r        // Unknown error\r        showApiResponse.error(\r          { response: { data: { message: 'Beklenmeyen bir hata oluştu. Lütfen tekrar deneyin.' } } },\r          'Giriş başarısız'\r        );\r      }\r    }\r  };\r  return (\r    <div className=\"login-page\">\r      <div className=\"login-background\">\r        <div className=\"login-bg-shape login-bg-shape-1\"></div>\r        <div className=\"login-bg-shape login-bg-shape-2\"></div>\r        <div className=\"login-bg-shape login-bg-shape-3\"></div>\r        <div className=\"login-bg-shape login-bg-shape-4\"></div>\r      </div>\r      <div className=\"login-container\">\r        <div className=\"login-box\">\r          <div className=\"login-logo\">\r            <RocketOutlined style={{ fontSize: 48, color: '#667eea' }} />\r          </div>\r          <div className=\"login-header\">\r            <Title level={2} style={{ margin: 0, color: '#1a1a1a' }}>Hoş Geldiniz</Title>\r            <Text type=\"secondary\" style={{ fontSize: 16 }}>Stocker'a devam etmek için giriş yapın</Text>\r          </div>\r          <Form\r            form={form}\r            name=\"login\"\r            onFinish={handleSubmit}\r            layout=\"vertical\"\r            size=\"large\"\r            className=\"login-form\"\r          >\r            <Form.Item\r              name=\"tenantCode\"\r              rules={[\r                { required: false, message: 'Lütfen kiracı kodunu girin!' }\r              ]}\r            >\r              <Input \r                prefix={<HomeOutlined style={{ color: '#667eea' }} / aria-label=\"input field\">} \r                placeholder=\"Kiracı Kodu (örn: test)\" \r                autoComplete=\"organization\"\r                className=\"login-input\"\r              />\r            </Form.Item>\r            <Form.Item\r              name=\"email\"\r              rules={[\r                { required: true, message: 'Lütfen email adresinizi girin!' },\r                { type: 'email', message: 'Lütfen geçerli bir email adresi girin!' }\r              ]}\r            >\r              <Input \r                prefix={<MailOutlined style={{ color: '#667eea' }} / aria-label=\"input field\">} \r                placeholder=\"Email adresi\" \r                autoComplete=\"email\"\r                type=\"email\"\r                className=\"login-input\"\r              />\r            </Form.Item>\r            <Form.Item\r              name=\"password\"\r              rules={[{ required: true, message: 'Lütfen şifrenizi girin!' }]}\r            >\r              <Input.Password\r                prefix={<LockOutlined style={{ color: '#667eea' }} / aria-label=\"input field\">}\r                placeholder=\"Şifre\"\r                autoComplete=\"current-password\"\r                className=\"login-input\"\r              />\r            </Form.Item>\r            <Form.Item style={{ marginBottom: 16 }}>\r              <Button \r                type=\"primary\" \r                htmlType=\"submit\" \r                loading={isLoading} \r                block\r                size=\"large\"\r                icon={<LoginOutlined />}\r                className=\"login-button\"\r               aria-label=\"login outlined\">\r                Giriş Yap\r              </Button>\r            </Form.Item>\r            <div className=\"login-links\">\r              <a href=\"/forgot-password\">Şifremi unuttum</a>\r              <span className=\"separator\">•</span>\r              <a href=\"/register\">Hesap oluştur</a>\r            </div>\r          </Form>\r          <div className=\"demo-section\">\r            <Text type=\"secondary\" style={{ fontSize: 12, textAlign: 'center', display: 'block', marginBottom: 12 }}>\r              DEMO HESAPLARI\r            </Text>\r            <Space direction=\"vertical\" style={{ width: '100%' }} size=\"small\">\r              <div className=\"demo-credential\" onClick={() => {\r                form.setFieldsValue({ email: 'admin@stocker.com', password: 'Admin@123456' });\r              }} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => {\r                form.setFieldsValue({ email: 'admin@stocker.com', password: 'Admin@123456' (e)}>\r                <div className=\"demo-icon\">👨‍💼</div>\r                <div className=\"demo-info\">\r                  <Text strong style={{ fontSize: 13 }}>Sistem Yöneticisi</Text>\r                  <Text type=\"secondary\" style={{ fontSize: 11, display: 'block' }}>admin@stocker.com</Text>\r                </div>\r                <Text className=\"demo-hint\">Doldurmak için tıkla</Text>\r              </div>\r              <div className=\"demo-credential\" onClick={() => {\r                form.setFieldsValue({ email: 'tenant@example.com', password: 'Tenant@123456' });\r              }} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => {\r                form.setFieldsValue({ email: 'tenant@example.com', password: 'Tenant@123456' (e)}>\r                <div className=\"demo-icon\">👤</div>\r                <div className=\"demo-info\">\r                  <Text strong style={{ fontSize: 13 }}>Kiracı Yöneticisi</Text>\r                  <Text type=\"secondary\" style={{ fontSize: 11, display: 'block' }}>tenant@example.com</Text>\r                </div>\r                <Text className=\"demo-hint\">Doldurmak için tıkla</Text>\r              </div>\r            </Space>\r          </div>\r        </div>\r      </div>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/pages/LoginPage/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingLabels",
      "line": 280,
      "code": "<Input",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/pages/TenantLogin/index.tsx",
      "severity": "error",
      "message": "Input without label or aria-label"
    },
    {
      "type": "missingLabels",
      "line": 291,
      "code": "<Input.Password",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/pages/TenantLogin/index.tsx",
      "severity": "error",
      "message": "Input without label or aria-label"
    },
    {
      "type": "noKeyboardHandlers",
      "line": 303,
      "code": "<Link onClick={() => navigate('/forgot-password')}>",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/pages/TenantLogin/index.tsx",
      "severity": "warning",
      "message": "Interactive element missing keyboard handler"
    },
    {
      "type": "noKeyboardHandlers",
      "line": 324,
      "code": "<Link onClick={() => navigate('/register')}>",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/pages/TenantLogin/index.tsx",
      "severity": "warning",
      "message": "Interactive element missing keyboard handler"
    },
    {
      "type": "noKeyboardHandlers",
      "line": 330,
      "code": "<Link onClick={() => window.location.href = getMainDomainUrl()}>",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/pages/TenantLogin/index.tsx",
      "severity": "warning",
      "message": "Interactive element missing keyboard handler"
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { Layout, Typography, Card, Row, Col, Button, Tag, Space, Input, Select, Avatar, Pagination } from 'antd';\rimport {\r  CalendarOutlined,\r  UserOutlined,\r  ClockCircleOutlined,\r  TagOutlined,\r  SearchOutlined,\r  RocketOutlined,\r  ArrowLeftOutlined,\r  EyeOutlined,\r  MessageOutlined,\r  HeartOutlined\r} from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport './style.css';\rimport './blog-fixes.css';\rconst { Header, Content, Sider } = Layout;\rconst { Title, Text, Paragraph } = Typography;\rconst { Search } = Input;\rconst { Option } = Select;\rinterface BlogPost {\r  id: number;\r  title: string;\r  excerpt: string;\r  content: string;\r  author: string;\r  authorAvatar?: string;\r  date: string;\r  readTime: string;\r  category: string;\r  tags: string[];\r  image: string;\r  views: number;\r  likes: number;\r  comments: number;\r  featured?: boolean;\r}\rexport const BlogPage: React.FC = () => {\r  const navigate = useNavigate();\r  const [searchText, setSearchText] = useState('');\r  const [selectedCategory, setSelectedCategory] = useState('all');\r  const [currentPage, setCurrentPage] = useState(1);\r  const postsPerPage = 6;\r  const blogPosts: BlogPost[] = [\r    {\r      id: 1,\r      title: 'Dijital Dönüşümde ERP\\'nin Rolü',\r      excerpt: 'Modern işletmelerde dijital dönüşüm sürecinde ERP sistemlerinin önemi ve Stocker\\'ın sunduğu avantajlar.',\r      content: '',\r      author: 'Dr. Ahmet Yılmaz',\r      authorAvatar: 'https://ui-avatars.com/api/?name=Ahmet+Yilmaz&background=667eea&color=fff',\r      date: '2024-01-20',\r      readTime: '8 dk',\r      category: 'Dijital Dönüşüm',\r      tags: ['ERP', 'Dijitalleşme', 'İş Süreçleri'],\r      image: 'https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=800&h=400&fit=crop',\r      views: 2340,\r      likes: 156,\r      comments: 23,\r      featured: true\r    },\r    {\r      id: 2,\r      title: 'KOBİ\\'ler İçin Stok Yönetimi İpuçları',\r      excerpt: 'Küçük ve orta ölçekli işletmeler için etkili stok yönetimi stratejileri ve best practice\\'ler.',\r      content: '',\r      author: 'Mehmet Demir',\r      authorAvatar: 'https://ui-avatars.com/api/?name=Mehmet+Demir&background=764ba2&color=fff',\r      date: '2024-01-18',\r      readTime: '6 dk',\r      category: 'Stok Yönetimi',\r      tags: ['Stok', 'KOBİ', 'Verimlilik'],\r      image: 'https://images.unsplash.com/photo-1586281380349-632531db7ed4?w=800&h=400&fit=crop',\r      views: 1890,\r      likes: 98,\r      comments: 15\r    },\r    {\r      id: 3,\r      title: 'E-Ticaret Entegrasyonları ile Satışları Artırın',\r      excerpt: 'Trendyol, Hepsiburada ve diğer platformlarla entegrasyon sayesinde satış kanallarınızı genişletin.',\r      content: '',\r      author: 'Zeynep Kara',\r      authorAvatar: 'https://ui-avatars.com/api/?name=Zeynep+Kara&background=52c41a&color=fff',\r      date: '2024-01-15',\r      readTime: '10 dk',\r      category: 'E-Ticaret',\r      tags: ['E-Ticaret', 'Entegrasyon', 'Satış'],\r      image: 'https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=800&h=400&fit=crop',\r      views: 3210,\r      likes: 187,\r      comments: 31,\r      featured: true\r    },\r    {\r      id: 4,\r      title: 'Muhasebe Otomasyonunda Yeni Dönem',\r      excerpt: 'e-Fatura, e-Arşiv ve e-İrsaliye süreçlerinin otomasyonu ile muhasebe işlemlerini hızlandırın.',\r      content: '',\r      author: 'CPA Fatma Şahin',\r      authorAvatar: 'https://ui-avatars.com/api/?name=Fatma+Sahin&background=1890ff&color=fff',\r      date: '2024-01-12',\r      readTime: '12 dk',\r      category: 'Muhasebe',\r      tags: ['Muhasebe', 'e-Fatura', 'Otomasyon'],\r      image: 'https://images.unsplash.com/photo-1554224155-6726b3ff858f?w=800&h=400&fit=crop',\r      views: 2670,\r      likes: 145,\r      comments: 28\r    },\r    {\r      id: 5,\r      title: 'CRM ile Müşteri Memnuniyetini Artırma',\r      excerpt: 'Müşteri ilişkileri yönetiminde başarılı olmak için CRM modülünün etkin kullanımı.',\r      content: '',\r      author: 'Ayşe Yıldırım',\r      authorAvatar: 'https://ui-avatars.com/api/?name=Ayse+Yildirim&background=722ed1&color=fff',\r      date: '2024-01-10',\r      readTime: '7 dk',\r      category: 'CRM',\r      tags: ['CRM', 'Müşteri', 'Satış'],\r      image: 'https://images.unsplash.com/photo-1552664730-d307ca884978?w=800&h=400&fit=crop',\r      views: 1560,\r      likes: 89,\r      comments: 12\r    },\r    {\r      id: 6,\r      title: '2024 İş Trendleri ve Teknoloji',\r      excerpt: 'Yeni yılda işletmeleri bekleyen teknolojik trendler ve Stocker ile nasıl hazırlanabilirsiniz.',\r      content: '',\r      author: 'Tech Team',\r      authorAvatar: 'https://ui-avatars.com/api/?name=Tech+Team&background=faad14&color=fff',\r      date: '2024-01-08',\r      readTime: '15 dk',\r      category: 'Teknoloji',\r      tags: ['Trend', 'Teknoloji', '2024'],\r      image: 'https://images.unsplash.com/photo-1504868584819-f8e8b4b6d7e3?w=800&h=400&fit=crop',\r      views: 4120,\r      likes: 234,\r      comments: 45\r    },\r    {\r      id: 7,\r      title: 'İnsan Kaynakları Dijitalleşmesi',\r      excerpt: 'HR süreçlerinin dijitalleşmesi ve personel yönetiminde verimliliği artırma yöntemleri.',\r      content: '',\r      author: 'HR Uzmanları',\r      authorAvatar: 'https://ui-avatars.com/api/?name=HR+Uzmanlari&background=13c2c2&color=fff',\r      date: '2024-01-05',\r      readTime: '9 dk',\r      category: 'İnsan Kaynakları',\r      tags: ['HR', 'Dijitalleşme', 'Personel'],\r      image: 'https://images.unsplash.com/photo-1521737711867-e3b97375f902?w=800&h=400&fit=crop',\r      views: 1230,\r      likes: 67,\r      comments: 8\r    },\r    {\r      id: 8,\r      title: 'Veri Güvenliği ve KVKK Uyumluluğu',\r      excerpt: 'İşletmenizde veri güvenliğini sağlama ve KVKK uyumluluğu için yapılması gerekenler.',\r      content: '',\r      author: 'Güvenlik Ekibi',\r      authorAvatar: 'https://ui-avatars.com/api/?name=Guvenlik+Ekibi&background=f5222d&color=fff',\r      date: '2024-01-03',\r      readTime: '11 dk',\r      category: 'Güvenlik',\r      tags: ['Güvenlik', 'KVKK', 'Veri'],\r      image: 'https://images.unsplash.com/photo-1563986768609-322da13575f3?w=800&h=400&fit=crop',\r      views: 2890,\r      likes: 178,\r      comments: 34\r    }\r  ];\r  const categories = [\r    { value: 'all', label: 'Tüm Kategoriler', count: blogPosts.length },\r    { value: 'digital', label: 'Dijital Dönüşüm', count: 12 },\r    { value: 'stock', label: 'Stok Yönetimi', count: 8 },\r    { value: 'ecommerce', label: 'E-Ticaret', count: 15 },\r    { value: 'accounting', label: 'Muhasebe', count: 10 },\r    { value: 'crm', label: 'CRM', count: 6 },\r    { value: 'hr', label: 'İnsan Kaynakları', count: 5 },\r    { value: 'technology', label: 'Teknoloji', count: 18 },\r    { value: 'security', label: 'Güvenlik', count: 4 }\r  ];\r  const popularTags = [\r    'ERP', 'Dijitalleşme', 'Stok Yönetimi', 'E-Ticaret', \r    'CRM', 'Muhasebe', 'İnsan Kaynakları', 'Entegrasyon', \r    'Otomasyon', 'Verimlilik', 'KOBİ', 'Büyüme'\r  ];\r  const featuredPosts = blogPosts.filter(post => post.featured);\r  const indexOfLastPost = currentPage * postsPerPage;\r  const indexOfFirstPost = indexOfLastPost - postsPerPage;\r  const currentPosts = blogPosts.slice(indexOfFirstPost, indexOfLastPost);\r  return (\r    <Layout className=\"blog-layout\">\r      <Header className=\"blog-header\">\r        <div className=\"header-container\">\r          <div className=\"header-content\">\r            <Button \r              icon={<ArrowLeftOutlined />} \r              onClick={() = aria-label=\"arrow left outlined\"> navigate('/')}\r              type=\"text\"\r              style={{ marginRight: 16 }}\r            >\r              Ana Sayfa\r            </Button>\r            <div className=\"logo-section\" onClick={() => navigate('/')} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => navigate('/')(e)}>\r              <RocketOutlined className=\"logo-icon\" />\r              <span className=\"logo-text\">Stocker Blog</span>\r            </div>\r          </div>\r          <div className=\"header-actions\">\r            <Button onClick={() => navigate('/login')}>Giriş Yap</Button>\r            <Button type=\"primary\" onClick={() => navigate('/register')}>\r              Ücretsiz Dene\r            </Button>\r          </div>\r        </div>\r      </Header>\r      <Content className=\"blog-content\">\r        <div className=\"hero-section\">\r          <Title level={1}>Stocker Blog</Title>\r          <Paragraph>\r            İşletmenizi büyütmek için ihtiyacınız olan bilgiler, ipuçları ve güncel haberler\r          </Paragraph>\r          <Search\r            placeholder=\"Blog yazılarında ara...\"\r            onSearch={setSearchText}\r            onChange={(e) => setSearchText(e.target.value)}\r            prefix={<SearchOutlined />}\r            size=\"large\"\r            style={{ maxWidth: 500, margin: '0 auto' }}\r          />\r        </div>\r        {featuredPosts.length > 0 && (\r          <div className=\"featured-section\">\r            <Title level={2}>Öne Çıkan Yazılar</Title>\r            <Row gutter={[24, 24]}>\r              {featuredPosts.map(post => (\r                <Col xs={24} md={12} key={post.id}>\r                  <Card\r                    hoverable\r                    cover={\r                      <div className=\"featured-image\">\r                        <img alt={post.title} src={post.image} />\r                        <Tag color=\"red\" className=\"featured-badge\">ÖNE ÇIKAN</Tag>\r                      </div>\r                    }\r                    className=\"featured-card\"\r                  >\r                    <Tag color=\"purple\">{post.category}</Tag>\r                    <Title level={3}>{post.title}</Title>\r                    <Paragraph ellipsis={{ rows: 2 }}>{post.excerpt}</Paragraph>\r                    <div className=\"post-meta\">\r                      <Space>\r                        <Avatar size=\"small\" src={post.authorAvatar}>\r                          {post.author[0]}\r                        </Avatar>\r                        <Text>{post.author}</Text>\r                        <Text type=\"secondary\">•</Text>\r                        <Text type=\"secondary\">\r                          <CalendarOutlined /> {post.date}\r                        </Text>\r                        <Text type=\"secondary\">•</Text>\r                        <Text type=\"secondary\">\r                          <ClockCircleOutlined /> {post.readTime}\r                        </Text>\r                      </Space>\r                    </div>\r                    <div className=\"post-stats\">\r                      <Space>\r                        <span><EyeOutlined /> {post.views}</span>\r                        <span><HeartOutlined /> {post.likes}</span>\r                        <span><MessageOutlined /> {post.comments}</span>\r                      </Space>\r                    </div>\r                  </Card>\r                </Col>\r              ))}\r            </Row>\r          </div>\r        )}\r        <Layout className=\"main-content\">\r          <Content className=\"posts-section\">\r            <div className=\"section-header\">\r              <Title level={2}>Son Yazılar</Title>\r              <Select\r                defaultValue=\"all\"\r                style={{ width: 200 }}\r                onChange={setSelectedCategory}\r                size=\"large\"\r               aria-label=\"select field\">\r                {categories.map(cat => (\r                  <Option key={cat.value} value={cat.value}>\r                    {cat.label} ({cat.count})\r                  </Option>\r                ))}\r              </Select>\r            </div>\r            <Row gutter={[24, 24]}>\r              {currentPosts.map(post => (\r                <Col xs={24} sm={12} lg={8} key={post.id}>\r                  <Card\r                    hoverable\r                    cover={<img alt={post.title} src={post.image} />}\r                    className=\"post-card\"\r                  >\r                    <Tag color=\"blue\">{post.category}</Tag>\r                    <Title level={4}>{post.title}</Title>\r                    <Paragraph ellipsis={{ rows: 3 }}>{post.excerpt}</Paragraph>\r                    <div className=\"post-meta\">\r                      <Text type=\"secondary\">\r                        <UserOutlined /> {post.author}\r                      </Text>\r                      <Text type=\"secondary\">\r                        <ClockCircleOutlined /> {post.readTime}\r                      </Text>\r                    </div>\r                    <Button type=\"primary\" block style={{ marginTop: 16 }}>\r                      Devamını Oku\r                    </Button>\r                  </Card>\r                </Col>\r              ))}\r            </Row>\r            <div className=\"pagination-container\">\r              <Pagination\r                current={currentPage}\r                total={blogPosts.length}\r                pageSize={postsPerPage}\r                onChange={setCurrentPage}\r                showSizeChanger={false}\r              />\r            </div>\r          </Content>\r          <Sider width={320} className=\"blog-sidebar\">\r            <Card className=\"sidebar-card\">\r              <Title level={4}>Popüler Etiketler</Title>\r              <div className=\"tags-cloud\">\r                {popularTags.map(tag => (\r                  <Tag key={tag} className=\"tag-item\">\r                    <TagOutlined /> {tag}\r                  </Tag>\r                ))}\r              </div>\r            </Card>\r            <Card className=\"sidebar-card newsletter-card\">\r              <Title level={4}>Bültenimize Abone Olun</Title>\r              <Paragraph>\r                En yeni yazılar ve güncellemelerden haberdar olun\r              </Paragraph>\r              <Input placeholder=\"E-posta adresiniz\" size=\"large\" / aria-label=\"input field\">\r              <Button type=\"primary\" block size=\"large\" style={{ marginTop: 12 }}>\r                Abone Ol\r              </Button>\r            </Card>\r            <Card className=\"sidebar-card\">\r              <Title level={4}>Kategoriler</Title>\r              <div className=\"categories-list\">\r                {categories.slice(1).map(category => (\r                  <div key={category.value} className=\"category-item\">\r                    <Text>{category.label}</Text>\r                    <Tag>{category.count}</Tag>\r                  </div>\r                ))}\r              </div>\r            </Card>\r          </Sider>\r        </Layout>\r        <div className=\"cta-section\">\r          <Card>\r            <Row align=\"middle\" gutter={24}>\r              <Col xs={24} md={16}>\r                <Title level={3}>Stocker'ı Ücretsiz Deneyin</Title>\r                <Paragraph>\r                  14 gün ücretsiz deneme sürümü ile işletmenizi dijitalleştirmeye başlayın\r                </Paragraph>\r              </Col>\r              <Col xs={24} md={8} style={{ textAlign: 'right' }}>\r                <Space>\r                  <Button size=\"large\" onClick={() => navigate('/contact')}>\r                    İletişime Geç\r                  </Button>\r                  <Button \r                    type=\"primary\" \r                    size=\"large\"\r                    icon={<RocketOutlined />}\r                    onClick={() = aria-label=\"rocket outlined\"> navigate('/register')}\r                  >\r                    Ücretsiz Dene\r                  </Button>\r                </Space>\r              </Col>\r            </Row>\r          </Card>\r        </div>\r      </Content>\r    </Layout>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/blog/pages/BlogPage/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { useNavigate } from 'react-router-dom';\rimport { Button, Form, Input, Select, Steps, Card, Row, Col, InputNumber, message } from 'antd';\rimport { BankOutlined, GlobalOutlined, CheckCircleOutlined } from '@ant-design/icons';\rimport companyService from '@/services/companyService';\rimport { useAuthStore } from '@/app/store/auth.store';\rimport { getCitiesForSelect, getDistrictsByCityForSelect } from '@/data/turkey-cities';\rimport { showApiResponse } from '@/shared/utils/sweetAlert';\rimport Swal from 'sweetalert2';\rimport './style.css';\rconst { Step } = Steps;\rconst { Option } = Select;\rconst { TextArea } = Input;\rinterface CompanyFormData {\r  // Ticari Bilgiler\r  tradeRegisterNumber?: string;\r  sector?: string;\r  // Vergi Bilgileri (Zorunlu)\r  taxNumber: string;\r  taxOffice: string;\r  // Adres (Zorunlu fatura için)\r  country: string;\r  city: string;\r  district: string;\r  postalCode?: string;\r  addressLine: string;\r  // Ek Bilgiler\r  website?: string;\r  employeeCount?: string;\r  foundedYear?: number;\r  currency: string;\r  timezone: string;\r}\rconst CompanySetup: React.FC = () => {\r  const [currentStep, setCurrentStep] = useState(0);\r  const [loading, setLoading] = useState(false);\r  const [form] = Form.useForm();\r  const navigate = useNavigate();\r  const { user } = useAuthStore();\r  const [formData, setFormData] = useState<CompanyFormData>({\r    taxNumber: '',\r    taxOffice: '',\r    country: 'Türkiye',\r    city: '',\r    district: '',\r    addressLine: '',\r    currency: 'TRY',\r    timezone: 'Europe/Istanbul'\r  });\r  const [districts, setDistricts] = useState<{ label: string; value: string }[]>([]);\r  // Check if company already exists on mount\r  useEffect(() => {\r    const checkExistingCompany = async () => {\r      try {\r        const hasCompany = await companyService.checkCompanyExists();\r        if (hasCompany) {\r          message.info('Şirket bilgileriniz zaten mevcut, yönlendiriliyorsunuz...');\r          const currentUser = user || JSON.parse(localStorage.getItem('user') || '{}');\r          const userRole = currentUser.roles?.[0];\r          const tenantId = currentUser.tenantId || currentUser.tenant?.id;\r          if (userRole === 'SystemAdmin') {\r            navigate('/master');\r          } else if (userRole === 'Admin' || userRole === 'TenantAdmin') {\r            navigate('/admin');\r          } else if (tenantId) {\r            navigate(`/app/${tenantId}/dashboard`);\r          } else {\r            navigate('/app/default');\r          }\r        }\r      } catch (error) {\r      }\r    };\r    checkExistingCompany();\r  }, [navigate, user]);\r  // Handle city change to update districts\r  const handleCityChange = (cityName: string) => {\r    form.setFieldsValue({ district: undefined }); // Reset district\r    setDistricts(getDistrictsByCityForSelect(cityName));\r  };\r  const steps = [\r    {\r      title: 'Ticari Bilgiler',\r      icon: <BankOutlined />,\r    },\r    {\r      title: 'Adres Bilgileri',\r      icon: <GlobalOutlined />,\r    },\r    {\r      title: 'Ek Bilgiler',\r      icon: <CheckCircleOutlined />,\r    },\r  ];\r  const handleNext = async () => {\r    try {\r      const values = await form.validateFields();\r      setFormData({ ...formData, ...values });\r      if (currentStep < steps.length - 1) {\r        setCurrentStep(currentStep + 1);\r      } else {\r        handleSubmit();\r      }\r    } catch (error) {\r    }\r  };\r  const handlePrev = () => {\r    setCurrentStep(currentStep - 1);\r  };\r  const handleSubmit = async () => {\r    // Show loading\r    showApiResponse.loading('Şirket bilgileri kaydediliyor...');\r    try {\r      // Get user info from auth store or localStorage\r      const currentUser = user || JSON.parse(localStorage.getItem('user') || '{}');\r      // Prepare company data matching backend format\r      const companyData = {\r        name: currentUser.companyName || currentUser.tenant?.name || 'Şirket',\r        code: currentUser.tenant?.code || `company_${Date.now()}`,\r        legalName: currentUser.companyName || currentUser.tenant?.name || 'Şirket', // Legal name same as company name initially\r        identityType: 'TaxNumber', // Default to TaxNumber\r        identityNumber: formData.taxNumber, // Use tax number as identity number\r        taxNumber: formData.taxNumber,\r        taxOffice: formData.taxOffice,\r        tradeRegisterNumber: formData.tradeRegisterNumber,\r        email: currentUser.email || '',\r        phone: currentUser.phone || '',\r        fax: '', // Optional, leave empty\r        website: formData.website,\r        sector: formData.sector,\r        employeeCount: formData.employeeCount ? parseInt(formData.employeeCount.split('-')[0]) : undefined,\r        foundedYear: formData.foundedYear,\r        foundedDate: formData.foundedYear ? `${formData.foundedYear}-01-01` : new Date().toISOString().split('T')[0],\r        currency: formData.currency,\r        timezone: formData.timezone, // This will be a timezone string like 'Europe/Istanbul'\r        // Address should be a nested object\r        address: {\r          country: formData.country,\r          city: formData.city,\r          district: formData.district,\r          postalCode: formData.postalCode,\r          addressLine: formData.addressLine\r        }\r      };\r      // Create company via API\r      await companyService.createCompany(companyData);\r      // Show success message\r      await Swal.fire({\r        icon: 'success',\r        title: 'Başarılı!',\r        text: 'Şirket kurulumu başarıyla tamamlandı.',\r        html: `\r          <div style=\"text-align: left;\">\r            <p><strong>Şirket Adı:</strong> ${companyData.name}</p>\r            <p><strong>Vergi No:</strong> ${companyData.taxNumber}</p>\r            <p><strong>Vergi Dairesi:</strong> ${companyData.taxOffice || '-'}</p>\r            <p style=\"margin-top: 10px;\">Yönlendiriliyorsunuz...</p>\r          </div>\r        `,\r        confirmButtonText: 'Tamam',\r        confirmButtonColor: '#667eea',\r        timer: 3000,\r        timerProgressBar: true\r      });\r      // Navigate based on user role\r      const userRole = currentUser.roles?.[0];\r      const tenantId = currentUser.tenantId || currentUser.tenant?.id;\r      if (userRole === 'SystemAdmin') {\r        navigate('/master');\r      } else if (userRole === 'Admin' || userRole === 'TenantAdmin') {\r        navigate('/admin');\r      } else if (tenantId) {\r        navigate(`/app/${tenantId}/dashboard`);\r      } else {\r        navigate('/app/default');\r      }\r    } catch (error: any) {\r      // Close loading\r      Swal.close();\r      // Prepare error details\r      let errorMessage = 'Şirket kurulumu sırasında bir hata oluştu.';\r      let errorDetails = '';\r      if (error.response?.data) {\r        const data = error.response.data;\r        // Check for validation errors\r        if (data.errors) {\r          errorDetails = '<div style=\"text-align: left; margin-top: 10px;\">';\r          if (typeof data.errors === 'object') {\r            Object.keys(data.errors).forEach(field => {\r              const fieldErrors = Array.isArray(data.errors[field]) ? data.errors[field] : [data.errors[field]];\r              fieldErrors.forEach((err: string) => {\r                errorDetails += `<p style=\"margin: 5px 0;\"><strong>${field}:</strong> ${err}</p>`;\r              });\r            });\r          } else if (Array.isArray(data.errors)) {\r            data.errors.forEach((err: string) => {\r              errorDetails += `<p style=\"margin: 5px 0;\">• ${err}</p>`;\r            });\r          } else {\r            errorDetails += `<p>${data.errors}</p>`;\r          }\r          errorDetails += '</div>';\r        } else if (data.message) {\r          errorMessage = data.message;\r        } else if (data.detail) {\r          errorMessage = data.detail;\r        } else if (typeof data === 'string') {\r          errorMessage = data;\r        }\r      } else if (error.message) {\r        errorMessage = error.message;\r      }\r      // Show detailed error message\r      await Swal.fire({\r        icon: 'error',\r        title: 'Hata!',\r        text: errorMessage,\r        html: errorDetails || undefined,\r        confirmButtonText: 'Tamam',\r        confirmButtonColor: '#667eea',\r        footer: error.response?.status === 403 ? \r          '<p style=\"color: #666;\">Bu işlem için yetkiniz bulunmuyor.</p>' : \r          error.response?.status === 401 ? \r          '<p style=\"color: #666;\">Oturum süreniz dolmuş olabilir. Lütfen tekrar giriş yapın.</p>' : \r          undefined\r      });\r      // If unauthorized, redirect to login\r      if (error.response?.status === 401) {\r        setTimeout(() => {\r          navigate('/login');\r        }, 2000);\r      }\r    } finally {\r      setLoading(false);\r    }\r  };\r  const renderStepContent = () => {\r    switch (currentStep) {\r      case 0:\r        return (\r          <div className=\"step-content\">\r            <h3>Ticari ve Vergi Bilgileri</h3>\r            <p style={{ marginBottom: 24, color: '#666' }}>\r              Fatura ve resmi işlemler için gerekli bilgiler\r            </p>\r            <Row gutter={16}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"taxNumber\"\r                  label=\"Vergi Numarası\"\r                  rules={[\r                    { required: true, message: 'Vergi numarası zorunludur' },\r                    { pattern: /^\\d{10,11}$/, message: 'Vergi numarası 10 veya 11 haneli olmalıdır' }\r                  ]}\r                  tooltip=\"10 haneli vergi no veya 11 haneli TC kimlik no\"\r                >\r                  <Input size=\"large\" placeholder=\"Vergi numaranız\" maxLength={11} / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"taxOffice\"\r                  label=\"Vergi Dairesi\"\r                  rules={[{ required: true, message: 'Vergi dairesi zorunludur' }]}\r                >\r                  <Input size=\"large\" placeholder=\"Örn: Kadıköy V.D.\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={16}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"tradeRegisterNumber\"\r                  label=\"Ticaret Sicil No\"\r                  tooltip=\"Ticaret odasına kayıtlı sicil numaranız\"\r                >\r                  <Input size=\"large\" placeholder=\"Ticaret sicil numarası (opsiyonel)\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"sector\"\r                  label=\"Sektör\"\r                  rules={[{ required: true, message: 'Sektör seçimi zorunludur' }]}\r                >\r                  <Select size=\"large\" placeholder=\"Sektör seçiniz\" aria-label=\"select field\">\r                    <Option value=\"Teknoloji\">Teknoloji</Option>\r                    <Option value=\"Üretim\">Üretim</Option>\r                    <Option value=\"Hizmet\">Hizmet</Option>\r                    <Option value=\"Ticaret\">Ticaret</Option>\r                    <Option value=\"İnşaat\">İnşaat</Option>\r                    <Option value=\"Sağlık\">Sağlık</Option>\r                    <Option value=\"Eğitim\">Eğitim</Option>\r                    <Option value=\"Gıda\">Gıda</Option>\r                    <Option value=\"Tekstil\">Tekstil</Option>\r                    <Option value=\"Lojistik\">Lojistik</Option>\r                    <Option value=\"Turizm\">Turizm</Option>\r                    <Option value=\"Danışmanlık\">Danışmanlık</Option>\r                    <Option value=\"Diğer\">Diğer</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r            </Row>\r          </div>\r        );\r      case 1:\r        return (\r          <div className=\"step-content\">\r            <h3>Adres Bilgileri</h3>\r            <p style={{ marginBottom: 24, color: '#666' }}>\r              Faturalarınızda görünecek resmi adres bilgileri\r            </p>\r            <Row gutter={16}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"country\"\r                  label=\"Ülke\"\r                  rules={[{ required: true, message: 'Ülke seçimi zorunludur' }]}\r                  initialValue=\"Türkiye\"\r                >\r                  <Select size=\"large\" aria-label=\"select field\">\r                    <Option value=\"Türkiye\">Türkiye</Option>\r                    <Option value=\"KKTC\">KKTC</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"city\"\r                  label=\"İl\"\r                  rules={[{ required: true, message: 'İl seçimi zorunludur' }]}\r                >\r                  <Select \r                    size=\"large\" \r                    placeholder=\"İl seçiniz\"\r                    onChange={handleCityChange}\r                    showSearch\r                    filterOption={(input, option) = aria-label=\"select field\">\r                      (option?.label ?? '').toLowerCase().includes(input.toLowerCase())\r                    }\r                    options={getCitiesForSelect()}\r                  />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={16}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"district\"\r                  label=\"İlçe\"\r                  rules={[{ required: true, message: 'İlçe seçimi zorunludur' }]}\r                >\r                  <Select\r                    size=\"large\"\r                    placeholder=\"Önce il seçiniz\"\r                    showSearch\r                    filterOption={(input, option) = aria-label=\"select field\">\r                      (option?.label ?? '').toLowerCase().includes(input.toLowerCase())\r                    }\r                    options={districts}\r                    disabled={districts.length === 0}\r                  />\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"postalCode\"\r                  label=\"Posta Kodu\"\r                  tooltip=\"5 haneli posta kodunuz\"\r                >\r                  <Input size=\"large\" placeholder=\"34000\" maxLength={5} / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Form.Item\r              name=\"addressLine\"\r              label=\"Açık Adres\"\r              rules={[\r                { required: true, message: 'Adres zorunludur' },\r                { min: 20, message: 'Adres en az 20 karakter olmalıdır' }\r              ]}\r            >\r              <TextArea \r                size=\"large\" \r                rows={3} \r                placeholder=\"Mahalle, cadde, sokak, bina no, daire no vb. detaylı adres bilgisi\"\r                showCount\r                maxLength={250}\r              />\r            </Form.Item>\r          </div>\r        );\r      case 2:\r        return (\r          <div className=\"step-content\">\r            <h3>Ek Bilgiler</h3>\r            <p style={{ marginBottom: 24, color: '#666' }}>\r              Şirketiniz hakkında ek bilgiler (bazı alanlar opsiyonel)\r            </p>\r            <Row gutter={16}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"employeeCount\"\r                  label=\"Çalışan Sayısı\"\r                  tooltip=\"Yaklaşık çalışan sayınız\"\r                >\r                  <Select size=\"large\" placeholder=\"Çalışan sayısı seçiniz\" aria-label=\"select field\">\r                    <Option value=\"1-5\">1-5</Option>\r                    <Option value=\"6-10\">6-10</Option>\r                    <Option value=\"11-25\">11-25</Option>\r                    <Option value=\"26-50\">26-50</Option>\r                    <Option value=\"51-100\">51-100</Option>\r                    <Option value=\"101-250\">101-250</Option>\r                    <Option value=\"250+\">250+</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"foundedYear\"\r                  label=\"Kuruluş Yılı\"\r                  tooltip=\"Şirketinizin kuruluş yılı\"\r                >\r                  <InputNumber \r                    size=\"large\" \r                    min={1900} \r                    max={new Date().getFullYear()} \r                    style={{ width: '100%' }} \r                    placeholder={String(new Date().getFullYear())}\r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={16}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"website\"\r                  label=\"Web Sitesi\"\r                  rules={[\r                    { type: 'url', message: 'Geçerli bir URL giriniz' }\r                  ]}\r                >\r                  <Input size=\"large\" prefix={<GlobalOutlined / aria-label=\"input field\">} placeholder=\"https://www.example.com\" />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={16}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"currency\"\r                  label=\"Para Birimi\"\r                  rules={[{ required: true, message: 'Para birimi seçimi zorunludur' }]}\r                  initialValue=\"TRY\"\r                >\r                  <Select size=\"large\" aria-label=\"select field\">\r                    <Option value=\"TRY\">Türk Lirası (TRY)</Option>\r                    <Option value=\"USD\">ABD Doları (USD)</Option>\r                    <Option value=\"EUR\">Euro (EUR)</Option>\r                    <Option value=\"GBP\">İngiliz Sterlini (GBP)</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"timezone\"\r                  label=\"Saat Dilimi\"\r                  rules={[{ required: true, message: 'Saat dilimi seçimi zorunludur' }]}\r                  initialValue=\"Europe/Istanbul\"\r                >\r                  <Select size=\"large\" aria-label=\"select field\">\r                    <Option value=\"Europe/Istanbul\">Türkiye (UTC+3)</Option>\r                    <Option value=\"Europe/London\">Londra (UTC+0)</Option>\r                    <Option value=\"Europe/Berlin\">Berlin (UTC+1)</Option>\r                    <Option value=\"America/New_York\">New York (UTC-5)</Option>\r                    <Option value=\"UTC\">UTC</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r            </Row>\r          </div>\r        );\r      default:\r        return null;\r    }\r  };\r  return (\r    <div className=\"company-setup-container\">\r      <Card className=\"company-setup-card\">\r        <div className=\"setup-header\">\r          <h1><BankOutlined /> Şirket Bilgileri</h1>\r          <p>Şirketinizle ilgili detaylı bilgileri tamamlayarak kurulumu bitirin</p>\r        </div>\r        <Steps current={currentStep} className=\"setup-steps\">\r          {steps.map((step, index) => (\r            <Step key={index} title={step.title} icon={step.icon} />\r          ))}\r        </Steps>\r        <Form\r          form={form}\r          layout=\"vertical\"\r          className=\"setup-form\"\r          initialValues={formData}\r        >\r          {renderStepContent()}\r        </Form>\r        <div className=\"setup-actions\">\r          {currentStep > 0 && (\r            <Button size=\"large\" onClick={handlePrev}>\r              Geri\r            </Button>\r          )}\r          <Button\r            type=\"primary\"\r            size=\"large\"\r            loading={loading}\r            onClick={handleNext}\r          >\r            {currentStep === steps.length - 1 ? 'Kurulumu Tamamla' : 'İleri'}\r          </Button>\r        </div>\r      </Card>\r    </div>\r  );\r};\rexport default CompanySetup;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/company/pages/CompanySetup/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { useNavigate } from 'react-router-dom';\rimport {\r  Steps,\r  Card,\r  Button,\r  Form,\r  Input,\r  Select,\r  Row,\r  Col,\r  Checkbox,\r  InputNumber,\r  Upload,\r  Switch,\r  DatePicker,\r  message,\r  Progress,\r  Badge,\r  Divider,\r  Typography,\r  Space,\r  Alert,\r  Tooltip,\r  Tag,\r  Modal,\r  Result,\r  Timeline,\r  Statistic,\r  List,\r  Avatar,\r  Table\r} from 'antd';\rimport {\r  BankOutlined,\r  TeamOutlined,\r  AppstoreOutlined,\r  DollarOutlined,\r  SafetyOutlined,\r  ApiOutlined,\r  DatabaseOutlined,\r  CheckCircleOutlined,\r  UploadOutlined,\r  InfoCircleOutlined,\r  QuestionCircleOutlined,\r  ClockCircleOutlined,\r  LockOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  CreditCardOutlined,\r  FileTextOutlined,\r  FolderOpenOutlined,\r  UsergroupAddOutlined,\r  SettingOutlined,\r  GlobalOutlined,\r  CalendarOutlined,\r  PercentageOutlined,\r  CloudUploadOutlined,\r  SaveOutlined,\r  RocketOutlined,\r  WarningOutlined,\r  ExclamationCircleOutlined\r} from '@ant-design/icons';\rimport { useAuthStore } from '@/app/store/auth.store';\rimport { getCitiesForSelect, getDistrictsByCityForSelect } from '@/data/turkey-cities';\rimport wizardService from '@/services/wizardService';\rimport companyService from '@/services/companyService';\rimport Swal from 'sweetalert2';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Option } = Select;\rconst { TextArea } = Input;\rconst { Dragger } = Upload;\rconst { RangePicker } = DatePicker;\rinterface WizardStep {\r  key: string;\r  title: string;\r  icon: React.ReactNode;\r  description: string;\r  required: boolean;\r  category: 'required' | 'recommended' | 'optional';\r  completed: boolean;\r  skipped: boolean;\r  data?: any;\r}\rconst CompanyWizard: React.FC = () => {\r  const [currentStep, setCurrentStep] = useState(0);\r  const [loading, setLoading] = useState(false);\r  const [saving, setSaving] = useState(false);\r  const [wizardId, setWizardId] = useState<string | null>(null);\r  const [form] = Form.useForm();\r  const navigate = useNavigate();\r  const { user } = useAuthStore();\r  const [wizardData, setWizardData] = useState<any>({});\r  const [completedSteps, setCompletedSteps] = useState<Set<number>>(new Set());\r  const [skippedSteps, setSkippedSteps] = useState<Set<number>>(new Set());\r  const [districts, setDistricts] = useState<{ label: string; value: string }[]>([]);\r  const [selectedModules, setSelectedModules] = useState<string[]>([]);\r  const [autoSaveEnabled, setAutoSaveEnabled] = useState(true);\r  const [lastSaveTime, setLastSaveTime] = useState<Date | null>(null);\r  const [progress, setProgress] = useState(0);\r  const [requiredProgress, setRequiredProgress] = useState(0);\r  const steps: WizardStep[] = [\r    {\r      key: 'company',\r      title: 'Şirket Bilgileri',\r      icon: <BankOutlined />,\r      description: 'Temel şirket bilgileri ve iletişim',\r      required: true,\r      category: 'required',\r      completed: false,\r      skipped: false\r    },\r    {\r      key: 'organization',\r      title: 'Organizasyon',\r      icon: <TeamOutlined />,\r      description: 'Departmanlar, şubeler ve kullanıcılar',\r      required: false,\r      category: 'recommended',\r      completed: false,\r      skipped: false\r    },\r    {\r      key: 'modules',\r      title: 'Modüller',\r      icon: <AppstoreOutlined />,\r      description: 'Kullanılacak modül ve özellikler',\r      required: true,\r      category: 'required',\r      completed: false,\r      skipped: false\r    },\r    {\r      key: 'financial',\r      title: 'Mali Ayarlar',\r      icon: <DollarOutlined />,\r      description: 'Para birimi, vergi ve muhasebe',\r      required: true,\r      category: 'required',\r      completed: false,\r      skipped: false\r    },\r    {\r      key: 'security',\r      title: 'Güvenlik',\r      icon: <SafetyOutlined />,\r      description: 'Güvenlik politikaları ve yedekleme',\r      required: true,\r      category: 'required',\r      completed: false,\r      skipped: false\r    },\r    {\r      key: 'integration',\r      title: 'Entegrasyonlar',\r      icon: <ApiOutlined />,\r      description: 'E-posta, SMS ve ödeme sistemleri',\r      required: false,\r      category: 'optional',\r      completed: false,\r      skipped: false\r    },\r    {\r      key: 'import',\r      title: 'Veri Aktarımı',\r      icon: <DatabaseOutlined />,\r      description: 'Mevcut verilerin sisteme aktarılması',\r      required: false,\r      category: 'optional',\r      completed: false,\r      skipped: false\r    },\r    {\r      key: 'review',\r      title: 'Gözden Geçir',\r      icon: <CheckCircleOutlined />,\r      description: 'Ayarları kontrol et ve tamamla',\r      required: true,\r      category: 'required',\r      completed: false,\r      skipped: false\r    }\r  ];\r  const modules = [\r    { id: 'crm', name: 'CRM', description: 'Müşteri ilişkileri yönetimi', icon: <UsergroupAddOutlined /> },\r    { id: 'sales', name: 'Satış', description: 'Satış ve sipariş yönetimi', icon: <ShoppingCartOutlined /> },\r    { id: 'inventory', name: 'Stok', description: 'Stok takibi ve yönetimi', icon: <DatabaseOutlined /> },\r    { id: 'accounting', name: 'Muhasebe', description: 'Finansal işlemler ve raporlama', icon: <DollarOutlined /> },\r    { id: 'hr', name: 'İnsan Kaynakları', description: 'Personel yönetimi', icon: <TeamOutlined /> },\r    { id: 'project', name: 'Proje', description: 'Proje ve görev yönetimi', icon: <ProjectOutlined /> },\r    { id: 'production', name: 'Üretim', description: 'Üretim planlama ve takibi', icon: <ToolOutlined /> },\r    { id: 'service', name: 'Servis', description: 'Teknik servis yönetimi', icon: <CustomerServiceOutlined /> }\r  ];\r  // Import missing icons\r  const ShoppingCartOutlined = () => <span>🛒</span>;\r  const ProjectOutlined = () => <span>📊</span>;\r  const ToolOutlined = () => <span>🔧</span>;\r  const CustomerServiceOutlined = () => <span>🎧</span>;\r  useEffect(() => {\r    initializeWizard();\r  }, []);\r  useEffect(() => {\r    if (autoSaveEnabled && wizardId) {\r      const timer = setTimeout(() => {\r        saveProgress();\r      }, 30000); // Auto-save every 30 seconds\r      return () => clearTimeout(timer);\r    }\r  }, [wizardData, autoSaveEnabled, wizardId]);\r  const initializeWizard = async () => {\r    try {\r      // Check if wizard already exists\r      const existingWizard = await wizardService.getActiveWizard();\r      if (existingWizard) {\r        setWizardId(existingWizard.id);\r        setWizardData(existingWizard.savedConfiguration || {});\r        setCurrentStep(existingWizard.currentStep - 1);\r        setProgress(existingWizard.progressPercentage);\r        // Restore completed/skipped steps\r        if (existingWizard.completedStepsData) {\r          setCompletedSteps(new Set(existingWizard.completedStepsData));\r        }\r        if (existingWizard.skippedStepsData) {\r          setSkippedSteps(new Set(existingWizard.skippedStepsData));\r        }\r      } else {\r        // Create new wizard\r        const newWizard = await wizardService.createWizard({\r          wizardType: 'CompanySetup',\r          totalSteps: steps.length\r        });\r        setWizardId(newWizard.id);\r      }\r    } catch (error) {\r      message.error('Wizard başlatılamadı');\r    }\r  };\r  const saveProgress = async () => {\r    if (!wizardId) return;\r    setSaving(true);\r    try {\r      await wizardService.saveProgress(wizardId, {\r        currentStep: currentStep + 1,\r        savedConfiguration: wizardData,\r        completedStepsData: Array.from(completedSteps),\r        skippedStepsData: Array.from(skippedSteps)\r      });\r      setLastSaveTime(new Date());\r      message.success('İlerleme kaydedildi', 1);\r    } catch (error) {\r      message.error('İlerleme kaydedilemedi');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleNext = async () => {\r    try {\r      const values = await form.validateFields();\r      const stepKey = steps[currentStep].key;\r      // Save step data\r      setWizardData(prev => ({\r        ...prev,\r        [stepKey]: values\r      }));\r      // Mark step as completed\r      setCompletedSteps(prev => new Set(prev).add(currentStep));\r      // Update progress\r      updateProgress();\r      // Save to backend\r      if (wizardId) {\r        await wizardService.updateStep(wizardId, {\r          stepNumber: currentStep + 1,\r          stepData: values,\r          completed: true\r        });\r      }\r      if (currentStep < steps.length - 1) {\r        setCurrentStep(currentStep + 1);\r      } else {\r        handleComplete();\r      }\r    } catch (error) {\r      message.error('Lütfen gerekli alanları doldurun');\r    }\r  };\r  const handlePrev = () => {\r    setCurrentStep(currentStep - 1);\r  };\r  const handleSkip = async () => {\r    const step = steps[currentStep];\r    if (step.required) {\r      message.warning('Bu adım zorunludur ve atlanamaz');\r      return;\r    }\r    Modal.confirm({\r      title: 'Adımı Atla',\r      content: 'Bu adımı atlamak istediğinizden emin misiniz? Daha sonra geri dönebilirsiniz.',\r      onOk: async () => {\r        setSkippedSteps(prev => new Set(prev).add(currentStep));\r        if (wizardId) {\r          await wizardService.skipStep(wizardId, {\r            stepNumber: currentStep + 1,\r            reason: 'User skipped'\r          });\r        }\r        if (currentStep < steps.length - 1) {\r          setCurrentStep(currentStep + 1);\r        }\r      }\r    });\r  };\r  const handleComplete = async () => {\r    setLoading(true);\r    try {\r      // Complete wizard\r      if (wizardId) {\r        await wizardService.completeWizard(wizardId);\r      }\r      // Create company with all collected data\r      await companyService.createCompanyWithFullSetup(wizardData);\r      // Show success\r      Modal.success({\r        title: 'Kurulum Tamamlandı!',\r        content: (\r          <div>\r            <Result\r              status=\"success\"\r              title=\"Şirket kurulumunuz başarıyla tamamlandı\"\r              subTitle=\"Artık sistemi kullanmaya başlayabilirsiniz\"\r            />\r            <Progress percent={100} status=\"success\" />\r          </div>\r        ),\r        onOk: () => {\r          navigate('/admin/dashboard');\r        }\r      });\r    } catch (error) {\r      message.error('Kurulum tamamlanamadı');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const updateProgress = () => {\r    const completed = completedSteps.size;\r    const requiredCompleted = Array.from(completedSteps).filter(\r      i => steps[i].required\r    ).length;\r    const requiredTotal = steps.filter(s => s.required).length;\r    setProgress((completed / steps.length) * 100);\r    setRequiredProgress((requiredCompleted / requiredTotal) * 100);\r  };\r  const handleCityChange = (cityName: string) => {\r    form.setFieldsValue({ district: undefined });\r    setDistricts(getDistrictsByCityForSelect(cityName));\r  };\r  const renderStepContent = () => {\r    switch (currentStep) {\r      case 0: // Company Information\r        return (\r          <div className=\"wizard-step-content\">\r            <Title level={4}>\r              <BankOutlined /> Şirket Bilgileri\r            </Title>\r            <Paragraph type=\"secondary\">\r              Şirketinizin temel bilgilerini ve iletişim detaylarını girin\r            </Paragraph>\r            <Divider />\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"companyName\"\r                  label=\"Şirket Adı\"\r                  rules={[{ required: true, message: 'Şirket adı zorunludur' }]}\r                >\r                  <Input size=\"large\" prefix={<BankOutlined / aria-label=\"input field\">} placeholder=\"Örn: ABC Teknoloji A.Ş.\" />\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"legalName\"\r                  label=\"Ticari Ünvan\"\r                  rules={[{ required: true, message: 'Ticari ünvan zorunludur' }]}\r                >\r                  <Input size=\"large\" placeholder=\"Tam ticari ünvanınız\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"taxNumber\"\r                  label=\"Vergi Numarası\"\r                  rules={[\r                    { required: true, message: 'Vergi numarası zorunludur' },\r                    { pattern: /^\\d{10,11}$/, message: '10 veya 11 haneli olmalıdır' }\r                  ]}\r                >\r                  <Input size=\"large\" placeholder=\"10 veya 11 haneli\" maxLength={11} / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"taxOffice\"\r                  label=\"Vergi Dairesi\"\r                  rules={[{ required: true, message: 'Vergi dairesi zorunludur' }]}\r                >\r                  <Input size=\"large\" placeholder=\"Örn: Kadıköy V.D.\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"tradeRegisterNumber\"\r                  label=\"Ticaret Sicil No\"\r                  tooltip=\"Ticaret odasına kayıtlı sicil numaranız\"\r                >\r                  <Input size=\"large\" placeholder=\"Opsiyonel\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"sector\"\r                  label=\"Sektör\"\r                  rules={[{ required: true, message: 'Sektör seçimi zorunludur' }]}\r                >\r                  <Select size=\"large\" placeholder=\"Sektör seçiniz\" aria-label=\"select field\">\r                    <Option value=\"Teknoloji\">Teknoloji</Option>\r                    <Option value=\"Üretim\">Üretim</Option>\r                    <Option value=\"Hizmet\">Hizmet</Option>\r                    <Option value=\"Ticaret\">Ticaret</Option>\r                    <Option value=\"İnşaat\">İnşaat</Option>\r                    <Option value=\"Sağlık\">Sağlık</Option>\r                    <Option value=\"Eğitim\">Eğitim</Option>\r                    <Option value=\"Gıda\">Gıda</Option>\r                    <Option value=\"Tekstil\">Tekstil</Option>\r                    <Option value=\"Lojistik\">Lojistik</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider orientation=\"left\">İletişim Bilgileri</Divider>\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"email\"\r                  label=\"E-posta\"\r                  rules={[\r                    { required: true, message: 'E-posta zorunludur' },\r                    { type: 'email', message: 'Geçerli bir e-posta adresi girin' }\r                  ]}\r                >\r                  <Input size=\"large\" prefix={<MailOutlined / aria-label=\"input field\">} placeholder=\"info@sirket.com\" />\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"phone\"\r                  label=\"Telefon\"\r                  rules={[{ required: true, message: 'Telefon zorunludur' }]}\r                >\r                  <Input size=\"large\" prefix={<PhoneOutlined / aria-label=\"input field\">} placeholder=\"0212 123 45 67\" />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"website\"\r                  label=\"Web Sitesi\"\r                  rules={[{ type: 'url', message: 'Geçerli bir URL girin' }]}\r                >\r                  <Input size=\"large\" prefix={<GlobalOutlined / aria-label=\"input field\">} placeholder=\"https://www.sirket.com\" />\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"foundedYear\"\r                  label=\"Kuruluş Yılı\"\r                >\r                  <InputNumber \r                    size=\"large\" \r                    min={1900} \r                    max={new Date().getFullYear()} \r                    style={{ width: '100%' }}\r                    placeholder=\"2020\"\r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider orientation=\"left\">Logo</Divider>\r            <Form.Item\r              name=\"logo\"\r              label=\"Şirket Logosu\"\r              valuePropName=\"fileList\"\r              getValueFromEvent={(e) => e?.fileList}\r            >\r              <Dragger\r                name=\"logo\"\r                multiple={false}\r                maxCount={1}\r                accept=\"image/*\"\r                beforeUpload={() => false}\r              >\r                <p className=\"ant-upload-drag-icon\">\r                  <UploadOutlined />\r                </p>\r                <p className=\"ant-upload-text\">Logo yüklemek için tıklayın veya sürükleyin</p>\r                <p className=\"ant-upload-hint\">PNG, JPG veya SVG formatında, maksimum 2MB</p>\r              </Dragger>\r            </Form.Item>\r          </div>\r        );\r      case 1: // Organization\r        return (\r          <div className=\"wizard-step-content\">\r            <Title level={4}>\r              <TeamOutlined /> Organizasyon Yapısı\r            </Title>\r            <Paragraph type=\"secondary\">\r              Departmanlar, şubeler ve kullanıcı rolleri tanımlayın\r            </Paragraph>\r            <Divider />\r            <Alert\r              message=\"İpucu\"\r              description=\"Bu adımı atlayıp daha sonra detaylı olarak yapılandırabilirsiniz.\"\r              type=\"info\"\r              showIcon\r              style={{ marginBottom: 24 }}\r            />\r            <Divider orientation=\"left\">Departmanlar</Divider>\r            <Form.Item\r              name=\"departments\"\r              label=\"Departman Listesi\"\r            >\r              <Select\r                mode=\"tags\"\r                size=\"large\"\r                placeholder=\"Departman ekleyin (Enter tuşu ile)\"\r                style={{ width: '100%' }}\r               aria-label=\"select field\">\r                <Option value=\"Yönetim\">Yönetim</Option>\r                <Option value=\"Satış\">Satış</Option>\r                <Option value=\"Pazarlama\">Pazarlama</Option>\r                <Option value=\"Muhasebe\">Muhasebe</Option>\r                <Option value=\"İnsan Kaynakları\">İnsan Kaynakları</Option>\r                <Option value=\"Bilgi İşlem\">Bilgi İşlem</Option>\r                <Option value=\"Üretim\">Üretim</Option>\r                <Option value=\"Ar-Ge\">Ar-Ge</Option>\r              </Select>\r            </Form.Item>\r            <Divider orientation=\"left\">Şubeler</Divider>\r            <Form.Item\r              name=\"branches\"\r              label=\"Şube/Lokasyon Listesi\"\r            >\r              <Select\r                mode=\"tags\"\r                size=\"large\"\r                placeholder=\"Şube ekleyin (Enter tuşu ile)\"\r                style={{ width: '100%' }}\r               aria-label=\"select field\">\r                <Option value=\"Merkez Ofis\">Merkez Ofis</Option>\r                <Option value=\"Fabrika\">Fabrika</Option>\r                <Option value=\"Depo\">Depo</Option>\r                <Option value=\"Şube\">Şube</Option>\r              </Select>\r            </Form.Item>\r            <Divider orientation=\"left\">Kullanıcı Rolleri</Divider>\r            <Form.Item\r              name=\"userRoles\"\r              label=\"Tanımlanacak Roller\"\r            >\r              <Checkbox.Group style={{ width: '100%' }}>\r                <Row gutter={[16, 16]}>\r                  <Col span={8}>\r                    <Checkbox value=\"admin\">Yönetici</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"manager\">Müdür</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"supervisor\">Süpervizör</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"accountant\">Muhasebeci</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"sales\">Satış Temsilcisi</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"support\">Destek Personeli</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"warehouse\">Depo Görevlisi</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"production\">Üretim Personeli</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"hr\">İK Uzmanı</Checkbox>\r                  </Col>\r                </Row>\r              </Checkbox.Group>\r            </Form.Item>\r            <Divider orientation=\"left\">Çalışan Sayısı</Divider>\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"employeeCount\"\r                  label=\"Toplam Çalışan Sayısı\"\r                >\r                  <Select size=\"large\" placeholder=\"Seçiniz\" aria-label=\"select field\">\r                    <Option value=\"1-5\">1-5</Option>\r                    <Option value=\"6-10\">6-10</Option>\r                    <Option value=\"11-25\">11-25</Option>\r                    <Option value=\"26-50\">26-50</Option>\r                    <Option value=\"51-100\">51-100</Option>\r                    <Option value=\"101-250\">101-250</Option>\r                    <Option value=\"250+\">250+</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"expectedUsers\"\r                  label=\"Sistemi Kullanacak Kişi Sayısı\"\r                >\r                  <InputNumber\r                    size=\"large\"\r                    min={1}\r                    style={{ width: '100%' }}\r                    placeholder=\"Örn: 10\"\r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r          </div>\r        );\r      case 2: // Modules\r        return (\r          <div className=\"wizard-step-content\">\r            <Title level={4}>\r              <AppstoreOutlined /> Modül Seçimi\r            </Title>\r            <Paragraph type=\"secondary\">\r              İşletmenizde kullanmak istediğiniz modülleri seçin\r            </Paragraph>\r            <Divider />\r            <Alert\r              message=\"Önemli\"\r              description=\"Seçtiğiniz modüller aylık ücretinizi etkileyebilir. Daha sonra modül ekleyebilir veya kaldırabilirsiniz.\"\r              type=\"warning\"\r              showIcon\r              style={{ marginBottom: 24 }}\r            />\r            <Form.Item\r              name=\"selectedModules\"\r              rules={[{ required: true, message: 'En az bir modül seçmelisiniz' }]}\r            >\r              <Checkbox.Group\r                style={{ width: '100%' }}\r                onChange={setSelectedModules}\r              >\r                <Row gutter={[16, 16]}>\r                  {modules.map(module => (\r                    <Col span={12} key={module.id}>\r                      <Card \r                        hoverable\r                        className=\"module-card\"\r                        style={{ height: '100%' }}\r                      >\r                        <Space direction=\"vertical\" style={{ width: '100%' }}>\r                          <Checkbox value={module.id}>\r                            <Space>\r                              {module.icon}\r                              <Text strong>{module.name}</Text>\r                            </Space>\r                          </Checkbox>\r                          <Text type=\"secondary\" style={{ marginLeft: 24 }}>\r                            {module.description}\r                          </Text>\r                        </Space>\r                      </Card>\r                    </Col>\r                  ))}\r                </Row>\r              </Checkbox.Group>\r            </Form.Item>\r            <Divider orientation=\"left\">Modül Konfigürasyonu</Divider>\r            <Form.Item\r              name=\"moduleSettings\"\r              label=\"Varsayılan Ayarları Kullan\"\r              valuePropName=\"checked\"\r            >\r              <Switch defaultChecked />\r            </Form.Item>\r            <Form.Item\r              name=\"customModuleSettings\"\r              label=\"Özel Notlar\"\r            >\r              <TextArea\r                rows={4}\r                placeholder=\"Modüllerle ilgili özel istekleriniz varsa belirtin...\"\r              />\r            </Form.Item>\r          </div>\r        );\r      case 3: // Financial Settings\r        return (\r          <div className=\"wizard-step-content\">\r            <Title level={4}>\r              <DollarOutlined /> Mali Ayarlar\r            </Title>\r            <Paragraph type=\"secondary\">\r              Para birimi, vergi ve muhasebe ayarlarını yapılandırın\r            </Paragraph>\r            <Divider />\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"currency\"\r                  label=\"Ana Para Birimi\"\r                  rules={[{ required: true, message: 'Para birimi seçimi zorunludur' }]}\r                  initialValue=\"TRY\"\r                >\r                  <Select size=\"large\" aria-label=\"select field\">\r                    <Option value=\"TRY\">Türk Lirası (₺)</Option>\r                    <Option value=\"USD\">ABD Doları ($)</Option>\r                    <Option value=\"EUR\">Euro (€)</Option>\r                    <Option value=\"GBP\">İngiliz Sterlini (£)</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"multiCurrency\"\r                  label=\"Çoklu Para Birimi\"\r                  valuePropName=\"checked\"\r                >\r                  <Switch /> <Text type=\"secondary\">Birden fazla para birimi kullan</Text>\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider orientation=\"left\">Vergi Ayarları</Divider>\r            <Row gutter={24}>\r              <Col span={8}>\r                <Form.Item\r                  name=\"defaultKDV\"\r                  label=\"Varsayılan KDV Oranı (%)\"\r                  rules={[{ required: true, message: 'KDV oranı zorunludur' }]}\r                  initialValue={20}\r                >\r                  <InputNumber\r                    size=\"large\"\r                    min={0}\r                    max={100}\r                    style={{ width: '100%' }}\r                    formatter={value = aria-label=\"input field\"> `${value}%`}\r                    parser={value => value!.replace('%', '')}\r                  />\r                </Form.Item>\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"withholdingTax\"\r                  label=\"Stopaj Oranı (%)\"\r                >\r                  <InputNumber\r                    size=\"large\"\r                    min={0}\r                    max={100}\r                    style={{ width: '100%' }}\r                    formatter={value = aria-label=\"input field\"> `${value}%`}\r                    parser={value => value!.replace('%', '')}\r                  />\r                </Form.Item>\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"specialTax\"\r                  label=\"ÖTV Kullan\"\r                  valuePropName=\"checked\"\r                >\r                  <Switch />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider orientation=\"left\">Mali Yıl</Divider>\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"fiscalYearStart\"\r                  label=\"Mali Yıl Başlangıcı\"\r                  rules={[{ required: true, message: 'Mali yıl başlangıcı zorunludur' }]}\r                >\r                  <DatePicker\r                    size=\"large\"\r                    style={{ width: '100%' }}\r                    format=\"DD/MM\"\r                    placeholder=\"01/01\"\r                  />\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"fiscalYearEnd\"\r                  label=\"Mali Yıl Bitişi\"\r                  rules={[{ required: true, message: 'Mali yıl bitişi zorunludur' }]}\r                >\r                  <DatePicker\r                    size=\"large\"\r                    style={{ width: '100%' }}\r                    format=\"DD/MM\"\r                    placeholder=\"31/12\"\r                  />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider orientation=\"left\">Hesap Planı</Divider>\r            <Form.Item\r              name=\"chartOfAccounts\"\r              label=\"Hesap Planı Şablonu\"\r              rules={[{ required: true, message: 'Hesap planı seçimi zorunludur' }]}\r            >\r              <Select size=\"large\" placeholder=\"Seçiniz\" aria-label=\"select field\">\r                <Option value=\"tekduzen\">Tek Düzen Hesap Planı</Option>\r                <Option value=\"custom\">Özel Hesap Planı</Option>\r                <Option value=\"import\">Excel'den İçe Aktar</Option>\r              </Select>\r            </Form.Item>\r            <Form.Item\r              name=\"accountingMethod\"\r              label=\"Muhasebe Yöntemi\"\r              rules={[{ required: true, message: 'Muhasebe yöntemi seçimi zorunludur' }]}\r            >\r              <Select size=\"large\" placeholder=\"Seçiniz\" aria-label=\"select field\">\r                <Option value=\"bilanço\">Bilanço Esası</Option>\r                <Option value=\"işletme\">İşletme Hesabı</Option>\r                <Option value=\"basit\">Basit Usul</Option>\r              </Select>\r            </Form.Item>\r          </div>\r        );\r      case 4: // Security\r        return (\r          <div className=\"wizard-step-content\">\r            <Title level={4}>\r              <SafetyOutlined /> Güvenlik ve Uyumluluk\r            </Title>\r            <Paragraph type=\"secondary\">\r              Güvenlik politikalarını ve yedekleme ayarlarını yapılandırın\r            </Paragraph>\r            <Divider />\r            <Alert\r              message=\"Güvenlik Önerisi\"\r              description=\"Verilerinizin güvenliği için tüm güvenlik özelliklerini etkinleştirmenizi öneriyoruz.\"\r              type=\"info\"\r              showIcon\r              style={{ marginBottom: 24 }}\r            />\r            <Divider orientation=\"left\">Şifre Politikası</Divider>\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"minPasswordLength\"\r                  label=\"Minimum Şifre Uzunluğu\"\r                  rules={[{ required: true }]}\r                  initialValue={8}\r                >\r                  <InputNumber\r                    size=\"large\"\r                    min={6}\r                    max={32}\r                    style={{ width: '100%' }}\r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"passwordExpiry\"\r                  label=\"Şifre Yenileme Süresi (gün)\"\r                  initialValue={90}\r                >\r                  <InputNumber\r                    size=\"large\"\r                    min={0}\r                    max={365}\r                    style={{ width: '100%' }}\r                    placeholder=\"0 = Süresiz\"\r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Form.Item name=\"passwordRequirements\">\r              <Checkbox.Group>\r                <Row gutter={[16, 8]}>\r                  <Col span={12}>\r                    <Checkbox value=\"uppercase\">Büyük harf zorunlu</Checkbox>\r                  </Col>\r                  <Col span={12}>\r                    <Checkbox value=\"lowercase\">Küçük harf zorunlu</Checkbox>\r                  </Col>\r                  <Col span={12}>\r                    <Checkbox value=\"numbers\">Rakam zorunlu</Checkbox>\r                  </Col>\r                  <Col span={12}>\r                    <Checkbox value=\"special\">Özel karakter zorunlu</Checkbox>\r                  </Col>\r                </Row>\r              </Checkbox.Group>\r            </Form.Item>\r            <Divider orientation=\"left\">İki Faktörlü Doğrulama</Divider>\r            <Form.Item\r              name=\"twoFactorAuth\"\r              label=\"İki Faktörlü Doğrulama\"\r              valuePropName=\"checked\"\r            >\r              <Switch defaultChecked /> <Text type=\"secondary\">Tüm kullanıcılar için zorunlu</Text>\r            </Form.Item>\r            <Form.Item\r              name=\"twoFactorMethods\"\r              label=\"Doğrulama Yöntemleri\"\r            >\r              <Checkbox.Group>\r                <Row gutter={[16, 8]}>\r                  <Col span={8}>\r                    <Checkbox value=\"sms\">SMS</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"email\">E-posta</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"app\">Authenticator App</Checkbox>\r                  </Col>\r                </Row>\r              </Checkbox.Group>\r            </Form.Item>\r            <Divider orientation=\"left\">Yedekleme</Divider>\r            <Form.Item\r              name=\"backupEnabled\"\r              label=\"Otomatik Yedekleme\"\r              valuePropName=\"checked\"\r              rules={[{ required: true }]}\r            >\r              <Switch defaultChecked /> <Text type=\"secondary\">Verileriniz düzenli olarak yedeklenir</Text>\r            </Form.Item>\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"backupFrequency\"\r                  label=\"Yedekleme Sıklığı\"\r                >\r                  <Select size=\"large\" defaultValue=\"daily\" aria-label=\"select field\">\r                    <Option value=\"realtime\">Gerçek Zamanlı</Option>\r                    <Option value=\"hourly\">Saatlik</Option>\r                    <Option value=\"daily\">Günlük</Option>\r                    <Option value=\"weekly\">Haftalık</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"backupRetention\"\r                  label=\"Saklama Süresi\"\r                >\r                  <Select size=\"large\" defaultValue=\"30\" aria-label=\"select field\">\r                    <Option value=\"7\">7 Gün</Option>\r                    <Option value=\"30\">30 Gün</Option>\r                    <Option value=\"90\">90 Gün</Option>\r                    <Option value=\"365\">1 Yıl</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider orientation=\"left\">Uyumluluk</Divider>\r            <Form.Item name=\"compliance\">\r              <Checkbox.Group>\r                <Row gutter={[16, 8]}>\r                  <Col span={12}>\r                    <Checkbox value=\"kvkk\">KVKK Uyumlu</Checkbox>\r                  </Col>\r                  <Col span={12}>\r                    <Checkbox value=\"gdpr\">GDPR Uyumlu</Checkbox>\r                  </Col>\r                  <Col span={12}>\r                    <Checkbox value=\"iso27001\">ISO 27001</Checkbox>\r                  </Col>\r                  <Col span={12}>\r                    <Checkbox value=\"iso9001\">ISO 9001</Checkbox>\r                  </Col>\r                </Row>\r              </Checkbox.Group>\r            </Form.Item>\r          </div>\r        );\r      case 5: // Integration\r        return (\r          <div className=\"wizard-step-content\">\r            <Title level={4}>\r              <ApiOutlined /> Entegrasyonlar\r            </Title>\r            <Paragraph type=\"secondary\">\r              Dış sistemlerle entegrasyon ayarlarını yapılandırın\r            </Paragraph>\r            <Divider />\r            <Divider orientation=\"left\">E-posta Entegrasyonu</Divider>\r            <Form.Item\r              name=\"emailIntegration\"\r              label=\"E-posta Servisi\"\r            >\r              <Select size=\"large\" placeholder=\"Seçiniz\" aria-label=\"select field\">\r                <Option value=\"smtp\">SMTP Sunucu</Option>\r                <Option value=\"sendgrid\">SendGrid</Option>\r                <Option value=\"mailgun\">Mailgun</Option>\r                <Option value=\"ses\">Amazon SES</Option>\r              </Select>\r            </Form.Item>\r            <Divider orientation=\"left\">SMS Entegrasyonu</Divider>\r            <Form.Item\r              name=\"smsIntegration\"\r              label=\"SMS Servisi\"\r            >\r              <Select size=\"large\" placeholder=\"Seçiniz\" aria-label=\"select field\">\r                <Option value=\"netgsm\">NetGSM</Option>\r                <Option value=\"iletimerkezi\">İleti Merkezi</Option>\r                <Option value=\"twilio\">Twilio</Option>\r                <Option value=\"mutlucell\">Mutlucell</Option>\r              </Select>\r            </Form.Item>\r            <Divider orientation=\"left\">Ödeme Sistemleri</Divider>\r            <Form.Item name=\"paymentGateways\">\r              <Checkbox.Group>\r                <Row gutter={[16, 16]}>\r                  <Col span={8}>\r                    <Checkbox value=\"iyzico\">Iyzico</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"paytr\">PayTR</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"param\">Param</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"payu\">PayU</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"stripe\">Stripe</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"paypal\">PayPal</Checkbox>\r                  </Col>\r                </Row>\r              </Checkbox.Group>\r            </Form.Item>\r            <Divider orientation=\"left\">E-Fatura / E-Arşiv</Divider>\r            <Form.Item\r              name=\"einvoiceProvider\"\r              label=\"E-Fatura Entegratörü\"\r            >\r              <Select size=\"large\" placeholder=\"Seçiniz\" aria-label=\"select field\">\r                <Option value=\"logo\">Logo</Option>\r                <Option value=\"mikro\">Mikro</Option>\r                <Option value=\"netsis\">Netsis</Option>\r                <Option value=\"foriba\">Foriba</Option>\r                <Option value=\"edmbilisim\">EDM Bilişim</Option>\r              </Select>\r            </Form.Item>\r            <Divider orientation=\"left\">Diğer Entegrasyonlar</Divider>\r            <Form.Item name=\"otherIntegrations\">\r              <Checkbox.Group>\r                <Row gutter={[16, 16]}>\r                  <Col span={12}>\r                    <Checkbox value=\"excel\">Excel İçe/Dışa Aktarım</Checkbox>\r                  </Col>\r                  <Col span={12}>\r                    <Checkbox value=\"api\">REST API</Checkbox>\r                  </Col>\r                  <Col span={12}>\r                    <Checkbox value=\"webhook\">Webhook</Checkbox>\r                  </Col>\r                  <Col span={12}>\r                    <Checkbox value=\"ldap\">LDAP/Active Directory</Checkbox>\r                  </Col>\r                </Row>\r              </Checkbox.Group>\r            </Form.Item>\r          </div>\r        );\r      case 6: // Import Data\r        return (\r          <div className=\"wizard-step-content\">\r            <Title level={4}>\r              <DatabaseOutlined /> Veri Aktarımı\r            </Title>\r            <Paragraph type=\"secondary\">\r              Mevcut verilerinizi sisteme aktarın\r            </Paragraph>\r            <Divider />\r            <Alert\r              message=\"Bilgi\"\r              description=\"Veri aktarımını şimdi veya daha sonra yapabilirsiniz. Excel şablonlarımızı kullanarak toplu veri aktarımı yapabilirsiniz.\"\r              type=\"info\"\r              showIcon\r              style={{ marginBottom: 24 }}\r            />\r            <Row gutter={[16, 24]}>\r              <Col span={12}>\r                <Card>\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <Title level={5}>\r                      <UsergroupAddOutlined /> Müşteriler\r                    </Title>\r                    <Form.Item name=\"importCustomers\" valuePropName=\"checked\">\r                      <Checkbox>Müşteri listesini içe aktar</Checkbox>\r                    </Form.Item>\r                    <Button icon={<DownloadOutlined />} block aria-label=\"download outlined\">\r                      Excel Şablonunu İndir\r                    </Button>\r                    <Upload beforeUpload={() => false}>\r                      <Button icon={<UploadOutlined />} block aria-label=\"upload outlined\">\r                        Excel Dosyası Yükle\r                      </Button>\r                    </Upload>\r                  </Space>\r                </Card>\r              </Col>\r              <Col span={12}>\r                <Card>\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <Title level={5}>\r                      <ShoppingCartOutlined /> Tedarikçiler\r                    </Title>\r                    <Form.Item name=\"importVendors\" valuePropName=\"checked\">\r                      <Checkbox>Tedarikçi listesini içe aktar</Checkbox>\r                    </Form.Item>\r                    <Button icon={<DownloadOutlined />} block aria-label=\"download outlined\">\r                      Excel Şablonunu İndir\r                    </Button>\r                    <Upload beforeUpload={() => false}>\r                      <Button icon={<UploadOutlined />} block aria-label=\"upload outlined\">\r                        Excel Dosyası Yükle\r                      </Button>\r                    </Upload>\r                  </Space>\r                </Card>\r              </Col>\r              <Col span={12}>\r                <Card>\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <Title level={5}>\r                      <DatabaseOutlined /> Ürünler/Hizmetler\r                    </Title>\r                    <Form.Item name=\"importProducts\" valuePropName=\"checked\">\r                      <Checkbox>Ürün/Hizmet listesini içe aktar</Checkbox>\r                    </Form.Item>\r                    <Button icon={<DownloadOutlined />} block aria-label=\"download outlined\">\r                      Excel Şablonunu İndir\r                    </Button>\r                    <Upload beforeUpload={() => false}>\r                      <Button icon={<UploadOutlined />} block aria-label=\"upload outlined\">\r                        Excel Dosyası Yükle\r                      </Button>\r                    </Upload>\r                  </Space>\r                </Card>\r              </Col>\r              <Col span={12}>\r                <Card>\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <Title level={5}>\r                      <DollarOutlined /> Hesap Planı\r                    </Title>\r                    <Form.Item name=\"importAccounts\" valuePropName=\"checked\">\r                      <Checkbox>Hesap planını içe aktar</Checkbox>\r                    </Form.Item>\r                    <Button icon={<DownloadOutlined />} block aria-label=\"download outlined\">\r                      Excel Şablonunu İndir\r                    </Button>\r                    <Upload beforeUpload={() => false}>\r                      <Button icon={<UploadOutlined />} block aria-label=\"upload outlined\">\r                        Excel Dosyası Yükle\r                      </Button>\r                    </Upload>\r                  </Space>\r                </Card>\r              </Col>\r            </Row>\r            <Divider />\r            <Alert\r              message=\"Veri Aktarım Durumu\"\r              description={\r                <Space direction=\"vertical\">\r                  <Text>Müşteriler: 0 kayıt</Text>\r                  <Text>Tedarikçiler: 0 kayıt</Text>\r                  <Text>Ürünler: 0 kayıt</Text>\r                  <Text>Hesaplar: 0 kayıt</Text>\r                </Space>\r              }\r              type=\"warning\"\r            />\r          </div>\r        );\r      case 7: // Review & Complete\r        return (\r          <div className=\"wizard-step-content\">\r            <Title level={4}>\r              <CheckCircleOutlined /> Gözden Geçir ve Tamamla\r            </Title>\r            <Paragraph type=\"secondary\">\r              Kurulum ayarlarınızı gözden geçirin ve onaylayın\r            </Paragraph>\r            <Divider />\r            <Row gutter={[24, 24]}>\r              <Col span={8}>\r                <Card>\r                  <Statistic\r                    title=\"Tamamlanan Adımlar\"\r                    value={completedSteps.size}\r                    suffix={`/ ${steps.length}`}\r                    prefix={<CheckCircleOutlined />}\r                  />\r                </Card>\r              </Col>\r              <Col span={8}>\r                <Card>\r                  <Statistic\r                    title=\"Zorunlu Adımlar\"\r                    value={requiredProgress}\r                    suffix=\"%\"\r                    prefix={<SafetyOutlined />}\r                  />\r                </Card>\r              </Col>\r              <Col span={8}>\r                <Card>\r                  <Statistic\r                    title=\"Genel İlerleme\"\r                    value={progress}\r                    suffix=\"%\"\r                    prefix={<RocketOutlined />}\r                  />\r                </Card>\r              </Col>\r            </Row>\r            <Divider orientation=\"left\">Kurulum Özeti</Divider>\r            <Timeline>\r              {steps.map((step, index) => (\r                <Timeline.Item\r                  key={step.key}\r                  color={\r                    completedSteps.has(index) ? 'green' :\r                    skippedSteps.has(index) ? 'orange' :\r                    'gray'\r                  }\r                  dot={\r                    completedSteps.has(index) ? <CheckCircleOutlined /> :\r                    skippedSteps.has(index) ? <ExclamationCircleOutlined /> :\r                    <ClockCircleOutlined />\r                  }\r                >\r                  <Space>\r                    <Text strong>{step.title}</Text>\r                    {completedSteps.has(index) && <Tag color=\"success\">Tamamlandı</Tag>}\r                    {skippedSteps.has(index) && <Tag color=\"warning\">Atlandı</Tag>}\r                    {step.required && <Tag color=\"error\">Zorunlu</Tag>}\r                  </Space>\r                </Timeline.Item>\r              ))}\r            </Timeline>\r            <Divider orientation=\"left\">Sonraki Adımlar</Divider>\r            <Alert\r              message=\"Kurulum Tamamlanıyor\"\r              description={\r                <div>\r                  <Paragraph>\r                    Kurulumu tamamladıktan sonra aşağıdaki işlemleri yapabilirsiniz:\r                  </Paragraph>\r                  <ul>\r                    <li>Kullanıcıları davet edin ve yetkilendirin</li>\r                    <li>Ürün ve hizmetlerinizi tanımlayın</li>\r                    <li>Müşteri ve tedarikçi bilgilerini girin</li>\r                    <li>İlk faturanızı oluşturun</li>\r                    <li>Raporları ve analizleri inceleyin</li>\r                  </ul>\r                </div>\r              }\r              type=\"success\"\r              showIcon\r            />\r            <Divider />\r            <Form.Item\r              name=\"acceptTerms\"\r              valuePropName=\"checked\"\r              rules={[\r                {\r                  validator: (_, value) =>\r                    value ? Promise.resolve() : Promise.reject('Şartları kabul etmelisiniz'),\r                },\r              ]}\r            >\r              <Checkbox>\r                <Space>\r                  <Text>Kullanım şartlarını ve gizlilik politikasını okudum, kabul ediyorum</Text>\r                  <Tooltip title=\"Kullanım şartlarını görüntüle\">\r                    <QuestionCircleOutlined />\r                  </Tooltip>\r                </Space>\r              </Checkbox>\r            </Form.Item>\r          </div>\r        );\r      default:\r        return null;\r    }\r  };\r  // Add missing import for DownloadOutlined\r  const DownloadOutlined = () => <span>⬇️</span>;\r  const canSkipStep = () => {\r    return !steps[currentStep].required;\r  };\r  const getStepStatus = (index: number) => {\r    if (completedSteps.has(index)) return 'finish';\r    if (skippedSteps.has(index)) return 'error';\r    if (index === currentStep) return 'process';\r    return 'wait';\r  };\r  return (\r    <div className=\"company-wizard-container\">\r      <Card className=\"wizard-card\">\r        <div className=\"wizard-header\">\r          <Row justify=\"space-between\" align=\"middle\">\r            <Col>\r              <Title level={2}>\r                <RocketOutlined /> Şirket Kurulum Sihirbazı\r              </Title>\r              <Text type=\"secondary\">\r                Sistemi kullanmaya başlamak için gerekli ayarları yapın\r              </Text>\r            </Col>\r            <Col>\r              <Space>\r                {lastSaveTime && (\r                  <Text type=\"secondary\">\r                    <SaveOutlined /> Son kayıt: {lastSaveTime.toLocaleTimeString()}\r                  </Text>\r                )}\r                <Switch\r                  checked={autoSaveEnabled}\r                  onChange={setAutoSaveEnabled}\r                  checkedChildren=\"Otomatik Kayıt\"\r                  unCheckedChildren=\"Manuel\"\r                />\r              </Space>\r            </Col>\r          </Row>\r        </div>\r        <Divider />\r        <Row gutter={24}>\r          <Col span={6}>\r            <Steps\r              current={currentStep}\r              direction=\"vertical\"\r              size=\"small\"\r              onChange={setCurrentStep}\r            >\r              {steps.map((step, index) => (\r                <Steps.Step\r                  key={step.key}\r                  title={step.title}\r                  description={step.description}\r                  icon={step.icon}\r                  status={getStepStatus(index)}\r                />\r              ))}\r            </Steps>\r            <Divider />\r            <Card size=\"small\">\r              <Title level={5}>İlerleme Durumu</Title>\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div>\r                  <Text type=\"secondary\">Genel İlerleme</Text>\r                  <Progress percent={Math.round(progress)} size=\"small\" />\r                </div>\r                <div>\r                  <Text type=\"secondary\">Zorunlu Adımlar</Text>\r                  <Progress \r                    percent={Math.round(requiredProgress)} \r                    size=\"small\"\r                    status={requiredProgress === 100 ? 'success' : 'active'}\r                  />\r                </div>\r              </Space>\r            </Card>\r          </Col>\r          <Col span={18}>\r            <Form\r              form={form}\r              layout=\"vertical\"\r              initialValues={wizardData[steps[currentStep]?.key] || {}}\r            >\r              {renderStepContent()}\r            </Form>\r            <Divider />\r            <Row justify=\"space-between\">\r              <Col>\r                {currentStep > 0 && (\r                  <Button size=\"large\" onClick={handlePrev}>\r                    Geri\r                  </Button>\r                )}\r              </Col>\r              <Col>\r                <Space>\r                  {canSkipStep() && currentStep < steps.length - 1 && (\r                    <Button size=\"large\" onClick={handleSkip}>\r                      Atla\r                    </Button>\r                  )}\r                  <Button size=\"large\" onClick={saveProgress} loading={saving}>\r                    Kaydet\r                  </Button>\r                  <Button\r                    type=\"primary\"\r                    size=\"large\"\r                    onClick={handleNext}\r                    loading={loading}\r                  >\r                    {currentStep === steps.length - 1 ? 'Kurulumu Tamamla' : 'İleri'}\r                  </Button>\r                </Space>\r              </Col>\r            </Row>\r          </Col>\r        </Row>\r      </Card>\r    </div>\r  );\r};\rexport default CompanyWizard;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/company/pages/CompanyWizard/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { Card, Table, Button, Space, Tag, Input, Select, DatePicker, message, Drawer, Form, TimePicker, Row, Col, Calendar, Badge, Avatar, Timeline, Tabs, List } from 'antd';\rimport { PlusOutlined, SearchOutlined, PhoneOutlined, MailOutlined, TeamOutlined, CalendarOutlined, ClockCircleOutlined, UserOutlined, CheckCircleOutlined, VideoCameraOutlined, FileTextOutlined } from '@ant-design/icons';\rimport type { ColumnsType } from 'antd/es/table';\rimport type { BadgeProps } from 'antd';\rimport dayjs from 'dayjs';\rinterface Activity {\r  id: number;\r  type: 'call' | 'email' | 'meeting' | 'task' | 'note';\r  subject: string;\r  description: string;\r  status: 'planned' | 'completed' | 'cancelled';\r  priority: 'low' | 'medium' | 'high';\r  startDate: string;\r  startTime: string;\r  duration: number;\r  relatedTo: string;\r  relatedType: 'lead' | 'customer' | 'opportunity' | 'deal';\r  assignedTo: string;\r  createdBy: string;\r  createdDate: string;\r  completedDate?: string;\r  outcome?: string;\r}\rconst mockActivities: Activity[] = [\r  {\r    id: 1,\r    type: 'call',\r    subject: 'Ürün Demo Görüşmesi',\r    description: 'CRM modülü demo sunumu yapılacak',\r    status: 'planned',\r    priority: 'high',\r    startDate: '2024-01-29',\r    startTime: '14:00',\r    duration: 60,\r    relatedTo: 'ABC Teknoloji',\r    relatedType: 'customer',\r    assignedTo: 'Ahmet Yılmaz',\r    createdBy: 'Admin',\r    createdDate: '2024-01-25',\r  },\r  {\r    id: 2,\r    type: 'email',\r    subject: 'Teklif Gönderimi',\r    description: 'Revize edilmiş teklif gönderilecek',\r    status: 'completed',\r    priority: 'medium',\r    startDate: '2024-01-28',\r    startTime: '10:00',\r    duration: 30,\r    relatedTo: 'XYZ Holding',\r    relatedType: 'opportunity',\r    assignedTo: 'Mehmet Demir',\r    createdBy: 'Admin',\r    createdDate: '2024-01-24',\r    completedDate: '2024-01-28',\r    outcome: 'Teklif başarıyla gönderildi',\r  },\r  {\r    id: 3,\r    type: 'meeting',\r    subject: 'Sözleşme Müzakeresi',\r    description: 'Final sözleşme şartlarının görüşülmesi',\r    status: 'planned',\r    priority: 'high',\r    startDate: '2024-01-30',\r    startTime: '15:30',\r    duration: 90,\r    relatedTo: 'Mega AŞ',\r    relatedType: 'deal',\r    assignedTo: 'Ayşe Kaya',\r    createdBy: 'Admin',\r    createdDate: '2024-01-26',\r  },\r];\rconst activityTypes = [\r  { value: 'call', label: 'Arama', icon: <PhoneOutlined />, color: 'blue' },\r  { value: 'email', label: 'E-posta', icon: <MailOutlined />, color: 'green' },\r  { value: 'meeting', label: 'Toplantı', icon: <TeamOutlined />, color: 'purple' },\r  { value: 'task', label: 'Görev', icon: <CheckCircleOutlined />, color: 'orange' },\r  { value: 'note', label: 'Not', icon: <FileTextOutlined />, color: 'gray' },\r];\rconst priorityOptions = [\r  { value: 'low', label: 'Düşük', color: 'default' },\r  { value: 'medium', label: 'Orta', color: 'warning' },\r  { value: 'high', label: 'Yüksek', color: 'error' },\r];\rconst statusOptions = [\r  { value: 'planned', label: 'Planlandı', color: 'blue' },\r  { value: 'completed', label: 'Tamamlandı', color: 'green' },\r  { value: 'cancelled', label: 'İptal Edildi', color: 'red' },\r];\rexport const ActivitiesPage: React.FC = () => {\r  const [activities, setActivities] = useState<Activity[]>(mockActivities);\r  const [loading, setLoading] = useState(false);\r  const [drawerVisible, setDrawerVisible] = useState(false);\r  const [editingActivity, setEditingActivity] = useState<Activity | null>(null);\r  const [searchText, setSearchText] = useState('');\r  const [filterType, setFilterType] = useState<string | undefined>();\r  const [filterStatus, setFilterStatus] = useState<string | undefined>();\r  const [viewMode, setViewMode] = useState<'table' | 'calendar' | 'timeline'>('table');\r  const [form] = Form.useForm();\r  const columns: ColumnsType<Activity> = [\r    {\r      title: 'Tür',\r      dataIndex: 'type',\r      key: 'type',\r      width: 80,\r      render: (type) => {\r        const activityType = activityTypes.find(t => t.value === type);\r        return (\r          <Tag icon={activityType?.icon} color={activityType?.color}>\r            {activityType?.label}\r          </Tag>\r        );\r      },\r    },\r    {\r      title: 'Konu',\r      dataIndex: 'subject',\r      key: 'subject',\r      render: (text, record) => (\r        <Space direction=\"vertical\" size={0}>\r          <strong>{text}</strong>\r          <small style={{ color: '#8c8c8c' }}>{record.relatedTo}</small>\r        </Space>\r      ),\r    },\r    {\r      title: 'Tarih & Saat',\r      key: 'datetime',\r      render: (_, record) => (\r        <Space direction=\"vertical\" size={0}>\r          <span>{dayjs(record.startDate).format('DD.MM.YYYY')}</span>\r          <small style={{ color: '#8c8c8c' }}>{record.startTime}</small>\r        </Space>\r      ),\r    },\r    {\r      title: 'Öncelik',\r      dataIndex: 'priority',\r      key: 'priority',\r      width: 100,\r      render: (priority) => {\r        const priorityOption = priorityOptions.find(p => p.value === priority);\r        return <Tag color={priorityOption?.color}>{priorityOption?.label}</Tag>;\r      },\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      width: 120,\r      render: (status) => {\r        const statusOption = statusOptions.find(s => s.value === status);\r        return <Tag color={statusOption?.color}>{statusOption?.label}</Tag>;\r      },\r    },\r    {\r      title: 'Atanan',\r      dataIndex: 'assignedTo',\r      key: 'assignedTo',\r      render: (name) => (\r        <Space size={4}>\r          <Avatar size=\"small\" style={{ backgroundColor: '#1890ff' }}>\r            {name?.[0]}\r          </Avatar>\r          <span>{name}</span>\r        </Space>\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      fixed: 'right',\r      width: 100,\r      render: (_, record) => (\r        <Space>\r          <Button\r            type=\"text\"\r            size=\"small\"\r            onClick={() => handleEdit(record)}\r          >\r            Düzenle\r          </Button>\r          <Button\r            type=\"text\"\r            danger\r            size=\"small\"\r            onClick={() => handleDelete(record.id)}\r          >\r            Sil\r          </Button>\r        </Space>\r      ),\r    },\r  ];\r  const handleEdit = (activity: Activity) => {\r    setEditingActivity(activity);\r    form.setFieldsValue({\r      ...activity,\r      startDate: dayjs(activity.startDate),\r      startTime: dayjs(activity.startTime, 'HH:mm'),\r    });\r    setDrawerVisible(true);\r  };\r  const handleDelete = (id: number) => {\r    setActivities(prev => prev.filter(a => a.id !== id));\r    message.success('Aktivite silindi');\r  };\r  const handleSubmit = (values: any) => {\r    const formData = {\r      ...values,\r      startDate: values.startDate.format('YYYY-MM-DD'),\r      startTime: values.startTime.format('HH:mm'),\r    };\r    if (editingActivity) {\r      setActivities(prev => \r        prev.map(a => a.id === editingActivity.id ? { ...a, ...formData } : a)\r      );\r      message.success('Aktivite güncellendi');\r    } else {\r      const newActivity = {\r        ...formData,\r        id: activities.length + 1,\r        createdDate: dayjs().format('YYYY-MM-DD'),\r        createdBy: 'Current User',\r      };\r      setActivities(prev => [...prev, newActivity]);\r      message.success('Yeni aktivite eklendi');\r    }\r    setDrawerVisible(false);\r    form.resetFields();\r    setEditingActivity(null);\r  };\r  const filteredData = activities.filter(a => {\r    const matchesSearch = a.subject.toLowerCase().includes(searchText.toLowerCase()) ||\r                         a.relatedTo.toLowerCase().includes(searchText.toLowerCase());\r    const matchesType = !filterType || a.type === filterType;\r    const matchesStatus = !filterStatus || a.status === filterStatus;\r    return matchesSearch && matchesType && matchesStatus;\r  });\r  const todayActivities = filteredData.filter(a => \r    dayjs(a.startDate).isSame(dayjs(), 'day')\r  );\r  const upcomingActivities = filteredData.filter(a => \r    dayjs(a.startDate).isAfter(dayjs(), 'day')\r  );\r  const getListData = (value: dayjs.Dayjs) => {\r    const dateStr = value.format('YYYY-MM-DD');\r    const dayActivities = activities.filter(a => a.startDate === dateStr);\r    return dayActivities.map(activity => {\r      const type = activityTypes.find(t => t.value === activity.type);\r      return {\r        type: type?.color as BadgeProps['status'],\r        content: `${activity.startTime} - ${activity.subject}`,\r      };\r    });\r  };\r  const dateCellRender = (value: dayjs.Dayjs) => {\r    const listData = getListData(value);\r    return (\r      <ul style={{ listStyle: 'none', padding: 0 }}>\r        {listData.map((item, index) => (\r          <li key={index}>\r            <Badge status={item.type} text={item.content} />\r          </li>\r        ))}\r      </ul>\r    );\r  };\r  return (\r    <div style={{ padding: 24 }}>\r      <Card\r        title=\"Aktiviteler\"\r        extra={\r          <Space>\r            <Select\r              value={viewMode}\r              onChange={setViewMode}\r              style={{ width: 120 }}\r             aria-label=\"select field\">\r              <Select.Option value=\"table\" aria-label=\"select field\">Tablo</Select.Option>\r              <Select.Option value=\"calendar\" aria-label=\"select field\">Takvim</Select.Option>\r              <Select.Option value=\"timeline\" aria-label=\"select field\">Zaman Çizelgesi</Select.Option>\r            </Select>\r            <Button\r              type=\"primary\"\r              icon={<PlusOutlined />}\r              onClick={() = aria-label=\"plus outlined\"> {\r                setEditingActivity(null);\r                form.resetFields();\r                setDrawerVisible(true);\r              }}\r            >\r              Yeni Aktivite\r            </Button>\r          </Space>\r        }\r      >\r        <Space style={{ marginBottom: 16, width: '100%' }} direction=\"vertical\">\r          <Row gutter={16}>\r            <Col span={8}>\r              <Card size=\"small\">\r                <Space direction=\"vertical\" style={{ width: '100%' }}>\r                  <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r                    <span>Bugünkü Aktiviteler</span>\r                    <Tag color=\"blue\">{todayActivities.length}</Tag>\r                  </div>\r                </Space>\r              </Card>\r            </Col>\r            <Col span={8}>\r              <Card size=\"small\">\r                <Space direction=\"vertical\" style={{ width: '100%' }}>\r                  <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r                    <span>Yaklaşan Aktiviteler</span>\r                    <Tag color=\"orange\">{upcomingActivities.length}</Tag>\r                  </div>\r                </Space>\r              </Card>\r            </Col>\r            <Col span={8}>\r              <Card size=\"small\">\r                <Space direction=\"vertical\" style={{ width: '100%' }}>\r                  <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r                    <span>Tamamlanan (Bu Hafta)</span>\r                    <Tag color=\"green\">\r                      {activities.filter(a => a.status === 'completed').length}\r                    </Tag>\r                  </div>\r                </Space>\r              </Card>\r            </Col>\r          </Row>\r          {viewMode === 'table' && (\r            <>\r              <Space>\r                <Input\r                  placeholder=\"Ara...\"\r                  prefix={<SearchOutlined / aria-label=\"input field\">}\r                  value={searchText}\r                  onChange={(e) => setSearchText(e.target.value)}\r                  style={{ width: 250 }}\r                />\r                <Select\r                  placeholder=\"Tür\"\r                  allowClear\r                  style={{ width: 150 }}\r                  value={filterType}\r                  onChange={setFilterType}\r                 aria-label=\"select field\">\r                  {activityTypes.map(type => (\r                    <Select.Option key={type.value} value={type.value} aria-label=\"select field\">\r                      <Space>\r                        {type.icon}\r                        {type.label}\r                      </Space>\r                    </Select.Option>\r                  ))}\r                </Select>\r                <Select\r                  placeholder=\"Durum\"\r                  allowClear\r                  style={{ width: 150 }}\r                  value={filterStatus}\r                  onChange={setFilterStatus}\r                  options={statusOptions}\r                / aria-label=\"select field\">\r              </Space>\r            </>\r          )}\r        </Space>\r        {viewMode === 'table' && (\r          <Table\r            columns={columns}\r            dataSource={filteredData}\r            rowKey=\"id\"\r            loading={loading}\r            pagination={{\r              pageSize: 10,\r              showTotal: (total) => `Toplam ${total} aktivite`,\r            }}\r          />\r        )}\r        {viewMode === 'calendar' && (\r          <Calendar cellRender={dateCellRender} />\r        )}\r        {viewMode === 'timeline' && (\r          <Timeline mode=\"left\" style={{ marginTop: 24 }}>\r            {filteredData.map(activity => {\r              const type = activityTypes.find(t => t.value === activity.type);\r              const status = statusOptions.find(s => s.value === activity.status);\r              return (\r                <Timeline.Item\r                  key={activity.id}\r                  label={`${dayjs(activity.startDate).format('DD MMM')} ${activity.startTime}`}\r                  color={status?.color}\r                  dot={type?.icon}\r                >\r                  <Card size=\"small\">\r                    <Space direction=\"vertical\">\r                      <strong>{activity.subject}</strong>\r                      <span>{activity.description}</span>\r                      <Space>\r                        <Tag>{activity.relatedTo}</Tag>\r                        <Tag icon={<UserOutlined />}>{activity.assignedTo}</Tag>\r                      </Space>\r                    </Space>\r                  </Card>\r                </Timeline.Item>\r              );\r            })}\r          </Timeline>\r        )}\r      </Card>\r      <Drawer\r        title={editingActivity ? 'Aktiviteyi Düzenle' : 'Yeni Aktivite'}\r        width={600}\r        open={drawerVisible}\r        onClose={() => {\r          setDrawerVisible(false);\r          form.resetFields();\r          setEditingActivity(null);\r        }}\r        footer={\r          <Space style={{ float: 'right' }}>\r            <Button onClick={() => setDrawerVisible(false)}>İptal</Button>\r            <Button type=\"primary\" onClick={() => form.submit()}>\r              {editingActivity ? 'Güncelle' : 'Ekle'}\r            </Button>\r          </Space>\r        }\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleSubmit}\r        >\r          <Form.Item\r            name=\"type\"\r            label=\"Aktivite Türü\"\r            rules={[{ required: true, message: 'Aktivite türü gerekli' }]}\r          >\r            <Select aria-label=\"select field\">\r              {activityTypes.map(type => (\r                <Select.Option key={type.value} value={type.value} aria-label=\"select field\">\r                  <Space>\r                    {type.icon}\r                    {type.label}\r                  </Space>\r                </Select.Option>\r              ))}\r            </Select>\r          </Form.Item>\r          <Form.Item\r            name=\"subject\"\r            label=\"Konu\"\r            rules={[{ required: true, message: 'Konu gerekli' }]}\r          >\r            <Input / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item\r            name=\"description\"\r            label=\"Açıklama\"\r          >\r            <Input.TextArea rows={3} / aria-label=\"input field\">\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"startDate\"\r                label=\"Tarih\"\r                rules={[{ required: true, message: 'Tarih gerekli' }]}\r              >\r                <DatePicker style={{ width: '100%' }} format=\"DD.MM.YYYY\" />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"startTime\"\r                label=\"Saat\"\r                rules={[{ required: true, message: 'Saat gerekli' }]}\r              >\r                <TimePicker style={{ width: '100%' }} format=\"HH:mm\" />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"duration\"\r                label=\"Süre (dakika)\"\r                rules={[{ required: true, message: 'Süre gerekli' }]}\r              >\r                <Select aria-label=\"select field\">\r                  <Select.Option value={15} aria-label=\"select field\">15 dakika</Select.Option>\r                  <Select.Option value={30} aria-label=\"select field\">30 dakika</Select.Option>\r                  <Select.Option value={45} aria-label=\"select field\">45 dakika</Select.Option>\r                  <Select.Option value={60} aria-label=\"select field\">1 saat</Select.Option>\r                  <Select.Option value={90} aria-label=\"select field\">1.5 saat</Select.Option>\r                  <Select.Option value={120} aria-label=\"select field\">2 saat</Select.Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"priority\"\r                label=\"Öncelik\"\r                rules={[{ required: true, message: 'Öncelik gerekli' }]}\r              >\r                <Select options={priorityOptions} / aria-label=\"select field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"relatedTo\"\r                label=\"İlişkili\"\r                rules={[{ required: true, message: 'İlişkili kayıt gerekli' }]}\r              >\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"relatedType\"\r                label=\"İlişki Türü\"\r                rules={[{ required: true, message: 'İlişki türü gerekli' }]}\r              >\r                <Select aria-label=\"select field\">\r                  <Select.Option value=\"lead\" aria-label=\"select field\">Potansiyel</Select.Option>\r                  <Select.Option value=\"customer\" aria-label=\"select field\">Müşteri</Select.Option>\r                  <Select.Option value=\"opportunity\" aria-label=\"select field\">Fırsat</Select.Option>\r                  <Select.Option value=\"deal\" aria-label=\"select field\">Anlaşma</Select.Option>\r                </Select>\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"assignedTo\"\r                label=\"Atanan Kişi\"\r                rules={[{ required: true, message: 'Atanan kişi gerekli' }]}\r              >\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"status\"\r                label=\"Durum\"\r                rules={[{ required: true, message: 'Durum gerekli' }]}\r              >\r                <Select options={statusOptions} / aria-label=\"select field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          {editingActivity?.status === 'completed' && (\r            <Form.Item\r              name=\"outcome\"\r              label=\"Sonuç\"\r            >\r              <Input.TextArea rows={3} placeholder=\"Aktivite sonucu hakkında notlar...\" / aria-label=\"input field\">\r            </Form.Item>\r          )}\r        </Form>\r      </Drawer>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/crm/pages/ActivitiesPage.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { \r  Card, \r  Table, \r  Button, \r  Space, \r  Tag, \r  Dropdown, \r  Input, \r  Select, \r  Row, \r  Col,\r  message,\r  Tooltip,\r  Badge,\r  Avatar,\r  Modal,\r  Form,\r  DatePicker,\r  InputNumber,\r  Divider,\r  Statistic,\r  Tabs,\r  List,\r  Typography,\r  Timeline,\r  Rate,\r  Progress,\r  Drawer,\r  Descriptions,\r  Empty\r} from 'antd';\rimport {\r  PlusOutlined,\r  SearchOutlined,\r  FilterOutlined,\r  DownloadOutlined,\r  UploadOutlined,\r  UserOutlined,\r  PhoneOutlined,\r  MailOutlined,\r  GlobalOutlined,\r  MoreOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  EyeOutlined,\r  TeamOutlined,\r  DollarOutlined,\r  ShoppingCartOutlined,\r  FileTextOutlined,\r  CalendarOutlined,\r  ClockCircleOutlined,\r  CheckCircleOutlined,\r  SyncOutlined,\r  BankOutlined,\r  EnvironmentOutlined,\r  StarOutlined,\r  ContactsOutlined,\r  MergeOutlined\r} from '@ant-design/icons';\rimport { PageHeader } from '@/shared/components/PageHeader';\rimport { customerService, Customer, CreateCustomerDto, CustomerListParams, Contact, CreateContactDto } from '@/services/crm/customerService';\rimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\rconst { Option } = Select;\rconst { Search } = Input;\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rexport const CustomersPage: React.FC = () => {\r  const queryClient = useQueryClient();\r  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\r  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\r  const [isContactModalOpen, setIsContactModalOpen] = useState(false);\r  const [isDetailDrawerOpen, setIsDetailDrawerOpen] = useState(false);\r  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);\r  const [activeDetailTab, setActiveDetailTab] = useState('overview');\r  const [filters, setFilters] = useState<CustomerListParams>({\r    page: 1,\r    pageSize: 10,\r    sortBy: 'createdDate',\r    sortDirection: 'desc'\r  });\r  const [form] = Form.useForm();\r  const [contactForm] = Form.useForm();\r  // Fetch customers\r  const { data: customersData, isLoading, refetch } = useQuery({\r    queryKey: ['customers', filters],\r    queryFn: () => customerService.getCustomers(filters)\r  });\r  // Fetch customer details\r  const { data: customerDetail } = useQuery({\r    queryKey: ['customer', selectedCustomer?.id],\r    queryFn: () => customerService.getCustomerById(selectedCustomer!.id),\r    enabled: !!selectedCustomer?.id && isDetailDrawerOpen\r  });\r  // Fetch customer contacts\r  const { data: customerContacts } = useQuery({\r    queryKey: ['customerContacts', selectedCustomer?.id],\r    queryFn: () => customerService.getCustomerContacts(selectedCustomer!.id),\r    enabled: !!selectedCustomer?.id && isDetailDrawerOpen && activeDetailTab === 'contacts'\r  });\r  // Fetch customer opportunities\r  const { data: customerOpportunities } = useQuery({\r    queryKey: ['customerOpportunities', selectedCustomer?.id],\r    queryFn: () => customerService.getCustomerOpportunities(selectedCustomer!.id),\r    enabled: !!selectedCustomer?.id && isDetailDrawerOpen && activeDetailTab === 'opportunities'\r  });\r  // Create customer mutation\r  const createCustomerMutation = useMutation({\r    mutationFn: (data: CreateCustomerDto) => customerService.createCustomer(data),\r    onSuccess: () => {\r      message.success('Müşteri başarıyla oluşturuldu');\r      setIsCreateModalOpen(false);\r      form.resetFields();\r      queryClient.invalidateQueries({ queryKey: ['customers'] });\r    },\r    onError: () => {\r      message.error('Müşteri oluşturulurken hata oluştu');\r    }\r  });\r  // Add contact mutation\r  const addContactMutation = useMutation({\r    mutationFn: (data: CreateContactDto) => customerService.addContact(selectedCustomer!.id, data),\r    onSuccess: () => {\r      message.success('İletişim kişisi başarıyla eklendi');\r      setIsContactModalOpen(false);\r      contactForm.resetFields();\r      queryClient.invalidateQueries({ queryKey: ['customerContacts', selectedCustomer?.id] });\r    },\r    onError: () => {\r      message.error('İletişim kişisi eklenirken hata oluştu');\r    }\r  });\r  // Delete customer mutation\r  const deleteCustomerMutation = useMutation({\r    mutationFn: (id: number) => customerService.deleteCustomer(id),\r    onSuccess: () => {\r      message.success('Müşteri başarıyla silindi');\r      queryClient.invalidateQueries({ queryKey: ['customers'] });\r    },\r    onError: () => {\r      message.error('Müşteri silinirken hata oluştu');\r    }\r  });\r  const getSegmentColor = (segment: string) => {\r    const segmentColors: Record<string, string> = {\r      'Enterprise': 'gold',\r      'Premium': 'purple',\r      'Standard': 'blue',\r      'Basic': 'cyan',\r      'Strategic': 'green',\r      'Key Account': 'red'\r    };\r    return segmentColors[segment] || 'default';\r  };\r  const columns = [\r    {\r      title: 'Müşteri',\r      key: 'customer',\r      fixed: 'left',\r      width: 300,\r      render: (record: Customer) => (\r        <Space direction=\"vertical\" size={0}>\r          <Space>\r            <Avatar \r              icon={<BankOutlined />} \r              style={{ backgroundColor: '#1890ff' }}\r              size=\"large\"\r            >\r              {record.companyName?.[0]}\r            </Avatar>\r            <div>\r              <div style={{ fontWeight: 600, fontSize: 14 }}>{record.companyName}</div>\r              <div style={{ fontSize: 12, color: '#999' }}>\r                {record.industry || 'Belirtilmemiş'}\r              </div>\r              {record.taxNumber && (\r                <div style={{ fontSize: 11, color: '#bbb' }}>\r                  VKN: {record.taxNumber}\r                </div>\r              )}\r            </div>\r          </Space>\r        </Space>\r      )\r    },\r    {\r      title: 'İletişim',\r      key: 'contact',\r      width: 220,\r      render: (record: Customer) => (\r        <Space direction=\"vertical\" size={0}>\r          <Space>\r            <MailOutlined style={{ color: '#999' }} />\r            <span style={{ fontSize: 12 }}>{record.email}</span>\r          </Space>\r          {record.phone && (\r            <Space>\r              <PhoneOutlined style={{ color: '#999' }} />\r              <span style={{ fontSize: 12 }}>{record.phone}</span>\r            </Space>\r          )}\r          {record.website && (\r            <Space>\r              <GlobalOutlined style={{ color: '#999' }} />\r              <span style={{ fontSize: 12 }}>{record.website}</span>\r            </Space>\r          )}\r        </Space>\r      )\r    },\r    {\r      title: 'Segment',\r      dataIndex: 'segment',\r      key: 'segment',\r      width: 120,\r      render: (segment: string) => segment ? (\r        <Tag color={getSegmentColor(segment)}>{segment}</Tag>\r      ) : null\r    },\r    {\r      title: 'Tip',\r      dataIndex: 'customerType',\r      key: 'customerType',\r      width: 100,\r      render: (type: string) => type ? <Tag>{type}</Tag> : null\r    },\r    {\r      title: 'Çalışan',\r      dataIndex: 'numberOfEmployees',\r      key: 'numberOfEmployees',\r      width: 100,\r      render: (num: number) => num ? (\r        <Space>\r          <TeamOutlined style={{ color: '#999' }} />\r          <span>{num.toLocaleString('tr-TR')}</span>\r        </Space>\r      ) : null\r    },\r    {\r      title: 'Gelir',\r      dataIndex: 'annualRevenue',\r      key: 'annualRevenue',\r      width: 140,\r      render: (revenue: number) => revenue ? (\r        <Space>\r          <DollarOutlined style={{ color: '#52c41a' }} />\r          <span>₺{(revenue / 1000000).toFixed(1)}M</span>\r        </Space>\r      ) : null\r    },\r    {\r      title: 'Rating',\r      dataIndex: 'rating',\r      key: 'rating',\r      width: 120,\r      render: (rating: number) => rating ? (\r        <Rate disabled value={rating} style={{ fontSize: 14 }} />\r      ) : null\r    },\r    {\r      title: 'Konum',\r      key: 'location',\r      width: 150,\r      render: (record: Customer) => record.city ? (\r        <Space>\r          <EnvironmentOutlined style={{ color: '#999' }} />\r          <span style={{ fontSize: 12 }}>\r            {record.city}{record.country ? `, ${record.country}` : ''}\r          </span>\r        </Space>\r      ) : null\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'isActive',\r      key: 'isActive',\r      width: 100,\r      render: (isActive: boolean) => (\r        <Badge \r          status={isActive ? 'success' : 'default'} \r          text={isActive ? 'Aktif' : 'Pasif'}\r        />\r      )\r    },\r    {\r      title: 'Kayıt',\r      dataIndex: 'createdDate',\r      key: 'createdDate',\r      width: 120,\r      render: (date: string) => new Date(date).toLocaleDateString('tr-TR')\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      fixed: 'right',\r      width: 100,\r      render: (record: Customer) => (\r        <Dropdown\r          menu={{\r            items: [\r              {\r                key: 'view',\r                icon: <EyeOutlined />,\r                label: 'Detaylar',\r                onClick: () => {\r                  setSelectedCustomer(record);\r                  setIsDetailDrawerOpen(true);\r                }\r              },\r              {\r                key: 'edit',\r                icon: <EditOutlined />,\r                label: 'Düzenle'\r              },\r              {\r                type: 'divider'\r              },\r              {\r                key: 'contacts',\r                icon: <ContactsOutlined />,\r                label: 'İletişim Kişileri',\r                onClick: () => {\r                  setSelectedCustomer(record);\r                  setIsDetailDrawerOpen(true);\r                  setActiveDetailTab('contacts');\r                }\r              },\r              {\r                key: 'opportunities',\r                icon: <ShoppingCartOutlined />,\r                label: 'Fırsatlar'\r              },\r              {\r                key: 'activities',\r                icon: <CalendarOutlined />,\r                label: 'Aktiviteler'\r              },\r              {\r                type: 'divider'\r              },\r              {\r                key: 'merge',\r                icon: <MergeOutlined />,\r                label: 'Birleştir'\r              },\r              {\r                key: 'delete',\r                icon: <DeleteOutlined />,\r                label: 'Sil',\r                danger: true,\r                onClick: () => {\r                  Modal.confirm({\r                    title: 'Müşteri Sil',\r                    content: 'Bu müşteriyi silmek istediğinize emin misiniz?',\r                    okText: 'Sil',\r                    okType: 'danger',\r                    cancelText: 'İptal',\r                    onOk: () => deleteCustomerMutation.mutate(record.id)\r                  });\r                }\r              }\r            ]\r          }}\r        >\r          <Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r        </Dropdown>\r      )\r    }\r  ];\r  const handleTableChange = (pagination: any, filters: any, sorter: any) => {\r    setFilters({\r      ...filters,\r      page: pagination.current,\r      pageSize: pagination.pageSize,\r      sortBy: sorter.field || 'createdDate',\r      sortDirection: sorter.order === 'ascend' ? 'asc' : 'desc'\r    });\r  };\r  return (\r    <div>\r      <PageHeader\r        title=\"Müşteriler\"\r        subtitle=\"Müşteri bilgilerini yönetin ve takip edin\"\r        extra={[\r          <Button key=\"import\" icon={<UploadOutlined />} aria-label=\"upload outlined\">\r            İçe Aktar\r          </Button>,\r          <Button key=\"export\" icon={<DownloadOutlined />} aria-label=\"download outlined\">\r            Dışa Aktar\r          </Button>,\r          <Button\r            key=\"create\"\r            type=\"primary\"\r            icon={<PlusOutlined />}\r            onClick={() = aria-label=\"plus outlined\"> setIsCreateModalOpen(true)}\r          >\r            Yeni Müşteri\r          </Button>\r        ]}\r      />\r      {/* Statistics */}\r      <Row gutter={16} style={{ marginBottom: 16 }}>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Toplam Müşteri\"\r              value={customersData?.totalCount || 0}\r              prefix={<TeamOutlined />}\r            />\r          </Card>\r        </Col>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Aktif Müşteri\"\r              value={customersData?.items.filter(c => c.isActive).length || 0}\r              prefix={<CheckCircleOutlined />}\r              valueStyle={{ color: '#52c41a' }}\r            />\r          </Card>\r        </Col>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Toplam Gelir\"\r              value={\r                customersData?.items.reduce((sum, c) => sum + (c.annualRevenue || 0), 0) || 0\r              }\r              prefix={<DollarOutlined />}\r              formatter={(value) => `₺${(Number(value) / 1000000).toFixed(1)}M`}\r              valueStyle={{ color: '#1890ff' }}\r            />\r          </Card>\r        </Col>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Ortalama Rating\"\r              value={\r                customersData?.items.length \r                  ? (customersData.items.reduce((sum, c) => sum + (c.rating || 0), 0) / \r                     customersData.items.filter(c => c.rating).length).toFixed(1)\r                  : 0\r              }\r              prefix={<StarOutlined />}\r              suffix=\"/ 5\"\r              valueStyle={{ color: '#fa8c16' }}\r            />\r          </Card>\r        </Col>\r      </Row>\r      {/* Filters */}\r      <Card style={{ marginBottom: 16 }}>\r        <Row gutter={16}>\r          <Col span={8}>\r            <Search\r              placeholder=\"Müşteri ara...\"\r              allowClear\r              enterButton={<SearchOutlined />}\r              onSearch={(value) => setFilters({ ...filters, search: value })}\r            />\r          </Col>\r          <Col span={4}>\r            <Select\r              style={{ width: '100%' }}\r              placeholder=\"Segment\"\r              allowClear\r              onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, segment: value })}\r            >\r              <Option value=\"Enterprise\">Enterprise</Option>\r              <Option value=\"Premium\">Premium</Option>\r              <Option value=\"Standard\">Standard</Option>\r              <Option value=\"Basic\">Basic</Option>\r              <Option value=\"Strategic\">Strategic</Option>\r              <Option value=\"Key Account\">Key Account</Option>\r            </Select>\r          </Col>\r          <Col span={4}>\r            <Select\r              style={{ width: '100%' }}\r              placeholder=\"Sektör\"\r              allowClear\r              onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, industry: value })}\r            >\r              <Option value=\"Technology\">Teknoloji</Option>\r              <Option value=\"Finance\">Finans</Option>\r              <Option value=\"Healthcare\">Sağlık</Option>\r              <Option value=\"Manufacturing\">Üretim</Option>\r              <Option value=\"Retail\">Perakende</Option>\r              <Option value=\"Education\">Eğitim</Option>\r              <Option value=\"Real Estate\">Gayrimenkul</Option>\r              <Option value=\"Automotive\">Otomotiv</Option>\r              <Option value=\"Other\">Diğer</Option>\r            </Select>\r          </Col>\r          <Col span={4}>\r            <Select\r              style={{ width: '100%' }}\r              placeholder=\"Tip\"\r              allowClear\r              onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, customerType: value })}\r            >\r              <Option value=\"Corporate\">Kurumsal</Option>\r              <Option value=\"SMB\">KOBİ</Option>\r              <Option value=\"Startup\">Startup</Option>\r              <Option value=\"Individual\">Bireysel</Option>\r              <Option value=\"Government\">Kamu</Option>\r            </Select>\r          </Col>\r          <Col span={4}>\r            <Button icon={<SyncOutlined />} onClick={() = aria-label=\"sync outlined\"> refetch()}>\r              Yenile\r            </Button>\r          </Col>\r        </Row>\r      </Card>\r      {/* Table */}\r      <Card>\r        <Table\r          rowSelection={{\r            selectedRowKeys,\r            onChange: setSelectedRowKeys\r          }}\r          columns={columns}\r          dataSource={customersData?.items || []}\r          rowKey=\"id\"\r          loading={isLoading}\r          onChange={handleTableChange}\r          pagination={{\r            current: filters.page,\r            pageSize: filters.pageSize,\r            total: customersData?.totalCount || 0,\r            showSizeChanger: true,\r            showTotal: (total) => `Toplam ${total} müşteri`\r          }}\r          scroll={{ x: 1800 }}\r        />\r      </Card>\r      {/* Create Customer Modal */}\r      <Modal\r        title=\"Yeni Müşteri Oluştur\"\r        open={isCreateModalOpen}\r        onCancel={() => {\r          setIsCreateModalOpen(false);\r          form.resetFields();\r        }}\r        footer={null}\r        width={720}\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={(values) => createCustomerMutation.mutate(values)}\r        >\r          <Row gutter={16}>\r            <Col span={24}>\r              <Form.Item\r                name=\"companyName\"\r                label=\"Şirket Adı\"\r                rules={[{ required: true, message: 'Şirket adı zorunludur' }]}\r              >\r                <Input placeholder=\"Şirket adı\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"email\"\r                label=\"Email\"\r                rules={[\r                  { required: true, message: 'Email zorunludur' },\r                  { type: 'email', message: 'Geçerli bir email giriniz' }\r                ]}\r              >\r                <Input placeholder=\"Email\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"phone\" label=\"Telefon\">\r                <Input placeholder=\"Telefon\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item name=\"website\" label=\"Website\">\r                <Input placeholder=\"Website\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"industry\" label=\"Sektör\">\r                <Select placeholder=\"Sektör seçiniz\" aria-label=\"select field\">\r                  <Option value=\"Technology\">Teknoloji</Option>\r                  <Option value=\"Finance\">Finans</Option>\r                  <Option value=\"Healthcare\">Sağlık</Option>\r                  <Option value=\"Manufacturing\">Üretim</Option>\r                  <Option value=\"Retail\">Perakende</Option>\r                  <Option value=\"Education\">Eğitim</Option>\r                  <Option value=\"Real Estate\">Gayrimenkul</Option>\r                  <Option value=\"Automotive\">Otomotiv</Option>\r                  <Option value=\"Other\">Diğer</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item name=\"taxNumber\" label=\"Vergi No\">\r                <Input placeholder=\"Vergi numarası\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"taxOffice\" label=\"Vergi Dairesi\">\r                <Input placeholder=\"Vergi dairesi\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Divider />\r          <Row gutter={16}>\r            <Col span={24}>\r              <Form.Item name=\"address\" label=\"Adres\">\r                <Input.TextArea rows={2} placeholder=\"Adres\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item name=\"city\" label=\"Şehir\">\r                <Input placeholder=\"Şehir\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item name=\"state\" label=\"İlçe/Eyalet\">\r                <Input placeholder=\"İlçe/Eyalet\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item name=\"postalCode\" label=\"Posta Kodu\">\r                <Input placeholder=\"Posta kodu\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item name=\"country\" label=\"Ülke\">\r                <Input placeholder=\"Ülke\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Divider />\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item name=\"customerType\" label=\"Müşteri Tipi\">\r                <Select placeholder=\"Tip seçiniz\" aria-label=\"select field\">\r                  <Option value=\"Corporate\">Kurumsal</Option>\r                  <Option value=\"SMB\">KOBİ</Option>\r                  <Option value=\"Startup\">Startup</Option>\r                  <Option value=\"Individual\">Bireysel</Option>\r                  <Option value=\"Government\">Kamu</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item name=\"segment\" label=\"Segment\">\r                <Select placeholder=\"Segment seçiniz\" aria-label=\"select field\">\r                  <Option value=\"Enterprise\">Enterprise</Option>\r                  <Option value=\"Premium\">Premium</Option>\r                  <Option value=\"Standard\">Standard</Option>\r                  <Option value=\"Basic\">Basic</Option>\r                  <Option value=\"Strategic\">Strategic</Option>\r                  <Option value=\"Key Account\">Key Account</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item name=\"numberOfEmployees\" label=\"Çalışan Sayısı\">\r                <InputNumber style={{ width: '100%' }} placeholder=\"Çalışan sayısı\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item name=\"annualRevenue\" label=\"Yıllık Gelir\">\r                <InputNumber\r                  style={{ width: '100%' }}\r                  formatter={value = aria-label=\"input field\"> `₺ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r                  parser={value => value!.replace(/\\₺\\s?|(,*)/g, '')}\r                  placeholder=\"Yıllık gelir\"\r                />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item name=\"creditLimit\" label=\"Kredi Limiti\">\r                <InputNumber\r                  style={{ width: '100%' }}\r                  formatter={value = aria-label=\"input field\"> `₺ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r                  parser={value => value!.replace(/\\₺\\s?|(,*)/g, '')}\r                  placeholder=\"Kredi limiti\"\r                />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item name=\"paymentTerms\" label=\"Ödeme Vadesi (Gün)\">\r                <InputNumber style={{ width: '100%' }} placeholder=\"30\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item name=\"description\" label=\"Açıklama\">\r            <Input.TextArea rows={3} placeholder=\"Müşteri hakkında notlar\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item style={{ marginBottom: 0 }}>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => {\r                setIsCreateModalOpen(false);\r                form.resetFields();\r              }}>\r                İptal\r              </Button>\r              <Button type=\"primary\" htmlType=\"submit\" loading={createCustomerMutation.isPending}>\r                Oluştur\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Customer Detail Drawer */}\r      <Drawer\r        title={\r          <Space>\r            <Avatar \r              icon={<BankOutlined />} \r              style={{ backgroundColor: '#1890ff' }}\r              size=\"large\"\r            >\r              {customerDetail?.companyName?.[0]}\r            </Avatar>\r            <div>\r              <Title level={5} style={{ marginBottom: 0 }}>{customerDetail?.companyName}</Title>\r              <Text type=\"secondary\">{customerDetail?.industry}</Text>\r            </div>\r          </Space>\r        }\r        placement=\"right\"\r        width={800}\r        open={isDetailDrawerOpen}\r        onClose={() => {\r          setIsDetailDrawerOpen(false);\r          setSelectedCustomer(null);\r          setActiveDetailTab('overview');\r        }}\r      >\r        <Tabs activeKey={activeDetailTab} onChange={setActiveDetailTab}>\r          <TabPane tab=\"Genel Bakış\" key=\"overview\">\r            <Descriptions bordered column={2}>\r              <Descriptions.Item label=\"Email\">{customerDetail?.email}</Descriptions.Item>\r              <Descriptions.Item label=\"Telefon\">{customerDetail?.phone || '-'}</Descriptions.Item>\r              <Descriptions.Item label=\"Website\">{customerDetail?.website || '-'}</Descriptions.Item>\r              <Descriptions.Item label=\"Sektör\">{customerDetail?.industry || '-'}</Descriptions.Item>\r              <Descriptions.Item label=\"Segment\">\r                {customerDetail?.segment ? (\r                  <Tag color={getSegmentColor(customerDetail.segment)}>{customerDetail.segment}</Tag>\r                ) : '-'}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Tip\">{customerDetail?.customerType || '-'}</Descriptions.Item>\r              <Descriptions.Item label=\"Çalışan Sayısı\">\r                {customerDetail?.numberOfEmployees?.toLocaleString('tr-TR') || '-'}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Yıllık Gelir\">\r                {customerDetail?.annualRevenue ? `₺${(customerDetail.annualRevenue / 1000000).toFixed(1)}M` : '-'}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Rating\">\r                {customerDetail?.rating ? (\r                  <Rate disabled value={customerDetail.rating} />\r                ) : '-'}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Durum\">\r                <Badge \r                  status={customerDetail?.isActive ? 'success' : 'default'} \r                  text={customerDetail?.isActive ? 'Aktif' : 'Pasif'}\r                />\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Vergi No\">{customerDetail?.taxNumber || '-'}</Descriptions.Item>\r              <Descriptions.Item label=\"Vergi Dairesi\">{customerDetail?.taxOffice || '-'}</Descriptions.Item>\r              <Descriptions.Item label=\"Adres\" span={2}>\r                {customerDetail?.address || '-'}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Şehir\">{customerDetail?.city || '-'}</Descriptions.Item>\r              <Descriptions.Item label=\"Ülke\">{customerDetail?.country || '-'}</Descriptions.Item>\r              <Descriptions.Item label=\"Kredi Limiti\">\r                {customerDetail?.creditLimit ? `₺${customerDetail.creditLimit.toLocaleString('tr-TR')}` : '-'}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Ödeme Vadesi\">\r                {customerDetail?.paymentTerms ? `${customerDetail.paymentTerms} gün` : '-'}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Açıklama\" span={2}>\r                {customerDetail?.description || '-'}\r              </Descriptions.Item>\r            </Descriptions>\r          </TabPane>\r          <TabPane tab={`İletişim Kişileri (${customerContacts?.length || 0})`} key=\"contacts\">\r            <Button \r              type=\"primary\" \r              icon={<PlusOutlined />} \r              style={{ marginBottom: 16 }}\r              onClick={() = aria-label=\"plus outlined\"> setIsContactModalOpen(true)}\r            >\r              Yeni Kişi Ekle\r            </Button>\r            {customerContacts?.length ? (\r              <List\r                dataSource={customerContacts}\r                renderItem={(contact: Contact) => (\r                  <Card style={{ marginBottom: 12 }}>\r                    <Row>\r                      <Col span={6}>\r                        <Space>\r                          <Avatar icon={<UserOutlined />}>\r                            {contact.firstName?.[0]}{contact.lastName?.[0]}\r                          </Avatar>\r                          <div>\r                            <Text strong>{contact.fullName}</Text>\r                            {contact.isPrimary && <Tag color=\"gold\" style={{ marginLeft: 8 }}>Birincil</Tag>}\r                            <br />\r                            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                              {contact.jobTitle || 'Pozisyon belirtilmemiş'}\r                            </Text>\r                          </div>\r                        </Space>\r                      </Col>\r                      <Col span={6}>\r                        <Space direction=\"vertical\" size={0}>\r                          <Space>\r                            <MailOutlined />\r                            <Text>{contact.email}</Text>\r                          </Space>\r                          {contact.phone && (\r                            <Space>\r                              <PhoneOutlined />\r                              <Text>{contact.phone}</Text>\r                            </Space>\r                          )}\r                        </Space>\r                      </Col>\r                      <Col span={6}>\r                        <Text type=\"secondary\">{contact.department || 'Departman belirtilmemiş'}</Text>\r                      </Col>\r                      <Col span={6} style={{ textAlign: 'right' }}>\r                        <Button.Group>\r                          <Button icon={<EditOutlined />} size=\"small\" aria-label=\"edit outlined\">Düzenle</Button>\r                          <Button icon={<DeleteOutlined />} size=\"small\" danger aria-label=\"delete outlined\">Sil</Button>\r                        </Button.Group>\r                      </Col>\r                    </Row>\r                  </Card>\r                )}\r              />\r            ) : (\r              <Empty description=\"İletişim kişisi bulunmuyor\" />\r            )}\r          </TabPane>\r          <TabPane tab={`Fırsatlar (${customerOpportunities?.length || 0})`} key=\"opportunities\">\r            {customerOpportunities?.length ? (\r              <List\r                dataSource={customerOpportunities}\r                renderItem={(opportunity: any) => (\r                  <Card style={{ marginBottom: 12 }}>\r                    <Row>\r                      <Col span={12}>\r                        <Text strong>{opportunity.name}</Text>\r                        <br />\r                        <Text type=\"secondary\">\r                          Değer: ₺{opportunity.amount?.toLocaleString('tr-TR')}\r                        </Text>\r                      </Col>\r                      <Col span={6}>\r                        <Tag color={opportunity.stage?.color || 'blue'}>\r                          {opportunity.stage?.name || 'Belirtilmemiş'}\r                        </Tag>\r                      </Col>\r                      <Col span={6} style={{ textAlign: 'right' }}>\r                        <Progress \r                          type=\"circle\" \r                          percent={opportunity.probability} \r                          width={50}\r                        />\r                      </Col>\r                    </Row>\r                  </Card>\r                )}\r              />\r            ) : (\r              <Empty description=\"Fırsat bulunmuyor\" />\r            )}\r          </TabPane>\r          <TabPane tab=\"Aktiviteler\" key=\"activities\">\r            <Timeline>\r              <Timeline.Item color=\"green\">\r                <p>İlk görüşme yapıldı</p>\r                <Text type=\"secondary\">10 Ocak 2024</Text>\r              </Timeline.Item>\r              <Timeline.Item color=\"blue\">\r                <p>Teklif gönderildi</p>\r                <Text type=\"secondary\">15 Ocak 2024</Text>\r              </Timeline.Item>\r              <Timeline.Item>\r                <p>Sözleşme müzakeresi</p>\r                <Text type=\"secondary\">20 Ocak 2024</Text>\r              </Timeline.Item>\r            </Timeline>\r          </TabPane>\r          <TabPane tab=\"Notlar\" key=\"notes\">\r            <Empty description=\"Not bulunmuyor\" />\r          </TabPane>\r        </Tabs>\r      </Drawer>\r      {/* Add Contact Modal */}\r      <Modal\r        title=\"Yeni İletişim Kişisi Ekle\"\r        open={isContactModalOpen}\r        onCancel={() => {\r          setIsContactModalOpen(false);\r          contactForm.resetFields();\r        }}\r        footer={null}\r        width={600}\r      >\r        <Form\r          form={contactForm}\r          layout=\"vertical\"\r          onFinish={(values) => addContactMutation.mutate(values)}\r        >\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"firstName\"\r                label=\"Ad\"\r                rules={[{ required: true, message: 'Ad zorunludur' }]}\r              >\r                <Input placeholder=\"Ad\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"lastName\"\r                label=\"Soyad\"\r                rules={[{ required: true, message: 'Soyad zorunludur' }]}\r              >\r                <Input placeholder=\"Soyad\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"email\"\r                label=\"Email\"\r                rules={[\r                  { required: true, message: 'Email zorunludur' },\r                  { type: 'email', message: 'Geçerli bir email giriniz' }\r                ]}\r              >\r                <Input placeholder=\"Email\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"phone\" label=\"Telefon\">\r                <Input placeholder=\"Telefon\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item name=\"mobilePhone\" label=\"Cep Telefonu\">\r                <Input placeholder=\"Cep telefonu\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"jobTitle\" label=\"Pozisyon\">\r                <Input placeholder=\"Pozisyon\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item name=\"department\" label=\"Departman\">\r                <Input placeholder=\"Departman\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"contactType\" label=\"Kişi Tipi\">\r                <Select placeholder=\"Tip seçiniz\" aria-label=\"select field\">\r                  <Option value=\"Primary\">Birincil</Option>\r                  <Option value=\"Secondary\">İkincil</Option>\r                  <Option value=\"Technical\">Teknik</Option>\r                  <Option value=\"Financial\">Mali</Option>\r                  <Option value=\"Executive\">Yönetici</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item \r            name=\"isPrimary\" \r            valuePropName=\"checked\"\r          >\r            <Space>\r              <input type=\"checkbox\" / aria-label=\"input field\">\r              <span>Birincil iletişim kişisi</span>\r            </Space>\r          </Form.Item>\r          <Form.Item name=\"notes\" label=\"Notlar\">\r            <Input.TextArea rows={3} placeholder=\"Kişi hakkında notlar\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item style={{ marginBottom: 0 }}>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => {\r                setIsContactModalOpen(false);\r                contactForm.resetFields();\r              }}>\r                İptal\r              </Button>\r              <Button type=\"primary\" htmlType=\"submit\" loading={addContactMutation.isPending}>\r                Ekle\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/crm/pages/CustomersPage.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { \r  Card, \r  Table, \r  Button, \r  Space, \r  Tag, \r  Dropdown, \r  Input, \r  Select, \r  Row, \r  Col,\r  message,\r  Tooltip,\r  Badge,\r  Avatar,\r  Modal,\r  Form,\r  DatePicker,\r  InputNumber,\r  Divider,\r  Statistic\r} from 'antd';\rimport {\r  PlusOutlined,\r  SearchOutlined,\r  FilterOutlined,\r  DownloadOutlined,\r  UploadOutlined,\r  UserOutlined,\r  PhoneOutlined,\r  MailOutlined,\r  GlobalOutlined,\r  StarOutlined,\r  StarFilled,\r  MoreOutlined,\r  SwapOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  SyncOutlined,\r  TeamOutlined,\r  DollarOutlined,\r  TrophyOutlined\r} from '@ant-design/icons';\rimport { PageHeader } from '@/shared/components/PageHeader';\rimport { leadService, Lead, CreateLeadDto, LeadListParams } from '@/services/crm/leadService';\rimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\rconst { Option } = Select;\rconst { Search } = Input;\rexport const LeadsPage: React.FC = () => {\r  const queryClient = useQueryClient();\r  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\r  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\r  const [isConvertModalOpen, setIsConvertModalOpen] = useState(false);\r  const [selectedLead, setSelectedLead] = useState<Lead | null>(null);\r  const [filters, setFilters] = useState<LeadListParams>({\r    page: 1,\r    pageSize: 10,\r    sortBy: 'createdDate',\r    sortDirection: 'desc'\r  });\r  const [form] = Form.useForm();\r  const [convertForm] = Form.useForm();\r  // Fetch leads\r  const { data: leadsData, isLoading, refetch } = useQuery({\r    queryKey: ['leads', filters],\r    queryFn: () => leadService.getLeads(filters)\r  });\r  // Create lead mutation\r  const createLeadMutation = useMutation({\r    mutationFn: (data: CreateLeadDto) => leadService.createLead(data),\r    onSuccess: () => {\r      message.success('Lead başarıyla oluşturuldu');\r      setIsCreateModalOpen(false);\r      form.resetFields();\r      queryClient.invalidateQueries({ queryKey: ['leads'] });\r    },\r    onError: () => {\r      message.error('Lead oluşturulurken hata oluştu');\r    }\r  });\r  // Convert lead mutation\r  const convertLeadMutation = useMutation({\r    mutationFn: ({ id, data }: { id: number; data: any }) => leadService.convertLead(id, data),\r    onSuccess: () => {\r      message.success('Lead başarıyla dönüştürüldü');\r      setIsConvertModalOpen(false);\r      convertForm.resetFields();\r      queryClient.invalidateQueries({ queryKey: ['leads'] });\r    },\r    onError: () => {\r      message.error('Lead dönüştürülürken hata oluştu');\r    }\r  });\r  // Delete lead mutation\r  const deleteLeadMutation = useMutation({\r    mutationFn: (id: number) => leadService.deleteLead(id),\r    onSuccess: () => {\r      message.success('Lead başarıyla silindi');\r      queryClient.invalidateQueries({ queryKey: ['leads'] });\r    },\r    onError: () => {\r      message.error('Lead silinirken hata oluştu');\r    }\r  });\r  const getStatusColor = (status: string) => {\r    const statusColors: Record<string, string> = {\r      'New': 'blue',\r      'Contacted': 'cyan',\r      'Qualified': 'green',\r      'Unqualified': 'red',\r      'Working': 'orange',\r      'Converted': 'success'\r    };\r    return statusColors[status] || 'default';\r  };\r  const getRatingIcon = (rating: string) => {\r    const ratings: Record<string, { icon: React.ReactNode; color: string }> = {\r      'Hot': { icon: <StarFilled />, color: '#ff4d4f' },\r      'Warm': { icon: <StarFilled />, color: '#fa8c16' },\r      'Cold': { icon: <StarOutlined />, color: '#1890ff' }\r    };\r    return ratings[rating] || { icon: <StarOutlined />, color: '#d9d9d9' };\r  };\r  const columns = [\r    {\r      title: 'Lead',\r      key: 'lead',\r      fixed: 'left',\r      width: 250,\r      render: (record: Lead) => (\r        <Space direction=\"vertical\" size={0}>\r          <Space>\r            <Avatar icon={<UserOutlined />} style={{ backgroundColor: '#1890ff' }}>\r              {record.firstName?.[0]}{record.lastName?.[0]}\r            </Avatar>\r            <div>\r              <div style={{ fontWeight: 500 }}>{record.fullName}</div>\r              <div style={{ fontSize: 12, color: '#999' }}>{record.companyName}</div>\r            </div>\r          </Space>\r        </Space>\r      )\r    },\r    {\r      title: 'İletişim',\r      key: 'contact',\r      width: 200,\r      render: (record: Lead) => (\r        <Space direction=\"vertical\" size={0}>\r          <Space>\r            <MailOutlined style={{ color: '#999' }} />\r            <span style={{ fontSize: 12 }}>{record.email}</span>\r          </Space>\r          {record.phone && (\r            <Space>\r              <PhoneOutlined style={{ color: '#999' }} />\r              <span style={{ fontSize: 12 }}>{record.phone}</span>\r            </Space>\r          )}\r        </Space>\r      )\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      width: 120,\r      render: (status: string) => (\r        <Tag color={getStatusColor(status)}>{status}</Tag>\r      )\r    },\r    {\r      title: 'Rating',\r      dataIndex: 'rating',\r      key: 'rating',\r      width: 100,\r      render: (rating: string) => {\r        const ratingInfo = getRatingIcon(rating);\r        return (\r          <Space>\r            <span style={{ color: ratingInfo.color }}>{ratingInfo.icon}</span>\r            <span>{rating}</span>\r          </Space>\r        );\r      }\r    },\r    {\r      title: 'Skor',\r      dataIndex: 'leadScore',\r      key: 'leadScore',\r      width: 100,\r      render: (score: number) => (\r        <Badge \r          count={score} \r          style={{ \r            backgroundColor: score >= 70 ? '#52c41a' : score >= 40 ? '#fa8c16' : '#f5222d' \r          }}\r          overflowCount={999}\r        />\r      )\r    },\r    {\r      title: 'Kaynak',\r      dataIndex: 'source',\r      key: 'source',\r      width: 120,\r      render: (source: string) => <Tag>{source || 'Direct'}</Tag>\r    },\r    {\r      title: 'Sektör',\r      dataIndex: 'industry',\r      key: 'industry',\r      width: 150\r    },\r    {\r      title: 'Pozisyon',\r      dataIndex: 'jobTitle',\r      key: 'jobTitle',\r      width: 150\r    },\r    {\r      title: 'Oluşturma',\r      dataIndex: 'createdDate',\r      key: 'createdDate',\r      width: 120,\r      render: (date: string) => new Date(date).toLocaleDateString('tr-TR')\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      fixed: 'right',\r      width: 100,\r      render: (record: Lead) => (\r        <Dropdown\r          menu={{\r            items: [\r              {\r                key: 'view',\r                icon: <UserOutlined />,\r                label: 'Görüntüle'\r              },\r              {\r                key: 'edit',\r                icon: <UserOutlined />,\r                label: 'Düzenle'\r              },\r              {\r                type: 'divider'\r              },\r              {\r                key: 'convert',\r                icon: <SwapOutlined />,\r                label: 'Müşteriye Dönüştür',\r                onClick: () => {\r                  setSelectedLead(record);\r                  setIsConvertModalOpen(true);\r                }\r              },\r              {\r                key: 'qualify',\r                icon: <CheckCircleOutlined />,\r                label: 'Qualify',\r                disabled: record.status === 'Qualified'\r              },\r              {\r                key: 'disqualify',\r                icon: <CloseCircleOutlined />,\r                label: 'Disqualify',\r                disabled: record.status === 'Unqualified'\r              },\r              {\r                type: 'divider'\r              },\r              {\r                key: 'delete',\r                icon: <CloseCircleOutlined />,\r                label: 'Sil',\r                danger: true,\r                onClick: () => {\r                  Modal.confirm({\r                    title: 'Lead Sil',\r                    content: 'Bu lead\\'i silmek istediğinize emin misiniz?',\r                    okText: 'Sil',\r                    okType: 'danger',\r                    cancelText: 'İptal',\r                    onOk: () => deleteLeadMutation.mutate(record.id)\r                  });\r                }\r              }\r            ]\r          }}\r        >\r          <Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r        </Dropdown>\r      )\r    }\r  ];\r  const handleTableChange = (pagination: any, filters: any, sorter: any) => {\r    setFilters({\r      ...filters,\r      page: pagination.current,\r      pageSize: pagination.pageSize,\r      sortBy: sorter.field || 'createdDate',\r      sortDirection: sorter.order === 'ascend' ? 'asc' : 'desc'\r    });\r  };\r  return (\r    <div>\r      <PageHeader\r        title=\"Leads\"\r        subtitle=\"Potansiyel müşterilerinizi yönetin ve takip edin\"\r        extra={[\r          <Button key=\"import\" icon={<UploadOutlined />} aria-label=\"upload outlined\">\r            İçe Aktar\r          </Button>,\r          <Button key=\"export\" icon={<DownloadOutlined />} aria-label=\"download outlined\">\r            Dışa Aktar\r          </Button>,\r          <Button\r            key=\"create\"\r            type=\"primary\"\r            icon={<PlusOutlined />}\r            onClick={() = aria-label=\"plus outlined\"> setIsCreateModalOpen(true)}\r          >\r            Yeni Lead\r          </Button>\r        ]}\r      />\r      {/* Statistics */}\r      <Row gutter={16} style={{ marginBottom: 16 }}>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Toplam Lead\"\r              value={leadsData?.totalCount || 0}\r              prefix={<TeamOutlined />}\r            />\r          </Card>\r        </Col>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Qualified Leads\"\r              value={leadsData?.items.filter(l => l.status === 'Qualified').length || 0}\r              prefix={<CheckCircleOutlined />}\r              valueStyle={{ color: '#52c41a' }}\r            />\r          </Card>\r        </Col>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Ortalama Skor\"\r              value={\r                leadsData?.items.length \r                  ? Math.round(leadsData.items.reduce((acc, l) => acc + l.leadScore, 0) / leadsData.items.length)\r                  : 0\r              }\r              prefix={<TrophyOutlined />}\r              valueStyle={{ color: '#fa8c16' }}\r            />\r          </Card>\r        </Col>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Dönüşüm Oranı\"\r              value={\r                leadsData?.items.length\r                  ? Math.round((leadsData.items.filter(l => l.isConverted).length / leadsData.items.length) * 100)\r                  : 0\r              }\r              suffix=\"%\"\r              prefix={<SwapOutlined />}\r              valueStyle={{ color: '#1890ff' }}\r            />\r          </Card>\r        </Col>\r      </Row>\r      {/* Filters */}\r      <Card style={{ marginBottom: 16 }}>\r        <Row gutter={16}>\r          <Col span={8}>\r            <Search\r              placeholder=\"Lead ara...\"\r              allowClear\r              enterButton={<SearchOutlined />}\r              onSearch={(value) => setFilters({ ...filters, search: value })}\r            />\r          </Col>\r          <Col span={4}>\r            <Select\r              style={{ width: '100%' }}\r              placeholder=\"Durum\"\r              allowClear\r              onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, status: value })}\r            >\r              <Option value=\"New\">New</Option>\r              <Option value=\"Contacted\">Contacted</Option>\r              <Option value=\"Qualified\">Qualified</Option>\r              <Option value=\"Unqualified\">Unqualified</Option>\r              <Option value=\"Working\">Working</Option>\r              <Option value=\"Converted\">Converted</Option>\r            </Select>\r          </Col>\r          <Col span={4}>\r            <Select\r              style={{ width: '100%' }}\r              placeholder=\"Rating\"\r              allowClear\r              onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, rating: value })}\r            >\r              <Option value=\"Hot\">Hot</Option>\r              <Option value=\"Warm\">Warm</Option>\r              <Option value=\"Cold\">Cold</Option>\r            </Select>\r          </Col>\r          <Col span={4}>\r            <Select\r              style={{ width: '100%' }}\r              placeholder=\"Kaynak\"\r              allowClear\r              onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, source: value })}\r            >\r              <Option value=\"Website\">Website</Option>\r              <Option value=\"Email\">Email</Option>\r              <Option value=\"Phone\">Phone</Option>\r              <Option value=\"Social Media\">Social Media</Option>\r              <Option value=\"Referral\">Referral</Option>\r              <Option value=\"Direct\">Direct</Option>\r            </Select>\r          </Col>\r          <Col span={4}>\r            <Button icon={<SyncOutlined />} onClick={() = aria-label=\"sync outlined\"> refetch()}>\r              Yenile\r            </Button>\r          </Col>\r        </Row>\r      </Card>\r      {/* Table */}\r      <Card>\r        <Table\r          rowSelection={{\r            selectedRowKeys,\r            onChange: setSelectedRowKeys\r          }}\r          columns={columns}\r          dataSource={leadsData?.items || []}\r          rowKey=\"id\"\r          loading={isLoading}\r          onChange={handleTableChange}\r          pagination={{\r            current: filters.page,\r            pageSize: filters.pageSize,\r            total: leadsData?.totalCount || 0,\r            showSizeChanger: true,\r            showTotal: (total) => `Toplam ${total} lead`\r          }}\r          scroll={{ x: 1500 }}\r        />\r      </Card>\r      {/* Create Lead Modal */}\r      <Modal\r        title=\"Yeni Lead Oluştur\"\r        open={isCreateModalOpen}\r        onCancel={() => {\r          setIsCreateModalOpen(false);\r          form.resetFields();\r        }}\r        footer={null}\r        width={720}\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={(values) => createLeadMutation.mutate(values)}\r        >\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"firstName\"\r                label=\"Ad\"\r                rules={[{ required: true, message: 'Ad zorunludur' }]}\r              >\r                <Input placeholder=\"Ad\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"lastName\"\r                label=\"Soyad\"\r                rules={[{ required: true, message: 'Soyad zorunludur' }]}\r              >\r                <Input placeholder=\"Soyad\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"email\"\r                label=\"Email\"\r                rules={[\r                  { required: true, message: 'Email zorunludur' },\r                  { type: 'email', message: 'Geçerli bir email giriniz' }\r                ]}\r              >\r                <Input placeholder=\"Email\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"phone\" label=\"Telefon\">\r                <Input placeholder=\"Telefon\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item name=\"companyName\" label=\"Şirket\">\r                <Input placeholder=\"Şirket Adı\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"jobTitle\" label=\"Pozisyon\">\r                <Input placeholder=\"Pozisyon\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item name=\"industry\" label=\"Sektör\">\r                <Select placeholder=\"Sektör seçiniz\" aria-label=\"select field\">\r                  <Option value=\"Technology\">Teknoloji</Option>\r                  <Option value=\"Finance\">Finans</Option>\r                  <Option value=\"Healthcare\">Sağlık</Option>\r                  <Option value=\"Manufacturing\">Üretim</Option>\r                  <Option value=\"Retail\">Perakende</Option>\r                  <Option value=\"Education\">Eğitim</Option>\r                  <Option value=\"Other\">Diğer</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"source\" label=\"Kaynak\">\r                <Select placeholder=\"Kaynak seçiniz\" aria-label=\"select field\">\r                  <Option value=\"Website\">Website</Option>\r                  <Option value=\"Email\">Email</Option>\r                  <Option value=\"Phone\">Phone</Option>\r                  <Option value=\"Social Media\">Social Media</Option>\r                  <Option value=\"Referral\">Referral</Option>\r                  <Option value=\"Direct\">Direct</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item name=\"numberOfEmployees\" label=\"Çalışan Sayısı\">\r                <InputNumber style={{ width: '100%' }} placeholder=\"Çalışan sayısı\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"annualRevenue\" label=\"Yıllık Gelir\">\r                <InputNumber\r                  style={{ width: '100%' }}\r                  formatter={value = aria-label=\"input field\"> `₺ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r                  parser={value => value!.replace(/\\₺\\s?|(,*)/g, '')}\r                  placeholder=\"Yıllık gelir\"\r                />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item name=\"description\" label=\"Açıklama\">\r            <Input.TextArea rows={3} placeholder=\"Açıklama\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item style={{ marginBottom: 0 }}>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => {\r                setIsCreateModalOpen(false);\r                form.resetFields();\r              }}>\r                İptal\r              </Button>\r              <Button type=\"primary\" htmlType=\"submit\" loading={createLeadMutation.isPending}>\r                Oluştur\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Convert Lead Modal */}\r      <Modal\r        title=\"Lead'i Müşteriye Dönüştür\"\r        open={isConvertModalOpen}\r        onCancel={() => {\r          setIsConvertModalOpen(false);\r          convertForm.resetFields();\r          setSelectedLead(null);\r        }}\r        footer={null}\r        width={600}\r      >\r        <Form\r          form={convertForm}\r          layout=\"vertical\"\r          onFinish={(values) => {\r            if (selectedLead) {\r              convertLeadMutation.mutate({ id: selectedLead.id, data: values });\r            }\r          }}\r        >\r          <Form.Item\r            name=\"createOpportunity\"\r            valuePropName=\"checked\"\r            initialValue={true}\r          >\r            <Space>\r              <input type=\"checkbox\" / aria-label=\"input field\">\r              <span>Fırsat oluştur</span>\r            </Space>\r          </Form.Item>\r          <Form.Item\r            name=\"opportunityName\"\r            label=\"Fırsat Adı\"\r            rules={[{ required: true, message: 'Fırsat adı zorunludur' }]}\r          >\r            <Input placeholder=\"Fırsat adı\" / aria-label=\"input field\">\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"opportunityAmount\"\r                label=\"Tahmini Değer\"\r              >\r                <InputNumber\r                  style={{ width: '100%' }}\r                  formatter={value = aria-label=\"input field\"> `₺ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r                  parser={value => value!.replace(/\\₺\\s?|(,*)/g, '')}\r                  placeholder=\"Tahmini değer\"\r                />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"opportunityExpectedCloseDate\"\r                label=\"Tahmini Kapanış\"\r              >\r                <DatePicker style={{ width: '100%' }} placeholder=\"Tarih seçiniz\" />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Divider />\r          <Form.Item\r            name=\"createTask\"\r            valuePropName=\"checked\"\r          >\r            <Space>\r              <input type=\"checkbox\" / aria-label=\"input field\">\r              <span>Takip görevi oluştur</span>\r            </Space>\r          </Form.Item>\r          <Form.Item\r            name=\"taskSubject\"\r            label=\"Görev Konusu\"\r          >\r            <Input placeholder=\"Görev konusu\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item\r            name=\"taskDueDate\"\r            label=\"Görev Tarihi\"\r          >\r            <DatePicker style={{ width: '100%' }} placeholder=\"Tarih seçiniz\" />\r          </Form.Item>\r          <Form.Item style={{ marginBottom: 0 }}>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => {\r                setIsConvertModalOpen(false);\r                convertForm.resetFields();\r                setSelectedLead(null);\r              }}>\r                İptal\r              </Button>\r              <Button type=\"primary\" htmlType=\"submit\" loading={convertLeadMutation.isPending}>\r                Dönüştür\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/crm/pages/LeadsPage.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { Card, Table, Button, Space, Tag, Input, Select, DatePicker, message, Drawer, Form, InputNumber, Row, Col, Statistic } from 'antd';\rimport { PlusOutlined, SearchOutlined, EditOutlined, DeleteOutlined, DollarOutlined, CalendarOutlined, UserOutlined } from '@ant-design/icons';\rimport type { ColumnsType } from 'antd/es/table';\rimport dayjs from 'dayjs';\rinterface Opportunity {\r  id: number;\r  name: string;\r  customerId: number;\r  customerName: string;\r  value: number;\r  probability: number;\r  expectedRevenue: number;\r  stage: string;\r  status: string;\r  closeDate: string;\r  owner: string;\r  source: string;\r  description: string;\r  createdDate: string;\r  lastActivity: string;\r}\rconst stages = [\r  { value: 'qualification', label: 'Kalifikasyon', color: 'blue' },\r  { value: 'needs_analysis', label: 'İhtiyaç Analizi', color: 'cyan' },\r  { value: 'proposal', label: 'Teklif', color: 'orange' },\r  { value: 'negotiation', label: 'Müzakere', color: 'purple' },\r  { value: 'closed_won', label: 'Kazanıldı', color: 'green' },\r  { value: 'closed_lost', label: 'Kaybedildi', color: 'red' },\r];\rconst mockData: Opportunity[] = [\r  {\r    id: 1,\r    name: 'ERP Yazılımı Satışı',\r    customerId: 1,\r    customerName: 'ABC Teknoloji A.Ş.',\r    value: 150000,\r    probability: 75,\r    expectedRevenue: 112500,\r    stage: 'proposal',\r    status: 'active',\r    closeDate: '2024-02-15',\r    owner: 'Ahmet Yılmaz',\r    source: 'Website',\r    description: 'Kurumsal ERP çözümü için görüşmeler devam ediyor',\r    createdDate: '2024-01-10',\r    lastActivity: '2024-01-25',\r  },\r  {\r    id: 2,\r    name: 'CRM Modülü Entegrasyonu',\r    customerId: 2,\r    customerName: 'XYZ Holding',\r    value: 85000,\r    probability: 60,\r    expectedRevenue: 51000,\r    stage: 'needs_analysis',\r    status: 'active',\r    closeDate: '2024-03-01',\r    owner: 'Mehmet Demir',\r    source: 'Referral',\r    description: 'Mevcut sistemlerine CRM modülü entegrasyonu',\r    createdDate: '2024-01-15',\r    lastActivity: '2024-01-28',\r  },\r];\rexport const OpportunitiesPage: React.FC = () => {\r  const [opportunities, setOpportunities] = useState<Opportunity[]>(mockData);\r  const [loading, setLoading] = useState(false);\r  const [drawerVisible, setDrawerVisible] = useState(false);\r  const [editingOpportunity, setEditingOpportunity] = useState<Opportunity | null>(null);\r  const [searchText, setSearchText] = useState('');\r  const [filterStage, setFilterStage] = useState<string | undefined>();\r  const [form] = Form.useForm();\r  const columns: ColumnsType<Opportunity> = [\r    {\r      title: 'Fırsat Adı',\r      dataIndex: 'name',\r      key: 'name',\r      render: (text, record) => (\r        <Space direction=\"vertical\" size={0}>\r          <a style={{ fontWeight: 500 }}>{text}</a>\r          <small style={{ color: '#8c8c8c' }}>{record.customerName}</small>\r        </Space>\r      ),\r    },\r    {\r      title: 'Değer',\r      dataIndex: 'value',\r      key: 'value',\r      align: 'right',\r      render: (value) => (\r        <span style={{ fontWeight: 500 }}>\r          ₺{value.toLocaleString('tr-TR')}\r        </span>\r      ),\r    },\r    {\r      title: 'Olasılık',\r      dataIndex: 'probability',\r      key: 'probability',\r      align: 'center',\r      render: (probability) => (\r        <Tag color={probability >= 70 ? 'green' : probability >= 40 ? 'orange' : 'red'}>\r          %{probability}\r        </Tag>\r      ),\r    },\r    {\r      title: 'Beklenen Gelir',\r      dataIndex: 'expectedRevenue',\r      key: 'expectedRevenue',\r      align: 'right',\r      render: (value) => `₺${value.toLocaleString('tr-TR')}`,\r    },\r    {\r      title: 'Aşama',\r      dataIndex: 'stage',\r      key: 'stage',\r      render: (stage) => {\r        const stageInfo = stages.find(s => s.value === stage);\r        return <Tag color={stageInfo?.color}>{stageInfo?.label}</Tag>;\r      },\r    },\r    {\r      title: 'Kapanış Tarihi',\r      dataIndex: 'closeDate',\r      key: 'closeDate',\r      render: (date) => dayjs(date).format('DD.MM.YYYY'),\r    },\r    {\r      title: 'Sorumlu',\r      dataIndex: 'owner',\r      key: 'owner',\r      render: (owner) => (\r        <Space size={4}>\r          <UserOutlined style={{ fontSize: 12, color: '#8c8c8c' }} />\r          <span>{owner}</span>\r        </Space>\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      fixed: 'right',\r      width: 100,\r      render: (_, record) => (\r        <Space>\r          <Button\r            type=\"text\"\r            icon={<EditOutlined />}\r            onClick={() = aria-label=\"edit outlined\"> handleEdit(record)}\r          />\r          <Button\r            type=\"text\"\r            danger\r            icon={<DeleteOutlined />}\r            onClick={() = aria-label=\"delete outlined\"> handleDelete(record.id)}\r          />\r        </Space>\r      ),\r    },\r  ];\r  const handleEdit = (opportunity: Opportunity) => {\r    setEditingOpportunity(opportunity);\r    form.setFieldsValue({\r      ...opportunity,\r      closeDate: dayjs(opportunity.closeDate),\r    });\r    setDrawerVisible(true);\r  };\r  const handleDelete = (id: number) => {\r    setOpportunities(prev => prev.filter(o => o.id !== id));\r    message.success('Fırsat silindi');\r  };\r  const handleSubmit = (values: any) => {\r    const formData = {\r      ...values,\r      closeDate: values.closeDate.format('YYYY-MM-DD'),\r      expectedRevenue: values.value * (values.probability / 100),\r    };\r    if (editingOpportunity) {\r      setOpportunities(prev => \r        prev.map(o => o.id === editingOpportunity.id ? { ...o, ...formData } : o)\r      );\r      message.success('Fırsat güncellendi');\r    } else {\r      const newOpportunity = {\r        ...formData,\r        id: opportunities.length + 1,\r        createdDate: dayjs().format('YYYY-MM-DD'),\r        lastActivity: dayjs().format('YYYY-MM-DD'),\r        status: 'active',\r      };\r      setOpportunities(prev => [...prev, newOpportunity]);\r      message.success('Yeni fırsat eklendi');\r    }\r    setDrawerVisible(false);\r    form.resetFields();\r    setEditingOpportunity(null);\r  };\r  const filteredData = opportunities.filter(o => {\r    const matchesSearch = o.name.toLowerCase().includes(searchText.toLowerCase()) ||\r                         o.customerName.toLowerCase().includes(searchText.toLowerCase());\r    const matchesStage = !filterStage || o.stage === filterStage;\r    return matchesSearch && matchesStage;\r  });\r  const totalValue = filteredData.reduce((sum, o) => sum + o.value, 0);\r  const totalExpected = filteredData.reduce((sum, o) => sum + o.expectedRevenue, 0);\r  const avgProbability = filteredData.length > 0 \r    ? Math.round(filteredData.reduce((sum, o) => sum + o.probability, 0) / filteredData.length)\r    : 0;\r  return (\r    <div style={{ padding: 24 }}>\r      <Row gutter={16} style={{ marginBottom: 24 }}>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Toplam Değer\"\r              value={totalValue}\r              prefix=\"₺\"\r              formatter={(value) => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r            />\r          </Card>\r        </Col>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Beklenen Gelir\"\r              value={totalExpected}\r              prefix=\"₺\"\r              formatter={(value) => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r            />\r          </Card>\r        </Col>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Ortalama Olasılık\"\r              value={avgProbability}\r              suffix=\"%\"\r            />\r          </Card>\r        </Col>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Aktif Fırsatlar\"\r              value={filteredData.length}\r              suffix=\"adet\"\r            />\r          </Card>\r        </Col>\r      </Row>\r      <Card>\r        <Space style={{ marginBottom: 16, width: '100%', justifyContent: 'space-between' }}>\r          <Space>\r            <Input\r              placeholder=\"Ara...\"\r              prefix={<SearchOutlined / aria-label=\"input field\">}\r              value={searchText}\r              onChange={(e) => setSearchText(e.target.value)}\r              style={{ width: 250 }}\r            />\r            <Select\r              placeholder=\"Aşama Filtrele\"\r              allowClear\r              style={{ width: 180 }}\r              value={filterStage}\r              onChange={setFilterStage}\r              options={stages}\r            / aria-label=\"select field\">\r          </Space>\r          <Button\r            type=\"primary\"\r            icon={<PlusOutlined />}\r            onClick={() = aria-label=\"plus outlined\"> {\r              setEditingOpportunity(null);\r              form.resetFields();\r              setDrawerVisible(true);\r            }}\r          >\r            Yeni Fırsat\r          </Button>\r        </Space>\r        <Table\r          columns={columns}\r          dataSource={filteredData}\r          rowKey=\"id\"\r          loading={loading}\r          pagination={{\r            pageSize: 10,\r            showTotal: (total) => `Toplam ${total} fırsat`,\r          }}\r        />\r      </Card>\r      <Drawer\r        title={editingOpportunity ? 'Fırsatı Düzenle' : 'Yeni Fırsat'}\r        width={600}\r        open={drawerVisible}\r        onClose={() => {\r          setDrawerVisible(false);\r          form.resetFields();\r          setEditingOpportunity(null);\r        }}\r        footer={\r          <Space style={{ float: 'right' }}>\r            <Button onClick={() => setDrawerVisible(false)}>İptal</Button>\r            <Button type=\"primary\" onClick={() => form.submit()}>\r              {editingOpportunity ? 'Güncelle' : 'Ekle'}\r            </Button>\r          </Space>\r        }\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleSubmit}\r        >\r          <Form.Item\r            name=\"name\"\r            label=\"Fırsat Adı\"\r            rules={[{ required: true, message: 'Fırsat adı gerekli' }]}\r          >\r            <Input / aria-label=\"input field\">\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"customerName\"\r                label=\"Müşteri\"\r                rules={[{ required: true, message: 'Müşteri gerekli' }]}\r              >\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"stage\"\r                label=\"Aşama\"\r                rules={[{ required: true, message: 'Aşama gerekli' }]}\r              >\r                <Select options={stages} / aria-label=\"select field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"value\"\r                label=\"Değer (₺)\"\r                rules={[{ required: true, message: 'Değer gerekli' }]}\r              >\r                <InputNumber\r                  style={{ width: '100%' }}\r                  formatter={(value) = aria-label=\"input field\"> `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r                  parser={(value) => value!.replace(/\\$\\s?|(,*)/g, '')}\r                />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"probability\"\r                label=\"Olasılık (%)\"\r                rules={[{ required: true, message: 'Olasılık gerekli' }]}\r              >\r                <InputNumber\r                  style={{ width: '100%' }}\r                  min={0}\r                  max={100}\r                  formatter={(value) = aria-label=\"input field\"> `${value}%`}\r                  parser={(value) => value!.replace('%', '')}\r                />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"closeDate\"\r                label=\"Tahmini Kapanış\"\r                rules={[{ required: true, message: 'Kapanış tarihi gerekli' }]}\r              >\r                <DatePicker style={{ width: '100%' }} format=\"DD.MM.YYYY\" />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"owner\"\r                label=\"Sorumlu\"\r                rules={[{ required: true, message: 'Sorumlu gerekli' }]}\r              >\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item\r            name=\"source\"\r            label=\"Kaynak\"\r          >\r            <Select aria-label=\"select field\">\r              <Select.Option value=\"Website\" aria-label=\"select field\">Website</Select.Option>\r              <Select.Option value=\"Referral\" aria-label=\"select field\">Referans</Select.Option>\r              <Select.Option value=\"Cold Call\" aria-label=\"select field\">Soğuk Arama</Select.Option>\r              <Select.Option value=\"Partner\" aria-label=\"select field\">İş Ortağı</Select.Option>\r              <Select.Option value=\"Campaign\" aria-label=\"select field\">Kampanya</Select.Option>\r            </Select>\r          </Form.Item>\r          <Form.Item\r            name=\"description\"\r            label=\"Açıklama\"\r          >\r            <Input.TextArea rows={4} / aria-label=\"input field\">\r          </Form.Item>\r        </Form>\r      </Drawer>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/crm/pages/OpportunitiesPage.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React from 'react';\rimport { PageContainer } from '@ant-design/pro-components';\rimport { Card, Row, Col, Statistic, Progress, Typography, Tag, Table, Timeline, Alert, Space, Badge, Button } from 'antd';\rimport { useNotifications } from '@/features/master/contexts/NotificationContext';\rimport {\r  TeamOutlined,\r  CreditCardOutlined,\r  ArrowUpOutlined,\r  CloudServerOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r  CheckCircleOutlined,\r  ExclamationCircleOutlined,\r  CloseCircleOutlined,\r  UserOutlined,\r} from '@ant-design/icons';\rimport { Line, Pie } from '@ant-design/charts';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rexport const MasterDashboard: React.FC = () => {\r  const { addNotification } = useNotifications();\r  const sendTestNotification = () => {\r    addNotification({\r      type: 'info',\r      title: 'Test Bildirimi',\r      message: 'Bu bir test bildirimidir. Sistem normal çalışıyor.',\r      priority: 'medium',\r      category: 'system'\r    });\r  };\r  // System Health Data\r  const systemHealth = {\r    cpu: 45,\r    memory: 68,\r    disk: 72,\r    network: 35,\r  };\r  // Revenue Chart Data\r  const revenueData = [\r    { month: 'Ocak', value: 125000, type: 'Gelir' },\r    { month: 'Şubat', value: 145000, type: 'Gelir' },\r    { month: 'Mart', value: 168000, type: 'Gelir' },\r    { month: 'Nisan', value: 185000, type: 'Gelir' },\r    { month: 'Mayıs', value: 210000, type: 'Gelir' },\r    { month: 'Haziran', value: 235000, type: 'Gelir' },\r  ];\r  // Tenant Distribution Data\r  const tenantDistribution = [\r    { type: 'Başlangıç', value: 245, percent: 49 },\r    { type: 'Profesyonel', value: 185, percent: 37 },\r    { type: 'Kurumsal', value: 70, percent: 14 },\r  ];\r  // Recent Tenants\r  const recentTenants = [\r    { id: 1, name: 'TechnoSoft Ltd.', plan: 'Profesyonel', status: 'active', date: '2024-01-10' },\r    { id: 2, name: 'KayalarGrup A.Ş.', plan: 'Kurumsal', status: 'active', date: '2024-01-09' },\r    { id: 3, name: 'DemirTicaret', plan: 'Başlangıç', status: 'pending', date: '2024-01-09' },\r    { id: 4, name: 'YıldızHolding', plan: 'Kurumsal', status: 'active', date: '2024-01-08' },\r    { id: 5, name: 'AkınSoft', plan: 'Profesyonel', status: 'suspended', date: '2024-01-08' },\r  ];\r  // System Events\r  const systemEvents = [\r    { time: '10:30', event: 'Yeni tenant kaydı: TechnoSoft Ltd.', type: 'success' },\r    { time: '10:15', event: 'Yedekleme başarıyla tamamlandı', type: 'info' },\r    { time: '09:45', event: 'API rate limit aşıldı: Tenant #234', type: 'warning' },\r    { time: '09:30', event: 'Sistem güncellmesi uygulandı v2.4.1', type: 'success' },\r    { time: '09:00', event: 'Database maintenance tamamlandı', type: 'info' },\r  ];\r  const columns = [\r    {\r      title: 'Tenant',\r      dataIndex: 'name',\r      key: 'name',\r      render: (text: string) => <Text strong>{text}</Text>,\r    },\r    {\r      title: 'Plan',\r      dataIndex: 'plan',\r      key: 'plan',\r      render: (plan: string) => {\r        const color = plan === 'Kurumsal' ? 'gold' : plan === 'Profesyonel' ? 'blue' : 'green';\r        return <Tag color={color}>{plan}</Tag>;\r      },\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status: string) => {\r        const config = {\r          active: { color: 'success', text: 'Aktif' },\r          pending: { color: 'warning', text: 'Onay Bekliyor' },\r          suspended: { color: 'error', text: 'Askıda' },\r        };\r        return <Tag color={config[status as keyof typeof config].color}>{config[status as keyof typeof config].text}</Tag>;\r      },\r    },\r    {\r      title: 'Kayıt Tarihi',\r      dataIndex: 'date',\r      key: 'date',\r    },\r  ];\r  const revenueConfig = {\r    data: revenueData,\r    xField: 'month',\r    yField: 'value',\r    seriesField: 'type',\r    smooth: true,\r    animation: {\r      appear: {\r        animation: 'path-in',\r        duration: 1000,\r      },\r    },\r    yAxis: {\r      label: {\r        formatter: (v: string) => `₺${Number(v).toLocaleString('tr-TR')}`,\r      },\r    },\r  };\r  const tenantConfig = {\r    data: tenantDistribution,\r    angleField: 'value',\r    colorField: 'type',\r    radius: 1,\r    innerRadius: 0.6,\r    label: {\r      type: 'inner',\r      offset: '-50%',\r      content: '{value}',\r      style: {\r        textAlign: 'center',\r        fontSize: 14,\r      },\r    },\r    interactions: [{ type: 'element-selected' }, { type: 'element-active' }],\r    statistic: {\r      title: false,\r      content: {\r        style: {\r          whiteSpace: 'pre-wrap',\r          overflow: 'hidden',\r          textOverflow: 'ellipsis',\r        },\r        content: '500\\nToplam',\r      },\r    },\r  };\r  return (\r    <PageContainer\r      title=\"Master Dashboard\"\r      subTitle=\"Sistem yönetimi ve izleme paneli\"\r      extra={[\r        <Button key=\"test-notif\" type=\"primary\" onClick={sendTestNotification}>\r          Test Bildirimi Gönder\r        </Button>,\r        <Tag key=\"env\" color=\"blue\" icon={<CloudServerOutlined />}>Production</Tag>,\r        <Tag key=\"version\" color=\"green\">v2.4.1</Tag>,\r      ]}\r    >\r      {/* Critical Alerts */}\r      <Alert\r        message=\"Sistem Durumu\"\r        description=\"Tüm sistemler normal çalışıyor. Son 24 saatte %99.9 uptime.\"\r        type=\"success\"\r        showIcon\r        icon={<CheckCircleOutlined />}\r        closable\r        style={{ marginBottom: 24 }}\r      />\r      {/* Main Stats */}\r      <Row gutter={[24, 24]}>\r        <Col xs={24} sm={12} lg={6}>\r          <Card bordered={false}>\r            <Statistic\r              title=\"Toplam Tenant\"\r              value={500}\r              prefix={<TeamOutlined />}\r              suffix={\r                <span style={{ fontSize: 14, color: '#52c41a' }}>\r                  <ArrowUpOutlined /> 12%\r                </span>\r              }\r              valueStyle={{ color: '#1890ff' }}\r            />\r            <Progress percent={78} showInfo={false} strokeColor=\"#1890ff\" />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>Bu ay 45 yeni tenant</Text>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card bordered={false}>\r            <Statistic\r              title=\"Aktif Abonelik\"\r              value={485}\r              prefix={<CreditCardOutlined />}\r              suffix={\r                <span style={{ fontSize: 14, color: '#52c41a' }}>\r                  <ArrowUpOutlined /> 8%\r                </span>\r              }\r              valueStyle={{ color: '#52c41a' }}\r            />\r            <Progress percent={97} showInfo={false} strokeColor=\"#52c41a\" />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>15 trial kullanıcı</Text>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card bordered={false}>\r            <Statistic\r              title=\"Aylık Gelir\"\r              value={235000}\r              prefix=\"₺\"\r              valueStyle={{ color: '#faad14' }}\r            />\r            <Progress percent={85} showInfo={false} strokeColor=\"#faad14\" />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>Hedef: ₺275,000</Text>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card bordered={false}>\r            <Statistic\r              title=\"Sistem Uptime\"\r              value={99.9}\r              suffix=\"%\"\r              prefix={<CloudServerOutlined />}\r              valueStyle={{ color: '#ff4d4f' }}\r            />\r            <Progress percent={99.9} showInfo={false} strokeColor=\"#ff4d4f\" />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>30 gün kesintisiz</Text>\r          </Card>\r        </Col>\r      </Row>\r      {/* System Health & Revenue */}\r      <Row gutter={[24, 24]} style={{ marginTop: 24 }}>\r        <Col xs={24} lg={8}>\r          <Card title=\"Sistem Sağlığı\" bordered={false}>\r            <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\r              <div>\r                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>\r                  <Text>CPU Kullanımı</Text>\r                  <Text strong>{systemHealth.cpu}%</Text>\r                </div>\r                <Progress percent={systemHealth.cpu} strokeColor=\"#52c41a\" />\r              </div>\r              <div>\r                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>\r                  <Text>Bellek Kullanımı</Text>\r                  <Text strong>{systemHealth.memory}%</Text>\r                </div>\r                <Progress percent={systemHealth.memory} strokeColor=\"#1890ff\" />\r              </div>\r              <div>\r                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>\r                  <Text>Disk Kullanımı</Text>\r                  <Text strong>{systemHealth.disk}%</Text>\r                </div>\r                <Progress percent={systemHealth.disk} strokeColor=\"#faad14\" />\r              </div>\r              <div>\r                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>\r                  <Text>Network I/O</Text>\r                  <Text strong>{systemHealth.network}%</Text>\r                </div>\r                <Progress percent={systemHealth.network} strokeColor=\"#722ed1\" />\r              </div>\r            </Space>\r            <div style={{ marginTop: 24, padding: 16, background: '#f0f2f5', borderRadius: 8 }}>\r              <Space>\r                <DatabaseOutlined style={{ fontSize: 24, color: '#1890ff' }} />\r                <div>\r                  <Text strong>Database Status</Text>\r                  <br />\r                  <Text type=\"success\">PostgreSQL Online</Text>\r                </div>\r              </Space>\r            </div>\r          </Card>\r        </Col>\r        <Col xs={24} lg={16}>\r          <Card title=\"Aylık Gelir Trendi\" bordered={false}>\r            <Line {...revenueConfig} height={300} />\r          </Card>\r        </Col>\r      </Row>\r      {/* Tenant Distribution & Recent Tenants */}\r      <Row gutter={[24, 24]} style={{ marginTop: 24 }}>\r        <Col xs={24} lg={8}>\r          <Card title=\"Tenant Dağılımı\" bordered={false}>\r            <Pie {...tenantConfig} height={300} />\r          </Card>\r        </Col>\r        <Col xs={24} lg={16}>\r          <Card \r            title=\"Son Tenant Kayıtları\" \r            bordered={false}\r            extra={<a href=\"#\">Tümünü Gör</a>}\r          >\r            <Table \r              columns={columns} \r              dataSource={recentTenants} \r              pagination={false}\r              size=\"small\"\r            />\r          </Card>\r        </Col>\r      </Row>\r      {/* System Events & Quick Actions */}\r      <Row gutter={[24, 24]} style={{ marginTop: 24 }}>\r        <Col xs={24} lg={12}>\r          <Card title=\"Sistem Olayları\" bordered={false} extra={<Badge status=\"processing\" text=\"Canlı\" />}>\r            <Timeline>\r              {systemEvents.map((event, index) => (\r                <Timeline.Item \r                  key={index}\r                  color={event.type === 'success' ? 'green' : event.type === 'warning' ? 'orange' : 'blue'}\r                  dot={event.type === 'warning' ? <ExclamationCircleOutlined /> : undefined}\r                >\r                  <Space direction=\"vertical\" size={0}>\r                    <Text type=\"secondary\" style={{ fontSize: 12 }}>{event.time}</Text>\r                    <Text>{event.event}</Text>\r                  </Space>\r                </Timeline.Item>\r              ))}\r            </Timeline>\r          </Card>\r        </Col>\r        <Col xs={24} lg={12}>\r          <Card title=\"Hızlı İstatistikler\" bordered={false}>\r            <Row gutter={[16, 16]}>\r              <Col span={12}>\r                <Card size=\"small\" style={{ background: '#f0f5ff', borderColor: '#adc6ff' }}>\r                  <Statistic\r                    title=\"Bugünkü Kayıt\"\r                    value={12}\r                    prefix={<UserOutlined />}\r                    valueStyle={{ fontSize: 20 }}\r                  />\r                </Card>\r              </Col>\r              <Col span={12}>\r                <Card size=\"small\" style={{ background: '#f6ffed', borderColor: '#b7eb8f' }}>\r                  <Statistic\r                    title=\"API Çağrısı\"\r                    value=\"1.2M\"\r                    prefix={<ApiOutlined />}\r                    valueStyle={{ fontSize: 20 }}\r                  />\r                </Card>\r              </Col>\r              <Col span={12}>\r                <Card size=\"small\" style={{ background: '#fff7e6', borderColor: '#ffd591' }}>\r                  <Statistic\r                    title=\"Destek Talebi\"\r                    value={23}\r                    prefix={<ExclamationCircleOutlined />}\r                    valueStyle={{ fontSize: 20 }}\r                  />\r                </Card>\r              </Col>\r              <Col span={12}>\r                <Card size=\"small\" style={{ background: '#fff1f0', borderColor: '#ffccc7' }}>\r                  <Statistic\r                    title=\"Kritik Hata\"\r                    value={0}\r                    prefix={<CloseCircleOutlined />}\r                    valueStyle={{ fontSize: 20, color: '#52c41a' }}\r                  />\r                </Card>\r              </Col>\r            </Row>\r          </Card>\r        </Col>\r      </Row>\r    </PageContainer>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/dashboard/pages/MasterDashboard/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { useNavigate } from 'react-router-dom';\rimport {\r  Row,\r  Col,\r  Card,\r  Statistic,\r  Progress,\r  Timeline,\r  Tag,\r  Space,\r  Avatar,\r  Button,\r  Typography,\r  Badge,\r  List,\r  Divider,\r  Select,\r  Segmented\r} from 'antd';\rimport {\r  ArrowUpOutlined,\r  ArrowDownOutlined,\r  DollarOutlined,\r  ShoppingCartOutlined,\r  UserOutlined,\r  FileTextOutlined,\r  ClockCircleOutlined,\r  WarningOutlined,\r  TeamOutlined,\r  RiseOutlined,\r  BellOutlined,\r  EyeOutlined,\r  PlusOutlined,\r  TrophyOutlined,\r  RocketOutlined,\r  PieChartOutlined,\r  BarChartOutlined,\r  DownloadOutlined,\r  ContactsOutlined,\r  BankOutlined,\r  CalculatorOutlined,\r  IdcardOutlined,\r  ContainerOutlined,\r  AppstoreOutlined,\r  ShopOutlined,\r  TruckOutlined,\r  ToolOutlined,\r  SettingOutlined,\r  ArrowRightOutlined\r} from '@ant-design/icons';\rimport { Line, Pie, Area } from '@ant-design/plots';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rexport const TenantDashboard: React.FC = () => {\r  const navigate = useNavigate();\r  const [loading, setLoading] = useState(true);\r  const [selectedModule, setSelectedModule] = useState('overview');\r  useEffect(() => {\r    setTimeout(() => setLoading(false), 1500);\r  }, []);\r  const revenueData = [\r    { month: 'Ocak', value: 85000, type: 'Gelir' },\r    { month: 'Şubat', value: 92000, type: 'Gelir' },\r    { month: 'Mart', value: 108000, type: 'Gelir' },\r    { month: 'Nisan', value: 125000, type: 'Gelir' },\r    { month: 'Mayıs', value: 142000, type: 'Gelir' },\r    { month: 'Haziran', value: 155000, type: 'Gelir' },\r    { month: 'Ocak', value: 45000, type: 'Gider' },\r    { month: 'Şubat', value: 48000, type: 'Gider' },\r    { month: 'Mart', value: 52000, type: 'Gider' },\r    { month: 'Nisan', value: 58000, type: 'Gider' },\r    { month: 'Mayıs', value: 62000, type: 'Gider' },\r    { month: 'Haziran', value: 65000, type: 'Gider' },\r  ];\r  const categoryData = [\r    { type: 'Elektronik', value: 35 },\r    { type: 'Giyim', value: 25 },\r    { type: 'Gıda', value: 20 },\r    { type: 'Kozmetik', value: 12 },\r    { type: 'Diğer', value: 8 },\r  ];\r  const customerGrowthData = [\r    { date: '2024-01', customers: 1200 },\r    { date: '2024-02', customers: 1450 },\r    { date: '2024-03', customers: 1680 },\r    { date: '2024-04', customers: 1920 },\r    { date: '2024-05', customers: 2150 },\r    { date: '2024-06', customers: 2380 },\r  ];\r  const topProducts = [\r    { \r      id: 1, \r      name: 'iPhone 15 Pro', \r      sales: 342, \r      revenue: 450000, \r      trend: 'up',\r      image: 'https://via.placeholder.com/40' \r    },\r    { \r      id: 2, \r      name: 'Samsung Galaxy S24', \r      sales: 285, \r      revenue: 320000, \r      trend: 'up',\r      image: 'https://via.placeholder.com/40' \r    },\r    { \r      id: 3, \r      name: 'MacBook Pro M3', \r      sales: 156, \r      revenue: 780000, \r      trend: 'down',\r      image: 'https://via.placeholder.com/40' \r    },\r    { \r      id: 4, \r      name: 'iPad Air', \r      sales: 198, \r      revenue: 180000, \r      trend: 'up',\r      image: 'https://via.placeholder.com/40' \r    },\r  ];\r  const recentActivities = [\r    {\r      time: '10:30',\r      type: 'success',\r      title: 'Yeni sipariş alındı',\r      description: '#SP2024-1567 - ₺3,450',\r      icon: <ShoppingCartOutlined />\r    },\r    {\r      time: '11:15',\r      type: 'info',\r      title: 'Yeni müşteri kaydı',\r      description: 'Ahmet Yılmaz katıldı',\r      icon: <UserOutlined />\r    },\r    {\r      time: '12:00',\r      type: 'warning',\r      title: 'Stok uyarısı',\r      description: 'iPhone 15 Pro stokta 5 adet kaldı',\r      icon: <WarningOutlined />\r    },\r    {\r      time: '14:30',\r      type: 'success',\r      title: 'Ödeme alındı',\r      description: 'Fatura #INV-2024-089 ödendi',\r      icon: <DollarOutlined />\r    },\r  ];\r  const lineConfig = {\r    data: revenueData,\r    xField: 'month',\r    yField: 'value',\r    seriesField: 'type',\r    smooth: true,\r    animation: {\r      appear: {\r        animation: 'path-in',\r        duration: 1000,\r      },\r    },\r    legend: {\r      position: 'top-right' as const,\r    },\r    color: ['#667eea', '#f59e0b'],\r  };\r  const pieConfig = {\r    data: categoryData,\r    angleField: 'value',\r    colorField: 'type',\r    radius: 0.8,\r    label: {\r      type: 'outer',\r      content: '{name} {percentage}',\r    },\r    interactions: [{ type: 'element-active' }],\r    animation: {\r      appear: {\r        animation: 'fade-in',\r        duration: 1000,\r      },\r    },\r  };\r  const areaConfig = {\r    data: customerGrowthData,\r    xField: 'date',\r    yField: 'customers',\r    smooth: true,\r    areaStyle: {\r      fill: 'l(270) 0:#ffffff 0.5:#667eea 1:#764ba2',\r    },\r    animation: {\r      appear: {\r        animation: 'wave-in',\r        duration: 1000,\r      },\r    },\r  };\r  return (\r    <div className=\"tenant-dashboard\">\r      <Card className=\"welcome-banner gradient-bg\">\r        <Row align=\"middle\">\r          <Col flex=\"1\">\r            <Space direction=\"vertical\" size={0}>\r              <Title level={3} style={{ color: 'white', margin: 0 }}>\r                Hoş Geldiniz! 👋\r              </Title>\r              <Paragraph style={{ color: 'rgba(255, 255, 255, 0.9)', margin: '8px 0' }}>\r                İşletmeniz bugün harika gidiyor. Satışlarınız geçen aya göre %24 arttı!\r              </Paragraph>\r              <Space>\r                <Button type=\"primary\" ghost icon={<PlusOutlined />} aria-label=\"plus outlined\">\r                  Yeni Sipariş\r                </Button>\r                <Button ghost style={{ color: 'white', borderColor: 'white' }} icon={<FileTextOutlined />} aria-label=\"file text outlined\">\r                  Raporları Görüntüle\r                </Button>\r              </Space>\r            </Space>\r          </Col>\r          <Col>\r            <div className=\"dashboard-illustration\">\r              <RocketOutlined style={{ fontSize: 80, color: 'rgba(255, 255, 255, 0.8)' }} />\r            </div>\r          </Col>\r        </Row>\r      </Card>\r      <Row gutter={[16, 16]} className=\"stats-row\">\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"stat-card stat-card-primary\" loading={loading}>\r            <Statistic\r              title=\"Toplam Gelir\"\r              value={155000}\r              precision={2}\r              prefix=\"₺\"\r              valueStyle={{ color: '#667eea' }}\r            />\r            <div className=\"stat-footer\">\r              <span className=\"stat-trend positive\">\r                <ArrowUpOutlined /> %24\r              </span>\r              <span className=\"stat-period\">Geçen aya göre</span>\r            </div>\r            <Progress \r              percent={75} \r              strokeColor={{ from: '#667eea', to: '#764ba2' }}\r              showInfo={false}\r              strokeWidth={4}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"stat-card stat-card-success\" loading={loading}>\r            <Statistic\r              title=\"Toplam Sipariş\"\r              value={342}\r              prefix={<ShoppingCartOutlined />}\r              valueStyle={{ color: '#10b981' }}\r            />\r            <div className=\"stat-footer\">\r              <span className=\"stat-trend positive\">\r                <ArrowUpOutlined /> %18\r              </span>\r              <span className=\"stat-period\">Geçen aya göre</span>\r            </div>\r            <Progress \r              percent={82} \r              strokeColor=\"#10b981\"\r              showInfo={false}\r              strokeWidth={4}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"stat-card stat-card-warning\" loading={loading}>\r            <Statistic\r              title=\"Aktif Müşteriler\"\r              value={2380}\r              prefix={<TeamOutlined />}\r              valueStyle={{ color: '#f59e0b' }}\r            />\r            <div className=\"stat-footer\">\r              <span className=\"stat-trend positive\">\r                <ArrowUpOutlined /> %32\r              </span>\r              <span className=\"stat-period\">Geçen aya göre</span>\r            </div>\r            <Progress \r              percent={65} \r              strokeColor=\"#f59e0b\"\r              showInfo={false}\r              strokeWidth={4}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"stat-card stat-card-danger\" loading={loading}>\r            <Statistic\r              title=\"Bekleyen Faturalar\"\r              value={28500}\r              precision={2}\r              prefix=\"₺\"\r              valueStyle={{ color: '#ef4444' }}\r            />\r            <div className=\"stat-footer\">\r              <span className=\"stat-trend negative\">\r                <ArrowDownOutlined /> %12\r              </span>\r              <span className=\"stat-period\">Geçen aya göre</span>\r            </div>\r            <Progress \r              percent={35} \r              strokeColor=\"#ef4444\"\r              showInfo={false}\r              strokeWidth={4}\r            />\r          </Card>\r        </Col>\r      </Row>\r      <Row gutter={[16, 16]}>\r        <Col xs={24} lg={16}>\r          <Card \r            title={\r              <Space>\r                <RiseOutlined />\r                <span>Gelir & Gider Analizi</span>\r              </Space>\r            }\r            extra={\r              <Select defaultValue=\"6months\" style={{ width: 120 }} aria-label=\"select field\">\r                <Select.Option value=\"7days\" aria-label=\"select field\">Son 7 Gün</Select.Option>\r                <Select.Option value=\"30days\" aria-label=\"select field\">Son 30 Gün</Select.Option>\r                <Select.Option value=\"6months\" aria-label=\"select field\">Son 6 Ay</Select.Option>\r                <Select.Option value=\"1year\" aria-label=\"select field\">Son 1 Yıl</Select.Option>\r              </Select>\r            }\r            loading={loading}\r          >\r            <Line {...lineConfig} height={300} />\r          </Card>\r        </Col>\r        <Col xs={24} lg={8}>\r          <Card \r            title={\r              <Space>\r                <PieChartOutlined />\r                <span>Kategori Dağılımı</span>\r              </Space>\r            }\r            loading={loading}\r          >\r            <Pie {...pieConfig} height={300} />\r          </Card>\r        </Col>\r      </Row>\r      <Row gutter={[16, 16]}>\r        <Col xs={24} lg={12}>\r          <Card \r            title={\r              <Space>\r                <TrophyOutlined style={{ color: '#fbbf24' }} />\r                <span>En Çok Satan Ürünler</span>\r              </Space>\r            }\r            extra={<Button type=\"link\">Tümünü Gör</Button>}\r            loading={loading}\r          >\r            <List\r              itemLayout=\"horizontal\"\r              dataSource={topProducts}\r              renderItem={(item, index) => (\r                <List.Item\r                  actions={[\r                    <Space>\r                      {item.trend === 'up' ? (\r                        <Tag color=\"success\" icon={<ArrowUpOutlined />}>Artış</Tag>\r                      ) : (\r                        <Tag color=\"error\" icon={<ArrowDownOutlined />}>Düşüş</Tag>\r                      )}\r                    </Space>\r                  ]}\r                >\r                  <List.Item.Meta\r                    avatar={\r                      <Badge count={index + 1} style={{ backgroundColor: index === 0 ? '#fbbf24' : '#667eea' }}>\r                        <Avatar src={item.image} size={48} />\r                      </Badge>\r                    }\r                    title={item.name}\r                    description={\r                      <Space>\r                        <Text type=\"secondary\">{item.sales} satış</Text>\r                        <Divider type=\"vertical\" />\r                        <Text strong>₺{item.revenue.toLocaleString('tr-TR')}</Text>\r                      </Space>\r                    }\r                  />\r                </List.Item>\r              )}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} lg={12}>\r          <Card \r            title={\r              <Space>\r                <ClockCircleOutlined />\r                <span>Son Aktiviteler</span>\r              </Space>\r            }\r            extra={\r              <Badge count={4} offset={[-10, 0]}>\r                <BellOutlined style={{ fontSize: 18 }} />\r              </Badge>\r            }\r            loading={loading}\r          >\r            <Timeline mode=\"left\">\r              {recentActivities.map((activity, index) => (\r                <Timeline.Item\r                  key={index}\r                  color={activity.type}\r                  dot={activity.icon}\r                >\r                  <div className=\"timeline-content\">\r                    <Space direction=\"vertical\" size={0}>\r                      <Space>\r                        <Text strong>{activity.title}</Text>\r                        <Text type=\"secondary\" style={{ fontSize: 12 }}>{activity.time}</Text>\r                      </Space>\r                      <Text type=\"secondary\">{activity.description}</Text>\r                    </Space>\r                  </div>\r                </Timeline.Item>\r              ))}\r            </Timeline>\r          </Card>\r        </Col>\r      </Row>\r      <Row gutter={[16, 16]}>\r        <Col xs={24}>\r          <Card \r            title={\r              <Space>\r                <TeamOutlined />\r                <span>Müşteri Büyümesi</span>\r                <Tag color=\"success\">+32%</Tag>\r              </Space>\r            }\r            extra={\r              <Space>\r                <Button icon={<DownloadOutlined />} aria-label=\"download outlined\">İndir</Button>\r                <Button type=\"primary\" icon={<EyeOutlined />} aria-label=\"eye outlined\">Detaylı Rapor</Button>\r              </Space>\r            }\r            loading={loading}\r          >\r            <Area {...areaConfig} height={250} />\r          </Card>\r        </Col>\r      </Row>\r      {/* Modül Kartları */}\r      <Card title=\"İşletme Modülleri\" style={{ marginBottom: 16 }}>\r        <Segmented\r          value={selectedModule}\r          onChange={setSelectedModule}\r          options={[\r            { value: 'overview', label: 'Genel Bakış' },\r            { value: 'crm', label: 'CRM' },\r            { value: 'erp', label: 'ERP' },\r            { value: 'accounting', label: 'Muhasebe' },\r            { value: 'hr', label: 'İK' },\r            { value: 'inventory', label: 'Stok' },\r          ]}\r          block\r          style={{ marginBottom: 24 }}\r        />\r        <Row gutter={[16, 16]}>\r          <Col xs={24} sm={12} lg={8}>\r            <Card \r              hoverable\r              className=\"module-card\"\r              style={{ \r                borderLeft: '4px solid #1890ff',\r                background: 'linear-gradient(135deg, #1890ff15 0%, #1890ff05 100%)' \r              }}\r              onClick={() => navigate('/app/tenant/crm')}\r            >\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                  <ContactsOutlined style={{ fontSize: 40, color: '#1890ff' }} />\r                  <Tag color=\"blue\">CRM</Tag>\r                </div>\r                <Title level={4}>Müşteri İlişkileri</Title>\r                <Text type=\"secondary\">Müşteri, firma ve satış yönetimi</Text>\r                <Divider style={{ margin: '12px 0' }} />\r                <Row gutter={16}>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Müşteriler\" \r                      value={2380} \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Fırsatlar\" \r                      value={45} \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                </Row>\r                <Button type=\"primary\" block icon={<ArrowRightOutlined />} aria-label=\"arrow right outlined\">\r                  CRM'e Git\r                </Button>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={24} sm={12} lg={8}>\r            <Card \r              hoverable\r              className=\"module-card\"\r              style={{ \r                borderLeft: '4px solid #52c41a',\r                background: 'linear-gradient(135deg, #52c41a15 0%, #52c41a05 100%)' \r              }}\r              onClick={() => navigate('/app/tenant/erp')}\r            >\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                  <BankOutlined style={{ fontSize: 40, color: '#52c41a' }} />\r                  <Tag color=\"green\">ERP</Tag>\r                </div>\r                <Title level={4}>Kurumsal Planlama</Title>\r                <Text type=\"secondary\">Üretim, proje ve kaynak yönetimi</Text>\r                <Divider style={{ margin: '12px 0' }} />\r                <Row gutter={16}>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Projeler\" \r                      value={12} \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Görevler\" \r                      value={156} \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                </Row>\r                <Button type=\"primary\" block icon={<ArrowRightOutlined />} aria-label=\"arrow right outlined\">\r                  ERP'ye Git\r                </Button>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={24} sm={12} lg={8}>\r            <Card \r              hoverable\r              className=\"module-card\"\r              style={{ \r                borderLeft: '4px solid #fa8c16',\r                background: 'linear-gradient(135deg, #fa8c1615 0%, #fa8c1605 100%)' \r              }}\r              onClick={() => navigate('/app/tenant/accounting')}\r            >\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                  <CalculatorOutlined style={{ fontSize: 40, color: '#fa8c16' }} />\r                  <Tag color=\"orange\">Muhasebe</Tag>\r                </div>\r                <Title level={4}>Finansal Yönetim</Title>\r                <Text type=\"secondary\">Fatura, tahsilat ve muhasebe</Text>\r                <Divider style={{ margin: '12px 0' }} />\r                <Row gutter={16}>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Faturalar\" \r                      value={342} \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Tahsilat\" \r                      value=\"89%\" \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                </Row>\r                <Button type=\"primary\" block icon={<ArrowRightOutlined />} aria-label=\"arrow right outlined\">\r                  Muhasebe'ye Git\r                </Button>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={24} sm={12} lg={8}>\r            <Card \r              hoverable\r              className=\"module-card\"\r              style={{ \r                borderLeft: '4px solid #722ed1',\r                background: 'linear-gradient(135deg, #722ed115 0%, #722ed105 100%)' \r              }}\r              onClick={() => navigate('/app/tenant/hr')}\r            >\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                  <IdcardOutlined style={{ fontSize: 40, color: '#722ed1' }} />\r                  <Tag color=\"purple\">İK</Tag>\r                </div>\r                <Title level={4}>İnsan Kaynakları</Title>\r                <Text type=\"secondary\">Personel ve özlük yönetimi</Text>\r                <Divider style={{ margin: '12px 0' }} />\r                <Row gutter={16}>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Personel\" \r                      value={48} \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Bu Ay İzin\" \r                      value={5} \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                </Row>\r                <Button type=\"primary\" block icon={<ArrowRightOutlined />} aria-label=\"arrow right outlined\">\r                  İK'ya Git\r                </Button>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={24} sm={12} lg={8}>\r            <Card \r              hoverable\r              className=\"module-card\"\r              style={{ \r                borderLeft: '4px solid #eb2f96',\r                background: 'linear-gradient(135deg, #eb2f9615 0%, #eb2f9605 100%)' \r              }}\r              onClick={() => navigate('/app/tenant/inventory')}\r            >\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                  <ContainerOutlined style={{ fontSize: 40, color: '#eb2f96' }} />\r                  <Tag color=\"magenta\">Stok</Tag>\r                </div>\r                <Title level={4}>Stok Yönetimi</Title>\r                <Text type=\"secondary\">Envanter ve depo yönetimi</Text>\r                <Divider style={{ margin: '12px 0' }} />\r                <Row gutter={16}>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Ürünler\" \r                      value={1853} \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Depolar\" \r                      value={3} \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                </Row>\r                <Button type=\"primary\" block icon={<ArrowRightOutlined />} aria-label=\"arrow right outlined\">\r                  Stok'a Git\r                </Button>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={24} sm={12} lg={8}>\r            <Card \r              hoverable\r              className=\"module-card\"\r              style={{ \r                borderLeft: '4px solid #13c2c2',\r                background: 'linear-gradient(135deg, #13c2c215 0%, #13c2c205 100%)' \r              }}\r            >\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                  <AppstoreOutlined style={{ fontSize: 40, color: '#13c2c2' }} />\r                  <Tag color=\"cyan\">Diğer</Tag>\r                </div>\r                <Title level={4}>Ek Modüller</Title>\r                <Text type=\"secondary\">E-ticaret, lojistik ve daha fazlası</Text>\r                <Divider style={{ margin: '12px 0' }} />\r                <Space wrap>\r                  <Button size=\"small\" icon={<ShopOutlined />} aria-label=\"shop outlined\">E-Ticaret</Button>\r                  <Button size=\"small\" icon={<TruckOutlined />} aria-label=\"truck outlined\">Lojistik</Button>\r                  <Button size=\"small\" icon={<ToolOutlined />} aria-label=\"tool outlined\">Üretim</Button>\r                </Space>\r                <Button type=\"default\" block icon={<SettingOutlined />} style={{ marginTop: 12 }} aria-label=\"setting outlined\">\r                  Tüm Modüller\r                </Button>\r              </Space>\r            </Card>\r          </Col>\r        </Row>\r      </Card>\r      {/* Hızlı İşlemler */}\r      <Card title=\"Hızlı İşlemler\" className=\"quick-actions-card\">\r        <Row gutter={[16, 16]}>\r          <Col xs={12} sm={6} md={4}>\r            <Card \r              hoverable \r              className=\"action-card\"\r              onClick={() => navigate('/app/tenant/invoices/new')}\r            >\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <FileTextOutlined style={{ fontSize: 32, color: '#667eea' }} />\r                <Text>Yeni Fatura</Text>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={12} sm={6} md={4}>\r            <Card \r              hoverable \r              className=\"action-card\"\r              onClick={() => navigate('/app/tenant/inventory/products/new')}\r            >\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <ShoppingCartOutlined style={{ fontSize: 32, color: '#10b981' }} />\r                <Text>Ürün Ekle</Text>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={12} sm={6} md={4}>\r            <Card \r              hoverable \r              className=\"action-card\"\r              onClick={() => navigate('/app/tenant/crm/customers/new')}\r            >\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <UserOutlined style={{ fontSize: 32, color: '#f59e0b' }} />\r                <Text>Müşteri Ekle</Text>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={12} sm={6} md={4}>\r            <Card \r              hoverable \r              className=\"action-card\"\r              onClick={() => navigate('/app/tenant/hr/employees/new')}\r            >\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <IdcardOutlined style={{ fontSize: 32, color: '#722ed1' }} />\r                <Text>Personel Ekle</Text>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={12} sm={6} md={4}>\r            <Card \r              hoverable \r              className=\"action-card\"\r              onClick={() => navigate('/app/tenant/accounting/expenses/new')}\r            >\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <DollarOutlined style={{ fontSize: 32, color: '#fa8c16' }} />\r                <Text>Gider Ekle</Text>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={12} sm={6} md={4}>\r            <Card \r              hoverable \r              className=\"action-card\"\r              onClick={() => navigate('/app/tenant/reports')}\r            >\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <BarChartOutlined style={{ fontSize: 32, color: '#ef4444' }} />\r                <Text>Raporlar</Text>\r              </Space>\r            </Card>\r          </Col>\r        </Row>\r      </Card>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/dashboard/pages/TenantDashboard/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React from 'react';\rimport { useNavigate } from 'react-router-dom';\rimport { Button, Result } from 'antd';\rimport { HomeOutlined, UserAddOutlined } from '@ant-design/icons';\rimport { getMainDomainUrl } from '@/utils/tenant';\rinterface InvalidTenantPageProps {\r  tenantSlug?: string;\r}\rexport const InvalidTenantPage: React.FC<InvalidTenantPageProps> = ({ tenantSlug }) => {\r  const navigate = useNavigate();\r  const handleGoHome = () => {\r    window.location.href = getMainDomainUrl();\r  };\r  const handleRegister = () => {\r    window.location.href = `${getMainDomainUrl()}/register`;\r  };\r  return (\r    <div style={{\r      minHeight: '100vh',\r      display: 'flex',\r      alignItems: 'center',\r      justifyContent: 'center',\r      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r      padding: '20px'\r    }}>\r      <Result\r        status=\"404\"\r        title=\"Firma Bulunamadı\"\r        subTitle={\r          <>\r            <div style={{ marginBottom: '16px' }}>\r              <span style={{\r                background: '#fef2e5',\r                color: '#d97706',\r                padding: '4px 8px',\r                borderRadius: '4px',\r                fontFamily: 'monospace',\r                fontWeight: 600\r              }}>\r                {tenantSlug || window.location.hostname.split('.')[0]}.stoocker.app\r              </span>\r              {' '}adresi için kayıtlı bir firma bulunamadı.\r            </div>\r            <div style={{ color: '#718096', fontSize: '14px' }}>\r              Eğer bu sizin firmanızsa, lütfen sistem yöneticinizle iletişime geçin veya doğru adresi kullandığınızdan emin olun.\r            </div>\r          </>\r        }\r        extra={[\r          <Button \r            type=\"primary\" \r            key=\"home\"\r            icon={<HomeOutlined />}\r            onClick={handleGoHome}\r            size=\"large\"\r            style={{\r              background: '#667eea',\r              borderColor: '#667eea'\r            }}\r           aria-label=\"home outlined\">\r            Ana Sayfa\r          </Button>,\r          <Button \r            key=\"register\"\r            icon={<UserAddOutlined />}\r            onClick={handleRegister}\r            size=\"large\"\r           aria-label=\"user add outlined\">\r            Yeni Firma Kayıt\r          </Button>,\r        ]}\r        style={{\r          background: 'white',\r          borderRadius: '12px',\r          padding: '48px',\r          maxWidth: '500px',\r          boxShadow: '0 20px 60px rgba(0,0,0,0.3)',\r        }}\r      />\r    </div>\r  );\r};\rexport default InvalidTenantPage;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/error/pages/InvalidTenantPage.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React from 'react';\rimport { useNavigate } from 'react-router-dom';\rimport { Result, Button, Space } from 'antd';\rimport { HomeOutlined, ArrowLeftOutlined } from '@ant-design/icons';\rimport './style.css';\rexport const NotFoundPage: React.FC = () => {\r  const navigate = useNavigate();\r  return (\r    <div className=\"not-found-container\">\r      <div className=\"not-found-content\">\r        <Result\r          status=\"404\"\r          title=\"404\"\r          subTitle=\"Üzgünüz, aradığınız sayfa bulunamadı.\"\r          extra={\r            <Space>\r              <Button\r                type=\"primary\"\r                icon={<HomeOutlined />}\r                onClick={() = aria-label=\"home outlined\"> navigate('/')}\r                size=\"large\"\r              >\r                Ana Sayfa\r              </Button>\r              <Button\r                icon={<ArrowLeftOutlined />}\r                onClick={() = aria-label=\"arrow left outlined\"> navigate(-1)}\r                size=\"large\"\r              >\r                Geri Dön\r              </Button>\r            </Space>\r          }\r        />\r        <div className=\"not-found-animation\">\r          <div className=\"floating-icon\">🔍</div>\r        </div>\r      </div>\r    </div>\r  );\r};\rexport default NotFoundPage;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/error/pages/NotFoundPage/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport {\r  Card,\r  Form,\r  Input,\r  Button,\r  Select,\r  DatePicker,\r  Table,\r  Space,\r  Row,\r  Col,\r  InputNumber,\r  Divider,\r  message,\r  AutoComplete,\r  Typography,\r  Alert,\r  Statistic,\r  Modal,\r  Avatar\r} from 'antd';\rimport {\r  PlusOutlined,\r  DeleteOutlined,\r  SaveOutlined,\r  SendOutlined,\r  CalculatorOutlined,\r  UserOutlined,\r  ShoppingCartOutlined,\r  FileTextOutlined,\r  CalendarOutlined\r} from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport dayjs from 'dayjs';\rimport invoiceService, { CreateInvoiceDto, CreateInvoiceItemDto } from '../../../../services/invoiceService';\rimport './style.css';\rconst { TextArea } = Input;\rconst { Option } = Select;\rconst { Title, Text } = Typography;\r// Mock müşteri verisi\rconst mockCustomers = [\r  { id: '1', name: 'ABC Teknoloji A.Ş.', email: 'info@abc.com', phone: '0212 555 0001', taxNumber: '1234567890' },\r  { id: '2', name: 'XYZ Yazılım Ltd.', email: 'contact@xyz.com', phone: '0216 555 0002', taxNumber: '0987654321' },\r  { id: '3', name: 'Demo Şirketi', email: 'demo@demo.com', phone: '0312 555 0003', taxNumber: '1122334455' }\r];\r// Mock ürün verisi\rconst mockProducts = [\r  { id: '1', name: 'Yazılım Lisansı', price: 5000, description: 'Yıllık yazılım lisansı' },\r  { id: '2', name: 'Danışmanlık Hizmeti', price: 1500, description: 'Saatlik danışmanlık ücreti' },\r  { id: '3', name: 'Eğitim Paketi', price: 10000, description: '3 günlük eğitim paketi' },\r  { id: '4', name: 'Destek Hizmeti', price: 2000, description: 'Aylık teknik destek' }\r];\rconst CreateInvoice: React.FC = () => {\r  const [form] = Form.useForm();\r  const navigate = useNavigate();\r  const [loading, setLoading] = useState(false);\r  const [items, setItems] = useState<CreateInvoiceItemDto[]>([]);\r  const [selectedCustomer, setSelectedCustomer] = useState<any>(null);\r  const [totals, setTotals] = useState({\r    subTotal: 0,\r    taxAmount: 0,\r    discountAmount: 0,\r    totalAmount: 0\r  });\r  const [showProductModal, setShowProductModal] = useState(false);\r  const calculateTotals = (invoiceItems: CreateInvoiceItemDto[]) => {\r    let subTotal = 0;\r    let taxAmount = 0;\r    let discountAmount = 0;\r    invoiceItems.forEach(item => {\r      const itemTotal = item.quantity * item.unitPrice;\r      const itemDiscount = itemTotal * ((item.discountPercentage || 0) / 100);\r      const itemAfterDiscount = itemTotal - itemDiscount;\r      const itemTax = itemAfterDiscount * ((item.taxRate || 0) / 100);\r      subTotal += itemTotal;\r      discountAmount += itemDiscount;\r      taxAmount += itemTax;\r    });\r    const totalAmount = subTotal - discountAmount + taxAmount;\r    setTotals({\r      subTotal,\r      taxAmount,\r      discountAmount,\r      totalAmount\r    });\r  };\r  const handleAddItem = () => {\r    setShowProductModal(true);\r  };\r  const handleProductSelect = (product: any) => {\r    const newItem: CreateInvoiceItemDto = {\r      productId: product.id,\r      productName: product.name,\r      description: product.description,\r      quantity: 1,\r      unitPrice: product.price,\r      discountPercentage: 0,\r      taxRate: 18 // Default KDV\r    };\r    const updatedItems = [...items, newItem];\r    setItems(updatedItems);\r    calculateTotals(updatedItems);\r    setShowProductModal(false);\r  };\r  const handleItemChange = (index: number, field: string, value: any) => {\r    const updatedItems = [...items];\r    updatedItems[index] = {\r      ...updatedItems[index],\r      [field]: value\r    };\r    setItems(updatedItems);\r    calculateTotals(updatedItems);\r  };\r  const handleRemoveItem = (index: number) => {\r    const updatedItems = items.filter((_, i) => i !== index);\r    setItems(updatedItems);\r    calculateTotals(updatedItems);\r  };\r  const handleSubmit = async (values: any) => {\r    if (items.length === 0) {\r      message.warning('En az bir ürün/hizmet eklemelisiniz');\r      return;\r    }\r    try {\r      setLoading(true);\r      const invoiceData: CreateInvoiceDto = {\r        ...values,\r        invoiceDate: values.invoiceDate.toISOString(),\r        dueDate: values.dueDate.toISOString(),\r        items\r      };\r      const result = await invoiceService.createInvoice(invoiceData);\r      message.success('Fatura başarıyla oluşturuldu');\r      if (values.sendImmediately) {\r        await invoiceService.sendInvoice(result.id);\r        message.success('Fatura müşteriye gönderildi');\r      }\r      navigate('/invoices');\r    } catch (error) {\r      message.error('Fatura oluşturulurken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const columns = [\r    {\r      title: 'Ürün/Hizmet',\r      dataIndex: 'productName',\r      key: 'productName',\r      width: '25%'\r    },\r    {\r      title: 'Açıklama',\r      dataIndex: 'description',\r      key: 'description',\r      width: '20%',\r      render: (_: any, record: any, index: number) => (\r        <Input\r          value={record.description}\r          onChange={(e) = aria-label=\"input field\"> handleItemChange(index, 'description', e.target.value)}\r          placeholder=\"Açıklama...\"\r        />\r      )\r    },\r    {\r      title: 'Miktar',\r      dataIndex: 'quantity',\r      key: 'quantity',\r      width: '10%',\r      render: (_: any, record: any, index: number) => (\r        <InputNumber\r          min={0.01}\r          value={record.quantity}\r          onChange={(value) = aria-label=\"input field\"> handleItemChange(index, 'quantity', value)}\r        />\r      )\r    },\r    {\r      title: 'Birim Fiyat',\r      dataIndex: 'unitPrice',\r      key: 'unitPrice',\r      width: '12%',\r      render: (_: any, record: any, index: number) => (\r        <InputNumber\r          min={0}\r          value={record.unitPrice}\r          onChange={(value) = aria-label=\"input field\"> handleItemChange(index, 'unitPrice', value)}\r          formatter={(value) => `₺ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r        />\r      )\r    },\r    {\r      title: 'İndirim %',\r      dataIndex: 'discountPercentage',\r      key: 'discountPercentage',\r      width: '10%',\r      render: (_: any, record: any, index: number) => (\r        <InputNumber\r          min={0}\r          max={100}\r          value={record.discountPercentage}\r          onChange={(value) = aria-label=\"input field\"> handleItemChange(index, 'discountPercentage', value)}\r          formatter={(value) => `${value}%`}\r        />\r      )\r    },\r    {\r      title: 'KDV %',\r      dataIndex: 'taxRate',\r      key: 'taxRate',\r      width: '10%',\r      render: (_: any, record: any, index: number) => (\r        <Select\r          value={record.taxRate}\r          onChange={(value) = aria-label=\"select field\"> handleItemChange(index, 'taxRate', value)}\r          style={{ width: '100%' }}\r        >\r          <Option value={0}>%0</Option>\r          <Option value={1}>%1</Option>\r          <Option value={8}>%8</Option>\r          <Option value={18}>%18</Option>\r        </Select>\r      )\r    },\r    {\r      title: 'Toplam',\r      key: 'total',\r      width: '10%',\r      align: 'right' as const,\r      render: (_: any, record: any) => {\r        const total = record.quantity * record.unitPrice;\r        const discount = total * ((record.discountPercentage || 0) / 100);\r        const afterDiscount = total - discount;\r        const tax = afterDiscount * ((record.taxRate || 0) / 100);\r        return <Text strong>₺{(afterDiscount + tax).toFixed(2)}</Text>;\r      }\r    },\r    {\r      title: '',\r      key: 'action',\r      width: '3%',\r      render: (_: any, __: any, index: number) => (\r        <Button\r          type=\"text\"\r          danger\r          icon={<DeleteOutlined />}\r          onClick={() = aria-label=\"delete outlined\"> handleRemoveItem(index)}\r        />\r      )\r    }\r  ];\r  return (\r    <div className=\"create-invoice\">\r      <Form\r        form={form}\r        layout=\"vertical\"\r        onFinish={handleSubmit}\r        initialValues={{\r          currency: 'TRY',\r          invoiceDate: dayjs(),\r          dueDate: dayjs().add(30, 'days'),\r          invoiceNumber: `INV-${new Date().getFullYear()}-${String(Math.floor(Math.random() * 10000)).padStart(4, '0')}`\r        }}\r      >\r        <Row gutter={24}>\r          {/* Sol Panel - Fatura Bilgileri */}\r          <Col xs={24} lg={16}>\r            <Card\r              title={\r                <Space>\r                  <FileTextOutlined />\r                  <span>Yeni Fatura Oluştur</span>\r                </Space>\r              }\r              className=\"invoice-form-card\"\r            >\r              {/* Fatura Temel Bilgileri */}\r              <Row gutter={16}>\r                <Col xs={24} md={8}>\r                  <Form.Item\r                    name=\"invoiceNumber\"\r                    label=\"Fatura No\"\r                    rules={[{ required: true, message: 'Fatura no zorunludur' }]}\r                  >\r                    <Input prefix={<FileTextOutlined / aria-label=\"input field\">} />\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={8}>\r                  <Form.Item\r                    name=\"invoiceDate\"\r                    label=\"Fatura Tarihi\"\r                    rules={[{ required: true, message: 'Fatura tarihi zorunludur' }]}\r                  >\r                    <DatePicker style={{ width: '100%' }} format=\"DD/MM/YYYY\" />\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={8}>\r                  <Form.Item\r                    name=\"dueDate\"\r                    label=\"Vade Tarihi\"\r                    rules={[{ required: true, message: 'Vade tarihi zorunludur' }]}\r                  >\r                    <DatePicker style={{ width: '100%' }} format=\"DD/MM/YYYY\" />\r                  </Form.Item>\r                </Col>\r              </Row>\r              {/* Müşteri Seçimi */}\r              <Divider>Müşteri Bilgileri</Divider>\r              <Row gutter={16}>\r                <Col xs={24}>\r                  <Form.Item\r                    name=\"customerId\"\r                    label=\"Müşteri\"\r                    rules={[{ required: true, message: 'Müşteri seçimi zorunludur' }]}\r                  >\r                    <Select\r                      showSearch\r                      placeholder=\"Müşteri seçin veya arayın\"\r                      optionFilterProp=\"children\"\r                      onChange={(value) = aria-label=\"select field\"> {\r                        const customer = mockCustomers.find(c => c.id === value);\r                        setSelectedCustomer(customer);\r                      }}\r                    >\r                      {mockCustomers.map(customer => (\r                        <Option key={customer.id} value={customer.id}>\r                          <Space>\r                            <Avatar icon={<UserOutlined />} size=\"small\" />\r                            <div>\r                              <div>{customer.name}</div>\r                              <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                                {customer.email} | {customer.phone}\r                              </Text>\r                            </div>\r                          </Space>\r                        </Option>\r                      ))}\r                    </Select>\r                  </Form.Item>\r                </Col>\r              </Row>\r              {selectedCustomer && (\r                <Alert\r                  message=\"Seçili Müşteri\"\r                  description={\r                    <Space direction=\"vertical\" size=\"small\">\r                      <Text>{selectedCustomer.name}</Text>\r                      <Text type=\"secondary\">{selectedCustomer.email} | {selectedCustomer.phone}</Text>\r                      <Text type=\"secondary\">Vergi No: {selectedCustomer.taxNumber}</Text>\r                    </Space>\r                  }\r                  type=\"info\"\r                  showIcon\r                  icon={<UserOutlined />}\r                  style={{ marginBottom: 16 }}\r                />\r              )}\r              {/* Ürün/Hizmetler */}\r              <Divider>Ürün/Hizmetler</Divider>\r              <Button\r                type=\"dashed\"\r                onClick={handleAddItem}\r                icon={<PlusOutlined />}\r                style={{ width: '100%', marginBottom: 16 }}\r               aria-label=\"plus outlined\">\r                Ürün/Hizmet Ekle\r              </Button>\r              <Table\r                dataSource={items}\r                columns={columns}\r                pagination={false}\r                rowKey={(_, index) => index?.toString() || '0'}\r                locale={{ emptyText: 'Henüz ürün/hizmet eklenmedi' }}\r              />\r              {/* Notlar */}\r              <Divider>Ek Bilgiler</Divider>\r              <Row gutter={16}>\r                <Col xs={24} md={12}>\r                  <Form.Item name=\"notes\" label=\"Notlar\">\r                    <TextArea rows={4} placeholder=\"Fatura ile ilgili notlar...\" />\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item name=\"terms\" label=\"Şartlar ve Koşullar\">\r                    <TextArea rows={4} placeholder=\"Ödeme şartları, teslimat koşulları vb...\" />\r                  </Form.Item>\r                </Col>\r              </Row>\r            </Card>\r          </Col>\r          {/* Sağ Panel - Özet ve İşlemler */}\r          <Col xs={24} lg={8}>\r            <Card className=\"invoice-summary-card\">\r              <Title level={4}>\r                <CalculatorOutlined /> Fatura Özeti\r              </Title>\r              <div className=\"summary-items\">\r                <div className=\"summary-item\">\r                  <Text>Ara Toplam:</Text>\r                  <Text strong>{invoiceService.formatCurrency(totals.subTotal)}</Text>\r                </div>\r                <div className=\"summary-item\">\r                  <Text>İndirim:</Text>\r                  <Text type=\"danger\">-{invoiceService.formatCurrency(totals.discountAmount)}</Text>\r                </div>\r                <div className=\"summary-item\">\r                  <Text>KDV:</Text>\r                  <Text>{invoiceService.formatCurrency(totals.taxAmount)}</Text>\r                </div>\r                <Divider />\r                <div className=\"summary-item total\">\r                  <Title level={5}>Genel Toplam:</Title>\r                  <Title level={4} type=\"success\">\r                    {invoiceService.formatCurrency(totals.totalAmount)}\r                  </Title>\r                </div>\r              </div>\r              <Divider />\r              <Form.Item name=\"currency\" label=\"Para Birimi\">\r                <Select aria-label=\"select field\">\r                  <Option value=\"TRY\">TRY - Türk Lirası</Option>\r                  <Option value=\"USD\">USD - Amerikan Doları</Option>\r                  <Option value=\"EUR\">EUR - Euro</Option>\r                </Select>\r              </Form.Item>\r              <Form.Item name=\"sendImmediately\" valuePropName=\"checked\">\r                <Space>\r                  <input type=\"checkbox\" / aria-label=\"input field\">\r                  <Text>Oluşturduktan sonra hemen gönder</Text>\r                </Space>\r              </Form.Item>\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <Button\r                  type=\"primary\"\r                  htmlType=\"submit\"\r                  loading={loading}\r                  icon={<SaveOutlined />}\r                  size=\"large\"\r                  block\r                 aria-label=\"save outlined\">\r                  Faturayı Oluştur\r                </Button>\r                <Button\r                  onClick={() => navigate('/invoices')}\r                  size=\"large\"\r                  block\r                >\r                  İptal\r                </Button>\r              </Space>\r            </Card>\r            {/* Hızlı İstatistikler */}\r            <Card style={{ marginTop: 16 }}>\r              <Title level={5}>Bu Ay</Title>\r              <Row gutter={16}>\r                <Col span={12}>\r                  <Statistic\r                    title=\"Kesilen Fatura\"\r                    value={23}\r                    prefix={<FileTextOutlined />}\r                  />\r                </Col>\r                <Col span={12}>\r                  <Statistic\r                    title=\"Toplam Tutar\"\r                    value={125430}\r                    prefix=\"₺\"\r                  />\r                </Col>\r              </Row>\r            </Card>\r          </Col>\r        </Row>\r      </Form>\r      {/* Ürün Seçme Modal */}\r      <Modal\r        title=\"Ürün/Hizmet Seç\"\r        visible={showProductModal}\r        onCancel={() => setShowProductModal(false)}\r        footer={null}\r        width={600}\r      >\r        <div className=\"product-grid\">\r          {mockProducts.map(product => (\r            <Card\r              key={product.id}\r              hoverable\r              onClick={() => handleProductSelect(product)}\r              className=\"product-card\"\r            >\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <Space>\r                  <ShoppingCartOutlined />\r                  <Text strong>{product.name}</Text>\r                </Space>\r                <Text type=\"secondary\">{product.description}</Text>\r                <Text type=\"success\" strong>\r                  {invoiceService.formatCurrency(product.price)}\r                </Text>\r              </Space>\r            </Card>\r          ))}\r        </div>\r        <Divider />\r        <Button\r          type=\"dashed\"\r          icon={<PlusOutlined />}\r          block\r          onClick={() = aria-label=\"plus outlined\"> {\r            message.info('Yeni ürün ekleme özelliği yakında');\r            setShowProductModal(false);\r          }}\r        >\r          Yeni Ürün Ekle\r        </Button>\r      </Modal>\r    </div>\r  );\r};\rexport default CreateInvoice;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/invoices/pages/CreateInvoice/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { useParams, useNavigate } from 'react-router-dom';\rimport {\r  PageHeader,\r  ProCard,\r  ProDescriptions,\r  ProTable,\r} from '@ant-design/pro-components';\rimport {\r  Card,\r  Row,\r  Col,\r  Button,\r  Space,\r  Tag,\r  Descriptions,\r  Table,\r  Statistic,\r  Typography,\r  Timeline,\r  Divider,\r  Modal,\r  message,\r  Spin,\r  Result,\r  Avatar,\r  Dropdown,\r  Badge,\r  Tooltip,\r  Alert,\r} from 'antd';\rimport {\r  PrinterOutlined,\r  DownloadOutlined,\r  MailOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  CheckCircleOutlined,\r  ClockCircleOutlined,\r  CloseCircleOutlined,\r  DollarOutlined,\r  CalendarOutlined,\r  UserOutlined,\r  PhoneOutlined,\r  EnvironmentOutlined,\r  CopyOutlined,\r  ShareAltOutlined,\r  FilePdfOutlined,\r  FileExcelOutlined,\r  MoreOutlined,\r  ArrowLeftOutlined,\r  ExclamationCircleOutlined,\r} from '@ant-design/icons';\rimport { formatCurrency, formatDate } from '@/shared/utils/formatters';\rimport invoiceService, { Invoice, InvoiceItem } from '@/services/invoiceService';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rexport const InvoiceDetail: React.FC = () => {\r  const { id } = useParams<{ id: string }>();\r  const navigate = useNavigate();\r  const [invoice, setInvoice] = useState<Invoice | null>(null);\r  const [loading, setLoading] = useState(true);\r  const [sendModalVisible, setSendModalVisible] = useState(false);\r  const [deleteModalVisible, setDeleteModalVisible] = useState(false);\r  useEffect(() => {\r    if (id) {\r      fetchInvoiceDetail();\r    }\r  }, [id]);\r  const fetchInvoiceDetail = async () => {\r    try {\r      setLoading(true);\r      // Gerçek API çağrısı yapılacak\r      // const response = await invoiceService.getInvoiceById(id!);\r      // setInvoice(response.data);\r      // Mock data\r      const mockInvoice: Invoice = {\r        id: id!,\r        invoiceNumber: 'INV-2024-001',\r        customerId: '1',\r        customerName: 'ABC Teknoloji A.Ş.',\r        customerEmail: 'muhasebe@abcteknoloji.com',\r        customerPhone: '+90 212 555 0100',\r        customerAddress: 'Maslak Mah. Teknoloji Cad. No:15\\nSarıyer/İstanbul',\r        customerTaxNumber: '1234567890',\r        customerTaxOffice: 'Sarıyer',\r        invoiceDate: '2024-01-15T00:00:00',\r        dueDate: '2024-02-15T00:00:00',\r        subTotal: 10000,\r        taxAmount: 1800,\r        discountAmount: 500,\r        totalAmount: 11300,\r        currency: 'TRY',\r        status: 'Paid',\r        paidDate: '2024-02-10T00:00:00',\r        paymentMethod: 'BankTransfer',\r        notes: 'Ödeme IBAN: TR12 0001 2345 6789 0123 4567 89',\r        items: [\r          {\r            id: '1',\r            productId: '1',\r            productName: 'Yazılım Lisansı - Pro',\r            description: 'Yıllık yazılım lisansı',\r            quantity: 2,\r            unitPrice: 3000,\r            taxRate: 18,\r            discountRate: 5,\r            totalPrice: 5700,\r          },\r          {\r            id: '2',\r            productId: '2',\r            productName: 'Destek Paketi',\r            description: '7/24 teknik destek hizmeti',\r            quantity: 1,\r            unitPrice: 4000,\r            taxRate: 18,\r            discountRate: 0,\r            totalPrice: 4720,\r          },\r        ],\r        createdAt: '2024-01-15T10:30:00',\r        createdBy: 'Ahmet Yılmaz',\r        updatedAt: '2024-02-10T14:20:00',\r        updatedBy: 'Mehmet Demir',\r      };\r      setInvoice(mockInvoice);\r    } catch (error) {\r      message.error('Fatura detayları yüklenemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handlePrint = () => {\r    window.print();\r  };\r  const handleDownloadPDF = async () => {\r    try {\r      message.loading('PDF oluşturuluyor...');\r      // await invoiceService.downloadInvoicePDF(id!);\r      setTimeout(() => {\r        message.success('PDF başarıyla indirildi');\r      }, 1500);\r    } catch (error) {\r      message.error('PDF indirilemedi');\r    }\r  };\r  const handleSendEmail = async () => {\r    setSendModalVisible(true);\r  };\r  const handleEdit = () => {\r    navigate(`/app/${id}/invoices/${id}/edit`);\r  };\r  const handleDelete = async () => {\r    try {\r      // await invoiceService.deleteInvoice(id!);\r      message.success('Fatura başarıyla silindi');\r      navigate(-1);\r    } catch (error) {\r      message.error('Fatura silinemedi');\r    }\r  };\r  const handleDuplicate = () => {\r    message.info('Fatura kopyalandı');\r    navigate('/app/tenant/invoices/new');\r  };\r  const handleMarkAsPaid = async () => {\r    try {\r      message.success('Fatura ödendi olarak işaretlendi');\r      fetchInvoiceDetail();\r    } catch (error) {\r      message.error('İşlem başarısız');\r    }\r  };\r  const getStatusColor = (status: string) => {\r    const statusColors: Record<string, string> = {\r      Draft: 'default',\r      Sent: 'processing',\r      Paid: 'success',\r      Overdue: 'error',\r      Cancelled: 'warning',\r      PartiallyPaid: 'warning',\r    };\r    return statusColors[status] || 'default';\r  };\r  const getStatusIcon = (status: string) => {\r    const statusIcons: Record<string, React.ReactNode> = {\r      Draft: <EditOutlined />,\r      Sent: <ClockCircleOutlined />,\r      Paid: <CheckCircleOutlined />,\r      Overdue: <ExclamationCircleOutlined />,\r      Cancelled: <CloseCircleOutlined />,\r    };\r    return statusIcons[status] || null;\r  };\r  const moreActions = [\r    {\r      key: 'duplicate',\r      label: 'Kopyala',\r      icon: <CopyOutlined />,\r      onClick: handleDuplicate,\r    },\r    {\r      key: 'share',\r      label: 'Paylaş',\r      icon: <ShareAltOutlined />,\r    },\r    {\r      key: 'export-excel',\r      label: 'Excel Olarak İndir',\r      icon: <FileExcelOutlined />,\r    },\r    {\r      type: 'divider',\r    },\r    {\r      key: 'delete',\r      label: 'Sil',\r      icon: <DeleteOutlined />,\r      danger: true,\r      onClick: () => setDeleteModalVisible(true),\r    },\r  ];\r  const itemColumns = [\r    {\r      title: '#',\r      dataIndex: 'index',\r      key: 'index',\r      width: 50,\r      render: (_: any, __: any, index: number) => index + 1,\r    },\r    {\r      title: 'Ürün/Hizmet',\r      dataIndex: 'productName',\r      key: 'productName',\r      render: (text: string, record: InvoiceItem) => (\r        <div>\r          <Text strong>{text}</Text>\r          {record.description && (\r            <div>\r              <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                {record.description}\r              </Text>\r            </div>\r          )}\r        </div>\r      ),\r    },\r    {\r      title: 'Miktar',\r      dataIndex: 'quantity',\r      key: 'quantity',\r      width: 100,\r      align: 'center' as const,\r    },\r    {\r      title: 'Birim Fiyat',\r      dataIndex: 'unitPrice',\r      key: 'unitPrice',\r      width: 120,\r      align: 'right' as const,\r      render: (value: number) => formatCurrency(value),\r    },\r    {\r      title: 'İndirim %',\r      dataIndex: 'discountRate',\r      key: 'discountRate',\r      width: 100,\r      align: 'center' as const,\r      render: (value: number) => (value > 0 ? `%${value}` : '-'),\r    },\r    {\r      title: 'KDV %',\r      dataIndex: 'taxRate',\r      key: 'taxRate',\r      width: 100,\r      align: 'center' as const,\r      render: (value: number) => `%${value}`,\r    },\r    {\r      title: 'Toplam',\r      dataIndex: 'totalPrice',\r      key: 'totalPrice',\r      width: 150,\r      align: 'right' as const,\r      render: (value: number) => <Text strong>{formatCurrency(value)}</Text>,\r    },\r  ];\r  if (loading) {\r    return (\r      <div className=\"invoice-detail-loading\">\r        <Spin size=\"large\" />\r      </div>\r    );\r  }\r  if (!invoice) {\r    return (\r      <Result\r        status=\"404\"\r        title=\"Fatura Bulunamadı\"\r        subTitle=\"Aradığınız fatura bulunamadı veya silinmiş olabilir.\"\r        extra={\r          <Button type=\"primary\" onClick={() => navigate(-1)}>\r            Geri Dön\r          </Button>\r        }\r      />\r    );\r  }\r  return (\r    <div className=\"invoice-detail-page\">\r      <PageHeader\r        ghost={false}\r        onBack={() => navigate(-1)}\r        title={`Fatura #${invoice.invoiceNumber}`}\r        tags={\r          <Tag\r            color={getStatusColor(invoice.status)}\r            icon={getStatusIcon(invoice.status)}\r          >\r            {invoice.status === 'Paid' ? 'Ödendi' :\r             invoice.status === 'Overdue' ? 'Gecikmiş' :\r             invoice.status === 'Sent' ? 'Gönderildi' :\r             invoice.status === 'Draft' ? 'Taslak' :\r             invoice.status === 'Cancelled' ? 'İptal' : invoice.status}\r          </Tag>\r        }\r        extra={[\r          <Button key=\"print\" icon={<PrinterOutlined />} onClick={handlePrint} aria-label=\"printer outlined\">\r            Yazdır\r          </Button>,\r          <Button\r            key=\"download\"\r            icon={<FilePdfOutlined />}\r            onClick={handleDownloadPDF}\r           aria-label=\"file pdf outlined\">\r            PDF İndir\r          </Button>,\r          <Button\r            key=\"send\"\r            type=\"primary\"\r            icon={<MailOutlined />}\r            onClick={handleSendEmail}\r           aria-label=\"mail outlined\">\r            Email Gönder\r          </Button>,\r          <Button key=\"edit\" icon={<EditOutlined />} onClick={handleEdit} aria-label=\"edit outlined\">\r            Düzenle\r          </Button>,\r          <Dropdown\r            key=\"more\"\r            menu={{ items: moreActions }}\r            placement=\"bottomRight\"\r          >\r            <Button icon={<MoreOutlined />} / aria-label=\"more outlined\">\r          </Dropdown>,\r        ]}\r      />\r      <div className=\"invoice-detail-content\">\r        <Row gutter={[24, 24]}>\r          <Col xs={24} lg={16}>\r            <Card className=\"invoice-main-card\">\r              {/* Header */}\r              <div className=\"invoice-header\">\r                <div className=\"invoice-logo\">\r                  <Title level={3}>STOCKER</Title>\r                  <Text type=\"secondary\">Profesyonel Fatura</Text>\r                </div>\r                <div className=\"invoice-header-info\">\r                  <Title level={2} style={{ margin: 0 }}>\r                    FATURA\r                  </Title>\r                  <Text strong style={{ fontSize: 16 }}>\r                    #{invoice.invoiceNumber}\r                  </Text>\r                </div>\r              </div>\r              <Divider />\r              {/* Company and Customer Info */}\r              <Row gutter={48}>\r                <Col span={12}>\r                  <div className=\"info-section\">\r                    <Text type=\"secondary\">Faturayı Kesen:</Text>\r                    <Title level={5}>Stocker Yazılım A.Ş.</Title>\r                    <Paragraph>\r                      Teknoloji Mah. İnovasyon Cad. No:42<br />\r                      Şişli/İstanbul<br />\r                      Tel: +90 212 555 0200<br />\r                      Email: fatura@stocker.com\r                    </Paragraph>\r                  </div>\r                </Col>\r                <Col span={12}>\r                  <div className=\"info-section\">\r                    <Text type=\"secondary\">Fatura Edilen:</Text>\r                    <Title level={5}>{invoice.customerName}</Title>\r                    <Paragraph>\r                      {invoice.customerAddress}<br />\r                      Tel: {invoice.customerPhone}<br />\r                      Email: {invoice.customerEmail}<br />\r                      {invoice.customerTaxNumber && (\r                        <>\r                          VKN: {invoice.customerTaxNumber}<br />\r                          V.D.: {invoice.customerTaxOffice}\r                        </>\r                      )}\r                    </Paragraph>\r                  </div>\r                </Col>\r              </Row>\r              <Divider />\r              {/* Invoice Details */}\r              <Row gutter={48} style={{ marginBottom: 24 }}>\r                <Col span={8}>\r                  <div className=\"detail-item\">\r                    <Text type=\"secondary\">Fatura Tarihi:</Text>\r                    <div>\r                      <Text strong>{formatDate(invoice.invoiceDate)}</Text>\r                    </div>\r                  </div>\r                </Col>\r                <Col span={8}>\r                  <div className=\"detail-item\">\r                    <Text type=\"secondary\">Vade Tarihi:</Text>\r                    <div>\r                      <Text strong>{formatDate(invoice.dueDate)}</Text>\r                    </div>\r                  </div>\r                </Col>\r                <Col span={8}>\r                  <div className=\"detail-item\">\r                    <Text type=\"secondary\">Ödeme Yöntemi:</Text>\r                    <div>\r                      <Text strong>\r                        {invoice.paymentMethod === 'BankTransfer' ? 'Banka Havalesi' :\r                         invoice.paymentMethod === 'CreditCard' ? 'Kredi Kartı' :\r                         invoice.paymentMethod === 'Cash' ? 'Nakit' : \r                         invoice.paymentMethod}\r                      </Text>\r                    </div>\r                  </div>\r                </Col>\r              </Row>\r              {/* Items Table */}\r              <Table\r                dataSource={invoice.items}\r                columns={itemColumns}\r                pagination={false}\r                rowKey=\"id\"\r                className=\"invoice-items-table\"\r              />\r              {/* Summary */}\r              <Row justify=\"end\" style={{ marginTop: 24 }}>\r                <Col span={10}>\r                  <div className=\"invoice-summary\">\r                    <div className=\"summary-item\">\r                      <Text>Ara Toplam:</Text>\r                      <Text>{formatCurrency(invoice.subTotal)}</Text>\r                    </div>\r                    {invoice.discountAmount > 0 && (\r                      <div className=\"summary-item\">\r                        <Text>İndirim:</Text>\r                        <Text type=\"danger\">-{formatCurrency(invoice.discountAmount)}</Text>\r                      </div>\r                    )}\r                    <div className=\"summary-item\">\r                      <Text>KDV (%18):</Text>\r                      <Text>{formatCurrency(invoice.taxAmount)}</Text>\r                    </div>\r                    <Divider style={{ margin: '12px 0' }} />\r                    <div className=\"summary-item total\">\r                      <Title level={4}>Genel Toplam:</Title>\r                      <Title level={4} style={{ color: '#1890ff' }}>\r                        {formatCurrency(invoice.totalAmount)}\r                      </Title>\r                    </div>\r                  </div>\r                </Col>\r              </Row>\r              {/* Notes */}\r              {invoice.notes && (\r                <>\r                  <Divider />\r                  <div className=\"invoice-notes\">\r                    <Title level={5}>Notlar:</Title>\r                    <Paragraph>{invoice.notes}</Paragraph>\r                  </div>\r                </>\r              )}\r              {/* Footer */}\r              <Divider />\r              <div className=\"invoice-footer\">\r                <Text type=\"secondary\">\r                  Bu fatura {formatDate(invoice.createdAt, 'DD.MM.YYYY HH:mm')} tarihinde \r                  oluşturulmuştur.\r                </Text>\r              </div>\r            </Card>\r          </Col>\r          <Col xs={24} lg={8}>\r            {/* Status Card */}\r            <Card className=\"status-card\" style={{ marginBottom: 16 }}>\r              <Title level={5}>Fatura Durumu</Title>\r              <div className=\"status-content\">\r                <Badge\r                  status={invoice.status === 'Paid' ? 'success' : 'processing'}\r                  text={\r                    <Text strong style={{ fontSize: 16 }}>\r                      {invoice.status === 'Paid' ? 'Ödendi' :\r                       invoice.status === 'Overdue' ? 'Gecikmiş' :\r                       invoice.status === 'Sent' ? 'Gönderildi' :\r                       invoice.status}\r                    </Text>\r                  }\r                />\r                {invoice.paidDate && (\r                  <div style={{ marginTop: 12 }}>\r                    <Text type=\"secondary\">Ödeme Tarihi:</Text>\r                    <div>\r                      <Text>{formatDate(invoice.paidDate)}</Text>\r                    </div>\r                  </div>\r                )}\r              </div>\r              {invoice.status !== 'Paid' && (\r                <Button\r                  type=\"primary\"\r                  block\r                  style={{ marginTop: 16 }}\r                  onClick={handleMarkAsPaid}\r                >\r                  Ödendi Olarak İşaretle\r                </Button>\r              )}\r            </Card>\r            {/* Payment Info Card */}\r            <Card className=\"payment-info-card\" style={{ marginBottom: 16 }}>\r              <Title level={5}>Ödeme Bilgileri</Title>\r              <Descriptions column={1} size=\"small\">\r                <Descriptions.Item label=\"Toplam Tutar\">\r                  <Text strong style={{ fontSize: 18, color: '#1890ff' }}>\r                    {formatCurrency(invoice.totalAmount)}\r                  </Text>\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Ödeme Yöntemi\">\r                  {invoice.paymentMethod === 'BankTransfer' ? 'Banka Havalesi' :\r                   invoice.paymentMethod === 'CreditCard' ? 'Kredi Kartı' :\r                   invoice.paymentMethod}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Vade Tarihi\">\r                  {formatDate(invoice.dueDate)}\r                </Descriptions.Item>\r              </Descriptions>\r            </Card>\r            {/* Activity Timeline */}\r            <Card className=\"activity-card\">\r              <Title level={5}>İşlem Geçmişi</Title>\r              <Timeline\r                items={[\r                  {\r                    color: 'green',\r                    children: (\r                      <>\r                        <Text strong>Ödeme alındı</Text>\r                        <div>\r                          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                            {formatDate(invoice.paidDate, 'DD.MM.YYYY HH:mm')}\r                          </Text>\r                        </div>\r                      </>\r                    ),\r                  },\r                  {\r                    color: 'blue',\r                    children: (\r                      <>\r                        <Text strong>Fatura gönderildi</Text>\r                        <div>\r                          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                            {formatDate(invoice.invoiceDate, 'DD.MM.YYYY HH:mm')}\r                          </Text>\r                        </div>\r                      </>\r                    ),\r                  },\r                  {\r                    color: 'gray',\r                    children: (\r                      <>\r                        <Text strong>Fatura oluşturuldu</Text>\r                        <div>\r                          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                            {invoice.createdBy} • {formatDate(invoice.createdAt, 'DD.MM.YYYY HH:mm')}\r                          </Text>\r                        </div>\r                      </>\r                    ),\r                  },\r                ]}\r              />\r            </Card>\r          </Col>\r        </Row>\r      </div>\r      {/* Send Email Modal */}\r      <Modal\r        title=\"Fatura Gönder\"\r        open={sendModalVisible}\r        onOk={() => {\r          message.success('Fatura email ile gönderildi');\r          setSendModalVisible(false);\r        }}\r        onCancel={() => setSendModalVisible(false)}\r        okText=\"Gönder\"\r        cancelText=\"İptal\"\r      >\r        <Alert\r          message=\"Fatura müşteriye email olarak gönderilecek\"\r          description={`${invoice.customerEmail} adresine fatura gönderilecektir.`}\r          type=\"info\"\r          showIcon\r        />\r      </Modal>\r      {/* Delete Confirmation Modal */}\r      <Modal\r        title=\"Faturayı Sil\"\r        open={deleteModalVisible}\r        onOk={handleDelete}\r        onCancel={() => setDeleteModalVisible(false)}\r        okText=\"Sil\"\r        cancelText=\"İptal\"\r        okButtonProps={{ danger: true }}\r      >\r        <Alert\r          message=\"Bu işlem geri alınamaz!\"\r          description=\"Faturayı silmek istediğinizden emin misiniz?\"\r          type=\"warning\"\r          showIcon\r        />\r      </Modal>\r    </div>\r  );\r};\rexport default InvoiceDetail;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/invoices/pages/InvoiceDetail/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { useParams, useNavigate } from 'react-router-dom';\rimport {\r  PageHeader,\r  ProForm,\r  ProFormText,\r  ProFormTextArea,\r  ProFormSelect,\r  ProFormDatePicker,\r  ProFormDigit,\r  ProFormList,\r} from '@ant-design/pro-components';\rimport {\r  Card,\r  Row,\r  Col,\r  Button,\r  Space,\r  Form,\r  Input,\r  Select,\r  DatePicker,\r  InputNumber,\r  Table,\r  Typography,\r  Divider,\r  message,\r  Modal,\r  AutoComplete,\r  Tag,\r  Alert,\r  Spin,\r} from 'antd';\rimport {\r  SaveOutlined,\r  SendOutlined,\r  DeleteOutlined,\r  PlusOutlined,\r  MinusCircleOutlined,\r  CalculatorOutlined,\r  UserOutlined,\r  PhoneOutlined,\r  MailOutlined,\r  HomeOutlined,\r} from '@ant-design/icons';\rimport { formatCurrency } from '@/shared/utils/formatters';\rimport invoiceService, { Invoice, InvoiceItem } from '@/services/invoiceService';\rimport dayjs from 'dayjs';\rimport './style.css';\rconst { Title, Text } = Typography;\rconst { Option } = Select;\rconst { TextArea } = Input;\rinterface InvoiceFormData {\r  customerId: string;\r  customerName: string;\r  customerEmail: string;\r  customerPhone: string;\r  customerAddress: string;\r  customerTaxNumber?: string;\r  customerTaxOffice?: string;\r  invoiceDate: dayjs.Dayjs;\r  dueDate: dayjs.Dayjs;\r  paymentMethod: string;\r  notes?: string;\r  items: InvoiceItem[];\r}\rexport const InvoiceEdit: React.FC = () => {\r  const { id } = useParams<{ id: string }>();\r  const navigate = useNavigate();\r  const [form] = Form.useForm();\r  const [loading, setLoading] = useState(false);\r  const [saving, setSaving] = useState(false);\r  const [customers, setCustomers] = useState<any[]>([]);\r  const [products, setProducts] = useState<any[]>([]);\r  const [items, setItems] = useState<InvoiceItem[]>([]);\r  const [totals, setTotals] = useState({\r    subTotal: 0,\r    taxAmount: 0,\r    discountAmount: 0,\r    totalAmount: 0,\r  });\r  useEffect(() => {\r    if (id) {\r      fetchInvoice();\r    } else {\r      // Yeni fatura için default değerler\r      const defaultItems = [{\r        id: '1',\r        productId: '',\r        productName: '',\r        description: '',\r        quantity: 1,\r        unitPrice: 0,\r        taxRate: 18,\r        discountRate: 0,\r        totalPrice: 0,\r      }];\r      setItems(defaultItems);\r      form.setFieldsValue({\r        invoiceDate: dayjs(),\r        dueDate: dayjs().add(30, 'days'),\r        paymentMethod: 'BankTransfer',\r        items: defaultItems,\r      });\r    }\r    fetchCustomers();\r    fetchProducts();\r  }, [id]);\r  useEffect(() => {\r    calculateTotals();\r  }, [items]);\r  const fetchInvoice = async () => {\r    try {\r      setLoading(true);\r      // Gerçek API çağrısı\r      // const response = await invoiceService.getInvoiceById(id!);\r      // const invoice = response.data;\r      // Mock data\r      const invoice: Invoice = {\r        id: id!,\r        invoiceNumber: 'INV-2024-001',\r        customerId: '1',\r        customerName: 'ABC Teknoloji A.Ş.',\r        customerEmail: 'muhasebe@abcteknoloji.com',\r        customerPhone: '+90 212 555 0100',\r        customerAddress: 'Maslak Mah. Teknoloji Cad. No:15\\nSarıyer/İstanbul',\r        customerTaxNumber: '1234567890',\r        customerTaxOffice: 'Sarıyer',\r        invoiceDate: '2024-01-15T00:00:00',\r        dueDate: '2024-02-15T00:00:00',\r        subTotal: 10000,\r        taxAmount: 1800,\r        discountAmount: 500,\r        totalAmount: 11300,\r        currency: 'TRY',\r        status: 'Draft',\r        paymentMethod: 'BankTransfer',\r        notes: 'Ödeme IBAN: TR12 0001 2345 6789 0123 4567 89',\r        items: [\r          {\r            id: '1',\r            productId: '1',\r            productName: 'Yazılım Lisansı - Pro',\r            description: 'Yıllık yazılım lisansı',\r            quantity: 2,\r            unitPrice: 3000,\r            taxRate: 18,\r            discountRate: 5,\r            totalPrice: 5700,\r          },\r          {\r            id: '2',\r            productId: '2',\r            productName: 'Destek Paketi',\r            description: '7/24 teknik destek hizmeti',\r            quantity: 1,\r            unitPrice: 4000,\r            taxRate: 18,\r            discountRate: 0,\r            totalPrice: 4720,\r          },\r        ],\r        createdAt: '2024-01-15T10:30:00',\r      };\r      // Form'a verileri set et\r      form.setFieldsValue({\r        ...invoice,\r        invoiceDate: dayjs(invoice.invoiceDate),\r        dueDate: dayjs(invoice.dueDate),\r      });\r      setItems(invoice.items);\r    } catch (error) {\r      message.error('Fatura yüklenemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const fetchCustomers = async () => {\r    // Mock müşteri listesi\r    const mockCustomers = [\r      {\r        id: '1',\r        name: 'ABC Teknoloji A.Ş.',\r        email: 'muhasebe@abcteknoloji.com',\r        phone: '+90 212 555 0100',\r        address: 'Maslak Mah. Teknoloji Cad. No:15\\nSarıyer/İstanbul',\r        taxNumber: '1234567890',\r        taxOffice: 'Sarıyer',\r      },\r      {\r        id: '2',\r        name: 'XYZ Yazılım Ltd.',\r        email: 'info@xyzyazilim.com',\r        phone: '+90 216 555 0200',\r        address: 'Ataşehir/İstanbul',\r        taxNumber: '9876543210',\r        taxOffice: 'Ataşehir',\r      },\r    ];\r    setCustomers(mockCustomers);\r  };\r  const fetchProducts = async () => {\r    // Mock ürün listesi\r    const mockProducts = [\r      {\r        id: '1',\r        name: 'Yazılım Lisansı - Pro',\r        description: 'Yıllık yazılım lisansı',\r        price: 3000,\r        taxRate: 18,\r      },\r      {\r        id: '2',\r        name: 'Destek Paketi',\r        description: '7/24 teknik destek hizmeti',\r        price: 4000,\r        taxRate: 18,\r      },\r      {\r        id: '3',\r        name: 'Eğitim Hizmeti',\r        description: 'Uzaktan eğitim (10 saat)',\r        price: 5000,\r        taxRate: 18,\r      },\r    ];\r    setProducts(mockProducts);\r  };\r  const handleCustomerSelect = (customerId: string) => {\r    const customer = customers.find(c => c.id === customerId);\r    if (customer) {\r      form.setFieldsValue({\r        customerName: customer.name,\r        customerEmail: customer.email,\r        customerPhone: customer.phone,\r        customerAddress: customer.address,\r        customerTaxNumber: customer.taxNumber,\r        customerTaxOffice: customer.taxOffice,\r      });\r    }\r  };\r  const handleProductSelect = (productId: string, index: number) => {\r    const product = products.find(p => p.id === productId);\r    if (product) {\r      const newItems = [...items];\r      newItems[index] = {\r        ...newItems[index],\r        productId: product.id,\r        productName: product.name,\r        description: product.description,\r        unitPrice: product.price,\r        taxRate: product.taxRate,\r      };\r      setItems(newItems);\r      calculateItemTotal(index, newItems[index]);\r    }\r  };\r  const calculateItemTotal = (index: number, item: Partial<InvoiceItem>) => {\r    const quantity = item.quantity || 0;\r    const unitPrice = item.unitPrice || 0;\r    const discountRate = item.discountRate || 0;\r    const taxRate = item.taxRate || 0;\r    const subTotal = quantity * unitPrice;\r    const discountAmount = subTotal * (discountRate / 100);\r    const taxableAmount = subTotal - discountAmount;\r    const taxAmount = taxableAmount * (taxRate / 100);\r    const totalPrice = taxableAmount + taxAmount;\r    const newItems = [...items];\r    newItems[index] = {\r      ...newItems[index],\r      ...item,\r      totalPrice,\r    };\r    setItems(newItems);\r  };\r  const calculateTotals = () => {\r    let subTotal = 0;\r    let taxAmount = 0;\r    let discountAmount = 0;\r    items.forEach(item => {\r      const itemSubTotal = (item.quantity || 0) * (item.unitPrice || 0);\r      const itemDiscount = itemSubTotal * ((item.discountRate || 0) / 100);\r      const taxableAmount = itemSubTotal - itemDiscount;\r      const itemTax = taxableAmount * ((item.taxRate || 0) / 100);\r      subTotal += itemSubTotal;\r      discountAmount += itemDiscount;\r      taxAmount += itemTax;\r    });\r    const totalAmount = subTotal - discountAmount + taxAmount;\r    setTotals({\r      subTotal,\r      taxAmount,\r      discountAmount,\r      totalAmount,\r    });\r  };\r  const handleAddItem = () => {\r    const newItem: InvoiceItem = {\r      id: Date.now().toString(),\r      productId: '',\r      productName: '',\r      description: '',\r      quantity: 1,\r      unitPrice: 0,\r      taxRate: 18,\r      discountRate: 0,\r      totalPrice: 0,\r    };\r    setItems([...items, newItem]);\r  };\r  const handleRemoveItem = (index: number) => {\r    const newItems = items.filter((_, i) => i !== index);\r    setItems(newItems);\r  };\r  const handleItemChange = (index: number, field: string, value: any) => {\r    const newItems = [...items];\r    newItems[index] = {\r      ...newItems[index],\r      [field]: value,\r    };\r    if (['quantity', 'unitPrice', 'discountRate', 'taxRate'].includes(field)) {\r      calculateItemTotal(index, newItems[index]);\r    } else {\r      setItems(newItems);\r    }\r  };\r  const handleSave = async (values: any) => {\r    try {\r      setSaving(true);\r      const invoiceData = {\r        ...values,\r        items,\r        ...totals,\r        invoiceDate: values.invoiceDate.format('YYYY-MM-DD'),\r        dueDate: values.dueDate.format('YYYY-MM-DD'),\r      };\r      if (id) {\r        // await invoiceService.updateInvoice(id, invoiceData);\r        message.success('Fatura güncellendi');\r      } else {\r        // await invoiceService.createInvoice(invoiceData);\r        message.success('Fatura oluşturuldu');\r      }\r      navigate(-1);\r    } catch (error) {\r      message.error('İşlem başarısız');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleSaveAndSend = async (values: any) => {\r    await handleSave(values);\r    message.info('Fatura kaydedildi ve gönderildi');\r  };\r  const handleCancel = () => {\r    Modal.confirm({\r      title: 'İptal Et',\r      content: 'Değişiklikler kaybolacak. Devam etmek istiyor musunuz?',\r      okText: 'Evet',\r      cancelText: 'Hayır',\r      onOk: () => navigate(-1),\r    });\r  };\r  if (loading) {\r    return (\r      <div style={{ textAlign: 'center', padding: 100 }}>\r        <Spin size=\"large\" />\r      </div>\r    );\r  }\r  return (\r    <div className=\"invoice-edit-page\">\r      <PageHeader\r        ghost={false}\r        onBack={() => navigate(-1)}\r        title={id ? 'Fatura Düzenle' : 'Yeni Fatura'}\r        extra={[\r          <Button key=\"cancel\" onClick={handleCancel}>\r            İptal\r          </Button>,\r          <Button\r            key=\"save-draft\"\r            onClick={() => form.submit()}\r            loading={saving}\r          >\r            Taslak Kaydet\r          </Button>,\r          <Button\r            key=\"save-send\"\r            type=\"primary\"\r            icon={<SendOutlined />}\r            onClick={() = aria-label=\"send outlined\"> {\r              form.validateFields().then(values => {\r                handleSaveAndSend(values);\r              });\r            }}\r            loading={saving}\r          >\r            Kaydet ve Gönder\r          </Button>,\r        ]}\r      />\r      <div className=\"invoice-edit-content\">\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleSave}\r          className=\"invoice-form\"\r        >\r          <Row gutter={24}>\r            <Col xs={24} lg={16}>\r              <Card title=\"Fatura Bilgileri\" className=\"invoice-card\">\r                {/* Müşteri Bilgileri */}\r                <Title level={5}>Müşteri Bilgileri</Title>\r                <Row gutter={16}>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"customerId\"\r                      label=\"Müşteri Seç\"\r                    >\r                      <Select\r                        showSearch\r                        placeholder=\"Müşteri seçin veya yeni ekleyin\"\r                        onChange={handleCustomerSelect}\r                        filterOption={(input, option) = aria-label=\"select field\">\r                          (option?.children as string)\r                            .toLowerCase()\r                            .includes(input.toLowerCase())\r                        }\r                      >\r                        {customers.map(customer => (\r                          <Option key={customer.id} value={customer.id}>\r                            {customer.name}\r                          </Option>\r                        ))}\r                      </Select>\r                    </Form.Item>\r                  </Col>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"customerName\"\r                      label=\"Müşteri Adı\"\r                      rules={[{ required: true, message: 'Müşteri adı zorunludur' }]}\r                    >\r                      <Input prefix={<UserOutlined / aria-label=\"input field\">} placeholder=\"Müşteri adı\" />\r                    </Form.Item>\r                  </Col>\r                </Row>\r                <Row gutter={16}>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"customerEmail\"\r                      label=\"Email\"\r                      rules={[\r                        { required: true, message: 'Email zorunludur' },\r                        { type: 'email', message: 'Geçerli email giriniz' },\r                      ]}\r                    >\r                      <Input prefix={<MailOutlined / aria-label=\"input field\">} placeholder=\"email@example.com\" />\r                    </Form.Item>\r                  </Col>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"customerPhone\"\r                      label=\"Telefon\"\r                      rules={[{ required: true, message: 'Telefon zorunludur' }]}\r                    >\r                      <Input prefix={<PhoneOutlined / aria-label=\"input field\">} placeholder=\"+90 5XX XXX XXXX\" />\r                    </Form.Item>\r                  </Col>\r                </Row>\r                <Row gutter={16}>\r                  <Col span={24}>\r                    <Form.Item\r                      name=\"customerAddress\"\r                      label=\"Adres\"\r                      rules={[{ required: true, message: 'Adres zorunludur' }]}\r                    >\r                      <TextArea\r                        rows={2}\r                        placeholder=\"Müşteri adresi\"\r                        prefix={<HomeOutlined />}\r                      />\r                    </Form.Item>\r                  </Col>\r                </Row>\r                <Row gutter={16}>\r                  <Col span={12}>\r                    <Form.Item name=\"customerTaxNumber\" label=\"Vergi No\">\r                      <Input placeholder=\"Vergi numarası\" / aria-label=\"input field\">\r                    </Form.Item>\r                  </Col>\r                  <Col span={12}>\r                    <Form.Item name=\"customerTaxOffice\" label=\"Vergi Dairesi\">\r                      <Input placeholder=\"Vergi dairesi\" / aria-label=\"input field\">\r                    </Form.Item>\r                  </Col>\r                </Row>\r                <Divider />\r                {/* Fatura Detayları */}\r                <Title level={5}>Fatura Detayları</Title>\r                <Row gutter={16}>\r                  <Col span={8}>\r                    <Form.Item\r                      name=\"invoiceDate\"\r                      label=\"Fatura Tarihi\"\r                      rules={[{ required: true, message: 'Fatura tarihi zorunludur' }]}\r                    >\r                      <DatePicker style={{ width: '100%' }} format=\"DD.MM.YYYY\" />\r                    </Form.Item>\r                  </Col>\r                  <Col span={8}>\r                    <Form.Item\r                      name=\"dueDate\"\r                      label=\"Vade Tarihi\"\r                      rules={[{ required: true, message: 'Vade tarihi zorunludur' }]}\r                    >\r                      <DatePicker style={{ width: '100%' }} format=\"DD.MM.YYYY\" />\r                    </Form.Item>\r                  </Col>\r                  <Col span={8}>\r                    <Form.Item\r                      name=\"paymentMethod\"\r                      label=\"Ödeme Yöntemi\"\r                      rules={[{ required: true, message: 'Ödeme yöntemi zorunludur' }]}\r                    >\r                      <Select aria-label=\"select field\">\r                        <Option value=\"BankTransfer\">Banka Havalesi</Option>\r                        <Option value=\"CreditCard\">Kredi Kartı</Option>\r                        <Option value=\"Cash\">Nakit</Option>\r                        <Option value=\"Check\">Çek</Option>\r                      </Select>\r                    </Form.Item>\r                  </Col>\r                </Row>\r                <Divider />\r                {/* Ürün/Hizmet Kalemleri */}\r                <div className=\"invoice-items-section\">\r                  <div className=\"section-header\">\r                    <Title level={5}>Ürün/Hizmet Kalemleri</Title>\r                    <Button\r                      type=\"dashed\"\r                      onClick={handleAddItem}\r                      icon={<PlusOutlined />}\r                     aria-label=\"plus outlined\">\r                      Kalem Ekle\r                    </Button>\r                  </div>\r                  <Table\r                    dataSource={items}\r                    pagination={false}\r                    rowKey=\"id\"\r                    className=\"invoice-items-table\"\r                    columns={[\r                      {\r                        title: 'Ürün/Hizmet',\r                        dataIndex: 'productName',\r                        width: 250,\r                        render: (_, record, index) => (\r                          <div>\r                            <Select\r                              style={{ width: '100%', marginBottom: 8 }}\r                              placeholder=\"Ürün seçin\"\r                              value={record.productId}\r                              onChange={(value) = aria-label=\"select field\"> handleProductSelect(value, index)}\r                              showSearch\r                            >\r                              {products.map(product => (\r                                <Option key={product.id} value={product.id}>\r                                  {product.name}\r                                </Option>\r                              ))}\r                            </Select>\r                            <Input\r                              placeholder=\"Açıklama\"\r                              value={record.description}\r                              onChange={(e) = aria-label=\"input field\">\r                                handleItemChange(index, 'description', e.target.value)\r                              }\r                            />\r                          </div>\r                        ),\r                      },\r                      {\r                        title: 'Miktar',\r                        dataIndex: 'quantity',\r                        width: 100,\r                        render: (_, record, index) => (\r                          <InputNumber\r                            min={1}\r                            value={record.quantity}\r                            onChange={(value) = aria-label=\"input field\">\r                              handleItemChange(index, 'quantity', value)\r                            }\r                          />\r                        ),\r                      },\r                      {\r                        title: 'Birim Fiyat',\r                        dataIndex: 'unitPrice',\r                        width: 120,\r                        render: (_, record, index) => (\r                          <InputNumber\r                            min={0}\r                            value={record.unitPrice}\r                            onChange={(value) = aria-label=\"input field\">\r                              handleItemChange(index, 'unitPrice', value)\r                            }\r                            formatter={(value) => `₺ ${value}`}\r                            parser={(value) => value!.replace('₺ ', '')}\r                          />\r                        ),\r                      },\r                      {\r                        title: 'İndirim %',\r                        dataIndex: 'discountRate',\r                        width: 100,\r                        render: (_, record, index) => (\r                          <InputNumber\r                            min={0}\r                            max={100}\r                            value={record.discountRate}\r                            onChange={(value) = aria-label=\"input field\">\r                              handleItemChange(index, 'discountRate', value)\r                            }\r                            formatter={(value) => `${value}%`}\r                            parser={(value) => value!.replace('%', '')}\r                          />\r                        ),\r                      },\r                      {\r                        title: 'KDV %',\r                        dataIndex: 'taxRate',\r                        width: 100,\r                        render: (_, record, index) => (\r                          <Select\r                            value={record.taxRate}\r                            onChange={(value) = aria-label=\"select field\">\r                              handleItemChange(index, 'taxRate', value)\r                            }\r                          >\r                            <Option value={0}>%0</Option>\r                            <Option value={1}>%1</Option>\r                            <Option value={8}>%8</Option>\r                            <Option value={18}>%18</Option>\r                          </Select>\r                        ),\r                      },\r                      {\r                        title: 'Toplam',\r                        dataIndex: 'totalPrice',\r                        width: 120,\r                        render: (value) => (\r                          <Text strong>{formatCurrency(value || 0)}</Text>\r                        ),\r                      },\r                      {\r                        title: '',\r                        width: 50,\r                        render: (_, __, index) => (\r                          <Button\r                            type=\"text\"\r                            danger\r                            icon={<MinusCircleOutlined />}\r                            onClick={() = aria-label=\"minus circle outlined\"> handleRemoveItem(index)}\r                            disabled={items.length === 1}\r                          />\r                        ),\r                      },\r                    ]}\r                  />\r                </div>\r                <Divider />\r                {/* Notlar */}\r                <Title level={5}>Notlar</Title>\r                <Form.Item name=\"notes\">\r                  <TextArea\r                    rows={3}\r                    placeholder=\"Fatura ile ilgili notlar (isteğe bağlı)\"\r                  />\r                </Form.Item>\r              </Card>\r            </Col>\r            <Col xs={24} lg={8}>\r              {/* Özet */}\r              <Card title=\"Fatura Özeti\" className=\"summary-card\">\r                <div className=\"summary-content\">\r                  <div className=\"summary-item\">\r                    <Text>Ara Toplam:</Text>\r                    <Text strong>{formatCurrency(totals.subTotal)}</Text>\r                  </div>\r                  {totals.discountAmount > 0 && (\r                    <div className=\"summary-item\">\r                      <Text>İndirim:</Text>\r                      <Text type=\"danger\">-{formatCurrency(totals.discountAmount)}</Text>\r                    </div>\r                  )}\r                  <div className=\"summary-item\">\r                    <Text>KDV:</Text>\r                    <Text>{formatCurrency(totals.taxAmount)}</Text>\r                  </div>\r                  <Divider />\r                  <div className=\"summary-item total\">\r                    <Title level={4}>Genel Toplam:</Title>\r                    <Title level={4} style={{ color: '#1890ff', margin: 0 }}>\r                      {formatCurrency(totals.totalAmount)}\r                    </Title>\r                  </div>\r                </div>\r              </Card>\r              {/* Hızlı İşlemler */}\r              <Card title=\"Hızlı İşlemler\" style={{ marginTop: 16 }}>\r                <Space direction=\"vertical\" style={{ width: '100%' }}>\r                  <Alert\r                    message=\"Fatura Durumu\"\r                    description={id ? \"Taslak olarak kaydedilmiş\" : \"Henüz kaydedilmemiş\"}\r                    type=\"info\"\r                    showIcon\r                  />\r                  <Button\r                    block\r                    icon={<CalculatorOutlined />}\r                    onClick={calculateTotals}\r                   aria-label=\"calculator outlined\">\r                    Toplamları Yeniden Hesapla\r                  </Button>\r                </Space>\r              </Card>\r            </Col>\r          </Row>\r        </Form>\r      </div>\r    </div>\r  );\r};\rexport default InvoiceEdit;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/invoices/pages/InvoiceEdit/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Table,\r  Button,\r  Space,\r  Tag,\r  Input,\r  Select,\r  DatePicker,\r  Row,\r  Col,\r  Statistic,\r  Avatar,\r  Dropdown,\r  Menu,\r  message,\r  Tooltip,\r  Badge,\r  Empty,\r  Spin\r} from 'antd';\rimport {\r  PlusOutlined,\r  SearchOutlined,\r  DownloadOutlined,\r  PrinterOutlined,\r  MailOutlined,\r  EyeOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  MoreOutlined,\r  DollarOutlined,\r  FileTextOutlined,\r  ClockCircleOutlined,\r  CheckCircleOutlined,\r  WarningOutlined,\r  FilterOutlined\r} from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport type { ColumnsType } from 'antd/es/table';\rimport invoiceService, { Invoice, InvoiceFilters } from '../../../../services/invoiceService';\rimport './style.css';\rconst { RangePicker } = DatePicker;\rconst { Option } = Select;\rconst InvoiceList: React.FC = () => {\r  const navigate = useNavigate();\r  const [invoices, setInvoices] = useState<Invoice[]>([]);\r  const [loading, setLoading] = useState(false);\r  const [filters, setFilters] = useState<InvoiceFilters>({\r    pageNumber: 1,\r    pageSize: 20\r  });\r  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\r  const [statistics, setStatistics] = useState({\r    total: 0,\r    paid: 0,\r    pending: 0,\r    overdue: 0\r  });\r  useEffect(() => {\r    fetchInvoices();\r    // eslint-disable-next-line\r  }, [filters]);\r  const fetchInvoices = async () => {\r    try {\r      setLoading(true);\r      // Mock data for demo - API henüz hazır değilse\r      const mockInvoices: Invoice[] = [\r        {\r          id: '1',\r          invoiceNumber: 'INV-2024-001',\r          customerId: '1',\r          customerName: 'ABC Teknoloji A.Ş.',\r          invoiceDate: '2024-01-15T00:00:00',\r          dueDate: '2024-02-15T00:00:00',\r          subTotal: 10000,\r          taxAmount: 1800,\r          discountAmount: 500,\r          totalAmount: 11300,\r          currency: 'TRY',\r          status: 'Paid',\r          paidDate: '2024-02-10T00:00:00',\r          paymentMethod: 'BankTransfer',\r          items: [],\r          createdAt: '2024-01-15T00:00:00'\r        },\r        {\r          id: '2',\r          invoiceNumber: 'INV-2024-002',\r          customerId: '2',\r          customerName: 'XYZ Yazılım Ltd.',\r          invoiceDate: '2024-01-20T00:00:00',\r          dueDate: '2024-02-20T00:00:00',\r          subTotal: 25000,\r          taxAmount: 4500,\r          discountAmount: 1000,\r          totalAmount: 28500,\r          currency: 'TRY',\r          status: 'Overdue',\r          items: [],\r          createdAt: '2024-01-20T00:00:00'\r        },\r        {\r          id: '3',\r          invoiceNumber: 'INV-2024-003',\r          customerId: '3',\r          customerName: 'Demo Şirketi',\r          invoiceDate: '2024-02-01T00:00:00',\r          dueDate: '2024-03-01T00:00:00',\r          subTotal: 15000,\r          taxAmount: 2700,\r          discountAmount: 0,\r          totalAmount: 17700,\r          currency: 'TRY',\r          status: 'Sent',\r          items: [],\r          createdAt: '2024-02-01T00:00:00'\r        },\r        {\r          id: '4',\r          invoiceNumber: 'INV-2024-004',\r          customerId: '1',\r          customerName: 'ABC Teknoloji A.Ş.',\r          invoiceDate: '2024-02-05T00:00:00',\r          dueDate: '2024-03-05T00:00:00',\r          subTotal: 8000,\r          taxAmount: 1440,\r          discountAmount: 400,\r          totalAmount: 9040,\r          currency: 'TRY',\r          status: 'Draft',\r          items: [],\r          createdAt: '2024-02-05T00:00:00'\r        },\r        {\r          id: '5',\r          invoiceNumber: 'INV-2024-005',\r          customerId: '2',\r          customerName: 'XYZ Yazılım Ltd.',\r          invoiceDate: '2024-01-10T00:00:00',\r          dueDate: '2024-02-10T00:00:00',\r          subTotal: 12000,\r          taxAmount: 2160,\r          discountAmount: 600,\r          totalAmount: 13560,\r          currency: 'TRY',\r          status: 'Cancelled',\r          items: [],\r          createdAt: '2024-01-10T00:00:00'\r        }\r      ];\r      // Filter mock data based on filters\r      let filteredData = [...mockInvoices];\r      if (filters.status) {\r        filteredData = filteredData.filter(inv => inv.status === filters.status);\r      }\r      setInvoices(filteredData);\r      calculateStatistics(filteredData);\r      // Gerçek API çağrısı - şimdilik yorum satırında\r      // const data = await invoiceService.getInvoices(filters);\r      // setInvoices(data);\r      // calculateStatistics(data);\r    } catch (error) {\r      message.error('Faturalar yüklenirken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const calculateStatistics = (data: Invoice[]) => {\r    const stats = data.reduce((acc, invoice) => {\r      acc.total += invoice.totalAmount;\r      if (invoice.status === 'Paid') {\r        acc.paid += invoice.totalAmount;\r      } else if (invoice.status === 'Sent' || invoice.status === 'Draft') {\r        acc.pending += invoice.totalAmount;\r      } else if (invoice.status === 'Overdue') {\r        acc.overdue += invoice.totalAmount;\r      }\r      return acc;\r    }, { total: 0, paid: 0, pending: 0, overdue: 0 });\r    setStatistics(stats);\r  };\r  const handleStatusChange = async (invoice: Invoice, action: string) => {\r    try {\r      switch (action) {\r        case 'send':\r          await invoiceService.sendInvoice(invoice.id);\r          message.success('Fatura gönderildi');\r          break;\r        case 'markPaid':\r          await invoiceService.markAsPaid(invoice.id, {\r            paymentDate: new Date().toISOString(),\r            paymentMethod: 'BankTransfer'\r          });\r          message.success('Fatura ödendi olarak işaretlendi');\r          break;\r        case 'cancel':\r          await invoiceService.cancelInvoice(invoice.id, 'Müşteri talebi');\r          message.success('Fatura iptal edildi');\r          break;\r      }\r      fetchInvoices();\r    } catch (error) {\r      message.error('İşlem başarısız oldu');\r    }\r  };\r  const handleDelete = async (id: string) => {\r    try {\r      await invoiceService.deleteInvoice(id);\r      message.success('Fatura silindi');\r      fetchInvoices();\r    } catch (error) {\r      message.error('Silme işlemi başarısız oldu');\r    }\r  };\r  const getActionMenu = (record: Invoice) => (\r    <Menu>\r      <Menu.Item key=\"view\" icon={<EyeOutlined />} onClick={() => navigate(`/invoices/${record.id}`)}>\r        Görüntüle\r      </Menu.Item>\r      <Menu.Item key=\"edit\" icon={<EditOutlined />} onClick={() => navigate(`/invoices/${record.id}/edit`)}>\r        Düzenle\r      </Menu.Item>\r      <Menu.Divider />\r      {record.status === 'Draft' && (\r        <Menu.Item key=\"send\" icon={<MailOutlined />} onClick={() => handleStatusChange(record, 'send')}>\r          Gönder\r        </Menu.Item>\r      )}\r      {record.status === 'Sent' && (\r        <Menu.Item key=\"markPaid\" icon={<CheckCircleOutlined />} onClick={() => handleStatusChange(record, 'markPaid')}>\r          Ödendi İşaretle\r        </Menu.Item>\r      )}\r      <Menu.Item key=\"print\" icon={<PrinterOutlined />}>\r        Yazdır\r      </Menu.Item>\r      <Menu.Item key=\"download\" icon={<DownloadOutlined />}>\r        PDF İndir\r      </Menu.Item>\r      <Menu.Divider />\r      {record.status === 'Draft' && (\r        <Menu.Item key=\"delete\" icon={<DeleteOutlined />} danger onClick={() => handleDelete(record.id)}>\r          Sil\r        </Menu.Item>\r      )}\r      {(record.status === 'Sent' || record.status === 'Overdue') && (\r        <Menu.Item key=\"cancel\" icon={<WarningOutlined />} danger onClick={() => handleStatusChange(record, 'cancel')}>\r          İptal Et\r        </Menu.Item>\r      )}\r    </Menu>\r  );\r  const columns: ColumnsType<Invoice> = [\r    {\r      title: 'Fatura No',\r      dataIndex: 'invoiceNumber',\r      key: 'invoiceNumber',\r      fixed: 'left',\r      width: 120,\r      render: (text, record) => (\r        <Button type=\"link\" onClick={() => navigate(`/invoices/${record.id}`)}>\r          {text}\r        </Button>\r      )\r    },\r    {\r      title: 'Müşteri',\r      dataIndex: 'customerName',\r      key: 'customerName',\r      width: 200,\r      render: (text) => (\r        <Space>\r          <Avatar style={{ backgroundColor: '#87d068' }}>{text?.charAt(0) || 'M'}</Avatar>\r          <span>{text || 'Müşteri Adı'}</span>\r        </Space>\r      )\r    },\r    {\r      title: 'Fatura Tarihi',\r      dataIndex: 'invoiceDate',\r      key: 'invoiceDate',\r      width: 120,\r      render: (date) => new Date(date).toLocaleDateString('tr-TR')\r    },\r    {\r      title: 'Vade Tarihi',\r      dataIndex: 'dueDate',\r      key: 'dueDate',\r      width: 120,\r      render: (date, record) => {\r        const daysOverdue = invoiceService.calculateDaysOverdue(date);\r        const isOverdue = record.status === 'Overdue' || (record.status === 'Sent' && daysOverdue > 0);\r        return (\r          <Space>\r            <span style={{ color: isOverdue ? '#ff4d4f' : undefined }}>\r              {new Date(date).toLocaleDateString('tr-TR')}\r            </span>\r            {isOverdue && (\r              <Tooltip title={`${Math.abs(daysOverdue)} gün gecikme`}>\r                <WarningOutlined style={{ color: '#ff4d4f' }} />\r              </Tooltip>\r            )}\r          </Space>\r        );\r      }\r    },\r    {\r      title: 'Tutar',\r      dataIndex: 'totalAmount',\r      key: 'totalAmount',\r      width: 150,\r      align: 'right',\r      render: (amount, record) => (\r        <span style={{ fontWeight: 600 }}>\r          {invoiceService.formatCurrency(amount, record.currency)}\r        </span>\r      ),\r      sorter: (a, b) => a.totalAmount - b.totalAmount\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      width: 120,\r      render: (status) => {\r        const statusMap: Record<string, { color: string; text: string }> = {\r          Draft: { color: 'default', text: 'Taslak' },\r          Sent: { color: 'processing', text: 'Gönderildi' },\r          Paid: { color: 'success', text: 'Ödendi' },\r          Overdue: { color: 'error', text: 'Gecikmiş' },\r          Cancelled: { color: 'warning', text: 'İptal' }\r        };\r        const config = statusMap[status] || { color: 'default', text: status };\r        return <Tag color={config.color}>{config.text}</Tag>;\r      },\r      filters: [\r        { text: 'Taslak', value: 'Draft' },\r        { text: 'Gönderildi', value: 'Sent' },\r        { text: 'Ödendi', value: 'Paid' },\r        { text: 'Gecikmiş', value: 'Overdue' },\r        { text: 'İptal', value: 'Cancelled' }\r      ]\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      fixed: 'right',\r      width: 100,\r      render: (_, record) => (\r        <Dropdown overlay={getActionMenu(record)} trigger={['click']}>\r          <Button icon={<MoreOutlined />} / aria-label=\"more outlined\">\r        </Dropdown>\r      )\r    }\r  ];\r  const rowSelection = {\r    selectedRowKeys,\r    onChange: (keys: React.Key[]) => setSelectedRowKeys(keys)\r  };\r  return (\r    <div className=\"invoice-list\">\r      {/* Statistics Cards */}\r      <Row gutter={16} className=\"statistics-row\">\r        <Col xs={24} sm={12} lg={6}>\r          <Card>\r            <Statistic\r              title=\"Toplam Fatura\"\r              value={invoices.length}\r              prefix={<FileTextOutlined />}\r              valueStyle={{ color: '#1890ff' }}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card>\r            <Statistic\r              title=\"Ödenen\"\r              value={statistics.paid}\r              prefix={<CheckCircleOutlined />}\r              valueStyle={{ color: '#52c41a' }}\r              formatter={(value) => invoiceService.formatCurrency(value as number)}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card>\r            <Statistic\r              title=\"Bekleyen\"\r              value={statistics.pending}\r              prefix={<ClockCircleOutlined />}\r              valueStyle={{ color: '#faad14' }}\r              formatter={(value) => invoiceService.formatCurrency(value as number)}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card>\r            <Statistic\r              title=\"Gecikmiş\"\r              value={statistics.overdue}\r              prefix={<WarningOutlined />}\r              valueStyle={{ color: '#ff4d4f' }}\r              formatter={(value) => invoiceService.formatCurrency(value as number)}\r            />\r          </Card>\r        </Col>\r      </Row>\r      {/* Main Content */}\r      <Card \r        title={\r          <Space>\r            <DollarOutlined />\r            <span>Faturalar</span>\r            <Badge count={invoices.length} showZero />\r          </Space>\r        }\r        extra={\r          <Space>\r            <Button icon={<FilterOutlined />} aria-label=\"filter outlined\">Filtrele</Button>\r            <Button icon={<DownloadOutlined />} aria-label=\"download outlined\">Dışa Aktar</Button>\r            <Button \r              type=\"primary\" \r              icon={<PlusOutlined />}\r              onClick={() = aria-label=\"plus outlined\"> navigate('/invoices/new')}\r            >\r              Yeni Fatura\r            </Button>\r          </Space>\r        }\r      >\r        {/* Filters */}\r        <Row gutter={16} className=\"filter-row\">\r          <Col xs={24} sm={12} lg={6}>\r            <Input\r              placeholder=\"Fatura no veya müşteri ara...\"\r              prefix={<SearchOutlined / aria-label=\"input field\">}\r              onChange={(e) => setFilters({ ...filters, pageNumber: 1 })}\r            />\r          </Col>\r          <Col xs={24} sm={12} lg={6}>\r            <Select\r              placeholder=\"Durum seçin\"\r              style={{ width: '100%' }}\r              allowClear\r              onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, status: value, pageNumber: 1 })}\r            >\r              <Option value=\"Draft\">Taslak</Option>\r              <Option value=\"Sent\">Gönderildi</Option>\r              <Option value=\"Paid\">Ödendi</Option>\r              <Option value=\"Overdue\">Gecikmiş</Option>\r              <Option value=\"Cancelled\">İptal</Option>\r            </Select>\r          </Col>\r          <Col xs={24} sm={12} lg={8}>\r            <RangePicker\r              style={{ width: '100%' }}\r              placeholder={['Başlangıç', 'Bitiş']}\r              onChange={(dates) => {\r                if (dates) {\r                  setFilters({\r                    ...filters,\r                    startDate: dates[0]?.toISOString(),\r                    endDate: dates[1]?.toISOString(),\r                    pageNumber: 1\r                  });\r                }\r              }}\r            />\r          </Col>\r        </Row>\r        {/* Table */}\r        <Table\r          rowSelection={rowSelection}\r          columns={columns}\r          dataSource={invoices}\r          rowKey=\"id\"\r          loading={loading}\r          scroll={{ x: 1200 }}\r          pagination={{\r            current: filters.pageNumber,\r            pageSize: filters.pageSize,\r            total: invoices.length * 2, // Mock total\r            showSizeChanger: true,\r            showQuickJumper: true,\r            showTotal: (total) => `Toplam ${total} fatura`,\r            onChange: (page, pageSize) => {\r              setFilters({ ...filters, pageNumber: page, pageSize });\r            }\r          }}\r          locale={{\r            emptyText: <Empty description=\"Fatura bulunamadı\" />\r          }}\r        />\r        {/* Bulk Actions */}\r        {selectedRowKeys.length > 0 && (\r          <div className=\"bulk-actions\">\r            <Space>\r              <span>{selectedRowKeys.length} fatura seçildi</span>\r              <Button icon={<MailOutlined />} aria-label=\"mail outlined\">Toplu Gönder</Button>\r              <Button icon={<PrinterOutlined />} aria-label=\"printer outlined\">Toplu Yazdır</Button>\r              <Button icon={<DownloadOutlined />} aria-label=\"download outlined\">PDF İndir</Button>\r              <Button danger icon={<DeleteOutlined />} aria-label=\"delete outlined\">Sil</Button>\r            </Space>\r          </div>\r        )}\r      </Card>\r    </div>\r  );\r};\rexport default InvoiceList;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/invoices/pages/InvoiceList/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useEffect, useState } from 'react';\rimport { Button, Typography } from 'antd';\rimport { RocketOutlined, PlayCircleOutlined } from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport { useNavigate } from 'react-router-dom';\rconst { Title, Paragraph } = Typography;\rexport const AnimatedHero: React.FC = () => {\r  const navigate = useNavigate();\r  const [typedText, setTypedText] = useState('');\r  const fullText = 'Tüm İşletme Süreçleriniz Tek Platformda';\r  useEffect(() => {\r    let index = 0;\r    const interval = setInterval(() => {\r      if (index <= fullText.length) {\r        setTypedText(fullText.slice(0, index));\r        index++;\r      } else {\r        clearInterval(interval);\r      }\r    }, 50);\r    return () => clearInterval(interval);\r  }, []);\r  // Floating particles\r  const particles = Array.from({ length: 30 }, (_, i) => ({\r    id: i,\r    x: Math.random() * 100,\r    y: Math.random() * 100,\r    size: Math.random() * 4 + 2,\r    duration: Math.random() * 20 + 10,\r    delay: Math.random() * 5\r  }));\r  return (\r    <section \r      className=\"hero-section\" \r      style={{\r        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r        minHeight: '100vh',\r        display: 'flex',\r        alignItems: 'center',\r        padding: '80px 0',\r        position: 'relative',\r        overflow: 'hidden'\r      }}\r    >\r      {/* Animated Background Particles */}\r      {particles.map(particle => (\r        <motion.div\r          key={particle.id}\r          style={{\r            position: 'absolute',\r            left: `${particle.x}%`,\r            top: `${particle.y}%`,\r            width: particle.size,\r            height: particle.size,\r            background: 'rgba(255, 255, 255, 0.3)',\r            borderRadius: '50%',\r          }}\r          animate={{\r            y: [-20, 20, -20],\r            x: [-10, 10, -10],\r            opacity: [0.3, 0.6, 0.3]\r          }}\r          transition={{\r            duration: particle.duration,\r            repeat: Infinity,\r            delay: particle.delay,\r            ease: 'easeInOut'\r          }}\r        />\r      ))}\r      <div className=\"container\" style={{ maxWidth: 1200, margin: '0 auto', padding: '0 24px', position: 'relative', zIndex: 1 }}>\r        <motion.div \r          style={{ textAlign: 'center', color: 'white' }}\r          initial={{ opacity: 0, y: 30 }}\r          animate={{ opacity: 1, y: 0 }}\r          transition={{ duration: 0.8 }}\r        >\r          <Title \r            level={1} \r            style={{ \r              fontSize: 'clamp(2.5rem, 5vw, 4rem)', \r              fontWeight: 700,\r              color: 'white',\r              marginBottom: 24,\r              lineHeight: 1.2,\r              minHeight: '100px'\r            }}\r          >\r            {typedText}\r            <motion.span\r              animate={{ opacity: [0, 1, 0] }}\r              transition={{ duration: 0.8, repeat: Infinity }}\r            >\r              |\r            </motion.span>\r          </Title>\r          <motion.div\r            initial={{ opacity: 0 }}\r            animate={{ opacity: 1 }}\r            transition={{ delay: 2, duration: 0.8 }}\r          >\r            <Paragraph \r              style={{ \r                fontSize: '1.35rem', \r                color: 'rgba(255,255,255,0.95)',\r                maxWidth: 600,\r                margin: '0 auto 40px',\r                fontWeight: 300\r              }}\r            >\r              Stocker ERP ile işletmenizi dijitalleştirin, verimliliğinizi %40 artırın.\r            </Paragraph>\r            <motion.div \r              style={{ display: 'flex', gap: 20, justifyContent: 'center', flexWrap: 'wrap' }}\r              initial={{ opacity: 0, y: 20 }}\r              animate={{ opacity: 1, y: 0 }}\r              transition={{ delay: 2.5, duration: 0.8 }}\r            >\r              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\r                <Button\r                  type=\"primary\"\r                  size=\"large\"\r                  icon={<RocketOutlined />}\r                  onClick={() = aria-label=\"rocket outlined\"> navigate('/register')}\r                  style={{\r                    height: 56,\r                    paddingLeft: 40,\r                    paddingRight: 40,\r                    fontSize: 18,\r                    background: 'white',\r                    color: '#667eea',\r                    border: 'none',\r                    fontWeight: 600,\r                    boxShadow: '0 8px 30px rgba(0,0,0,0.12)',\r                  }}\r                >\r                  14 Gün Ücretsiz Dene\r                </Button>\r              </motion.div>\r              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\r                <Button\r                  size=\"large\"\r                  icon={<PlayCircleOutlined />}\r                  ghost\r                  style={{\r                    height: 56,\r                    paddingLeft: 40,\r                    paddingRight: 40,\r                    fontSize: 18,\r                    color: 'white',\r                    borderColor: 'rgba(255,255,255,0.8)',\r                    borderWidth: 2,\r                    fontWeight: 500\r                  }}\r                 aria-label=\"play circle outlined\">\r                  Canlı Demo\r                </Button>\r              </motion.div>\r            </motion.div>\r            <motion.div \r              style={{ \r                marginTop: 32,\r                display: 'flex',\r                gap: 24,\r                justifyContent: 'center',\r                alignItems: 'center',\r                flexWrap: 'wrap'\r              }}\r              initial={{ opacity: 0 }}\r              animate={{ opacity: 1 }}\r              transition={{ delay: 3, duration: 0.8 }}\r            >\r              <span style={{ color: 'rgba(255,255,255,0.9)', fontSize: 15 }}>✓ Kredi kartı gerekmez</span>\r              <span style={{ color: 'rgba(255,255,255,0.9)', fontSize: 15 }}>✓ 5 dakikada kurulum</span>\r              <span style={{ color: 'rgba(255,255,255,0.9)', fontSize: 15 }}>✓ 7/24 destek</span>\r            </motion.div>\r          </motion.div>\r        </motion.div>\r      </div>\r    </section>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/AnimatedHero/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { Typography, Tag, Card, Row, Col, Button, Space, Badge, Divider, Tooltip } from 'antd';\rimport {\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  InfoCircleOutlined,\r  CrownOutlined,\r  RocketOutlined,\r  ThunderboltOutlined,\r  StarFilled,\r  TeamOutlined,\r  CloudOutlined,\r  ApiOutlined,\r  SafetyOutlined,\r  CustomerServiceOutlined,\r  FileProtectOutlined,\r  DashboardOutlined,\r  SettingOutlined,\r  MinusOutlined,\r  AppstoreOutlined\r} from '@ant-design/icons';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport './style.css';\rconst { Title, Paragraph, Text } = Typography;\rconst plansData = [\r  {\r    key: 'starter',\r    name: 'Başlangıç',\r    description: 'Küçük işletmeler ve yeni başlayanlar için',\r    price: 499,\r    period: 'ay',\r    icon: <RocketOutlined />,\r    color: '#667eea',\r    gradient: 'linear-gradient(135deg, #667eea, #764ba2)',\r    popular: false,\r    savings: null,\r    features: {\r      included: [\r        { icon: <TeamOutlined />, text: '5 Kullanıcı' },\r        { icon: <CloudOutlined />, text: '10 GB Depolama' },\r        { icon: <DashboardOutlined />, text: '3 Ana Modül (CRM, Stok, Satış)' },\r        { icon: <FileProtectOutlined />, text: 'Temel Raporlar' },\r        { icon: <CustomerServiceOutlined />, text: 'E-posta Desteği' },\r        { icon: <SafetyOutlined />, text: 'Günlük Yedekleme' }\r      ],\r      notIncluded: [\r        'E-Fatura Entegrasyonu',\r        'API Erişimi',\r        '7/24 Telefon Destek',\r        'Finans & Muhasebe Modülü'\r      ]\r    }\r  },\r  {\r    key: 'professional',\r    name: 'Profesyonel',\r    description: 'Büyüyen işletmeler için tam kapsamlı çözüm',\r    price: 999,\r    period: 'ay',\r    icon: <ThunderboltOutlined />,\r    color: '#764ba2',\r    gradient: 'linear-gradient(135deg, #764ba2, #f093fb)',\r    popular: true,\r    savings: 'En popüler seçim',\r    features: {\r      included: [\r        { icon: <TeamOutlined />, text: '25 Kullanıcı' },\r        { icon: <CloudOutlined />, text: '100 GB Depolama' },\r        { icon: <DashboardOutlined />, text: 'Tüm Standart Modüller (5 Modül)' },\r        { icon: <ApiOutlined />, text: 'API Erişimi' },\r        { icon: <FileProtectOutlined />, text: 'Gelişmiş Raporlar & Analizler' },\r        { icon: <CustomerServiceOutlined />, text: '7/24 Telefon & Canlı Destek' },\r        { icon: <SafetyOutlined />, text: 'E-Fatura & E-Arşiv' },\r        { icon: <SettingOutlined />, text: '3 E-Ticaret Entegrasyonu' }\r      ],\r      notIncluded: [\r        'Üretim Planlama Modülü',\r        'Multi-Şirket Yönetimi',\r        'White Label',\r        'Özel Sunucu'\r      ]\r    }\r  },\r  {\r    key: 'enterprise',\r    name: 'Kurumsal',\r    description: 'Büyük ölçekli işletmeler için özel çözümler',\r    price: null,\r    customPrice: 'Özel Fiyat',\r    period: '',\r    icon: <CrownOutlined />,\r    color: '#f093fb',\r    gradient: 'linear-gradient(135deg, #f093fb, #f5576c)',\r    popular: false,\r    savings: 'En kapsamlı paket',\r    features: {\r      included: [\r        { icon: <TeamOutlined />, text: 'Sınırsız Kullanıcı' },\r        { icon: <CloudOutlined />, text: 'Sınırsız Depolama' },\r        { icon: <DashboardOutlined />, text: 'Tüm Modüller + Özel Modüller' },\r        { icon: <ApiOutlined />, text: 'Gelişmiş API & Webhook' },\r        { icon: <FileProtectOutlined />, text: 'Özel Raporlar & BI Entegrasyonu' },\r        { icon: <CustomerServiceOutlined />, text: 'Özel Hesap Yöneticisi' },\r        { icon: <SafetyOutlined />, text: 'SLA Garantisi (%99.9 Uptime)' },\r        { icon: <SettingOutlined />, text: 'Sınırsız Entegrasyon' },\r        { icon: <CrownOutlined />, text: 'White Label Seçeneği' },\r        { icon: <CloudOutlined />, text: 'Özel Sunucu (On-Premise)' }\r      ],\r      notIncluded: []\r    }\r  }\r];\rconst comparisonData = [\r  {\r    category: 'Temel Özellikler',\r    icon: <DashboardOutlined />,\r    features: [\r      { \r        name: 'Kullanıcı Sayısı', \r        starter: '5', \r        professional: '25', \r        enterprise: 'Sınırsız',\r        highlight: true \r      },\r      { \r        name: 'Depolama Alanı', \r        starter: '10 GB', \r        professional: '100 GB', \r        enterprise: 'Sınırsız',\r        highlight: true \r      },\r      { \r        name: 'Aylık İşlem Sayısı', \r        starter: '1,000', \r        professional: '10,000', \r        enterprise: 'Sınırsız' \r      },\r      { \r        name: 'Veri Yedekleme', \r        starter: 'Günlük', \r        professional: 'Saatlik', \r        enterprise: 'Gerçek Zamanlı' \r      },\r      { \r        name: 'Kullanıcı Rolleri', \r        starter: '3 Rol', \r        professional: '10 Rol', \r        enterprise: 'Sınırsız' \r      }\r    ]\r  },\r  {\r    category: 'ERP Modülleri',\r    icon: <AppstoreOutlined />,\r    features: [\r      { name: 'CRM Modülü', starter: true, professional: true, enterprise: true },\r      { name: 'Stok Yönetimi', starter: true, professional: true, enterprise: true },\r      { name: 'Satış & Faturalama', starter: true, professional: true, enterprise: true },\r      { name: 'Finans & Muhasebe', starter: false, professional: true, enterprise: true, highlight: true },\r      { name: 'İnsan Kaynakları', starter: false, professional: true, enterprise: true },\r      { name: 'Üretim Planlama', starter: false, professional: false, enterprise: true, highlight: true },\r      { name: 'Proje Yönetimi', starter: false, professional: true, enterprise: true },\r      { name: 'Lojistik Yönetimi', starter: false, professional: false, enterprise: true }\r    ]\r  },\r  {\r    category: 'Entegrasyonlar',\r    icon: <ApiOutlined />,\r    features: [\r      { name: 'E-Fatura / E-Arşiv', starter: false, professional: true, enterprise: true, highlight: true },\r      { name: 'E-Ticaret Platformları', starter: false, professional: '3 Adet', enterprise: 'Sınırsız' },\r      { name: 'Banka Entegrasyonu', starter: false, professional: true, enterprise: true },\r      { name: 'Kargo Entegrasyonu', starter: false, professional: true, enterprise: true },\r      { name: 'Muhasebe Yazılımları', starter: false, professional: true, enterprise: true },\r      { name: 'API Erişimi', starter: false, professional: true, enterprise: true, highlight: true },\r      { name: 'Webhook Desteği', starter: false, professional: false, enterprise: true },\r      { name: 'Özel Entegrasyon', starter: false, professional: false, enterprise: true }\r    ]\r  },\r  {\r    category: 'Destek & Hizmetler',\r    icon: <CustomerServiceOutlined />,\r    features: [\r      { name: 'E-posta Desteği', starter: true, professional: true, enterprise: true },\r      { name: 'Telefon Desteği', starter: false, professional: true, enterprise: true },\r      { name: '7/24 Canlı Destek', starter: false, professional: true, enterprise: true, highlight: true },\r      { name: 'Uzaktan Bağlantı Destek', starter: false, professional: true, enterprise: true },\r      { name: 'Özel Hesap Yöneticisi', starter: false, professional: false, enterprise: true, highlight: true },\r      { name: 'Ücretsiz Eğitim', starter: 'Video', professional: 'Video + Webinar', enterprise: 'Yerinde Eğitim' },\r      { name: 'SLA Garantisi', starter: false, professional: false, enterprise: '%99.9' },\r      { name: 'Öncelikli Destek', starter: false, professional: false, enterprise: true }\r    ]\r  },\r  {\r    category: 'Gelişmiş Özellikler',\r    icon: <SettingOutlined />,\r    features: [\r      { name: 'Özel Raporlar', starter: false, professional: true, enterprise: true },\r      { name: 'BI Entegrasyonu', starter: false, professional: false, enterprise: true },\r      { name: 'Multi-Şirket Yönetimi', starter: false, professional: false, enterprise: true, highlight: true },\r      { name: 'White Label', starter: false, professional: false, enterprise: true, highlight: true },\r      { name: 'Özel Geliştirme', starter: false, professional: false, enterprise: true },\r      { name: 'Özel Sunucu (On-Premise)', starter: false, professional: false, enterprise: true },\r      { name: 'Veri İmport/Export API', starter: false, professional: true, enterprise: true },\r      { name: 'SSO (Single Sign-On)', starter: false, professional: false, enterprise: true }\r    ]\r  }\r];\rconst plans = [\r  {\r    key: 'starter',\r    name: 'Başlangıç',\r    price: 499,\r    icon: <RocketOutlined />,\r    color: '#667eea',\r    popular: false\r  },\r  {\r    key: 'professional',\r    name: 'Profesyonel',\r    price: 999,\r    icon: <ThunderboltOutlined />,\r    color: '#764ba2',\r    popular: true\r  },\r  {\r    key: 'enterprise',\r    name: 'Kurumsal',\r    price: 'Özel Fiyat',\r    icon: <CrownOutlined />,\r    color: '#f093fb',\r    popular: false\r  }\r];\rexport const ComparisonTable: React.FC = () => {\r  const [selectedTab, setSelectedTab] = useState<'overview' | 'detailed'>('overview');\r  const [expandedCategory, setExpandedCategory] = useState<string | null>('Temel Özellikler');\r  const renderFeatureValue = (value: boolean | string | number) => {\r    if (typeof value === 'boolean') {\r      return value ? (\r        <CheckCircleOutlined style={{ color: '#52c41a', fontSize: '20px' }} />\r      ) : (\r        <MinusOutlined style={{ color: '#cbd5e0', fontSize: '20px' }} />\r      );\r    }\r    return <Text strong style={{ color: '#2d3748', fontSize: '14px' }}>{value}</Text>;\r  };\r  return (\r    <section className=\"comparison-section\" id=\"comparison\" style={{ \r      padding: '100px 0', \r      background: 'linear-gradient(180deg, #ffffff 0%, #fafbfc 100%)' \r    }}>\r      <div className=\"container\" style={{ maxWidth: '1200px', margin: '0 auto', padding: '0 24px' }}>\r        {/* Header */}\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          whileInView={{ opacity: 1, y: 0 }}\r          viewport={{ once: true }}\r          className=\"section-header\"\r          style={{ textAlign: 'center', marginBottom: '60px' }}\r        >\r          <Tag color=\"purple\" style={{ marginBottom: 16, padding: '6px 16px', fontSize: '14px' }}>\r            <StarFilled /> Karşılaştırma\r          </Tag>\r          <Title level={2} style={{ fontSize: '42px', fontWeight: '700', marginBottom: '16px' }}>\r            Size En Uygun Planı Seçin\r          </Title>\r          <Paragraph style={{ fontSize: '18px', color: '#718096', maxWidth: '600px', margin: '0 auto' }}>\r            İhtiyacınıza göre esnek fiyatlandırma seçenekleri\r          </Paragraph>\r        </motion.div>\r        {/* Tab Switcher */}\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          whileInView={{ opacity: 1, y: 0 }}\r          viewport={{ once: true }}\r          transition={{ delay: 0.1 }}\r          style={{ textAlign: 'center', marginBottom: '48px' }}\r        >\r          <Space size=\"large\">\r            <Button\r              size=\"large\"\r              type={selectedTab === 'overview' ? 'primary' : 'default'}\r              onClick={() => setSelectedTab('overview')}\r              style={{\r                padding: '0 32px',\r                height: '48px',\r                fontSize: '16px',\r                borderRadius: '8px',\r                ...(selectedTab === 'overview' && {\r                  background: 'linear-gradient(135deg, #667eea, #764ba2)',\r                  border: 'none'\r                })\r              }}\r            >\r              Genel Bakış\r            </Button>\r            <Button\r              size=\"large\"\r              type={selectedTab === 'detailed' ? 'primary' : 'default'}\r              onClick={() => setSelectedTab('detailed')}\r              style={{\r                padding: '0 32px',\r                height: '48px',\r                fontSize: '16px',\r                borderRadius: '8px',\r                ...(selectedTab === 'detailed' && {\r                  background: 'linear-gradient(135deg, #667eea, #764ba2)',\r                  border: 'none'\r                })\r              }}\r            >\r              Detaylı Karşılaştırma\r            </Button>\r          </Space>\r        </motion.div>\r        {/* Overview Tab */}\r        <AnimatePresence mode=\"wait\">\r          {selectedTab === 'overview' && (\r            <motion.div\r              key=\"overview\"\r              initial={{ opacity: 0, x: -20 }}\r              animate={{ opacity: 1, x: 0 }}\r              exit={{ opacity: 0, x: 20 }}\r              transition={{ duration: 0.3 }}\r            >\r              <Row gutter={[32, 32]}>\r                {plansData.map((plan, index) => (\r                  <Col xs={24} md={8} key={plan.key}>\r                    <motion.div\r                      initial={{ opacity: 0, y: 20 }}\r                      animate={{ opacity: 1, y: 0 }}\r                      transition={{ delay: index * 0.1 }}\r                    >\r                      <Card\r                        hoverable\r                        style={{\r                          height: '100%',\r                          borderRadius: '20px',\r                          border: plan.popular ? `2px solid ${plan.color}` : '1px solid #e2e8f0',\r                          position: 'relative',\r                          overflow: 'visible',\r                          transform: plan.popular ? 'scale(1.05)' : 'scale(1)',\r                          boxShadow: plan.popular \r                            ? '0 20px 60px rgba(102, 126, 234, 0.2)'\r                            : '0 4px 20px rgba(0,0,0,0.08)',\r                          transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)'\r                        }}\r                        onMouseEnter={(e) => {\r                          if (!plan.popular) {\r                            e.currentTarget.style.transform = 'translateY(-8px)';\r                            e.currentTarget.style.boxShadow = '0 12px 40px rgba(102, 126, 234, 0.15)';\r                          }\r                        }}\r                        onMouseLeave={(e) => {\r                          if (!plan.popular) {\r                            e.currentTarget.style.transform = 'translateY(0)';\r                            e.currentTarget.style.boxShadow = '0 4px 20px rgba(0,0,0,0.08)';\r                          }\r                        }}\r                      >\r                        {plan.popular && (\r                          <div style={{\r                            position: 'absolute',\r                            top: '-12px',\r                            left: '50%',\r                            transform: 'translateX(-50%)',\r                            zIndex: 1\r                          }}>\r                            <Badge \r                              count=\"EN POPÜLER\" \r                              style={{ \r                                background: plan.gradient,\r                                fontSize: '12px',\r                                padding: '4px 16px',\r                                height: 'auto',\r                                borderRadius: '12px',\r                                fontWeight: '600'\r                              }} \r                            />\r                          </div>\r                        )}\r                        {/* Plan Header */}\r                        <div style={{\r                          background: plan.gradient,\r                          padding: '32px',\r                          borderRadius: '20px 20px 0 0',\r                          textAlign: 'center',\r                          color: 'white'\r                        }}>\r                          <div style={{ fontSize: '48px', marginBottom: '16px' }}>\r                            {plan.icon}\r                          </div>\r                          <Title level={3} style={{ color: 'white', margin: '0 0 8px 0' }}>\r                            {plan.name}\r                          </Title>\r                          <Paragraph style={{ color: 'rgba(255,255,255,0.9)', margin: 0 }}>\r                            {plan.description}\r                          </Paragraph>\r                        </div>\r                        {/* Price Section */}\r                        <div style={{ padding: '32px', textAlign: 'center', borderBottom: '1px solid #e2e8f0' }}>\r                          {plan.price ? (\r                            <div>\r                              <span style={{ fontSize: '24px', color: '#718096' }}>₺</span>\r                              <span style={{ fontSize: '48px', fontWeight: '700', color: '#2d3748' }}>\r                                {plan.price}\r                              </span>\r                              <span style={{ fontSize: '18px', color: '#718096' }}>/{plan.period}</span>\r                              {plan.savings && (\r                                <div style={{ marginTop: '8px' }}>\r                                  <Tag color={plan.popular ? 'green' : 'blue'}>{plan.savings}</Tag>\r                                </div>\r                              )}\r                            </div>\r                          ) : (\r                            <div>\r                              <span style={{ fontSize: '32px', fontWeight: '600', color: '#2d3748' }}>\r                                {plan.customPrice}\r                              </span>\r                              {plan.savings && (\r                                <div style={{ marginTop: '8px' }}>\r                                  <Tag color=\"purple\">{plan.savings}</Tag>\r                                </div>\r                              )}\r                            </div>\r                          )}\r                        </div>\r                        {/* Features List */}\r                        <div style={{ padding: '32px' }}>\r                          <div style={{ marginBottom: '24px' }}>\r                            <Text strong style={{ fontSize: '14px', color: '#718096', textTransform: 'uppercase' }}>\r                              Dahil Özellikler\r                            </Text>\r                          </div>\r                          <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\r                            {plan.features.included.slice(0, 6).map((feature, idx) => (\r                              <div key={idx} style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r                                <CheckCircleOutlined style={{ color: '#52c41a', fontSize: '18px', flexShrink: 0 }} />\r                                <Text style={{ fontSize: '14px', color: '#2d3748' }}>\r                                  {typeof feature === 'string' ? feature : feature.text}\r                                </Text>\r                              </div>\r                            ))}\r                          </Space>\r                          {plan.features.notIncluded.length > 0 && (\r                            <>\r                              <Divider />\r                              <Space direction=\"vertical\" size=\"small\" style={{ width: '100%', opacity: 0.5 }}>\r                                {plan.features.notIncluded.slice(0, 3).map((feature, idx) => (\r                                  <div key={idx} style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r                                    <CloseCircleOutlined style={{ color: '#cbd5e0', fontSize: '18px', flexShrink: 0 }} />\r                                    <Text style={{ fontSize: '14px', color: '#a0aec0', textDecoration: 'line-through' }}>\r                                      {feature}\r                                    </Text>\r                                  </div>\r                                ))}\r                              </Space>\r                            </>\r                          )}\r                        </div>\r                        {/* CTA Button */}\r                        <div style={{ padding: '0 32px 32px' }}>\r                          <Button\r                            type={plan.popular ? 'primary' : 'default'}\r                            size=\"large\"\r                            block\r                            style={{\r                              height: '56px',\r                              fontSize: '16px',\r                              fontWeight: '600',\r                              borderRadius: '12px',\r                              ...(plan.popular && {\r                                background: plan.gradient,\r                                border: 'none'\r                              })\r                            }}\r                            onClick={() => {\r                              if (plan.key === 'enterprise') {\r                                window.location.href = 'mailto:sales@stocker.app';\r                              } else {\r                                window.location.href = '/register';\r                              }\r                            }}\r                          >\r                            {plan.key === 'enterprise' ? 'Teklif Al' : 'Hemen Başla'}\r                          </Button>\r                        </div>\r                      </Card>\r                    </motion.div>\r                  </Col>\r                ))}\r              </Row>\r            </motion.div>\r          )}\r          {/* Detailed Comparison Tab */}\r          {selectedTab === 'detailed' && (\r            <motion.div\r              key=\"detailed\"\r              initial={{ opacity: 0, x: 20 }}\r              animate={{ opacity: 1, x: 0 }}\r              exit={{ opacity: 0, x: -20 }}\r              transition={{ duration: 0.3 }}\r            >\r              <Card\r                style={{\r                  borderRadius: '20px',\r                  overflow: 'hidden',\r                  boxShadow: '0 10px 40px rgba(0,0,0,0.08)'\r                }}\r              >\r                {/* Table Header */}\r                <div style={{\r                  display: 'grid',\r                  gridTemplateColumns: '2fr 1fr 1fr 1fr',\r                  background: 'linear-gradient(135deg, #667eea15, #764ba210)',\r                  borderBottom: '2px solid #e2e8f0'\r                }}>\r                  <div style={{ padding: '24px', borderRight: '1px solid #e2e8f0' }}>\r                    <Text strong style={{ fontSize: '16px', color: '#2d3748' }}>Özellikler</Text>\r                  </div>\r                  {plansData.map(plan => (\r                    <div key={plan.key} style={{ \r                      padding: '24px', \r                      textAlign: 'center',\r                      borderRight: '1px solid #e2e8f0',\r                      background: plan.popular ? `${plan.color}10` : 'transparent'\r                    }}>\r                      <div style={{ fontSize: '24px', color: plan.color, marginBottom: '8px' }}>\r                        {plan.icon}\r                      </div>\r                      <Text strong style={{ fontSize: '16px', color: '#2d3748' }}>{plan.name}</Text>\r                      {plan.popular && (\r                        <div style={{ marginTop: '4px' }}>\r                          <Tag color={plan.color} style={{ fontSize: '10px' }}>POPÜLER</Tag>\r                        </div>\r                      )}\r                    </div>\r                  ))}\r                </div>\r                {/* Table Body */}\r                <div>\r                  {comparisonData.map((category, catIndex) => (\r                    <div key={catIndex}>\r                      <div\r                        onClick={() => setExpandedCategory(\r                          expandedCategory === category.category ? null : category.category\r                        )}\r                        style={{\r                          display: 'grid',\r                          gridTemplateColumns: '2fr 1fr 1fr 1fr',\r                          background: '#f7fafc',\r                          borderBottom: '1px solid #e2e8f0',\r                          cursor: 'pointer',\r                          transition: 'background 0.2s'\r                        }}\r                        onMouseEnter={(e) = role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => setExpandedCategory(\r                          expandedCategory === category.category ? null : category.category\r                        )(e)}> {\r                          e.currentTarget.style.background = '#edf2f7';\r                        }}\r                        onMouseLeave={(e) => {\r                          e.currentTarget.style.background = '#f7fafc';\r                        }}\r                      >\r                        <div style={{ padding: '16px 24px', display: 'flex', alignItems: 'center', gap: '12px' }}>\r                          <span style={{ fontSize: '20px', color: '#667eea' }}>{category.icon}</span>\r                          <Text strong style={{ fontSize: '14px', color: '#4a5568' }}>\r                            {category.category}\r                          </Text>\r                          <Tag style={{ marginLeft: 'auto' }}>{category.features.length} özellik</Tag>\r                        </div>\r                        <div style={{ gridColumn: 'span 3', padding: '16px' }} />\r                      </div>\r                      <AnimatePresence>\r                        {expandedCategory === category.category && (\r                          <motion.div\r                            initial={{ height: 0, opacity: 0 }}\r                            animate={{ height: 'auto', opacity: 1 }}\r                            exit={{ height: 0, opacity: 0 }}\r                            transition={{ duration: 0.3 }}\r                          >\r                            {category.features.map((feature, featIndex) => (\r                              <div\r                                key={featIndex}\r                                style={{\r                                  display: 'grid',\r                                  gridTemplateColumns: '2fr 1fr 1fr 1fr',\r                                  borderBottom: '1px solid #e2e8f0',\r                                  background: feature.highlight ? '#fffbf0' : 'white'\r                                }}\r                              >\r                                <div style={{ \r                                  padding: '16px 24px', \r                                  paddingLeft: '60px',\r                                  display: 'flex',\r                                  alignItems: 'center',\r                                  gap: '8px'\r                                }}>\r                                  <Text style={{ fontSize: '14px', color: '#4a5568' }}>\r                                    {feature.name}\r                                  </Text>\r                                  {feature.highlight && (\r                                    <Tag color=\"orange\" style={{ fontSize: '10px' }}>YENİ</Tag>\r                                  )}\r                                </div>\r                                <div style={{ padding: '16px', textAlign: 'center', borderLeft: '1px solid #e2e8f0' }}>\r                                  {renderFeatureValue(feature.starter)}\r                                </div>\r                                <div style={{ \r                                  padding: '16px', \r                                  textAlign: 'center', \r                                  borderLeft: '1px solid #e2e8f0',\r                                  background: plansData[1].popular ? '#667eea05' : 'transparent'\r                                }}>\r                                  {renderFeatureValue(feature.professional)}\r                                </div>\r                                <div style={{ padding: '16px', textAlign: 'center', borderLeft: '1px solid #e2e8f0' }}>\r                                  {renderFeatureValue(feature.enterprise)}\r                                </div>\r                              </div>\r                            ))}\r                          </motion.div>\r                        )}\r                      </AnimatePresence>\r                    </div>\r                  ))}\r                </div>\r              </Card>\r            </motion.div>\r          )}\r        </AnimatePresence>\r        {/* Bottom CTA */}\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          whileInView={{ opacity: 1, y: 0 }}\r          viewport={{ once: true }}\r          style={{ marginTop: '80px', textAlign: 'center' }}\r        >\r          <Card\r            style={{\r              background: 'linear-gradient(135deg, #667eea15, #764ba210)',\r              border: 'none',\r              borderRadius: '20px',\r              padding: '48px'\r            }}\r          >\r            <Title level={3} style={{ marginBottom: '16px' }}>\r              Hangi plan size uygun?\r            </Title>\r            <Paragraph style={{ fontSize: '16px', color: '#718096', maxWidth: '600px', margin: '0 auto 32px' }}>\r              İhtiyacınızı tam olarak belirleyemiyorsanız, uzman ekibimiz size en uygun çözümü önermekten mutluluk duyar.\r            </Paragraph>\r            <Space size=\"large\">\r              <Button\r                type=\"primary\"\r                size=\"large\"\r                icon={<CustomerServiceOutlined />}\r                style={{\r                  background: 'linear-gradient(135deg, #667eea, #764ba2)',\r                  border: 'none',\r                  height: '56px',\r                  padding: '0 40px',\r                  fontSize: '16px',\r                  borderRadius: '12px'\r                }}\r                onClick={() = aria-label=\"customer service outlined\"> window.location.href = '/demo'}\r              >\r                Ücretsiz Demo Talebi\r              </Button>\r              <Button\r                size=\"large\"\r                style={{\r                  height: '56px',\r                  padding: '0 40px',\r                  fontSize: '16px',\r                  borderRadius: '12px'\r                }}\r                onClick={() => window.location.href = '/pricing'}\r              >\r                Fiyat Hesaplayıcı\r              </Button>\r            </Space>\r          </Card>\r        </motion.div>\r      </div>\r    </section>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/ComparisonTable/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { \r  Calendar, \r  Typography, \r  Form, \r  Input, \r  Select, \r  Button, \r  Row, \r  Col, \r  Card,\r  Tag,\r  TimePicker,\r  message,\r  Space\r} from 'antd';\rimport {\r  CalendarOutlined,\r  ClockCircleOutlined,\r  UserOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  VideoCameraOutlined,\r  CheckCircleOutlined,\r  TeamOutlined\r} from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport dayjs from 'dayjs';\rimport './style.css';\rconst { Title, Paragraph, Text } = Typography;\rconst { Option } = Select;\rexport const DemoBooking: React.FC = () => {\r  const [form] = Form.useForm();\r  const [selectedDate, setSelectedDate] = useState<dayjs.Dayjs | null>(null);\r  const [selectedTime, setSelectedTime] = useState<string>('');\r  const [loading, setLoading] = useState(false);\r  const availableTimes = [\r    '09:00', '09:30', '10:00', '10:30', '11:00', '11:30',\r    '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00'\r  ];\r  const demoTopics = [\r    'CRM Modülü',\r    'Stok Yönetimi',\r    'Finans & Muhasebe',\r    'İnsan Kaynakları',\r    'Üretim Planlama',\r    'E-Ticaret Entegrasyonu',\r    'Genel Tanıtım'\r  ];\r  const handleSubmit = async (values: any) => {\r    if (!selectedDate || !selectedTime) {\r      message.error('Lütfen tarih ve saat seçin');\r      return;\r    }\r    setLoading(true);\r    // Simulate API call\r    setTimeout(() => {\r      message.success('Demo rezervasyonunuz başarıyla oluşturuldu! E-posta adresinize detaylar gönderildi.');\r      form.resetFields();\r      setSelectedDate(null);\r      setSelectedTime('');\r      setLoading(false);\r    }, 2000);\r  };\r  const disabledDate = (current: dayjs.Dayjs) => {\r    // Disable weekends and past dates\r    return current && (\r      current < dayjs().startOf('day') ||\r      current.day() === 0 ||\r      current.day() === 6\r    );\r  };\r  return (\r    <section className=\"demo-booking-section\" id=\"demo-booking\">\r      <div className=\"section-container\">\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          whileInView={{ opacity: 1, y: 0 }}\r          transition={{ duration: 0.6 }}\r          className=\"section-header\"\r        >\r          <Tag color=\"purple\" className=\"section-tag\">\r            <VideoCameraOutlined /> Canlı Demo\r          </Tag>\r          <Title level={2}>Ücretsiz Demo Rezervasyonu</Title>\r          <Paragraph>\r            Uzman ekibimizle 30 dakikalık özel demo seansı ayırtın\r          </Paragraph>\r        </motion.div>\r        <Row gutter={[48, 48]}>\r          <Col xs={24} lg={12}>\r            <motion.div\r              initial={{ opacity: 0, x: -30 }}\r              whileInView={{ opacity: 1, x: 0 }}\r              transition={{ duration: 0.6 }}\r            >\r              <Card className=\"booking-benefits-card\">\r                <Title level={3}>\r                  <TeamOutlined /> Neden Canlı Demo?\r                </Title>\r                <div className=\"benefits-list\">\r                  <div className=\"benefit-item\">\r                    <CheckCircleOutlined />\r                    <div>\r                      <Text strong>Kişiselleştirilmiş Sunum</Text>\r                      <br />\r                      <Text type=\"secondary\">İşletmenize özel senaryolarla tanıtım</Text>\r                    </div>\r                  </div>\r                  <div className=\"benefit-item\">\r                    <CheckCircleOutlined />\r                    <div>\r                      <Text strong>Anlık Soru-Cevap</Text>\r                      <br />\r                      <Text type=\"secondary\">Tüm sorularınıza anında yanıt</Text>\r                    </div>\r                  </div>\r                  <div className=\"benefit-item\">\r                    <CheckCircleOutlined />\r                    <div>\r                      <Text strong>ROI Hesaplaması</Text>\r                      <br />\r                      <Text type=\"secondary\">Yatırım getirinizi birlikte hesaplayalım</Text>\r                    </div>\r                  </div>\r                  <div className=\"benefit-item\">\r                    <CheckCircleOutlined />\r                    <div>\r                      <Text strong>Özel İndirimler</Text>\r                      <br />\r                      <Text type=\"secondary\">Demo sonrası özel fiyat avantajları</Text>\r                    </div>\r                  </div>\r                </div>\r                <div className=\"demo-stats\">\r                  <div className=\"stat\">\r                    <div className=\"stat-value\">500+</div>\r                    <div className=\"stat-label\">Başarılı Demo</div>\r                  </div>\r                  <div className=\"stat\">\r                    <div className=\"stat-value\">%95</div>\r                    <div className=\"stat-label\">Memnuniyet</div>\r                  </div>\r                  <div className=\"stat\">\r                    <div className=\"stat-value\">30 dk</div>\r                    <div className=\"stat-label\">Ortalama Süre</div>\r                  </div>\r                </div>\r              </Card>\r            </motion.div>\r          </Col>\r          <Col xs={24} lg={12}>\r            <motion.div\r              initial={{ opacity: 0, x: 30 }}\r              whileInView={{ opacity: 1, x: 0 }}\r              transition={{ duration: 0.6 }}\r            >\r              <Card className=\"booking-form-card\">\r                <Title level={3}>\r                  <CalendarOutlined /> Demo Rezervasyon Formu\r                </Title>\r                <Form\r                  form={form}\r                  layout=\"vertical\"\r                  onFinish={handleSubmit}\r                >\r                  <Row gutter={16}>\r                    <Col xs={24} sm={12}>\r                      <Form.Item\r                        name=\"name\"\r                        label=\"Ad Soyad\"\r                        rules={[{ required: true, message: 'Lütfen adınızı girin' }]}\r                      >\r                        <Input \r                          prefix={<UserOutlined / aria-label=\"input field\">} \r                          placeholder=\"Adınız Soyadınız\"\r                          size=\"large\"\r                        />\r                      </Form.Item>\r                    </Col>\r                    <Col xs={24} sm={12}>\r                      <Form.Item\r                        name=\"company\"\r                        label=\"Şirket\"\r                        rules={[{ required: true, message: 'Lütfen şirket adını girin' }]}\r                      >\r                        <Input \r                          placeholder=\"Şirket Adı\"\r                          size=\"large\"\r                        / aria-label=\"input field\">\r                      </Form.Item>\r                    </Col>\r                  </Row>\r                  <Row gutter={16}>\r                    <Col xs={24} sm={12}>\r                      <Form.Item\r                        name=\"email\"\r                        label=\"E-posta\"\r                        rules={[\r                          { required: true, message: 'Lütfen e-posta adresinizi girin' },\r                          { type: 'email', message: 'Geçerli bir e-posta adresi girin' }\r                        ]}\r                      >\r                        <Input \r                          prefix={<MailOutlined / aria-label=\"input field\">} \r                          placeholder=\"ornek@sirket.com\"\r                          size=\"large\"\r                        />\r                      </Form.Item>\r                    </Col>\r                    <Col xs={24} sm={12}>\r                      <Form.Item\r                        name=\"phone\"\r                        label=\"Telefon\"\r                        rules={[{ required: true, message: 'Lütfen telefon numaranızı girin' }]}\r                      >\r                        <Input \r                          prefix={<PhoneOutlined / aria-label=\"input field\">} \r                          placeholder=\"0555 555 55 55\"\r                          size=\"large\"\r                        />\r                      </Form.Item>\r                    </Col>\r                  </Row>\r                  <Form.Item\r                    name=\"topic\"\r                    label=\"Demo Konusu\"\r                    rules={[{ required: true, message: 'Lütfen demo konusunu seçin' }]}\r                  >\r                    <Select \r                      placeholder=\"İlgilendiğiniz modülü seçin\"\r                      size=\"large\"\r                     aria-label=\"select field\">\r                      {demoTopics.map(topic => (\r                        <Option key={topic} value={topic}>{topic}</Option>\r                      ))}\r                    </Select>\r                  </Form.Item>\r                  <div className=\"date-time-selector\">\r                    <Title level={5}>Tarih ve Saat Seçimi</Title>\r                    <div className=\"calendar-wrapper\">\r                      <Calendar\r                        fullscreen={false}\r                        disabledDate={disabledDate}\r                        onSelect={(date) => {\r                          setSelectedDate(date);\r                          setSelectedTime('');\r                        }}\r                      />\r                    </div>\r                    {selectedDate && (\r                      <div className=\"time-slots\">\r                        <Text strong>\r                          {selectedDate.format('DD MMMM YYYY')} için uygun saatler:\r                        </Text>\r                        <div className=\"time-grid\">\r                          {availableTimes.map(time => (\r                            <Button\r                              key={time}\r                              type={selectedTime === time ? 'primary' : 'default'}\r                              onClick={() => setSelectedTime(time)}\r                              className=\"time-slot\"\r                            >\r                              <ClockCircleOutlined /> {time}\r                            </Button>\r                          ))}\r                        </div>\r                      </div>\r                    )}\r                  </div>\r                  <Form.Item\r                    name=\"message\"\r                    label=\"Notlarınız (Opsiyonel)\"\r                  >\r                    <Input.TextArea \r                      rows={3}\r                      placeholder=\"Özel talepleriniz veya sorularınız varsa belirtebilirsiniz\"\r                    / aria-label=\"input field\">\r                  </Form.Item>\r                  <Button\r                    type=\"primary\"\r                    htmlType=\"submit\"\r                    size=\"large\"\r                    block\r                    loading={loading}\r                    disabled={!selectedDate || !selectedTime}\r                    className=\"submit-button\"\r                  >\r                    Demo Rezervasyonu Yap\r                  </Button>\r                  {selectedDate && selectedTime && (\r                    <div className=\"selection-summary\">\r                      <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 8 }} />\r                      <Text>\r                        Seçilen tarih ve saat: \r                        <strong> {selectedDate.format('DD MMMM YYYY')} - {selectedTime}</strong>\r                      </Text>\r                    </div>\r                  )}\r                </Form>\r              </Card>\r            </motion.div>\r          </Col>\r        </Row>\r      </div>\r    </section>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/DemoBooking/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React from 'react';\rimport { Button, Space, Typography, Badge } from 'antd';\rimport { \r  RocketOutlined, \r  UserOutlined, \r  DashboardOutlined, \r  PlayCircleOutlined,\r  ArrowRightOutlined,\r  StarOutlined \r} from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport { useVisitorTracking } from '@/shared/hooks/useVisitorTracking';\rimport { useAuthStore } from '@/app/store/auth.store';\rimport './style.css';\rinterface DynamicCTAProps {\r  size?: 'small' | 'large';\r  variant?: 'header' | 'hero' | 'footer';\r}\rexport const DynamicCTA: React.FC<DynamicCTAProps> = ({ \r  size = 'large', \r  variant = 'hero' \r}) => {\r  const navigate = useNavigate();\r  const { currentVisitType, trackInterest } = useVisitorTracking();\r  const { isAuthenticated, user } = useAuthStore();\r  const handleCTAClick = (action: string, route: string) => {\r    trackInterest(action);\r    navigate(route);\r  };\r  // For authenticated users\r  if (isAuthenticated && user) {\r    const userRole = user.roles?.[0];\r    let dashboardRoute = '/app/default';\r    if (userRole === 'SystemAdmin') dashboardRoute = '/master';\r    else if (userRole === 'TenantAdmin' || userRole === 'Admin') dashboardRoute = '/admin';\r    return (\r      <div className={`dynamic-cta dynamic-cta--${variant} dynamic-cta--${size}`}>\r        <Space size=\"large\" wrap className=\"cta-buttons\">\r          <Button \r            type=\"primary\" \r            size={size}\r            icon={<DashboardOutlined />}\r            onClick={() = aria-label=\"dashboard outlined\"> handleCTAClick('dashboard-access', dashboardRoute)}\r            className=\"cta-primary dashboard-cta\"\r          >\r            Panele Dön\r          </Button>\r          <Button \r            size={size}\r            ghost={variant === 'hero'}\r            icon={<StarOutlined />}\r            onClick={() = aria-label=\"star outlined\"> handleCTAClick('explore-features', '/#features')}\r            className=\"cta-secondary\"\r          >\r            Yeni Özellikleri Keşfet\r          </Button>\r        </Space>\r        {variant === 'hero' && (\r          <div className=\"welcome-back-message\">\r            <Typography.Text style={{ color: 'rgba(255,255,255,0.9)' }}>\r              Tekrar hoş geldin, {user.firstName || 'Kullanıcı'}! 👋\r            </Typography.Text>\r          </div>\r        )}\r      </div>\r    );\r  }\r  // For different visitor types\r  switch (currentVisitType) {\r    case 'first-time':\r      return (\r        <div className={`dynamic-cta dynamic-cta--${variant} dynamic-cta--${size}`}>\r          <Space size=\"large\" wrap className=\"cta-buttons\">\r            <Badge.Ribbon text=\"14 Gün Ücretsiz\" color=\"gold\">\r              <Button \r                type=\"primary\" \r                size={size}\r                icon={<RocketOutlined />}\r                onClick={() = aria-label=\"rocket outlined\"> handleCTAClick('free-trial', '/register')}\r                className=\"cta-primary free-trial-cta\"\r              >\r                Ücretsiz Deneyin\r              </Button>\r            </Badge.Ribbon>\r            <Button \r              size={size}\r              ghost={variant === 'hero'}\r              icon={<PlayCircleOutlined />}\r              onClick={() = aria-label=\"play circle outlined\"> handleCTAClick('watch-demo', '/#demo')}\r              className=\"cta-secondary demo-cta\"\r            >\r              Önce İzle\r            </Button>\r          </Space>\r          {variant === 'hero' && (\r            <div className=\"first-time-benefits\">\r              <Typography.Text style={{ color: 'rgba(255,255,255,0.9)' }}>\r                ✨ Kurulum ücreti yok • ⚡ Anında başlayın • 🔒 Güvenli\r              </Typography.Text>\r            </div>\r          )}\r        </div>\r      );\r    case 'returning':\r      return (\r        <div className={`dynamic-cta dynamic-cta--${variant} dynamic-cta--${size}`}>\r          <Space size=\"large\" wrap className=\"cta-buttons\">\r            <Button \r              type=\"primary\" \r              size={size}\r              icon={<UserOutlined />}\r              onClick={() = aria-label=\"user outlined\"> handleCTAClick('login-returning', '/login')}\r              className=\"cta-primary login-cta\"\r            >\r              Giriş Yap\r            </Button>\r            <Button \r              size={size}\r              ghost={variant === 'hero'}\r              icon={<ArrowRightOutlined />}\r              onClick={() = aria-label=\"arrow right outlined\"> handleCTAClick('continue-trial', '/register')}\r              className=\"cta-secondary trial-cta\"\r            >\r              Deneme Sürümü Başlat\r            </Button>\r          </Space>\r          {variant === 'hero' && (\r            <div className=\"returning-message\">\r              <Typography.Text style={{ color: 'rgba(255,255,255,0.9)' }}>\r                Tekrar hoş geldiniz! Kaldığınız yerden devam edin 🚀\r              </Typography.Text>\r            </div>\r          )}\r        </div>\r      );\r    case 'active-user':\r      return (\r        <div className={`dynamic-cta dynamic-cta--${variant} dynamic-cta--${size}`}>\r          <Space size=\"large\" wrap className=\"cta-buttons\">\r            <Button \r              type=\"primary\" \r              size={size}\r              icon={<DashboardOutlined />}\r              onClick={() = aria-label=\"dashboard outlined\"> handleCTAClick('access-dashboard', '/login')}\r              className=\"cta-primary dashboard-cta\"\r            >\r              Panelime Giriş\r            </Button>\r            <Button \r              size={size}\r              ghost={variant === 'hero'}\r              icon={<StarOutlined />}\r              onClick={() = aria-label=\"star outlined\"> handleCTAClick('whats-new', '/#features')}\r              className=\"cta-secondary\"\r            >\r              Yenilikler\r            </Button>\r          </Space>\r          {variant === 'hero' && (\r            <div className=\"active-user-message\">\r              <Typography.Text style={{ color: 'rgba(255,255,255,0.9)' }}>\r                Hoş geldin! Son güncellemelerimizi keşfet ⭐\r              </Typography.Text>\r            </div>\r          )}\r        </div>\r      );\r    default:\r      return (\r        <div className={`dynamic-cta dynamic-cta--${variant} dynamic-cta--${size}`}>\r          <Space size=\"large\" wrap className=\"cta-buttons\">\r            <Button \r              type=\"primary\" \r              size={size}\r              icon={<RocketOutlined />}\r              onClick={() = aria-label=\"rocket outlined\"> handleCTAClick('get-started', '/register')}\r              className=\"cta-primary\"\r            >\r              Başlayın\r            </Button>\r            <Button \r              size={size}\r              ghost={variant === 'hero'}\r              icon={<UserOutlined />}\r              onClick={() = aria-label=\"user outlined\"> handleCTAClick('login', '/login')}\r              className=\"cta-secondary\"\r            >\r              Giriş Yap\r            </Button>\r          </Space>\r        </div>\r      );\r  }\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/DynamicCTA/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { Typography, Tag, Card, Row, Col, Button, Space } from 'antd';\rimport { \r  QuestionCircleOutlined,\r  PlusOutlined,\r  MinusOutlined,\r  RocketOutlined,\r  SafetyOutlined,\r  DollarOutlined,\r  MobileOutlined,\r  CustomerServiceOutlined,\r  CloudOutlined\r} from '@ant-design/icons';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport './style.css';\rconst { Title, Paragraph, Text } = Typography;\rconst faqCategories = [\r  {\r    key: 'general',\r    title: 'Genel Bilgiler',\r    icon: <RocketOutlined />,\r    color: '#667eea',\r    questions: [\r      {\r        id: '1',\r        question: 'Stocker ERP nedir ve kimler için uygundur?',\r        answer: 'Stocker, küçük ve orta ölçekli işletmeler için tasarlanmış bulut tabanlı, modüler bir ERP çözümüdür. CRM, Stok, Satış, Finans, İK ve Üretim modülleriyle işletmenizin tüm süreçlerini tek platformda yönetebilirsiniz. Perakende, üretim, hizmet ve dağıtım sektörlerindeki 10-500 çalışanlı işletmeler için idealdir.',\r        highlights: ['6 Ana Modül', 'Bulut Tabanlı', 'Sektörel Çözümler', 'Ölçeklenebilir']\r      },\r      {\r        id: '2',\r        question: 'Diğer ERP sistemlerinden farkı nedir?',\r        answer: 'Stocker, kullanıcı dostu arayüzü, hızlı kurulumu ve uygun fiyatlandırmasıyla öne çıkar. Karmaşık ERP sistemlerinin aksine, 5 dakikada kurulum yapabilir ve aynı gün kullanmaya başlayabilirsiniz. Türkiye\\'ye özel e-fatura, e-arşiv entegrasyonları ve yerel destek hizmetimiz bulunur.',\r        highlights: ['Kolay Kullanım', 'Hızlı Kurulum', 'Yerel Destek', 'Uygun Fiyat']\r      },\r      {\r        id: '3',\r        question: 'Hangi sektörler için özel çözümler sunuyorsunuz?',\r        answer: 'Perakende, E-ticaret, Üretim, Dağıtım, Toptan Satış, Hizmet ve Restoran sektörleri için özelleştirilmiş çözümlerimiz mevcuttur. Her sektörün kendine özgü iş süreçlerine uygun hazır şablonlar, raporlar ve otomasyonlar sunuyoruz.',\r        highlights: ['7+ Sektör', 'Hazır Şablonlar', 'Sektörel Raporlar', 'Özel İş Akışları']\r      }\r    ]\r  },\r  {\r    key: 'pricing',\r    title: 'Fiyatlandırma & Deneme',\r    icon: <DollarOutlined />,\r    color: '#f093fb',\r    questions: [\r      {\r        id: '4',\r        question: '14 günlük ücretsiz deneme nasıl çalışır?',\r        answer: 'Kayıt olduktan sonra tüm özelliklere 14 gün boyunca ücretsiz erişim sağlarsınız. Kredi kartı bilgisi istenmez, otomatik ödeme alınmaz. Deneme süresince tüm modülleri test edebilir, veri girişi yapabilir ve destek alabilirsiniz. Süre sonunda dilediğiniz paketi seçerek devam edebilirsiniz.',\r        highlights: ['Kredi Kartı Gerekmez', 'Tüm Özellikler Açık', 'Otomatik Ödeme Yok', 'Veri Kaybı Yok']\r      },\r      {\r        id: '5',\r        question: 'Fiyatlandırma modeli nasıl işliyor?',\r        answer: 'Kullanıcı sayısı ve seçtiğiniz modüllere göre esnek fiyatlandırma sunuyoruz. Başlangıç paketimiz 5 kullanıcı ve 3 modül ile aylık 499 TL\\'den başlar. İhtiyacınıza göre modül ve kullanıcı ekleyebilirsiniz. Yıllık ödemede %20, 2 yıllık ödemede %30 indirim uygulanır.',\r        highlights: ['Modüler Fiyatlama', 'Aylık/Yıllık Ödeme', '%30\\'a Varan İndirim', 'Şeffaf Fiyatlar']\r      },\r      {\r        id: '6',\r        question: 'Gizli ücretler var mı?',\r        answer: 'Hayır, fiyatlarımız tamamen şeffaftır. Kurulum ücreti, güncelleme ücreti veya gizli ücret yoktur. Sadece seçtiğiniz paket ücretini ödersiniz. Ek kullanıcı, modül veya depolama alanı ihtiyacınız olursa, bunların fiyatları web sitemizde açıkça belirtilmiştir.',\r        highlights: ['Kurulum Ücreti Yok', 'Güncelleme Ücretsiz', 'Şeffaf Fiyatlama', 'Sürpriz Yok']\r      }\r    ]\r  },\r  {\r    key: 'security',\r    title: 'Güvenlik & Veri',\r    icon: <SafetyOutlined />,\r    color: '#764ba2',\r    questions: [\r      {\r        id: '7',\r        question: 'Verilerim güvende mi?',\r        answer: 'Evet, verileriniz en yüksek güvenlik standartlarıyla korunur. 256-bit SSL şifreleme, ISO 27001 sertifikası, KVKK uyumluluğu ve günlük otomatik yedekleme ile verilerinizin güvenliğini garanti altına alırız. Verileriniz Türkiye\\'deki Tier 3 veri merkezlerinde saklanır.',\r        highlights: ['SSL Şifreleme', 'ISO 27001', 'KVKK Uyumlu', 'Günlük Yedekleme']\r      },\r      {\r        id: '8',\r        question: 'Veri kaybı durumunda ne olur?',\r        answer: 'Verileriniz günlük olarak otomatik yedeklenir ve 30 gün geriye dönük yedekler saklanır. Herhangi bir veri kaybı durumunda, son yedekten geri yükleme yapılır. Ayrıca, kritik verilerinizi istediğiniz zaman Excel/PDF olarak dışa aktarabilirsiniz.',\r        highlights: ['Günlük Yedekleme', '30 Gün Saklama', 'Anında Geri Yükleme', 'Veri Dışa Aktarım']\r      },\r      {\r        id: '9',\r        question: 'Verilerimi nasıl dışa aktarabilirim?',\r        answer: 'Tüm verilerinizi Excel, CSV veya PDF formatında dışa aktarabilirsiniz. API erişimi ile verilerinizi programatik olarak çekebilirsiniz. Aboneliğinizi iptal ederseniz, 90 gün içinde tüm verilerinizi indirebilirsiniz.',\r        highlights: ['Excel/CSV/PDF', 'API Erişimi', '90 Gün Saklama', 'Toplu İndirme']\r      }\r    ]\r  },\r  {\r    key: 'technical',\r    title: 'Teknik & Kurulum',\r    icon: <CloudOutlined />,\r    color: '#43e97b',\r    questions: [\r      {\r        id: '10',\r        question: 'Kurulum için teknik bilgi gerekli mi?',\r        answer: 'Hayır, hiçbir teknik bilgi gerekmez. Stocker bulut tabanlı SaaS bir çözümdür. Web tarayıcınızdan giriş yaparak hemen kullanmaya başlayabilirsiniz. Sunucu kurulumu, veritabanı yapılandırması gibi teknik işlemlerle uğraşmanıza gerek yoktur.',\r        highlights: ['Kurulum Gerektirmez', 'Tarayıcı Tabanlı', 'Otomatik Güncellemeler', 'IT Desteği Gerekmez']\r      },\r      {\r        id: '11',\r        question: 'Mevcut sistemimden veri aktarımı yapabilir miyim?',\r        answer: 'Evet, Excel, CSV formatındaki verilerinizi kolayca aktarabilirsiniz. Logo, Mikro, SAP, Netsis gibi popüler sistemlerden veri aktarımı için hazır şablonlarımız var. Destek ekibimiz veri aktarım sürecinde ücretsiz yardım sağlar.',\r        highlights: ['Excel/CSV Desteği', 'Hazır Şablonlar', 'Ücretsiz Destek', 'Popüler Sistemlerle Uyumlu']\r      },\r      {\r        id: '12',\r        question: 'Hangi cihazlardan erişebilirim?',\r        answer: 'Web tarayıcısı olan her cihazdan (PC, Mac, tablet) erişebilirsiniz. iOS ve Android için özel mobil uygulamalarımız mevcuttur. Responsive tasarım sayesinde tüm ekran boyutlarında sorunsuz çalışır. İnternet bağlantınız olduğu her yerden güvenli erişim sağlayabilirsiniz.',\r        highlights: ['Web + Mobil', 'iOS & Android', 'Responsive Tasarım', 'Her Yerden Erişim']\r      }\r    ]\r  },\r  {\r    key: 'support',\r    title: 'Destek & Eğitim',\r    icon: <CustomerServiceOutlined />,\r    color: '#4facfe',\r    questions: [\r      {\r        id: '13',\r        question: 'Ne tür destek hizmetleri sunuyorsunuz?',\r        answer: '7/24 canlı destek, telefon desteği, e-posta desteği ve uzaktan bağlantı desteği sunuyoruz. Ayrıca kapsamlı dokümantasyon, video eğitimler ve canlı webinarlarımız mevcuttur. Premium paketlerde özel hesap yöneticisi atanır.',\r        highlights: ['7/24 Canlı Destek', 'Telefon & E-posta', 'Uzaktan Bağlantı', 'Özel Hesap Yöneticisi']\r      },\r      {\r        id: '14',\r        question: 'Eğitim ve adaptasyon süreci nasıl işliyor?',\r        answer: 'İlk kayıt sonrası ücretsiz tanışma görüşmesi yapılır. Temel eğitim videoları ve canlı webinarlarla hızlı başlangıç sağlanır. İlk 30 gün boyunca yoğunlaştırılmış destek verilir. Kurumsal paketlerde yerinde eğitim seçeneği sunulur.',\r        highlights: ['Ücretsiz Eğitim', 'Canlı Webinarlar', '30 Gün Özel Destek', 'Yerinde Eğitim']\r      },\r      {\r        id: '15',\r        question: 'Özelleştirme ve entegrasyon desteği var mı?',\r        answer: 'Evet, işletmenize özel rapor, form ve iş akışları oluşturabilirsiniz. E-ticaret, muhasebe, kargo ve ödeme sistemleriyle hazır entegrasyonlarımız var. API ile özel entegrasyonlar yapabilir veya profesyonel hizmet alabilirsiniz.',\r        highlights: ['Özel Raporlar', 'Hazır Entegrasyonlar', 'API Desteği', 'Profesyonel Hizmet']\r      }\r    ]\r  }\r];\rexport const FAQSection: React.FC = () => {\r  const [selectedCategory, setSelectedCategory] = useState('general');\r  const [expandedItems, setExpandedItems] = useState<string[]>(['1']);\r  const toggleExpand = (id: string) => {\r    setExpandedItems(prev => \r      prev.includes(id) \r        ? prev.filter(item => item !== id)\r        : [...prev, id]\r    );\r  };\r  const currentCategory = faqCategories.find(cat => cat.key === selectedCategory);\r  return (\r    <section className=\"faq-section\" id=\"faq\" style={{ padding: '100px 0', background: 'linear-gradient(180deg, #fafbfc 0%, #ffffff 100%)' }}>\r      <div className=\"container\" style={{ maxWidth: '1200px', margin: '0 auto', padding: '0 24px' }}>\r        {/* Header */}\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          whileInView={{ opacity: 1, y: 0 }}\r          viewport={{ once: true }}\r          className=\"section-header\"\r          style={{ textAlign: 'center', marginBottom: '60px' }}\r        >\r          <Tag color=\"purple\" style={{ marginBottom: 16, padding: '6px 16px', fontSize: '14px' }}>\r            <QuestionCircleOutlined /> SSS\r          </Tag>\r          <Title level={2} style={{ fontSize: '42px', fontWeight: '700', marginBottom: '16px' }}>\r            Sıkça Sorulan Sorular\r          </Title>\r          <Paragraph style={{ fontSize: '18px', color: '#718096', maxWidth: '600px', margin: '0 auto' }}>\r            Stocker ERP hakkında merak ettiğiniz her şey\r          </Paragraph>\r        </motion.div>\r        {/* Category Tabs */}\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          whileInView={{ opacity: 1, y: 0 }}\r          viewport={{ once: true }}\r          transition={{ delay: 0.1 }}\r          style={{ marginBottom: '48px' }}\r        >\r          <Row gutter={[16, 16]} justify=\"center\">\r            {faqCategories.map((category) => (\r              <Col key={category.key}>\r                <motion.div\r                  whileHover={{ scale: 1.05 }}\r                  whileTap={{ scale: 0.95 }}\r                >\r                  <Card\r                    hoverable\r                    onClick={() => setSelectedCategory(category.key)}\r                    style={{\r                      cursor: 'pointer',\r                      borderRadius: '12px',\r                      border: selectedCategory === category.key \r                        ? `2px solid ${category.color}`\r                        : '2px solid transparent',\r                      background: selectedCategory === category.key\r                        ? `linear-gradient(135deg, ${category.color}10, ${category.color}05)`\r                        : 'white',\r                      transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\r                      boxShadow: selectedCategory === category.key\r                        ? `0 8px 24px ${category.color}20`\r                        : '0 2px 8px rgba(0,0,0,0.06)'\r                    }}\r                    bodyStyle={{ padding: '20px 24px' }}\r                  >\r                    <Space align=\"center\" size={12}>\r                      <div style={{ \r                        fontSize: '24px', \r                        color: category.color,\r                        display: 'flex',\r                        alignItems: 'center'\r                      }}>\r                        {category.icon}\r                      </div>\r                      <Text strong style={{ \r                        fontSize: '16px',\r                        color: selectedCategory === category.key ? category.color : '#2d3748'\r                      }}>\r                        {category.title}\r                      </Text>\r                    </Space>\r                  </Card>\r                </motion.div>\r              </Col>\r            ))}\r          </Row>\r        </motion.div>\r        {/* Questions */}\r        <Row gutter={[32, 32]}>\r          <Col xs={24}>\r            <AnimatePresence mode=\"wait\">\r              {currentCategory && (\r                <motion.div\r                  key={selectedCategory}\r                  initial={{ opacity: 0, x: 20 }}\r                  animate={{ opacity: 1, x: 0 }}\r                  exit={{ opacity: 0, x: -20 }}\r                  transition={{ duration: 0.3 }}\r                >\r                  <div style={{ maxWidth: '900px', margin: '0 auto' }}>\r                    {currentCategory.questions.map((item, index) => (\r                      <motion.div\r                        key={item.id}\r                        initial={{ opacity: 0, y: 20 }}\r                        animate={{ opacity: 1, y: 0 }}\r                        transition={{ delay: index * 0.1 }}\r                        style={{ marginBottom: '16px' }}\r                      >\r                        <Card\r                          style={{\r                            borderRadius: '16px',\r                            border: expandedItems.includes(item.id)\r                              ? `2px solid ${currentCategory.color}20`\r                              : '1px solid #e2e8f0',\r                            transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\r                            overflow: 'hidden',\r                            boxShadow: expandedItems.includes(item.id)\r                              ? '0 8px 32px rgba(0,0,0,0.08)'\r                              : '0 2px 8px rgba(0,0,0,0.04)'\r                          }}\r                          bodyStyle={{ padding: 0 }}\r                        >\r                          <div\r                            onClick={() => toggleExpand(item.id)}\r                            style={{\r                              padding: '24px 28px',\r                              cursor: 'pointer',\r                              display: 'flex',\r                              justifyContent: 'space-between',\r                              alignItems: 'center',\r                              background: expandedItems.includes(item.id)\r                                ? `linear-gradient(135deg, ${currentCategory.color}05, transparent)`\r                                : 'transparent',\r                              transition: 'background 0.3s'\r                            }}\r                           role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => toggleExpand(item.id)(e)}>\r                            <Text strong style={{ \r                              fontSize: '16px', \r                              color: '#2d3748',\r                              flex: 1,\r                              paddingRight: '20px'\r                            }}>\r                              {item.question}\r                            </Text>\r                            <Button\r                              type=\"text\"\r                              icon={expandedItems.includes(item.id) ? <MinusOutlined /> : <PlusOutlined />}\r                              style={{\r                                color: currentCategory.color,\r                                borderRadius: '8px',\r                                background: `${currentCategory.color}10`\r                              }}\r                            / aria-label=\"button\">\r                          </div>\r                          <AnimatePresence>\r                            {expandedItems.includes(item.id) && (\r                              <motion.div\r                                initial={{ height: 0, opacity: 0 }}\r                                animate={{ height: 'auto', opacity: 1 }}\r                                exit={{ height: 0, opacity: 0 }}\r                                transition={{ duration: 0.3 }}\r                                style={{\r                                  borderTop: `1px solid ${currentCategory.color}10`,\r                                  background: 'white'\r                                }}\r                              >\r                                <div style={{ padding: '24px 28px' }}>\r                                  <Paragraph style={{ \r                                    fontSize: '15px', \r                                    color: '#4a5568',\r                                    marginBottom: '20px',\r                                    lineHeight: '1.7'\r                                  }}>\r                                    {item.answer}\r                                  </Paragraph>\r                                  {item.highlights && (\r                                    <Row gutter={[12, 12]}>\r                                      {item.highlights.map((highlight, idx) => (\r                                        <Col key={idx} xs={12} sm={6}>\r                                          <div style={{\r                                            padding: '8px 12px',\r                                            background: `linear-gradient(135deg, ${currentCategory.color}10, ${currentCategory.color}05)`,\r                                            borderRadius: '8px',\r                                            border: `1px solid ${currentCategory.color}20`,\r                                            textAlign: 'center'\r                                          }}>\r                                            <Text style={{ \r                                              fontSize: '13px', \r                                              color: currentCategory.color,\r                                              fontWeight: '500'\r                                            }}>\r                                              {highlight}\r                                            </Text>\r                                          </div>\r                                        </Col>\r                                      ))}\r                                    </Row>\r                                  )}\r                                </div>\r                              </motion.div>\r                            )}\r                          </AnimatePresence>\r                        </Card>\r                      </motion.div>\r                    ))}\r                  </div>\r                </motion.div>\r              )}\r            </AnimatePresence>\r          </Col>\r        </Row>\r        {/* CTA Footer */}\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          whileInView={{ opacity: 1, y: 0 }}\r          viewport={{ once: true }}\r          style={{ marginTop: '60px', textAlign: 'center' }}\r        >\r          <Card\r            style={{\r              background: 'linear-gradient(135deg, #667eea15, #764ba210)',\r              border: 'none',\r              borderRadius: '16px',\r              padding: '32px'\r            }}\r          >\r            <Title level={4} style={{ marginBottom: '12px' }}>Sorunuz mu var?</Title>\r            <Paragraph style={{ fontSize: '16px', color: '#718096', marginBottom: '24px' }}>\r              Aradığınız cevabı bulamadıysanız, destek ekibimiz size yardımcı olmaktan mutluluk duyar.\r            </Paragraph>\r            <Space size=\"large\">\r              <Button \r                type=\"primary\" \r                size=\"large\"\r                icon={<CustomerServiceOutlined />}\r                style={{ \r                  background: 'linear-gradient(135deg, #667eea, #764ba2)',\r                  border: 'none',\r                  height: '48px',\r                  padding: '0 32px',\r                  fontSize: '16px',\r                  borderRadius: '8px'\r                }}\r                onClick={() = aria-label=\"customer service outlined\"> window.location.href = 'mailto:destek@stocker.app'}\r              >\r                Destek Talebi Oluştur\r              </Button>\r              <Button \r                size=\"large\"\r                icon={<MobileOutlined />}\r                style={{\r                  height: '48px',\r                  padding: '0 32px',\r                  fontSize: '16px',\r                  borderRadius: '8px'\r                }}\r                onClick={() = aria-label=\"mobile outlined\"> window.location.href = 'tel:+908502001234'}\r              >\r                0850 200 12 34\r              </Button>\r            </Space>\r          </Card>\r        </motion.div>\r      </div>\r    </section>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/FAQSection/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport { WhatsAppOutlined, PhoneOutlined, MessageOutlined, QuestionCircleOutlined, CloseOutlined } from '@ant-design/icons';\rexport const FloatingActionButton: React.FC = () => {\r  const [isOpen, setIsOpen] = useState(false);\r  const actions = [\r    { icon: <WhatsAppOutlined />, label: 'WhatsApp', color: '#25D366', link: 'https://wa.me/905555555555' },\r    { icon: <PhoneOutlined />, label: 'Telefon', color: '#667eea', link: 'tel:+905555555555' },\r    { icon: <MessageOutlined />, label: 'Mesaj', color: '#1890ff', onClick: () =>  },\r    { icon: <QuestionCircleOutlined />, label: 'Yardım', color: '#764ba2', onClick: () =>  }\r  ];\r  return (\r    <div style={{ position: 'fixed', bottom: 24, right: 24, zIndex: 1000 }}>\r      <AnimatePresence>\r        {isOpen && (\r          <motion.div\r            initial={{ opacity: 0, scale: 0.5 }}\r            animate={{ opacity: 1, scale: 1 }}\r            exit={{ opacity: 0, scale: 0.5 }}\r            style={{\r              position: 'absolute',\r              bottom: 70,\r              right: 0,\r              display: 'flex',\r              flexDirection: 'column',\r              gap: 12\r            }}\r          >\r            {actions.map((action, index) => (\r              <motion.a\r                key={index}\r                href={action.link}\r                onClick={action.onClick}\r                initial={{ opacity: 0, x: 20 }}\r                animate={{ opacity: 1, x: 0 }}\r                exit={{ opacity: 0, x: 20 }}\r                transition={{ delay: index * 0.1 }}\r                whileHover={{ scale: 1.1 }}\r                whileTap={{ scale: 0.95 }}\r                style={{\r                  display: 'flex',\r                  alignItems: 'center',\r                  gap: 12,\r                  padding: '12px 20px',\r                  background: 'white',\r                  borderRadius: 25,\r                  boxShadow: '0 4px 12px rgba(0,0,0,0.15)',\r                  textDecoration: 'none',\r                  color: '#333',\r                  cursor: 'pointer',\r                  minWidth: 150\r                }}\r              >\r                <div \r                  style={{ \r                    fontSize: 20, \r                    color: action.color,\r                    display: 'flex',\r                    alignItems: 'center'\r                  }}\r                >\r                  {action.icon}\r                </div>\r                <span style={{ fontSize: 14, fontWeight: 500 }}>{action.label}</span>\r              </motion.a>\r            ))}\r          </motion.div>\r        )}\r      </AnimatePresence>\r      <motion.button\r        onClick={() => setIsOpen(!isOpen)}\r        whileHover={{ scale: 1.1 }}\r        whileTap={{ scale: 0.95 }}\r        animate={{ rotate: isOpen ? 45 : 0 }}\r        style={{\r          width: 56,\r          height: 56,\r          borderRadius: '50%',\r          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r          border: 'none',\r          color: 'white',\r          fontSize: 24,\r          display: 'flex',\r          alignItems: 'center',\r          justifyContent: 'center',\r          cursor: 'pointer',\r          boxShadow: '0 4px 20px rgba(102, 126, 234, 0.4)',\r          position: 'relative',\r          zIndex: 10\r        }}\r      >\r        {isOpen ? <CloseOutlined /> : <MessageOutlined />}\r      </motion.button>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/FloatingActionButton/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React from 'react';\rimport { Button, Typography } from 'antd';\rimport { RocketOutlined, PlayCircleOutlined } from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rconst { Title, Paragraph } = Typography;\rinterface HeroSectionProps {\r  scrolled?: boolean;\r  navigate?: any;\r}\rexport const HeroSection: React.FC<HeroSectionProps> = ({ scrolled, navigate: navProp }) => {\r  const navigate = useNavigate();\r  return (\r    <section \r      className=\"hero-section\" \r      style={{\r        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r        minHeight: '100vh',\r        display: 'flex',\r        alignItems: 'center',\r        padding: '80px 0'\r      }}\r    >\r      <div className=\"container\" style={{ maxWidth: 1200, margin: '0 auto', padding: '0 24px' }}>\r        <div style={{ textAlign: 'center', color: 'white' }}>\r          <Title \r            level={1} \r            style={{ \r              fontSize: 'clamp(2.5rem, 5vw, 4rem)', \r              fontWeight: 700,\r              color: 'white',\r              marginBottom: 24,\r              lineHeight: 1.2\r            }}\r          >\r            Tüm İşletme Süreçleriniz<br />Tek Platformda\r          </Title>\r          <Paragraph \r            style={{ \r              fontSize: '1.35rem', \r              color: 'rgba(255,255,255,0.95)',\r              maxWidth: 600,\r              margin: '0 auto 40px',\r              fontWeight: 300\r            }}\r          >\r            Stocker ERP ile işletmenizi dijitalleştirin, verimliliğinizi %40 artırın.\r          </Paragraph>\r          <div style={{ display: 'flex', gap: 20, justifyContent: 'center', flexWrap: 'wrap' }}>\r            <Button\r              type=\"primary\"\r              size=\"large\"\r              icon={<RocketOutlined />}\r              onClick={() = aria-label=\"rocket outlined\"> navigate('/register')}\r              style={{\r                height: 56,\r                paddingLeft: 40,\r                paddingRight: 40,\r                fontSize: 18,\r                background: 'white',\r                color: '#667eea',\r                border: 'none',\r                fontWeight: 600,\r                boxShadow: '0 8px 30px rgba(0,0,0,0.12)',\r                transition: 'all 0.3s'\r              }}\r              onMouseEnter={(e) => {\r                e.currentTarget.style.transform = 'translateY(-2px)';\r                e.currentTarget.style.boxShadow = '0 12px 40px rgba(0,0,0,0.15)';\r              }}\r              onMouseLeave={(e) => {\r                e.currentTarget.style.transform = 'translateY(0)';\r                e.currentTarget.style.boxShadow = '0 8px 30px rgba(0,0,0,0.12)';\r              }}\r            >\r              14 Gün Ücretsiz Dene\r            </Button>\r            <Button\r              size=\"large\"\r              icon={<PlayCircleOutlined />}\r              ghost\r              style={{\r                height: 56,\r                paddingLeft: 40,\r                paddingRight: 40,\r                fontSize: 18,\r                color: 'white',\r                borderColor: 'rgba(255,255,255,0.8)',\r                borderWidth: 2,\r                fontWeight: 500\r              }}\r             aria-label=\"play circle outlined\">\r              Canlı Demo\r            </Button>\r          </div>\r          <div style={{ \r            marginTop: 32,\r            display: 'flex',\r            gap: 24,\r            justifyContent: 'center',\r            alignItems: 'center',\r            flexWrap: 'wrap'\r          }}>\r            <span style={{ color: 'rgba(255,255,255,0.9)', fontSize: 15 }}>✓ Kredi kartı gerekmez</span>\r            <span style={{ color: 'rgba(255,255,255,0.9)', fontSize: 15 }}>✓ 5 dakikada kurulum</span>\r            <span style={{ color: 'rgba(255,255,255,0.9)', fontSize: 15 }}>✓ 7/24 destek</span>\r          </div>\r        </div>\r      </div>\r    </section>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/HeroSection/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { Drawer, Button, Space, Typography, Avatar, Badge } from 'antd';\rimport {\r  MenuOutlined,\r  CloseOutlined,\r  HomeOutlined,\r  AppstoreOutlined,\r  DollarOutlined,\r  StarOutlined,\r  PhoneOutlined,\r  UserOutlined,\r  RocketOutlined,\r  LoginOutlined,\r  PlayCircleOutlined,\r} from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport { useVisitorTracking } from '@/shared/hooks/useVisitorTracking';\rimport { useAuthStore } from '@/app/store/auth.store';\rimport './style.css';\rinterface MobileNavigationProps {\r  className?: string;\r}\rexport const MobileNavigation: React.FC<MobileNavigationProps> = ({ className }) => {\r  const [isOpen, setIsOpen] = useState(false);\r  const [activeSection, setActiveSection] = useState('home');\r  const navigate = useNavigate();\r  const { currentVisitType, trackInterest } = useVisitorTracking();\r  const { isAuthenticated, user } = useAuthStore();\r  const menuItems = [\r    {\r      key: 'home',\r      icon: <HomeOutlined />,\r      label: 'Ana Sayfa',\r      action: () => {\r        document.getElementById('hero')?.scrollIntoView({ behavior: 'smooth' });\r        trackInterest('navigation-home');\r      },\r    },\r    {\r      key: 'features',\r      icon: <AppstoreOutlined />,\r      label: 'Özellikler',\r      action: () => {\r        document.getElementById('features')?.scrollIntoView({ behavior: 'smooth' });\r        trackInterest('navigation-features');\r      },\r    },\r    {\r      key: 'modules',\r      icon: <AppstoreOutlined />,\r      label: 'Modüller',\r      action: () => {\r        document.getElementById('modules')?.scrollIntoView({ behavior: 'smooth' });\r        trackInterest('navigation-modules');\r      },\r    },\r    {\r      key: 'pricing',\r      icon: <DollarOutlined />,\r      label: 'Fiyatlandırma',\r      action: () => {\r        document.getElementById('pricing')?.scrollIntoView({ behavior: 'smooth' });\r        trackInterest('navigation-pricing');\r      },\r    },\r    {\r      key: 'testimonials',\r      icon: <StarOutlined />,\r      label: 'Referanslar',\r      action: () => {\r        document.getElementById('testimonials')?.scrollIntoView({ behavior: 'smooth' });\r        trackInterest('navigation-testimonials');\r      },\r    },\r    {\r      key: 'contact',\r      icon: <PhoneOutlined />,\r      label: 'İletişim',\r      action: () => {\r        document.getElementById('contact')?.scrollIntoView({ behavior: 'smooth' });\r        trackInterest('navigation-contact');\r      },\r    },\r  ];\r  const handleMenuClick = (item: typeof menuItems[0]) => {\r    item.action();\r    setIsOpen(false);\r    setActiveSection(item.key);\r  };\r  const renderUserSection = () => {\r    if (isAuthenticated && user) {\r      const userRole = user.roles?.[0];\r      let dashboardRoute = '/app/default';\r      if (userRole === 'SystemAdmin') dashboardRoute = '/master';\r      else if (userRole === 'TenantAdmin' || userRole === 'Admin') dashboardRoute = '/admin';\r      return (\r        <div className=\"mobile-nav-user-section\">\r          <div className=\"user-info\">\r            <Avatar size={48} icon={<UserOutlined />} />\r            <div className=\"user-details\">\r              <Typography.Text strong>{user.firstName || 'Kullanıcı'}</Typography.Text>\r              <Typography.Text type=\"secondary\" style={{ fontSize: 12 }}>\r                {user.email}\r              </Typography.Text>\r            </div>\r          </div>\r          <Button\r            type=\"primary\"\r            block\r            icon={<AppstoreOutlined />}\r            onClick={() = aria-label=\"appstore outlined\"> {\r              navigate(dashboardRoute);\r              setIsOpen(false);\r            }}\r            className=\"user-dashboard-btn\"\r          >\r            Panele Git\r          </Button>\r        </div>\r      );\r    }\r    return (\r      <div className=\"mobile-nav-cta-section\">\r        {currentVisitType === 'first-time' && (\r          <div className=\"mobile-cta-message\">\r            <Typography.Text style={{ fontSize: 13, color: '#667eea' }}>\r              ✨ 14 gün ücretsiz deneme!\r            </Typography.Text>\r          </div>\r        )}\r        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\r          {currentVisitType === 'returning' ? (\r            <>\r              <Button\r                type=\"primary\"\r                block\r                icon={<LoginOutlined />}\r                onClick={() = aria-label=\"login outlined\"> {\r                  navigate('/login');\r                  setIsOpen(false);\r                  trackInterest('mobile-nav-login');\r                }}\r                className=\"mobile-primary-cta\"\r              >\r                Giriş Yap\r              </Button>\r              <Button\r                block\r                ghost\r                icon={<RocketOutlined />}\r                onClick={() = aria-label=\"rocket outlined\"> {\r                  navigate('/register');\r                  setIsOpen(false);\r                  trackInterest('mobile-nav-trial');\r                }}\r              >\r                Deneme Sürümü\r              </Button>\r            </>\r          ) : (\r            <>\r              <Button\r                type=\"primary\"\r                block\r                icon={<RocketOutlined />}\r                onClick={() = aria-label=\"rocket outlined\"> {\r                  navigate('/register');\r                  setIsOpen(false);\r                  trackInterest('mobile-nav-register');\r                }}\r                className=\"mobile-primary-cta\"\r              >\r                {currentVisitType === 'active-user' ? 'Panelime Giriş' : 'Ücretsiz Dene'}\r              </Button>\r              <Button\r                block\r                ghost\r                icon={<PlayCircleOutlined />}\r                onClick={() = aria-label=\"play circle outlined\"> {\r                  document.getElementById('hero')?.scrollIntoView({ behavior: 'smooth' });\r                  setIsOpen(false);\r                  trackInterest('mobile-nav-demo');\r                }}\r              >\r                Demo İzle\r              </Button>\r            </>\r          )}\r        </Space>\r      </div>\r    );\r  };\r  // Close drawer when clicking outside or on escape\r  useEffect(() => {\r    const handleEscape = (e: KeyboardEvent) => {\r      if (e.key === 'Escape') {\r        setIsOpen(false);\r      }\r    };\r    document.addEventListener('keydown', handleEscape);\r    return () => document.removeEventListener('keydown', handleEscape);\r  }, []);\r  return (\r    <>\r      {/* Mobile Menu Trigger */}\r      <Button\r        type=\"text\"\r        icon={<MenuOutlined />}\r        onClick={() = aria-label=\"menu outlined\"> setIsOpen(true)}\r        className={`mobile-nav-trigger ${className}`}\r        size=\"large\"\r      />\r      {/* Mobile Navigation Drawer */}\r      <Drawer\r        title={\r          <div className=\"mobile-nav-header\">\r            <div className=\"mobile-nav-logo\">\r              <RocketOutlined className=\"logo-icon\" />\r              <span className=\"logo-text\">Stocker</span>\r            </div>\r            {currentVisitType === 'returning' && (\r              <Badge count=\"Yeni\" size=\"small\" color=\"#52c41a\" />\r            )}\r          </div>\r        }\r        placement=\"right\"\r        onClose={() => setIsOpen(false)}\r        open={isOpen}\r        width=\"100%\"\r        className=\"mobile-navigation-drawer\"\r        closeIcon={<CloseOutlined />}\r        styles={{ \r          header: {\r            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r            color: 'white',\r            borderBottom: 'none',\r          },\r          body: {\r            padding: 0, \r            background: 'linear-gradient(180deg, #f8f9fb 0%, #ffffff 100%)' \r          }\r        }}\r      >\r        <div className=\"mobile-nav-content\">\r          {/* User Section */}\r          {renderUserSection()}\r          {/* Navigation Menu */}\r          <div className=\"mobile-nav-menu\">\r            {menuItems.map((item) => (\r              <div\r                key={item.key}\r                className={`mobile-nav-item ${\r                  activeSection === item.key ? 'active' : ''\r                }`}\r                onClick={() => handleMenuClick(item)}\r               role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => handleMenuClick(item)(e)}>\r                <div className=\"nav-item-icon\">{item.icon}</div>\r                <div className=\"nav-item-content\">\r                  <Typography.Text className=\"nav-item-label\">\r                    {item.label}\r                  </Typography.Text>\r                </div>\r                <div className=\"nav-item-arrow\">→</div>\r              </div>\r            ))}\r          </div>\r          {/* Quick Actions */}\r          <div className=\"mobile-nav-quick-actions\">\r            <Typography.Title level={5} style={{ margin: '16px 20px 12px' }}>\r              Hızlı İşlemler\r            </Typography.Title>\r            <div className=\"quick-action-grid\">\r              <div\r                className=\"quick-action-item\"\r                onClick={() => {\r                  window.open('tel:08501234567', '_self');\r                  trackInterest('mobile-nav-call');\r                }}\r               role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => {\r                  window.open('tel:08501234567', '_self');\r                  trackInterest('mobile-nav-call');\r                (e)}>\r                <PhoneOutlined />\r                <span>Ara</span>\r              </div>\r              <div\r                className=\"quick-action-item\"\r                onClick={() => {\r                  window.open('https://wa.me/905555555555', '_blank');\r                  trackInterest('mobile-nav-whatsapp');\r                }}\r               role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => {\r                  window.open('https://wa.me/905555555555', '_blank');\r                  trackInterest('mobile-nav-whatsapp');\r                (e)}>\r                📱\r                <span>WhatsApp</span>\r              </div>\r              <div\r                className=\"quick-action-item\"\r                onClick={() => {\r                  navigate('/register');\r                  setIsOpen(false);\r                  trackInterest('mobile-nav-support');\r                }}\r               role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => {\r                  navigate('/register');\r                  setIsOpen(false);\r                  trackInterest('mobile-nav-support');\r                (e)}>\r                💬\r                <span>Destek</span>\r              </div>\r              <div\r                className=\"quick-action-item\"\r                onClick={() => {\r                  document.getElementById('contact')?.scrollIntoView({ behavior: 'smooth' });\r                  setIsOpen(false);\r                  trackInterest('mobile-nav-contact');\r                }}\r               role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => {\r                  document.getElementById('contact')?.scrollIntoView({ behavior: 'smooth' (e)}>\r                ✉️\r                <span>E-posta</span>\r              </div>\r            </div>\r          </div>\r          {/* Footer */}\r          <div className=\"mobile-nav-footer\">\r            <Typography.Text type=\"secondary\" style={{ fontSize: 12, textAlign: 'center' }}>\r              © 2024 Stocker - Türkiye'nin #1 İşletme Platformu\r            </Typography.Text>\r          </div>\r        </div>\r      </Drawer>\r    </>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/MobileNavigation/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import { Modal, Row, Col, Typography, Tag, Space, List, Tabs, Button, Card, Progress, Statistic } from 'antd';\rimport { \r  CheckCircleOutlined,\r  RocketOutlined,\r  TrophyOutlined,\r  StarOutlined,\r  ArrowUpOutlined,\r  ClockCircleOutlined,\r  SafetyOutlined,\r  ApiOutlined\r} from '@ant-design/icons';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rinterface ModuleDetailModalProps {\r  module: {\r    id: string;\r    name: string;\r    title: string;\r    description: string;\r    icon: React.ReactNode;\r    color: string;\r    features: string[];\r    benefits: string[];\r    status: string;\r  };\r  visible: boolean;\r  onClose: () => void;\r}\rexport const ModuleDetailModal: React.FC<ModuleDetailModalProps> = ({ module, visible, onClose }) => {\r  const integrations = [\r    { name: 'E-posta', status: 'active' },\r    { name: 'Takvim', status: 'active' },\r    { name: 'Muhasebe', status: 'active' },\r    { name: 'E-ticaret', status: 'coming' },\r    { name: 'Lojistik', status: 'coming' },\r    { name: 'CRM', status: 'active' }\r  ];\r  const useCases = [\r    {\r      title: 'Küçük İşletmeler',\r      description: 'Temel özellikleri kullanarak hızlı başlangıç',\r      icon: <RocketOutlined />\r    },\r    {\r      title: 'Orta Ölçekli Şirketler',\r      description: 'Gelişmiş özellikler ile süreç optimizasyonu',\r      icon: <TrophyOutlined />\r    },\r    {\r      title: 'Kurumsal Firmalar',\r      description: 'Tam entegrasyon ve özelleştirme imkanları',\r      icon: <SafetyOutlined />\r    }\r  ];\r  const screenshots = [\r    { title: 'Dashboard', url: '/screenshots/dashboard.png' },\r    { title: 'Raporlar', url: '/screenshots/reports.png' },\r    { title: 'Analiz', url: '/screenshots/analytics.png' }\r  ];\r  return (\r    <Modal\r      visible={visible}\r      onCancel={onClose}\r      width={900}\r      footer={[\r        <Button key=\"close\" onClick={onClose}>\r          Kapat\r        </Button>,\r        <Button key=\"demo\" type=\"default\" icon={<RocketOutlined />} aria-label=\"rocket outlined\">\r          Demo İste\r        </Button>,\r        <Button key=\"start\" type=\"primary\" icon={<CheckCircleOutlined />} aria-label=\"check circle outlined\">\r          Hemen Başla\r        </Button>\r      ]}\r      className=\"module-detail-modal\"\r    >\r      <div className=\"modal-header\">\r        <div className=\"module-icon-large\" style={{ backgroundColor: `${module.color}20`, color: module.color }}>\r          {module.icon}\r        </div>\r        <div className=\"module-info\">\r          <Title level={2}>{module.title}</Title>\r          <Paragraph className=\"module-description-full\">{module.description}</Paragraph>\r          <Space>\r            <Tag color={module.status === 'active' ? 'success' : 'processing'}>\r              {module.status === 'active' ? 'Kullanıma Hazır' : 'Beta'}\r            </Tag>\r            <Tag icon={<StarOutlined />} color=\"gold\">4.8/5 Puan</Tag>\r            <Tag icon={<ClockCircleOutlined />}>5 dk kurulum</Tag>\r          </Space>\r        </div>\r      </div>\r      <Tabs defaultActiveKey=\"features\" className=\"module-tabs\">\r        <TabPane tab=\"Özellikler\" key=\"features\">\r          <Row gutter={[24, 24]}>\r            <Col span={14}>\r              <Card title=\"Temel Özellikler\" className=\"feature-card\">\r                <List\r                  dataSource={module.features}\r                  renderItem={item => (\r                    <List.Item>\r                      <Space>\r                        <CheckCircleOutlined style={{ color: '#52c41a' }} />\r                        <Text>{item}</Text>\r                      </Space>\r                    </List.Item>\r                  )}\r                />\r              </Card>\r            </Col>\r            <Col span={10}>\r              <Card title=\"İş Sonuçları\" className=\"benefits-card\">\r                {module.benefits.map((benefit, index) => (\r                  <div key={index} className=\"benefit-item\">\r                    <ArrowUpOutlined style={{ color: '#52c41a' }} />\r                    <Text strong>{benefit}</Text>\r                  </div>\r                ))}\r              </Card>\r            </Col>\r          </Row>\r        </TabPane>\r        <TabPane tab=\"Entegrasyonlar\" key=\"integrations\">\r          <Card title=\"Mevcut Entegrasyonlar\">\r            <Row gutter={[16, 16]}>\r              {integrations.map((integration, index) => (\r                <Col span={8} key={index}>\r                  <Card className=\"integration-card\" hoverable>\r                    <Space>\r                      <ApiOutlined style={{ fontSize: 20, color: integration.status === 'active' ? '#52c41a' : '#faad14' }} />\r                      <div>\r                        <Text strong>{integration.name}</Text>\r                        <br />\r                        <Tag color={integration.status === 'active' ? 'success' : 'warning'} style={{ marginTop: 4 }}>\r                          {integration.status === 'active' ? 'Aktif' : 'Yakında'}\r                        </Tag>\r                      </div>\r                    </Space>\r                  </Card>\r                </Col>\r              ))}\r            </Row>\r          </Card>\r        </TabPane>\r        <TabPane tab=\"Kullanım Senaryoları\" key=\"usecases\">\r          <Row gutter={[16, 16]}>\r            {useCases.map((useCase, index) => (\r              <Col span={8} key={index}>\r                <Card className=\"usecase-card\" hoverable>\r                  <div className=\"usecase-icon\">{useCase.icon}</div>\r                  <Title level={5}>{useCase.title}</Title>\r                  <Paragraph>{useCase.description}</Paragraph>\r                </Card>\r              </Col>\r            ))}\r          </Row>\r          <Card title=\"Başarı Hikayeleri\" style={{ marginTop: 24 }}>\r            <Row gutter={16}>\r              <Col span={8}>\r                <Statistic\r                  title=\"Aktif Kullanıcı\"\r                  value={5280}\r                  prefix={<TeamOutlined />}\r                />\r              </Col>\r              <Col span={8}>\r                <Statistic\r                  title=\"İşlem Hacmi\"\r                  value={125}\r                  suffix=\"M₺\"\r                  prefix={<DollarOutlined />}\r                />\r              </Col>\r              <Col span={8}>\r                <Statistic\r                  title=\"Verimlilik Artışı\"\r                  value={42}\r                  suffix=\"%\"\r                  prefix={<ArrowUpOutlined />}\r                />\r              </Col>\r            </Row>\r          </Card>\r        </TabPane>\r        <TabPane tab=\"Fiyatlandırma\" key=\"pricing\">\r          <Row gutter={[16, 16]}>\r            <Col span={8}>\r              <Card className=\"pricing-card\" hoverable>\r                <div className=\"pricing-header\">\r                  <Title level={4}>Başlangıç</Title>\r                  <div className=\"price\">\r                    <Text className=\"currency\">₺</Text>\r                    <Text className=\"amount\">99</Text>\r                    <Text className=\"period\">/ay</Text>\r                  </div>\r                </div>\r                <List\r                  dataSource={[\r                    '5 kullanıcıya kadar',\r                    'Temel özellikler',\r                    'E-posta desteği',\r                    '10GB depolama'\r                  ]}\r                  renderItem={item => (\r                    <List.Item>\r                      <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 8 }} />\r                      {item}\r                    </List.Item>\r                  )}\r                />\r                <Button block>Planı Seç</Button>\r              </Card>\r            </Col>\r            <Col span={8}>\r              <Card className=\"pricing-card featured\" hoverable>\r                <Badge.Ribbon text=\"Popüler\" color=\"red\">\r                  <div className=\"pricing-header\">\r                    <Title level={4}>Profesyonel</Title>\r                    <div className=\"price\">\r                      <Text className=\"currency\">₺</Text>\r                      <Text className=\"amount\">299</Text>\r                      <Text className=\"period\">/ay</Text>\r                    </div>\r                  </div>\r                  <List\r                    dataSource={[\r                      '25 kullanıcıya kadar',\r                      'Tüm özellikler',\r                      'Öncelikli destek',\r                      '100GB depolama',\r                      'API erişimi'\r                    ]}\r                    renderItem={item => (\r                      <List.Item>\r                        <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 8 }} />\r                        {item}\r                      </List.Item>\r                    )}\r                  />\r                  <Button type=\"primary\" block>Planı Seç</Button>\r                </Badge.Ribbon>\r              </Card>\r            </Col>\r            <Col span={8}>\r              <Card className=\"pricing-card\" hoverable>\r                <div className=\"pricing-header\">\r                  <Title level={4}>Kurumsal</Title>\r                  <div className=\"price\">\r                    <Text className=\"currency\">₺</Text>\r                    <Text className=\"amount\">Özel</Text>\r                  </div>\r                </div>\r                <List\r                  dataSource={[\r                    'Sınırsız kullanıcı',\r                    'Özel özellikler',\r                    '7/24 destek',\r                    'Sınırsız depolama',\r                    'Özel entegrasyonlar'\r                  ]}\r                  renderItem={item => (\r                    <List.Item>\r                      <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 8 }} />\r                      {item}\r                    </List.Item>\r                  )}\r                />\r                <Button block>İletişime Geç</Button>\r              </Card>\r            </Col>\r          </Row>\r        </TabPane>\r      </Tabs>\r    </Modal>\r  );\r};\r// Import için gerekli tip tanımlamaları\rimport { TeamOutlined, DollarOutlined } from '@ant-design/icons';",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/ModuleDetailModal/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import { useState } from 'react';\rimport { Row, Col, Card, Typography, Tag, Button, Space, Modal, List, Badge } from 'antd';\rimport { \r  TeamOutlined,\r  InboxOutlined,\r  ShoppingCartOutlined,\r  DollarOutlined,\r  UserOutlined,\r  ToolOutlined,\r  RocketOutlined,\r  CheckCircleOutlined,\r  ArrowRightOutlined,\r  ExpandOutlined\r} from '@ant-design/icons';\rimport { ModuleDetailModal } from '../ModuleDetailModal';\rimport './style.css';\rimport './corporate.css';\rconst { Title, Text, Paragraph } = Typography;\rinterface Module {\r  id: string;\r  name: string;\r  title: string;\r  description: string;\r  icon: React.ReactNode;\r  color: string;\r  features: string[];\r  benefits: string[];\r  image?: string;\r  status: 'active' | 'coming-soon' | 'beta';\r  popular?: boolean;\r}\rconst modules: Module[] = [\r  {\r    id: 'crm',\r    name: 'CRM',\r    title: 'Müşteri İlişkileri Yönetimi',\r    description: 'Müşteri ilişkilerinizi güçlendirin, satış süreçlerinizi optimize edin ve müşteri memnuniyetini artırın.',\r    icon: <TeamOutlined />,\r    color: '#1890ff',\r    status: 'active',\r    popular: true,\r    features: [\r      'Müşteri profili yönetimi',\r      'İletişim geçmişi takibi',\r      'Satış fırsatı yönetimi',\r      'Teklif ve sözleşme yönetimi',\r      'Müşteri segmentasyonu',\r      'Satış hunisi analizi',\r      'Performans raporları',\r      'E-posta entegrasyonu'\r    ],\r    benefits: [\r      'Müşteri memnuniyetinde %35 artış',\r      'Satış dönüşüm oranında %25 iyileşme',\r      'Müşteri kaybında %40 azalma',\r      'Satış ekibi verimliliğinde %50 artış'\r    ]\r  },\r  {\r    id: 'inventory',\r    name: 'Envanter',\r    title: 'Stok ve Envanter Yönetimi',\r    description: 'Stoklarınızı anlık takip edin, envanter maliyetlerinizi düşürün ve tedarik zincirinizi optimize edin.',\r    icon: <InboxOutlined />,\r    color: '#52c41a',\r    status: 'active',\r    features: [\r      'Gerçek zamanlı stok takibi',\r      'Çoklu depo yönetimi',\r      'Barkod ve QR kod desteği',\r      'Otomatik stok uyarıları',\r      'Transfer yönetimi',\r      'Parti ve seri no takibi',\r      'ABC analizi',\r      'Stok değerleme raporları'\r    ],\r    benefits: [\r      'Stok maliyetlerinde %30 azalma',\r      'Stoksuz kalma durumunda %45 azalma',\r      'Envanter doğruluğunda %99 başarı',\r      'Depo verimliliğinde %40 artış'\r    ]\r  },\r  {\r    id: 'sales',\r    name: 'Satış',\r    title: 'Satış Yönetimi',\r    description: 'Satış süreçlerinizi baştan sona yönetin, siparişleri takip edin ve satış performansınızı artırın.',\r    icon: <ShoppingCartOutlined />,\r    color: '#722ed1',\r    status: 'active',\r    popular: true,\r    features: [\r      'Sipariş yönetimi',\r      'Teklif hazırlama',\r      'Fiyatlama ve indirim yönetimi',\r      'Satış ekibi performans takibi',\r      'Komisyon hesaplama',\r      'Satış tahminleme',\r      'Kampanya yönetimi',\r      'B2B ve B2C satış desteği'\r    ],\r    benefits: [\r      'Satış hacminde %40 artış',\r      'Sipariş işleme süresinde %60 azalma',\r      'Müşteri başına gelirde %25 artış',\r      'Satış tahmin doğruluğunda %85 başarı'\r    ]\r  },\r  {\r    id: 'finance',\r    name: 'Finans',\r    title: 'Finansal Yönetim',\r    description: 'Finansal süreçlerinizi dijitalleştirin, nakit akışınızı kontrol altında tutun ve karlılığınızı artırın.',\r    icon: <DollarOutlined />,\r    color: '#fa8c16',\r    status: 'active',\r    features: [\r      'Fatura yönetimi',\r      'Gelir/Gider takibi',\r      'Nakit akış yönetimi',\r      'Bütçe planlama',\r      'Finansal raporlama',\r      'Vergi hesaplama',\r      'Banka entegrasyonu',\r      'Muhasebe entegrasyonu'\r    ],\r    benefits: [\r      'Tahsilat süresinde %35 iyileşme',\r      'Nakit akış görünürlüğünde %100 artış',\r      'Finansal raporlama süresinde %70 azalma',\r      'Bütçe sapmasında %25 azalma'\r    ]\r  },\r  {\r    id: 'hr',\r    name: 'İK',\r    title: 'İnsan Kaynakları Yönetimi',\r    description: 'Çalışan deneyimini iyileştirin, İK süreçlerinizi otomatikleştirin ve yetenek yönetiminizi güçlendirin.',\r    icon: <UserOutlined />,\r    color: '#13c2c2',\r    status: 'active',\r    features: [\r      'Personel bilgi yönetimi',\r      'İzin ve devamsızlık takibi',\r      'Performans değerlendirme',\r      'İşe alım süreci yönetimi',\r      'Eğitim planlama',\r      'Bordro entegrasyonu',\r      'Organizasyon şeması',\r      'Çalışan self-servis portalı'\r    ],\r    benefits: [\r      'İK süreçlerinde %50 zaman tasarrufu',\r      'Çalışan memnuniyetinde %30 artış',\r      'İşe alım süresinde %40 azalma',\r      'İK maliyetlerinde %25 düşüş'\r    ]\r  },\r  {\r    id: 'production',\r    name: 'Üretim',\r    title: 'Üretim Yönetimi',\r    description: 'Üretim süreçlerinizi optimize edin, verimliliği artırın ve kalite standartlarınızı yükseltin.',\r    icon: <ToolOutlined />,\r    color: '#eb2f96',\r    status: 'beta',\r    features: [\r      'Üretim planlama',\r      'İş emri yönetimi',\r      'Makine ve ekipman takibi',\r      'Kalite kontrol',\r      'OEE hesaplama',\r      'Bakım planlaması',\r      'Gerçek zamanlı üretim takibi',\r      'IoT sensör entegrasyonu'\r    ],\r    benefits: [\r      'Üretim verimliliğinde %35 artış',\r      'Kalite problemlerinde %50 azalma',\r      'Makine duruş süresinde %40 azalma',\r      'Üretim maliyetlerinde %20 düşüş'\r    ]\r  }\r];\rexport const ModuleShowcase = () => {\r  const [selectedModule, setSelectedModule] = useState<Module | null>(null);\r  const [modalVisible, setModalVisible] = useState(false);\r  const handleModuleClick = (module: Module) => {\r    setSelectedModule(module);\r    setModalVisible(true);\r  };\r  const handleCloseModal = () => {\r    setModalVisible(false);\r    setSelectedModule(null);\r  };\r  return (\r    <div className=\"module-showcase\">\r      <div className=\"showcase-header\">\r        <Title level={2}>Güçlü Modüller ile İşinizi Büyütün</Title>\r        <Paragraph className=\"showcase-subtitle\">\r          İşletmenizin ihtiyaçlarına özel tasarlanmış, entegre çalışan ve ölçeklenebilir modüller\r        </Paragraph>\r      </div>\r      <Row gutter={[32, 32]}>\r        {modules.map((module) => (\r          <Col xs={24} sm={12} lg={8} key={module.id}>\r            <Card \r              className={`module-card ${module.status}`}\r              hoverable\r              onClick={() => handleModuleClick(module)}\r            >\r              {module.popular && (\r                <div className=\"popular-badge\">\r                  <Badge.Ribbon text=\"Popüler\" color=\"red\" />\r                </div>\r              )}\r              <div className=\"module-card-header\">\r                <div className=\"module-icon\" style={{ backgroundColor: `${module.color}20`, color: module.color }}>\r                  {module.icon}\r                </div>\r                <div className=\"module-status\">\r                  {module.status === 'active' && <Tag color=\"success\">Aktif</Tag>}\r                  {module.status === 'beta' && <Tag color=\"processing\">Beta</Tag>}\r                  {module.status === 'coming-soon' && <Tag color=\"orange\">Yakında</Tag>}\r                </div>\r              </div>\r              <Title level={4} className=\"module-title\">{module.title}</Title>\r              <Paragraph className=\"module-description\">{module.description}</Paragraph>\r              <div className=\"module-features-preview\">\r                <Space direction=\"vertical\" size={8}>\r                  {module.features.slice(0, 3).map((feature, index) => (\r                    <div key={index} className=\"feature-item\">\r                      <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 8 }} />\r                      <Text>{feature}</Text>\r                    </div>\r                  ))}\r                </Space>\r              </div>\r              <div className=\"module-card-footer\">\r                <Button \r                  type=\"link\" \r                  icon={<ExpandOutlined />}\r                  className=\"detail-button\"\r                 aria-label=\"expand outlined\">\r                  Detayları Görüntüle\r                </Button>\r              </div>\r            </Card>\r          </Col>\r        ))}\r      </Row>\r      <div className=\"showcase-cta\">\r        <Space direction=\"vertical\" align=\"center\" size={24}>\r          <Title level={3}>Tüm Modüller Entegre Çalışır</Title>\r          <Paragraph className=\"cta-description\">\r            Modüller arasında kusursuz veri akışı ve otomatik senkronizasyon ile \r            işletmenizin tüm süreçlerini tek platformdan yönetin.\r          </Paragraph>\r          <Button \r            type=\"primary\" \r            size=\"large\" \r            icon={<RocketOutlined />}\r            className=\"cta-button\"\r           aria-label=\"rocket outlined\">\r            Hemen Başlayın\r          </Button>\r        </Space>\r      </div>\r      {selectedModule && (\r        <ModuleDetailModal\r          module={selectedModule}\r          visible={modalVisible}\r          onClose={handleCloseModal}\r        />\r      )}\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/ModuleShowcase/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { Input, Button, Typography, message, Row, Col } from 'antd';\rimport { \r  MailOutlined, \r  SendOutlined, \r  GiftOutlined,\r  CheckCircleOutlined,\r  SafetyCertificateOutlined \r} from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport './style.css';\rconst { Title, Paragraph, Text } = Typography;\rexport const NewsletterSection: React.FC = () => {\r  const [email, setEmail] = useState('');\r  const [loading, setLoading] = useState(false);\r  const handleSubscribe = async () => {\r    if (!email) {\r      message.error('Lütfen e-posta adresinizi girin');\r      return;\r    }\r    if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\r      message.error('Geçerli bir e-posta adresi girin');\r      return;\r    }\r    setLoading(true);\r    // Simulate API call\r    setTimeout(() => {\r      message.success('Başarıyla abone oldunuz! 🎉');\r      setEmail('');\r      setLoading(false);\r    }, 1500);\r  };\r  const benefits = [\r    'Haftalık ERP ipuçları ve trendler',\r    'Özel indirimler ve kampanyalar',\r    'Yeni özellik duyuruları',\r    'Ücretsiz e-kitap ve rehberler'\r  ];\r  return (\r    <section className=\"newsletter-section\" id=\"newsletter\">\r      <div className=\"newsletter-container\">\r        <Row gutter={[48, 48]} align=\"middle\">\r          <Col xs={24} lg={12}>\r            <motion.div\r              initial={{ opacity: 0, x: -30 }}\r              whileInView={{ opacity: 1, x: 0 }}\r              transition={{ duration: 0.6 }}\r              className=\"newsletter-content\"\r            >\r              <div className=\"newsletter-badge\">\r                <GiftOutlined /> Özel Fırsatlar\r              </div>\r              <Title level={2} className=\"newsletter-title\">\r                ERP Dünyasından Haberdar Olun\r              </Title>\r              <Paragraph className=\"newsletter-description\">\r                En son ERP trendleri, başarı hikayeleri ve özel kampanyalardan \r                ilk siz haberdar olun. Üstelik abone olanlara özel %20 indirim!\r              </Paragraph>\r              <div className=\"benefits-list\">\r                {benefits.map((benefit, index) => (\r                  <motion.div\r                    key={index}\r                    initial={{ opacity: 0, x: -20 }}\r                    whileInView={{ opacity: 1, x: 0 }}\r                    transition={{ delay: index * 0.1 }}\r                    className=\"benefit-item\"\r                  >\r                    <CheckCircleOutlined className=\"benefit-icon\" />\r                    <Text>{benefit}</Text>\r                  </motion.div>\r                ))}\r              </div>\r              <div className=\"trust-badges\">\r                <div className=\"trust-item\">\r                  <SafetyCertificateOutlined />\r                  <span>KVKK Uyumlu</span>\r                </div>\r                <div className=\"trust-item\">\r                  <MailOutlined />\r                  <span>10.000+ Abone</span>\r                </div>\r              </div>\r            </motion.div>\r          </Col>\r          <Col xs={24} lg={12}>\r            <motion.div\r              initial={{ opacity: 0, x: 30 }}\r              whileInView={{ opacity: 1, x: 0 }}\r              transition={{ duration: 0.6 }}\r              className=\"newsletter-form-wrapper\"\r            >\r              <div className=\"newsletter-form\">\r                <div className=\"form-header\">\r                  <MailOutlined className=\"form-icon\" />\r                  <Title level={3}>Bültene Abone Ol</Title>\r                </div>\r                <div className=\"form-input-group\">\r                  <Input\r                    size=\"large\"\r                    placeholder=\"E-posta adresiniz\"\r                    prefix={<MailOutlined / aria-label=\"input field\">}\r                    value={email}\r                    onChange={(e) => setEmail(e.target.value)}\r                    onPressEnter={handleSubscribe}\r                    className=\"newsletter-input\"\r                  />\r                  <Button\r                    type=\"primary\"\r                    size=\"large\"\r                    icon={<SendOutlined />}\r                    loading={loading}\r                    onClick={handleSubscribe}\r                    className=\"subscribe-button\"\r                   aria-label=\"send outlined\">\r                    Abone Ol\r                  </Button>\r                </div>\r                <Text type=\"secondary\" className=\"form-note\">\r                  Aboneliğinizi istediğiniz zaman iptal edebilirsiniz.\r                  Gizlilik politikamızı okumak için <a href=\"#\">tıklayın</a>.\r                </Text>\r                <div className=\"discount-badge\">\r                  <GiftOutlined />\r                  <span>İlk siparişinizde %20 indirim kazanın!</span>\r                </div>\r              </div>\r            </motion.div>\r          </Col>\r        </Row>\r      </div>\r    </section>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/NewsletterSection/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { Row, Col, Card, Button, Typography, Badge, List, Segmented, Space } from 'antd';\rimport { CheckOutlined, CalculatorOutlined, AppstoreOutlined } from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport { pricingPlans } from '../../data/pricingPlans';\rimport { PricingWizard } from '../PricingWizard';\rconst { Title, Text, Paragraph } = Typography;\rinterface PricingSectionProps {\r  navigate?: any;\r}\rexport const PricingSection: React.FC<PricingSectionProps> = ({ navigate: navProp }) => {\r  const navigate = navProp || useNavigate();\r  const [viewMode, setViewMode] = useState<'classic' | 'wizard'>('wizard');\r  return (\r    <section id=\"pricing\" style={{ padding: '80px 0', background: 'white' }}>\r      <div className=\"container\" style={{ maxWidth: 1200, margin: '0 auto', padding: '0 24px' }}>\r        <Title level={2} style={{ textAlign: 'center', marginBottom: 16 }}>\r          Size Uygun Paketi Seçin\r        </Title>\r        <Paragraph \r          style={{ \r            textAlign: 'center', \r            fontSize: 18, \r            color: '#666',\r            maxWidth: 700,\r            margin: '0 auto 32px'\r          }}\r        >\r          İşletmenizin büyüklüğüne ve ihtiyaçlarına göre esnek fiyatlandırma\r        </Paragraph>\r        <div style={{ textAlign: 'center', marginBottom: 48 }}>\r          <Segmented\r            value={viewMode}\r            onChange={(value) => setViewMode(value as 'classic' | 'wizard')}\r            options={[\r              {\r                value: 'wizard',\r                label: (\r                  <Space>\r                    <CalculatorOutlined />\r                    <span>Size Özel Plan</span>\r                  </Space>\r                ),\r              },\r              {\r                value: 'classic',\r                label: (\r                  <Space>\r                    <AppstoreOutlined />\r                    <span>Tüm Planlar</span>\r                  </Space>\r                ),\r              },\r            ]}\r            size=\"large\"\r          />\r          <Paragraph style={{ marginTop: 16, color: '#666' }}>\r            {viewMode === 'wizard' \r              ? 'Birkaç basit soruyla size özel plan oluşturun'\r              : 'Hazır paket planlarımızı inceleyin'}\r          </Paragraph>\r        </div>\r        {viewMode === 'wizard' ? (\r          <PricingWizard />\r        ) : (\r          <>\r        <Row gutter={[32, 32]} justify=\"center\">\r          {pricingPlans.map((plan, index) => (\r            <Col xs={24} sm={24} md={12} lg={8} key={index}>\r              <Badge.Ribbon \r                text={plan.badge || \"Popüler\"} \r                color={plan.popular ? \"#667eea\" : \"#52c41a\"}\r                style={{ display: plan.badge ? 'block' : 'none' }}\r              >\r                <Card\r                  hoverable\r                  style={{ \r                    height: '100%',\r                    border: plan.popular ? '2px solid #667eea' : '1px solid #f0f0f0',\r                    transition: 'all 0.3s ease',\r                    transform: plan.popular ? 'scale(1.02)' : 'scale(1)'\r                  }}\r                  styles={{ body: { padding: 32 } }}\r                >\r                  <div style={{ textAlign: 'center', marginBottom: 24 }}>\r                    <Title level={3} style={{ marginBottom: 8 }}>\r                      {plan.name}\r                    </Title>\r                    <Text style={{ color: '#666' }}>{plan.description}</Text>\r                  </div>\r                  <div style={{ textAlign: 'center', marginBottom: 32 }}>\r                    {plan.oldPrice && (\r                      <Text \r                        delete \r                        style={{ \r                          fontSize: 20, \r                          color: '#999',\r                          display: 'block',\r                          marginBottom: 8\r                        }}\r                      >\r                        {plan.currency}{plan.oldPrice}\r                      </Text>\r                    )}\r                    <div style={{ display: 'flex', alignItems: 'baseline', justifyContent: 'center', gap: 4 }}>\r                      <Text style={{ fontSize: 48, fontWeight: 'bold', color: plan.popular ? '#667eea' : '#1a1a1a' }}>\r                        {plan.currency}{plan.price}\r                      </Text>\r                      <Text style={{ fontSize: 18, color: '#666' }}>/{plan.period}</Text>\r                    </div>\r                    {plan.savings && (\r                      <Badge \r                        count={plan.savings} \r                        style={{ \r                          backgroundColor: '#52c41a',\r                          marginTop: 8\r                        }} \r                      />\r                    )}\r                  </div>\r                  <List\r                    dataSource={plan.features}\r                    renderItem={item => (\r                      <List.Item style={{ border: 'none', padding: '8px 0' }}>\r                        <CheckOutlined style={{ color: '#52c41a', marginRight: 8 }} />\r                        <Text>{item}</Text>\r                      </List.Item>\r                    )}\r                    style={{ marginBottom: 24 }}\r                  />\r                  <Button\r                    type={plan.popular ? 'primary' : 'default'}\r                    size=\"large\"\r                    block\r                    onClick={() => navigate('/register')}\r                    style={{\r                      height: 48,\r                      fontSize: 16,\r                      background: plan.popular ? '#667eea' : undefined\r                    }}\r                  >\r                    Hemen Başla\r                  </Button>\r                </Card>\r              </Badge.Ribbon>\r            </Col>\r          ))}\r        </Row>\r        <div style={{ \r          textAlign: 'center', \r          marginTop: 64,\r          padding: '32px',\r          background: 'linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%)',\r          borderRadius: 16\r        }}>\r          <Title level={4} style={{ marginBottom: 16 }}>\r            💰 30 Gün Para İade Garantisi\r          </Title>\r          <Text style={{ fontSize: 16, color: '#666', display: 'block', marginBottom: 8 }}>\r            14 gün ücretsiz deneme • Kredi kartı gerekmez • Anında iptal\r          </Text>\r          <Text style={{ fontSize: 14, color: '#999' }}>\r            Memnun kalmazsanız, ilk 30 gün içinde ücret iadesi alabilirsiniz\r          </Text>\r        </div>\r        </>\r        )}\r      </div>\r    </section>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/PricingSection/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { \r  Steps, \r  Card, \r  Button, \r  Typography, \r  Space, \r  Radio, \r  Slider, \r  Tag,\r  Row,\r  Col,\r  Divider,\r  Result,\r  List,\r  Badge\r} from 'antd';\rimport { \r  TeamOutlined, \r  ShoppingOutlined,\r  RocketOutlined,\r  CheckCircleOutlined,\r  ArrowRightOutlined,\r  ArrowLeftOutlined,\r  CrownOutlined\r} from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rinterface WizardData {\r  businessSize: 'small' | 'medium' | 'large' | null;\r  userCount: number;\r  modules: string[];\r  industry: string | null;\r}\rinterface RecommendedPlan {\r  name: string;\r  price: number;\r  currency: string;\r  period: string;\r  features: string[];\r  savings?: number;\r  badge?: string;\r}\rexport const PricingWizard: React.FC = () => {\r  const navigate = useNavigate();\r  const [current, setCurrent] = useState(0);\r  const [wizardData, setWizardData] = useState<WizardData>({\r    businessSize: null,\r    userCount: 5,\r    modules: [],\r    industry: null\r  });\r  const [recommendedPlan, setRecommendedPlan] = useState<RecommendedPlan | null>(null);\r  const steps = [\r    {\r      title: 'İşletme Büyüklüğü',\r      icon: <TeamOutlined />\r    },\r    {\r      title: 'Kullanıcı Sayısı',\r      icon: <TeamOutlined />\r    },\r    {\r      title: 'Modül Seçimi',\r      icon: <ShoppingOutlined />\r    },\r    {\r      title: 'Önerilen Plan',\r      icon: <CrownOutlined />\r    }\r  ];\r  const businessSizes = [\r    {\r      value: 'small',\r      label: 'Küçük İşletme',\r      description: '1-10 çalışan',\r      icon: '🏢'\r    },\r    {\r      value: 'medium',\r      label: 'Orta Ölçekli',\r      description: '11-50 çalışan',\r      icon: '🏭'\r    },\r    {\r      value: 'large',\r      label: 'Büyük İşletme',\r      description: '50+ çalışan',\r      icon: '🏗️'\r    }\r  ];\r  const availableModules = [\r    { \r      id: 'crm', \r      name: 'CRM', \r      description: 'Müşteri İlişkileri',\r      price: 299,\r      icon: <TeamOutlined />\r    },\r    { \r      id: 'inventory', \r      name: 'Envanter', \r      description: 'Stok Yönetimi',\r      price: 249,\r      icon: <ShoppingOutlined />\r    },\r    { \r      id: 'sales', \r      name: 'Satış', \r      description: 'Satış Yönetimi',\r      price: 349,\r      icon: <RocketOutlined />\r    },\r    { \r      id: 'finance', \r      name: 'Finans', \r      description: 'Finansal Yönetim',\r      price: 399,\r      icon: <TeamOutlined />\r    },\r    { \r      id: 'hr', \r      name: 'İK', \r      description: 'İnsan Kaynakları',\r      price: 199,\r      icon: <TeamOutlined />\r    },\r    { \r      id: 'production', \r      name: 'Üretim', \r      description: 'Üretim Yönetimi',\r      price: 449,\r      icon: <TeamOutlined />\r    }\r  ];\r  const calculateRecommendedPlan = () => {\r    const basePrice = wizardData.businessSize === 'small' ? 499 : \r                     wizardData.businessSize === 'medium' ? 999 : 1999;\r    const modulePrice = wizardData.modules.reduce((total, moduleId) => {\r      const module = availableModules.find(m => m.id === moduleId);\r      return total + (module?.price || 0);\r    }, 0);\r    const userPrice = Math.max(0, (wizardData.userCount - 5) * 50);\r    const totalPrice = basePrice + modulePrice + userPrice;\r    const discountedPrice = Math.round(totalPrice * 0.85); // %15 indirim\r    const features = [\r      `${wizardData.userCount} kullanıcı`,\r      `${wizardData.modules.length} modül`,\r      '7/24 destek',\r      'Ücretsiz kurulum',\r      'Aylık güncelleme',\r      'Veri yedekleme',\r      'API erişimi',\r      'Özel raporlama'\r    ];\r    setRecommendedPlan({\r      name: wizardData.businessSize === 'small' ? 'Başlangıç Plus' :\r            wizardData.businessSize === 'medium' ? 'Profesyonel' : 'Kurumsal',\r      price: discountedPrice,\r      currency: '₺',\r      period: 'ay',\r      features,\r      savings: totalPrice - discountedPrice,\r      badge: 'Size Özel'\r    });\r    setCurrent(3);\r  };\r  const next = () => {\r    if (current === 2) {\r      calculateRecommendedPlan();\r    } else {\r      setCurrent(current + 1);\r    }\r  };\r  const prev = () => {\r    setCurrent(current - 1);\r  };\r  const isStepValid = () => {\r    switch (current) {\r      case 0:\r        return wizardData.businessSize !== null;\r      case 1:\r        return wizardData.userCount > 0;\r      case 2:\r        return wizardData.modules.length > 0;\r      default:\r        return true;\r    }\r  };\r  const renderStepContent = () => {\r    switch (current) {\r      case 0:\r        return (\r          <div className=\"wizard-step\">\r            <Title level={3}>İşletmenizin büyüklüğü nedir?</Title>\r            <Paragraph className=\"step-description\">\r              Size en uygun planı önerebilmemiz için işletme büyüklüğünüzü seçin\r            </Paragraph>\r            <Row gutter={[24, 24]} style={{ marginTop: 32 }}>\r              {businessSizes.map((size) => (\r                <Col xs={24} sm={8} key={size.value}>\r                  <Card\r                    hoverable\r                    className={`size-card ${wizardData.businessSize === size.value ? 'selected' : ''}`}\r                    onClick={() => setWizardData({...wizardData, businessSize: size.value as any})}\r                  >\r                    <div className=\"size-icon\">{size.icon}</div>\r                    <Title level={4}>{size.label}</Title>\r                    <Text type=\"secondary\">{size.description}</Text>\r                    {wizardData.businessSize === size.value && (\r                      <CheckCircleOutlined className=\"check-icon\" />\r                    )}\r                  </Card>\r                </Col>\r              ))}\r            </Row>\r          </div>\r        );\r      case 1:\r        return (\r          <div className=\"wizard-step\">\r            <Title level={3}>Kaç kullanıcınız olacak?</Title>\r            <Paragraph className=\"step-description\">\r              Sistemi aktif olarak kullanacak kişi sayısını belirtin\r            </Paragraph>\r            <div className=\"user-count-selector\">\r              <div className=\"user-count-display\">\r                <TeamOutlined style={{ fontSize: 48, color: '#667eea' }} />\r                <Title level={1} style={{ margin: '16px 0', color: '#667eea' }}>\r                  {wizardData.userCount}\r                </Title>\r                <Text>Kullanıcı</Text>\r              </div>\r              <Slider\r                min={1}\r                max={100}\r                value={wizardData.userCount}\r                onChange={(value) => setWizardData({...wizardData, userCount: value})}\r                marks={{\r                  1: '1',\r                  25: '25',\r                  50: '50',\r                  75: '75',\r                  100: '100+'\r                }}\r                style={{ maxWidth: 500, margin: '40px auto' }}\r              />\r              <Space size=\"large\" style={{ marginTop: 24 }}>\r                <Tag color=\"blue\">İlk 5 kullanıcı ücretsiz</Tag>\r                <Tag color=\"green\">Her ek kullanıcı: 50₺/ay</Tag>\r              </Space>\r            </div>\r          </div>\r        );\r      case 2:\r        return (\r          <div className=\"wizard-step\">\r            <Title level={3}>Hangi modüllere ihtiyacınız var?</Title>\r            <Paragraph className=\"step-description\">\r              İşletmenizde kullanmak istediğiniz modülleri seçin (birden fazla seçebilirsiniz)\r            </Paragraph>\r            <Row gutter={[16, 16]} style={{ marginTop: 32 }}>\r              {availableModules.map((module) => (\r                <Col xs={12} sm={8} md={6} lg={4} key={module.id}>\r                  <Card\r                    hoverable\r                    size=\"small\"\r                    className={`module-select-card ${wizardData.modules.includes(module.id) ? 'selected' : ''}`}\r                    onClick={() => {\r                      const modules = wizardData.modules.includes(module.id)\r                        ? wizardData.modules.filter(m => m !== module.id)\r                        : [...wizardData.modules, module.id];\r                      setWizardData({...wizardData, modules});\r                    }}\r                  >\r                    <div className=\"module-icon\">{module.icon}</div>\r                    <Title level={5} style={{ marginBottom: 4 }}>{module.name}</Title>\r                    <Text type=\"secondary\" style={{ fontSize: 12 }}>{module.description}</Text>\r                    <div className=\"module-price\">\r                      <Text strong>+{module.price}₺</Text>\r                    </div>\r                    {wizardData.modules.includes(module.id) && (\r                      <CheckCircleOutlined className=\"module-check-icon\" />\r                    )}\r                  </Card>\r                </Col>\r              ))}\r            </Row>\r            {wizardData.modules.length > 0 && (\r              <div className=\"selected-modules-summary\">\r                <Divider />\r                <Space>\r                  <Text>Seçilen modüller:</Text>\r                  {wizardData.modules.map(moduleId => {\r                    const module = availableModules.find(m => m.id === moduleId);\r                    return module ? (\r                      <Tag key={moduleId} color=\"blue\">{module.name}</Tag>\r                    ) : null;\r                  })}\r                </Space>\r              </div>\r            )}\r          </div>\r        );\r      case 3:\r        return recommendedPlan ? (\r          <div className=\"wizard-step result-step\">\r            <Result\r              status=\"success\"\r              title=\"Size Özel Planınız Hazır!\"\r              subTitle=\"İhtiyaçlarınıza göre en uygun planı hazırladık\"\r              extra={[\r                <Button \r                  type=\"primary\" \r                  key=\"start\"\r                  size=\"large\"\r                  onClick={() => navigate('/register')}\r                  icon={<RocketOutlined />}\r                >\r                  Hemen Başla\r                </Button>,\r                <Button \r                  key=\"compare\"\r                  size=\"large\"\r                  onClick={() => setCurrent(0)}\r                >\r                  Yeniden Hesapla\r                </Button>\r              ]}\r            />\r            <Row justify=\"center\" style={{ marginTop: 40 }}>\r              <Col xs={24} sm={20} md={16} lg={12}>\r                <Badge.Ribbon text={recommendedPlan.badge} color=\"#52c41a\">\r                  <Card className=\"recommended-plan-card\">\r                    <div className=\"plan-header\">\r                      <Title level={2}>{recommendedPlan.name}</Title>\r                      <div className=\"plan-price\">\r                        <Text className=\"price-amount\">\r                          {recommendedPlan.currency}{recommendedPlan.price}\r                        </Text>\r                        <Text className=\"price-period\">/{recommendedPlan.period}</Text>\r                      </div>\r                      {recommendedPlan.savings && (\r                        <Tag color=\"green\" style={{ marginTop: 8 }}>\r                          {recommendedPlan.savings}₺ tasarruf\r                        </Tag>\r                      )}\r                    </div>\r                    <Divider />\r                    <List\r                      dataSource={recommendedPlan.features}\r                      renderItem={item => (\r                        <List.Item style={{ border: 'none', padding: '8px 0' }}>\r                          <Space>\r                            <CheckCircleOutlined style={{ color: '#52c41a' }} />\r                            <Text>{item}</Text>\r                          </Space>\r                        </List.Item>\r                      )}\r                    />\r                    <Divider />\r                    <Space direction=\"vertical\" style={{ width: '100%' }}>\r                      <Text type=\"secondary\">\r                        * 14 gün ücretsiz deneme\r                      </Text>\r                      <Text type=\"secondary\">\r                        * Kredi kartı gerektirmez\r                      </Text>\r                      <Text type=\"secondary\">\r                        * İstediğiniz zaman iptal edebilirsiniz\r                      </Text>\r                    </Space>\r                  </Card>\r                </Badge.Ribbon>\r              </Col>\r            </Row>\r          </div>\r        ) : null;\r      default:\r        return null;\r    }\r  };\r  return (\r    <div className=\"pricing-wizard\">\r      <Card className=\"wizard-container\">\r        <Steps \r          current={current} \r          items={steps}\r          className=\"wizard-steps\"\r        />\r        <div className=\"wizard-content\">\r          {renderStepContent()}\r        </div>\r        <div className=\"wizard-actions\">\r          {current > 0 && current < 3 && (\r            <Button onClick={prev} icon={<ArrowLeftOutlined />} aria-label=\"arrow left outlined\">\r              Geri\r            </Button>\r          )}\r          {current < 3 && (\r            <Button \r              type=\"primary\" \r              onClick={next}\r              disabled={!isStepValid()}\r              icon={<ArrowRightOutlined />}\r              iconPosition=\"end\"\r             aria-label=\"arrow right outlined\">\r              {current === 2 ? 'Planı Göster' : 'İleri'}\r            </Button>\r          )}\r        </div>\r      </Card>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/PricingWizard/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { Typography, Row, Col, Card, Button, Modal, Tag, Space } from 'antd';\rimport {\r  PlayCircleOutlined,\r  ClockCircleOutlined,\r  EyeOutlined,\r  StarFilled,\r  CustomerServiceOutlined,\r  RocketOutlined,\r  ToolOutlined,\r  BarChartOutlined\r} from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport './style.css';\rconst { Title, Paragraph, Text } = Typography;\rinterface Video {\r  id: string;\r  title: string;\r  description: string;\r  duration: string;\r  views: string;\r  category: string;\r  thumbnail: string;\r  embedUrl: string;\r  isNew?: boolean;\r  rating?: number;\r}\rconst videos: Video[] = [\r  {\r    id: '1',\r    title: 'Stocker ERP Genel Tanıtım',\r    description: 'Platform hakkında kapsamlı bilgi ve temel özelliklerin tanıtımı',\r    duration: '8:45',\r    views: '2.3K',\r    category: 'Tanıtım',\r    thumbnail: 'https://images.unsplash.com/photo-1551434678-e076c223a692?w=800&h=450&fit=crop',\r    embedUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\r    isNew: true,\r    rating: 4.8\r  },\r  {\r    id: '2',\r    title: 'CRM Modülü Kullanımı',\r    description: 'Müşteri ilişkileri yönetimi modülünün detaylı anlatımı',\r    duration: '12:30',\r    views: '1.8K',\r    category: 'Eğitim',\r    thumbnail: 'https://images.unsplash.com/photo-1553877522-43269d4ea984?w=800&h=450&fit=crop',\r    embedUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\r    rating: 4.9\r  },\r  {\r    id: '3',\r    title: 'Stok Yönetimi Başlangıç',\r    description: 'Stok modülünde ilk adımlar ve temel işlemler',\r    duration: '10:15',\r    views: '3.1K',\r    category: 'Eğitim',\r    thumbnail: 'https://images.unsplash.com/photo-1586528116311-ad8dd3c8310d?w=800&h=450&fit=crop',\r    embedUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\r    rating: 4.7\r  },\r  {\r    id: '4',\r    title: 'Finans Modülü ve Raporlama',\r    description: 'Mali işlemler ve detaylı raporlama özellikleri',\r    duration: '15:20',\r    views: '1.5K',\r    category: 'Eğitim',\r    thumbnail: 'https://images.unsplash.com/photo-1554224155-6726b3ff858f?w=800&h=450&fit=crop',\r    embedUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\r    rating: 4.6\r  },\r  {\r    id: '5',\r    title: 'Müşteri Başarı Hikayeleri',\r    description: 'Stocker kullanan işletmelerin deneyimleri',\r    duration: '6:50',\r    views: '4.2K',\r    category: 'Başarı Hikayeleri',\r    thumbnail: 'https://images.unsplash.com/photo-1556761175-b413da4baf72?w=800&h=450&fit=crop',\r    embedUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\r    isNew: true,\r    rating: 5.0\r  },\r  {\r    id: '6',\r    title: 'E-Ticaret Entegrasyonu',\r    description: 'Trendyol, Hepsiburada ve diğer platformlarla entegrasyon',\r    duration: '9:30',\r    views: '2.7K',\r    category: 'Entegrasyon',\r    thumbnail: 'https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=800&h=450&fit=crop',\r    embedUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\r    rating: 4.8\r  }\r];\rconst categoryIcons: Record<string, React.ReactNode> = {\r  'Tanıtım': <RocketOutlined />,\r  'Eğitim': <CustomerServiceOutlined />,\r  'Başarı Hikayeleri': <StarFilled />,\r  'Entegrasyon': <ToolOutlined />\r};\rconst categoryColors: Record<string, string> = {\r  'Tanıtım': 'purple',\r  'Eğitim': 'blue',\r  'Başarı Hikayeleri': 'gold',\r  'Entegrasyon': 'green'\r};\rexport const VideoSection: React.FC = () => {\r  const [isModalVisible, setIsModalVisible] = useState(false);\r  const [selectedVideo, setSelectedVideo] = useState<Video | null>(null);\r  const [activeCategory, setActiveCategory] = useState<string>('all');\r  const handleVideoClick = (video: Video) => {\r    setSelectedVideo(video);\r    setIsModalVisible(true);\r  };\r  const filteredVideos = activeCategory === 'all' \r    ? videos \r    : videos.filter(v => v.category === activeCategory);\r  const categories = ['all', ...Array.from(new Set(videos.map(v => v.category)))];\r  return (\r    <section className=\"video-section\" id=\"videos\">\r      <div className=\"section-container\">\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          whileInView={{ opacity: 1, y: 0 }}\r          transition={{ duration: 0.6 }}\r          className=\"section-header\"\r        >\r          <Tag color=\"purple\" className=\"section-tag\">\r            <PlayCircleOutlined /> Video Galeri\r          </Tag>\r          <Title level={2}>Eğitim Videoları ve Tanıtımlar</Title>\r          <Paragraph>\r            Stocker ERP'yi daha yakından tanıyın, eğitim videolarımızı izleyin\r          </Paragraph>\r        </motion.div>\r        <div className=\"category-filters\">\r          {categories.map(category => (\r            <Button\r              key={category}\r              type={activeCategory === category ? 'primary' : 'default'}\r              onClick={() => setActiveCategory(category)}\r              className=\"category-filter-btn\"\r              icon={category !== 'all' ? categoryIcons[category] : <BarChartOutlined />}\r            >\r              {category === 'all' ? 'Tümü' : category}\r            </Button>\r          ))}\r        </div>\r        <Row gutter={[32, 32]}>\r          {filteredVideos.map((video, index) => (\r            <Col xs={24} sm={12} lg={8} key={video.id}>\r              <motion.div\r                initial={{ opacity: 0, y: 30 }}\r                whileInView={{ opacity: 1, y: 0 }}\r                transition={{ delay: index * 0.1, duration: 0.6 }}\r                whileHover={{ y: -8 }}\r              >\r                <Card\r                  hoverable\r                  className=\"video-card\"\r                  cover={\r                    <div className=\"video-thumbnail\" onClick={() => handleVideoClick(video)} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => handleVideoClick(video)(e)}>\r                      <img alt={video.title} src={video.thumbnail} />\r                      <div className=\"video-overlay\">\r                        <PlayCircleOutlined className=\"play-icon\" />\r                        <span className=\"video-duration\">{video.duration}</span>\r                      </div>\r                      {video.isNew && (\r                        <Tag color=\"red\" className=\"new-badge\">YENİ</Tag>\r                      )}\r                    </div>\r                  }\r                >\r                  <div className=\"video-category\">\r                    <Tag color={categoryColors[video.category]} icon={categoryIcons[video.category]}>\r                      {video.category}\r                    </Tag>\r                  </div>\r                  <Title level={4} className=\"video-title\">\r                    {video.title}\r                  </Title>\r                  <Paragraph className=\"video-description\">\r                    {video.description}\r                  </Paragraph>\r                  <div className=\"video-stats\">\r                    <Space>\r                      <span className=\"stat-item\">\r                        <EyeOutlined /> {video.views}\r                      </span>\r                      <span className=\"stat-item\">\r                        <ClockCircleOutlined /> {video.duration}\r                      </span>\r                      {video.rating && (\r                        <span className=\"stat-item\">\r                          <StarFilled style={{ color: '#faad14' }} /> {video.rating}\r                        </span>\r                      )}\r                    </Space>\r                  </div>\r                  <Button \r                    type=\"primary\" \r                    block \r                    icon={<PlayCircleOutlined />}\r                    onClick={() = aria-label=\"play circle outlined\"> handleVideoClick(video)}\r                    className=\"watch-button\"\r                  >\r                    İzle\r                  </Button>\r                </Card>\r              </motion.div>\r            </Col>\r          ))}\r        </Row>\r        <motion.div\r          initial={{ opacity: 0 }}\r          whileInView={{ opacity: 1 }}\r          transition={{ delay: 0.4, duration: 0.6 }}\r          className=\"video-footer\"\r        >\r          <Card className=\"video-cta-card\">\r            <Row align=\"middle\" gutter={[24, 24]}>\r              <Col xs={24} md={16}>\r                <Title level={3} style={{ marginBottom: 8 }}>\r                  Daha fazla eğitim içeriği mi arıyorsunuz?\r                </Title>\r                <Paragraph style={{ marginBottom: 0, fontSize: 16 }}>\r                  YouTube kanalımızda 100+ eğitim videosu ve webinar kaydı bulunmaktadır\r                </Paragraph>\r              </Col>\r              <Col xs={24} md={8} style={{ textAlign: 'right' }}>\r                <Button \r                  type=\"primary\" \r                  size=\"large\"\r                  icon={<PlayCircleOutlined />}\r                  className=\"youtube-button\"\r                 aria-label=\"play circle outlined\">\r                  YouTube Kanalımız\r                </Button>\r              </Col>\r            </Row>\r          </Card>\r        </motion.div>\r        <Modal\r          title={selectedVideo?.title}\r          visible={isModalVisible}\r          onCancel={() => setIsModalVisible(false)}\r          footer={null}\r          width={900}\r          centered\r          className=\"video-modal\"\r        >\r          {selectedVideo && (\r            <div className=\"video-player-wrapper\">\r              <div className=\"video-player\">\r                <iframe\r                  src={selectedVideo.embedUrl}\r                  title={selectedVideo.title}\r                  frameBorder=\"0\"\r                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r                  allowFullScreen\r                />\r              </div>\r              <div className=\"video-info\">\r                <Tag color={categoryColors[selectedVideo.category]}>\r                  {selectedVideo.category}\r                </Tag>\r                <Paragraph style={{ marginTop: 16 }}>\r                  {selectedVideo.description}\r                </Paragraph>\r                <div className=\"video-modal-stats\">\r                  <Space>\r                    <span><EyeOutlined /> {selectedVideo.views} görüntülenme</span>\r                    <span><ClockCircleOutlined /> {selectedVideo.duration}</span>\r                    {selectedVideo.rating && (\r                      <span><StarFilled style={{ color: '#faad14' }} /> {selectedVideo.rating}/5</span>\r                    )}\r                  </Space>\r                </div>\r              </div>\r            </div>\r          )}\r        </Modal>\r      </div>\r    </section>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/VideoSection/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useEffect, useState } from 'react';\rimport { useNavigate } from 'react-router-dom';\rimport { Layout, Button, Card, Row, Col, Typography, Space, Tag, Divider } from 'antd';\rimport {\r  RocketOutlined,\r  CustomerServiceOutlined,\r  GlobalOutlined,\r  CheckCircleOutlined,\r  ArrowRightOutlined,\r  ApiOutlined,\r  AppstoreOutlined,\r  DollarOutlined,\r  UserOutlined,\r  ToolOutlined,\r  MenuOutlined,\r  CompassOutlined,\r  DatabaseOutlined,\r  ShopOutlined,\r  FundProjectionScreenOutlined,\r  TruckOutlined,\r  ShoppingCartOutlined,\r  PieChartOutlined,\r} from '@ant-design/icons';\rimport { AnimatedHero } from '../../components/AnimatedHero';\rimport { FeaturesSection } from '../../components/FeaturesSection';\rimport { TestimonialsSection } from '../../components/TestimonialsSection';\rimport { StatsSection } from '../../components/StatsSection';\rimport { FloatingActionButton } from '../../components/FloatingActionButton';\rimport { FAQSection } from '../../components/FAQSection';\rimport { SolutionsSection } from '../../components/SolutionsSection';\rimport { mainModules } from '../../data/modules';\rimport './style.css';\rimport './corporate-style.css';\rconst { Header, Content, Footer } = Layout;\rconst { Title, Text, Paragraph } = Typography;\rexport const LandingPage: React.FC = () => {\r  const navigate = useNavigate();\r  const [scrolled, setScrolled] = useState(false);\r  useEffect(() => {\r    const handleScroll = () => {\r      setScrolled(window.scrollY > 50);\r    };\r    window.addEventListener('scroll', handleScroll);\r    return () => window.removeEventListener('scroll', handleScroll);\r  }, []);\r  const additionalModules = [\r    { name: 'E-Ticaret', icon: <ShopOutlined />, description: 'Online satış yönetimi' },\r    { name: 'Üretim', icon: <ToolOutlined />, description: 'Üretim planlama ve takibi' },\r    { name: 'Proje Yönetimi', icon: <FundProjectionScreenOutlined />, description: 'Proje takibi ve yönetimi' },\r    { name: 'Lojistik', icon: <TruckOutlined />, description: 'Nakliye ve kargo yönetimi' },\r    { name: 'Satın Alma', icon: <ShoppingCartOutlined />, description: 'Tedarik ve satın alma' },\r    { name: 'Raporlama', icon: <PieChartOutlined />, description: 'İş zekası ve analizler' }\r  ];\r  return (\r    <Layout className=\"landing-layout\">\r      {/* Navigation Header */}\r      <Header className={`landing-header ${scrolled ? 'scrolled' : ''}`}>\r        <div className=\"header-container\">\r          <div className=\"logo-section\" onClick={() => navigate('/')} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => navigate('/')(e)}>\r            <RocketOutlined className=\"logo-icon\" />\r            <span className=\"logo-text\">Stocker</span>\r          </div>\r          <nav className=\"nav-menu\">\r            <a href=\"#features\" onClick={(e) => { e.preventDefault(); document.getElementById('features')?.scrollIntoView({ behavior: 'smooth' }); }}>Özellikler</a>\r            <a href=\"#solutions\" onClick={(e) => { e.preventDefault(); document.getElementById('solutions')?.scrollIntoView({ behavior: 'smooth' }); }}>Çözümler</a>\r            <a href=\"#modules\" onClick={(e) => { e.preventDefault(); document.getElementById('modules')?.scrollIntoView({ behavior: 'smooth' }); }}>Modüller</a>\r            <a onClick={() => navigate('/pricing')} style={{ cursor: 'pointer' }}>Fiyatlandırma</a>\r            <a onClick={() => navigate('/training')} style={{ cursor: 'pointer' }}>Eğitimler</a>\r            <a onClick={() => navigate('/blog')} style={{ cursor: 'pointer' }}>Blog</a>\r            <a href=\"#faq\" onClick={(e) => { e.preventDefault(); document.getElementById('faq')?.scrollIntoView({ behavior: 'smooth' }); }}>SSS</a>\r          </nav>\r          <div className=\"header-actions\">\r            <Button \r              type={scrolled ? 'default' : 'primary'}\r              ghost={scrolled}\r              onClick={() => navigate('/login')}\r              icon={<UserOutlined />}\r              style={{ \r                marginRight: '8px',\r                ...(scrolled ? {} : { \r                  background: 'transparent', \r                  border: '2px solid #667eea',\r                  color: '#667eea'\r                })\r              }}\r            >\r              Giriş Yap\r            </Button>\r            <Button \r              type=\"primary\" \r              onClick={() => navigate('/register')}\r              icon={<RocketOutlined />}\r              style={{\r                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r                border: 'none',\r              }}\r            >\r              Ücretsiz Dene\r            </Button>\r            <MenuOutlined className=\"mobile-menu-toggle\" />\r          </div>\r        </div>\r      </Header>\r      <Content>\r        {/* Hero Section */}\r        <AnimatedHero />\r        {/* Stats Section */}\r        <StatsSection />\r        {/* Features Section */}\r        <FeaturesSection />\r        {/* Solutions Section */}\r        <SolutionsSection />\r        {/* Main Modules Section */}\r        <section id=\"modules\" className=\"modules-section\">\r          <div className=\"section-container\">\r            <div className=\"section-header\">\r              <Tag color=\"purple\" style={{ marginBottom: 16 }}>\r                <AppstoreOutlined /> Ana Modüller\r              </Tag>\r              <Typography.Title level={2}>İşletmenizi Güçlendirecek Ana Modüller</Typography.Title>\r              <Typography.Paragraph>\r                Entegre çalışan modüller ile tüm iş süreçlerinizi tek platformdan yönetin\r              </Typography.Paragraph>\r            </div>\r            {/* Additional Modules */}\r            <Divider style={{ margin: '48px 0' }}>\r              <Typography.Title level={4}>Ek Modüller</Typography.Title>\r            </Divider>\r            <Row gutter={[24, 24]}>\r              {additionalModules.map((module, index) => (\r                <Col xs={12} sm={8} lg={4} key={index}>\r                  <Card \r                    className=\"module-card slide-up\"\r                    hoverable\r                    variant=\"borderless\"\r                    style={{ animationDelay: `${index * 0.05}s` }}\r                  >\r                    <div className=\"module-icon\" style={{ color: '#667eea', fontSize: 32 }}>\r                      {module.icon}\r                    </div>\r                    <Typography.Title level={5} style={{ marginBottom: 4 }}>{module.name}</Typography.Title>\r                    <Typography.Text type=\"secondary\" style={{ fontSize: 13 }}>{module.description}</Typography.Text>\r                  </Card>\r                </Col>\r              ))}\r            </Row>\r          </div>\r        </section>\r        {/* Testimonials Section */}\r        <TestimonialsSection />\r        {/* FAQ Section */}\r        <FAQSection />\r        {/* Integration Section */}\r        <section className=\"integration-section\">\r          <div className=\"section-container\">\r            <div className=\"section-header\">\r              <Tag color=\"purple\" style={{ marginBottom: 16 }}>\r                <ApiOutlined /> Entegrasyonlar\r              </Tag>\r              <Typography.Title level={2}>Hazır Entegrasyonlar</Typography.Title>\r              <Typography.Paragraph>\r                Kullandığınız tüm sistemlerle uyumlu çalışır\r              </Typography.Paragraph>\r            </div>\r            <Row gutter={[24, 24]} justify=\"center\">\r              {[\r                'e-Fatura', 'e-Arşiv', 'e-İrsaliye', 'Trendyol', \r                'Hepsiburada', 'N11', 'Amazon', 'Paraşüt', \r                'Logo', 'Mikro', 'Nebim', 'SAP'\r              ].map((integration, index) => (\r                <Col key={index}>\r                  <Tag \r                    className=\"integration-tag fade-in\" \r                    style={{ animationDelay: `${index * 0.05}s` }}\r                  >\r                    {integration}\r                  </Tag>\r                </Col>\r              ))}\r            </Row>\r            <div style={{ textAlign: 'center', marginTop: 32 }}>\r              <Button type=\"link\" icon={<DatabaseOutlined />} aria-label=\"database outlined\">\r                Tüm Entegrasyonları Gör\r              </Button>\r            </div>\r          </div>\r        </section>\r        {/* CTA Section */}\r        <section id=\"contact\" className=\"cta-section\">\r          <div className=\"section-container\">\r            <Card className=\"cta-card\" variant=\"borderless\">\r              <Typography.Title level={2} style={{ color: 'white' }}>\r                İşletmenizi Dijitalleştirmeye Hazır mısınız?\r              </Typography.Title>\r              <Typography.Paragraph style={{ color: 'rgba(255,255,255,0.95)', fontSize: 20, maxWidth: 700, margin: '0 auto 40px' }}>\r                14 gün ücretsiz deneme sürümüyle başlayın. \r                Kredi kartı gerekmez, hemen kullanmaya başlayın.\r              </Typography.Paragraph>\r              <Space size=\"large\" wrap>\r                <Button \r                  type=\"primary\" \r                  size=\"large\"\r                  icon={<RocketOutlined />}\r                  onClick={() = aria-label=\"rocket outlined\"> navigate('/register')}\r                  className=\"cta-final-button\"\r                >\r                  Ücretsiz Dene\r                </Button>\r                <Button \r                  size=\"large\"\r                  ghost\r                  style={{ color: 'white', borderColor: 'white', backdropFilter: 'blur(10px)' }}\r                  icon={<CustomerServiceOutlined />}\r                  onClick={() = aria-label=\"customer service outlined\"> window.open('https://wa.me/905555555555', '_blank')}\r                >\r                  Satış Ekibiyle Görüş\r                </Button>\r              </Space>\r              <div style={{ marginTop: 40 }}>\r                <Space wrap size=\"large\" style={{ justifyContent: 'center' }}>\r                  <div style={{ color: 'white', display: 'flex', alignItems: 'center', gap: 8 }}>\r                    <CheckCircleOutlined style={{ fontSize: 20 }} />\r                    <Typography.Text style={{ color: 'white', fontSize: 16 }}>Kurulum ücreti yok</Typography.Text>\r                  </div>\r                  <div style={{ color: 'white', display: 'flex', alignItems: 'center', gap: 8 }}>\r                    <CheckCircleOutlined style={{ fontSize: 20 }} />\r                    <Typography.Text style={{ color: 'white', fontSize: 16 }}>İstediğiniz zaman iptal</Typography.Text>\r                  </div>\r                  <div style={{ color: 'white', display: 'flex', alignItems: 'center', gap: 8 }}>\r                    <CheckCircleOutlined style={{ fontSize: 20 }} />\r                    <Typography.Text style={{ color: 'white', fontSize: 16 }}>7/24 destek</Typography.Text>\r                  </div>\r                </Space>\r              </div>\r            </Card>\r          </div>\r        </section>\r      </Content>\r      {/* Footer */}\r      <Footer className=\"landing-footer\">\r        <div className=\"footer-container\">\r          <Row gutter={[32, 32]}>\r            <Col xs={24} sm={12} lg={6}>\r              <div className=\"footer-section\">\r                <div className=\"footer-logo\">\r                  <RocketOutlined /> Stocker\r                </div>\r                <Typography.Paragraph type=\"secondary\">\r                  Türkiye'nin en kapsamlı işletme yönetim platformu. \r                  Tüm iş süreçleriniz tek çatı altında.\r                </Typography.Paragraph>\r                <div style={{ marginTop: 16 }}>\r                  <Space>\r                    <Button shape=\"circle\" icon={<GlobalOutlined />} / aria-label=\"global outlined\">\r                    <Button shape=\"circle\" icon={<CustomerServiceOutlined />} / aria-label=\"customer service outlined\">\r                  </Space>\r                </div>\r              </div>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <div className=\"footer-section\">\r                <Typography.Title level={5}>Ürün</Typography.Title>\r                <ul className=\"footer-links\">\r                  <li><a href=\"#features\">Özellikler</a></li>\r                  <li><a href=\"#solutions\">Çözümler</a></li>\r                  <li><a href=\"#modules\">Modüller</a></li>\r                  <li><a onClick={() => navigate('/pricing')} style={{ cursor: 'pointer' }}>Fiyatlandırma</a></li>\r                  <li><a href=\"#faq\">SSS</a></li>\r                </ul>\r              </div>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <div className=\"footer-section\">\r                <Typography.Title level={5}>Şirket</Typography.Title>\r                <ul className=\"footer-links\">\r                  <li><a href=\"#\">Hakkımızda</a></li>\r                  <li><a href=\"#\">Kariyer</a></li>\r                  <li><a onClick={() => navigate('/blog')} style={{ cursor: 'pointer' }}>Blog</a></li>\r                  <li><a href=\"#\">İletişim</a></li>\r                  <li><a href=\"#\">Basın Kiti</a></li>\r                </ul>\r              </div>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <div className=\"footer-section\">\r                <Typography.Title level={5}>Destek</Typography.Title>\r                <ul className=\"footer-links\">\r                  <li><a href=\"#\">Yardım Merkezi</a></li>\r                  <li><a onClick={() => navigate('/training')} style={{ cursor: 'pointer' }}>Eğitim ve Videolar</a></li>\r                  <li><a href=\"#\">Kullanım Kılavuzu</a></li>\r                  <li><a href=\"#\">SSS</a></li>\r                  <li><a href=\"#\">Sistem Durumu</a></li>\r                </ul>\r                <div style={{ marginTop: 16 }}>\r                  <Typography.Text type=\"secondary\">Destek Hattı:</Typography.Text>\r                  <br />\r                  <Typography.Text strong style={{ fontSize: 18 }}>0850 123 45 67</Typography.Text>\r                </div>\r              </div>\r            </Col>\r          </Row>\r          <Divider />\r          <div className=\"footer-bottom\">\r            <Row align=\"middle\" justify=\"space-between\">\r              <Col>\r                <Typography.Text type=\"secondary\">\r                  © 2024 Stocker. Tüm hakları saklıdır.\r                </Typography.Text>\r              </Col>\r              <Col>\r                <Space>\r                  <a href=\"#\">Gizlilik Politikası</a>\r                  <span>|</span>\r                  <a href=\"#\">Kullanım Koşulları</a>\r                  <span>|</span>\r                  <a href=\"#\">KVKK</a>\r                </Space>\r              </Col>\r            </Row>\r          </div>\r        </div>\r      </Footer>\r      {/* Floating Action Button */}\r      <FloatingActionButton />\r    </Layout>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/pages/LandingPage/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { useNavigate } from 'react-router-dom';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport { \r  Button, \r  Typography, \r  Row, \r  Col, \r  Card, \r  Space, \r  Tag,\r  Badge,\r  Statistic,\r  Avatar,\r  Rate,\r  Tooltip,\r  Divider,\r  App,\r  Affix\r} from 'antd';\rimport {\r  RocketOutlined,\r  CheckCircleOutlined,\r  StarFilled,\r  UserOutlined,\r  TeamOutlined,\r  AppstoreOutlined,\r  DashboardOutlined,\r  BarChartOutlined,\r  SafetyOutlined,\r  CloudOutlined,\r  ApiOutlined,\r  CustomerServiceOutlined,\r  ThunderboltOutlined,\r  GlobalOutlined,\r  MobileOutlined,\r  ArrowRightOutlined,\r  PlayCircleOutlined,\r  TrophyOutlined,\r  HeartFilled,\r  CrownOutlined,\r  FireOutlined,\r  ShopOutlined,\r  TruckOutlined,\r  ArrowUpOutlined\r} from '@ant-design/icons';\rimport CountUp from 'react-countup';\rimport { useInView } from 'react-intersection-observer';\rimport { FAQSection } from '../../components/FAQSection';\rimport { ComparisonTable } from '../../components/ComparisonTable';\rimport { TenantLoginModal } from '../../../auth/components/TenantLoginModal';\rimport { isTenantDomain } from '../../../../utils/tenant';\rimport './style.css';\rconst { Title, Paragraph, Text } = Typography;\rexport const ModernLanding: React.FC = () => {\r  const navigate = useNavigate();\r  const { modal, notification } = App.useApp();\r  const [activeFeature, setActiveFeature] = useState(0);\r  const [selectedBusinessType, setSelectedBusinessType] = useState('');\r  const [scrolled, setScrolled] = useState(false);\r  const [scrollY, setScrollY] = useState(0);\r  const [showScrollTop, setShowScrollTop] = useState(false);\r  const [activeSection, setActiveSection] = useState('hero');\r  const [showTenantModal, setShowTenantModal] = useState(false);\r  // Section IDs for navigation\r  const sections = [\r    { id: 'hero', name: 'Ana Sayfa', icon: '🏠' },\r    { id: 'stats', name: 'İstatistikler', icon: '📊' },\r    { id: 'features', name: 'Özellikler', icon: '✨' },\r    { id: 'testimonials', name: 'Referanslar', icon: '💬' },\r    { id: 'comparison', name: 'Karşılaştırma', icon: '⚖️' },\r    { id: 'faq', name: 'SSS', icon: '❓' }\r  ];\r  // Scroll listener for navigation and parallax\r  useEffect(() => {\r    const handleScroll = () => {\r      setScrolled(window.scrollY > 50);\r      setScrollY(window.scrollY);\r      setShowScrollTop(window.scrollY > 500);\r      // Detect active section\r      const scrollPosition = window.scrollY + 100;\r      for (const section of sections) {\r        const element = document.getElementById(section.id);\r        if (element) {\r          const { offsetTop, offsetHeight } = element;\r          if (scrollPosition >= offsetTop && scrollPosition < offsetTop + offsetHeight) {\r            setActiveSection(section.id);\r            break;\r          }\r        }\r      }\r    };\r    window.addEventListener('scroll', handleScroll, { passive: true });\r    handleScroll(); // Initial check\r    return () => window.removeEventListener('scroll', handleScroll);\r  }, []);\r  const scrollToTop = () => {\r    window.scrollTo({ top: 0, behavior: 'smooth' });\r  };\r  const scrollToSection = (sectionId: string) => {\r    const element = document.getElementById(sectionId);\r    if (element) {\r      element.scrollIntoView({ behavior: 'smooth', block: 'start' });\r    }\r  };\r  const handleBusinessTypeSelect = (type: string, name: string) => {\r    setSelectedBusinessType(type);\r    notification.success({\r      message: `${name} Sektörü Seçildi`,\r      description: 'Size özel paket önerilerimizi aşağıda görebilirsiniz.',\r      placement: 'top',\r      duration: 3,\r      icon: <CheckCircleOutlined style={{ color: '#52c41a' }} />\r    });\r  };\r  const { ref: statsRef, inView: statsInView } = useInView({ \r    triggerOnce: true,\r    threshold: 0.1\r  });\r  const { ref: featuresRef, inView: featuresInView } = useInView({ \r    triggerOnce: true,\r    threshold: 0.1\r  });\r  const { ref: pricingRef, inView: pricingInView } = useInView({ \r    triggerOnce: true,\r    threshold: 0.1\r  });\r  const { ref: testimonialsRef, inView: testimonialsInView } = useInView({ \r    triggerOnce: true,\r    threshold: 0.1\r  });\r  // Hero typing animation\r  const [displayText, setDisplayText] = useState('');\r  const fullText = 'İşletmenizi Dijitalleştirin';\r  useEffect(() => {\r    let index = 0;\r    const timer = setInterval(() => {\r      if (index <= fullText.length) {\r        setDisplayText(fullText.slice(0, index));\r        index++;\r      } else {\r        clearInterval(timer);\r      }\r    }, 100);\r    return () => clearInterval(timer);\r  }, []);\r  // Auto-rotate features\r  useEffect(() => {\r    const timer = setInterval(() => {\r      setActiveFeature((prev) => (prev + 1) % features.length);\r    }, 5000);\r    return () => clearInterval(timer);\r  }, []);\r  const features = [\r    {\r      icon: <TeamOutlined />,\r      title: 'CRM Modülü',\r      description: 'Müşteri ilişkilerinizi profesyonelce yönetin',\r      color: '#667eea',\r      highlights: [\r        { label: 'Müşteri Yönetimi', value: 'Detaylı müşteri kartları ve iletişim geçmişi' },\r        { label: 'Satış Pipeline', value: 'Fırsatları takip edin ve dönüşüm oranlarınızı artırın' },\r        { label: 'Otomasyonlar', value: 'Hatırlatmalar ve görev atamaları ile verimliliği artırın' },\r        { label: 'Analiz & Raporlama', value: 'Satış performansınızı detaylı raporlarla izleyin' }\r      ],\r      stats: { users: '10K+', efficiency: '%45', time: '2 saat/gün' }\r    },\r    {\r      icon: <AppstoreOutlined />,\r      title: 'Stok Yönetimi',\r      description: 'Envanter kontrolünü tamamen dijitalleştirin',\r      color: '#764ba2',\r      highlights: [\r        { label: 'Gerçek Zamanlı Takip', value: 'Stok hareketlerini anlık olarak görüntüleyin' },\r        { label: 'Barkod & QR Kod', value: 'Hızlı ve hatasız stok girişi/çıkışı yapın' },\r        { label: 'Akıllı Uyarılar', value: 'Minimum ve maksimum stok seviyesi bildirimleri' },\r        { label: 'Çoklu Depo', value: 'Tüm depolarınızı tek platformdan yönetin' }\r      ],\r      stats: { products: '100K+', accuracy: '%99.9', warehouses: '50+' }\r    },\r    {\r      icon: <BarChartOutlined />,\r      title: 'Satış & Faturalama',\r      description: 'Satış süreçlerinizi baştan sona dijitalleştirin',\r      color: '#f093fb',\r      highlights: [\r        { label: 'E-Fatura & E-Arşiv', value: 'GİB entegrasyonu ile otomatik fatura oluşturma' },\r        { label: 'Teklif Yönetimi', value: 'Profesyonel teklifler hazırlayın ve takip edin' },\r        { label: 'Sipariş Takibi', value: 'Siparişten teslimata tüm süreci yönetin' },\r        { label: 'Tahsilat Yönetimi', value: 'Vadeli satışları ve tahsilatları takip edin' }\r      ],\r      stats: { invoices: '1M+', integration: 'GİB Onaylı', speed: '10x' }\r    },\r    {\r      icon: <DashboardOutlined />,\r      title: 'Finans & Muhasebe',\r      description: 'Mali süreçlerinizi kontrol altına alın',\r      color: '#f5576c',\r      highlights: [\r        { label: 'Gelir-Gider Takibi', value: 'Nakit akışınızı anlık olarak görüntüleyin' },\r        { label: 'Bütçe Planlama', value: 'Departman bazlı bütçeler oluşturun ve takip edin' },\r        { label: 'Mali Tablolar', value: 'Bilanço, kar-zarar ve diğer mali raporlar' },\r        { label: 'Vergi Yönetimi', value: 'KDV, stopaj ve diğer vergi hesaplamaları' }\r      ],\r      stats: { transactions: '10M+', reports: '50+', compliance: '%100' }\r    },\r    {\r      icon: <UserOutlined />,\r      title: 'İnsan Kaynakları',\r      description: 'Modern İK yönetimi için komple çözüm',\r      color: '#4facfe',\r      highlights: [\r        { label: 'Personel Yönetimi', value: 'Dijital özlük dosyaları ve organizasyon şeması' },\r        { label: 'İzin & Vardiya', value: 'İzin talepleri ve vardiya planlaması' },\r        { label: 'Bordro İşlemleri', value: 'Maaş, prim ve kesintileri otomatik hesaplama' },\r        { label: 'Performans Takibi', value: '360 derece performans değerlendirme sistemi' }\r      ],\r      stats: { employees: '50K+', automation: '%80', satisfaction: '4.8/5' }\r    },\r    {\r      icon: <GlobalOutlined />,\r      title: 'Üretim Planlama',\r      description: 'Üretim süreçlerinizi optimize edin',\r      color: '#43e97b',\r      highlights: [\r        { label: 'İş Emirleri', value: 'Üretim emirlerini dijital olarak yönetin' },\r        { label: 'Reçete Yönetimi', value: 'Ürün reçetelerini ve maliyetlerini takip edin' },\r        { label: 'Kapasite Planlama', value: 'Makine ve işgücü kapasitesini optimize edin' },\r        { label: 'Kalite Kontrol', value: 'Üretim sürecinde kalite kontrol noktaları' }\r      ],\r      stats: { production: '1M+ ürün', optimization: '%35', quality: '%99.5' }\r    }\r  ];\r  const stats = [\r    { value: 6, suffix: '', label: 'ERP Modülü', icon: <AppstoreOutlined /> },\r    { value: 100, suffix: '+', label: 'İş Süreci', icon: <ThunderboltOutlined /> },\r    { value: 50, suffix: '+', label: 'Entegrasyon', icon: <ApiOutlined /> },\r    { value: 24, suffix: '/7', label: 'Teknik Destek', icon: <CustomerServiceOutlined /> }\r  ];\r  const pricingPlansByType = {\r    retail: [\r      {\r        name: 'Perakende Başlangıç',\r        price: 399,\r        period: 'aylık',\r        icon: <ShopOutlined />,\r        features: ['3 Kullanıcı', 'Stok + Satış + Kasa Modülleri', 'Barkod Sistemi', '5GB Depolama', 'POS Entegrasyonu', 'Email Destek'],\r        popular: false\r      },\r      {\r        name: 'Perakende Plus',\r        price: 799,\r        period: 'aylık',\r        icon: <ShopOutlined />,\r        features: ['10 Kullanıcı', 'CRM + Stok + Satış + Finans', 'Multi-Mağaza Desteği', '50GB Depolama', 'E-Fatura & E-Arşiv', 'Sadakat Programı', '7/24 Destek'],\r        popular: true\r      },\r      {\r        name: 'Perakende Zincir',\r        price: 1999,\r        period: 'aylık',\r        icon: <ShopOutlined />,\r        features: ['Sınırsız Kullanıcı', 'Tüm Modüller', 'Sınırsız Mağaza', 'Merkezi Yönetim', 'Franchise Desteği', 'Özel Raporlar', 'SLA Garantisi'],\r        popular: false\r      }\r    ],\r    production: [\r      {\r        name: 'Üretim Atölye',\r        price: 599,\r        period: 'aylık',\r        icon: <GlobalOutlined />,\r        features: ['5 Kullanıcı', 'Üretim + Stok + Satış', 'Reçete Yönetimi', '20GB Depolama', 'İş Emirleri', 'Temel Planlama'],\r        popular: false\r      },\r      {\r        name: 'Üretim Fabrika',\r        price: 1299,\r        period: 'aylık',\r        icon: <GlobalOutlined />,\r        features: ['25 Kullanıcı', 'Tüm Üretim Modülleri', 'MRP Planlama', 'Kalite Kontrol', 'Bakım Yönetimi', 'IoT Entegrasyon', 'Vardiya Yönetimi'],\r        popular: true\r      },\r      {\r        name: 'Üretim Enterprise',\r        price: 3499,\r        period: 'aylık',\r        icon: <GlobalOutlined />,\r        features: ['Sınırsız Kullanıcı', 'ERP + MES + WMS', 'Gelişmiş Planlama', 'AI Optimizasyon', 'Multi-Fabrika', 'SAP Entegrasyon', 'Özel Geliştirme'],\r        popular: false\r      }\r    ],\r    distribution: [\r      {\r        name: 'Dağıtım Başlangıç',\r        price: 499,\r        period: 'aylık',\r        icon: <TruckOutlined />,\r        features: ['5 Kullanıcı', 'Stok + Satış + Lojistik', 'Rota Planlama', '15GB Depolama', 'Araç Takibi', 'Sevkiyat Yönetimi'],\r        popular: false\r      },\r      {\r        name: 'Dağıtım Pro',\r        price: 999,\r        period: 'aylık',\r        icon: <TruckOutlined />,\r        features: ['20 Kullanıcı', 'WMS + TMS Modülleri', 'Depo Optimizasyonu', 'Gerçek Zamanlı Takip', 'B2B Portal', 'EDI Entegrasyon', 'Cross-Docking'],\r        popular: true\r      },\r      {\r        name: 'Dağıtım Network',\r        price: 2999,\r        period: 'aylık',\r        icon: <TruckOutlined />,\r        features: ['Sınırsız Kullanıcı', 'Komple Lojistik Suite', 'Multi-Depo', 'Filo Yönetimi', 'Global Ticaret', 'Gümrük Entegrasyonu', 'Blockchain Takip'],\r        popular: false\r      }\r    ],\r    service: [\r      {\r        name: 'Hizmet Başlangıç',\r        price: 349,\r        period: 'aylık',\r        icon: <CustomerServiceOutlined />,\r        features: ['3 Kullanıcı', 'CRM + Servis Yönetimi', 'Randevu Sistemi', '5GB Depolama', 'Ticket Sistemi', 'Email Destek'],\r        popular: false\r      },\r      {\r        name: 'Hizmet Professional',\r        price: 749,\r        period: 'aylık',\r        icon: <CustomerServiceOutlined />,\r        features: ['15 Kullanıcı', 'Field Service Management', 'Saha Ekibi Yönetimi', 'SLA Takibi', 'Müşteri Portali', 'Sözleşme Yönetimi', '7/24 Destek'],\r        popular: true\r      },\r      {\r        name: 'Hizmet Enterprise',\r        price: 1799,\r        period: 'aylık',\r        icon: <CustomerServiceOutlined />,\r        features: ['Sınırsız Kullanıcı', 'Komple Service Suite', 'AI Chatbot', 'Omnichannel Destek', 'Knowledge Base', 'API Marketplace', 'White Label'],\r        popular: false\r      }\r    ],\r    default: [\r      {\r        name: 'Startup Paketi',\r        price: 499,\r        period: 'aylık',\r        icon: <RocketOutlined />,\r        features: ['5 Kullanıcı', 'CRM + Stok + Satış', '10GB Depolama', 'Temel Raporlar', 'Email Destek', 'Mobil Uygulama'],\r        popular: false\r      },\r      {\r        name: 'Profesyonel Paket',\r        price: 999,\r        period: 'aylık',\r        icon: <ThunderboltOutlined />,\r        features: ['25 Kullanıcı', 'Tüm ERP Modülleri', '100GB Depolama', 'Gelişmiş Raporlar', '7/24 Destek', 'E-Fatura', 'API Erişimi'],\r        popular: true\r      },\r      {\r        name: 'Kurumsal Paket',\r        price: 2499,\r        period: 'aylık',\r        icon: <TrophyOutlined />,\r        features: ['Sınırsız Kullanıcı', 'Tüm Modüller + Özelleştirme', 'Sınırsız Depolama', 'BI & Analytics', 'Özel Destek', 'White Label', 'SLA'],\r        popular: false\r      }\r    ]\r  };\r  const currentPlans = pricingPlansByType[selectedBusinessType] || pricingPlansByType.default;\r  const testimonials = [\r    {\r      name: 'Ahmet Yılmaz',\r      position: 'Genel Müdür',\r      company: 'TechCorp',\r      avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=1',\r      rating: 5,\r      comment: 'Stocker ERP ile tüm departmanlarımızı tek platformda topladık. Üretimden satışa kadar her şey kontrol altında.'\r    },\r    {\r      name: 'Ayşe Demir',\r      position: 'Operasyon Direktörü',\r      company: 'GlobalTrade',\r      avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=2',\r      rating: 5,\r      comment: 'Stok ve finans modülleri mükemmel entegre. E-fatura sistemi sayesinde muhasebe işlerimiz %80 hızlandı.'\r    },\r    {\r      name: 'Mehmet Kara',\r      position: 'Satış Müdürü',\r      company: 'RetailPlus',\r      avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=3',\r      rating: 5,\r      comment: 'CRM modülü ile müşteri memnuniyetimiz arttı. Tüm şubelerimizi tek yerden yönetiyoruz.'\r    }\r  ];\r  return (\r    <div className=\"modern-landing\">\r      {/* Navigation */}\r      <motion.nav \r        className={`modern-nav ${scrolled ? 'scrolled' : ''}`}\r        initial={{ y: -100 }}\r        animate={{ y: 0 }}\r        transition={{ duration: 0.5 }}\r      >\r        <div className=\"nav-container\">\r          <div className=\"nav-logo\" onClick={() => navigate('/')} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => navigate('/')(e)}>\r            <RocketOutlined style={{ fontSize: 28 }} />\r            <span>Stocker</span>\r          </div>\r          <div className=\"nav-menu\">\r            <a \r              className={activeSection === 'features' ? 'active' : ''}\r              onClick={() => scrollToSection('features')} \r              style={{ cursor: 'pointer' }}\r            >\r              Özellikler\r            </a>\r            <a \r              className={activeSection === 'stats' ? 'active' : ''}\r              onClick={() => scrollToSection('stats')} \r              style={{ cursor: 'pointer' }}\r            >\r              İstatistikler\r            </a>\r            <a \r              className={activeSection === 'comparison' ? 'active' : ''}\r              onClick={() => scrollToSection('comparison')} \r              style={{ cursor: 'pointer' }}\r            >\r              Fiyatlandırma\r            </a>\r            <a \r              className={activeSection === 'testimonials' ? 'active' : ''}\r              onClick={() => scrollToSection('testimonials')} \r              style={{ cursor: 'pointer' }}\r            >\r              Referanslar\r            </a>\r            <a onClick={() => navigate('/blog')} style={{ cursor: 'pointer' }}>Blog</a>\r            <a \r              className={activeSection === 'faq' ? 'active' : ''}\r              onClick={() => scrollToSection('faq')} \r              style={{ cursor: 'pointer' }}\r            >\r              SSS\r            </a>\r            <Button type=\"default\" onClick={() => setShowTenantModal(true)}>Giriş</Button>\r            <Button type=\"primary\" onClick={() => navigate('/register')}>\r              Ücretsiz Başla\r            </Button>\r          </div>\r        </div>\r      </motion.nav>\r      {/* Section Navigation Dots */}\r      <motion.div\r        initial={{ opacity: 0, x: -20 }}\r        animate={{ opacity: 1, x: 0 }}\r        transition={{ delay: 0.5 }}\r        style={{\r          position: 'fixed',\r          left: '40px',\r          top: '50%',\r          transform: 'translateY(-50%)',\r          zIndex: 998,\r          display: 'flex',\r          flexDirection: 'column',\r          gap: '20px'\r        }}\r        className=\"section-navigation\"\r      >\r        {sections.map((section) => (\r          <Tooltip\r            key={section.id}\r            title={`${section.icon} ${section.name}`}\r            placement=\"right\"\r          >\r            <motion.div\r              whileHover={{ scale: 1.2 }}\r              whileTap={{ scale: 0.9 }}\r              onClick={() => scrollToSection(section.id)}\r              style={{\r                width: activeSection === section.id ? '40px' : '12px',\r                height: '12px',\r                borderRadius: '6px',\r                background: activeSection === section.id\r                  ? 'linear-gradient(135deg, #667eea, #764ba2)'\r                  : '#cbd5e0',\r                cursor: 'pointer',\r                transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\r                boxShadow: activeSection === section.id\r                  ? '0 4px 12px rgba(102, 126, 234, 0.4)'\r                  : 'none'\r              }}\r            />\r          </Tooltip>\r        ))}\r      </motion.div>\r      {/* Progress Bar */}\r      <motion.div\r        initial={{ scaleX: 0 }}\r        animate={{ scaleX: scrollY / (document.documentElement.scrollHeight - window.innerHeight) }}\r        style={{\r          position: 'fixed',\r          top: 0,\r          left: 0,\r          right: 0,\r          height: '3px',\r          background: 'linear-gradient(90deg, #667eea, #764ba2)',\r          transformOrigin: 'left',\r          zIndex: 1001,\r          transition: 'transform 0.1s'\r        }}\r      />\r      {/* Hero Section */}\r      <section id=\"hero\" className=\"hero-section\">\r        <div \r          className=\"hero-background\"\r          style={{\r            transform: `translateY(${scrollY * 0.5}px)`\r          }}\r        >\r          {[...Array(20)].map((_, i) => (\r            <motion.div\r              key={i}\r              className=\"floating-shape\"\r              animate={{\r                y: [0, -30, 0],\r                x: [0, 15, 0],\r                rotate: [0, 360]\r              }}\r              transition={{\r                duration: 15 + i * 2,\r                repeat: Infinity,\r                ease: \"linear\"\r              }}\r              style={{\r                left: `${Math.random() * 100}%`,\r                top: `${Math.random() * 100}%`,\r                animationDelay: `${i * 0.3}s`,\r                transform: `translateY(${scrollY * (0.1 * (i % 3))}px)`\r              }}\r            />\r          ))}\r        </div>\r        <div className=\"hero-content\">\r          <motion.div\r            initial={{ opacity: 0, y: 20 }}\r            animate={{ opacity: 1, y: 0 }}\r            transition={{ duration: 0.8 }}\r          >\r            <div style={{ marginBottom: 20 }}>\r              <Tag color=\"purple\" style={{ padding: '8px 20px', fontSize: '16px' }}>\r                <FireOutlined /> 14 Gün Ücretsiz Deneme\r              </Tag>\r              <Tag color=\"red\" style={{ padding: '8px 20px', fontSize: '16px', marginLeft: '10px' }}>\r                🎉 Yeni\r              </Tag>\r            </div>\r            <Title level={1} className=\"hero-title\">\r              {displayText}\r              <span className=\"cursor-blink\">|</span>\r            </Title>\r            <Title level={2} className=\"hero-subtitle\">\r              Kapsamlı ERP Çözümü ile <span className=\"gradient-text\">Tek Platform</span>da Tüm İşlemler\r            </Title>\r            <Paragraph className=\"hero-description\">\r              CRM, Stok, Satış, Finans, İK ve Üretim modülleriyle işletmenizin tüm süreçlerini \r              tek bir platformdan yönetin. Bulut tabanlı, güvenli ve ölçeklenebilir ERP sistemi.\r            </Paragraph>\r            <Space size=\"large\" className=\"hero-actions\">\r              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\r                <Button \r                  type=\"primary\" \r                  size=\"large\"\r                  icon={<RocketOutlined />}\r                  onClick={() = aria-label=\"rocket outlined\"> navigate('/register')}\r                  className=\"cta-button primary-cta\"\r                >\r                  Hemen Başla - Ücretsiz\r                </Button>\r              </motion.div>\r              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\r                <Button \r                  size=\"large\"\r                  icon={<PlayCircleOutlined />}\r                  className=\"cta-button secondary-cta\"\r                  onClick={() = aria-label=\"play circle outlined\"> {\r                    modal.info({\r                      title: 'Demo Videosu',\r                      content: (\r                        <div>\r                          <p>Demo videosu yakında eklenecek!</p>\r                          <p>Şimdilik <strong>14 gün ücretsiz deneme</strong> ile tüm özellikleri test edebilirsiniz.</p>\r                        </div>\r                      ),\r                      icon: <PlayCircleOutlined style={{ color: '#667eea' }} />,\r                      okText: 'Tamam',\r                      okButtonProps: { type: 'primary' },\r                      centered: true,\r                      maskClosable: true\r                    });\r                  }}\r                >\r                  Demo İzle\r                </Button>\r              </motion.div>\r            </Space>\r            <div className=\"hero-trust\">\r              <Space split={<Divider type=\"vertical\" />}>\r                <span><CheckCircleOutlined /> Kredi kartı gerekmez</span>\r                <span><CheckCircleOutlined /> 5 dakikada kurulum</span>\r                <span><CheckCircleOutlined /> 7/24 destek</span>\r              </Space>\r            </div>\r          </motion.div>\r        </div>\r        {/* Hero Dashboard Preview */}\r        <motion.div \r          className=\"hero-preview\"\r          initial={{ opacity: 0, y: 50 }}\r          animate={{ opacity: 1, y: 0 }}\r          transition={{ delay: 0.5, duration: 0.8 }}\r        >\r          <div className=\"preview-window\">\r            <div className=\"window-controls\">\r              <span></span><span></span><span></span>\r            </div>\r            <div className=\"preview-content\">\r              <div style={{ \r                padding: '40px',\r                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r                borderRadius: '8px',\r                color: 'white',\r                textAlign: 'center'\r              }}>\r                <DashboardOutlined style={{ fontSize: '64px', marginBottom: '20px' }} />\r                <h3 style={{ fontSize: '24px', fontWeight: 600, marginBottom: '10px' }}>\r                  Stocker ERP Dashboard\r                </h3>\r                <p style={{ fontSize: '16px', opacity: 0.9 }}>\r                  6 Ana Modül, Tek Platform\r                </p>\r                <div style={{ \r                  marginTop: '30px',\r                  display: 'grid',\r                  gridTemplateColumns: 'repeat(3, 1fr)',\r                  gap: '15px'\r                }}>\r                  <div style={{ textAlign: 'center' }}>\r                    <TeamOutlined style={{ fontSize: '24px', marginBottom: '5px' }} />\r                    <div style={{ fontSize: '14px', fontWeight: 'bold' }}>CRM</div>\r                  </div>\r                  <div style={{ textAlign: 'center' }}>\r                    <AppstoreOutlined style={{ fontSize: '24px', marginBottom: '5px' }} />\r                    <div style={{ fontSize: '14px', fontWeight: 'bold' }}>Stok</div>\r                  </div>\r                  <div style={{ textAlign: 'center' }}>\r                    <BarChartOutlined style={{ fontSize: '24px', marginBottom: '5px' }} />\r                    <div style={{ fontSize: '14px', fontWeight: 'bold' }}>Satış</div>\r                  </div>\r                  <div style={{ textAlign: 'center' }}>\r                    <DashboardOutlined style={{ fontSize: '24px', marginBottom: '5px' }} />\r                    <div style={{ fontSize: '14px', fontWeight: 'bold' }}>Finans</div>\r                  </div>\r                  <div style={{ textAlign: 'center' }}>\r                    <UserOutlined style={{ fontSize: '24px', marginBottom: '5px' }} />\r                    <div style={{ fontSize: '14px', fontWeight: 'bold' }}>İK</div>\r                  </div>\r                  <div style={{ textAlign: 'center' }}>\r                    <GlobalOutlined style={{ fontSize: '24px', marginBottom: '5px' }} />\r                    <div style={{ fontSize: '14px', fontWeight: 'bold' }}>Üretim</div>\r                  </div>\r                </div>\r              </div>\r            </div>\r          </div>\r        </motion.div>\r      </section>\r      {/* Stats Section */}\r      <section id=\"stats\" className=\"stats-section\" ref={statsRef}>\r        <div className=\"container\">\r          <Row gutter={[32, 32]}>\r            {stats.map((stat, index) => (\r              <Col xs={12} sm={12} md={6} key={index}>\r                <motion.div\r                  initial={{ opacity: 0, y: 20 }}\r                  animate={statsInView ? { opacity: 1, y: 0 } : {}}\r                  transition={{ delay: index * 0.1 }}\r                  className=\"stat-card\"\r                >\r                  <div className=\"stat-icon\">{stat.icon}</div>\r                  <div className=\"stat-value\">\r                    {statsInView && (\r                      <CountUp\r                        end={stat.value}\r                        duration={2.5}\r                        separator=\",\"\r                        decimals={stat.suffix === '%' ? 1 : 0}\r                      />\r                    )}\r                    <span className=\"stat-suffix\">{stat.suffix}</span>\r                  </div>\r                  <div className=\"stat-label\">{stat.label}</div>\r                </motion.div>\r              </Col>\r            ))}\r          </Row>\r        </div>\r      </section>\r      {/* Features Section */}\r      <section id=\"features\" className=\"features-section\" ref={featuresRef}>\r        <div className=\"container\">\r          <motion.div\r            initial={{ opacity: 0 }}\r            animate={featuresInView ? { opacity: 1 } : {}}\r            className=\"section-header\"\r          >\r            <Tag color=\"purple\" className=\"section-tag\">ERP Modülleri</Tag>\r            <Title level={2}>İşletmenizi Dijitalleştiren 6 Ana Modül</Title>\r            <Paragraph>Her departman için özel tasarlanmış, birbiriyle entegre çalışan güçlü modüller</Paragraph>\r          </motion.div>\r          <Row gutter={[24, 24]}>\r            {features.map((feature, index) => (\r              <Col xs={24} md={12} lg={8} key={index}>\r                <motion.div\r                  initial={{ opacity: 0, y: 20 }}\r                  animate={featuresInView ? { opacity: 1, y: 0 } : {}}\r                  transition={{ delay: index * 0.1 }}\r                >\r                  <Card\r                    className=\"feature-card-modern\"\r                    hoverable\r                    style={{\r                      height: '100%',\r                      borderRadius: '16px',\r                      border: 'none',\r                      boxShadow: '0 4px 20px rgba(0,0,0,0.08)',\r                      overflow: 'hidden',\r                      transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)'\r                    }}\r                    onMouseEnter={(e) => {\r                      e.currentTarget.style.transform = 'translateY(-8px)';\r                      e.currentTarget.style.boxShadow = '0 12px 40px rgba(102, 126, 234, 0.15)';\r                    }}\r                    onMouseLeave={(e) => {\r                      e.currentTarget.style.transform = 'translateY(0)';\r                      e.currentTarget.style.boxShadow = '0 4px 20px rgba(0,0,0,0.08)';\r                    }}\r                  >\r                    {/* Gradient Header */}\r                    <div style={{\r                      background: `linear-gradient(135deg, ${feature.color}15, ${feature.color}05)`,\r                      padding: '24px',\r                      marginBottom: '20px',\r                      borderRadius: '12px',\r                      textAlign: 'center'\r                    }}>\r                      <div style={{\r                        fontSize: '48px',\r                        color: feature.color,\r                        marginBottom: '12px'\r                      }}>\r                        {feature.icon}\r                      </div>\r                      <h3 style={{\r                        fontSize: '20px',\r                        fontWeight: '600',\r                        margin: '0 0 8px 0',\r                        color: '#1a202c'\r                      }}>\r                        {feature.title}\r                      </h3>\r                      <p style={{\r                        fontSize: '14px',\r                        color: '#718096',\r                        margin: 0,\r                        lineHeight: '1.5'\r                      }}>\r                        {feature.description}\r                      </p>\r                    </div>\r                    {/* Key Features */}\r                    <div style={{ padding: '0 24px 24px' }}>\r                      <div style={{ marginBottom: '20px' }}>\r                        {feature.highlights.slice(0, 3).map((highlight, i) => (\r                          <div key={i} style={{\r                            marginBottom: '12px',\r                            display: 'flex',\r                            alignItems: 'flex-start',\r                            gap: '10px'\r                          }}>\r                            <CheckCircleOutlined style={{\r                              color: feature.color,\r                              fontSize: '16px',\r                              marginTop: '2px',\r                              flexShrink: 0\r                            }} />\r                            <div>\r                              <div style={{\r                                fontSize: '14px',\r                                fontWeight: '500',\r                                color: '#2d3748',\r                                marginBottom: '2px'\r                              }}>\r                                {highlight.label}\r                              </div>\r                              <div style={{\r                                fontSize: '12px',\r                                color: '#718096',\r                                lineHeight: '1.4'\r                              }}>\r                                {highlight.value}\r                              </div>\r                            </div>\r                          </div>\r                        ))}\r                      </div>\r                      {/* Stats Bar */}\r                      <div style={{\r                        borderTop: '1px solid #e2e8f0',\r                        paddingTop: '16px',\r                        display: 'flex',\r                        justifyContent: 'space-around',\r                        textAlign: 'center'\r                      }}>\r                        {Object.entries(feature.stats).slice(0, 3).map(([key, value], i) => (\r                          <div key={i}>\r                            <div style={{\r                              fontSize: '16px',\r                              fontWeight: '600',\r                              color: feature.color\r                            }}>\r                              {value}\r                            </div>\r                            <div style={{\r                              fontSize: '11px',\r                              color: '#a0aec0',\r                              textTransform: 'capitalize',\r                              marginTop: '2px'\r                            }}>\r                              {key === 'users' ? 'Kullanıcı' : \r                               key === 'efficiency' ? 'Verimlilik' :\r                               key === 'time' ? 'Tasarruf' :\r                               key === 'products' ? 'Ürün' :\r                               key === 'accuracy' ? 'Doğruluk' :\r                               key === 'warehouses' ? 'Depo' :\r                               key === 'invoices' ? 'Fatura' :\r                               key === 'integration' ? 'Entegrasyon' :\r                               key === 'speed' ? 'Hız' :\r                               key === 'transactions' ? 'İşlem' :\r                               key === 'reports' ? 'Rapor' :\r                               key === 'compliance' ? 'Uyumluluk' :\r                               key === 'employees' ? 'Çalışan' :\r                               key === 'automation' ? 'Otomasyon' :\r                               key === 'satisfaction' ? 'Memnuniyet' :\r                               key === 'production' ? 'Üretim' :\r                               key === 'optimization' ? 'Optimizasyon' :\r                               key === 'quality' ? 'Kalite' : key}\r                            </div>\r                          </div>\r                        ))}\r                      </div>\r                      {/* Learn More Button */}\r                      <Button\r                        type=\"link\"\r                        style={{\r                          padding: 0,\r                          marginTop: '16px',\r                          color: feature.color,\r                          fontWeight: '500',\r                          fontSize: '14px'\r                        }}\r                        onClick={() => {\r                          modal.info({\r                            title: feature.title,\r                            width: 600,\r                            content: (\r                              <div>\r                                <p style={{ marginBottom: '20px' }}>{feature.description}</p>\r                                <h4 style={{ marginBottom: '12px', fontWeight: '600' }}>Öne Çıkan Özellikler:</h4>\r                                {feature.highlights.map((highlight, i) => (\r                                  <div key={i} style={{ marginBottom: '12px' }}>\r                                    <strong>{highlight.label}:</strong> {highlight.value}\r                                  </div>\r                                ))}\r                                <Divider />\r                                <div style={{ display: 'flex', justifyContent: 'space-around', textAlign: 'center' }}>\r                                  {Object.entries(feature.stats).map(([key, value], i) => (\r                                    <div key={i}>\r                                      <div style={{ fontSize: '20px', fontWeight: '600', color: feature.color }}>\r                                        {value}\r                                      </div>\r                                      <div style={{ fontSize: '12px', color: '#718096' }}>\r                                        {key === 'users' ? 'Aktif Kullanıcı' : \r                                         key === 'efficiency' ? 'Verimlilik Artışı' :\r                                         key === 'time' ? 'Zaman Tasarrufu' :\r                                         key === 'products' ? 'Yönetilen Ürün' :\r                                         key === 'accuracy' ? 'Envanter Doğruluğu' :\r                                         key === 'warehouses' ? 'Desteklenen Depo' :\r                                         key === 'invoices' ? 'Aylık Fatura' :\r                                         key === 'integration' ? '' :\r                                         key === 'speed' ? 'Daha Hızlı' :\r                                         key === 'transactions' ? 'Yıllık İşlem' :\r                                         key === 'reports' ? 'Hazır Rapor' :\r                                         key === 'compliance' ? 'Yasal Uyumluluk' :\r                                         key === 'employees' ? 'Yönetilen Personel' :\r                                         key === 'automation' ? 'Süreç Otomasyonu' :\r                                         key === 'satisfaction' ? 'Kullanıcı Puanı' :\r                                         key === 'production' ? '' :\r                                         key === 'optimization' ? 'Maliyet Azalması' :\r                                         key === 'quality' ? 'Kalite Oranı' : key}\r                                      </div>\r                                    </div>\r                                  ))}\r                                </div>\r                              </div>\r                            ),\r                            okText: 'Tamam',\r                            okButtonProps: { type: 'primary' },\r                            centered: true\r                          });\r                        }}\r                      >\r                        Detaylı Bilgi <ArrowRightOutlined style={{ fontSize: '12px' }} />\r                      </Button>\r                    </div>\r                  </Card>\r                </motion.div>\r              </Col>\r            ))}\r          </Row>\r          {/* Integration Message */}\r          <motion.div\r            initial={{ opacity: 0, y: 20 }}\r            animate={featuresInView ? { opacity: 1, y: 0 } : {}}\r            transition={{ delay: 0.6 }}\r            style={{\r              marginTop: '60px',\r              textAlign: 'center'\r            }}\r          >\r            <Card\r              style={{\r                background: 'linear-gradient(135deg, #667eea15, #764ba205)',\r                border: 'none',\r                borderRadius: '16px',\r                padding: '32px'\r              }}\r            >\r              <ApiOutlined style={{ fontSize: '48px', color: '#667eea', marginBottom: '16px' }} />\r              <Title level={3} style={{ marginBottom: '12px' }}>Tam Entegre Çalışma</Title>\r              <Paragraph style={{ fontSize: '16px', maxWidth: '600px', margin: '0 auto' }}>\r                Tüm modüller birbiriyle senkronize çalışır. Bir modülde yapılan değişiklik, \r                ilgili tüm modüllerde otomatik olarak güncellenir.\r              </Paragraph>\r            </Card>\r          </motion.div>\r        </div>\r      </section>\r      {/* Testimonials Section */}\r      <section id=\"testimonials\" className=\"testimonials-section\" ref={testimonialsRef}>\r        <div className=\"container\">\r          <div className=\"section-header\">\r            <Tag color=\"purple\" className=\"section-tag\">Referanslar</Tag>\r            <Title level={2}>Müşterilerimiz Ne Diyor?</Title>\r            <Paragraph>Stocker ERP'yi tercih eden işletmelerden geri bildirimler</Paragraph>\r          </div>\r          {/* Client Logos */}\r          <div className=\"client-logos\">\r            <motion.div \r              className=\"logos-container\"\r              initial={{ opacity: 0, y: 20 }}\r              animate={testimonialsInView ? { opacity: 1, y: 0 } : {}}\r              transition={{ duration: 0.6 }}\r            >\r              {[\r                { name: 'TechCorp', bg: '#667eea' },\r                { name: 'GlobalTrade', bg: '#764ba2' },\r                { name: 'RetailPlus', bg: '#f093fb' },\r                { name: 'LogiMove', bg: '#4facfe' },\r                { name: 'ProdFactory', bg: '#43e97b' },\r                { name: 'ServicePro', bg: '#fa709a' }\r              ].map((client, index) => (\r                <motion.div\r                  key={index}\r                  className=\"logo-card\"\r                  whileHover={{ scale: 1.05, y: -5 }}\r                  transition={{ type: \"spring\", stiffness: 300 }}\r                  style={{ animationDelay: `${index * 0.1}s` }}\r                >\r                  <div \r                    className=\"logo-placeholder\"\r                    style={{ background: `linear-gradient(135deg, ${client.bg}20, ${client.bg}10)` }}\r                  >\r                    <span style={{ color: client.bg, fontWeight: 700, fontSize: 18 }}>\r                      {client.name}\r                    </span>\r                  </div>\r                </motion.div>\r              ))}\r            </motion.div>\r          </div>\r          <Row gutter={[32, 32]} style={{ marginTop: 60 }}>\r            {testimonials.map((testimonial, index) => (\r              <Col xs={24} md={8} key={index}>\r                <motion.div\r                  initial={{ opacity: 0, scale: 0.9 }}\r                  animate={testimonialsInView ? { opacity: 1, scale: 1 } : {}}\r                  transition={{ delay: index * 0.1 }}\r                  className=\"testimonial-card-modern\"\r                >\r                  <div className=\"testimonial-header\">\r                    <Avatar \r                      src={testimonial.avatar} \r                      size={64} \r                      style={{ border: '4px solid white', boxShadow: '0 4px 20px rgba(0,0,0,0.1)' }}\r                    />\r                    <Rate disabled defaultValue={testimonial.rating} style={{ marginTop: 12 }} />\r                  </div>\r                  <p className=\"testimonial-comment\">\"{testimonial.comment}\"</p>\r                  <div className=\"testimonial-footer\">\r                    <h4>{testimonial.name}</h4>\r                    <span>{testimonial.position}</span>\r                    <div className=\"company-badge\">{testimonial.company}</div>\r                  </div>\r                </motion.div>\r              </Col>\r            ))}\r          </Row>\r        </div>\r      </section>\r      {/* Comparison Table */}\r      <section id=\"comparison\">\r        <ComparisonTable />\r      </section>\r      {/* FAQ Section */}\r      <section id=\"faq\">\r        <FAQSection />\r      </section>\r      {/* Footer */}\r      <footer className=\"modern-footer\">\r        <div className=\"container\">\r          <Row gutter={[32, 32]}>\r            <Col xs={24} sm={12} lg={6}>\r              <div className=\"footer-brand\">\r                <RocketOutlined /> Stocker\r              </div>\r              <p>Modern işletmeler için dijital dönüşüm platformu</p>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <h4>Ürün</h4>\r              <ul>\r                <li><a href=\"#\">Özellikler</a></li>\r                <li><a href=\"#\">Fiyatlandırma</a></li>\r                <li><a href=\"#\">Entegrasyonlar</a></li>\r              </ul>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <h4>Şirket</h4>\r              <ul>\r                <li><a href=\"#\">Hakkımızda</a></li>\r                <li><a href=\"#\">Kariyer</a></li>\r                <li><a href=\"#\">İletişim</a></li>\r              </ul>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <h4>Destek</h4>\r              <ul>\r                <li><a href=\"#\">Yardım Merkezi</a></li>\r                <li><a href=\"#\">API Dokümantasyon</a></li>\r                <li><a href=\"#\">Durum</a></li>\r              </ul>\r            </Col>\r          </Row>\r          <Divider />\r          <div className=\"footer-bottom\">\r            <p>© 2024 Stocker. Tüm hakları saklıdır.</p>\r            <Space>\r              <a href=\"#\">Gizlilik</a>\r              <a href=\"#\">Şartlar</a>\r              <a href=\"#\">Çerezler</a>\r            </Space>\r          </div>\r        </div>\r      </footer>\r      {/* Scroll to Top Button */}\r      <Affix style={{ position: 'fixed', bottom: 40, right: 40 }}>\r        <Button\r          type=\"primary\"\r          shape=\"circle\"\r          size=\"large\"\r          icon={<ArrowUpOutlined />}\r          onClick={scrollToTop}\r          style={{\r            width: '56px',\r            height: '56px',\r            background: 'linear-gradient(135deg, #667eea, #764ba2)',\r            border: 'none',\r            boxShadow: '0 8px 32px rgba(102, 126, 234, 0.35)',\r            fontSize: '20px',\r            display: showScrollTop ? 'flex' : 'none',\r            alignItems: 'center',\r            justifyContent: 'center'\r          }}\r        / aria-label=\"arrow up outlined\">\r      </Affix>\r      {/* Tenant Login Modal */}\r      <TenantLoginModal\r        visible={showTenantModal}\r        onClose={() => setShowTenantModal(false)}\r      />\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/pages/ModernLanding/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "noKeyboardHandlers",
      "line": 1,
      "code": "import React, { memo, useMemo } from 'react';\rimport { Card, Row, Col, Statistic, Progress, Badge, Space, Typography, Tooltip, Skeleton } from 'antd';\rimport {\r  ArrowUpOutlined,\r  ArrowDownOutlined,\r  InfoCircleOutlined,\r  SyncOutlined,\r} from '@ant-design/icons';\rimport CountUp from 'react-countup';\rimport { motion } from 'framer-motion';\rconst { Text, Title } = Typography;\rinterface WidgetProps {\r  title: string;\r  value: number;\r  prefix?: string;\r  suffix?: string;\r  trend?: 'up' | 'down' | 'stable';\r  trendValue?: number;\r  icon?: React.ReactNode;\r  color?: string;\r  loading?: boolean;\r  description?: string;\r  onClick?: () => void;\r  progress?: number;\r  extra?: React.ReactNode;\r}\r// Optimize edilmiş StatWidget komponenti\rexport const StatWidget = memo<WidgetProps>(({\r  title,\r  value,\r  prefix,\r  suffix,\r  trend,\r  trendValue,\r  icon,\r  color = '#1890ff',\r  loading = false,\r  description,\r  onClick,\r  progress,\r  extra\r}) => {\r  const trendIcon = useMemo(() => {\r    if (!trend) return null;\r    if (trend === 'up') return <ArrowUpOutlined style={{ color: '#52c41a' }} />;\r    if (trend === 'down') return <ArrowDownOutlined style={{ color: '#ff4d4f' }} />;\r    return null;\r  }, [trend]);\r  const trendColor = useMemo(() => {\r    if (trend === 'up') return '#52c41a';\r    if (trend === 'down') return '#ff4d4f';\r    return '#faad14';\r  }, [trend]);\r  if (loading) {\r    return (\r      <Card className=\"stat-widget-loading\">\r        <Skeleton active paragraph={{ rows: 2 }} />\r      </Card>\r    );\r  }\r  return (\r    <motion.div\r      whileHover={{ scale: 1.02 }}\r      whileTap={{ scale: 0.98 }}\r      transition={{ type: \"spring\", stiffness: 300 }}\r    >\r      <Card\r        className=\"stat-widget\"\r        hoverable={!!onClick}\r        onClick={onClick}\r        style={{\r          borderTop: `3px solid ${color}`,\r          cursor: onClick ? 'pointer' : 'default'\r        }}\r      >\r        <div className=\"widget-header\">\r          <Space>\r            {icon && (\r              <div className=\"widget-icon\" style={{ color, fontSize: 24 }}>\r                {icon}\r              </div>\r            )}\r            <div>\r              <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                {title}\r              </Text>\r              {description && (\r                <Tooltip title={description}>\r                  <InfoCircleOutlined style={{ marginLeft: 8, fontSize: 12 }} />\r                </Tooltip>\r              )}\r            </div>\r          </Space>\r          {extra}\r        </div>\r        <div className=\"widget-value\" style={{ margin: '16px 0' }}>\r          <Space align=\"baseline\">\r            {prefix && <Text style={{ fontSize: 20, color }}>{prefix}</Text>}\r            <Text style={{ fontSize: 32, fontWeight: 700, color }}>\r              <CountUp\r                end={value}\r                duration={1.5}\r                separator=\",\"\r                decimals={suffix === '%' ? 1 : 0}\r              />\r            </Text>\r            {suffix && <Text style={{ fontSize: 20, color }}>{suffix}</Text>}\r          </Space>\r        </div>\r        {(trend || progress !== undefined) && (\r          <div className=\"widget-footer\">\r            {trend && trendValue !== undefined && (\r              <Space style={{ fontSize: 12 }}>\r                {trendIcon}\r                <Text style={{ color: trendColor }}>\r                  {trendValue > 0 ? '+' : ''}{trendValue}%\r                </Text>\r                <Text type=\"secondary\">son 30 gün</Text>\r              </Space>\r            )}\r            {progress !== undefined && (\r              <Progress\r                percent={progress}\r                size=\"small\"\r                strokeColor={color}\r                showInfo={false}\r                style={{ marginTop: 8 }}\r              />\r            )}\r          </div>\r        )}\r      </Card>\r    </motion.div>\r  );\r});\rStatWidget.displayName = 'StatWidget';\r// Mini istatistik widget'ı\rexport const MiniStatWidget = memo<{\r  title: string;\r  value: number | string;\r  icon?: React.ReactNode;\r  color?: string;\r  trend?: 'up' | 'down';\r}>(({ title, value, icon, color = '#1890ff', trend }) => (\r  <div className=\"mini-stat-widget\">\r    <Space size=\"small\">\r      {icon && (\r        <div className=\"mini-icon\" style={{ color, fontSize: 20 }}>\r          {icon}\r        </div>\r      )}\r      <div>\r        <Text type=\"secondary\" style={{ fontSize: 11, display: 'block' }}>\r          {title}\r        </Text>\r        <Space size={4} align=\"baseline\">\r          <Text strong style={{ fontSize: 16 }}>\r            {typeof value === 'number' ? (\r              <CountUp end={value} duration={1} separator=\",\" />\r            ) : value}\r          </Text>\r          {trend && (\r            trend === 'up' \r              ? <ArrowUpOutlined style={{ fontSize: 10, color: '#52c41a' }} />\r              : <ArrowDownOutlined style={{ fontSize: 10, color: '#ff4d4f' }} />\r          )}\r        </Space>\r      </div>\r    </Space>\r  </div>\r));\rMiniStatWidget.displayName = 'MiniStatWidget';\r// Sistem durumu widget'ı\rexport const SystemStatusWidget = memo<{\r  cpu: number;\r  memory: number;\r  disk: number;\r  network: number;\r  loading?: boolean;\r}>(({ cpu, memory, disk, network, loading }) => {\r  const getStatusColor = (value: number) => {\r    if (value < 50) return '#52c41a';\r    if (value < 80) return '#faad14';\r    return '#ff4d4f';\r  };\r  const getStatus = (value: number) => {\r    if (value < 50) return 'success';\r    if (value < 80) return 'warning';\r    return 'error';\r  };\r  if (loading) {\r    return (\r      <Card title=\"Sistem Durumu\" extra={<SyncOutlined spin />}>\r        <Skeleton active paragraph={{ rows: 4 }} />\r      </Card>\r    );\r  }\r  const metrics = [\r    { label: 'CPU', value: cpu, unit: '%' },\r    { label: 'Bellek', value: memory, unit: '%' },\r    { label: 'Disk', value: disk, unit: '%' },\r    { label: 'Network', value: network, unit: 'Mbps' }\r  ];\r  return (\r    <Card \r      title=\"Sistem Durumu\" \r      extra={\r        <Badge \r          status={getStatus(Math.max(cpu, memory, disk))} \r          text=\"Çalışıyor\" \r        />\r      }\r    >\r      <Space direction=\"vertical\" style={{ width: '100%' }} size=\"middle\">\r        {metrics.map((metric) => (\r          <div key={metric.label}>\r            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 4 }}>\r              <Text>{metric.label}</Text>\r              <Text strong>\r                {metric.value}{metric.unit}\r              </Text>\r            </div>\r            <Progress\r              percent={metric.unit === '%' ? metric.value : Math.min(metric.value / 100 * 100, 100)}\r              strokeColor={getStatusColor(metric.value)}\r              size=\"small\"\r              status={metric.value >= 95 ? 'exception' : 'active'}\r            />\r          </div>\r        ))}\r      </Space>\r    </Card>\r  );\r});\rSystemStatusWidget.displayName = 'SystemStatusWidget';\r// Activity widget'ı\rexport const ActivityWidget = memo<{\r  activities: Array<{\r    id: string;\r    type: 'success' | 'error' | 'warning' | 'info';\r    title: string;\r    description?: string;\r    time: string;\r    user?: string;\r  }>;\r  loading?: boolean;\r}>(({ activities, loading }) => {\r  if (loading) {\r    return (\r      <Card title=\"Son Aktiviteler\">\r        <Skeleton active paragraph={{ rows: 5 }} />\r      </Card>\r    );\r  }\r  return (\r    <Card \r      title=\"Son Aktiviteler\"\r      bodyStyle={{ padding: '12px 24px' }}\r      extra={\r        <Badge count={activities.length} style={{ backgroundColor: '#52c41a' }} />\r      }\r    >\r      <div className=\"activity-list\">\r        {activities.map((activity) => (\r          <div key={activity.id} className=\"activity-item\">\r            <Badge \r              status={\r                activity.type === 'success' ? 'success' :\r                activity.type === 'error' ? 'error' :\r                activity.type === 'warning' ? 'warning' :\r                'processing'\r              }\r            />\r            <div className=\"activity-content\">\r              <div>\r                <Text strong>{activity.title}</Text>\r                {activity.description && (\r                  <Text type=\"secondary\" style={{ display: 'block', fontSize: 12 }}>\r                    {activity.description}\r                  </Text>\r                )}\r              </div>\r              <Space size=\"small\" style={{ fontSize: 11 }}>\r                <Text type=\"secondary\">{activity.time}</Text>\r                {activity.user && (\r                  <>\r                    <span>•</span>\r                    <Text type=\"secondary\">{activity.user}</Text>\r                  </>\r                )}\r              </Space>\r            </div>\r          </div>\r        ))}\r      </div>\r    </Card>\r  );\r});\rActivityWidget.displayName = 'ActivityWidget';\r// CSS stilleri için\rconst styles = `\r.stat-widget {\r  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r  border-radius: 12px;\r}\r.stat-widget:hover {\r  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);\r}\r.widget-header {\r  display: flex;\r  justify-content: space-between;\r  align-items: flex-start;\r}\r.widget-icon {\r  width: 40px;\r  height: 40px;\r  display: flex;\r  align-items: center;\r  justify-content: center;\r  border-radius: 8px;\r  background: rgba(24, 144, 255, 0.1);\r}\r.mini-stat-widget {\r  padding: 12px;\r  background: #fafafa;\r  border-radius: 8px;\r  transition: all 0.3s;\r}\r.mini-stat-widget:hover {\r  background: #f0f0f0;\r}\r.activity-list {\r  max-height: 400px;\r  overflow-y: auto;\r}\r.activity-item {\r  display: flex;\r  gap: 12px;\r  padding: 12px 0;\r  border-bottom: 1px solid #f0f0f0;\r}\r.activity-item:last-child {\r  border-bottom: none;\r}\r.activity-content {\r  flex: 1;\r  display: flex;\r  justify-content: space-between;\r  align-items: flex-start;\r}\r`;\r// Style tag ekle\rif (typeof document !== 'undefined' && !document.getElementById('dashboard-widgets-styles')) {\r  const styleTag = document.createElement('style');\r  styleTag.id = 'dashboard-widgets-styles';\r  styleTag.innerHTML = styles;\r  document.head.appendChild(styleTag);\r}\rexport default {\r  StatWidget,\r  MiniStatWidget,\r  SystemStatusWidget,\r  ActivityWidget\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/components/DashboardWidgets.tsx",
      "severity": "warning",
      "message": "Interactive element missing keyboard handler"
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { memo, useMemo } from 'react';\rimport { Card, Row, Col, Statistic, Progress, Badge, Space, Typography, Tooltip, Skeleton } from 'antd';\rimport {\r  ArrowUpOutlined,\r  ArrowDownOutlined,\r  InfoCircleOutlined,\r  SyncOutlined,\r} from '@ant-design/icons';\rimport CountUp from 'react-countup';\rimport { motion } from 'framer-motion';\rconst { Text, Title } = Typography;\rinterface WidgetProps {\r  title: string;\r  value: number;\r  prefix?: string;\r  suffix?: string;\r  trend?: 'up' | 'down' | 'stable';\r  trendValue?: number;\r  icon?: React.ReactNode;\r  color?: string;\r  loading?: boolean;\r  description?: string;\r  onClick?: () => void;\r  progress?: number;\r  extra?: React.ReactNode;\r}\r// Optimize edilmiş StatWidget komponenti\rexport const StatWidget = memo<WidgetProps>(({\r  title,\r  value,\r  prefix,\r  suffix,\r  trend,\r  trendValue,\r  icon,\r  color = '#1890ff',\r  loading = false,\r  description,\r  onClick,\r  progress,\r  extra\r}) => {\r  const trendIcon = useMemo(() => {\r    if (!trend) return null;\r    if (trend === 'up') return <ArrowUpOutlined style={{ color: '#52c41a' }} />;\r    if (trend === 'down') return <ArrowDownOutlined style={{ color: '#ff4d4f' }} />;\r    return null;\r  }, [trend]);\r  const trendColor = useMemo(() => {\r    if (trend === 'up') return '#52c41a';\r    if (trend === 'down') return '#ff4d4f';\r    return '#faad14';\r  }, [trend]);\r  if (loading) {\r    return (\r      <Card className=\"stat-widget-loading\">\r        <Skeleton active paragraph={{ rows: 2 }} />\r      </Card>\r    );\r  }\r  return (\r    <motion.div\r      whileHover={{ scale: 1.02 }}\r      whileTap={{ scale: 0.98 }}\r      transition={{ type: \"spring\", stiffness: 300 }}\r    >\r      <Card\r        className=\"stat-widget\"\r        hoverable={!!onClick}\r        onClick={onClick}\r        style={{\r          borderTop: `3px solid ${color}`,\r          cursor: onClick ? 'pointer' : 'default'\r        }}\r      >\r        <div className=\"widget-header\">\r          <Space>\r            {icon && (\r              <div className=\"widget-icon\" style={{ color, fontSize: 24 }}>\r                {icon}\r              </div>\r            )}\r            <div>\r              <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                {title}\r              </Text>\r              {description && (\r                <Tooltip title={description}>\r                  <InfoCircleOutlined style={{ marginLeft: 8, fontSize: 12 }} />\r                </Tooltip>\r              )}\r            </div>\r          </Space>\r          {extra}\r        </div>\r        <div className=\"widget-value\" style={{ margin: '16px 0' }}>\r          <Space align=\"baseline\">\r            {prefix && <Text style={{ fontSize: 20, color }}>{prefix}</Text>}\r            <Text style={{ fontSize: 32, fontWeight: 700, color }}>\r              <CountUp\r                end={value}\r                duration={1.5}\r                separator=\",\"\r                decimals={suffix === '%' ? 1 : 0}\r              />\r            </Text>\r            {suffix && <Text style={{ fontSize: 20, color }}>{suffix}</Text>}\r          </Space>\r        </div>\r        {(trend || progress !== undefined) && (\r          <div className=\"widget-footer\">\r            {trend && trendValue !== undefined && (\r              <Space style={{ fontSize: 12 }}>\r                {trendIcon}\r                <Text style={{ color: trendColor }}>\r                  {trendValue > 0 ? '+' : ''}{trendValue}%\r                </Text>\r                <Text type=\"secondary\">son 30 gün</Text>\r              </Space>\r            )}\r            {progress !== undefined && (\r              <Progress\r                percent={progress}\r                size=\"small\"\r                strokeColor={color}\r                showInfo={false}\r                style={{ marginTop: 8 }}\r              />\r            )}\r          </div>\r        )}\r      </Card>\r    </motion.div>\r  );\r});\rStatWidget.displayName = 'StatWidget';\r// Mini istatistik widget'ı\rexport const MiniStatWidget = memo<{\r  title: string;\r  value: number | string;\r  icon?: React.ReactNode;\r  color?: string;\r  trend?: 'up' | 'down';\r}>(({ title, value, icon, color = '#1890ff', trend }) => (\r  <div className=\"mini-stat-widget\">\r    <Space size=\"small\">\r      {icon && (\r        <div className=\"mini-icon\" style={{ color, fontSize: 20 }}>\r          {icon}\r        </div>\r      )}\r      <div>\r        <Text type=\"secondary\" style={{ fontSize: 11, display: 'block' }}>\r          {title}\r        </Text>\r        <Space size={4} align=\"baseline\">\r          <Text strong style={{ fontSize: 16 }}>\r            {typeof value === 'number' ? (\r              <CountUp end={value} duration={1} separator=\",\" />\r            ) : value}\r          </Text>\r          {trend && (\r            trend === 'up' \r              ? <ArrowUpOutlined style={{ fontSize: 10, color: '#52c41a' }} />\r              : <ArrowDownOutlined style={{ fontSize: 10, color: '#ff4d4f' }} />\r          )}\r        </Space>\r      </div>\r    </Space>\r  </div>\r));\rMiniStatWidget.displayName = 'MiniStatWidget';\r// Sistem durumu widget'ı\rexport const SystemStatusWidget = memo<{\r  cpu: number;\r  memory: number;\r  disk: number;\r  network: number;\r  loading?: boolean;\r}>(({ cpu, memory, disk, network, loading }) => {\r  const getStatusColor = (value: number) => {\r    if (value < 50) return '#52c41a';\r    if (value < 80) return '#faad14';\r    return '#ff4d4f';\r  };\r  const getStatus = (value: number) => {\r    if (value < 50) return 'success';\r    if (value < 80) return 'warning';\r    return 'error';\r  };\r  if (loading) {\r    return (\r      <Card title=\"Sistem Durumu\" extra={<SyncOutlined spin />}>\r        <Skeleton active paragraph={{ rows: 4 }} />\r      </Card>\r    );\r  }\r  const metrics = [\r    { label: 'CPU', value: cpu, unit: '%' },\r    { label: 'Bellek', value: memory, unit: '%' },\r    { label: 'Disk', value: disk, unit: '%' },\r    { label: 'Network', value: network, unit: 'Mbps' }\r  ];\r  return (\r    <Card \r      title=\"Sistem Durumu\" \r      extra={\r        <Badge \r          status={getStatus(Math.max(cpu, memory, disk))} \r          text=\"Çalışıyor\" \r        />\r      }\r    >\r      <Space direction=\"vertical\" style={{ width: '100%' }} size=\"middle\">\r        {metrics.map((metric) => (\r          <div key={metric.label}>\r            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 4 }}>\r              <Text>{metric.label}</Text>\r              <Text strong>\r                {metric.value}{metric.unit}\r              </Text>\r            </div>\r            <Progress\r              percent={metric.unit === '%' ? metric.value : Math.min(metric.value / 100 * 100, 100)}\r              strokeColor={getStatusColor(metric.value)}\r              size=\"small\"\r              status={metric.value >= 95 ? 'exception' : 'active'}\r            />\r          </div>\r        ))}\r      </Space>\r    </Card>\r  );\r});\rSystemStatusWidget.displayName = 'SystemStatusWidget';\r// Activity widget'ı\rexport const ActivityWidget = memo<{\r  activities: Array<{\r    id: string;\r    type: 'success' | 'error' | 'warning' | 'info';\r    title: string;\r    description?: string;\r    time: string;\r    user?: string;\r  }>;\r  loading?: boolean;\r}>(({ activities, loading }) => {\r  if (loading) {\r    return (\r      <Card title=\"Son Aktiviteler\">\r        <Skeleton active paragraph={{ rows: 5 }} />\r      </Card>\r    );\r  }\r  return (\r    <Card \r      title=\"Son Aktiviteler\"\r      bodyStyle={{ padding: '12px 24px' }}\r      extra={\r        <Badge count={activities.length} style={{ backgroundColor: '#52c41a' }} />\r      }\r    >\r      <div className=\"activity-list\">\r        {activities.map((activity) => (\r          <div key={activity.id} className=\"activity-item\">\r            <Badge \r              status={\r                activity.type === 'success' ? 'success' :\r                activity.type === 'error' ? 'error' :\r                activity.type === 'warning' ? 'warning' :\r                'processing'\r              }\r            />\r            <div className=\"activity-content\">\r              <div>\r                <Text strong>{activity.title}</Text>\r                {activity.description && (\r                  <Text type=\"secondary\" style={{ display: 'block', fontSize: 12 }}>\r                    {activity.description}\r                  </Text>\r                )}\r              </div>\r              <Space size=\"small\" style={{ fontSize: 11 }}>\r                <Text type=\"secondary\">{activity.time}</Text>\r                {activity.user && (\r                  <>\r                    <span>•</span>\r                    <Text type=\"secondary\">{activity.user}</Text>\r                  </>\r                )}\r              </Space>\r            </div>\r          </div>\r        ))}\r      </div>\r    </Card>\r  );\r});\rActivityWidget.displayName = 'ActivityWidget';\r// CSS stilleri için\rconst styles = `\r.stat-widget {\r  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r  border-radius: 12px;\r}\r.stat-widget:hover {\r  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);\r}\r.widget-header {\r  display: flex;\r  justify-content: space-between;\r  align-items: flex-start;\r}\r.widget-icon {\r  width: 40px;\r  height: 40px;\r  display: flex;\r  align-items: center;\r  justify-content: center;\r  border-radius: 8px;\r  background: rgba(24, 144, 255, 0.1);\r}\r.mini-stat-widget {\r  padding: 12px;\r  background: #fafafa;\r  border-radius: 8px;\r  transition: all 0.3s;\r}\r.mini-stat-widget:hover {\r  background: #f0f0f0;\r}\r.activity-list {\r  max-height: 400px;\r  overflow-y: auto;\r}\r.activity-item {\r  display: flex;\r  gap: 12px;\r  padding: 12px 0;\r  border-bottom: 1px solid #f0f0f0;\r}\r.activity-item:last-child {\r  border-bottom: none;\r}\r.activity-content {\r  flex: 1;\r  display: flex;\r  justify-content: space-between;\r  align-items: flex-start;\r}\r`;\r// Style tag ekle\rif (typeof document !== 'undefined' && !document.getElementById('dashboard-widgets-styles')) {\r  const styleTag = document.createElement('style');\r  styleTag.id = 'dashboard-widgets-styles';\r  styleTag.innerHTML = styles;\r  document.head.appendChild(styleTag);\r}\rexport default {\r  StatWidget,\r  MiniStatWidget,\r  SystemStatusWidget,\r  ActivityWidget\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/components/DashboardWidgets.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useRef, useEffect } from 'react';\rimport { Layout, Button, Input, Space, Tooltip, Avatar, Dropdown, Badge, Divider, AutoComplete } from 'antd';\rimport {\r  MenuOutlined,\r  MenuFoldOutlined,\r  MenuUnfoldOutlined,\r  SearchOutlined,\r  FullscreenOutlined,\r  FullscreenExitOutlined,\r  UserOutlined,\r  SettingOutlined,\r  LogoutOutlined,\r  QuestionCircleOutlined,\r  InfoCircleOutlined,\r  ClockCircleOutlined,\r  KeyOutlined,\r  SafetyOutlined,\r  GlobalOutlined,\r  DashboardOutlined,\r  FileTextOutlined,\r  TeamOutlined,\r} from '@ant-design/icons';\rimport { useNavigate, useLocation } from 'react-router-dom';\rimport { useAuthStore } from '@/app/store/auth.store';\rimport { LanguageSwitcher } from '@/components/LanguageSwitcher';\rimport { NotificationBell } from '../../NotificationBell';\rimport { ThemeSwitcher } from '@/core/theme';\rimport './styles.css';\rconst { Header } = Layout;\rconst { Search } = Input;\rinterface MasterHeaderProps {\r  collapsed: boolean;\r  onCollapse: () => void;\r  darkMode: boolean;\r  onDarkModeChange: (value: boolean) => void;\r  fullscreen: boolean;\r  onFullscreenToggle: () => void;\r  onMobileMenuClick: () => void;\r}\rinterface SearchOption {\r  value: string;\r  label: React.ReactNode;\r  category: string;\r  icon: React.ReactNode;\r  path?: string;\r}\rexport const MasterHeader: React.FC<MasterHeaderProps> = ({\r  collapsed,\r  onCollapse,\r  darkMode,\r  onDarkModeChange,\r  fullscreen,\r  onFullscreenToggle,\r  onMobileMenuClick,\r}) => {\r  const navigate = useNavigate();\r  const location = useLocation();\r  const { user, logout } = useAuthStore();\r  const [searchValue, setSearchValue] = useState('');\r  const [searchOptions, setSearchOptions] = useState<SearchOption[]>([]);\r  const [showSearch, setShowSearch] = useState(false);\r  const searchRef = useRef<HTMLDivElement>(null);\r  // Global search options\r  const globalSearchOptions: SearchOption[] = [\r    {\r      value: 'dashboard',\r      label: 'Dashboard',\r      category: 'Sayfalar',\r      icon: <DashboardOutlined />,\r      path: '/master/dashboard',\r    },\r    {\r      value: 'users',\r      label: 'Kullanıcılar',\r      category: 'Sayfalar',\r      icon: <TeamOutlined />,\r      path: '/master/users',\r    },\r    {\r      value: 'reports',\r      label: 'Raporlar',\r      category: 'Sayfalar',\r      icon: <FileTextOutlined />,\r      path: '/master/reports',\r    },\r    {\r      value: 'settings',\r      label: 'Ayarlar',\r      category: 'Sistem',\r      icon: <SettingOutlined />,\r      path: '/master/settings',\r    },\r    {\r      value: 'profile',\r      label: 'Profil',\r      category: 'Kullanıcı',\r      icon: <UserOutlined />,\r      path: '/master/profile',\r    },\r  ];\r  // Filter search options based on input\r  useEffect(() => {\r    if (searchValue) {\r      const filtered = globalSearchOptions.filter(option =>\r        option.label.toString().toLowerCase().includes(searchValue.toLowerCase())\r      );\r      setSearchOptions(filtered);\r    } else {\r      setSearchOptions([]);\r    }\r  }, [searchValue]);\r  // Click outside to close search\r  useEffect(() => {\r    const handleClickOutside = (event: MouseEvent) => {\r      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\r        setShowSearch(false);\r      }\r    };\r    document.addEventListener('mousedown', handleClickOutside);\r    return () => document.removeEventListener('mousedown', handleClickOutside);\r  }, []);\r  const userMenuItems = [\r    {\r      key: 'user-info',\r      label: (\r        <div className=\"user-menu-header\">\r          <Avatar size={48} src={user?.avatar} icon={!user?.avatar && <UserOutlined />} />\r          <div className=\"user-menu-info\">\r            <div className=\"user-menu-name\">{user?.name || user?.userName || 'Admin'}</div>\r            <div className=\"user-menu-email\">{user?.email || 'admin@stocker.com'}</div>\r          </div>\r        </div>\r      ),\r      disabled: true,\r    },\r    {\r      type: 'divider' as const,\r    },\r    {\r      key: 'profile',\r      icon: <UserOutlined />,\r      label: 'Profilim',\r    },\r    {\r      key: 'settings',\r      icon: <SettingOutlined />,\r      label: 'Hesap Ayarları',\r    },\r    {\r      key: 'security',\r      icon: <SafetyOutlined />,\r      label: 'Güvenlik',\r    },\r    {\r      key: 'activity',\r      icon: <ClockCircleOutlined />,\r      label: 'Aktiviteler',\r    },\r    {\r      type: 'divider' as const,\r    },\r    {\r      key: 'help',\r      icon: <QuestionCircleOutlined />,\r      label: 'Yardım & Destek',\r    },\r    {\r      key: 'about',\r      icon: <InfoCircleOutlined />,\r      label: 'Hakkında',\r    },\r    {\r      type: 'divider' as const,\r    },\r    {\r      key: 'logout',\r      icon: <LogoutOutlined />,\r      label: 'Çıkış Yap',\r      danger: true,\r    },\r  ];\r  const handleUserMenuClick = ({ key }: { key: string }) => {\r    switch (key) {\r      case 'logout':\r        logout();\r        navigate('/login');\r        break;\r      case 'profile':\r        navigate('/master/profile');\r        break;\r      case 'settings':\r        navigate('/master/settings');\r        break;\r      case 'security':\r        navigate('/master/security');\r        break;\r      case 'activity':\r        navigate('/master/activity');\r        break;\r      case 'help':\r        navigate('/master/help');\r        break;\r      case 'about':\r        navigate('/master/about');\r        break;\r    }\r  };\r  const handleSearch = (value: string) => {\r    const option = globalSearchOptions.find(opt => opt.value === value);\r    if (option?.path) {\r      navigate(option.path);\r      setSearchValue('');\r      setShowSearch(false);\r    }\r  };\r  const renderSearchOption = (option: SearchOption) => (\r    <div className=\"search-option-item\">\r      <span className=\"search-option-icon\">{option.icon}</span>\r      <div className=\"search-option-content\">\r        <div className=\"search-option-label\">{option.label}</div>\r        <div className=\"search-option-category\">{option.category}</div>\r      </div>\r    </div>\r  );\r  // Breadcrumb for current location\r  const getBreadcrumb = () => {\r    const paths = location.pathname.split('/').filter(p => p);\r    if (paths.length > 1) {\r      return paths[paths.length - 1].charAt(0).toUpperCase() + paths[paths.length - 1].slice(1);\r    }\r    return 'Dashboard';\r  };\r  return (\r    <Header className=\"master-header\">\r      <div className=\"master-header-left\">\r        <Button\r          type=\"text\"\r          icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}\r          onClick={() = aria-label=\"button\"> onCollapse(!collapsed)}\r          className=\"header-menu-trigger desktop-only\"\r        />\r        <Button\r          type=\"text\"\r          icon={<MenuOutlined />}\r          onClick={onMobileMenuClick}\r          className=\"header-menu-trigger mobile-only\"\r        / aria-label=\"menu outlined\">\r        <Divider type=\"vertical\" className=\"header-divider desktop-only\" />\r        <div className=\"header-breadcrumb desktop-only\">\r          <span className=\"breadcrumb-text\">{getBreadcrumb()}</span>\r        </div>\r        <div className=\"header-search-wrapper\" ref={searchRef}>\r          {showSearch ? (\r            <AutoComplete\r              className=\"header-search-autocomplete\"\r              value={searchValue}\r              onChange={setSearchValue}\r              onSelect={handleSearch}\r              options={searchOptions.map(option => ({\r                value: option.value,\r                label: renderSearchOption(option),\r              }))}\r              placeholder=\"Hızlı arama... (Ctrl+K)\"\r              autoFocus\r              allowClear\r              onBlur={() => {\r                setTimeout(() => {\r                  if (!searchValue) setShowSearch(false);\r                }, 200);\r              }}\r            >\r              <Search className=\"header-search\" />\r            </AutoComplete>\r          ) : (\r            <Button\r              type=\"text\"\r              icon={<SearchOutlined />}\r              onClick={() = aria-label=\"search outlined\"> setShowSearch(true)}\r              className=\"header-search-trigger\"\r            >\r              <span className=\"desktop-only\">Hızlı Ara</span>\r              <kbd className=\"search-shortcut desktop-only\">Ctrl+K</kbd>\r            </Button>\r          )}\r        </div>\r      </div>\r      <div className=\"master-header-right\">\r        <Space size=\"small\" className=\"header-actions\">\r          <Tooltip title=\"Yardım Merkezi\">\r            <Button\r              type=\"text\"\r              icon={<QuestionCircleOutlined />}\r              className=\"header-action-btn desktop-only\"\r              onClick={() = aria-label=\"question circle outlined\"> navigate('/master/help')}\r            />\r          </Tooltip>\r          <LanguageSwitcher mode=\"dropdown\" showName={false} />\r          <ThemeSwitcher variant=\"button\" />\r          <Tooltip title={fullscreen ? 'Tam Ekrandan Çık' : 'Tam Ekran'}>\r            <Button\r              type=\"text\"\r              icon={fullscreen ? <FullscreenExitOutlined /> : <FullscreenOutlined />}\r              onClick={onFullscreenToggle}\r              className=\"header-action-btn desktop-only\"\r            / aria-label=\"button\">\r          </Tooltip>\r          <NotificationBell />\r          <Divider type=\"vertical\" className=\"header-divider\" />\r          <Dropdown\r            menu={{ \r              items: userMenuItems, \r              onClick: handleUserMenuClick,\r              className: 'user-dropdown-menu'\r            }}\r            placement=\"bottomRight\"\r            trigger={['click']}\r            overlayClassName=\"user-dropdown-overlay\"\r          >\r            <Button type=\"text\" className=\"header-user-button\">\r              <Space size={8}>\r                <Badge dot status=\"success\" offset={[-6, 6]}>\r                  <Avatar\r                    size={32}\r                    src={user?.avatar}\r                    icon={!user?.avatar && <UserOutlined />}\r                    className=\"user-avatar\"\r                  />\r                </Badge>\r                <div className=\"user-info desktop-only\">\r                  <span className=\"user-name\">{user?.name || user?.userName || 'Admin'}</span>\r                  <span className=\"user-role\">Yönetici</span>\r                </div>\r              </Space>\r            </Button>\r          </Dropdown>\r        </Space>\r      </div>\r    </Header>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/components/Layout/MasterHeader/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useMemo } from 'react';\rimport { Layout, Menu, Button, Drawer, Badge, Tooltip, Input } from 'antd';\rimport { useNavigate, useLocation } from 'react-router-dom';\rimport {\r  MenuFoldOutlined,\r  MenuUnfoldOutlined,\r  SearchOutlined,\r  CloseOutlined,\r  FireOutlined,\r  RocketOutlined,\r  QuestionCircleOutlined,\r  BookOutlined,\r} from '@ant-design/icons';\rimport { menuItems } from './menuItems';\rimport './styles.css';\rconst { Sider } = Layout;\rconst { Search } = Input;\rinterface MasterSidebarProps {\r  collapsed: boolean;\r  onCollapse: (collapsed: boolean) => void;\r  mobileDrawerOpen: boolean;\r  onMobileDrawerClose: () => void;\r}\rexport const MasterSidebar: React.FC<MasterSidebarProps> = ({\r  collapsed,\r  onCollapse,\r  mobileDrawerOpen,\r  onMobileDrawerClose,\r}) => {\r  const navigate = useNavigate();\r  const location = useLocation();\r  const [searchValue, setSearchValue] = useState('');\r  const [showSearch, setShowSearch] = useState(false);\r  // Filter menu items based on search\r  const filteredMenuItems = useMemo(() => {\r    if (!searchValue) return menuItems;\r    const filterItems = (items: any[]): any[] => {\r      return items.reduce((acc, item) => {\r        const labelMatch = item.label?.toLowerCase().includes(searchValue.toLowerCase());\r        if (item.children) {\r          const filteredChildren = filterItems(item.children);\r          if (filteredChildren.length > 0) {\r            acc.push({ ...item, children: filteredChildren });\r          } else if (labelMatch) {\r            acc.push(item);\r          }\r        } else if (labelMatch) {\r          acc.push(item);\r        }\r        return acc;\r      }, []);\r    };\r    return filterItems(menuItems);\r  }, [searchValue]);\r  const handleMenuClick = ({ key }: { key: string }) => {\r    if (key.startsWith('/')) {\r      navigate(key);\r      onMobileDrawerClose();\r      setSearchValue('');\r      setShowSearch(false);\r    }\r  };\r  const getActiveKeys = () => {\r    const path = location.pathname;\r    const activeKeys = [];\r    // Find parent menu keys for active item\r    menuItems.forEach(item => {\r      if (item.children) {\r        const hasActiveChild = item.children.some((child: any) => child.key === path);\r        if (hasActiveChild) {\r          activeKeys.push(item.key);\r        }\r      }\r    });\r    return activeKeys;\r  };\r  const sidebarHeader = (\r    <div className=\"sidebar-header\">\r      <div className=\"sidebar-logo\">\r        {collapsed ? (\r          <div className=\"logo-collapsed\">\r            <Tooltip title=\"Stoocker Pro\" placement=\"right\">\r              <FireOutlined className=\"logo-icon\" />\r            </Tooltip>\r          </div>\r        ) : (\r          <div className=\"logo-expanded\">\r            <FireOutlined className=\"logo-icon\" />\r            <div className=\"logo-info\">\r              <span className=\"logo-text\">Stoocker</span>\r              <span className=\"logo-version\">v3.0.0</span>\r            </div>\r            <Badge \r              status=\"success\" \r              text=\"Pro\" \r              className=\"logo-badge\"\r            />\r          </div>\r        )}\r      </div>\r      {!collapsed && (\r        <div className=\"sidebar-toggle-internal\">\r          <Button\r            type=\"text\"\r            icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}\r            onClick={() = aria-label=\"button\"> onCollapse(!collapsed)}\r            className=\"toggle-btn\"\r          />\r        </div>\r      )}\r    </div>\r  );\r  const sidebarSearch = !collapsed && (\r    <div className={`sidebar-search ${showSearch ? 'active' : ''}`}>\r      {showSearch ? (\r        <Search\r          placeholder=\"Menüde ara...\"\r          value={searchValue}\r          onChange={(e) => setSearchValue(e.target.value)}\r          onBlur={() => {\r            if (!searchValue) {\r              setShowSearch(false);\r            }\r          }}\r          autoFocus\r          allowClear\r          size=\"small\"\r          prefix={<SearchOutlined />}\r          className=\"search-input\"\r        />\r      ) : (\r        <Button\r          type=\"text\"\r          icon={<SearchOutlined />}\r          onClick={() = aria-label=\"search outlined\"> setShowSearch(true)}\r          className=\"search-trigger\"\r          block\r        >\r          Hızlı Arama\r        </Button>\r      )}\r    </div>\r  );\r  const sidebarFooter = !collapsed && (\r    <div className=\"sidebar-footer\">\r      <div className=\"sidebar-card gradient-card\">\r        <div className=\"card-content\">\r          <div className=\"card-icon\">\r            <RocketOutlined />\r          </div>\r          <div className=\"card-info\">\r            <h4>Premium Özellikler</h4>\r            <p>Tüm özelliklere erişin</p>\r          </div>\r        </div>\r        <Button type=\"primary\" size=\"small\" block className=\"card-btn\">\r          Yükselt\r        </Button>\r      </div>\r      <div className=\"sidebar-actions\">\r        <Tooltip title=\"Yardım Merkezi\">\r          <Button\r            type=\"text\"\r            icon={<QuestionCircleOutlined />}\r            className=\"action-btn\"\r          / aria-label=\"question circle outlined\">\r        </Tooltip>\r        <Tooltip title=\"Dokümantasyon\">\r          <Button\r            type=\"text\"\r            icon={<BookOutlined />}\r            className=\"action-btn\"\r          / aria-label=\"book outlined\">\r        </Tooltip>\r      </div>\r    </div>\r  );\r  const sidebarContent = (\r    <>\r      {sidebarHeader}\r      {sidebarSearch}\r      <div className=\"sidebar-menu-wrapper\">\r        <Menu\r          mode=\"inline\"\r          selectedKeys={[location.pathname]}\r          defaultOpenKeys={getActiveKeys()}\r          items={filteredMenuItems}\r          onClick={handleMenuClick}\r          className=\"master-sidebar-menu\"\r        />\r      </div>\r      {sidebarFooter}\r    </>\r  );\r  const mobileHeader = (\r    <div className=\"mobile-drawer-header\">\r      <div className=\"mobile-logo\">\r        <FireOutlined className=\"logo-icon\" />\r        <span className=\"logo-text\">Stoocker</span>\r      </div>\r      <Button\r        type=\"text\"\r        icon={<CloseOutlined />}\r        onClick={onMobileDrawerClose}\r        className=\"close-btn\"\r      / aria-label=\"close outlined\">\r    </div>\r  );\r  return (\r    <>\r      {/* Desktop Sidebar */}\r      <Sider\r        trigger={null}\r        collapsible\r        collapsed={collapsed}\r        width={280}\r        collapsedWidth={80}\r        className=\"master-sidebar desktop-sidebar\"\r        breakpoint=\"lg\"\r        onBreakpoint={(broken) => {\r          if (broken) {\r            onCollapse(true);\r          }\r        }}\r      >\r        {sidebarContent}\r      </Sider>\r      {/* Mobile Drawer */}\r      <Drawer\r        title={null}\r        placement=\"left\"\r        onClose={onMobileDrawerClose}\r        open={mobileDrawerOpen}\r        className=\"mobile-sidebar-drawer\"\r        width={320}\r        closeIcon={null}\r        headerStyle={{ padding: 0 }}\r      >\r        {mobileHeader}\r        <div className=\"mobile-search\">\r          <Search\r            placeholder=\"Menüde ara...\"\r            value={searchValue}\r            onChange={(e) => setSearchValue(e.target.value)}\r            allowClear\r            prefix={<SearchOutlined />}\r          />\r        </div>\r        <Menu\r          mode=\"inline\"\r          selectedKeys={[location.pathname]}\r          defaultOpenKeys={getActiveKeys()}\r          items={filteredMenuItems}\r          onClick={handleMenuClick}\r          className=\"mobile-menu\"\r        />\r        <div className=\"mobile-footer\">\r          <Button type=\"primary\" block size=\"large\" className=\"upgrade-btn\">\r            <RocketOutlined /> Premium'a Geç\r          </Button>\r        </div>\r      </Drawer>\r    </>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/components/Layout/MasterSidebar/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect, useRef } from 'react';\rimport { Badge, Button, Dropdown, Tabs, Empty, List, Avatar, Tag, Space, Tooltip, Spin } from 'antd';\rimport {\r  BellOutlined,\r  BellFilled,\r  CheckOutlined,\r  CheckCircleOutlined,\r  CloseOutlined,\r  DeleteOutlined,\r  InfoCircleOutlined,\r  WarningOutlined,\r  ExclamationCircleOutlined,\r  MessageOutlined,\r  UserOutlined,\r  SettingOutlined,\r  GiftOutlined,\r  HeartOutlined,\r  StarOutlined,\r  ClockCircleOutlined,\r  EyeOutlined,\r  EyeInvisibleOutlined,\r} from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport './notification-styles.css';\rconst { TabPane } = Tabs;\rexport interface Notification {\r  id: string;\r  type: 'info' | 'success' | 'warning' | 'error' | 'message' | 'system';\r  title: string;\r  description: string;\r  timestamp: Date;\r  read: boolean;\r  avatar?: string;\r  icon?: React.ReactNode;\r  actionUrl?: string;\r  priority?: 'low' | 'medium' | 'high' | 'urgent';\r  sender?: string;\r  category?: string;\r}\r// Mock notifications data\rconst mockNotifications: Notification[] = [\r  {\r    id: '1',\r    type: 'success',\r    title: 'Yeni Kullanıcı Kaydı',\r    description: 'Ahmet Yılmaz sisteme başarıyla kaydedildi.',\r    timestamp: new Date(Date.now() - 1000 * 60 * 5), // 5 dakika önce\r    read: false,\r    priority: 'high',\r    sender: 'Sistem',\r    category: 'user',\r  },\r  {\r    id: '2',\r    type: 'warning',\r    title: 'Disk Alanı Uyarısı',\r    description: 'Sunucu disk alanı %85 doluluk oranına ulaştı.',\r    timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30 dakika önce\r    read: false,\r    priority: 'urgent',\r    sender: 'Sistem Monitörü',\r    category: 'system',\r  },\r  {\r    id: '3',\r    type: 'message',\r    title: 'Yeni Mesaj',\r    description: 'Mehmet Öz: Toplantı notlarını paylaşabilir misiniz?',\r    timestamp: new Date(Date.now() - 1000 * 60 * 60), // 1 saat önce\r    read: true,\r    avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=mehmet',\r    sender: 'Mehmet Öz',\r    category: 'message',\r  },\r  {\r    id: '4',\r    type: 'info',\r    title: 'Sistem Güncellemesi',\r    description: 'v2.5.0 sürümü başarıyla yüklendi.',\r    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2 saat önce\r    read: true,\r    priority: 'low',\r    sender: 'DevOps',\r    category: 'system',\r  },\r  {\r    id: '5',\r    type: 'error',\r    title: 'Ödeme Hatası',\r    description: 'Kredi kartı işlemi başarısız oldu.',\r    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 3), // 3 saat önce\r    read: false,\r    priority: 'urgent',\r    sender: 'Ödeme Sistemi',\r    category: 'payment',\r  },\r];\rexport const NotificationBell: React.FC = () => {\r  const navigate = useNavigate();\r  const [visible, setVisible] = useState(false);\r  const [notifications, setNotifications] = useState<Notification[]>(mockNotifications);\r  const [loading, setLoading] = useState(false);\r  const [activeTab, setActiveTab] = useState('all');\r  const [animateBell, setAnimateBell] = useState(false);\r  const dropdownRef = useRef<HTMLDivElement>(null);\r  // Calculate unread count\r  const unreadCount = notifications.filter(n => !n.read).length;\r  const unreadUrgent = notifications.filter(n => !n.read && n.priority === 'urgent').length;\r  // Animate bell on new notification\r  useEffect(() => {\r    if (unreadCount > 0) {\r      const interval = setInterval(() => {\r        setAnimateBell(true);\r        setTimeout(() => setAnimateBell(false), 1000);\r      }, 5000);\r      return () => clearInterval(interval);\r    }\r  }, [unreadCount]);\r  // Filter notifications by tab\r  const getFilteredNotifications = () => {\r    switch (activeTab) {\r      case 'unread':\r        return notifications.filter(n => !n.read);\r      case 'messages':\r        return notifications.filter(n => n.category === 'message');\r      case 'system':\r        return notifications.filter(n => n.category === 'system');\r      default:\r        return notifications;\r    }\r  };\r  // Mark notification as read\r  const markAsRead = (id: string) => {\r    setNotifications(prev =>\r      prev.map(n => (n.id === id ? { ...n, read: true } : n))\r    );\r  };\r  // Mark all as read\r  const markAllAsRead = () => {\r    setNotifications(prev => prev.map(n => ({ ...n, read: true })));\r  };\r  // Delete notification\r  const deleteNotification = (id: string) => {\r    setNotifications(prev => prev.filter(n => n.id !== id));\r  };\r  // Clear all notifications\r  const clearAll = () => {\r    setNotifications([]);\r    setVisible(false);\r  };\r  // Get icon by type\r  const getNotificationIcon = (notification: Notification) => {\r    if (notification.icon) return notification.icon;\r    switch (notification.type) {\r      case 'success':\r        return <CheckCircleOutlined style={{ color: 'var(--color-success)' }} />;\r      case 'warning':\r        return <ExclamationCircleOutlined style={{ color: 'var(--color-warning)' }} />;\r      case 'error':\r        return <CloseOutlined style={{ color: 'var(--color-error)' }} />;\r      case 'message':\r        return <MessageOutlined style={{ color: 'var(--color-primary)' }} />;\r      case 'system':\r        return <SettingOutlined style={{ color: 'var(--color-info)' }} />;\r      default:\r        return <InfoCircleOutlined style={{ color: 'var(--color-info)' }} />;\r    }\r  };\r  // Get priority color\r  const getPriorityColor = (priority?: string) => {\r    switch (priority) {\r      case 'urgent':\r        return 'red';\r      case 'high':\r        return 'orange';\r      case 'medium':\r        return 'blue';\r      case 'low':\r        return 'default';\r      default:\r        return 'default';\r    }\r  };\r  // Format timestamp\r  const formatTime = (date: Date) => {\r    const now = new Date();\r    const diff = now.getTime() - date.getTime();\r    const minutes = Math.floor(diff / 60000);\r    const hours = Math.floor(diff / 3600000);\r    const days = Math.floor(diff / 86400000);\r    if (minutes < 1) return 'Şimdi';\r    if (minutes < 60) return `${minutes} dakika önce`;\r    if (hours < 24) return `${hours} saat önce`;\r    if (days < 7) return `${days} gün önce`;\r    return date.toLocaleDateString('tr-TR');\r  };\r  // Notification list item\r  const renderNotification = (notification: Notification) => (\r    <List.Item\r      key={notification.id}\r      className={`notification-item ${!notification.read ? 'unread' : ''}`}\r      onClick={() => {\r        markAsRead(notification.id);\r        if (notification.actionUrl) {\r          navigate(notification.actionUrl);\r          setVisible(false);\r        }\r      }}\r      actions={[\r        <Tooltip title={notification.read ? 'Okunmadı olarak işaretle' : 'Okundu olarak işaretle'}>\r          <Button\r            type=\"text\"\r            size=\"small\"\r            icon={notification.read ? <EyeInvisibleOutlined /> : <EyeOutlined />}\r            onClick={(e) = aria-label=\"button\"> {\r              e.stopPropagation();\r              markAsRead(notification.id);\r            }}\r          />\r        </Tooltip>,\r        <Tooltip title=\"Sil\">\r          <Button\r            type=\"text\"\r            size=\"small\"\r            danger\r            icon={<DeleteOutlined />}\r            onClick={(e) = aria-label=\"delete outlined\"> {\r              e.stopPropagation();\r              deleteNotification(notification.id);\r            }}\r          />\r        </Tooltip>,\r      ]}\r    >\r      <List.Item.Meta\r        avatar={\r          notification.avatar ? (\r            <Avatar src={notification.avatar} />\r          ) : (\r            <Avatar icon={getNotificationIcon(notification)} className=\"notification-avatar\" />\r          )\r        }\r        title={\r          <Space>\r            <span className=\"notification-title\">{notification.title}</span>\r            {notification.priority && (\r              <Tag color={getPriorityColor(notification.priority)} className=\"priority-tag\">\r                {notification.priority === 'urgent' ? 'Acil' : \r                 notification.priority === 'high' ? 'Yüksek' :\r                 notification.priority === 'medium' ? 'Orta' : 'Düşük'}\r              </Tag>\r            )}\r          </Space>\r        }\r        description={\r          <div className=\"notification-content\">\r            <p className=\"notification-description\">{notification.description}</p>\r            <div className=\"notification-meta\">\r              <span className=\"notification-time\">\r                <ClockCircleOutlined /> {formatTime(notification.timestamp)}\r              </span>\r              {notification.sender && (\r                <span className=\"notification-sender\">• {notification.sender}</span>\r              )}\r            </div>\r          </div>\r        }\r      />\r    </List.Item>\r  );\r  // Dropdown content\r  const dropdownContent = (\r    <div className=\"notification-dropdown\" ref={dropdownRef}>\r      <div className=\"notification-header\">\r        <h3>Bildirimler</h3>\r        <Space>\r          {unreadCount > 0 && (\r            <Button\r              type=\"text\"\r              size=\"small\"\r              icon={<CheckOutlined />}\r              onClick={markAllAsRead}\r             aria-label=\"check outlined\">\r              Tümünü Okundu İşaretle\r            </Button>\r          )}\r          <Button\r            type=\"text\"\r            size=\"small\"\r            danger\r            icon={<DeleteOutlined />}\r            onClick={clearAll}\r           aria-label=\"delete outlined\">\r            Tümünü Temizle\r          </Button>\r        </Space>\r      </div>\r      <Tabs \r        activeKey={activeTab} \r        onChange={setActiveTab}\r        className=\"notification-tabs\"\r        size=\"small\"\r      >\r        <TabPane \r          tab={\r            <span>\r              Tümü\r              {notifications.length > 0 && (\r                <Badge count={notifications.length} className=\"tab-badge\" />\r              )}\r            </span>\r          } \r          key=\"all\" \r        />\r        <TabPane \r          tab={\r            <span>\r              Okunmamış\r              {unreadCount > 0 && (\r                <Badge count={unreadCount} className=\"tab-badge\" status=\"error\" />\r              )}\r            </span>\r          } \r          key=\"unread\" \r        />\r        <TabPane tab=\"Mesajlar\" key=\"messages\" />\r        <TabPane tab=\"Sistem\" key=\"system\" />\r      </Tabs>\r      <div className=\"notification-list\">\r        {loading ? (\r          <div className=\"notification-loading\">\r            <Spin tip=\"Yükleniyor...\" />\r          </div>\r        ) : getFilteredNotifications().length > 0 ? (\r          <List\r            dataSource={getFilteredNotifications()}\r            renderItem={renderNotification}\r          />\r        ) : (\r          <Empty\r            image={Empty.PRESENTED_IMAGE_SIMPLE}\r            description={\r              activeTab === 'unread' \r                ? 'Okunmamış bildirim yok' \r                : 'Bildirim yok'\r            }\r            className=\"notification-empty\"\r          />\r        )}\r      </div>\r      <div className=\"notification-footer\">\r        <Button \r          type=\"link\" \r          block\r          onClick={() => {\r            navigate('/master/notifications');\r            setVisible(false);\r          }}\r        >\r          Tüm Bildirimleri Görüntüle\r        </Button>\r      </div>\r    </div>\r  );\r  return (\r    <Dropdown\r      trigger={['click']}\r      open={visible}\r      onOpenChange={setVisible}\r      dropdownRender={() => dropdownContent}\r      placement=\"bottomRight\"\r      overlayClassName=\"notification-dropdown-overlay\"\r      getPopupContainer={() => document.body}\r    >\r      <Badge \r        count={unreadCount} \r        dot={unreadUrgent > 0}\r        offset={[-2, 2]}\r      >\r        <Button\r          type=\"text\"\r          icon={\r            visible ? (\r              <BellFilled className={`bell-icon ${animateBell ? 'bell-animate' : ''}`} / aria-label=\"button\">\r            ) : (\r              <BellOutlined className={`bell-icon ${animateBell ? 'bell-animate' : ''}`} />\r            )\r          }\r          className=\"notification-bell-btn\"\r        />\r      </Badge>\r    </Dropdown>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/components/NotificationBell.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect, useRef } from 'react';\rimport './notification-panel-modern.css';\rinterface NotificationPanelProps {\r  isOpen: boolean;\r  onClose: () => void;\r}\rinterface Notification {\r  id: string;\r  title: string;\r  message: string;\r  type: 'success' | 'error' | 'warning' | 'info';\r  timestamp: Date;\r  read: boolean;\r  category: string;\r}\r// Mock notifications data\rconst mockNotifications: Notification[] = [\r  {\r    id: '1',\r    title: 'Yeni Kiracı Kaydı',\r    message: 'ABC Teknoloji firması sisteme kayıt oldu.',\r    type: 'success',\r    timestamp: new Date(Date.now() - 1000 * 60 * 5), // 5 minutes ago\r    read: false,\r    category: 'tenant'\r  },\r  {\r    id: '2',\r    title: 'Ödeme Alındı',\r    message: 'XYZ Ltd. firmasından 5000 TL ödeme alındı.',\r    type: 'info',\r    timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30 minutes ago\r    read: false,\r    category: 'payment'\r  },\r  {\r    id: '3',\r    title: 'Sistem Uyarısı',\r    message: 'Disk kullanımı %85 seviyesine ulaştı.',\r    type: 'warning',\r    timestamp: new Date(Date.now() - 1000 * 60 * 60), // 1 hour ago\r    read: true,\r    category: 'system'\r  },\r  {\r    id: '4',\r    title: 'Güvenlik Bildirimi',\r    message: 'Başarısız giriş denemesi tespit edildi.',\r    type: 'error',\r    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2 hours ago\r    read: true,\r    category: 'security'\r  },\r  {\r    id: '5',\r    title: 'Yedekleme Tamamlandı',\r    message: 'Günlük otomatik yedekleme başarıyla tamamlandı.',\r    type: 'success',\r    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24), // 1 day ago\r    read: true,\r    category: 'system'\r  }\r];\rexport const NotificationPanel: React.FC<NotificationPanelProps> = ({ isOpen, onClose }) => {\r  const [notifications, setNotifications] = useState<Notification[]>(mockNotifications);\r  const [filter, setFilter] = useState<'all' | 'unread'>('all');\r  const panelRef = useRef<HTMLDivElement>(null);\r  // Close panel when clicking outside\r  useEffect(() => {\r    const handleClickOutside = (event: MouseEvent) => {\r      if (panelRef.current && !panelRef.current.contains(event.target as Node)) {\r        const bellButton = document.querySelector('.notification-bell-button');\r        if (bellButton && !bellButton.contains(event.target as Node)) {\r          onClose();\r        }\r      }\r    };\r    if (isOpen) {\r      document.addEventListener('mousedown', handleClickOutside);\r    }\r    return () => {\r      document.removeEventListener('mousedown', handleClickOutside);\r    };\r  }, [isOpen, onClose]);\r  const filteredNotifications = filter === 'unread' \r    ? notifications.filter(n => !n.read)\r    : notifications;\r  const markAsRead = (id: string) => {\r    setNotifications(prev => \r      prev.map(n => n.id === id ? { ...n, read: true } : n)\r    );\r  };\r  const markAllAsRead = () => {\r    setNotifications(prev => \r      prev.map(n => ({ ...n, read: true }))\r    );\r  };\r  const deleteNotification = (id: string) => {\r    setNotifications(prev => prev.filter(n => n.id !== id));\r  };\r  const clearAll = () => {\r    setNotifications([]);\r  };\r  const formatTime = (date: Date) => {\r    const now = new Date();\r    const diff = now.getTime() - date.getTime();\r    const minutes = Math.floor(diff / 60000);\r    const hours = Math.floor(minutes / 60);\r    const days = Math.floor(hours / 24);\r    if (minutes < 1) return 'Az önce';\r    if (minutes < 60) return `${minutes} dakika önce`;\r    if (hours < 24) return `${hours} saat önce`;\r    if (days === 1) return 'Dün';\r    if (days < 7) return `${days} gün önce`;\r    return date.toLocaleDateString('tr-TR');\r  };\r  const getIcon = (type: string) => {\r    switch (type) {\r      case 'success': return '✅';\r      case 'error': return '❌';\r      case 'warning': return '⚠️';\r      case 'info': return 'ℹ️';\r      default: return '📌';\r    }\r  };\r  if (!isOpen) return null;\r  return (\r    <div className=\"notification-panel\" ref={panelRef}>\r      {/* Header */}\r      <div className=\"panel-header\">\r        <h3>Bildirimler</h3>\r        <button className=\"close-btn\" onClick={onClose}>\r          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\">\r            <path d=\"M6 6L18 18M6 18L18 6\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\"/>\r          </svg>\r        </button>\r      </div>\r      {/* Filter Tabs */}\r      <div className=\"filter-tabs\">\r        <button \r          className={filter === 'all' ? 'active' : ''} \r          onClick={() => setFilter('all')}\r        >\r          Tümü ({notifications.length})\r        </button>\r        <button \r          className={filter === 'unread' ? 'active' : ''} \r          onClick={() => setFilter('unread')}\r        >\r          Okunmamış ({notifications.filter(n => !n.read).length})\r        </button>\r      </div>\r      {/* Actions */}\r      <div className=\"panel-actions\">\r        <button onClick={markAllAsRead} className=\"action-btn\">\r          Tümünü Okundu İşaretle\r        </button>\r        <button onClick={clearAll} className=\"action-btn danger\">\r          Tümünü Temizle\r        </button>\r      </div>\r      {/* Notifications List */}\r      <div className=\"notifications-list\">\r        {filteredNotifications.length === 0 ? (\r          <div className=\"empty-state\">\r            <span className=\"empty-icon\">📭</span>\r            <p>Bildirim bulunmuyor</p>\r          </div>\r        ) : (\r          filteredNotifications.map(notification => (\r            <div \r              key={notification.id} \r              className={`notification-item ${!notification.read ? 'unread' : ''} ${notification.type}`}\r              onClick={() => markAsRead(notification.id)}\r             role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => markAsRead(notification.id)(e)}>\r              <span className=\"notification-icon\">{getIcon(notification.type)}</span>\r              <div className=\"notification-content\">\r                <h4>{notification.title}</h4>\r                <p>{notification.message}</p>\r                <span className=\"notification-time\">{formatTime(notification.timestamp)}</span>\r              </div>\r              <button \r                className=\"delete-btn\"\r                onClick={(e) => {\r                  e.stopPropagation();\r                  deleteNotification(notification.id);\r                }}\r              >\r                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\">\r                  <path d=\"M6 6L18 18M6 18L18 6\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\"/>\r                </svg>\r              </button>\r            </div>\r          ))\r        )}\r      </div>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/components/NotificationPanel.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { memo, useMemo } from 'react';\rimport {\r  Card,\r  Tag,\r  Avatar,\r  Space,\r  Button,\r  Dropdown,\r  Progress,\r  Typography,\r  Tooltip,\r  Badge,\r} from 'antd';\rimport {\r  UserOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  LoginOutlined,\r  LockOutlined,\r  UnlockOutlined,\r  MoreOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r  GlobalOutlined,\r  DollarOutlined,\r  RiseOutlined,\r  FallOutlined,\r} from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport CountUp from 'react-countup';\rconst { Text, Title } = Typography;\rconst { Meta } = Card;\rinterface TenantCardProps {\r  tenant: {\r    id: string;\r    name: string;\r    domain: string;\r    email: string;\r    plan: string;\r    status: string;\r    userCount: number;\r    maxUsers: number;\r    storageUsed: number;\r    maxStorage: number;\r    revenue: number;\r    growth: number;\r    modules: string[];\r  };\r  onEdit: (tenant: any) => void;\r  onDelete: (id: string) => void;\r  onToggleStatus: (id: string) => void;\r  onLoginAs: (tenant: any) => void;\r  onViewDetails: (tenant: any) => void;\r}\rexport const TenantCard: React.FC<TenantCardProps> = memo(({\r  tenant,\r  onEdit,\r  onDelete,\r  onToggleStatus,\r  onLoginAs,\r  onViewDetails,\r}) => {\r  // Memoize expensive calculations\r  const storagePercentage = useMemo(() => \r    Math.round((tenant.storageUsed / tenant.maxStorage) * 100),\r    [tenant.storageUsed, tenant.maxStorage]\r  );\r  const userPercentage = useMemo(() => \r    Math.round((tenant.userCount / tenant.maxUsers) * 100),\r    [tenant.userCount, tenant.maxUsers]\r  );\r  const statusColor = useMemo(() => {\r    const colors: Record<string, string> = {\r      active: 'success',\r      suspended: 'error',\r      pending: 'warning',\r      expired: 'default',\r    };\r    return colors[tenant.status] || 'default';\r  }, [tenant.status]);\r  const planColor = useMemo(() => {\r    const colors: Record<string, string> = {\r      Enterprise: 'purple',\r      Professional: 'blue',\r      Starter: 'green',\r      Free: 'default',\r    };\r    return colors[tenant.plan] || 'default';\r  }, [tenant.plan]);\r  const menuItems = useMemo(() => [\r    {\r      key: 'view',\r      label: 'Detayları Görüntüle',\r      icon: <UserOutlined />,\r      onClick: () => onViewDetails(tenant),\r    },\r    {\r      key: 'login',\r      label: 'Tenant Olarak Giriş',\r      icon: <LoginOutlined />,\r      onClick: () => onLoginAs(tenant),\r    },\r    {\r      key: 'edit',\r      label: 'Düzenle',\r      icon: <EditOutlined />,\r      onClick: () => onEdit(tenant),\r    },\r    {\r      key: 'toggle',\r      label: tenant.status === 'active' ? 'Askıya Al' : 'Aktifleştir',\r      icon: tenant.status === 'active' ? <LockOutlined /> : <UnlockOutlined />,\r      onClick: () => onToggleStatus(tenant.id),\r    },\r    { type: 'divider' },\r    {\r      key: 'delete',\r      label: 'Sil',\r      icon: <DeleteOutlined />,\r      danger: true,\r      onClick: () => onDelete(tenant.id),\r    },\r  ], [tenant, onViewDetails, onLoginAs, onEdit, onToggleStatus, onDelete]);\r  return (\r    <motion.div\r      initial={{ opacity: 0, y: 20 }}\r      animate={{ opacity: 1, y: 0 }}\r      transition={{ duration: 0.3 }}\r      whileHover={{ y: -8 }}\r    >\r      <Card\r        className=\"tenant-card\"\r        actions={[\r          <Button type=\"text\" icon={<EditOutlined />} onClick={() = aria-label=\"edit outlined\"> onEdit(tenant)}>\r            Düzenle\r          </Button>,\r          <Button type=\"text\" icon={<LoginOutlined />} onClick={() = aria-label=\"login outlined\"> onLoginAs(tenant)}>\r            Giriş\r          </Button>,\r          <Dropdown menu={{ items: menuItems }} trigger={['click']}>\r            <Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r          </Dropdown>,\r        ]}\r      >\r        <Meta\r          avatar={\r            <Avatar \r              size={64} \r              style={{ backgroundColor: '#667eea' }}\r              icon={<UserOutlined />}\r            >\r              {tenant.name.substring(0, 2).toUpperCase()}\r            </Avatar>\r          }\r          title={\r            <Space direction=\"vertical\" size={0}>\r              <Title level={5} style={{ margin: 0 }}>{tenant.name}</Title>\r              <Space size=\"small\">\r                <Tag color={statusColor}>\r                  {tenant.status === 'active' ? 'Aktif' : \r                   tenant.status === 'suspended' ? 'Askıda' :\r                   tenant.status === 'pending' ? 'Beklemede' : 'Süresi Dolmuş'}\r                </Tag>\r                <Tag color={planColor}>{tenant.plan}</Tag>\r              </Space>\r            </Space>\r          }\r          description={\r            <Space direction=\"vertical\" style={{ width: '100%', marginTop: 12 }}>\r              <Text type=\"secondary\">\r                <GlobalOutlined /> {tenant.domain}\r              </Text>\r              <div style={{ marginTop: 16 }}>\r                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>\r                  <Text type=\"secondary\">\r                    <UserOutlined /> Kullanıcılar\r                  </Text>\r                  <Text>{tenant.userCount} / {tenant.maxUsers}</Text>\r                </div>\r                <Progress \r                  percent={userPercentage} \r                  strokeColor={userPercentage > 80 ? '#ff4d4f' : '#667eea'}\r                  showInfo={false}\r                  size=\"small\"\r                />\r              </div>\r              <div style={{ marginTop: 12 }}>\r                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>\r                  <Text type=\"secondary\">\r                    <DatabaseOutlined /> Depolama\r                  </Text>\r                  <Text>{tenant.storageUsed} / {tenant.maxStorage} GB</Text>\r                </div>\r                <Progress \r                  percent={storagePercentage} \r                  strokeColor={storagePercentage > 80 ? '#faad14' : '#52c41a'}\r                  showInfo={false}\r                  size=\"small\"\r                />\r              </div>\r              <div style={{ \r                marginTop: 16, \r                padding: '12px', \r                background: '#fafafa', \r                borderRadius: 8,\r                display: 'flex',\r                justifyContent: 'space-between',\r                alignItems: 'center'\r              }}>\r                <div>\r                  <Text type=\"secondary\">Aylık Gelir</Text>\r                  <div style={{ fontSize: 20, fontWeight: 600, color: '#595959' }}>\r                    ₺<CountUp end={tenant.revenue} separator=\",\" duration={2} />\r                  </div>\r                </div>\r                <div style={{ textAlign: 'center' }}>\r                  {tenant.growth > 0 ? (\r                    <Badge \r                      count={\r                        <span style={{ color: '#52c41a' }}>\r                          <RiseOutlined /> {tenant.growth}%\r                        </span>\r                      }\r                    />\r                  ) : (\r                    <Badge \r                      count={\r                        <span style={{ color: '#ff4d4f' }}>\r                          <FallOutlined /> {Math.abs(tenant.growth)}%\r                        </span>\r                      }\r                    />\r                  )}\r                </div>\r              </div>\r              {tenant.modules && tenant.modules.length > 0 && (\r                <div style={{ marginTop: 12 }}>\r                  <Space size={[4, 4]} wrap>\r                    {tenant.modules.map(module => (\r                      <Tag key={module} color=\"blue\" style={{ fontSize: 11 }}>\r                        {module}\r                      </Tag>\r                    ))}\r                  </Space>\r                </div>\r              )}\r            </Space>\r          }\r        />\r      </Card>\r    </motion.div>\r  );\r}, (prevProps, nextProps) => {\r  // Custom comparison function for better performance\r  return (\r    prevProps.tenant.id === nextProps.tenant.id &&\r    prevProps.tenant.status === nextProps.tenant.status &&\r    prevProps.tenant.userCount === nextProps.tenant.userCount &&\r    prevProps.tenant.storageUsed === nextProps.tenant.storageUsed &&\r    prevProps.tenant.revenue === nextProps.tenant.revenue &&\r    prevProps.tenant.growth === nextProps.tenant.growth\r  );\r});\rTenantCard.displayName = 'TenantCard';\rexport default TenantCard;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/components/TenantCard.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useCallback, useMemo, useRef, useEffect } from 'react';\rimport {\r  Table,\r  Button,\r  Space,\r  Tag,\r  Avatar,\r  Typography,\r  Input,\r  Select,\r  DatePicker,\r  Dropdown,\r  Modal,\r  Badge,\r  Tooltip,\r  Checkbox,\r  Row,\r  Col,\r  message,\r  Popconfirm,\r} from 'antd';\rimport type { TableProps, ColumnsType, TableRowSelection } from 'antd/es/table';\rimport {\r  SearchOutlined,\r  FilterOutlined,\r  ExportOutlined,\r  ReloadOutlined,\r  MoreOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  LockOutlined,\r  UnlockOutlined,\r  LoginOutlined,\r  EyeOutlined,\r  MailOutlined,\r  TeamOutlined,\r  CalendarOutlined,\r  DollarOutlined,\r  CrownOutlined,\r  DownloadOutlined,\r} from '@ant-design/icons';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport dayjs from 'dayjs';\rconst { Text, Title } = Typography;\rconst { RangePicker } = DatePicker;\rinterface Tenant {\r  id: string;\r  name: string;\r  subdomain: string;\r  plan: 'Başlangıç' | 'Profesyonel' | 'Kurumsal';\r  status: 'active' | 'suspended' | 'pending' | 'expired';\r  users: number;\r  maxUsers: number;\r  storage: number;\r  maxStorage: number;\r  createdAt: string;\r  expiresAt: string;\r  lastLogin: string;\r  owner: {\r    name: string;\r    email: string;\r    phone?: string;\r    avatar?: string;\r  };\r  revenue: number;\r  modules: string[];\r}\rinterface TenantDataTableProps {\r  data: Tenant[];\r  loading: boolean;\r  onEdit?: (tenant: Tenant) => void;\r  onDelete?: (tenantIds: string[]) => void;\r  onToggleStatus?: (tenantId: string) => void;\r  onLoginAs?: (tenantId: string) => void;\r  onView?: (tenant: Tenant) => void;\r  onRefresh?: () => void;\r  onExport?: (selectedIds?: string[]) => void;\r  onSearch?: (query: string) => void;\r  onFilter?: (filters: any) => void;\r  pagination?: TableProps<Tenant>['pagination'];\r  onChange?: TableProps<Tenant>['onChange'];\r}\rexport const TenantDataTable: React.FC<TenantDataTableProps> = ({\r  data,\r  loading,\r  onEdit,\r  onDelete,\r  onToggleStatus,\r  onLoginAs,\r  onView,\r  onRefresh,\r  onExport,\r  onSearch,\r  onFilter,\r  pagination,\r  onChange,\r}) => {\r  const [selectedRowKeys, setSelectedRowKeys] = useState<string[]>([]);\r  const [searchText, setSearchText] = useState('');\r  const [filters, setFilters] = useState<any>({});\r  const [expandedRowKeys, setExpandedRowKeys] = useState<string[]>([]);\r  const searchInputRef = useRef<any>(null);\r  // Plan renkleri\r  const getPlanColor = (plan: string) => {\r    switch (plan) {\r      case 'Başlangıç': return 'green';\r      case 'Profesyonel': return 'blue';\r      case 'Kurumsal': return 'gold';\r      default: return 'default';\r    }\r  };\r  // Durum renkleri ve ikonları\r  const getStatusConfig = (status: string) => {\r    switch (status) {\r      case 'active':\r        return { color: 'success', text: 'Aktif', icon: '🟢' };\r      case 'suspended':\r        return { color: 'error', text: 'Askıda', icon: '🔴' };\r      case 'pending':\r        return { color: 'warning', text: 'Onay Bekliyor', icon: '🟡' };\r      case 'expired':\r        return { color: 'default', text: 'Süresi Dolmuş', icon: '⚫' };\r      default:\r        return { color: 'default', text: status, icon: '⚪' };\r    }\r  };\r  // Toplu işlem menüsü\r  const bulkActionMenu = useMemo(() => ({\r    items: [\r      {\r        key: 'activate',\r        label: 'Aktif Et',\r        icon: <UnlockOutlined />,\r        onClick: () => {\r          message.success(`${selectedRowKeys.length} tenant aktif edildi`);\r          setSelectedRowKeys([]);\r        }\r      },\r      {\r        key: 'suspend',\r        label: 'Askıya Al',\r        icon: <LockOutlined />,\r        danger: true,\r        onClick: () => {\r          message.warning(`${selectedRowKeys.length} tenant askıya alındı`);\r          setSelectedRowKeys([]);\r        }\r      },\r      { type: 'divider' },\r      {\r        key: 'export',\r        label: 'Dışa Aktar',\r        icon: <ExportOutlined />,\r        onClick: () => onExport?.(selectedRowKeys)\r      },\r      {\r        key: 'delete',\r        label: 'Sil',\r        icon: <DeleteOutlined />,\r        danger: true,\r        onClick: () => {\r          Modal.confirm({\r            title: 'Tenantları Sil',\r            content: `${selectedRowKeys.length} tenant kalıcı olarak silinecek. Emin misiniz?`,\r            okText: 'Sil',\r            cancelText: 'İptal',\r            okButtonProps: { danger: true },\r            onOk: () => {\r              onDelete?.(selectedRowKeys);\r              setSelectedRowKeys([]);\r            }\r          });\r        }\r      }\r    ]\r  }), [selectedRowKeys, onExport, onDelete]);\r  // Tablo kolonları\r  const columns: ColumnsType<Tenant> = [\r    {\r      title: 'Tenant',\r      key: 'tenant',\r      fixed: 'left',\r      width: 280,\r      render: (_, record) => (\r        <Space>\r          <Avatar \r            size={40} \r            style={{ backgroundColor: getPlanColor(record.plan) }}\r          >\r            {record.name.charAt(0).toUpperCase()}\r          </Avatar>\r          <div>\r            <Text strong>{record.name}</Text>\r            <br />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {record.subdomain}.stocker.app\r            </Text>\r          </div>\r        </Space>\r      ),\r      filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r        <div style={{ padding: 8 }}>\r          <Input\r            ref={searchInputRef}\r            placeholder=\"Tenant ara...\"\r            value={selectedKeys[0]}\r            onChange={e = aria-label=\"input field\"> setSelectedKeys(e.target.value ? [e.target.value] : [])}\r            onPressEnter={() => confirm()}\r            style={{ marginBottom: 8, display: 'block' }}\r          />\r          <Space>\r            <Button\r              type=\"primary\"\r              onClick={() => confirm()}\r              icon={<SearchOutlined />}\r              size=\"small\"\r              style={{ width: 90 }}\r            >\r              Ara\r            </Button>\r            <Button onClick={() => clearFilters?.()} size=\"small\" style={{ width: 90 }}>\r              Temizle\r            </Button>\r          </Space>\r        </div>\r      ),\r      filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r      onFilter: (value, record) => \r        record.name.toLowerCase().includes(value.toString().toLowerCase()) ||\r        record.subdomain.toLowerCase().includes(value.toString().toLowerCase()),\r    },\r    {\r      title: 'Sahip',\r      key: 'owner',\r      width: 200,\r      render: (_, record) => (\r        <Space direction=\"vertical\" size={0}>\r          <Text>{record.owner.name}</Text>\r          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r            <MailOutlined /> {record.owner.email}\r          </Text>\r        </Space>\r      ),\r    },\r    {\r      title: 'Plan',\r      dataIndex: 'plan',\r      key: 'plan',\r      width: 120,\r      filters: [\r        { text: 'Başlangıç', value: 'Başlangıç' },\r        { text: 'Profesyonel', value: 'Profesyonel' },\r        { text: 'Kurumsal', value: 'Kurumsal' },\r      ],\r      render: (plan: string) => (\r        <Tag color={getPlanColor(plan)} icon={<CrownOutlined />}>\r          {plan}\r        </Tag>\r      ),\r      onFilter: (value, record) => record.plan === value,\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      width: 120,\r      filters: [\r        { text: 'Aktif', value: 'active' },\r        { text: 'Askıda', value: 'suspended' },\r        { text: 'Onay Bekliyor', value: 'pending' },\r        { text: 'Süresi Dolmuş', value: 'expired' },\r      ],\r      render: (status: string) => {\r        const config = getStatusConfig(status);\r        return (\r          <Badge status={config.color as any} text={config.text} />\r        );\r      },\r      onFilter: (value, record) => record.status === value,\r    },\r    {\r      title: 'Kullanım',\r      key: 'usage',\r      width: 180,\r      render: (_, record) => (\r        <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\r          <div>\r            <Text type=\"secondary\" style={{ fontSize: 11 }}>\r              Kullanıcı: {record.users}/{record.maxUsers}\r            </Text>\r            <Tooltip title={`${record.users} / ${record.maxUsers} kullanıcı`}>\r              <div style={{ marginTop: 2 }}>\r                <div style={{\r                  width: '100%',\r                  height: 4,\r                  background: '#f0f0f0',\r                  borderRadius: 2,\r                  overflow: 'hidden'\r                }}>\r                  <div style={{\r                    width: `${(record.users / record.maxUsers) * 100}%`,\r                    height: '100%',\r                    background: record.users >= record.maxUsers ? '#ff4d4f' : '#52c41a',\r                    transition: 'width 0.3s'\r                  }} />\r                </div>\r              </div>\r            </Tooltip>\r          </div>\r          <div>\r            <Text type=\"secondary\" style={{ fontSize: 11 }}>\r              Depolama: {record.storage}GB/{record.maxStorage}GB\r            </Text>\r            <Tooltip title={`${record.storage}GB / ${record.maxStorage}GB depolama`}>\r              <div style={{ marginTop: 2 }}>\r                <div style={{\r                  width: '100%',\r                  height: 4,\r                  background: '#f0f0f0',\r                  borderRadius: 2,\r                  overflow: 'hidden'\r                }}>\r                  <div style={{\r                    width: `${(record.storage / record.maxStorage) * 100}%`,\r                    height: '100%',\r                    background: record.storage >= record.maxStorage * 0.9 ? '#faad14' : '#1890ff',\r                    transition: 'width 0.3s'\r                  }} />\r                </div>\r              </div>\r            </Tooltip>\r          </div>\r        </Space>\r      ),\r    },\r    {\r      title: 'Gelir',\r      dataIndex: 'revenue',\r      key: 'revenue',\r      width: 120,\r      sorter: (a, b) => a.revenue - b.revenue,\r      render: (revenue: number) => (\r        <Text strong style={{ color: '#52c41a' }}>\r          <DollarOutlined /> {revenue.toLocaleString('tr-TR')}\r        </Text>\r      ),\r    },\r    {\r      title: 'Kayıt Tarihi',\r      dataIndex: 'createdAt',\r      key: 'createdAt',\r      width: 120,\r      sorter: (a, b) => dayjs(a.createdAt).unix() - dayjs(b.createdAt).unix(),\r      render: (date: string) => (\r        <Tooltip title={dayjs(date).format('DD MMMM YYYY HH:mm')}>\r          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r            {dayjs(date).fromNow()}\r          </Text>\r        </Tooltip>\r      ),\r    },\r    {\r      title: 'Son Giriş',\r      dataIndex: 'lastLogin',\r      key: 'lastLogin',\r      width: 120,\r      render: (date: string) => (\r        <Tooltip title={dayjs(date).format('DD MMMM YYYY HH:mm')}>\r          <Text type={dayjs().diff(dayjs(date), 'day') > 7 ? 'warning' : 'secondary'} style={{ fontSize: 12 }}>\r            {dayjs(date).fromNow()}\r          </Text>\r        </Tooltip>\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      fixed: 'right',\r      width: 120,\r      render: (_, record) => (\r        <Space size=\"small\">\r          <Tooltip title=\"Görüntüle\">\r            <Button\r              type=\"text\"\r              size=\"small\"\r              icon={<EyeOutlined />}\r              onClick={() = aria-label=\"eye outlined\"> onView?.(record)}\r            />\r          </Tooltip>\r          <Tooltip title=\"Düzenle\">\r            <Button\r              type=\"text\"\r              size=\"small\"\r              icon={<EditOutlined />}\r              onClick={() = aria-label=\"edit outlined\"> onEdit?.(record)}\r            />\r          </Tooltip>\r          <Dropdown\r            menu={{\r              items: [\r                {\r                  key: 'login',\r                  label: 'Tenant Olarak Giriş',\r                  icon: <LoginOutlined />,\r                  onClick: () => onLoginAs?.(record.id),\r                },\r                {\r                  key: 'toggle',\r                  label: record.status === 'active' ? 'Askıya Al' : 'Aktif Et',\r                  icon: record.status === 'active' ? <LockOutlined /> : <UnlockOutlined />,\r                  onClick: () => onToggleStatus?.(record.id),\r                },\r                { type: 'divider' },\r                {\r                  key: 'delete',\r                  label: 'Sil',\r                  icon: <DeleteOutlined />,\r                  danger: true,\r                  onClick: () => {\r                    Modal.confirm({\r                      title: 'Tenant Sil',\r                      content: `${record.name} kalıcı olarak silinecek. Emin misiniz?`,\r                      okText: 'Sil',\r                      cancelText: 'İptal',\r                      okButtonProps: { danger: true },\r                      onOk: () => onDelete?.([record.id]),\r                    });\r                  },\r                },\r              ],\r            }}\r            trigger={['click']}\r          >\r            <Button type=\"text\" size=\"small\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r          </Dropdown>\r        </Space>\r      ),\r    },\r  ];\r  // Satır seçimi\r  const rowSelection: TableRowSelection<Tenant> = {\r    selectedRowKeys,\r    onChange: (keys) => setSelectedRowKeys(keys as string[]),\r    selections: [\r      Table.SELECTION_ALL,\r      Table.SELECTION_INVERT,\r      Table.SELECTION_NONE,\r    ],\r  };\r  // Genişletilebilir satır içeriği\r  const expandedRowRender = (record: Tenant) => (\r    <div style={{ padding: '16px 48px' }}>\r      <Row gutter={[24, 16]}>\r        <Col span={8}>\r          <Text type=\"secondary\">Modüller</Text>\r          <div style={{ marginTop: 8 }}>\r            {record.modules.map(module => (\r              <Tag key={module} style={{ marginBottom: 4 }}>{module}</Tag>\r            ))}\r          </div>\r        </Col>\r        <Col span={8}>\r          <Text type=\"secondary\">Abonelik Bitiş</Text>\r          <div style={{ marginTop: 8 }}>\r            <Text>{dayjs(record.expiresAt).format('DD MMMM YYYY')}</Text>\r            <br />\r            <Text type={dayjs().isAfter(record.expiresAt) ? 'danger' : 'secondary'} style={{ fontSize: 12 }}>\r              {dayjs(record.expiresAt).fromNow()}\r            </Text>\r          </div>\r        </Col>\r        <Col span={8}>\r          <Text type=\"secondary\">İletişim</Text>\r          <div style={{ marginTop: 8 }}>\r            <Text>{record.owner.phone || 'Telefon yok'}</Text>\r          </div>\r        </Col>\r      </Row>\r    </div>\r  );\r  return (\r    <div className=\"tenant-data-table\">\r      {/* Üst Toolbar */}\r      <div style={{ marginBottom: 16, display: 'flex', justifyContent: 'space-between', alignItems: 'center', flexWrap: 'wrap', gap: 16 }}>\r        <Space wrap>\r          {selectedRowKeys.length > 0 && (\r            <AnimatePresence>\r              <motion.div\r                initial={{ opacity: 0, scale: 0.8 }}\r                animate={{ opacity: 1, scale: 1 }}\r                exit={{ opacity: 0, scale: 0.8 }}\r              >\r                <Badge count={selectedRowKeys.length} offset={[-5, 5]}>\r                  <Dropdown menu={bulkActionMenu} trigger={['click']}>\r                    <Button>\r                      Toplu İşlem <MoreOutlined />\r                    </Button>\r                  </Dropdown>\r                </Badge>\r              </motion.div>\r            </AnimatePresence>\r          )}\r          <Input\r            placeholder=\"Tenant ara...\"\r            prefix={<SearchOutlined / aria-label=\"input field\">}\r            style={{ width: 250 }}\r            value={searchText}\r            onChange={(e) => {\r              setSearchText(e.target.value);\r              onSearch?.(e.target.value);\r            }}\r            allowClear\r          />\r          <Select\r            placeholder=\"Plan Filtrele\"\r            style={{ width: 150 }}\r            allowClear\r            onChange={(value) = aria-label=\"select field\"> {\r              setFilters({ ...filters, plan: value });\r              onFilter?.({ ...filters, plan: value });\r            }}\r          >\r            <Select.Option value=\"Başlangıç\" aria-label=\"select field\">Başlangıç</Select.Option>\r            <Select.Option value=\"Profesyonel\" aria-label=\"select field\">Profesyonel</Select.Option>\r            <Select.Option value=\"Kurumsal\" aria-label=\"select field\">Kurumsal</Select.Option>\r          </Select>\r          <Select\r            placeholder=\"Durum Filtrele\"\r            style={{ width: 150 }}\r            allowClear\r            onChange={(value) = aria-label=\"select field\"> {\r              setFilters({ ...filters, status: value });\r              onFilter?.({ ...filters, status: value });\r            }}\r          >\r            <Select.Option value=\"active\" aria-label=\"select field\">Aktif</Select.Option>\r            <Select.Option value=\"suspended\" aria-label=\"select field\">Askıda</Select.Option>\r            <Select.Option value=\"pending\" aria-label=\"select field\">Onay Bekliyor</Select.Option>\r            <Select.Option value=\"expired\" aria-label=\"select field\">Süresi Dolmuş</Select.Option>\r          </Select>\r        </Space>\r        <Space>\r          <Button icon={<ReloadOutlined />} onClick={onRefresh} loading={loading} aria-label=\"reload outlined\">\r            Yenile\r          </Button>\r          <Button icon={<ExportOutlined />} onClick={() = aria-label=\"export outlined\"> onExport?.()}>\r            Dışa Aktar\r          </Button>\r        </Space>\r      </div>\r      {/* Tablo */}\r      <Table\r        rowSelection={rowSelection}\r        columns={columns}\r        dataSource={data}\r        loading={loading}\r        rowKey=\"id\"\r        pagination={pagination}\r        onChange={onChange}\r        expandable={{\r          expandedRowRender,\r          expandedRowKeys,\r          onExpandedRowsChange: setExpandedRowKeys,\r          expandRowByClick: false,\r        }}\r        scroll={{ x: 1500 }}\r        size=\"middle\"\r        className=\"custom-table\"\r      />\r    </div>\r  );\r};\rexport default TenantDataTable;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/components/TenantDataTable.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Typography,\r  Button,\r  Table,\r  Space,\r  Tag,\r  Tooltip,\r  Modal,\r  Form,\r  Input,\r  Select,\r  DatePicker,\r  Switch,\r  Tabs,\r  Row,\r  Col,\r  Statistic,\r  Progress,\r  Timeline,\r  Alert,\r  Popconfirm,\r  message,\r  Dropdown,\r  Menu,\r  Badge,\r  Divider,\r  InputNumber,\r  Checkbox,\r  List,\r  Avatar,\r  notification,\r  Descriptions,\r  Collapse\r} from 'antd';\rimport {\r  ApiOutlined,\r  PlusOutlined,\r  KeyOutlined,\r  DeleteOutlined,\r  EditOutlined,\r  CopyOutlined,\r  ReloadOutlined,\r  SettingOutlined,\r  SafetyOutlined,\r  ThunderboltOutlined,\r  CloudServerOutlined,\r  BarChartOutlined,\r  ApiOutlined as WebhookOutlined, // WebhookOutlined yok, ApiOutlined kullan\r  LockOutlined,\r  UnlockOutlined,\r  WarningOutlined,\r  CheckCircleOutlined,\r  ClockCircleOutlined,\r  EyeOutlined,\r  EyeInvisibleOutlined,\r  MoreOutlined,\r  FilterOutlined,\r  ExportOutlined,\r  InfoCircleOutlined,\r  GlobalOutlined,\r  CodeOutlined,\r  FileTextOutlined,\r  HistoryOutlined\r} from '@ant-design/icons';\rimport { ColumnType } from 'antd/es/table';\rimport dayjs from 'dayjs';\rimport relativeTime from 'dayjs/plugin/relativeTime';\rimport { Line, Bar, Pie } from 'recharts';\rimport {\r  LineChart,\r  BarChart,\r  PieChart,\r  CartesianGrid,\r  XAxis,\r  YAxis,\r  Tooltip as RechartsTooltip,\r  Legend,\r  ResponsiveContainer,\r  Cell\r} from 'recharts';\rimport './api-management.css';\rimport './api-management-enhanced.css';\rdayjs.extend(relativeTime);\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst { TextArea } = Input;\rconst { Option } = Select;\rconst { RangePicker } = DatePicker;\rinterface ApiKey {\r  id: string;\r  name: string;\r  key: string;\r  secret?: string;\r  tenantId: string;\r  tenantName: string;\r  environment: 'development' | 'staging' | 'production';\r  status: 'active' | 'inactive' | 'revoked' | 'expired';\r  permissions: string[];\r  rateLimit: {\r    requests: number;\r    period: 'second' | 'minute' | 'hour' | 'day';\r    burst?: number;\r  };\r  usage: {\r    requests: number;\r    errors: number;\r    lastUsed: string;\r    bandwidth: number;\r  };\r  ipWhitelist?: string[];\r  expiresAt?: string;\r  createdAt: string;\r  createdBy: string;\r  lastModified: string;\r}\rinterface Webhook {\r  id: string;\r  name: string;\r  url: string;\r  events: string[];\r  status: 'active' | 'inactive' | 'failed';\r  secret: string;\r  headers?: Record<string, string>;\r  retryPolicy: {\r    maxRetries: number;\r    retryInterval: number;\r    backoffMultiplier: number;\r  };\r  lastTriggered?: string;\r  successRate: number;\r  totalCalls: number;\r  failedCalls: number;\r  createdAt: string;\r}\rinterface ApiEndpoint {\r  id: string;\r  path: string;\r  method: string;\r  description: string;\r  category: string;\r  authentication: boolean;\r  rateLimit?: {\r    requests: number;\r    period: string;\r  };\r  parameters: Array<{\r    name: string;\r    type: string;\r    required: boolean;\r    description: string;\r  }>;\r  responses: Array<{\r    status: number;\r    description: string;\r  }>;\r  deprecated: boolean;\r  version: string;\r}\rconst ApiManagement: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [apiKeys, setApiKeys] = useState<ApiKey[]>([]);\r  const [webhooks, setWebhooks] = useState<Webhook[]>([]);\r  const [endpoints, setEndpoints] = useState<ApiEndpoint[]>([]);\r  const [selectedKeys, setSelectedKeys] = useState<string[]>([]);\r  const [activeTab, setActiveTab] = useState('keys');\r  const [keyModalVisible, setKeyModalVisible] = useState(false);\r  const [webhookModalVisible, setWebhookModalVisible] = useState(false);\r  const [selectedKey, setSelectedKey] = useState<ApiKey | null>(null);\r  const [selectedWebhook, setSelectedWebhook] = useState<Webhook | null>(null);\r  const [showSecret, setShowSecret] = useState<Record<string, boolean>>({});\r  const [form] = Form.useForm();\r  const [webhookForm] = Form.useForm();\r  const [filterStatus, setFilterStatus] = useState<string>('all');\r  const [searchText, setSearchText] = useState('');\r  // Mock data\r  useEffect(() => {\r    const mockApiKeys: ApiKey[] = [\r      {\r        id: '1',\r        name: 'Production API',\r        key: 'pk_live_51234567890abcdef',\r        secret: 'sk_live_51234567890abcdef_secret123',\r        tenantId: 'tenant_001',\r        tenantName: 'Acme Corporation',\r        environment: 'production',\r        status: 'active',\r        permissions: ['read', 'write', 'delete'],\r        rateLimit: {\r          requests: 10000,\r          period: 'hour',\r          burst: 100\r        },\r        usage: {\r          requests: 45678,\r          errors: 23,\r          lastUsed: dayjs().subtract(5, 'minutes').toISOString(),\r          bandwidth: 1024000000\r        },\r        ipWhitelist: ['192.168.1.0/24', '10.0.0.0/8'],\r        expiresAt: dayjs().add(90, 'days').toISOString(),\r        createdAt: dayjs().subtract(30, 'days').toISOString(),\r        createdBy: 'admin@example.com',\r        lastModified: dayjs().subtract(2, 'days').toISOString()\r      },\r      {\r        id: '2',\r        name: 'Development API',\r        key: 'pk_test_98765432109876',\r        secret: 'sk_test_98765432109876_secret456',\r        tenantId: 'tenant_002',\r        tenantName: 'Beta Tech Inc',\r        environment: 'development',\r        status: 'active',\r        permissions: ['read'],\r        rateLimit: {\r          requests: 1000,\r          period: 'hour'\r        },\r        usage: {\r          requests: 1234,\r          errors: 5,\r          lastUsed: dayjs().subtract(1, 'hour').toISOString(),\r          bandwidth: 50000000\r        },\r        createdAt: dayjs().subtract(15, 'days').toISOString(),\r        createdBy: 'developer@example.com',\r        lastModified: dayjs().subtract(5, 'days').toISOString()\r      },\r      {\r        id: '3',\r        name: 'Mobile App Key',\r        key: 'pk_mobile_abc123def456',\r        tenantId: 'tenant_001',\r        tenantName: 'Acme Corporation',\r        environment: 'production',\r        status: 'revoked',\r        permissions: ['read'],\r        rateLimit: {\r          requests: 5000,\r          period: 'hour'\r        },\r        usage: {\r          requests: 98765,\r          errors: 145,\r          lastUsed: dayjs().subtract(7, 'days').toISOString(),\r          bandwidth: 250000000\r        },\r        createdAt: dayjs().subtract(60, 'days').toISOString(),\r        createdBy: 'mobile@example.com',\r        lastModified: dayjs().subtract(7, 'days').toISOString()\r      }\r    ];\r    const mockWebhooks: Webhook[] = [\r      {\r        id: '1',\r        name: 'Order Events',\r        url: 'https://api.example.com/webhooks/orders',\r        events: ['order.created', 'order.updated', 'order.cancelled'],\r        status: 'active',\r        secret: 'whsec_test_secret123',\r        headers: {\r          'X-Custom-Header': 'CustomValue'\r        },\r        retryPolicy: {\r          maxRetries: 3,\r          retryInterval: 60,\r          backoffMultiplier: 2\r        },\r        lastTriggered: dayjs().subtract(30, 'minutes').toISOString(),\r        successRate: 98.5,\r        totalCalls: 1523,\r        failedCalls: 23,\r        createdAt: dayjs().subtract(20, 'days').toISOString()\r      },\r      {\r        id: '2',\r        name: 'Payment Notifications',\r        url: 'https://payment.example.com/webhook',\r        events: ['payment.success', 'payment.failed', 'refund.processed'],\r        status: 'active',\r        secret: 'whsec_live_secret456',\r        retryPolicy: {\r          maxRetries: 5,\r          retryInterval: 30,\r          backoffMultiplier: 1.5\r        },\r        lastTriggered: dayjs().subtract(2, 'hours').toISOString(),\r        successRate: 99.8,\r        totalCalls: 4567,\r        failedCalls: 9,\r        createdAt: dayjs().subtract(45, 'days').toISOString()\r      },\r      {\r        id: '3',\r        name: 'Inventory Updates',\r        url: 'https://inventory.example.com/hooks',\r        events: ['product.updated', 'stock.low', 'stock.out'],\r        status: 'failed',\r        secret: 'whsec_inv_secret789',\r        retryPolicy: {\r          maxRetries: 3,\r          retryInterval: 120,\r          backoffMultiplier: 2\r        },\r        lastTriggered: dayjs().subtract(1, 'day').toISOString(),\r        successRate: 85.2,\r        totalCalls: 892,\r        failedCalls: 132,\r        createdAt: dayjs().subtract(10, 'days').toISOString()\r      }\r    ];\r    const mockEndpoints: ApiEndpoint[] = [\r      {\r        id: '1',\r        path: '/api/v1/products',\r        method: 'GET',\r        description: 'List all products',\r        category: 'Products',\r        authentication: true,\r        rateLimit: {\r          requests: 100,\r          period: 'minute'\r        },\r        parameters: [\r          {\r            name: 'page',\r            type: 'integer',\r            required: false,\r            description: 'Page number'\r          },\r          {\r            name: 'limit',\r            type: 'integer',\r            required: false,\r            description: 'Items per page'\r          }\r        ],\r        responses: [\r          {\r            status: 200,\r            description: 'Success'\r          },\r          {\r            status: 401,\r            description: 'Unauthorized'\r          }\r        ],\r        deprecated: false,\r        version: 'v1'\r      },\r      {\r        id: '2',\r        path: '/api/v1/orders',\r        method: 'POST',\r        description: 'Create a new order',\r        category: 'Orders',\r        authentication: true,\r        rateLimit: {\r          requests: 10,\r          period: 'minute'\r        },\r        parameters: [\r          {\r            name: 'customer_id',\r            type: 'string',\r            required: true,\r            description: 'Customer ID'\r          },\r          {\r            name: 'items',\r            type: 'array',\r            required: true,\r            description: 'Order items'\r          }\r        ],\r        responses: [\r          {\r            status: 201,\r            description: 'Created'\r          },\r          {\r            status: 400,\r            description: 'Bad Request'\r          }\r        ],\r        deprecated: false,\r        version: 'v1'\r      }\r    ];\r    setApiKeys(mockApiKeys);\r    setWebhooks(mockWebhooks);\r    setEndpoints(mockEndpoints);\r  }, []);\r  const handleCreateApiKey = () => {\r    setSelectedKey(null);\r    form.resetFields();\r    setKeyModalVisible(true);\r  };\r  const handleEditApiKey = (key: ApiKey) => {\r    setSelectedKey(key);\r    form.setFieldsValue({\r      name: key.name,\r      environment: key.environment,\r      permissions: key.permissions,\r      rateLimit: key.rateLimit.requests,\r      ratePeriod: key.rateLimit.period,\r      expiresAt: key.expiresAt ? dayjs(key.expiresAt) : undefined,\r      ipWhitelist: key.ipWhitelist?.join('\\n')\r    });\r    setKeyModalVisible(true);\r  };\r  const handleRevokeKey = (keyId: string) => {\r    Modal.confirm({\r      title: 'Revoke API Key',\r      icon: <WarningOutlined />,\r      content: 'Are you sure you want to revoke this API key? This action cannot be undone.',\r      okText: 'Revoke',\r      okType: 'danger',\r      onOk: () => {\r        setApiKeys(prev => prev.map(k => \r          k.id === keyId ? { ...k, status: 'revoked' as const } : k\r        ));\r        message.success('API key revoked successfully');\r      }\r    });\r  };\r  const handleRegenerateKey = (keyId: string) => {\r    Modal.confirm({\r      title: 'Regenerate API Key',\r      icon: <ReloadOutlined />,\r      content: 'This will generate a new key and invalidate the current one. Continue?',\r      onOk: () => {\r        const newKey = `pk_${Math.random().toString(36).substr(2, 20)}`;\r        const newSecret = `sk_${Math.random().toString(36).substr(2, 30)}`;\r        setApiKeys(prev => prev.map(k => \r          k.id === keyId ? { ...k, key: newKey, secret: newSecret } : k\r        ));\r        notification.success({\r          message: 'API Key Regenerated',\r          description: 'The new key has been copied to your clipboard.',\r          duration: 5\r        });\r        navigator.clipboard.writeText(newKey);\r      }\r    });\r  };\r  const handleCopyKey = (key: string) => {\r    navigator.clipboard.writeText(key);\r    message.success('API key copied to clipboard');\r  };\r  const handleCreateWebhook = () => {\r    setSelectedWebhook(null);\r    webhookForm.resetFields();\r    setWebhookModalVisible(true);\r  };\r  const handleEditWebhook = (webhook: Webhook) => {\r    setSelectedWebhook(webhook);\r    webhookForm.setFieldsValue({\r      name: webhook.name,\r      url: webhook.url,\r      events: webhook.events,\r      maxRetries: webhook.retryPolicy.maxRetries,\r      retryInterval: webhook.retryPolicy.retryInterval\r    });\r    setWebhookModalVisible(true);\r  };\r  const handleTestWebhook = (webhook: Webhook) => {\r    message.loading('Testing webhook...', 2).then(() => {\r      message.success('Webhook test successful!');\r    });\r  };\r  const getStatusColor = (status: string) => {\r    const colors: Record<string, string> = {\r      active: 'success',\r      inactive: 'default',\r      revoked: 'error',\r      expired: 'warning',\r      failed: 'error'\r    };\r    return colors[status] || 'default';\r  };\r  const apiKeyColumns: ColumnType<ApiKey>[] = [\r    {\r      title: 'Name',\r      dataIndex: 'name',\r      key: 'name',\r      render: (text, record) => (\r        <Space>\r          <KeyOutlined />\r          <div>\r            <Text strong>{text}</Text>\r            <br />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {record.tenantName} • {record.environment}\r            </Text>\r          </div>\r        </Space>\r      )\r    },\r    {\r      title: 'API Key',\r      dataIndex: 'key',\r      key: 'key',\r      render: (text, record) => (\r        <Space>\r          <Text code copyable={{ text }}>\r            {text.substring(0, 20)}...\r          </Text>\r          {record.secret && (\r            <Tooltip title={showSecret[record.id] ? 'Hide secret' : 'Show secret'}>\r              <Button\r                size=\"small\"\r                icon={showSecret[record.id] ? <EyeInvisibleOutlined /> : <EyeOutlined />}\r                onClick={() = aria-label=\"button\"> setShowSecret(prev => ({ ...prev, [record.id]: !prev[record.id] }))}\r              />\r            </Tooltip>\r          )}\r        </Space>\r      )\r    },\r    {\r      title: 'Status',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status) => (\r        <Tag color={getStatusColor(status)} icon={\r          status === 'active' ? <CheckCircleOutlined /> :\r          status === 'revoked' ? <LockOutlined /> :\r          status === 'expired' ? <ClockCircleOutlined /> :\r          <WarningOutlined />\r        }>\r          {status.toUpperCase()}\r        </Tag>\r      )\r    },\r    {\r      title: 'Rate Limit',\r      key: 'rateLimit',\r      render: (_, record) => (\r        <Text type=\"secondary\">\r          {record.rateLimit.requests.toLocaleString()}/{record.rateLimit.period}\r        </Text>\r      )\r    },\r    {\r      title: 'Usage',\r      key: 'usage',\r      render: (_, record) => (\r        <Space direction=\"vertical\" size={0}>\r          <Text>{record.usage.requests.toLocaleString()} requests</Text>\r          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r            Last used {dayjs(record.usage.lastUsed).fromNow()}\r          </Text>\r        </Space>\r      )\r    },\r    {\r      title: 'Expires',\r      dataIndex: 'expiresAt',\r      key: 'expiresAt',\r      render: (date) => date ? (\r        <Tooltip title={dayjs(date).format('YYYY-MM-DD HH:mm')}>\r          <Text>{dayjs(date).fromNow()}</Text>\r        </Tooltip>\r      ) : <Text type=\"secondary\">Never</Text>\r    },\r    {\r      title: 'Actions',\r      key: 'actions',\r      render: (_, record) => (\r        <Space>\r          <Tooltip title=\"Edit\">\r            <Button\r              size=\"small\"\r              icon={<EditOutlined />}\r              onClick={() = aria-label=\"edit outlined\"> handleEditApiKey(record)}\r            />\r          </Tooltip>\r          <Tooltip title=\"Regenerate\">\r            <Button\r              size=\"small\"\r              icon={<ReloadOutlined />}\r              onClick={() = aria-label=\"reload outlined\"> handleRegenerateKey(record.id)}\r              disabled={record.status === 'revoked'}\r            />\r          </Tooltip>\r          <Tooltip title=\"Revoke\">\r            <Button\r              size=\"small\"\r              danger\r              icon={<DeleteOutlined />}\r              onClick={() = aria-label=\"delete outlined\"> handleRevokeKey(record.id)}\r              disabled={record.status === 'revoked'}\r            />\r          </Tooltip>\r        </Space>\r      )\r    }\r  ];\r  const webhookColumns: ColumnType<Webhook>[] = [\r    {\r      title: 'Webhook',\r      key: 'webhook',\r      render: (_, record) => (\r        <Space>\r          <WebhookOutlined />\r          <div>\r            <Text strong>{record.name}</Text>\r            <br />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {record.url}\r            </Text>\r          </div>\r        </Space>\r      )\r    },\r    {\r      title: 'Events',\r      dataIndex: 'events',\r      key: 'events',\r      render: (events) => (\r        <Space wrap>\r          {events.slice(0, 2).map((event: string) => (\r            <Tag key={event}>{event}</Tag>\r          ))}\r          {events.length > 2 && (\r            <Tag>+{events.length - 2} more</Tag>\r          )}\r        </Space>\r      )\r    },\r    {\r      title: 'Status',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status) => (\r        <Badge\r          status={status === 'active' ? 'success' : status === 'failed' ? 'error' : 'default'}\r          text={status.charAt(0).toUpperCase() + status.slice(1)}\r        />\r      )\r    },\r    {\r      title: 'Success Rate',\r      key: 'successRate',\r      render: (_, record) => (\r        <Space direction=\"vertical\" size={0}>\r          <Progress\r            percent={record.successRate}\r            size=\"small\"\r            status={record.successRate > 95 ? 'success' : record.successRate > 80 ? 'normal' : 'exception'}\r          />\r          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r            {record.totalCalls.toLocaleString()} calls\r          </Text>\r        </Space>\r      )\r    },\r    {\r      title: 'Last Triggered',\r      dataIndex: 'lastTriggered',\r      key: 'lastTriggered',\r      render: (date) => date ? (\r        <Tooltip title={dayjs(date).format('YYYY-MM-DD HH:mm:ss')}>\r          <Text>{dayjs(date).fromNow()}</Text>\r        </Tooltip>\r      ) : <Text type=\"secondary\">Never</Text>\r    },\r    {\r      title: 'Actions',\r      key: 'actions',\r      render: (_, record) => (\r        <Space>\r          <Tooltip title=\"Edit\">\r            <Button\r              size=\"small\"\r              icon={<EditOutlined />}\r              onClick={() = aria-label=\"edit outlined\"> handleEditWebhook(record)}\r            />\r          </Tooltip>\r          <Tooltip title=\"Test\">\r            <Button\r              size=\"small\"\r              icon={<ThunderboltOutlined />}\r              onClick={() = aria-label=\"thunderbolt outlined\"> handleTestWebhook(record)}\r            />\r          </Tooltip>\r          <Tooltip title=\"View Logs\">\r            <Button\r              size=\"small\"\r              icon={<HistoryOutlined />}\r            / aria-label=\"history outlined\">\r          </Tooltip>\r        </Space>\r      )\r    }\r  ];\r  const usageData = [\r    { date: '01', requests: 4500, errors: 45 },\r    { date: '02', requests: 5200, errors: 23 },\r    { date: '03', requests: 4800, errors: 67 },\r    { date: '04', requests: 6100, errors: 34 },\r    { date: '05', requests: 5500, errors: 28 },\r    { date: '06', requests: 5900, errors: 41 },\r    { date: '07', requests: 6500, errors: 52 }\r  ];\r  const methodDistribution = [\r    { name: 'GET', value: 65, color: '#52c41a' },\r    { name: 'POST', value: 20, color: '#1890ff' },\r    { name: 'PUT', value: 10, color: '#faad14' },\r    { name: 'DELETE', value: 5, color: '#ff4d4f' }\r  ];\r  return (\r    <div className=\"api-management-container\">\r      <div className=\"api-header\">\r        <Title level={2}>\r          <ApiOutlined /> API Management\r        </Title>\r        <Space>\r          <Button icon={<ExportOutlined />} aria-label=\"export outlined\">Export</Button>\r          <Button icon={<SettingOutlined />} aria-label=\"setting outlined\">Settings</Button>\r        </Space>\r      </div>\r      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\r        <Col xs={24} sm={12} md={6}>\r          <Card className=\"stat-card\">\r            <Statistic\r              title=\"Total API Keys\"\r              value={apiKeys.filter(k => k.status === 'active').length}\r              prefix={<KeyOutlined />}\r              suffix={`/ ${apiKeys.length}`}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card className=\"stat-card\">\r            <Statistic\r              title=\"Active Webhooks\"\r              value={webhooks.filter(w => w.status === 'active').length}\r              prefix={<WebhookOutlined />}\r              suffix={`/ ${webhooks.length}`}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card className=\"stat-card\">\r            <Statistic\r              title=\"Total Requests (24h)\"\r              value={156789}\r              prefix={<ThunderboltOutlined />}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card className=\"stat-card\">\r            <Statistic\r              title=\"Error Rate\"\r              value={0.52}\r              suffix=\"%\"\r              prefix={<WarningOutlined />}\r              valueStyle={{ color: '#52c41a' }}\r            />\r          </Card>\r        </Col>\r      </Row>\r      <Tabs activeKey={activeTab} onChange={setActiveTab}>\r        <TabPane tab={<span><KeyOutlined /> API Keys</span>} key=\"keys\">\r          <Card>\r            <Space style={{ marginBottom: 16 }} wrap>\r              <Button\r                type=\"primary\"\r                icon={<PlusOutlined />}\r                onClick={handleCreateApiKey}\r               aria-label=\"plus outlined\">\r                Generate New Key\r              </Button>\r              <Select\r                style={{ width: 150 }}\r                placeholder=\"Filter by status\"\r                value={filterStatus}\r                onChange={setFilterStatus}\r               aria-label=\"select field\">\r                <Option value=\"all\">All Status</Option>\r                <Option value=\"active\">Active</Option>\r                <Option value=\"inactive\">Inactive</Option>\r                <Option value=\"revoked\">Revoked</Option>\r              </Select>\r              <Input.Search\r                placeholder=\"Search keys...\"\r                style={{ width: 250 }}\r                value={searchText}\r                onChange={(e) = aria-label=\"input field\"> setSearchText(e.target.value)}\r              />\r            </Space>\r            <Table\r              columns={apiKeyColumns}\r              dataSource={apiKeys.filter(key => {\r                if (filterStatus !== 'all' && key.status !== filterStatus) return false;\r                if (searchText && !key.name.toLowerCase().includes(searchText.toLowerCase())) return false;\r                return true;\r              })}\r              rowKey=\"id\"\r              loading={loading}\r              pagination={{\r                pageSize: 10,\r                showSizeChanger: true,\r                showTotal: (total) => `Total ${total} keys`\r              }}\r              expandable={{\r                expandedRowRender: (record) => (\r                  <div className=\"expanded-row\">\r                    {showSecret[record.id] && record.secret && (\r                      <Alert\r                        message=\"Secret Key\"\r                        description={\r                          <Text code copyable={{ text: record.secret }}>\r                            {record.secret}\r                          </Text>\r                        }\r                        type=\"warning\"\r                        icon={<LockOutlined />}\r                        style={{ marginBottom: 16 }}\r                      />\r                    )}\r                    <Descriptions size=\"small\" column={2}>\r                      <Descriptions.Item label=\"Created By\">{record.createdBy}</Descriptions.Item>\r                      <Descriptions.Item label=\"Created At\">\r                        {dayjs(record.createdAt).format('YYYY-MM-DD HH:mm')}\r                      </Descriptions.Item>\r                      <Descriptions.Item label=\"Permissions\">\r                        {record.permissions.map(p => <Tag key={p}>{p}</Tag>)}\r                      </Descriptions.Item>\r                      <Descriptions.Item label=\"IP Whitelist\">\r                        {record.ipWhitelist?.join(', ') || 'None'}\r                      </Descriptions.Item>\r                      <Descriptions.Item label=\"Total Requests\">\r                        {record.usage.requests.toLocaleString()}\r                      </Descriptions.Item>\r                      <Descriptions.Item label=\"Error Count\">\r                        {record.usage.errors.toLocaleString()}\r                      </Descriptions.Item>\r                    </Descriptions>\r                  </div>\r                )\r              }}\r            />\r          </Card>\r        </TabPane>\r        <TabPane tab={<span><WebhookOutlined /> Webhooks</span>} key=\"webhooks\">\r          <Card>\r            <Space style={{ marginBottom: 16 }}>\r              <Button\r                type=\"primary\"\r                icon={<PlusOutlined />}\r                onClick={handleCreateWebhook}\r               aria-label=\"plus outlined\">\r                Add Webhook\r              </Button>\r              <Button icon={<ReloadOutlined />} aria-label=\"reload outlined\">Refresh</Button>\r            </Space>\r            <Table\r              columns={webhookColumns}\r              dataSource={webhooks}\r              rowKey=\"id\"\r              loading={loading}\r              pagination={{\r                pageSize: 10,\r                showSizeChanger: true\r              }}\r            />\r          </Card>\r        </TabPane>\r        <TabPane tab={<span><BarChartOutlined /> Usage Analytics</span>} key=\"usage\">\r          <Row gutter={[16, 16]}>\r            <Col xs={24} lg={16}>\r              <Card title=\"API Usage Trend\">\r                <ResponsiveContainer width=\"100%\" height={300}>\r                  <LineChart data={usageData}>\r                    <CartesianGrid strokeDasharray=\"3 3\" />\r                    <XAxis dataKey=\"date\" />\r                    <YAxis />\r                    <RechartsTooltip />\r                    <Legend />\r                    <Line\r                      type=\"monotone\"\r                      dataKey=\"requests\"\r                      stroke=\"#1890ff\"\r                      name=\"Requests\"\r                      strokeWidth={2}\r                    />\r                    <Line\r                      type=\"monotone\"\r                      dataKey=\"errors\"\r                      stroke=\"#ff4d4f\"\r                      name=\"Errors\"\r                      strokeWidth={2}\r                    />\r                  </LineChart>\r                </ResponsiveContainer>\r              </Card>\r            </Col>\r            <Col xs={24} lg={8}>\r              <Card title=\"Method Distribution\">\r                <ResponsiveContainer width=\"100%\" height={300}>\r                  <PieChart>\r                    <Pie\r                      data={methodDistribution}\r                      dataKey=\"value\"\r                      nameKey=\"name\"\r                      cx=\"50%\"\r                      cy=\"50%\"\r                      outerRadius={80}\r                      label\r                    >\r                      {methodDistribution.map((entry, index) => (\r                        <Cell key={`cell-${index}`} fill={entry.color} />\r                      ))}\r                    </Pie>\r                    <RechartsTooltip />\r                    <Legend />\r                  </PieChart>\r                </ResponsiveContainer>\r              </Card>\r            </Col>\r          </Row>\r          <Card title=\"Top Endpoints\" style={{ marginTop: 16 }}>\r            <List\r              dataSource={endpoints}\r              renderItem={(endpoint) => (\r                <List.Item\r                  actions={[\r                    <Tag color={endpoint.method === 'GET' ? 'green' : endpoint.method === 'POST' ? 'blue' : 'orange'}>\r                      {endpoint.method}\r                    </Tag>,\r                    <Text type=\"secondary\">\r                      {endpoint.rateLimit?.requests}/{endpoint.rateLimit?.period}\r                    </Text>\r                  ]}\r                >\r                  <List.Item.Meta\r                    avatar={<Avatar icon={<CodeOutlined />} />}\r                    title={endpoint.path}\r                    description={endpoint.description}\r                  />\r                </List.Item>\r              )}\r            />\r          </Card>\r        </TabPane>\r        <TabPane tab={<span><FileTextOutlined /> Documentation</span>} key=\"docs\">\r          <Card>\r            <Alert\r              message=\"API Documentation\"\r              description=\"Interactive API documentation with request/response examples and testing capabilities.\"\r              type=\"info\"\r              showIcon\r              style={{ marginBottom: 24 }}\r            />\r            <Collapse>\r              {endpoints.map(endpoint => (\r                <Collapse.Panel\r                  key={endpoint.id}\r                  header={\r                    <Space>\r                      <Tag color={endpoint.method === 'GET' ? 'green' : endpoint.method === 'POST' ? 'blue' : 'orange'}>\r                        {endpoint.method}\r                      </Tag>\r                      <Text strong>{endpoint.path}</Text>\r                      <Text type=\"secondary\">- {endpoint.description}</Text>\r                      {endpoint.deprecated && <Tag color=\"error\">Deprecated</Tag>}\r                    </Space>\r                  }\r                >\r                  <Descriptions column={1}>\r                    <Descriptions.Item label=\"Authentication\">\r                      {endpoint.authentication ? 'Required' : 'Not required'}\r                    </Descriptions.Item>\r                    {endpoint.rateLimit && (\r                      <Descriptions.Item label=\"Rate Limit\">\r                        {endpoint.rateLimit.requests} requests per {endpoint.rateLimit.period}\r                      </Descriptions.Item>\r                    )}\r                  </Descriptions>\r                  <Divider orientation=\"left\">Parameters</Divider>\r                  <Table\r                    dataSource={endpoint.parameters}\r                    columns={[\r                      { title: 'Name', dataIndex: 'name', key: 'name' },\r                      { title: 'Type', dataIndex: 'type', key: 'type' },\r                      {\r                        title: 'Required',\r                        dataIndex: 'required',\r                        key: 'required',\r                        render: (required) => required ? <Tag color=\"red\">Required</Tag> : <Tag>Optional</Tag>\r                      },\r                      { title: 'Description', dataIndex: 'description', key: 'description' }\r                    ]}\r                    pagination={false}\r                    size=\"small\"\r                  />\r                  <Divider orientation=\"left\">Responses</Divider>\r                  <List\r                    dataSource={endpoint.responses}\r                    renderItem={(response) => (\r                      <List.Item>\r                        <Tag color={response.status >= 200 && response.status < 300 ? 'success' : 'error'}>\r                          {response.status}\r                        </Tag>\r                        <Text>{response.description}</Text>\r                      </List.Item>\r                    )}\r                  />\r                </Collapse.Panel>\r              ))}\r            </Collapse>\r          </Card>\r        </TabPane>\r      </Tabs>\r      <Modal\r        title={selectedKey ? 'Edit API Key' : 'Generate New API Key'}\r        visible={keyModalVisible}\r        onCancel={() => setKeyModalVisible(false)}\r        footer={[\r          <Button key=\"cancel\" onClick={() => setKeyModalVisible(false)}>\r            Cancel\r          </Button>,\r          <Button\r            key=\"submit\"\r            type=\"primary\"\r            onClick={() => {\r              form.validateFields().then(values => {\r                if (selectedKey) {\r                  message.success('API key updated successfully');\r                } else {\r                  message.success('New API key generated successfully');\r                }\r                setKeyModalVisible(false);\r              });\r            }}\r          >\r            {selectedKey ? 'Update' : 'Generate'}\r          </Button>\r        ]}\r        width={600}\r      >\r        <Form form={form} layout=\"vertical\">\r          <Form.Item\r            name=\"name\"\r            label=\"Key Name\"\r            rules={[{ required: true, message: 'Please enter a key name' }]}\r          >\r            <Input placeholder=\"e.g., Production API Key\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item\r            name=\"environment\"\r            label=\"Environment\"\r            rules={[{ required: true, message: 'Please select an environment' }]}\r          >\r            <Select placeholder=\"Select environment\" aria-label=\"select field\">\r              <Option value=\"development\">Development</Option>\r              <Option value=\"staging\">Staging</Option>\r              <Option value=\"production\">Production</Option>\r            </Select>\r          </Form.Item>\r          <Form.Item\r            name=\"permissions\"\r            label=\"Permissions\"\r            rules={[{ required: true, message: 'Please select permissions' }]}\r          >\r            <Checkbox.Group>\r              <Row>\r                <Col span={8}>\r                  <Checkbox value=\"read\">Read</Checkbox>\r                </Col>\r                <Col span={8}>\r                  <Checkbox value=\"write\">Write</Checkbox>\r                </Col>\r                <Col span={8}>\r                  <Checkbox value=\"delete\">Delete</Checkbox>\r                </Col>\r              </Row>\r            </Checkbox.Group>\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"rateLimit\"\r                label=\"Rate Limit\"\r                rules={[{ required: true, message: 'Please enter rate limit' }]}\r              >\r                <InputNumber\r                  min={1}\r                  max={100000}\r                  style={{ width: '100%' }}\r                  placeholder=\"Requests\"\r                / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"ratePeriod\"\r                label=\"Period\"\r                rules={[{ required: true, message: 'Please select period' }]}\r              >\r                <Select placeholder=\"Select period\" aria-label=\"select field\">\r                  <Option value=\"second\">Per Second</Option>\r                  <Option value=\"minute\">Per Minute</Option>\r                  <Option value=\"hour\">Per Hour</Option>\r                  <Option value=\"day\">Per Day</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item\r            name=\"expiresAt\"\r            label=\"Expiration Date (Optional)\"\r          >\r            <DatePicker\r              style={{ width: '100%' }}\r              showTime\r              disabledDate={(current) => current && current < dayjs().endOf('day')}\r            />\r          </Form.Item>\r          <Form.Item\r            name=\"ipWhitelist\"\r            label=\"IP Whitelist (Optional)\"\r            extra=\"Enter one IP address or CIDR block per line\"\r          >\r            <TextArea\r              rows={3}\r              placeholder=\"192.168.1.0/24&#10;10.0.0.1\"\r            />\r          </Form.Item>\r        </Form>\r      </Modal>\r      <Modal\r        title={selectedWebhook ? 'Edit Webhook' : 'Add Webhook'}\r        visible={webhookModalVisible}\r        onCancel={() => setWebhookModalVisible(false)}\r        footer={[\r          <Button key=\"cancel\" onClick={() => setWebhookModalVisible(false)}>\r            Cancel\r          </Button>,\r          <Button\r            key=\"submit\"\r            type=\"primary\"\r            onClick={() => {\r              webhookForm.validateFields().then(values => {\r                if (selectedWebhook) {\r                  message.success('Webhook updated successfully');\r                } else {\r                  message.success('Webhook added successfully');\r                }\r                setWebhookModalVisible(false);\r              });\r            }}\r          >\r            {selectedWebhook ? 'Update' : 'Add'}\r          </Button>\r        ]}\r        width={600}\r      >\r        <Form form={webhookForm} layout=\"vertical\">\r          <Form.Item\r            name=\"name\"\r            label=\"Webhook Name\"\r            rules={[{ required: true, message: 'Please enter webhook name' }]}\r          >\r            <Input placeholder=\"e.g., Order Notifications\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item\r            name=\"url\"\r            label=\"Webhook URL\"\r            rules={[\r              { required: true, message: 'Please enter webhook URL' },\r              { type: 'url', message: 'Please enter a valid URL' }\r            ]}\r          >\r            <Input placeholder=\"https://api.example.com/webhook\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item\r            name=\"events\"\r            label=\"Events\"\r            rules={[{ required: true, message: 'Please select at least one event' }]}\r          >\r            <Select\r              mode=\"multiple\"\r              placeholder=\"Select events to trigger webhook\"\r             aria-label=\"select field\">\r              <Option value=\"order.created\">Order Created</Option>\r              <Option value=\"order.updated\">Order Updated</Option>\r              <Option value=\"order.cancelled\">Order Cancelled</Option>\r              <Option value=\"payment.success\">Payment Success</Option>\r              <Option value=\"payment.failed\">Payment Failed</Option>\r              <Option value=\"refund.processed\">Refund Processed</Option>\r              <Option value=\"product.updated\">Product Updated</Option>\r              <Option value=\"stock.low\">Stock Low</Option>\r              <Option value=\"stock.out\">Stock Out</Option>\r            </Select>\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"maxRetries\"\r                label=\"Max Retries\"\r                initialValue={3}\r              >\r                <InputNumber\r                  min={0}\r                  max={10}\r                  style={{ width: '100%' }}\r                / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"retryInterval\"\r                label=\"Retry Interval (seconds)\"\r                initialValue={60}\r              >\r                <InputNumber\r                  min={10}\r                  max={600}\r                  style={{ width: '100%' }}\r                / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r        </Form>\r      </Modal>\r    </div>\r  );\r};\rexport default ApiManagement;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/ApiManagement/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useCallback, useMemo } from 'react';\rimport {\r  Card,\r  Table,\r  Input,\r  Select,\r  DatePicker,\r  Button,\r  Tag,\r  Space,\r  Row,\r  Col,\r  Timeline,\r  Avatar,\r  Tooltip,\r  Badge,\r  Dropdown,\r  Checkbox,\r  Modal,\r  Typography,\r  Divider,\r  message,\r  Tabs,\r  Statistic,\r  Progress,\r  Empty,\r  Alert\r} from 'antd';\rimport {\r  SearchOutlined,\r  FilterOutlined,\r  ExportOutlined,\r  ReloadOutlined,\r  UserOutlined,\r  DesktopOutlined,\r  MobileOutlined,\r  TabletOutlined,\r  GlobalOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  InfoCircleOutlined,\r  WarningOutlined,\r  ClockCircleOutlined,\r  DownloadOutlined,\r  EyeOutlined,\r  DeleteOutlined,\r  SafetyOutlined,\r  ApiOutlined,\r  DatabaseOutlined,\r  FileTextOutlined,\r  SettingOutlined,\r  TeamOutlined,\r  KeyOutlined,\r  MailOutlined,\r  BellOutlined\r} from '@ant-design/icons';\rimport type { ColumnsType } from 'antd/es/table';\rimport dayjs from 'dayjs';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport { useRealtimeData } from '../../hooks/useRealtimeData';\rimport './auditLogs.css';\rconst { Search } = Input;\rconst { RangePicker } = DatePicker;\rconst { Option } = Select;\rconst { Text, Title, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rinterface AuditLog {\r  id: string;\r  timestamp: string;\r  user: {\r    id: string;\r    name: string;\r    email: string;\r    avatar?: string;\r    role: string;\r  };\r  tenant?: {\r    id: string;\r    name: string;\r  };\r  action: string;\r  category: 'auth' | 'user' | 'tenant' | 'system' | 'api' | 'data' | 'security' | 'billing';\r  severity: 'info' | 'warning' | 'error' | 'critical';\r  resource?: {\r    type: string;\r    id: string;\r    name: string;\r  };\r  details?: Record<string, any>;\r  ip: string;\r  userAgent: string;\r  device: 'desktop' | 'mobile' | 'tablet';\r  location?: {\r    country: string;\r    city: string;\r  };\r  duration?: number;\r  status: 'success' | 'failed' | 'pending';\r}\rconst mockLogs: AuditLog[] = Array.from({ length: 100 }, (_, i) => {\r  const categories = ['auth', 'user', 'tenant', 'system', 'api', 'data', 'security', 'billing'] as const;\r  const severities = ['info', 'warning', 'error', 'critical'] as const;\r  const devices = ['desktop', 'mobile', 'tablet'] as const;\r  const statuses = ['success', 'failed', 'pending'] as const;\r  return {\r    id: `LOG-${1000 + i}`,\r    timestamp: dayjs().subtract(Math.floor(Math.random() * 30), 'day').subtract(Math.floor(Math.random() * 24), 'hour').toISOString(),\r    user: {\r      id: `USER-${Math.floor(Math.random() * 10) + 1}`,\r      name: ['Ahmet Yılmaz', 'Mehmet Demir', 'Ayşe Kara', 'Fatma Şahin', 'Ali Öztürk'][Math.floor(Math.random() * 5)],\r      email: `user${Math.floor(Math.random() * 10) + 1}@example.com`,\r      avatar: Math.random() > 0.3 ? `https://i.pravatar.cc/150?img=${Math.floor(Math.random() * 70) + 1}` : undefined,\r      role: ['Admin', 'Manager', 'User', 'Developer'][Math.floor(Math.random() * 4)]\r    },\r    tenant: Math.random() > 0.3 ? {\r      id: `TENANT-${Math.floor(Math.random() * 5) + 1}`,\r      name: ['Teknoloji A.Ş.', 'Üretim Ltd.', 'Satış Tic.', 'Hizmet Ltd.'][Math.floor(Math.random() * 4)]\r    } : undefined,\r    action: [\r      'User Login', 'User Logout', 'Password Changed', 'Profile Updated',\r      'Tenant Created', 'Tenant Updated', 'Tenant Deleted',\r      'API Key Generated', 'API Key Revoked', 'API Call',\r      'Data Export', 'Data Import', 'Backup Created',\r      'Settings Changed', 'Role Assigned', 'Permission Updated'\r    ][Math.floor(Math.random() * 16)],\r    category: categories[Math.floor(Math.random() * categories.length)],\r    severity: severities[Math.floor(Math.random() * severities.length)],\r    resource: Math.random() > 0.5 ? {\r      type: ['User', 'Tenant', 'Product', 'Order', 'Invoice'][Math.floor(Math.random() * 5)],\r      id: `RES-${Math.floor(Math.random() * 100) + 1}`,\r      name: `Resource ${Math.floor(Math.random() * 100) + 1}`\r    } : undefined,\r    details: Math.random() > 0.7 ? {\r      oldValue: 'Old Value',\r      newValue: 'New Value',\r      reason: 'User requested change'\r    } : undefined,\r    ip: `192.168.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`,\r    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\r    device: devices[Math.floor(Math.random() * devices.length)],\r    location: Math.random() > 0.4 ? {\r      country: ['Türkiye', 'USA', 'Germany', 'UK'][Math.floor(Math.random() * 4)],\r      city: ['İstanbul', 'Ankara', 'İzmir', 'Bursa'][Math.floor(Math.random() * 4)]\r    } : undefined,\r    duration: Math.random() > 0.6 ? Math.floor(Math.random() * 5000) + 100 : undefined,\r    status: statuses[Math.floor(Math.random() * statuses.length)]\r  };\r});\rconst AuditLogs: React.FC = () => {\r  const [selectedLogs, setSelectedLogs] = useState<string[]>([]);\r  const [filters, setFilters] = useState({\r    search: '',\r    category: 'all',\r    severity: 'all',\r    status: 'all',\r    user: 'all',\r    tenant: 'all',\r    dateRange: [null, null] as [dayjs.Dayjs | null, dayjs.Dayjs | null]\r  });\r  const [viewMode, setViewMode] = useState<'table' | 'timeline'>('table');\r  const [detailsModal, setDetailsModal] = useState<{ visible: boolean; log: AuditLog | null }>({ \r    visible: false, \r    log: null \r  });\r  const [exportModal, setExportModal] = useState(false);\r  const [exportOptions, setExportOptions] = useState({\r    format: 'json',\r    includeDetails: true,\r    dateRange: true\r  });\r  const { data: logs, loading, refresh } = useRealtimeData(\r    async () => mockLogs,\r    { interval: 30000 }\r  );\r  const categoryIcons = {\r    auth: <KeyOutlined />,\r    user: <UserOutlined />,\r    tenant: <TeamOutlined />,\r    system: <SettingOutlined />,\r    api: <ApiOutlined />,\r    data: <DatabaseOutlined />,\r    security: <SafetyOutlined />,\r    billing: <FileTextOutlined />\r  };\r  const severityColors = {\r    info: 'blue',\r    warning: 'orange',\r    error: 'red',\r    critical: 'red'\r  };\r  const statusIcons = {\r    success: <CheckCircleOutlined style={{ color: '#52c41a' }} />,\r    failed: <CloseCircleOutlined style={{ color: '#ff4d4f' }} />,\r    pending: <ClockCircleOutlined style={{ color: '#faad14' }} />\r  };\r  const deviceIcons = {\r    desktop: <DesktopOutlined />,\r    mobile: <MobileOutlined />,\r    tablet: <TabletOutlined />\r  };\r  const filteredLogs = useMemo(() => {\r    if (!logs) return [];\r    return logs.filter(log => {\r      if (filters.search && !log.action.toLowerCase().includes(filters.search.toLowerCase()) &&\r          !log.user.name.toLowerCase().includes(filters.search.toLowerCase()) &&\r          !log.user.email.toLowerCase().includes(filters.search.toLowerCase())) {\r        return false;\r      }\r      if (filters.category !== 'all' && log.category !== filters.category) return false;\r      if (filters.severity !== 'all' && log.severity !== filters.severity) return false;\r      if (filters.status !== 'all' && log.status !== filters.status) return false;\r      if (filters.user !== 'all' && log.user.id !== filters.user) return false;\r      if (filters.tenant !== 'all' && log.tenant?.id !== filters.tenant) return false;\r      if (filters.dateRange[0] && filters.dateRange[1]) {\r        const logDate = dayjs(log.timestamp);\r        if (!logDate.isAfter(filters.dateRange[0]) || !logDate.isBefore(filters.dateRange[1])) {\r          return false;\r        }\r      }\r      return true;\r    });\r  }, [logs, filters]);\r  const statistics = useMemo(() => {\r    if (!filteredLogs) return null;\r    const total = filteredLogs.length;\r    const byCategory = filteredLogs.reduce((acc, log) => {\r      acc[log.category] = (acc[log.category] || 0) + 1;\r      return acc;\r    }, {} as Record<string, number>);\r    const bySeverity = filteredLogs.reduce((acc, log) => {\r      acc[log.severity] = (acc[log.severity] || 0) + 1;\r      return acc;\r    }, {} as Record<string, number>);\r    const failedCount = filteredLogs.filter(log => log.status === 'failed').length;\r    const successRate = total > 0 ? ((total - failedCount) / total * 100).toFixed(1) : 0;\r    return { total, byCategory, bySeverity, failedCount, successRate };\r  }, [filteredLogs]);\r  const handleExport = useCallback(() => {\r    const dataToExport = selectedLogs.length > 0 \r      ? filteredLogs.filter(log => selectedLogs.includes(log.id))\r      : filteredLogs;\r    let content = '';\r    const filename = `audit-logs-${dayjs().format('YYYY-MM-DD-HHmmss')}`;\r    if (exportOptions.format === 'json') {\r      content = JSON.stringify(dataToExport, null, 2);\r    } else if (exportOptions.format === 'csv') {\r      const headers = ['ID', 'Timestamp', 'User', 'Action', 'Category', 'Severity', 'Status', 'IP', 'Device'];\r      const rows = dataToExport.map(log => [\r        log.id,\r        log.timestamp,\r        log.user.name,\r        log.action,\r        log.category,\r        log.severity,\r        log.status,\r        log.ip,\r        log.device\r      ]);\r      content = [headers, ...rows].map(row => row.join(',')).join('\\n');\r    }\r    const blob = new Blob([content], { type: 'text/plain' });\r    const url = URL.createObjectURL(blob);\r    const link = document.createElement('a');\r    link.href = url;\r    link.download = `${filename}.${exportOptions.format}`;\r    link.click();\r    URL.revokeObjectURL(url);\r    message.success(`${dataToExport.length} logs exported successfully`);\r    setExportModal(false);\r  }, [filteredLogs, selectedLogs, exportOptions]);\r  const columns: ColumnsType<AuditLog> = [\r    {\r      title: () => (\r        <Checkbox\r          indeterminate={selectedLogs.length > 0 && selectedLogs.length < filteredLogs.length}\r          checked={selectedLogs.length === filteredLogs.length && filteredLogs.length > 0}\r          onChange={e => {\r            setSelectedLogs(e.target.checked ? filteredLogs.map(log => log.id) : []);\r          }}\r        />\r      ),\r      key: 'select',\r      width: 50,\r      fixed: 'left',\r      render: (_, record) => (\r        <Checkbox\r          checked={selectedLogs.includes(record.id)}\r          onChange={e => {\r            setSelectedLogs(prev => \r              e.target.checked \r                ? [...prev, record.id]\r                : prev.filter(id => id !== record.id)\r            );\r          }}\r        />\r      )\r    },\r    {\r      title: 'Timestamp',\r      key: 'timestamp',\r      width: 180,\r      render: (_, record) => (\r        <Space direction=\"vertical\" size={0}>\r          <Text strong>{dayjs(record.timestamp).format('DD/MM/YYYY')}</Text>\r          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r            {dayjs(record.timestamp).format('HH:mm:ss')}\r          </Text>\r        </Space>\r      ),\r      sorter: (a, b) => dayjs(a.timestamp).unix() - dayjs(b.timestamp).unix()\r    },\r    {\r      title: 'User',\r      key: 'user',\r      width: 200,\r      render: (_, record) => (\r        <Space>\r          <Avatar src={record.user.avatar} icon={<UserOutlined />} size=\"small\" />\r          <Space direction=\"vertical\" size={0}>\r            <Text strong>{record.user.name}</Text>\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>{record.user.role}</Text>\r          </Space>\r        </Space>\r      )\r    },\r    {\r      title: 'Action',\r      key: 'action',\r      width: 200,\r      render: (_, record) => (\r        <Space direction=\"vertical\" size={0}>\r          <Space>\r            {categoryIcons[record.category]}\r            <Text strong>{record.action}</Text>\r          </Space>\r          {record.resource && (\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {record.resource.type}: {record.resource.name}\r            </Text>\r          )}\r        </Space>\r      )\r    },\r    {\r      title: 'Category',\r      key: 'category',\r      width: 120,\r      render: (_, record) => (\r        <Tag color={severityColors[record.severity]}>\r          {record.category.toUpperCase()}\r        </Tag>\r      ),\r      filters: ['auth', 'user', 'tenant', 'system', 'api', 'data', 'security', 'billing'].map(cat => ({\r        text: cat.toUpperCase(),\r        value: cat\r      })),\r      onFilter: (value, record) => record.category === value\r    },\r    {\r      title: 'Severity',\r      key: 'severity',\r      width: 100,\r      render: (_, record) => {\r        const icons = {\r          info: <InfoCircleOutlined />,\r          warning: <WarningOutlined />,\r          error: <CloseCircleOutlined />,\r          critical: <CloseCircleOutlined />\r        };\r        return (\r          <Tag icon={icons[record.severity]} color={severityColors[record.severity]}>\r            {record.severity.toUpperCase()}\r          </Tag>\r        );\r      }\r    },\r    {\r      title: 'Status',\r      key: 'status',\r      width: 100,\r      render: (_, record) => (\r        <Space>\r          {statusIcons[record.status]}\r          <Text>{record.status}</Text>\r        </Space>\r      )\r    },\r    {\r      title: 'Location',\r      key: 'location',\r      width: 150,\r      render: (_, record) => (\r        <Space>\r          {deviceIcons[record.device]}\r          {record.location ? (\r            <Tooltip title={`${record.location.city}, ${record.location.country}`}>\r              <Space size={4}>\r                <GlobalOutlined />\r                <Text type=\"secondary\">{record.location.city}</Text>\r              </Space>\r            </Tooltip>\r          ) : (\r            <Text type=\"secondary\">{record.ip}</Text>\r          )}\r        </Space>\r      )\r    },\r    {\r      title: 'Actions',\r      key: 'actions',\r      width: 100,\r      fixed: 'right',\r      render: (_, record) => (\r        <Space>\r          <Tooltip title=\"View Details\">\r            <Button\r              type=\"text\"\r              icon={<EyeOutlined />}\r              onClick={() = aria-label=\"eye outlined\"> setDetailsModal({ visible: true, log: record })}\r            />\r          </Tooltip>\r          {record.details && (\r            <Tooltip title=\"Has Additional Data\">\r              <InfoCircleOutlined style={{ color: '#1890ff' }} />\r            </Tooltip>\r          )}\r        </Space>\r      )\r    }\r  ];\r  const renderTimeline = () => {\r    const groupedLogs = filteredLogs.reduce((acc, log) => {\r      const date = dayjs(log.timestamp).format('YYYY-MM-DD');\r      if (!acc[date]) acc[date] = [];\r      acc[date].push(log);\r      return acc;\r    }, {} as Record<string, AuditLog[]>);\r    return (\r      <div className=\"audit-timeline\">\r        {Object.entries(groupedLogs).map(([date, logs]) => (\r          <div key={date} className=\"timeline-section\">\r            <Title level={5} style={{ marginBottom: 16 }}>\r              {dayjs(date).format('DD MMMM YYYY')}\r            </Title>\r            <Timeline mode=\"left\">\r              {logs.map(log => (\r                <Timeline.Item\r                  key={log.id}\r                  dot={statusIcons[log.status]}\r                  color={severityColors[log.severity]}\r                >\r                  <Card \r                    size=\"small\" \r                    className=\"timeline-card\"\r                    onClick={() => setDetailsModal({ visible: true, log })}\r                    hoverable\r                  >\r                    <Space direction=\"vertical\" style={{ width: '100%' }}>\r                      <Space style={{ width: '100%', justifyContent: 'space-between' }}>\r                        <Space>\r                          <Avatar src={log.user.avatar} icon={<UserOutlined />} size=\"small\" />\r                          <Text strong>{log.user.name}</Text>\r                        </Space>\r                        <Text type=\"secondary\">{dayjs(log.timestamp).format('HH:mm:ss')}</Text>\r                      </Space>\r                      <Space>\r                        {categoryIcons[log.category]}\r                        <Text>{log.action}</Text>\r                      </Space>\r                      {log.resource && (\r                        <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                          {log.resource.type}: {log.resource.name}\r                        </Text>\r                      )}\r                      <Space>\r                        <Tag color={severityColors[log.severity]} style={{ margin: 0 }}>\r                          {log.severity.toUpperCase()}\r                        </Tag>\r                        {log.tenant && (\r                          <Tag color=\"blue\" style={{ margin: 0 }}>\r                            {log.tenant.name}\r                          </Tag>\r                        )}\r                      </Space>\r                    </Space>\r                  </Card>\r                </Timeline.Item>\r              ))}\r            </Timeline>\r          </div>\r        ))}\r      </div>\r    );\r  };\r  return (\r    <div className=\"audit-logs-page\">\r      <Row gutter={[16, 16]}>\r        <Col span={24}>\r          <Card className=\"stats-card\">\r            <Row gutter={16}>\r              <Col xs={24} sm={12} md={6}>\r                <Statistic\r                  title=\"Total Logs\"\r                  value={statistics?.total || 0}\r                  prefix={<FileTextOutlined />}\r                />\r              </Col>\r              <Col xs={24} sm={12} md={6}>\r                <Statistic\r                  title=\"Failed Actions\"\r                  value={statistics?.failedCount || 0}\r                  valueStyle={{ color: '#ff4d4f' }}\r                  prefix={<CloseCircleOutlined />}\r                />\r              </Col>\r              <Col xs={24} sm={12} md={6}>\r                <Statistic\r                  title=\"Success Rate\"\r                  value={statistics?.successRate || 0}\r                  suffix=\"%\"\r                  valueStyle={{ color: '#52c41a' }}\r                  prefix={<CheckCircleOutlined />}\r                />\r              </Col>\r              <Col xs={24} sm={12} md={6}>\r                <div className=\"category-distribution\">\r                  <Text type=\"secondary\">Category Distribution</Text>\r                  <div style={{ marginTop: 8 }}>\r                    {statistics?.byCategory && Object.entries(statistics.byCategory).map(([cat, count]) => (\r                      <Tag key={cat} style={{ marginBottom: 4 }}>\r                        {cat}: {count}\r                      </Tag>\r                    ))}\r                  </div>\r                </div>\r              </Col>\r            </Row>\r          </Card>\r        </Col>\r        <Col span={24}>\r          <Card>\r            <Space style={{ width: '100%', justifyContent: 'space-between', marginBottom: 16 }} wrap>\r              <Space wrap>\r                <Search\r                  placeholder=\"Search logs...\"\r                  style={{ width: 250 }}\r                  value={filters.search}\r                  onChange={e => setFilters(prev => ({ ...prev, search: e.target.value }))}\r                  prefix={<SearchOutlined />}\r                  allowClear\r                />\r                <Select\r                  style={{ width: 150 }}\r                  value={filters.category}\r                  onChange={value = aria-label=\"select field\"> setFilters(prev => ({ ...prev, category: value }))}\r                  placeholder=\"Category\"\r                >\r                  <Option value=\"all\">All Categories</Option>\r                  {['auth', 'user', 'tenant', 'system', 'api', 'data', 'security', 'billing'].map(cat => (\r                    <Option key={cat} value={cat}>\r                      {cat.charAt(0).toUpperCase() + cat.slice(1)}\r                    </Option>\r                  ))}\r                </Select>\r                <Select\r                  style={{ width: 130 }}\r                  value={filters.severity}\r                  onChange={value = aria-label=\"select field\"> setFilters(prev => ({ ...prev, severity: value }))}\r                  placeholder=\"Severity\"\r                >\r                  <Option value=\"all\">All Severity</Option>\r                  {['info', 'warning', 'error', 'critical'].map(sev => (\r                    <Option key={sev} value={sev}>\r                      {sev.charAt(0).toUpperCase() + sev.slice(1)}\r                    </Option>\r                  ))}\r                </Select>\r                <Select\r                  style={{ width: 120 }}\r                  value={filters.status}\r                  onChange={value = aria-label=\"select field\"> setFilters(prev => ({ ...prev, status: value }))}\r                  placeholder=\"Status\"\r                >\r                  <Option value=\"all\">All Status</Option>\r                  <Option value=\"success\">Success</Option>\r                  <Option value=\"failed\">Failed</Option>\r                  <Option value=\"pending\">Pending</Option>\r                </Select>\r                <RangePicker\r                  value={filters.dateRange}\r                  onChange={dates => setFilters(prev => ({ ...prev, dateRange: dates as any }))}\r                  format=\"DD/MM/YYYY\"\r                />\r              </Space>\r              <Space>\r                <Button.Group>\r                  <Button\r                    type={viewMode === 'table' ? 'primary' : 'default'}\r                    onClick={() => setViewMode('table')}\r                  >\r                    Table\r                  </Button>\r                  <Button\r                    type={viewMode === 'timeline' ? 'primary' : 'default'}\r                    onClick={() => setViewMode('timeline')}\r                  >\r                    Timeline\r                  </Button>\r                </Button.Group>\r                {selectedLogs.length > 0 && (\r                  <Badge count={selectedLogs.length} offset={[-5, 5]}>\r                    <Button icon={<DeleteOutlined />} danger aria-label=\"delete outlined\">\r                      Delete Selected\r                    </Button>\r                  </Badge>\r                )}\r                <Button\r                  icon={<ExportOutlined />}\r                  onClick={() = aria-label=\"export outlined\"> setExportModal(true)}\r                >\r                  Export\r                </Button>\r                <Button\r                  icon={<ReloadOutlined />}\r                  onClick={refresh}\r                  loading={loading}\r                 aria-label=\"reload outlined\">\r                  Refresh\r                </Button>\r              </Space>\r            </Space>\r            <AnimatePresence mode=\"wait\">\r              {viewMode === 'table' ? (\r                <motion.div\r                  key=\"table\"\r                  initial={{ opacity: 0, y: 20 }}\r                  animate={{ opacity: 1, y: 0 }}\r                  exit={{ opacity: 0, y: -20 }}\r                >\r                  <Table\r                    columns={columns}\r                    dataSource={filteredLogs}\r                    loading={loading}\r                    rowKey=\"id\"\r                    scroll={{ x: 1500 }}\r                    pagination={{\r                      showSizeChanger: true,\r                      showQuickJumper: true,\r                      showTotal: (total) => `Total ${total} logs`,\r                      defaultPageSize: 20\r                    }}\r                  />\r                </motion.div>\r              ) : (\r                <motion.div\r                  key=\"timeline\"\r                  initial={{ opacity: 0, y: 20 }}\r                  animate={{ opacity: 1, y: 0 }}\r                  exit={{ opacity: 0, y: -20 }}\r                >\r                  {renderTimeline()}\r                </motion.div>\r              )}\r            </AnimatePresence>\r          </Card>\r        </Col>\r      </Row>\r      <Modal\r        title=\"Log Details\"\r        visible={detailsModal.visible}\r        onCancel={() => setDetailsModal({ visible: false, log: null })}\r        footer={null}\r        width={700}\r      >\r        {detailsModal.log && (\r          <div className=\"log-details\">\r            <Descriptions bordered column={2}>\r              <Descriptions.Item label=\"Log ID\" span={2}>\r                <Text copyable>{detailsModal.log.id}</Text>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Timestamp\" span={2}>\r                {dayjs(detailsModal.log.timestamp).format('DD/MM/YYYY HH:mm:ss')}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"User\">\r                <Space>\r                  <Avatar src={detailsModal.log.user.avatar} icon={<UserOutlined />} />\r                  {detailsModal.log.user.name}\r                </Space>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Email\">\r                {detailsModal.log.user.email}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Role\">\r                {detailsModal.log.user.role}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Tenant\">\r                {detailsModal.log.tenant?.name || 'N/A'}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Action\" span={2}>\r                <Space>\r                  {categoryIcons[detailsModal.log.category]}\r                  {detailsModal.log.action}\r                </Space>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Category\">\r                <Tag color={severityColors[detailsModal.log.severity]}>\r                  {detailsModal.log.category.toUpperCase()}\r                </Tag>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Severity\">\r                <Tag color={severityColors[detailsModal.log.severity]}>\r                  {detailsModal.log.severity.toUpperCase()}\r                </Tag>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Status\">\r                <Space>\r                  {statusIcons[detailsModal.log.status]}\r                  {detailsModal.log.status}\r                </Space>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Duration\">\r                {detailsModal.log.duration ? `${detailsModal.log.duration}ms` : 'N/A'}\r              </Descriptions.Item>\r              {detailsModal.log.resource && (\r                <>\r                  <Descriptions.Item label=\"Resource Type\">\r                    {detailsModal.log.resource.type}\r                  </Descriptions.Item>\r                  <Descriptions.Item label=\"Resource ID\">\r                    {detailsModal.log.resource.id}\r                  </Descriptions.Item>\r                </>\r              )}\r              <Descriptions.Item label=\"IP Address\">\r                {detailsModal.log.ip}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Device\">\r                <Space>\r                  {deviceIcons[detailsModal.log.device]}\r                  {detailsModal.log.device}\r                </Space>\r              </Descriptions.Item>\r              {detailsModal.log.location && (\r                <Descriptions.Item label=\"Location\" span={2}>\r                  <Space>\r                    <GlobalOutlined />\r                    {detailsModal.log.location.city}, {detailsModal.log.location.country}\r                  </Space>\r                </Descriptions.Item>\r              )}\r              <Descriptions.Item label=\"User Agent\" span={2}>\r                <Text style={{ fontSize: 12 }}>{detailsModal.log.userAgent}</Text>\r              </Descriptions.Item>\r            </Descriptions>\r            {detailsModal.log.details && (\r              <>\r                <Divider>Additional Details</Divider>\r                <pre style={{ background: '#f5f5f5', padding: 12, borderRadius: 4 }}>\r                  {JSON.stringify(detailsModal.log.details, null, 2)}\r                </pre>\r              </>\r            )}\r          </div>\r        )}\r      </Modal>\r      <Modal\r        title=\"Export Logs\"\r        visible={exportModal}\r        onOk={handleExport}\r        onCancel={() => setExportModal(false)}\r      >\r        <Space direction=\"vertical\" style={{ width: '100%' }}>\r          <div>\r            <Text strong>Export Format:</Text>\r            <Select\r              style={{ width: '100%', marginTop: 8 }}\r              value={exportOptions.format}\r              onChange={value = aria-label=\"select field\"> setExportOptions(prev => ({ ...prev, format: value }))}\r            >\r              <Option value=\"json\">JSON</Option>\r              <Option value=\"csv\">CSV</Option>\r            </Select>\r          </div>\r          <div>\r            <Checkbox\r              checked={exportOptions.includeDetails}\r              onChange={e => setExportOptions(prev => ({ ...prev, includeDetails: e.target.checked }))}\r            >\r              Include detailed information\r            </Checkbox>\r          </div>\r          <div>\r            <Checkbox\r              checked={exportOptions.dateRange}\r              onChange={e => setExportOptions(prev => ({ ...prev, dateRange: e.target.checked }))}\r            >\r              Apply current date range filter\r            </Checkbox>\r          </div>\r          {selectedLogs.length > 0 && (\r            <Alert\r              message={`${selectedLogs.length} logs selected for export`}\r              type=\"info\"\r              showIcon\r            />\r          )}\r        </Space>\r      </Modal>\r    </div>\r  );\r};\rexport default AuditLogs;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/AuditLogs/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Box,\r  Card,\r  CardContent,\r  Typography,\r  Button,\r  Grid,\r  List,\r  ListItem,\r  ListItemText,\r  ListItemIcon,\r  ListItemSecondaryAction,\r  IconButton,\r  Dialog,\r  DialogTitle,\r  DialogContent,\r  DialogActions,\r  TextField,\r  Select,\r  MenuItem,\r  FormControl,\r  InputLabel,\r  Alert,\r  CircularProgress,\r  Chip,\r  LinearProgress,\r  Paper,\r  Divider,\r  Tooltip,\r  Switch,\r  FormControlLabel,\r  Tab,\r  Tabs,\r  Badge,\r  Collapse,\r  Accordion,\r  AccordionSummary,\r  AccordionDetails,\r  SelectChangeEvent,\r  Table,\r  TableBody,\r  TableCell,\r  TableContainer,\r  TableHead,\r  TableRow,\r  TablePagination\r} from '@mui/material';\rimport {\r  Backup as BackupIcon,\r  Restore as RestoreIcon,\r  CloudUpload as CloudUploadIcon,\r  CloudDownload as CloudDownloadIcon,\r  Schedule as ScheduleIcon,\r  Delete as DeleteIcon,\r  Download as DownloadIcon,\r  Visibility as VisibilityIcon,\r  Settings as SettingsIcon,\r  Storage as StorageIcon,\r  CloudQueue as CloudIcon,\r  Check as CheckIcon,\r  Error as ErrorIcon,\r  Warning as WarningIcon,\r  Info as InfoIcon,\r  History as HistoryIcon,\r  PlayArrow as PlayIcon,\r  Stop as StopIcon,\r  ExpandMore as ExpandMoreIcon,\r  Folder as FolderIcon,\r  DataUsage as DataUsageIcon,\r  Timer as TimerIcon,\r  Security as SecurityIcon\r} from '@mui/icons-material';\rimport { useTheme } from '@mui/material/styles';\rimport { format, parseISO } from 'date-fns';\rimport { tr } from 'date-fns/locale';\rinterface BackupItem {\r  id: string;\r  name: string;\r  createdAt: string;\r  size: number;\r  type: 'full' | 'incremental' | 'differential';\r  status: 'completed' | 'in_progress' | 'failed' | 'pending';\r  location: 'local' | 'cloud' | 'external';\r  databases: string[];\r  encrypted: boolean;\r  compressed: boolean;\r  retention: number;\r  description?: string;\r  error?: string;\r}\rinterface BackupSchedule {\r  id: string;\r  name: string;\r  type: 'daily' | 'weekly' | 'monthly' | 'custom';\r  time: string;\r  enabled: boolean;\r  lastRun?: string;\r  nextRun: string;\r  backupType: 'full' | 'incremental' | 'differential';\r  retention: number;\r  databases: string[];\r  notifications: boolean;\r}\rinterface RestorePoint {\r  id: string;\r  backupId: string;\r  name: string;\r  timestamp: string;\r  databases: string[];\r  status: 'available' | 'restoring' | 'restored';\r  size: number;\r}\rinterface TabPanelProps {\r  children?: React.ReactNode;\r  index: number;\r  value: number;\r}\rfunction TabPanel(props: TabPanelProps) {\r  const { children, value, index, ...other } = props;\r  return (\r    <div role=\"tabpanel\" hidden={value !== index} {...other}>\r      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r    </div>\r  );\r}\rconst BackupManagement: React.FC = () => {\r  const theme = useTheme();\r  const [tabValue, setTabValue] = useState(0);\r  const [backups, setBackups] = useState<BackupItem[]>([]);\r  const [schedules, setSchedules] = useState<BackupSchedule[]>([]);\r  const [restorePoints, setRestorePoints] = useState<RestorePoint[]>([]);\r  const [loading, setLoading] = useState(false);\r  const [backupInProgress, setBackupInProgress] = useState(false);\r  const [selectedBackup, setSelectedBackup] = useState<BackupItem | null>(null);\r  const [openBackupDialog, setOpenBackupDialog] = useState(false);\r  const [openRestoreDialog, setOpenRestoreDialog] = useState(false);\r  const [openScheduleDialog, setOpenScheduleDialog] = useState(false);\r  const [openSettingsDialog, setOpenSettingsDialog] = useState(false);\r  const [page, setPage] = useState(0);\r  const [rowsPerPage, setRowsPerPage] = useState(10);\r  const [backupForm, setBackupForm] = useState({\r    name: '',\r    type: 'full' as 'full' | 'incremental' | 'differential',\r    databases: [] as string[],\r    location: 'local' as 'local' | 'cloud' | 'external',\r    encrypted: true,\r    compressed: true,\r    retention: 30,\r    description: ''\r  });\r  const [scheduleForm, setScheduleForm] = useState({\r    name: '',\r    type: 'daily' as 'daily' | 'weekly' | 'monthly' | 'custom',\r    time: '02:00',\r    enabled: true,\r    backupType: 'full' as 'full' | 'incremental' | 'differential',\r    retention: 30,\r    databases: [] as string[],\r    notifications: true\r  });\r  const [backupSettings, setBackupSettings] = useState({\r    autoBackup: true,\r    compressionLevel: 'medium',\r    encryptionMethod: 'AES-256',\r    maxBackupSize: 10,\r    cloudProvider: 'azure',\r    notificationEmail: 'admin@stocker.com',\r    retentionPolicy: 'tiered'\r  });\r  useEffect(() => {\r    loadBackups();\r    loadSchedules();\r    loadRestorePoints();\r  }, []);\r  const loadBackups = () => {\r    setLoading(true);\r    const mockBackups: BackupItem[] = [\r      {\r        id: '1',\r        name: 'Full Backup - 2024-01-15',\r        createdAt: '2024-01-15T03:00:00Z',\r        size: 2147483648,\r        type: 'full',\r        status: 'completed',\r        location: 'cloud',\r        databases: ['master', 'tenant_db_1', 'tenant_db_2'],\r        encrypted: true,\r        compressed: true,\r        retention: 30,\r        description: 'Scheduled full backup'\r      },\r      {\r        id: '2',\r        name: 'Incremental Backup - 2024-01-14',\r        createdAt: '2024-01-14T15:30:00Z',\r        size: 536870912,\r        type: 'incremental',\r        status: 'completed',\r        location: 'local',\r        databases: ['master'],\r        encrypted: true,\r        compressed: true,\r        retention: 7\r      },\r      {\r        id: '3',\r        name: 'Emergency Backup',\r        createdAt: '2024-01-14T10:00:00Z',\r        size: 1073741824,\r        type: 'full',\r        status: 'failed',\r        location: 'external',\r        databases: ['tenant_db_3'],\r        encrypted: false,\r        compressed: true,\r        retention: 90,\r        error: 'Storage connection timeout'\r      }\r    ];\r    setBackups(mockBackups);\r    setLoading(false);\r  };\r  const loadSchedules = () => {\r    const mockSchedules: BackupSchedule[] = [\r      {\r        id: '1',\r        name: 'Daily Full Backup',\r        type: 'daily',\r        time: '02:00',\r        enabled: true,\r        lastRun: '2024-01-14T02:00:00Z',\r        nextRun: '2024-01-15T02:00:00Z',\r        backupType: 'full',\r        retention: 30,\r        databases: ['master', 'all_tenants'],\r        notifications: true\r      },\r      {\r        id: '2',\r        name: 'Weekly Incremental',\r        type: 'weekly',\r        time: '03:00',\r        enabled: true,\r        nextRun: '2024-01-21T03:00:00Z',\r        backupType: 'incremental',\r        retention: 14,\r        databases: ['master'],\r        notifications: false\r      }\r    ];\r    setSchedules(mockSchedules);\r  };\r  const loadRestorePoints = () => {\r    const mockRestorePoints: RestorePoint[] = [\r      {\r        id: '1',\r        backupId: '1',\r        name: 'Restore Point - 2024-01-15',\r        timestamp: '2024-01-15T03:00:00Z',\r        databases: ['master', 'tenant_db_1'],\r        status: 'available',\r        size: 2147483648\r      },\r      {\r        id: '2',\r        backupId: '2',\r        name: 'Restore Point - 2024-01-14',\r        timestamp: '2024-01-14T15:30:00Z',\r        databases: ['master'],\r        status: 'available',\r        size: 536870912\r      }\r    ];\r    setRestorePoints(mockRestorePoints);\r  };\r  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {\r    setTabValue(newValue);\r  };\r  const handleCreateBackup = () => {\r    setBackupInProgress(true);\r    setTimeout(() => {\r      setBackupInProgress(false);\r      setOpenBackupDialog(false);\r      loadBackups();\r    }, 3000);\r  };\r  const handleRestore = (backup: BackupItem) => {\r    setSelectedBackup(backup);\r    setOpenRestoreDialog(true);\r  };\r  const handleDeleteBackup = (id: string) => {\r    setBackups(backups.filter(b => b.id !== id));\r  };\r  const formatFileSize = (bytes: number) => {\r    if (bytes === 0) return '0 Bytes';\r    const k = 1024;\r    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r    const i = Math.floor(Math.log(bytes) / Math.log(k));\r    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r  };\r  const getStatusColor = (status: string) => {\r    switch (status) {\r      case 'completed':\r      case 'available':\r      case 'restored':\r        return 'success';\r      case 'in_progress':\r      case 'restoring':\r        return 'warning';\r      case 'failed':\r        return 'error';\r      default:\r        return 'default';\r    }\r  };\r  const getLocationIcon = (location: string) => {\r    switch (location) {\r      case 'cloud':\r        return <CloudIcon />;\r      case 'local':\r        return <StorageIcon />;\r      case 'external':\r        return <FolderIcon />;\r      default:\r        return <StorageIcon />;\r    }\r  };\r  return (\r    <Box>\r      <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r        <Typography variant=\"h4\" fontWeight=\"bold\">\r          Backup ve Restore Yönetimi\r        </Typography>\r        <Box sx={{ display: 'flex', gap: 2 }}>\r          <Button\r            variant=\"outlined\"\r            startIcon={<SettingsIcon />}\r            onClick={() => setOpenSettingsDialog(true)}\r          >\r            Ayarlar\r          </Button>\r          <Button\r            variant=\"contained\"\r            startIcon={<BackupIcon />}\r            onClick={() => setOpenBackupDialog(true)}\r            disabled={backupInProgress}\r          >\r            Yeni Backup\r          </Button>\r        </Box>\r      </Box>\r      <Paper elevation={0} sx={{ mb: 3 }}>\r        <Grid container spacing={3}>\r          <Grid item xs={12} md={3}>\r            <Card>\r              <CardContent>\r                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r                  <StorageIcon sx={{ mr: 2, color: theme.palette.primary.main }} />\r                  <Typography variant=\"h6\">Toplam Backup</Typography>\r                </Box>\r                <Typography variant=\"h3\" fontWeight=\"bold\">\r                  {backups.length}\r                </Typography>\r                <Typography color=\"text.secondary\" variant=\"body2\">\r                  {backups.filter(b => b.status === 'completed').length} başarılı\r                </Typography>\r              </CardContent>\r            </Card>\r          </Grid>\r          <Grid item xs={12} md={3}>\r            <Card>\r              <CardContent>\r                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r                  <DataUsageIcon sx={{ mr: 2, color: theme.palette.warning.main }} />\r                  <Typography variant=\"h6\">Toplam Boyut</Typography>\r                </Box>\r                <Typography variant=\"h3\" fontWeight=\"bold\">\r                  {formatFileSize(backups.reduce((acc, b) => acc + b.size, 0))}\r                </Typography>\r                <Typography color=\"text.secondary\" variant=\"body2\">\r                  {backups.filter(b => b.location === 'cloud').length} bulutta\r                </Typography>\r              </CardContent>\r            </Card>\r          </Grid>\r          <Grid item xs={12} md={3}>\r            <Card>\r              <CardContent>\r                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r                  <ScheduleIcon sx={{ mr: 2, color: theme.palette.success.main }} />\r                  <Typography variant=\"h6\">Zamanlanmış</Typography>\r                </Box>\r                <Typography variant=\"h3\" fontWeight=\"bold\">\r                  {schedules.filter(s => s.enabled).length}\r                </Typography>\r                <Typography color=\"text.secondary\" variant=\"body2\">\r                  {schedules.length} toplam zamanlama\r                </Typography>\r              </CardContent>\r            </Card>\r          </Grid>\r          <Grid item xs={12} md={3}>\r            <Card>\r              <CardContent>\r                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r                  <RestoreIcon sx={{ mr: 2, color: theme.palette.info.main }} />\r                  <Typography variant=\"h6\">Restore Point</Typography>\r                </Box>\r                <Typography variant=\"h3\" fontWeight=\"bold\">\r                  {restorePoints.length}\r                </Typography>\r                <Typography color=\"text.secondary\" variant=\"body2\">\r                  {restorePoints.filter(r => r.status === 'available').length} kullanılabilir\r                </Typography>\r              </CardContent>\r            </Card>\r          </Grid>\r        </Grid>\r      </Paper>\r      <Paper>\r        <Tabs value={tabValue} onChange={handleTabChange} sx={{ borderBottom: 1, borderColor: 'divider' }}>\r          <Tab icon={<BackupIcon />} label=\"Backup Listesi\" />\r          <Tab icon={<ScheduleIcon />} label=\"Zamanlamalar\" />\r          <Tab icon={<RestoreIcon />} label=\"Restore Points\" />\r          <Tab icon={<HistoryIcon />} label=\"Geçmiş\" />\r        </Tabs>\r        <TabPanel value={tabValue} index={0}>\r          {loading ? (\r            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\r              <CircularProgress />\r            </Box>\r          ) : (\r            <>\r              <TableContainer>\r                <Table>\r                  <TableHead>\r                    <TableRow>\r                      <TableCell>Backup Adı</TableCell>\r                      <TableCell>Tür</TableCell>\r                      <TableCell>Durum</TableCell>\r                      <TableCell>Boyut</TableCell>\r                      <TableCell>Konum</TableCell>\r                      <TableCell>Oluşturulma</TableCell>\r                      <TableCell>Özellikler</TableCell>\r                      <TableCell align=\"right\">İşlemler</TableCell>\r                    </TableRow>\r                  </TableHead>\r                  <TableBody>\r                    {backups\r                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r                      .map((backup) => (\r                        <TableRow key={backup.id}>\r                          <TableCell>\r                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r                              <BackupIcon sx={{ mr: 2, color: 'text.secondary' }} />\r                              <Box>\r                                <Typography variant=\"body1\">{backup.name}</Typography>\r                                {backup.description && (\r                                  <Typography variant=\"caption\" color=\"text.secondary\">\r                                    {backup.description}\r                                  </Typography>\r                                )}\r                              </Box>\r                            </Box>\r                          </TableCell>\r                          <TableCell>\r                            <Chip\r                              label={backup.type}\r                              size=\"small\"\r                              variant=\"outlined\"\r                            />\r                          </TableCell>\r                          <TableCell>\r                            <Chip\r                              label={backup.status}\r                              color={getStatusColor(backup.status) as any}\r                              size=\"small\"\r                            />\r                          </TableCell>\r                          <TableCell>{formatFileSize(backup.size)}</TableCell>\r                          <TableCell>\r                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r                              {getLocationIcon(backup.location)}\r                              <Typography sx={{ ml: 1 }} variant=\"body2\">\r                                {backup.location}\r                              </Typography>\r                            </Box>\r                          </TableCell>\r                          <TableCell>\r                            {format(parseISO(backup.createdAt), 'dd MMM yyyy HH:mm', { locale: tr })}\r                          </TableCell>\r                          <TableCell>\r                            <Box sx={{ display: 'flex', gap: 0.5 }}>\r                              {backup.encrypted && (\r                                <Tooltip title=\"Şifrelenmiş\">\r                                  <SecurityIcon fontSize=\"small\" color=\"success\" />\r                                </Tooltip>\r                              )}\r                              {backup.compressed && (\r                                <Tooltip title=\"Sıkıştırılmış\">\r                                  <DataUsageIcon fontSize=\"small\" color=\"primary\" />\r                                </Tooltip>\r                              )}\r                            </Box>\r                          </TableCell>\r                          <TableCell align=\"right\">\r                            <IconButton\r                              size=\"small\"\r                              onClick={() => handleRestore(backup)}\r                              disabled={backup.status !== 'completed'}\r                            >\r                              <RestoreIcon />\r                            </IconButton>\r                            <IconButton size=\"small\">\r                              <DownloadIcon />\r                            </IconButton>\r                            <IconButton\r                              size=\"small\"\r                              onClick={() => handleDeleteBackup(backup.id)}\r                            >\r                              <DeleteIcon />\r                            </IconButton>\r                          </TableCell>\r                        </TableRow>\r                      ))}\r                  </TableBody>\r                </Table>\r              </TableContainer>\r              <TablePagination\r                rowsPerPageOptions={[5, 10, 25]}\r                component=\"div\"\r                count={backups.length}\r                rowsPerPage={rowsPerPage}\r                page={page}\r                onPageChange={(_e, newPage) => setPage(newPage)}\r                onRowsPerPageChange={(e) => {\r                  setRowsPerPage(parseInt(e.target.value, 10));\r                  setPage(0);\r                }}\r              />\r            </>\r          )}\r        </TabPanel>\r        <TabPanel value={tabValue} index={1}>\r          <Box sx={{ mb: 2, display: 'flex', justifyContent: 'flex-end' }}>\r            <Button\r              variant=\"contained\"\r              startIcon={<ScheduleIcon />}\r              onClick={() => setOpenScheduleDialog(true)}\r            >\r              Yeni Zamanlama\r            </Button>\r          </Box>\r          <List>\r            {schedules.map((schedule) => (\r              <ListItem key={schedule.id} sx={{ border: 1, borderColor: 'divider', borderRadius: 1, mb: 1 }}>\r                <ListItemIcon>\r                  <ScheduleIcon />\r                </ListItemIcon>\r                <ListItemText\r                  primary={\r                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r                      <Typography variant=\"body1\">{schedule.name}</Typography>\r                      <Chip\r                        label={schedule.type}\r                        size=\"small\"\r                        variant=\"outlined\"\r                      />\r                      <Chip\r                        label={schedule.backupType}\r                        size=\"small\"\r                        color=\"primary\"\r                        variant=\"outlined\"\r                      />\r                    </Box>\r                  }\r                  secondary={\r                    <Box>\r                      <Typography variant=\"body2\" color=\"text.secondary\">\r                        Saat: {schedule.time} | Sonraki: {format(parseISO(schedule.nextRun), 'dd MMM yyyy HH:mm', { locale: tr })}\r                      </Typography>\r                      {schedule.lastRun && (\r                        <Typography variant=\"caption\" color=\"text.secondary\">\r                          Son çalışma: {format(parseISO(schedule.lastRun), 'dd MMM yyyy HH:mm', { locale: tr })}\r                        </Typography>\r                      )}\r                    </Box>\r                  }\r                />\r                <ListItemSecondaryAction>\r                  <Switch\r                    checked={schedule.enabled}\r                    onChange={() => {}}\r                  />\r                  <IconButton size=\"small\">\r                    <PlayIcon />\r                  </IconButton>\r                  <IconButton size=\"small\">\r                    <DeleteIcon />\r                  </IconButton>\r                </ListItemSecondaryAction>\r              </ListItem>\r            ))}\r          </List>\r        </TabPanel>\r        <TabPanel value={tabValue} index={2}>\r          <List>\r            {restorePoints.map((point) => (\r              <ListItem key={point.id} sx={{ border: 1, borderColor: 'divider', borderRadius: 1, mb: 1 }}>\r                <ListItemIcon>\r                  <RestoreIcon />\r                </ListItemIcon>\r                <ListItemText\r                  primary={point.name}\r                  secondary={\r                    <Box>\r                      <Typography variant=\"body2\" color=\"text.secondary\">\r                        {format(parseISO(point.timestamp), 'dd MMM yyyy HH:mm', { locale: tr })} | {formatFileSize(point.size)}\r                      </Typography>\r                      <Box sx={{ display: 'flex', gap: 0.5, mt: 0.5 }}>\r                        {point.databases.map(db => (\r                          <Chip key={db} label={db} size=\"small\" />\r                        ))}\r                      </Box>\r                    </Box>\r                  }\r                />\r                <ListItemSecondaryAction>\r                  <Chip\r                    label={point.status}\r                    color={getStatusColor(point.status) as any}\r                    size=\"small\"\r                    sx={{ mr: 2 }}\r                  />\r                  <Button\r                    variant=\"contained\"\r                    size=\"small\"\r                    startIcon={<RestoreIcon />}\r                    disabled={point.status !== 'available'}\r                  >\r                    Restore Et\r                  </Button>\r                </ListItemSecondaryAction>\r              </ListItem>\r            ))}\r          </List>\r        </TabPanel>\r        <TabPanel value={tabValue} index={3}>\r          <Typography variant=\"body1\" color=\"text.secondary\">\r            Backup ve restore geçmişi burada görüntülenecek...\r          </Typography>\r        </TabPanel>\r      </Paper>\r      {/* Backup Dialog */}\r      <Dialog open={openBackupDialog} onClose={() => setOpenBackupDialog(false)} maxWidth=\"md\" fullWidth>\r        <DialogTitle>Yeni Backup Oluştur</DialogTitle>\r        <DialogContent>\r          <Grid container spacing={2} sx={{ mt: 1 }}>\r            <Grid item xs={12}>\r              <TextField\r                fullWidth\r                label=\"Backup Adı\"\r                value={backupForm.name}\r                onChange={(e) => setBackupForm({ ...backupForm, name: e.target.value })}\r              />\r            </Grid>\r            <Grid item xs={6}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Backup Türü</InputLabel>\r                <Select\r                  value={backupForm.type}\r                  label=\"Backup Türü\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setBackupForm({ ...backupForm, type: e.target.value as any })}\r                >\r                  <MenuItem value=\"full\">Full Backup</MenuItem>\r                  <MenuItem value=\"incremental\">Incremental</MenuItem>\r                  <MenuItem value=\"differential\">Differential</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={6}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Konum</InputLabel>\r                <Select\r                  value={backupForm.location}\r                  label=\"Konum\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setBackupForm({ ...backupForm, location: e.target.value as any })}\r                >\r                  <MenuItem value=\"local\">Yerel</MenuItem>\r                  <MenuItem value=\"cloud\">Bulut</MenuItem>\r                  <MenuItem value=\"external\">Harici</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={12}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Veritabanları</InputLabel>\r                <Select\r                  multiple\r                  value={backupForm.databases}\r                  label=\"Veritabanları\"\r                  onChange={(e: SelectChangeEvent<string[] aria-label=\"select field\">) => setBackupForm({ ...backupForm, databases: e.target.value as string[] })}\r                >\r                  <MenuItem value=\"master\">Master DB</MenuItem>\r                  <MenuItem value=\"tenant_db_1\">Tenant DB 1</MenuItem>\r                  <MenuItem value=\"tenant_db_2\">Tenant DB 2</MenuItem>\r                  <MenuItem value=\"all_tenants\">Tüm Tenant DB'ler</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={6}>\r              <FormControlLabel\r                control={\r                  <Switch\r                    checked={backupForm.encrypted}\r                    onChange={(e) => setBackupForm({ ...backupForm, encrypted: e.target.checked })}\r                  />\r                }\r                label=\"Şifreleme\"\r              />\r            </Grid>\r            <Grid item xs={6}>\r              <FormControlLabel\r                control={\r                  <Switch\r                    checked={backupForm.compressed}\r                    onChange={(e) => setBackupForm({ ...backupForm, compressed: e.target.checked })}\r                  />\r                }\r                label=\"Sıkıştırma\"\r              />\r            </Grid>\r            <Grid item xs={12}>\r              <TextField\r                fullWidth\r                label=\"Açıklama\"\r                multiline\r                rows={3}\r                value={backupForm.description}\r                onChange={(e) => setBackupForm({ ...backupForm, description: e.target.value })}\r              />\r            </Grid>\r          </Grid>\r        </DialogContent>\r        <DialogActions>\r          <Button onClick={() => setOpenBackupDialog(false)}>İptal</Button>\r          <Button\r            variant=\"contained\"\r            onClick={handleCreateBackup}\r            startIcon={backupInProgress ? <CircularProgress size={20} /> : <BackupIcon />}\r            disabled={backupInProgress}\r          >\r            {backupInProgress ? 'Oluşturuluyor...' : 'Backup Oluştur'}\r          </Button>\r        </DialogActions>\r      </Dialog>\r      {/* Restore Dialog */}\r      <Dialog open={openRestoreDialog} onClose={() => setOpenRestoreDialog(false)} maxWidth=\"sm\" fullWidth>\r        <DialogTitle>Restore İşlemi</DialogTitle>\r        <DialogContent>\r          {selectedBackup && (\r            <Box>\r              <Alert severity=\"warning\" sx={{ mb: 2 }}>\r                Bu işlem mevcut verilerin üzerine yazacaktır. Devam etmeden önce mevcut verileri yedeklediğinizden emin olun.\r              </Alert>\r              <Typography variant=\"body1\" sx={{ mb: 2 }}>\r                <strong>Backup:</strong> {selectedBackup.name}\r              </Typography>\r              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r                <strong>Tarih:</strong> {format(parseISO(selectedBackup.createdAt), 'dd MMM yyyy HH:mm', { locale: tr })}\r              </Typography>\r              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r                <strong>Boyut:</strong> {formatFileSize(selectedBackup.size)}\r              </Typography>\r              <Typography variant=\"body2\" color=\"text.secondary\">\r                <strong>Veritabanları:</strong> {selectedBackup.databases.join(', ')}\r              </Typography>\r            </Box>\r          )}\r        </DialogContent>\r        <DialogActions>\r          <Button onClick={() => setOpenRestoreDialog(false)}>İptal</Button>\r          <Button variant=\"contained\" color=\"warning\" startIcon={<RestoreIcon />}>\r            Restore Başlat\r          </Button>\r        </DialogActions>\r      </Dialog>\r      {/* Schedule Dialog */}\r      <Dialog open={openScheduleDialog} onClose={() => setOpenScheduleDialog(false)} maxWidth=\"sm\" fullWidth>\r        <DialogTitle>Yeni Zamanlama</DialogTitle>\r        <DialogContent>\r          <Grid container spacing={2} sx={{ mt: 1 }}>\r            <Grid item xs={12}>\r              <TextField\r                fullWidth\r                label=\"Zamanlama Adı\"\r                value={scheduleForm.name}\r                onChange={(e) => setScheduleForm({ ...scheduleForm, name: e.target.value })}\r              />\r            </Grid>\r            <Grid item xs={6}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Periyot</InputLabel>\r                <Select\r                  value={scheduleForm.type}\r                  label=\"Periyot\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setScheduleForm({ ...scheduleForm, type: e.target.value as any })}\r                >\r                  <MenuItem value=\"daily\">Günlük</MenuItem>\r                  <MenuItem value=\"weekly\">Haftalık</MenuItem>\r                  <MenuItem value=\"monthly\">Aylık</MenuItem>\r                  <MenuItem value=\"custom\">Özel</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={6}>\r              <TextField\r                fullWidth\r                label=\"Saat\"\r                type=\"time\"\r                value={scheduleForm.time}\r                onChange={(e) => setScheduleForm({ ...scheduleForm, time: e.target.value })}\r                InputLabelProps={{ shrink: true }}\r              />\r            </Grid>\r            <Grid item xs={12}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Backup Türü</InputLabel>\r                <Select\r                  value={scheduleForm.backupType}\r                  label=\"Backup Türü\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setScheduleForm({ ...scheduleForm, backupType: e.target.value as any })}\r                >\r                  <MenuItem value=\"full\">Full Backup</MenuItem>\r                  <MenuItem value=\"incremental\">Incremental</MenuItem>\r                  <MenuItem value=\"differential\">Differential</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={12}>\r              <FormControlLabel\r                control={\r                  <Switch\r                    checked={scheduleForm.enabled}\r                    onChange={(e) => setScheduleForm({ ...scheduleForm, enabled: e.target.checked })}\r                  />\r                }\r                label=\"Aktif\"\r              />\r              <FormControlLabel\r                control={\r                  <Switch\r                    checked={scheduleForm.notifications}\r                    onChange={(e) => setScheduleForm({ ...scheduleForm, notifications: e.target.checked })}\r                  />\r                }\r                label=\"Bildirimler\"\r              />\r            </Grid>\r          </Grid>\r        </DialogContent>\r        <DialogActions>\r          <Button onClick={() => setOpenScheduleDialog(false)}>İptal</Button>\r          <Button variant=\"contained\" startIcon={<ScheduleIcon />}>\r            Zamanlama Oluştur\r          </Button>\r        </DialogActions>\r      </Dialog>\r      {/* Settings Dialog */}\r      <Dialog open={openSettingsDialog} onClose={() => setOpenSettingsDialog(false)} maxWidth=\"md\" fullWidth>\r        <DialogTitle>Backup Ayarları</DialogTitle>\r        <DialogContent>\r          <Grid container spacing={2} sx={{ mt: 1 }}>\r            <Grid item xs={12}>\r              <FormControlLabel\r                control={\r                  <Switch\r                    checked={backupSettings.autoBackup}\r                    onChange={(e) => setBackupSettings({ ...backupSettings, autoBackup: e.target.checked })}\r                  />\r                }\r                label=\"Otomatik Backup\"\r              />\r            </Grid>\r            <Grid item xs={6}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Sıkıştırma Seviyesi</InputLabel>\r                <Select\r                  value={backupSettings.compressionLevel}\r                  label=\"Sıkıştırma Seviyesi\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setBackupSettings({ ...backupSettings, compressionLevel: e.target.value })}\r                >\r                  <MenuItem value=\"none\">Yok</MenuItem>\r                  <MenuItem value=\"low\">Düşük</MenuItem>\r                  <MenuItem value=\"medium\">Orta</MenuItem>\r                  <MenuItem value=\"high\">Yüksek</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={6}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Şifreleme Metodu</InputLabel>\r                <Select\r                  value={backupSettings.encryptionMethod}\r                  label=\"Şifreleme Metodu\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setBackupSettings({ ...backupSettings, encryptionMethod: e.target.value })}\r                >\r                  <MenuItem value=\"none\">Yok</MenuItem>\r                  <MenuItem value=\"AES-128\">AES-128</MenuItem>\r                  <MenuItem value=\"AES-256\">AES-256</MenuItem>\r                  <MenuItem value=\"RSA\">RSA</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={6}>\r              <TextField\r                fullWidth\r                label=\"Max Backup Boyutu (GB)\"\r                type=\"number\"\r                value={backupSettings.maxBackupSize}\r                onChange={(e) => setBackupSettings({ ...backupSettings, maxBackupSize: parseInt(e.target.value) })}\r              />\r            </Grid>\r            <Grid item xs={6}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Bulut Sağlayıcı</InputLabel>\r                <Select\r                  value={backupSettings.cloudProvider}\r                  label=\"Bulut Sağlayıcı\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setBackupSettings({ ...backupSettings, cloudProvider: e.target.value })}\r                >\r                  <MenuItem value=\"azure\">Azure</MenuItem>\r                  <MenuItem value=\"aws\">AWS S3</MenuItem>\r                  <MenuItem value=\"gcp\">Google Cloud</MenuItem>\r                  <MenuItem value=\"local\">Yerel</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={12}>\r              <TextField\r                fullWidth\r                label=\"Bildirim Email\"\r                type=\"email\"\r                value={backupSettings.notificationEmail}\r                onChange={(e) => setBackupSettings({ ...backupSettings, notificationEmail: e.target.value })}\r              />\r            </Grid>\r            <Grid item xs={12}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Saklama Politikası</InputLabel>\r                <Select\r                  value={backupSettings.retentionPolicy}\r                  label=\"Saklama Politikası\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setBackupSettings({ ...backupSettings, retentionPolicy: e.target.value })}\r                >\r                  <MenuItem value=\"tiered\">Kademeli</MenuItem>\r                  <MenuItem value=\"fixed\">Sabit</MenuItem>\r                  <MenuItem value=\"custom\">Özel</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r          </Grid>\r        </DialogContent>\r        <DialogActions>\r          <Button onClick={() => setOpenSettingsDialog(false)}>İptal</Button>\r          <Button variant=\"contained\" startIcon={<SettingsIcon />}>\r            Ayarları Kaydet\r          </Button>\r        </DialogActions>\r      </Dialog>\r    </Box>\r  );\r};\r// Export both the old and new versions\rexport default BackupManagement;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Backup/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "noKeyboardHandlers",
      "line": 459,
      "code": "onClick={handleStartBackup}",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Backup/ProfessionalBackup.tsx",
      "severity": "warning",
      "message": "Interactive element missing keyboard handler"
    },
    {
      "type": "noKeyboardHandlers",
      "line": 476,
      "code": "onClick={() => setOpenScheduleDialog(true)}",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Backup/ProfessionalBackup.tsx",
      "severity": "warning",
      "message": "Interactive element missing keyboard handler"
    },
    {
      "type": "noKeyboardHandlers",
      "line": 710,
      "code": "onClick={() => handleRestore(backup)}",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Backup/ProfessionalBackup.tsx",
      "severity": "warning",
      "message": "Interactive element missing keyboard handler"
    },
    {
      "type": "noKeyboardHandlers",
      "line": 866,
      "code": "onClick={() => handleRestore(backup)}",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Backup/ProfessionalBackup.tsx",
      "severity": "warning",
      "message": "Interactive element missing keyboard handler"
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useMemo } from 'react';\rimport {\r  Card,\r  Table,\r  Button,\r  Space,\r  Tag,\r  Typography,\r  Row,\r  Col,\r  Statistic,\r  Select,\r  DatePicker,\r  Input,\r  Dropdown,\r  Modal,\r  Form,\r  InputNumber,\r  Tabs,\r  Progress,\r  Timeline,\r  Badge,\r  Alert,\r  Descriptions,\r  List,\r  Avatar,\r  Tooltip,\r  message,\r  Divider,\r} from 'antd';\rimport {\r  DollarOutlined,\r  FileTextOutlined,\r  CreditCardOutlined,\r  CalendarOutlined,\r  DownloadOutlined,\r  PrinterOutlined,\r  MailOutlined,\r  FilterOutlined,\r  PlusOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  EyeOutlined,\r  CheckCircleOutlined,\r  ClockCircleOutlined,\r  ExclamationCircleOutlined,\r  CloudDownloadOutlined,\r  ReloadOutlined,\r  BankOutlined,\r  PayCircleOutlined,\r  HistoryOutlined,\r  RiseOutlined,\r  FallOutlined,\r  ShoppingCartOutlined,\r} from '@ant-design/icons';\rimport type { ColumnsType } from 'antd/es/table';\rimport { Line, Bar, Pie } from '@ant-design/charts';\rimport dayjs from 'dayjs';\rconst { Title, Text, Paragraph } = Typography;\rconst { RangePicker } = DatePicker;\rconst { TabPane } = Tabs;\rconst { Option } = Select;\rinterface Invoice {\r  id: string;\r  invoiceNumber: string;\r  tenantId: string;\r  tenantName: string;\r  amount: number;\r  tax: number;\r  total: number;\r  status: 'paid' | 'pending' | 'overdue' | 'cancelled' | 'draft';\r  dueDate: string;\r  issueDate: string;\r  paymentDate?: string;\r  paymentMethod?: string;\r  items: InvoiceItem[];\r  currency: string;\r}\rinterface InvoiceItem {\r  id: string;\r  description: string;\r  quantity: number;\r  unitPrice: number;\r  total: number;\r}\rinterface Subscription {\r  id: string;\r  tenantId: string;\r  tenantName: string;\r  plan: string;\r  status: 'active' | 'cancelled' | 'expired' | 'trial';\r  startDate: string;\r  endDate: string;\r  nextBillingDate: string;\r  amount: number;\r  billingCycle: 'monthly' | 'yearly';\r  features: string[];\r  usage: {\r    users: { current: number; limit: number };\r    storage: { current: number; limit: number };\r    api: { current: number; limit: number };\r  };\r}\rinterface Payment {\r  id: string;\r  invoiceId: string;\r  amount: number;\r  method: string;\r  status: 'success' | 'pending' | 'failed';\r  date: string;\r  transactionId: string;\r  tenantName: string;\r}\rconst BillingPage: React.FC = () => {\r  const [activeTab, setActiveTab] = useState('invoices');\r  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);\r  const [invoiceModalVisible, setInvoiceModalVisible] = useState(false);\r  const [subscriptionModalVisible, setSubscriptionModalVisible] = useState(false);\r  const [selectedRows, setSelectedRows] = useState<string[]>([]);\r  const [filters, setFilters] = useState({\r    status: 'all',\r    dateRange: null as any,\r    search: '',\r  });\r  // Mock data\r  const invoices: Invoice[] = [\r    {\r      id: '1',\r      invoiceNumber: 'INV-2024-001',\r      tenantId: 't1',\r      tenantName: 'ABC Şirketi',\r      amount: 2500,\r      tax: 450,\r      total: 2950,\r      status: 'paid',\r      dueDate: '2024-01-15',\r      issueDate: '2024-01-01',\r      paymentDate: '2024-01-10',\r      paymentMethod: 'Kredi Kartı',\r      currency: 'TRY',\r      items: [\r        { id: '1', description: 'Premium Plan - Aylık', quantity: 1, unitPrice: 2000, total: 2000 },\r        { id: '2', description: 'Ek Kullanıcı (5)', quantity: 5, unitPrice: 100, total: 500 },\r      ],\r    },\r    {\r      id: '2',\r      invoiceNumber: 'INV-2024-002',\r      tenantId: 't2',\r      tenantName: 'XYZ Teknoloji',\r      amount: 5000,\r      tax: 900,\r      total: 5900,\r      status: 'pending',\r      dueDate: '2024-01-20',\r      issueDate: '2024-01-05',\r      currency: 'TRY',\r      items: [\r        { id: '3', description: 'Enterprise Plan - Aylık', quantity: 1, unitPrice: 5000, total: 5000 },\r      ],\r    },\r    {\r      id: '3',\r      invoiceNumber: 'INV-2024-003',\r      tenantId: 't3',\r      tenantName: 'Demo Firma',\r      amount: 1500,\r      tax: 270,\r      total: 1770,\r      status: 'overdue',\r      dueDate: '2024-01-10',\r      issueDate: '2023-12-25',\r      currency: 'TRY',\r      items: [\r        { id: '4', description: 'Standard Plan - Aylık', quantity: 1, unitPrice: 1500, total: 1500 },\r      ],\r    },\r  ];\r  const subscriptions: Subscription[] = [\r    {\r      id: '1',\r      tenantId: 't1',\r      tenantName: 'ABC Şirketi',\r      plan: 'Premium',\r      status: 'active',\r      startDate: '2023-01-01',\r      endDate: '2024-01-01',\r      nextBillingDate: '2024-02-01',\r      amount: 2000,\r      billingCycle: 'monthly',\r      features: ['Sınırsız kullanıcı', '100GB depolama', 'Özel destek', 'API erişimi'],\r      usage: {\r        users: { current: 25, limit: -1 },\r        storage: { current: 45, limit: 100 },\r        api: { current: 15000, limit: 50000 },\r      },\r    },\r    {\r      id: '2',\r      tenantId: 't2',\r      tenantName: 'XYZ Teknoloji',\r      plan: 'Enterprise',\r      status: 'active',\r      startDate: '2023-06-01',\r      endDate: '2024-06-01',\r      nextBillingDate: '2024-02-01',\r      amount: 5000,\r      billingCycle: 'monthly',\r      features: ['Sınırsız kullanıcı', 'Sınırsız depolama', '7/24 destek', 'Özel API limiti'],\r      usage: {\r        users: { current: 150, limit: -1 },\r        storage: { current: 500, limit: -1 },\r        api: { current: 125000, limit: -1 },\r      },\r    },\r  ];\r  const payments: Payment[] = [\r    {\r      id: '1',\r      invoiceId: '1',\r      amount: 2950,\r      method: 'Kredi Kartı',\r      status: 'success',\r      date: '2024-01-10',\r      transactionId: 'TRX-2024-001',\r      tenantName: 'ABC Şirketi',\r    },\r    {\r      id: '2',\r      invoiceId: '2',\r      amount: 5900,\r      method: 'Banka Transferi',\r      status: 'pending',\r      date: '2024-01-15',\r      transactionId: 'TRX-2024-002',\r      tenantName: 'XYZ Teknoloji',\r    },\r  ];\r  // Statistics\r  const stats = useMemo(() => {\r    const totalRevenue = invoices\r      .filter(inv => inv.status === 'paid')\r      .reduce((sum, inv) => sum + inv.total, 0);\r    const pendingAmount = invoices\r      .filter(inv => inv.status === 'pending')\r      .reduce((sum, inv) => sum + inv.total, 0);\r    const overdueAmount = invoices\r      .filter(inv => inv.status === 'overdue')\r      .reduce((sum, inv) => sum + inv.total, 0);\r    const activeSubscriptions = subscriptions.filter(sub => sub.status === 'active').length;\r    return {\r      totalRevenue,\r      pendingAmount,\r      overdueAmount,\r      activeSubscriptions,\r      totalInvoices: invoices.length,\r      paidInvoices: invoices.filter(inv => inv.status === 'paid').length,\r    };\r  }, [invoices, subscriptions]);\r  // Invoice columns\r  const invoiceColumns: ColumnsType<Invoice> = [\r    {\r      title: 'Fatura No',\r      dataIndex: 'invoiceNumber',\r      key: 'invoiceNumber',\r      render: (text, record) => (\r        <Button type=\"link\" onClick={() => handleViewInvoice(record)}>\r          {text}\r        </Button>\r      ),\r    },\r    {\r      title: 'Müşteri',\r      dataIndex: 'tenantName',\r      key: 'tenantName',\r      render: (text) => (\r        <Space>\r          <Avatar size=\"small\" style={{ backgroundColor: '#1890ff' }}>\r            {text[0]}\r          </Avatar>\r          {text}\r        </Space>\r      ),\r    },\r    {\r      title: 'Tutar',\r      dataIndex: 'total',\r      key: 'total',\r      render: (value, record) => (\r        <Text strong>\r          {value.toLocaleString('tr-TR')} {record.currency}\r        </Text>\r      ),\r      sorter: (a, b) => a.total - b.total,\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status: string) => {\r        const statusConfig = {\r          paid: { color: 'success', text: 'Ödendi', icon: <CheckCircleOutlined /> },\r          pending: { color: 'processing', text: 'Bekliyor', icon: <ClockCircleOutlined /> },\r          overdue: { color: 'error', text: 'Gecikmiş', icon: <ExclamationCircleOutlined /> },\r          cancelled: { color: 'default', text: 'İptal', icon: <DeleteOutlined /> },\r          draft: { color: 'default', text: 'Taslak', icon: <EditOutlined /> },\r        };\r        const config = statusConfig[status as keyof typeof statusConfig];\r        return (\r          <Tag color={config.color} icon={config.icon}>\r            {config.text}\r          </Tag>\r        );\r      },\r      filters: [\r        { text: 'Ödendi', value: 'paid' },\r        { text: 'Bekliyor', value: 'pending' },\r        { text: 'Gecikmiş', value: 'overdue' },\r      ],\r    },\r    {\r      title: 'Vade Tarihi',\r      dataIndex: 'dueDate',\r      key: 'dueDate',\r      render: (date) => dayjs(date).format('DD/MM/YYYY'),\r      sorter: (a, b) => dayjs(a.dueDate).unix() - dayjs(b.dueDate).unix(),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      render: (_, record) => (\r        <Space>\r          <Tooltip title=\"Görüntüle\">\r            <Button icon={<EyeOutlined />} size=\"small\" onClick={() = aria-label=\"eye outlined\"> handleViewInvoice(record)} />\r          </Tooltip>\r          <Tooltip title=\"İndir\">\r            <Button icon={<DownloadOutlined />} size=\"small\" onClick={() = aria-label=\"download outlined\"> handleDownloadInvoice(record)} />\r          </Tooltip>\r          <Tooltip title=\"E-posta Gönder\">\r            <Button icon={<MailOutlined />} size=\"small\" onClick={() = aria-label=\"mail outlined\"> handleSendInvoice(record)} />\r          </Tooltip>\r          <Dropdown\r            menu={{\r              items: [\r                { key: 'edit', label: 'Düzenle', icon: <EditOutlined /> },\r                { key: 'duplicate', label: 'Kopyala', icon: <FileTextOutlined /> },\r                { key: 'cancel', label: 'İptal Et', icon: <DeleteOutlined />, danger: true },\r              ],\r            }}\r          >\r            <Button size=\"small\">Daha Fazla</Button>\r          </Dropdown>\r        </Space>\r      ),\r    },\r  ];\r  // Subscription columns\r  const subscriptionColumns: ColumnsType<Subscription> = [\r    {\r      title: 'Müşteri',\r      dataIndex: 'tenantName',\r      key: 'tenantName',\r      render: (text) => (\r        <Space>\r          <Avatar size=\"small\" style={{ backgroundColor: '#52c41a' }}>\r            {text[0]}\r          </Avatar>\r          {text}\r        </Space>\r      ),\r    },\r    {\r      title: 'Plan',\r      dataIndex: 'plan',\r      key: 'plan',\r      render: (plan) => (\r        <Tag color=\"blue\">{plan}</Tag>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status: string) => {\r        const statusConfig = {\r          active: { color: 'success', text: 'Aktif' },\r          cancelled: { color: 'error', text: 'İptal' },\r          expired: { color: 'warning', text: 'Süresi Dolmuş' },\r          trial: { color: 'processing', text: 'Deneme' },\r        };\r        const config = statusConfig[status as keyof typeof statusConfig];\r        return <Tag color={config.color}>{config.text}</Tag>;\r      },\r    },\r    {\r      title: 'Fatura Dönemi',\r      dataIndex: 'billingCycle',\r      key: 'billingCycle',\r      render: (cycle) => (cycle === 'monthly' ? 'Aylık' : 'Yıllık'),\r    },\r    {\r      title: 'Tutar',\r      dataIndex: 'amount',\r      key: 'amount',\r      render: (value) => `${value.toLocaleString('tr-TR')} TRY`,\r    },\r    {\r      title: 'Sonraki Fatura',\r      dataIndex: 'nextBillingDate',\r      key: 'nextBillingDate',\r      render: (date) => dayjs(date).format('DD/MM/YYYY'),\r    },\r    {\r      title: 'Kullanım',\r      key: 'usage',\r      render: (_, record) => (\r        <Space direction=\"vertical\" size={0}>\r          <Text type=\"secondary\" style={{ fontSize: '12px' }}>\r            Kullanıcı: {record.usage.users.current}/{record.usage.users.limit === -1 ? '∞' : record.usage.users.limit}\r          </Text>\r          <Text type=\"secondary\" style={{ fontSize: '12px' }}>\r            Depolama: {record.usage.storage.current}GB/{record.usage.storage.limit === -1 ? '∞' : record.usage.storage.limit + 'GB'}\r          </Text>\r        </Space>\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      render: (_, record) => (\r        <Space>\r          <Button size=\"small\">Yönet</Button>\r          <Dropdown\r            menu={{\r              items: [\r                { key: 'upgrade', label: 'Yükselt', icon: <RiseOutlined /> },\r                { key: 'downgrade', label: 'Düşür', icon: <FallOutlined /> },\r                { key: 'cancel', label: 'İptal Et', icon: <DeleteOutlined />, danger: true },\r              ],\r            }}\r          >\r            <Button size=\"small\">Daha Fazla</Button>\r          </Dropdown>\r        </Space>\r      ),\r    },\r  ];\r  // Payment columns\r  const paymentColumns: ColumnsType<Payment> = [\r    {\r      title: 'İşlem No',\r      dataIndex: 'transactionId',\r      key: 'transactionId',\r    },\r    {\r      title: 'Müşteri',\r      dataIndex: 'tenantName',\r      key: 'tenantName',\r    },\r    {\r      title: 'Tutar',\r      dataIndex: 'amount',\r      key: 'amount',\r      render: (value) => `${value.toLocaleString('tr-TR')} TRY`,\r    },\r    {\r      title: 'Ödeme Yöntemi',\r      dataIndex: 'method',\r      key: 'method',\r      render: (method) => (\r        <Tag icon={method === 'Kredi Kartı' ? <CreditCardOutlined /> : <BankOutlined />}>\r          {method}\r        </Tag>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status: string) => {\r        const statusConfig = {\r          success: { color: 'success', text: 'Başarılı' },\r          pending: { color: 'processing', text: 'Bekliyor' },\r          failed: { color: 'error', text: 'Başarısız' },\r        };\r        const config = statusConfig[status as keyof typeof statusConfig];\r        return <Tag color={config.color}>{config.text}</Tag>;\r      },\r    },\r    {\r      title: 'Tarih',\r      dataIndex: 'date',\r      key: 'date',\r      render: (date) => dayjs(date).format('DD/MM/YYYY HH:mm'),\r    },\r  ];\r  // Handlers\r  const handleViewInvoice = (invoice: Invoice) => {\r    setSelectedInvoice(invoice);\r    setInvoiceModalVisible(true);\r  };\r  const handleDownloadInvoice = (invoice: Invoice) => {\r    message.success(`${invoice.invoiceNumber} indirildi`);\r  };\r  const handleSendInvoice = (invoice: Invoice) => {\r    message.success(`${invoice.invoiceNumber} e-posta ile gönderildi`);\r  };\r  const handleCreateInvoice = () => {\r    // Create invoice logic\r    message.success('Yeni fatura oluşturuldu');\r  };\r  const handleBulkAction = (action: string) => {\r    message.info(`${selectedRows.length} fatura için ${action} işlemi yapılıyor`);\r  };\r  // Revenue chart data\r  const revenueData = [\r    { month: 'Ocak', value: 45000 },\r    { month: 'Şubat', value: 52000 },\r    { month: 'Mart', value: 48000 },\r    { month: 'Nisan', value: 61000 },\r    { month: 'Mayıs', value: 55000 },\r    { month: 'Haziran', value: 67000 },\r  ];\r  const revenueConfig = {\r    data: revenueData,\r    xField: 'month',\r    yField: 'value',\r    smooth: true,\r    point: { size: 3 },\r    tooltip: {\r      formatter: (datum: any) => ({\r        name: 'Gelir',\r        value: `${datum.value.toLocaleString('tr-TR')} TRY`,\r      }),\r    },\r  };\r  return (\r    <div style={{ padding: '24px' }}>\r      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\r        <Col span={24}>\r          <Title level={2}>\r            <DollarOutlined /> Faturalama ve Ödemeler\r          </Title>\r        </Col>\r      </Row>\r      {/* Statistics Cards */}\r      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\r        <Col xs={24} sm={12} lg={6}>\r          <Card>\r            <Statistic\r              title=\"Toplam Gelir\"\r              value={stats.totalRevenue}\r              suffix=\"TRY\"\r              valueStyle={{ color: '#52c41a' }}\r              prefix={<DollarOutlined />}\r            />\r            <Progress percent={75} strokeColor=\"#52c41a\" showInfo={false} />\r            <Text type=\"secondary\">Son 30 gün</Text>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card>\r            <Statistic\r              title=\"Bekleyen Ödemeler\"\r              value={stats.pendingAmount}\r              suffix=\"TRY\"\r              valueStyle={{ color: '#1890ff' }}\r              prefix={<ClockCircleOutlined />}\r            />\r            <Progress percent={30} strokeColor=\"#1890ff\" showInfo={false} />\r            <Text type=\"secondary\">{invoices.filter(inv => inv.status === 'pending').length} fatura</Text>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card>\r            <Statistic\r              title=\"Gecikmiş Ödemeler\"\r              value={stats.overdueAmount}\r              suffix=\"TRY\"\r              valueStyle={{ color: '#ff4d4f' }}\r              prefix={<ExclamationCircleOutlined />}\r            />\r            <Progress percent={15} strokeColor=\"#ff4d4f\" showInfo={false} />\r            <Text type=\"secondary\">{invoices.filter(inv => inv.status === 'overdue').length} fatura</Text>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card>\r            <Statistic\r              title=\"Aktif Abonelikler\"\r              value={stats.activeSubscriptions}\r              valueStyle={{ color: '#722ed1' }}\r              prefix={<ShoppingCartOutlined />}\r            />\r            <Progress percent={85} strokeColor=\"#722ed1\" showInfo={false} />\r            <Text type=\"secondary\">Toplam {subscriptions.length} abonelik</Text>\r          </Card>\r        </Col>\r      </Row>\r      {/* Main Content Tabs */}\r      <Card>\r        <Tabs activeKey={activeTab} onChange={setActiveTab}>\r          <TabPane tab={<span><FileTextOutlined /> Faturalar</span>} key=\"invoices\">\r            {/* Filters and Actions */}\r            <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\r              <Col xs={24} lg={16}>\r                <Space wrap>\r                  <Select\r                    style={{ width: 150 }}\r                    value={filters.status}\r                    onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, status: value })}\r                  >\r                    <Option value=\"all\">Tüm Durumlar</Option>\r                    <Option value=\"paid\">Ödendi</Option>\r                    <Option value=\"pending\">Bekliyor</Option>\r                    <Option value=\"overdue\">Gecikmiş</Option>\r                  </Select>\r                  <RangePicker placeholder={['Başlangıç', 'Bitiş']} />\r                  <Input.Search\r                    placeholder=\"Fatura ara...\"\r                    style={{ width: 250 }}\r                    value={filters.search}\r                    onChange={(e) = aria-label=\"input field\"> setFilters({ ...filters, search: e.target.value })}\r                  />\r                </Space>\r              </Col>\r              <Col xs={24} lg={8} style={{ textAlign: 'right' }}>\r                <Space>\r                  <Button icon={<ReloadOutlined />} aria-label=\"reload outlined\">Yenile</Button>\r                  <Button icon={<DownloadOutlined />} aria-label=\"download outlined\">Dışa Aktar</Button>\r                  <Button type=\"primary\" icon={<PlusOutlined />} onClick={handleCreateInvoice} aria-label=\"plus outlined\">\r                    Yeni Fatura\r                  </Button>\r                </Space>\r              </Col>\r            </Row>\r            {/* Bulk Actions */}\r            {selectedRows.length > 0 && (\r              <Alert\r                message={`${selectedRows.length} fatura seçildi`}\r                type=\"info\"\r                showIcon\r                action={\r                  <Space>\r                    <Button size=\"small\" onClick={() => handleBulkAction('email')}>\r                      E-posta Gönder\r                    </Button>\r                    <Button size=\"small\" onClick={() => handleBulkAction('download')}>\r                      İndir\r                    </Button>\r                    <Button size=\"small\" danger onClick={() => handleBulkAction('delete')}>\r                      Sil\r                    </Button>\r                  </Space>\r                }\r                style={{ marginBottom: 16 }}\r              />\r            )}\r            {/* Invoices Table */}\r            <Table\r              columns={invoiceColumns}\r              dataSource={invoices}\r              rowKey=\"id\"\r              rowSelection={{\r                selectedRowKeys: selectedRows,\r                onChange: (keys) => setSelectedRows(keys as string[]),\r              }}\r              pagination={{\r                showSizeChanger: true,\r                showTotal: (total) => `Toplam ${total} fatura`,\r              }}\r            />\r          </TabPane>\r          <TabPane tab={<span><ShoppingCartOutlined /> Abonelikler</span>} key=\"subscriptions\">\r            {/* Subscription Actions */}\r            <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\r              <Col span={24} style={{ textAlign: 'right' }}>\r                <Space>\r                  <Button icon={<ReloadOutlined />} aria-label=\"reload outlined\">Yenile</Button>\r                  <Button type=\"primary\" icon={<PlusOutlined />} aria-label=\"plus outlined\">\r                    Yeni Abonelik\r                  </Button>\r                </Space>\r              </Col>\r            </Row>\r            {/* Subscriptions Table */}\r            <Table\r              columns={subscriptionColumns}\r              dataSource={subscriptions}\r              rowKey=\"id\"\r              pagination={{\r                showSizeChanger: true,\r                showTotal: (total) => `Toplam ${total} abonelik`,\r              }}\r            />\r          </TabPane>\r          <TabPane tab={<span><CreditCardOutlined /> Ödemeler</span>} key=\"payments\">\r            {/* Payment History */}\r            <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\r              <Col span={24}>\r                <Alert\r                  message=\"Ödeme İşlemleri\"\r                  description=\"Son 30 gündeki tüm ödeme işlemleri listelenmektedir.\"\r                  type=\"info\"\r                  showIcon\r                />\r              </Col>\r            </Row>\r            <Table\r              columns={paymentColumns}\r              dataSource={payments}\r              rowKey=\"id\"\r              pagination={{\r                showSizeChanger: true,\r                showTotal: (total) => `Toplam ${total} ödeme`,\r              }}\r            />\r          </TabPane>\r          <TabPane tab={<span><HistoryOutlined /> Gelir Analizi</span>} key=\"revenue\">\r            <Row gutter={[16, 16]}>\r              <Col span={24}>\r                <Card title=\"Aylık Gelir Trendi\" bordered={false}>\r                  <Line {...revenueConfig} height={300} />\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r        </Tabs>\r      </Card>\r      {/* Invoice Detail Modal */}\r      <Modal\r        title={`Fatura Detayı - ${selectedInvoice?.invoiceNumber}`}\r        open={invoiceModalVisible}\r        onCancel={() => setInvoiceModalVisible(false)}\r        width={800}\r        footer={[\r          <Button key=\"print\" icon={<PrinterOutlined />} aria-label=\"printer outlined\">\r            Yazdır\r          </Button>,\r          <Button key=\"download\" icon={<DownloadOutlined />} aria-label=\"download outlined\">\r            PDF İndir\r          </Button>,\r          <Button key=\"email\" icon={<MailOutlined />} aria-label=\"mail outlined\">\r            E-posta Gönder\r          </Button>,\r          <Button key=\"close\" onClick={() => setInvoiceModalVisible(false)}>\r            Kapat\r          </Button>,\r        ]}\r      >\r        {selectedInvoice && (\r          <>\r            <Descriptions bordered column={2}>\r              <Descriptions.Item label=\"Fatura No\">{selectedInvoice.invoiceNumber}</Descriptions.Item>\r              <Descriptions.Item label=\"Müşteri\">{selectedInvoice.tenantName}</Descriptions.Item>\r              <Descriptions.Item label=\"Düzenleme Tarihi\">\r                {dayjs(selectedInvoice.issueDate).format('DD/MM/YYYY')}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Vade Tarihi\">\r                {dayjs(selectedInvoice.dueDate).format('DD/MM/YYYY')}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Durum\">\r                <Tag color={selectedInvoice.status === 'paid' ? 'success' : 'processing'}>\r                  {selectedInvoice.status === 'paid' ? 'Ödendi' : 'Bekliyor'}\r                </Tag>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Ödeme Yöntemi\">\r                {selectedInvoice.paymentMethod || '-'}\r              </Descriptions.Item>\r            </Descriptions>\r            <Divider />\r            <Table\r              columns={[\r                { title: 'Açıklama', dataIndex: 'description', key: 'description' },\r                { title: 'Miktar', dataIndex: 'quantity', key: 'quantity' },\r                { title: 'Birim Fiyat', dataIndex: 'unitPrice', key: 'unitPrice', render: (value) => `${value} TRY` },\r                { title: 'Toplam', dataIndex: 'total', key: 'total', render: (value) => `${value} TRY` },\r              ]}\r              dataSource={selectedInvoice.items}\r              rowKey=\"id\"\r              pagination={false}\r              summary={() => (\r                <>\r                  <Table.Summary.Row>\r                    <Table.Summary.Cell index={0} colSpan={3}>\r                      <Text strong>Ara Toplam</Text>\r                    </Table.Summary.Cell>\r                    <Table.Summary.Cell index={1}>\r                      <Text>{selectedInvoice.amount} TRY</Text>\r                    </Table.Summary.Cell>\r                  </Table.Summary.Row>\r                  <Table.Summary.Row>\r                    <Table.Summary.Cell index={0} colSpan={3}>\r                      <Text strong>KDV (%18)</Text>\r                    </Table.Summary.Cell>\r                    <Table.Summary.Cell index={1}>\r                      <Text>{selectedInvoice.tax} TRY</Text>\r                    </Table.Summary.Cell>\r                  </Table.Summary.Row>\r                  <Table.Summary.Row>\r                    <Table.Summary.Cell index={0} colSpan={3}>\r                      <Text strong>Genel Toplam</Text>\r                    </Table.Summary.Cell>\r                    <Table.Summary.Cell index={1}>\r                      <Text strong style={{ fontSize: '16px' }}>\r                        {selectedInvoice.total} TRY\r                      </Text>\r                    </Table.Summary.Cell>\r                  </Table.Summary.Row>\r                </>\r              )}\r            />\r            {selectedInvoice.status === 'paid' && (\r              <>\r                <Divider />\r                <Alert\r                  message=\"Ödeme Bilgisi\"\r                  description={`Bu fatura ${dayjs(selectedInvoice.paymentDate).format('DD/MM/YYYY')} tarihinde ${selectedInvoice.paymentMethod} ile ödenmiştir.`}\r                  type=\"success\"\r                  showIcon\r                />\r              </>\r            )}\r          </>\r        )}\r      </Modal>\r    </div>\r  );\r};\rexport default BillingPage;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Billing/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport CountUp from 'react-countup';\rimport { Line, Area, Column, Pie, DualAxes, Gauge, Liquid } from '@ant-design/plots';\rimport {\r  Row,\r  Col,\r  Card,\r  Statistic,\r  Progress,\r  Table,\r  Tag,\r  Space,\r  Avatar,\r  Typography,\r  Button,\r  Dropdown,\r  Badge,\r  Timeline,\r  List,\r  Tooltip,\r  Segmented,\r  Select,\r  DatePicker,\r  Skeleton,\r  Alert,\r  Tabs,\r  Divider,\r} from 'antd';\rimport {\r  DashboardOutlined,\r  UserOutlined,\r  TeamOutlined,\r  ShoppingCartOutlined,\r  DollarOutlined,\r  RiseOutlined,\r  FallOutlined,\r  SyncOutlined,\r  CloudServerOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r  SafetyOutlined,\r  BellOutlined,\r  SettingOutlined,\r  ExportOutlined,\r  ReloadOutlined,\r  InfoCircleOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  WarningOutlined,\r  ClockCircleOutlined,\r  FireOutlined,\r  ThunderboltOutlined,\r  RocketOutlined,\r  CrownOutlined,\r  TrophyOutlined,\r  StarOutlined,\r  GlobalOutlined,\r  BarChartOutlined,\r  LineChartOutlined,\r  PieChartOutlined,\r  AreaChartOutlined,\r  FundOutlined,\r  StockOutlined,\r  CalendarOutlined,\r  FilterOutlined,\r  MoreOutlined,\r} from '@ant-design/icons';\r// import './styles.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { RangePicker } = DatePicker;\rconst { TabPane } = Tabs;\r// Types\rinterface StatCardProps {\r  title: string;\r  value: number;\r  prefix?: React.ReactNode;\r  suffix?: string;\r  trend?: 'up' | 'down';\r  trendValue?: number;\r  color: string;\r  icon: React.ReactNode;\r  loading?: boolean;\r  onClick?: () => void;\r}\rinterface Activity {\r  id: string;\r  type: 'success' | 'warning' | 'error' | 'info';\r  title: string;\r  description: string;\r  time: string;\r  icon: React.ReactNode;\r}\rimport MetronicDashboard from './MetronicDashboard';\rexport { MetronicDashboard };\rexport const MasterDashboard: React.FC = () => {\r  // Use Metronic Dashboard\r  return <MetronicDashboard />;\r};\rconst OldMasterDashboard: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [timeRange, setTimeRange] = useState<string>('today');\r  const [selectedMetric, setSelectedMetric] = useState<string>('revenue');\r  // Animated Stat Card Component\r  const StatCard: React.FC<StatCardProps> = ({\r    title,\r    value,\r    prefix,\r    suffix,\r    trend,\r    trendValue,\r    color,\r    icon,\r    loading,\r    onClick,\r  }) => (\r    <motion.div\r      whileHover={{ scale: 1.02, translateY: -5 }}\r      whileTap={{ scale: 0.98 }}\r      initial={{ opacity: 0, y: 20 }}\r      animate={{ opacity: 1, y: 0 }}\r      transition={{ duration: 0.3 }}\r    >\r      <Card\r        className=\"stat-card glass-morphism\"\r        style={{\r          background: `linear-gradient(135deg, ${color}08 0%, ${color}03 100%)`,\r          borderLeft: `4px solid ${color}`,\r          cursor: onClick ? 'pointer' : 'default',\r        }}\r        onClick={onClick}\r        hoverable={!!onClick}\r      >\r        {loading ? (\r          <Skeleton active paragraph={{ rows: 2 }} />\r        ) : (\r          <>\r            <div className=\"stat-header\">\r              <div className=\"stat-icon-wrapper\" style={{ background: `${color}15` }}>\r                <div className=\"stat-icon\" style={{ color }}>\r                  {icon}\r                </div>\r              </div>\r              {trend && (\r                <div className={`stat-trend ${trend}`}>\r                  {trend === 'up' ? <RiseOutlined /> : <FallOutlined />}\r                  <span>{trendValue}%</span>\r                </div>\r              )}\r            </div>\r            <div className=\"stat-content\">\r              <Text className=\"stat-title\">{title}</Text>\r              <div className=\"stat-value\">\r                {prefix}\r                <CountUp\r                  end={value}\r                  duration={2}\r                  separator=\",\"\r                  decimals={suffix === '%' ? 1 : 0}\r                />\r                {suffix}\r              </div>\r            </div>\r            <div className=\"stat-footer\">\r              <Progress\r                percent={(trendValue || 0) + 50}\r                showInfo={false}\r                strokeColor={color}\r                trailColor={`${color}20`}\r                size=\"small\"\r              />\r            </div>\r          </>\r        )}\r      </Card>\r    </motion.div>\r  );\r  // Mock Data\r  const statsData = [\r    {\r      title: 'Toplam Gelir',\r      value: 524350,\r      prefix: '₺',\r      trend: 'up' as const,\r      trendValue: 12.5,\r      color: '#52c41a',\r      icon: <DollarOutlined />,\r    },\r    {\r      title: 'Aktif Tenantlar',\r      value: 386,\r      trend: 'up' as const,\r      trendValue: 8.3,\r      color: '#1890ff',\r      icon: <TeamOutlined />,\r    },\r    {\r      title: 'Toplam Kullanıcı',\r      value: 4823,\r      trend: 'up' as const,\r      trendValue: 15.7,\r      color: '#722ed1',\r      icon: <UserOutlined />,\r    },\r    {\r      title: 'Sistem Uptime',\r      value: 99.9,\r      suffix: '%',\r      trend: 'up' as const,\r      trendValue: 0.1,\r      color: '#13c2c2',\r      icon: <ThunderboltOutlined />,\r    },\r  ];\r  // Revenue Chart Data\r  const revenueData = [\r    { month: 'Ocak', revenue: 320000, growth: 12 },\r    { month: 'Şubat', revenue: 385000, growth: 15 },\r    { month: 'Mart', revenue: 412000, growth: 8 },\r    { month: 'Nisan', revenue: 445000, growth: 11 },\r    { month: 'Mayıs', revenue: 478000, growth: 9 },\r    { month: 'Haziran', revenue: 524350, growth: 13 },\r  ];\r  const revenueChartConfig = {\r    data: [revenueData, revenueData],\r    xField: 'month',\r    yField: ['revenue', 'growth'],\r    geometryOptions: [\r      {\r        geometry: 'column',\r        color: '#5B8FF9',\r        columnWidthRatio: 0.4,\r        label: {\r          position: 'middle',\r        },\r      },\r      {\r        geometry: 'line',\r        color: '#5AD8A6',\r        smooth: true,\r        lineStyle: {\r          lineWidth: 3,\r          shadowColor: 'rgba(0,0,0,0.1)',\r          shadowBlur: 10,\r        },\r        point: {\r          size: 5,\r          shape: 'circle',\r          style: {\r            fill: 'white',\r            stroke: '#5AD8A6',\r            lineWidth: 2,\r          },\r        },\r      },\r    ],\r    interactions: [{ type: 'element-active' }],\r    legend: {\r      position: 'top-right',\r    },\r  };\r  // Tenant Distribution\r  const tenantDistribution = [\r    { type: 'Enterprise', value: 45, color: '#5B8FF9' },\r    { type: 'Professional', value: 125, color: '#5AD8A6' },\r    { type: 'Starter', value: 186, color: '#5D7092' },\r    { type: 'Free', value: 30, color: '#FF9845' },\r  ];\r  const pieConfig = {\r    data: tenantDistribution,\r    angleField: 'value',\r    colorField: 'type',\r    radius: 1,\r    innerRadius: 0.6,\r    label: {\r      type: 'inner',\r      offset: '-50%',\r      content: '{value}',\r      style: {\r        textAlign: 'center',\r        fontSize: 14,\r        fill: '#fff',\r      },\r    },\r    interactions: [\r      { type: 'element-selected' },\r      { type: 'element-active' },\r    ],\r    statistic: {\r      title: {\r        content: 'Toplam',\r        style: {\r          fontSize: '14px',\r          color: '#8c8c8c',\r        },\r      },\r      content: {\r        style: {\r          fontSize: '24px',\r          fontWeight: 'bold',\r          color: '#262626',\r        },\r        content: '386',\r      },\r    },\r  };\r  // System Metrics\r  const systemMetrics = [\r    { name: 'CPU Kullanımı', value: 68, status: 'normal' },\r    { name: 'RAM Kullanımı', value: 75, status: 'warning' },\r    { name: 'Disk Kullanımı', value: 45, status: 'normal' },\r    { name: 'Network I/O', value: 82, status: 'warning' },\r    { name: 'Database Connections', value: 35, status: 'normal' },\r  ];\r  // Recent Activities\r  const recentActivities: Activity[] = [\r    {\r      id: '1',\r      type: 'success',\r      title: 'Yeni Tenant Kaydı',\r      description: 'TechCorp Solutions sisteme katıldı',\r      time: '5 dakika önce',\r      icon: <CheckCircleOutlined />,\r    },\r    {\r      id: '2',\r      type: 'info',\r      title: 'Sistem Güncellemesi',\r      description: 'v2.4.1 başarıyla yüklendi',\r      time: '1 saat önce',\r      icon: <InfoCircleOutlined />,\r    },\r    {\r      id: '3',\r      type: 'warning',\r      title: 'Yüksek CPU Kullanımı',\r      description: 'Server-3 CPU %85 üzerinde',\r      time: '2 saat önce',\r      icon: <WarningOutlined />,\r    },\r    {\r      id: '4',\r      type: 'error',\r      title: 'Ödeme Hatası',\r      description: 'ABC Corp ödeme başarısız',\r      time: '3 saat önce',\r      icon: <CloseCircleOutlined />,\r    },\r  ];\r  // Top Tenants Table Columns\r  const tenantColumns = [\r    {\r      title: 'Sıra',\r      dataIndex: 'rank',\r      key: 'rank',\r      width: 80,\r      render: (rank: number) => {\r        const icons = {\r          1: <CrownOutlined style={{ color: '#ffd700' }} />,\r          2: <TrophyOutlined style={{ color: '#c0c0c0' }} />,\r          3: <StarOutlined style={{ color: '#cd7f32' }} />,\r        };\r        return (\r          <Space>\r            {icons[rank as keyof typeof icons]}\r            <Text strong>#{rank}</Text>\r          </Space>\r        );\r      },\r    },\r    {\r      title: 'Tenant',\r      dataIndex: 'name',\r      key: 'name',\r      render: (name: string, record: any) => (\r        <Space>\r          <Avatar style={{ backgroundColor: record.color }}>\r            {name.substring(0, 2).toUpperCase()}\r          </Avatar>\r          <div>\r            <Text strong>{name}</Text>\r            <br />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {record.plan}\r            </Text>\r          </div>\r        </Space>\r      ),\r    },\r    {\r      title: 'Kullanıcı',\r      dataIndex: 'users',\r      key: 'users',\r      render: (users: number) => (\r        <Badge count={users} style={{ backgroundColor: '#52c41a' }} />\r      ),\r    },\r    {\r      title: 'Gelir',\r      dataIndex: 'revenue',\r      key: 'revenue',\r      render: (revenue: number) => (\r        <Text strong style={{ color: '#52c41a' }}>\r          ₺{revenue.toLocaleString()}\r        </Text>\r      ),\r    },\r    {\r      title: 'Büyüme',\r      dataIndex: 'growth',\r      key: 'growth',\r      render: (growth: number) => (\r        <Tag color={growth > 0 ? 'success' : 'error'}>\r          {growth > 0 ? '+' : ''}{growth}%\r        </Tag>\r      ),\r    },\r  ];\r  const topTenantsData = [\r    { rank: 1, name: 'TechCorp Solutions', plan: 'Enterprise', users: 245, revenue: 45000, growth: 15, color: '#1890ff' },\r    { rank: 2, name: 'Digital Dynamics', plan: 'Professional', users: 189, revenue: 32000, growth: 12, color: '#52c41a' },\r    { rank: 3, name: 'CloudFirst Inc', plan: 'Enterprise', users: 156, revenue: 28500, growth: -3, color: '#722ed1' },\r    { rank: 4, name: 'DataDrive Systems', plan: 'Professional', users: 134, revenue: 24000, growth: 8, color: '#fa8c16' },\r    { rank: 5, name: 'InnovateTech', plan: 'Starter', users: 98, revenue: 18000, growth: 22, color: '#eb2f96' },\r  ];\r  return (\r    <div className=\"master-dashboard\">\r      {/* Header */}\r      <div className=\"dashboard-header glass-morphism\">\r        <motion.div\r          initial={{ opacity: 0, x: -20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-left\"\r        >\r          <Title level={2} className=\"gradient-text\">\r            <DashboardOutlined /> Master Dashboard\r          </Title>\r          <Text type=\"secondary\">Sistem geneli özet ve performans metrikleri</Text>\r        </motion.div>\r        <motion.div\r          initial={{ opacity: 0, x: 20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-right\"\r        >\r          <Space size=\"middle\">\r            <Segmented\r              value={timeRange}\r              onChange={setTimeRange}\r              options={[\r                { label: 'Bugün', value: 'today', icon: <CalendarOutlined /> },\r                { label: 'Bu Hafta', value: 'week' },\r                { label: 'Bu Ay', value: 'month' },\r                { label: 'Bu Yıl', value: 'year' },\r              ]}\r            />\r            <RangePicker />\r            <Button\r              icon={<ReloadOutlined spin={loading} / aria-label=\"reload outlined\">}\r              onClick={() => setLoading(!loading)}\r            >\r              Yenile\r            </Button>\r            <Button type=\"primary\" icon={<ExportOutlined />} aria-label=\"export outlined\">\r              Rapor İndir\r            </Button>\r          </Space>\r        </motion.div>\r      </div>\r      {/* Stats Cards */}\r      <Row gutter={[20, 20]} className=\"stats-row\">\r        {statsData.map((stat, index) => (\r          <Col xs={24} sm={12} lg={6} key={index}>\r            <StatCard {...stat} loading={loading} />\r          </Col>\r        ))}\r      </Row>\r      {/* Charts Section */}\r      <Row gutter={[20, 20]} className=\"charts-row\">\r        <Col xs={24} lg={16}>\r          <motion.div\r            initial={{ opacity: 0, y: 20 }}\r            animate={{ opacity: 1, y: 0 }}\r            transition={{ delay: 0.2 }}\r          >\r            <Card\r              title={\r                <Space>\r                  <BarChartOutlined className=\"card-icon\" />\r                  <span>Gelir Analizi</span>\r                </Space>\r              }\r              extra={\r                <Select\r                  value={selectedMetric}\r                  onChange={setSelectedMetric}\r                  style={{ width: 120 }}\r                 aria-label=\"select field\">\r                  <Select.Option value=\"revenue\" aria-label=\"select field\">Gelir</Select.Option>\r                  <Select.Option value=\"users\" aria-label=\"select field\">Kullanıcı</Select.Option>\r                  <Select.Option value=\"growth\" aria-label=\"select field\">Büyüme</Select.Option>\r                </Select>\r              }\r              className=\"chart-card glass-morphism\"\r            >\r              {loading ? (\r                <Skeleton.Node active style={{ width: '100%', height: 300 }}>\r                  <BarChartOutlined style={{ fontSize: 40, color: '#bfbfbf' }} />\r                </Skeleton.Node>\r              ) : (\r                <DualAxes {...revenueChartConfig} height={300} />\r              )}\r            </Card>\r          </motion.div>\r        </Col>\r        <Col xs={24} lg={8}>\r          <motion.div\r            initial={{ opacity: 0, y: 20 }}\r            animate={{ opacity: 1, y: 0 }}\r            transition={{ delay: 0.3 }}\r          >\r            <Card\r              title={\r                <Space>\r                  <PieChartOutlined className=\"card-icon\" />\r                  <span>Tenant Dağılımı</span>\r                </Space>\r              }\r              className=\"chart-card glass-morphism\"\r            >\r              {loading ? (\r                <Skeleton.Node active style={{ width: '100%', height: 300 }}>\r                  <PieChartOutlined style={{ fontSize: 40, color: '#bfbfbf' }} />\r                </Skeleton.Node>\r              ) : (\r                <Pie {...pieConfig} height={300} />\r              )}\r            </Card>\r          </motion.div>\r        </Col>\r      </Row>\r      {/* System Health & Activities */}\r      <Row gutter={[20, 20]} className=\"info-row\">\r        <Col xs={24} md={12}>\r          <motion.div\r            initial={{ opacity: 0, x: -20 }}\r            animate={{ opacity: 1, x: 0 }}\r            transition={{ delay: 0.4 }}\r          >\r            <Card\r              title={\r                <Space>\r                  <CloudServerOutlined className=\"card-icon\" />\r                  <span>Sistem Sağlığı</span>\r                </Space>\r              }\r              extra={<Badge status=\"processing\" text=\"Canlı\" />}\r              className=\"system-health-card glass-morphism\"\r            >\r              <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\r                {systemMetrics.map((metric, index) => (\r                  <div key={index} className=\"metric-item\">\r                    <div className=\"metric-header\">\r                      <Text>{metric.name}</Text>\r                      <Text strong>{metric.value}%</Text>\r                    </div>\r                    <Progress\r                      percent={metric.value}\r                      strokeColor={{\r                        '0%': metric.status === 'warning' ? '#faad14' : '#52c41a',\r                        '100%': metric.status === 'warning' ? '#fa8c16' : '#73d13d',\r                      }}\r                      showInfo={false}\r                    />\r                  </div>\r                ))}\r              </Space>\r            </Card>\r          </motion.div>\r        </Col>\r        <Col xs={24} md={12}>\r          <motion.div\r            initial={{ opacity: 0, x: 20 }}\r            animate={{ opacity: 1, x: 0 }}\r            transition={{ delay: 0.5 }}\r          >\r            <Card\r              title={\r                <Space>\r                  <BellOutlined className=\"card-icon\" />\r                  <span>Son Aktiviteler</span>\r                </Space>\r              }\r              extra={\r                <Button type=\"link\" size=\"small\">\r                  Tümünü Gör\r                </Button>\r              }\r              className=\"activities-card glass-morphism\"\r            >\r              <Timeline>\r                {recentActivities.map((activity) => (\r                  <Timeline.Item\r                    key={activity.id}\r                    dot={\r                      <div className={`activity-dot ${activity.type}`}>\r                        {activity.icon}\r                      </div>\r                    }\r                  >\r                    <div className=\"activity-content\">\r                      <Text strong>{activity.title}</Text>\r                      <br />\r                      <Text type=\"secondary\">{activity.description}</Text>\r                      <br />\r                      <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                        <ClockCircleOutlined /> {activity.time}\r                      </Text>\r                    </div>\r                  </Timeline.Item>\r                ))}\r              </Timeline>\r            </Card>\r          </motion.div>\r        </Col>\r      </Row>\r      {/* Top Tenants Table */}\r      <motion.div\r        initial={{ opacity: 0, y: 20 }}\r        animate={{ opacity: 1, y: 0 }}\r        transition={{ delay: 0.6 }}\r      >\r        <Card\r          title={\r            <Space>\r              <TrophyOutlined className=\"card-icon\" style={{ color: '#faad14' }} />\r              <span>En İyi 5 Tenant</span>\r            </Space>\r          }\r          extra={\r            <Space>\r              <Button icon={<FilterOutlined />} aria-label=\"filter outlined\">Filtrele</Button>\r              <Button type=\"primary\" icon={<ExportOutlined />} aria-label=\"export outlined\">\r                Excel\r              </Button>\r            </Space>\r          }\r          className=\"table-card glass-morphism\"\r        >\r          <Table\r            columns={tenantColumns}\r            dataSource={topTenantsData}\r            pagination={false}\r            loading={loading}\r            rowKey=\"rank\"\r          />\r        </Card>\r      </motion.div>\r      {/* Quick Actions */}\r      <motion.div\r        initial={{ opacity: 0, y: 20 }}\r        animate={{ opacity: 1, y: 0 }}\r        transition={{ delay: 0.7 }}\r        className=\"quick-actions\"\r      >\r        <Card className=\"glass-morphism gradient-border\">\r          <Title level={4}>Hızlı İşlemler</Title>\r          <Row gutter={[16, 16]}>\r            {[\r              { icon: <TeamOutlined />, title: 'Yeni Tenant', color: '#1890ff' },\r              { icon: <UserOutlined />, title: 'Kullanıcı Ekle', color: '#52c41a' },\r              { icon: <DatabaseOutlined />, title: 'Backup Al', color: '#722ed1' },\r              { icon: <SettingOutlined />, title: 'Ayarlar', color: '#fa8c16' },\r            ].map((action, index) => (\r              <Col xs={12} sm={6} key={index}>\r                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\r                  <Button\r                    className=\"action-button\"\r                    icon={action.icon}\r                    size=\"large\"\r                    block\r                    style={{\r                      height: 80,\r                      background: `linear-gradient(135deg, ${action.color}15 0%, ${action.color}05 100%)`,\r                      border: `1px solid ${action.color}30`,\r                    }}\r                   aria-label=\"button\">\r                    <div style={{ marginTop: 8 }}>{action.title}</div>\r                  </Button>\r                </motion.div>\r              </Col>\r            ))}\r          </Row>\r        </Card>\r      </motion.div>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Dashboard/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect, useMemo, useCallback, lazy, Suspense } from 'react';\rimport {\r  Row,\r  Col,\r  Card,\r  Statistic,\r  Progress,\r  Table,\r  Tag,\r  Avatar,\r  Space,\r  Button,\r  Dropdown,\r  Select,\r  DatePicker,\r  Typography,\r  List,\r  Timeline,\r  Badge,\r  Tooltip,\r  Skeleton,\r  message,\r} from 'antd';\rimport {\r  ArrowUpOutlined,\r  ArrowDownOutlined,\r  UserOutlined,\r  TeamOutlined,\r  DollarOutlined,\r  ShoppingCartOutlined,\r  RiseOutlined,\r  FallOutlined,\r  MoreOutlined,\r  CalendarOutlined,\r  ClockCircleOutlined,\r  CheckCircleOutlined,\r  SyncOutlined,\r  ExportOutlined,\r  FilterOutlined,\r  FileTextOutlined,\r  CrownOutlined,\r  FireOutlined,\r  RocketOutlined,\r  ThunderboltOutlined,\r  HeartOutlined,\r  StarOutlined,\r  TrophyOutlined,\r  ApiOutlined,\r  WarningOutlined,\r  SettingOutlined,\r  DeleteOutlined,\r} from '@ant-design/icons';\r// Lazy load charts for better initial load performance\rconst Area = lazy(() => import('@ant-design/charts').then(module => ({ default: module.Area })));\rconst Pie = lazy(() => import('@ant-design/charts').then(module => ({ default: module.Pie })));\rimport CountUp from 'react-countup';\rimport { masterApi } from '@/shared/api/master.api';\rimport { dashboardApi } from '@/shared/api/dashboard.api';\rimport { useApiCache, prefetchApi } from '@/shared/hooks/useApiCache';\rimport { useDebounce } from '@/shared/utils/performance';\rimport './metronic-dashboard.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { RangePicker } = DatePicker;\rconst MetronicDashboard: React.FC = () => {\r  const [timeRange, setTimeRange] = useState('month');\r  const [searchQuery, setSearchQuery] = useState('');\r  // Use API cache for tenants\r  const {\r    data: tenantsData,\r    loading: loadingTenants,\r    error: tenantsError,\r    refetch: refetchTenants,\r    isStale: tenantsStale\r  } = useApiCache(\r    `dashboard-tenants-${timeRange}`,\r    async () => {\r      const response = await dashboardApi.topTenants.get();\r      if (response.data?.success && response.data?.data) {\r        return response.data.data.map((tenant: any, index: number) => ({\r          key: tenant.id,\r          rank: index + 1,\r          name: tenant.name,\r          plan: tenant.plan,\r          users: tenant.users,\r          revenue: tenant.revenue,\r          growth: tenant.growth,\r          status: tenant.status,\r        }));\r      }\r      return [];\r    },\r    { ttl: 5 * 60 * 1000, staleTime: 60 * 1000 }\r  );\r  // Use API cache for stats\r  const {\r    data: statsData,\r    loading: loadingStats,\r    error: statsError,\r    refetch: refetchStats,\r    isStale: statsStale\r  } = useApiCache(\r    `dashboard-stats-${timeRange}`,\r    async () => {\r      const response = await dashboardApi.stats.get();\r      if (response.data?.success && response.data?.data) {\r        const data = response.data.data;\r        return {\r          totalRevenue: data.totalRevenue,\r          activeTenants: data.activeTenants,\r          totalUsers: data.totalUsers,\r          activeUsers: data.activeUsers,\r          conversionRate: 68.3,\r          revenueChange: data.growth.revenue,\r          tenantsChange: data.growth.tenants,\r          usersChange: data.growth.users,\r          systemHealth: data.systemHealth,\r          packageDistribution: data.packageDistribution\r        };\r      }\r      return null;\r    },\r    { ttl: 5 * 60 * 1000, staleTime: 60 * 1000 }\r  );\r  const tenants = useMemo(() => tenantsData || [], [tenantsData]);\r  const stats = useMemo(() => statsData || {\r    totalRevenue: 524350,\r    activeTenants: 386,\r    totalUsers: 4823,\r    conversionRate: 68.3,\r  }, [statsData]);\r  // Prefetch data for next time range\r  useEffect(() => {\r    const nextTimeRange = timeRange === 'today' ? 'week' : \r                         timeRange === 'week' ? 'month' : \r                         timeRange === 'month' ? 'year' : 'today';\r    prefetchApi(\r      `dashboard-stats-${nextTimeRange}`,\r      () => dashboardApi.stats.get(),\r      5 * 60 * 1000\r    );\r  }, [timeRange]);\r  const handleRefresh = useCallback(async () => {\r    try {\r      await Promise.all([refetchTenants(), refetchStats()]);\r      message.success('Dashboard yenilendi');\r    } catch (error) {\r      message.error('Yenileme başarısız');\r    }\r  }, [refetchTenants, refetchStats]);\r  // Debounced search for tenants\r  const debouncedSearch = useDebounce((query: string) => {\r    // Filter tenants based on search query\r  }, 300);\r  const handleSearch = useCallback((value: string) => {\r    setSearchQuery(value);\r    debouncedSearch(value);\r  }, [debouncedSearch]);\r  // Filter tenants based on search\r  const filteredTenants = useMemo(() => {\r    if (!searchQuery) return tenants;\r    return tenants.filter(tenant => \r      tenant.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r      tenant.plan?.toLowerCase().includes(searchQuery.toLowerCase())\r    );\r  }, [tenants, searchQuery]);\r  // Stats Data - Memoized for performance\r  const statsCardData = useMemo(() => [\r    {\r      title: 'Toplam Gelir',\r      value: stats?.totalRevenue || 524350,\r      prefix: '',\r      change: stats?.revenueChange || 12.5,\r      changeType: (stats?.revenueChange || 12.5) > 0 ? 'increase' : 'decrease',\r      icon: <span style={{ fontSize: 24, fontWeight: 600 }}>₺</span>,\r      color: '#667eea',\r      bgColor: 'rgba(102, 126, 234, 0.1)',\r      description: 'geçen aya göre',\r    },\r    {\r      title: 'Aktif Tenantlar',\r      value: stats?.activeTenants || 386,\r      change: stats?.tenantsChange || 8.3,\r      changeType: (stats?.tenantsChange || 8.3) > 0 ? 'increase' : 'decrease',\r      icon: <TeamOutlined />,\r      color: '#50cd89',\r      bgColor: 'rgba(80, 205, 137, 0.1)',\r      description: 'bu ay yeni',\r    },\r    {\r      title: 'Toplam Kullanıcı',\r      value: stats?.totalUsers || 4823,\r      change: stats?.usersChange || 15.7,\r      changeType: (stats?.usersChange || 15.7) > 0 ? 'increase' : 'decrease',\r      icon: <UserOutlined />,\r      color: '#ffc700',\r      bgColor: 'rgba(255, 199, 0, 0.1)',\r      description: 'aktif kullanıcı',\r    },\r    {\r      title: 'Dönüşüm Oranı',\r      value: stats?.conversionRate || 68.3,\r      suffix: '%',\r      change: stats?.conversionChange || 3.2,\r      changeType: (stats?.conversionChange || -3.2) > 0 ? 'increase' : 'decrease',\r      icon: <RiseOutlined />,\r      color: '#f1416c',\r      bgColor: 'rgba(241, 65, 108, 0.1)',\r      description: 'denemelerden',\r    },\r  ], [stats]);\r  // Revenue Chart Data - Memoized\r  const revenueData = useMemo(() => [\r    { month: 'Jan', revenue: 320000, profit: 120000 },\r    { month: 'Feb', revenue: 385000, profit: 145000 },\r    { month: 'Mar', revenue: 412000, profit: 168000 },\r    { month: 'Apr', revenue: 445000, profit: 178000 },\r    { month: 'May', revenue: 478000, profit: 195000 },\r    { month: 'Jun', revenue: 524350, profit: 210000 },\r  ], []);\r  const revenueConfig = useMemo(() => ({\r    data: revenueData,\r    xField: 'month',\r    yField: 'revenue',\r    height: 300,\r    smooth: true,\r    color: 'l(0) 0:#667eea 1:#764ba2',\r    areaStyle: {\r      fillOpacity: 0.6,\r    },\r    xAxis: {\r      grid: null,\r    },\r    yAxis: {\r      label: {\r        formatter: (v: string) => `₺${parseInt(v) / 1000}k`,\r      },\r      grid: {\r        line: {\r          style: {\r            stroke: '#f0f0f0',\r            lineWidth: 1,\r            lineDash: [4, 4],\r          },\r        },\r      },\r    },\r    tooltip: {\r      customContent: (title: string, items: any[]) => {\r        return `<div style=\"padding: 8px;\">\r          <div style=\"margin-bottom: 4px; font-weight: 600;\">${title}</div>\r          ${items.map(item => \r            `<div style=\"color: ${item.color};\">Gelir: ₺${item.data.revenue.toLocaleString('tr-TR')}</div>\r             <div style=\"color: ${item.color};\">Kar: ₺${item.data.profit.toLocaleString('tr-TR')}</div>`\r          ).join('')}\r        </div>`;\r      },\r    },\r  }), [revenueData]);\r  // Tenant Distribution - Memoized\r  const tenantData = useMemo(() => [\r    { type: 'Enterprise', value: 45, percentage: 11.6 },\r    { type: 'Professional', value: 125, percentage: 32.4 },\r    { type: 'Starter', value: 186, percentage: 48.2 },\r    { type: 'Free Trial', value: 30, percentage: 7.8 },\r  ], []);\r  const pieConfig = useMemo(() => ({\r    data: tenantData,\r    angleField: 'value',\r    colorField: 'type',\r    radius: 0.8,\r    innerRadius: 0.6,\r    height: 300,\r    label: {\r      type: 'inner',\r      offset: '-50%',\r      content: '{value}',\r      style: {\r        textAlign: 'center',\r        fontSize: 14,\r        fill: '#fff',\r      },\r    },\r    color: ['#667eea', '#50cd89', '#ffc700', '#f1416c'],\r    interactions: [{ type: 'element-active' }],\r    statistic: {\r      title: false,\r      content: {\r        style: {\r          whiteSpace: 'pre-wrap',\r          overflow: 'hidden',\r          textOverflow: 'ellipsis',\r          fontSize: '24px',\r          fontWeight: 'bold',\r        },\r        content: '386\\nTenant',\r      },\r    },\r    legend: {\r      position: 'bottom',\r      flipPage: false,\r    },\r  }), [tenantData]);\r  // Recent Activities - Memoized\r  const activities = useMemo(() => [\r    {\r      type: 'success',\r      title: 'Yeni tenant kaydı',\r      description: 'TechCorp Solutions platforma katıldı',\r      time: '2 dakika önce',\r      user: 'John Doe',\r      avatar: null,\r    },\r    {\r      type: 'info',\r      title: 'Ödeme alındı',\r      description: 'Fatura #1234 ödendi',\r      time: '1 saat önce',\r      user: 'Jane Smith',\r      avatar: null,\r    },\r    {\r      type: 'warning',\r      title: 'Abonelik sona eriyor',\r      description: 'CloudFirst Inc aboneliği 3 gün içinde sona erecek',\r      time: '3 saat önce',\r      user: 'Sistem',\r      avatar: null,\r    },\r    {\r      type: 'error',\r      title: 'Ödeme başarısız',\r      description: 'StartupHub için ödeme işlenemedi',\r      time: '5 saat önce',\r      user: 'Sistem',\r      avatar: null,\r    },\r  ], []);\r  const columns = useMemo(() => [\r    {\r      title: '#',\r      dataIndex: 'rank',\r      key: 'rank',\r      width: 60,\r      fixed: 'left' as const,\r      render: (rank: number) => {\r        const icons = {\r          1: <TrophyOutlined style={{ color: '#ffd700', fontSize: 16 }} />,\r          2: <TrophyOutlined style={{ color: '#c0c0c0', fontSize: 16 }} />,\r          3: <TrophyOutlined style={{ color: '#cd7f32', fontSize: 16 }} />,\r        };\r        return (\r          <Space size=\"small\">\r            {icons[rank as keyof typeof icons]}\r            <span>#{rank}</span>\r          </Space>\r        );\r      },\r    },\r    {\r      title: 'Tenant',\r      dataIndex: 'name',\r      key: 'name',\r      width: 200,\r      ellipsis: true,\r      render: (name: string, record: any) => (\r        <Space size=\"small\">\r          <Avatar size=\"small\" style={{ backgroundColor: '#667eea' }}>\r            {name ? name.substring(0, 2).toUpperCase() : 'NA'}\r          </Avatar>\r          <div style={{ lineHeight: 1.2 }}>\r            <div style={{ fontWeight: 500 }}>{name || 'İsimsiz'}</div>\r            <Tag \r              style={{ marginTop: 4, fontSize: 11 }}\r              color={record.plan === 'Enterprise' ? 'purple' : record.plan === 'Professional' ? 'blue' : record.plan === 'Starter' ? 'green' : 'default'}\r            >\r              {record.plan}\r            </Tag>\r          </div>\r        </Space>\r      ),\r    },\r    {\r      title: 'Kullanıcı',\r      dataIndex: 'users',\r      key: 'users',\r      width: 100,\r      align: 'center' as const,\r      render: (users: number) => (\r        <Badge count={users} showZero overflowCount={999} style={{ backgroundColor: '#667eea' }} />\r      ),\r    },\r    {\r      title: 'Gelir',\r      dataIndex: 'revenue',\r      key: 'revenue',\r      width: 120,\r      align: 'right' as const,\r      render: (revenue: number) => (\r        <span style={{ color: '#50cd89', fontWeight: 500 }}>\r          ₺{revenue.toLocaleString('tr-TR')}\r        </span>\r      ),\r    },\r    {\r      title: 'Büyüme',\r      dataIndex: 'growth',\r      key: 'growth',\r      width: 100,\r      align: 'center' as const,\r      render: (growth: number) => (\r        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 4 }}>\r          {growth > 0 ? (\r            <ArrowUpOutlined style={{ color: '#50cd89', fontSize: 12 }} />\r          ) : (\r            <ArrowDownOutlined style={{ color: '#f1416c', fontSize: 12 }} />\r          )}\r          <span style={{ color: growth > 0 ? '#50cd89' : '#f1416c', fontWeight: 500 }}>\r            {Math.abs(growth).toFixed(1)}%\r          </span>\r        </div>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      width: 90,\r      align: 'center' as const,\r      render: (status: string) => (\r        <Tag \r          style={{ margin: 0, fontSize: 11 }}\r          color={status === 'active' ? 'success' : 'error'}\r        >\r          {status === 'active' ? 'AKTİF' : 'ASKIDA'}\r        </Tag>\r      ),\r    },\r    {\r      title: '',\r      key: 'action',\r      width: 50,\r      fixed: 'right' as const,\r      render: () => (\r        <Dropdown\r          menu={{\r            items: [\r              { key: 'view', label: 'Detaylar', icon: <FileTextOutlined /> },\r              { key: 'edit', label: 'Düzenle', icon: <SettingOutlined /> },\r              { type: 'divider' },\r              { key: 'delete', label: 'Sil', icon: <DeleteOutlined />, danger: true },\r            ],\r          }}\r          trigger={['click']}\r          placement=\"bottomRight\"\r        >\r          <Button \r            type=\"text\" \r            size=\"small\"\r            icon={<MoreOutlined />} \r            style={{ padding: '4px 8px' }}\r          / aria-label=\"more outlined\">\r        </Dropdown>\r      ),\r    },\r  ], []);\r  return (\r    <div className=\"metronic-dashboard\">\r      {/* Page Header */}\r      <div className=\"dashboard-header\">\r        <div className=\"header-content\">\r          <Title level={3} className=\"page-title\">Dashboard</Title>\r          <Paragraph className=\"page-description\">\r            Hoş geldiniz! Platformunuzda bugün neler oluyor.\r          </Paragraph>\r        </div>\r        <div className=\"header-actions\">\r          <Space>\r            <Select\r              value={timeRange}\r              onChange={setTimeRange}\r              style={{ width: 120 }}\r             aria-label=\"select field\">\r              <Select.Option value=\"today\" aria-label=\"select field\">Bugün</Select.Option>\r              <Select.Option value=\"week\" aria-label=\"select field\">Bu Hafta</Select.Option>\r              <Select.Option value=\"month\" aria-label=\"select field\">Bu Ay</Select.Option>\r              <Select.Option value=\"year\" aria-label=\"select field\">Bu Yıl</Select.Option>\r            </Select>\r            <RangePicker />\r            <Button icon={<ExportOutlined />} aria-label=\"export outlined\">Dışa Aktar</Button>\r            <Button \r              type=\"primary\" \r              icon={<SyncOutlined spin={loadingStats || loadingTenants} / aria-label=\"sync outlined\">} \r              onClick={handleRefresh} \r              loading={loadingStats || loadingTenants}\r            >\r              {(tenantsStale || statsStale) ? 'Güncelle' : 'Yenile'}\r            </Button>\r          </Space>\r        </div>\r      </div>\r      {/* Stats Cards */}\r      <Row gutter={[32, 32]} className=\"stats-row\">\r        {statsCardData.map((stat, index) => (\r          <Col xs={24} sm={12} xl={6} key={index}>\r            <Card className=\"stat-card\" loading={loadingStats}>\r              <div className=\"stat-card-content\">\r                <div className=\"stat-icon\" style={{ backgroundColor: stat.bgColor, color: stat.color }}>\r                  {stat.icon}\r                </div>\r                <div className=\"stat-details\">\r                  <Text className=\"stat-title\">{stat.title}</Text>\r                  <div className=\"stat-value\">\r                    {stat.prefix && <span className=\"currency-symbol\">{stat.prefix}</span>}\r                    <CountUp\r                      end={stat.value}\r                      duration={2}\r                      separator=\",\"\r                      decimals={stat.suffix === '%' ? 1 : 0}\r                    />\r                    {stat.suffix && <span className=\"stat-suffix\">{stat.suffix}</span>}\r                  </div>\r                  <div className=\"stat-change\">\r                    {stat.changeType === 'increase' ? (\r                      <ArrowUpOutlined style={{ color: '#50cd89' }} />\r                    ) : (\r                      <ArrowDownOutlined style={{ color: '#f1416c' }} />\r                    )}\r                    <span className={`change-value ${stat.changeType}`}>\r                      {stat.change}%\r                    </span>\r                    <span className=\"change-description\">{stat.description}</span>\r                  </div>\r                </div>\r              </div>\r            </Card>\r          </Col>\r        ))}\r      </Row>\r      {/* Charts Row */}\r      <Row gutter={[32, 32]} className=\"charts-row\">\r        <Col xs={24} lg={16}>\r          <Card\r            title=\"Gelir Özeti\"\r            extra={\r              <Space>\r                <Button type=\"text\" icon={<FilterOutlined />} aria-label=\"filter outlined\">Filtrele</Button>\r                <Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r              </Space>\r            }\r            className=\"chart-card\"\r            loading={loadingStats}\r          >\r            <Suspense fallback={<Skeleton active paragraph={{ rows: 8 }} />}>\r              <Area {...revenueConfig} />\r            </Suspense>\r          </Card>\r        </Col>\r        <Col xs={24} lg={8}>\r          <Card\r            title=\"Tenant Dağılımı\"\r            extra={<Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">}\r            className=\"chart-card\"\r            loading={loadingStats}\r          >\r            <Suspense fallback={<Skeleton active paragraph={{ rows: 8 }} />}>\r              <Pie {...pieConfig} />\r            </Suspense>\r          </Card>\r        </Col>\r      </Row>\r      {/* Tables Row */}\r      <Row gutter={[32, 32]} className=\"tables-row\">\r        <Col xs={24} lg={16}>\r          <Card\r            title=\"En İyi Performans Gösteren Tenantlar\"\r            extra={\r              <Space>\r                <Button type=\"text\">Tümünü Gör</Button>\r                <Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r              </Space>\r            }\r            className=\"table-card\"\r          >\r            <Table\r              columns={columns}\r              dataSource={filteredTenants}\r              pagination={{\r                pageSize: 10,\r                showSizeChanger: false,\r                showTotal: (total) => `Toplam ${total} tenant`,\r              }}\r              loading={loadingTenants}\r              scroll={{ x: 800 }}\r              size=\"small\"\r              rowClassName=\"table-row-hover\"\r            />\r          </Card>\r        </Col>\r        <Col xs={24} xl={8} lg={24}>\r          <Card\r            title=\"Son Aktiviteler\"\r            extra={<Button type=\"text\">Tümünü Gör</Button>}\r            className=\"activity-card\"\r            loading={loadingStats}\r          >\r            <Timeline>\r              {activities.map((activity, index) => (\r                <Timeline.Item\r                  key={index}\r                  color={\r                    activity.type === 'success' ? 'green' :\r                    activity.type === 'info' ? 'blue' :\r                    activity.type === 'warning' ? 'orange' : 'red'\r                  }\r                >\r                  <div className=\"activity-item\">\r                    <Text strong>{activity.title}</Text>\r                    <br />\r                    <Text type=\"secondary\">{activity.description}</Text>\r                    <br />\r                    <Space className=\"activity-meta\">\r                      <ClockCircleOutlined />\r                      <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                        {activity.time}\r                      </Text>\r                      {activity.user && (\r                        <>\r                          <span>•</span>\r                          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                            {activity.user} tarafından\r                          </Text>\r                        </>\r                      )}\r                    </Space>\r                  </div>\r                </Timeline.Item>\r              ))}\r            </Timeline>\r          </Card>\r        </Col>\r      </Row>\r      {/* Quick Stats */}\r      <Row gutter={[24, 24]} className=\"quick-stats-row\">\r        <Col xs={24}>\r          <Card title=\"Platform Performansı\" className=\"performance-card\">\r            <Row gutter={[24, 24]}>\r              <Col xs={24} sm={12} md={6}>\r                <div className=\"performance-metric\">\r                  <div className=\"metric-header\">\r                    <Text type=\"secondary\">Sunucu Çalışma Süresi</Text>\r                    <CheckCircleOutlined style={{ color: '#50cd89' }} />\r                  </div>\r                  <Progress percent={99.9} strokeColor=\"#50cd89\" />\r                  <Text strong>%99.9 Çalışma</Text>\r                </div>\r              </Col>\r              <Col xs={24} sm={12} md={6}>\r                <div className=\"performance-metric\">\r                  <div className=\"metric-header\">\r                    <Text type=\"secondary\">Yanıt Süresi</Text>\r                    <ThunderboltOutlined style={{ color: '#ffc700' }} />\r                  </div>\r                  <Progress percent={85} strokeColor=\"#ffc700\" />\r                  <Text strong>245ms Ortalama</Text>\r                </div>\r              </Col>\r              <Col xs={24} sm={12} md={6}>\r                <div className=\"performance-metric\">\r                  <div className=\"metric-header\">\r                    <Text type=\"secondary\">API Çağrıları</Text>\r                    <ApiOutlined style={{ color: '#667eea' }} />\r                  </div>\r                  <Progress percent={68} strokeColor=\"#667eea\" />\r                  <Text strong>Bugün 1.2M</Text>\r                </div>\r              </Col>\r              <Col xs={24} sm={12} md={6}>\r                <div className=\"performance-metric\">\r                  <div className=\"metric-header\">\r                    <Text type=\"secondary\">Hata Oranı</Text>\r                    <WarningOutlined style={{ color: '#f1416c' }} />\r                  </div>\r                  <Progress percent={2} strokeColor=\"#f1416c\" />\r                  <Text strong>%0.02 Hata</Text>\r                </div>\r              </Col>\r            </Row>\r          </Card>\r        </Col>\r      </Row>\r    </div>\r  );\r};\rexport default MetronicDashboard;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Dashboard/MetronicDashboard.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Box,\r  Card,\r  CardContent,\r  Typography,\r  Button,\r  Grid,\r  List,\r  ListItem,\r  ListItemText,\r  ListItemIcon,\r  ListItemSecondaryAction,\r  IconButton,\r  Dialog,\r  DialogTitle,\r  DialogContent,\r  DialogActions,\r  TextField,\r  Select,\r  MenuItem,\r  FormControl,\r  InputLabel,\r  Alert,\r  CircularProgress,\r  Chip,\r  Paper,\r  Divider,\r  Tooltip,\r  Switch,\r  FormControlLabel,\r  Tab,\r  Tabs,\r  SelectChangeEvent,\r  Table,\r  TableBody,\r  TableCell,\r  TableContainer,\r  TableHead,\r  TableRow,\r  TablePagination,\r  Accordion,\r  AccordionSummary,\r  AccordionDetails,\r  ToggleButton,\r  ToggleButtonGroup\r} from '@mui/material';\rimport {\r  Email as EmailIcon,\r  Edit as EditIcon,\r  Delete as DeleteIcon,\r  FileCopy as FileCopyIcon,\r  Visibility as VisibilityIcon,\r  Send as SendIcon,\r  Code as CodeIcon,\r  Preview as PreviewIcon,\r  Settings as SettingsIcon,\r  Language as LanguageIcon,\r  History as HistoryIcon,\r  Check as CheckIcon,\r  Close as CloseIcon,\r  ExpandMore as ExpandMoreIcon,\r  AddCircle as AddIcon,\r  ColorLens as ColorLensIcon,\r  TextFields as TextFieldsIcon,\r  Image as ImageIcon,\r  AttachFile as AttachFileIcon,\r  Schedule as ScheduleIcon,\r  Group as GroupIcon,\r  PersonAdd as PersonAddIcon,\r  ShoppingCart as ShoppingCartIcon,\r  Receipt as ReceiptIcon,\r  Lock as LockIcon,\r  NotificationsActive as NotificationIcon,\r  Campaign as CampaignIcon,\r  Badge as BadgeIcon,\r  Celebration as CelebrationIcon\r} from '@mui/icons-material';\rimport { useTheme } from '@mui/material/styles';\rimport { format, parseISO } from 'date-fns';\rimport { tr } from 'date-fns/locale';\rimport Editor from '@monaco-editor/react';\rinterface EmailTemplate {\r  id: string;\r  name: string;\r  subject: string;\r  category: 'system' | 'marketing' | 'transaction' | 'notification';\r  type: 'welcome' | 'password_reset' | 'verification' | 'invoice' | 'payment' | 'subscription' | 'notification' | 'custom';\r  status: 'active' | 'draft' | 'archived';\r  language: 'tr' | 'en' | 'de' | 'fr';\r  htmlContent: string;\r  textContent: string;\r  variables: string[];\r  attachments: string[];\r  createdAt: string;\r  updatedAt: string;\r  usageCount: number;\r  lastUsed?: string;\r  tags: string[];\r}\rinterface EmailVariable {\r  name: string;\r  description: string;\r  defaultValue: string;\r  required: boolean;\r  type: 'text' | 'number' | 'date' | 'boolean' | 'url' | 'email';\r}\rinterface EmailHistory {\r  id: string;\r  templateId: string;\r  sentTo: string;\r  sentAt: string;\r  status: 'sent' | 'delivered' | 'opened' | 'clicked' | 'bounced' | 'failed';\r  openedAt?: string;\r  clickedAt?: string;\r}\rinterface TabPanelProps {\r  children?: React.ReactNode;\r  index: number;\r  value: number;\r}\rfunction TabPanel(props: TabPanelProps) {\r  const { children, value, index, ...other } = props;\r  return (\r    <div role=\"tabpanel\" hidden={value !== index} {...other}>\r      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r    </div>\r  );\r}\rconst EmailTemplateManagement: React.FC = () => {\r  const theme = useTheme();\r  const [tabValue, setTabValue] = useState(0);\r  const [templates, setTemplates] = useState<EmailTemplate[]>([]);\r  const [selectedTemplate, setSelectedTemplate] = useState<EmailTemplate | null>(null);\r  const [loading, setLoading] = useState(false);\r  const [openTemplateDialog, setOpenTemplateDialog] = useState(false);\r  const [openPreviewDialog, setOpenPreviewDialog] = useState(false);\r  const [openTestDialog, setOpenTestDialog] = useState(false);\r  const [editMode, setEditMode] = useState(false);\r  const [viewMode, setViewMode] = useState<'html' | 'text' | 'split'>('split');\r  const [page, setPage] = useState(0);\r  const [rowsPerPage, setRowsPerPage] = useState(10);\r  const [filterCategory, setFilterCategory] = useState<string>('all');\r  const [filterStatus, setFilterStatus] = useState<string>('all');\r  const [templateForm, setTemplateForm] = useState({\r    name: '',\r    subject: '',\r    category: 'notification' as 'system' | 'marketing' | 'transaction' | 'notification',\r    type: 'custom' as any,\r    status: 'draft' as 'active' | 'draft' | 'archived',\r    language: 'tr' as 'tr' | 'en' | 'de' | 'fr',\r    htmlContent: '',\r    textContent: '',\r    variables: [] as string[],\r    tags: [] as string[]\r  });\r  const [testForm, setTestForm] = useState({\r    recipientEmail: '',\r    variables: {} as Record<string, string>\r  });\r  const availableVariables: EmailVariable[] = [\r    { name: 'userName', description: 'Kullanıcı adı', defaultValue: 'Kullanıcı', required: true, type: 'text' },\r    { name: 'userEmail', description: 'Kullanıcı e-postası', defaultValue: 'user@example.com', required: true, type: 'email' },\r    { name: 'companyName', description: 'Şirket adı', defaultValue: 'Stocker', required: false, type: 'text' },\r    { name: 'activationLink', description: 'Aktivasyon linki', defaultValue: 'https://...', required: false, type: 'url' },\r    { name: 'invoiceNumber', description: 'Fatura numarası', defaultValue: 'INV-001', required: false, type: 'text' },\r    { name: 'amount', description: 'Tutar', defaultValue: '100.00', required: false, type: 'number' },\r    { name: 'date', description: 'Tarih', defaultValue: '2024-01-15', required: false, type: 'date' }\r  ];\r  useEffect(() => {\r    loadTemplates();\r  }, []);\r  const loadTemplates = () => {\r    setLoading(true);\r    const mockTemplates: EmailTemplate[] = [\r      {\r        id: '1',\r        name: 'Hoş Geldin E-postası',\r        subject: 'Stocker\\'a Hoş Geldiniz!',\r        category: 'system',\r        type: 'welcome',\r        status: 'active',\r        language: 'tr',\r        htmlContent: '<h1>Hoş Geldiniz {{userName}}!</h1><p>Stocker ailesine katıldığınız için teşekkür ederiz.</p>',\r        textContent: 'Hoş Geldiniz {{userName}}! Stocker ailesine katıldığınız için teşekkür ederiz.',\r        variables: ['userName', 'companyName', 'activationLink'],\r        attachments: [],\r        createdAt: '2024-01-10T10:00:00Z',\r        updatedAt: '2024-01-14T15:30:00Z',\r        usageCount: 245,\r        lastUsed: '2024-01-15T09:00:00Z',\r        tags: ['welcome', 'onboarding', 'activation']\r      },\r      {\r        id: '2',\r        name: 'Şifre Sıfırlama',\r        subject: 'Şifre Sıfırlama Talebi',\r        category: 'system',\r        type: 'password_reset',\r        status: 'active',\r        language: 'tr',\r        htmlContent: '<h2>Şifre Sıfırlama</h2><p>Merhaba {{userName}},</p><p>Şifrenizi sıfırlamak için <a href=\"{{resetLink}}\">buraya tıklayın</a>.</p>',\r        textContent: 'Merhaba {{userName}}, Şifrenizi sıfırlamak için linke tıklayın: {{resetLink}}',\r        variables: ['userName', 'resetLink'],\r        attachments: [],\r        createdAt: '2024-01-08T10:00:00Z',\r        updatedAt: '2024-01-12T11:00:00Z',\r        usageCount: 89,\r        lastUsed: '2024-01-15T08:30:00Z',\r        tags: ['security', 'password', 'reset']\r      },\r      {\r        id: '3',\r        name: 'Fatura Bildirimi',\r        subject: 'Faturanız Hazır - {{invoiceNumber}}',\r        category: 'transaction',\r        type: 'invoice',\r        status: 'active',\r        language: 'tr',\r        htmlContent: '<h2>Fatura Detayları</h2><p>Sayın {{userName}},</p><p>{{invoiceNumber}} numaralı faturanız hazırlanmıştır. Tutar: {{amount}} TL</p>',\r        textContent: 'Sayın {{userName}}, {{invoiceNumber}} numaralı faturanız hazırlanmıştır. Tutar: {{amount}} TL',\r        variables: ['userName', 'invoiceNumber', 'amount', 'date'],\r        attachments: ['invoice.pdf'],\r        createdAt: '2024-01-05T10:00:00Z',\r        updatedAt: '2024-01-13T14:00:00Z',\r        usageCount: 567,\r        lastUsed: '2024-01-15T10:00:00Z',\r        tags: ['billing', 'invoice', 'payment']\r      },\r      {\r        id: '4',\r        name: 'Kampanya Duyurusu',\r        subject: '🎉 Özel Kampanya - %30 İndirim!',\r        category: 'marketing',\r        type: 'custom',\r        status: 'draft',\r        language: 'tr',\r        htmlContent: '<div style=\"text-align:center;\"><h1>Özel Kampanya!</h1><p>Tüm paketlerde %30 indirim...</p></div>',\r        textContent: 'Özel Kampanya! Tüm paketlerde %30 indirim...',\r        variables: ['userName', 'discountCode'],\r        attachments: [],\r        createdAt: '2024-01-14T10:00:00Z',\r        updatedAt: '2024-01-14T16:00:00Z',\r        usageCount: 0,\r        tags: ['marketing', 'campaign', 'discount']\r      }\r    ];\r    setTemplates(mockTemplates);\r    setLoading(false);\r  };\r  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {\r    setTabValue(newValue);\r  };\r  const handleCreateTemplate = () => {\r    setEditMode(false);\r    setTemplateForm({\r      name: '',\r      subject: '',\r      category: 'notification',\r      type: 'custom',\r      status: 'draft',\r      language: 'tr',\r      htmlContent: '',\r      textContent: '',\r      variables: [],\r      tags: []\r    });\r    setOpenTemplateDialog(true);\r  };\r  const handleEditTemplate = (template: EmailTemplate) => {\r    setEditMode(true);\r    setSelectedTemplate(template);\r    setTemplateForm({\r      name: template.name,\r      subject: template.subject,\r      category: template.category,\r      type: template.type,\r      status: template.status,\r      language: template.language,\r      htmlContent: template.htmlContent,\r      textContent: template.textContent,\r      variables: template.variables,\r      tags: template.tags\r    });\r    setOpenTemplateDialog(true);\r  };\r  const handlePreviewTemplate = (template: EmailTemplate) => {\r    setSelectedTemplate(template);\r    setOpenPreviewDialog(true);\r  };\r  const handleTestTemplate = (template: EmailTemplate) => {\r    setSelectedTemplate(template);\r    setTestForm({\r      recipientEmail: '',\r      variables: template.variables.reduce((acc, v) => ({ ...acc, [v]: '' }), {})\r    });\r    setOpenTestDialog(true);\r  };\r  const handleDeleteTemplate = (id: string) => {\r    setTemplates(templates.filter(t => t.id !== id));\r  };\r  const handleDuplicateTemplate = (template: EmailTemplate) => {\r    const newTemplate = {\r      ...template,\r      id: Date.now().toString(),\r      name: `${template.name} (Kopya)`,\r      status: 'draft' as const,\r      usageCount: 0,\r      createdAt: new Date().toISOString(),\r      updatedAt: new Date().toISOString()\r    };\r    setTemplates([...templates, newTemplate]);\r  };\r  const getCategoryIcon = (category: string) => {\r    switch (category) {\r      case 'system':\r        return <SettingsIcon />;\r      case 'marketing':\r        return <CampaignIcon />;\r      case 'transaction':\r        return <ReceiptIcon />;\r      case 'notification':\r        return <NotificationIcon />;\r      default:\r        return <EmailIcon />;\r    }\r  };\r  const getTypeIcon = (type: string) => {\r    switch (type) {\r      case 'welcome':\r        return <CelebrationIcon />;\r      case 'password_reset':\r        return <LockIcon />;\r      case 'verification':\r        return <CheckIcon />;\r      case 'invoice':\r        return <ReceiptIcon />;\r      case 'payment':\r        return <ShoppingCartIcon />;\r      case 'subscription':\r        return <BadgeIcon />;\r      case 'notification':\r        return <NotificationIcon />;\r      default:\r        return <EmailIcon />;\r    }\r  };\r  const getStatusColor = (status: string) => {\r    switch (status) {\r      case 'active':\r        return 'success';\r      case 'draft':\r        return 'warning';\r      case 'archived':\r        return 'default';\r      default:\r        return 'default';\r    }\r  };\r  const filteredTemplates = templates.filter(template => {\r    if (filterCategory !== 'all' && template.category !== filterCategory) return false;\r    if (filterStatus !== 'all' && template.status !== filterStatus) return false;\r    return true;\r  });\r  const defaultHtmlTemplate = `<!DOCTYPE html>\r<html>\r<head>\r    <style>\r        body { font-family: Arial, sans-serif; }\r        .container { max-width: 600px; margin: 0 auto; padding: 20px; }\r        .header { background-color: #1976d2; color: white; padding: 20px; text-align: center; }\r        .content { padding: 20px; background-color: #f5f5f5; }\r        .footer { padding: 10px; text-align: center; color: #666; }\r    </style>\r</head>\r<body>\r    <div class=\"container\">\r        <div class=\"header\">\r            <h1>{{subject}}</h1>\r        </div>\r        <div class=\"content\">\r            <p>Merhaba {{userName}},</p>\r            <p>İçerik buraya gelecek...</p>\r        </div>\r        <div class=\"footer\">\r            <p>&copy; 2024 Stocker. Tüm hakları saklıdır.</p>\r        </div>\r    </div>\r</body>\r</html>`;\r  return (\r    <Box>\r      <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r        <Typography variant=\"h4\" fontWeight=\"bold\">\r          E-posta Şablon Yönetimi\r        </Typography>\r        <Button\r          variant=\"contained\"\r          startIcon={<AddIcon />}\r          onClick={handleCreateTemplate}\r        >\r          Yeni Şablon\r        </Button>\r      </Box>\r      <Paper elevation={0} sx={{ mb: 3 }}>\r        <Grid container spacing={3}>\r          <Grid item xs={12} md={3}>\r            <Card>\r              <CardContent>\r                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r                  <EmailIcon sx={{ mr: 2, color: theme.palette.primary.main }} />\r                  <Typography variant=\"h6\">Toplam Şablon</Typography>\r                </Box>\r                <Typography variant=\"h3\" fontWeight=\"bold\">\r                  {templates.length}\r                </Typography>\r                <Typography color=\"text.secondary\" variant=\"body2\">\r                  {templates.filter(t => t.status === 'active').length} aktif\r                </Typography>\r              </CardContent>\r            </Card>\r          </Grid>\r          <Grid item xs={12} md={3}>\r            <Card>\r              <CardContent>\r                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r                  <SendIcon sx={{ mr: 2, color: theme.palette.success.main }} />\r                  <Typography variant=\"h6\">Gönderimler</Typography>\r                </Box>\r                <Typography variant=\"h3\" fontWeight=\"bold\">\r                  {templates.reduce((acc, t) => acc + t.usageCount, 0)}\r                </Typography>\r                <Typography color=\"text.secondary\" variant=\"body2\">\r                  Toplam gönderim\r                </Typography>\r              </CardContent>\r            </Card>\r          </Grid>\r          <Grid item xs={12} md={3}>\r            <Card>\r              <CardContent>\r                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r                  <LanguageIcon sx={{ mr: 2, color: theme.palette.warning.main }} />\r                  <Typography variant=\"h6\">Diller</Typography>\r                </Box>\r                <Typography variant=\"h3\" fontWeight=\"bold\">\r                  4\r                </Typography>\r                <Typography color=\"text.secondary\" variant=\"body2\">\r                  TR, EN, DE, FR\r                </Typography>\r              </CardContent>\r            </Card>\r          </Grid>\r          <Grid item xs={12} md={3}>\r            <Card>\r              <CardContent>\r                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r                  <HistoryIcon sx={{ mr: 2, color: theme.palette.info.main }} />\r                  <Typography variant=\"h6\">Son Güncelleme</Typography>\r                </Box>\r                <Typography variant=\"h6\" fontWeight=\"bold\">\r                  Bugün\r                </Typography>\r                <Typography color=\"text.secondary\" variant=\"body2\">\r                  3 şablon güncellendi\r                </Typography>\r              </CardContent>\r            </Card>\r          </Grid>\r        </Grid>\r      </Paper>\r      <Paper>\r        <Box sx={{ p: 2, display: 'flex', gap: 2, borderBottom: 1, borderColor: 'divider' }}>\r          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\r            <InputLabel aria-label=\"input field\">Kategori</InputLabel>\r            <Select\r              value={filterCategory}\r              label=\"Kategori\"\r              onChange={(e) = aria-label=\"select field\"> setFilterCategory(e.target.value)}\r            >\r              <MenuItem value=\"all\">Tümü</MenuItem>\r              <MenuItem value=\"system\">Sistem</MenuItem>\r              <MenuItem value=\"marketing\">Pazarlama</MenuItem>\r              <MenuItem value=\"transaction\">İşlem</MenuItem>\r              <MenuItem value=\"notification\">Bildirim</MenuItem>\r            </Select>\r          </FormControl>\r          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\r            <InputLabel aria-label=\"input field\">Durum</InputLabel>\r            <Select\r              value={filterStatus}\r              label=\"Durum\"\r              onChange={(e) = aria-label=\"select field\"> setFilterStatus(e.target.value)}\r            >\r              <MenuItem value=\"all\">Tümü</MenuItem>\r              <MenuItem value=\"active\">Aktif</MenuItem>\r              <MenuItem value=\"draft\">Taslak</MenuItem>\r              <MenuItem value=\"archived\">Arşivlenmiş</MenuItem>\r            </Select>\r          </FormControl>\r        </Box>\r        <TableContainer>\r          <Table>\r            <TableHead>\r              <TableRow>\r                <TableCell>Şablon Adı</TableCell>\r                <TableCell>Kategori</TableCell>\r                <TableCell>Tür</TableCell>\r                <TableCell>Durum</TableCell>\r                <TableCell>Dil</TableCell>\r                <TableCell>Kullanım</TableCell>\r                <TableCell>Son Kullanım</TableCell>\r                <TableCell align=\"right\">İşlemler</TableCell>\r              </TableRow>\r            </TableHead>\r            <TableBody>\r              {filteredTemplates\r                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r                .map((template) => (\r                  <TableRow key={template.id}>\r                    <TableCell>\r                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r                        {getTypeIcon(template.type)}\r                        <Box sx={{ ml: 2 }}>\r                          <Typography variant=\"body1\">{template.name}</Typography>\r                          <Typography variant=\"caption\" color=\"text.secondary\">\r                            {template.subject}\r                          </Typography>\r                        </Box>\r                      </Box>\r                    </TableCell>\r                    <TableCell>\r                      <Chip\r                        icon={getCategoryIcon(template.category)}\r                        label={template.category}\r                        size=\"small\"\r                        variant=\"outlined\"\r                      />\r                    </TableCell>\r                    <TableCell>{template.type}</TableCell>\r                    <TableCell>\r                      <Chip\r                        label={template.status}\r                        color={getStatusColor(template.status) as any}\r                        size=\"small\"\r                      />\r                    </TableCell>\r                    <TableCell>\r                      <Chip label={template.language.toUpperCase()} size=\"small\" />\r                    </TableCell>\r                    <TableCell>{template.usageCount}</TableCell>\r                    <TableCell>\r                      {template.lastUsed\r                        ? format(parseISO(template.lastUsed), 'dd MMM HH:mm', { locale: tr })\r                        : '-'}\r                    </TableCell>\r                    <TableCell align=\"right\">\r                      <Tooltip title=\"Önizle\">\r                        <IconButton size=\"small\" onClick={() => handlePreviewTemplate(template)}>\r                          <VisibilityIcon />\r                        </IconButton>\r                      </Tooltip>\r                      <Tooltip title=\"Düzenle\">\r                        <IconButton size=\"small\" onClick={() => handleEditTemplate(template)}>\r                          <EditIcon />\r                        </IconButton>\r                      </Tooltip>\r                      <Tooltip title=\"Test Et\">\r                        <IconButton size=\"small\" onClick={() => handleTestTemplate(template)}>\r                          <SendIcon />\r                        </IconButton>\r                      </Tooltip>\r                      <Tooltip title=\"Kopyala\">\r                        <IconButton size=\"small\" onClick={() => handleDuplicateTemplate(template)}>\r                          <FileCopyIcon />\r                        </IconButton>\r                      </Tooltip>\r                      <Tooltip title=\"Sil\">\r                        <IconButton size=\"small\" onClick={() => handleDeleteTemplate(template.id)}>\r                          <DeleteIcon />\r                        </IconButton>\r                      </Tooltip>\r                    </TableCell>\r                  </TableRow>\r                ))}\r            </TableBody>\r          </Table>\r        </TableContainer>\r        <TablePagination\r          rowsPerPageOptions={[5, 10, 25]}\r          component=\"div\"\r          count={filteredTemplates.length}\r          rowsPerPage={rowsPerPage}\r          page={page}\r          onPageChange={(_e, newPage) => setPage(newPage)}\r          onRowsPerPageChange={(e) => {\r            setRowsPerPage(parseInt(e.target.value, 10));\r            setPage(0);\r          }}\r        />\r      </Paper>\r      {/* Template Dialog */}\r      <Dialog open={openTemplateDialog} onClose={() => setOpenTemplateDialog(false)} maxWidth=\"lg\" fullWidth>\r        <DialogTitle>\r          {editMode ? 'Şablonu Düzenle' : 'Yeni Şablon Oluştur'}\r        </DialogTitle>\r        <DialogContent>\r          <Grid container spacing={2} sx={{ mt: 1 }}>\r            <Grid item xs={12} md={6}>\r              <TextField\r                fullWidth\r                label=\"Şablon Adı\"\r                value={templateForm.name}\r                onChange={(e) => setTemplateForm({ ...templateForm, name: e.target.value })}\r              />\r            </Grid>\r            <Grid item xs={12} md={6}>\r              <TextField\r                fullWidth\r                label=\"Konu\"\r                value={templateForm.subject}\r                onChange={(e) => setTemplateForm({ ...templateForm, subject: e.target.value })}\r                helperText=\"Değişken kullanabilirsiniz: {{variable}}\"\r              />\r            </Grid>\r            <Grid item xs={6} md={3}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Kategori</InputLabel>\r                <Select\r                  value={templateForm.category}\r                  label=\"Kategori\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setTemplateForm({ ...templateForm, category: e.target.value as any })}\r                >\r                  <MenuItem value=\"system\">Sistem</MenuItem>\r                  <MenuItem value=\"marketing\">Pazarlama</MenuItem>\r                  <MenuItem value=\"transaction\">İşlem</MenuItem>\r                  <MenuItem value=\"notification\">Bildirim</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={6} md={3}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Tür</InputLabel>\r                <Select\r                  value={templateForm.type}\r                  label=\"Tür\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setTemplateForm({ ...templateForm, type: e.target.value as any })}\r                >\r                  <MenuItem value=\"welcome\">Hoş Geldin</MenuItem>\r                  <MenuItem value=\"password_reset\">Şifre Sıfırlama</MenuItem>\r                  <MenuItem value=\"verification\">Doğrulama</MenuItem>\r                  <MenuItem value=\"invoice\">Fatura</MenuItem>\r                  <MenuItem value=\"payment\">Ödeme</MenuItem>\r                  <MenuItem value=\"subscription\">Abonelik</MenuItem>\r                  <MenuItem value=\"notification\">Bildirim</MenuItem>\r                  <MenuItem value=\"custom\">Özel</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={6} md={3}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Durum</InputLabel>\r                <Select\r                  value={templateForm.status}\r                  label=\"Durum\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setTemplateForm({ ...templateForm, status: e.target.value as any })}\r                >\r                  <MenuItem value=\"active\">Aktif</MenuItem>\r                  <MenuItem value=\"draft\">Taslak</MenuItem>\r                  <MenuItem value=\"archived\">Arşivlenmiş</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={6} md={3}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Dil</InputLabel>\r                <Select\r                  value={templateForm.language}\r                  label=\"Dil\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setTemplateForm({ ...templateForm, language: e.target.value as any })}\r                >\r                  <MenuItem value=\"tr\">Türkçe</MenuItem>\r                  <MenuItem value=\"en\">English</MenuItem>\r                  <MenuItem value=\"de\">Deutsch</MenuItem>\r                  <MenuItem value=\"fr\">Français</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={12}>\r              <Box sx={{ mb: 2 }}>\r                <Typography variant=\"subtitle2\" gutterBottom>\r                  Kullanılabilir Değişkenler:\r                </Typography>\r                <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\r                  {availableVariables.map((variable) => (\r                    <Chip\r                      key={variable.name}\r                      label={`{{${variable.name}}}`}\r                      size=\"small\"\r                      onClick={() => {\r                        navigator.clipboard.writeText(`{{${variable.name}}}`);\r                      }}\r                      title={variable.description}\r                    />\r                  ))}\r                </Box>\r              </Box>\r            </Grid>\r            <Grid item xs={12}>\r              <Box sx={{ border: 1, borderColor: 'divider', borderRadius: 1 }}>\r                <Box sx={{ p: 1, borderBottom: 1, borderColor: 'divider' }}>\r                  <ToggleButtonGroup\r                    value={viewMode}\r                    exclusive\r                    onChange={(_e, newMode) => newMode && setViewMode(newMode)}\r                    size=\"small\"\r                  >\r                    <ToggleButton value=\"html\">HTML</ToggleButton>\r                    <ToggleButton value=\"text\">Text</ToggleButton>\r                    <ToggleButton value=\"split\">Bölünmüş</ToggleButton>\r                  </ToggleButtonGroup>\r                </Box>\r                <Box sx={{ display: 'flex', height: 400 }}>\r                  {(viewMode === 'html' || viewMode === 'split') && (\r                    <Box sx={{ flex: viewMode === 'split' ? 1 : '1 1 100%', borderRight: viewMode === 'split' ? 1 : 0, borderColor: 'divider' }}>\r                      <Editor\r                        height=\"100%\"\r                        defaultLanguage=\"html\"\r                        value={templateForm.htmlContent || defaultHtmlTemplate}\r                        onChange={(value) => setTemplateForm({ ...templateForm, htmlContent: value || '' })}\r                        theme={theme.palette.mode === 'dark' ? 'vs-dark' : 'light'}\r                        options={{\r                          minimap: { enabled: false },\r                          fontSize: 14,\r                          wordWrap: 'on'\r                        }}\r                      />\r                    </Box>\r                  )}\r                  {(viewMode === 'text' || viewMode === 'split') && (\r                    <Box sx={{ flex: viewMode === 'split' ? 1 : '1 1 100%' }}>\r                      <TextField\r                        fullWidth\r                        multiline\r                        rows={16}\r                        value={templateForm.textContent}\r                        onChange={(e) => setTemplateForm({ ...templateForm, textContent: e.target.value })}\r                        placeholder=\"Düz metin versiyonu...\"\r                        sx={{ '& .MuiInputBase-root': { height: '100%' } }}\r                      />\r                    </Box>\r                  )}\r                </Box>\r              </Box>\r            </Grid>\r            <Grid item xs={12}>\r              <TextField\r                fullWidth\r                label=\"Etiketler\"\r                placeholder=\"Virgülle ayırın: etiket1, etiket2\"\r                value={templateForm.tags.join(', ')}\r                onChange={(e) => setTemplateForm({ \r                  ...templateForm, \r                  tags: e.target.value.split(',').map(t => t.trim()).filter(t => t) \r                })}\r              />\r            </Grid>\r          </Grid>\r        </DialogContent>\r        <DialogActions>\r          <Button onClick={() => setOpenTemplateDialog(false)}>İptal</Button>\r          <Button variant=\"contained\" startIcon={editMode ? <EditIcon /> : <AddIcon />}>\r            {editMode ? 'Güncelle' : 'Oluştur'}\r          </Button>\r        </DialogActions>\r      </Dialog>\r      {/* Preview Dialog */}\r      <Dialog open={openPreviewDialog} onClose={() => setOpenPreviewDialog(false)} maxWidth=\"md\" fullWidth>\r        <DialogTitle>Şablon Önizleme</DialogTitle>\r        <DialogContent>\r          {selectedTemplate && (\r            <Box>\r              <Tabs value={0} sx={{ borderBottom: 1, borderColor: 'divider' }}>\r                <Tab label=\"HTML Önizleme\" />\r                <Tab label=\"Metin Önizleme\" />\r              </Tabs>\r              <Box sx={{ mt: 2, p: 2, border: 1, borderColor: 'divider', borderRadius: 1, bgcolor: 'white' }}>\r                <div dangerouslySetInnerHTML={{ __html: selectedTemplate.htmlContent }} />\r              </Box>\r            </Box>\r          )}\r        </DialogContent>\r        <DialogActions>\r          <Button onClick={() => setOpenPreviewDialog(false)}>Kapat</Button>\r        </DialogActions>\r      </Dialog>\r      {/* Test Dialog */}\r      <Dialog open={openTestDialog} onClose={() => setOpenTestDialog(false)} maxWidth=\"sm\" fullWidth>\r        <DialogTitle>E-posta Test Gönderimi</DialogTitle>\r        <DialogContent>\r          <Grid container spacing={2} sx={{ mt: 1 }}>\r            <Grid item xs={12}>\r              <TextField\r                fullWidth\r                label=\"Alıcı E-posta\"\r                type=\"email\"\r                value={testForm.recipientEmail}\r                onChange={(e) => setTestForm({ ...testForm, recipientEmail: e.target.value })}\r              />\r            </Grid>\r            {selectedTemplate?.variables.map((variable) => (\r              <Grid item xs={12} key={variable}>\r                <TextField\r                  fullWidth\r                  label={variable}\r                  value={testForm.variables[variable] || ''}\r                  onChange={(e) => setTestForm({\r                    ...testForm,\r                    variables: { ...testForm.variables, [variable]: e.target.value }\r                  })}\r                />\r              </Grid>\r            ))}\r          </Grid>\r        </DialogContent>\r        <DialogActions>\r          <Button onClick={() => setOpenTestDialog(false)}>İptal</Button>\r          <Button variant=\"contained\" startIcon={<SendIcon />}>\r            Test E-postası Gönder\r          </Button>\r        </DialogActions>\r      </Dialog>\r    </Box>\r  );\r};\r// Export both the old and new versions\rexport default EmailTemplateManagement;\rexport { default as ProfessionalEmailTemplates } from './ProfessionalEmailTemplates';",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/EmailTemplates/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Table,\r  Button,\r  Space,\r  Tag,\r  Input,\r  DatePicker,\r  Select,\r  Row,\r  Col,\r  Statistic,\r  Badge,\r  Dropdown,\r  Modal,\r  message,\r  Tooltip,\r  Typography,\r  Divider,\r} from 'antd';\rimport {\r  SearchOutlined,\r  DownloadOutlined,\r  PrinterOutlined,\r  EyeOutlined,\r  MailOutlined,\r  CheckCircleOutlined,\r  ClockCircleOutlined,\r  CloseCircleOutlined,\r  DollarOutlined,\r  FileTextOutlined,\r  FilterOutlined,\r  ExportOutlined,\r  PlusOutlined,\r} from '@ant-design/icons';\rimport type { ColumnsType } from 'antd/es/table';\rimport dayjs from 'dayjs';\rconst { RangePicker } = DatePicker;\rconst { Title, Text } = Typography;\rinterface Invoice {\r  id: string;\r  invoiceNumber: string;\r  tenant: string;\r  tenantId: string;\r  amount: number;\r  tax: number;\r  total: number;\r  status: 'paid' | 'pending' | 'overdue' | 'cancelled';\r  dueDate: string;\r  issueDate: string;\r  paymentDate?: string;\r  paymentMethod?: string;\r  items: Array<{\r    description: string;\r    quantity: number;\r    unitPrice: number;\r    total: number;\r  }>;\r}\rconst MasterInvoicesPage: React.FC = () => {\r  const [invoices, setInvoices] = useState<Invoice[]>([]);\r  const [loading, setLoading] = useState(false);\r  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);\r  const [detailModalVisible, setDetailModalVisible] = useState(false);\r  const [filters, setFilters] = useState({\r    search: '',\r    status: 'all',\r    dateRange: null as any,\r  });\r  // Mock data\r  useEffect(() => {\r    const mockInvoices: Invoice[] = [\r      {\r        id: '1',\r        invoiceNumber: 'INV-2024-001',\r        tenant: 'TechCorp Solutions',\r        tenantId: 'tenant-1',\r        amount: 2500,\r        tax: 450,\r        total: 2950,\r        status: 'paid',\r        dueDate: '2024-02-15',\r        issueDate: '2024-01-15',\r        paymentDate: '2024-02-10',\r        paymentMethod: 'Credit Card',\r        items: [\r          { description: 'Enterprise Package - Monthly', quantity: 1, unitPrice: 2500, total: 2500 }\r        ]\r      },\r      {\r        id: '2',\r        invoiceNumber: 'INV-2024-002',\r        tenant: 'Global Retail Inc',\r        tenantId: 'tenant-2',\r        amount: 1500,\r        tax: 270,\r        total: 1770,\r        status: 'pending',\r        dueDate: '2024-02-20',\r        issueDate: '2024-01-20',\r        items: [\r          { description: 'Professional Package - Monthly', quantity: 1, unitPrice: 1500, total: 1500 }\r        ]\r      },\r      {\r        id: '3',\r        invoiceNumber: 'INV-2024-003',\r        tenant: 'StartUp Hub',\r        tenantId: 'tenant-3',\r        amount: 500,\r        tax: 90,\r        total: 590,\r        status: 'overdue',\r        dueDate: '2024-01-25',\r        issueDate: '2023-12-25',\r        items: [\r          { description: 'Starter Package - Monthly', quantity: 1, unitPrice: 500, total: 500 }\r        ]\r      },\r    ];\r    setInvoices(mockInvoices);\r  }, []);\r  const handleViewDetails = (invoice: Invoice) => {\r    setSelectedInvoice(invoice);\r    setDetailModalVisible(true);\r  };\r  const handleSendInvoice = (invoice: Invoice) => {\r    message.success(`Fatura ${invoice.tenant} firmasına gönderildi`);\r  };\r  const handleDownloadInvoice = (invoice: Invoice) => {\r    message.info(`${invoice.invoiceNumber} numaralı fatura indiriliyor...`);\r  };\r  const handleMarkAsPaid = (invoice: Invoice) => {\r    Modal.confirm({\r      title: 'Ödeme Onayı',\r      content: `${invoice.invoiceNumber} numaralı faturayı ödendi olarak işaretlemek istediğinize emin misiniz?`,\r      onOk: () => {\r        message.success('Fatura ödendi olarak işaretlendi');\r      },\r    });\r  };\r  const columns: ColumnsType<Invoice> = [\r    {\r      title: 'Fatura No',\r      dataIndex: 'invoiceNumber',\r      key: 'invoiceNumber',\r      render: (text) => <a>{text}</a>,\r    },\r    {\r      title: 'Firma',\r      dataIndex: 'tenant',\r      key: 'tenant',\r    },\r    {\r      title: 'Tutar',\r      dataIndex: 'total',\r      key: 'total',\r      render: (value) => (\r        <Text strong>₺{value.toLocaleString('tr-TR')}</Text>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status) => {\r        const statusConfig = {\r          paid: { color: 'success', text: 'Ödendi', icon: <CheckCircleOutlined /> },\r          pending: { color: 'warning', text: 'Bekliyor', icon: <ClockCircleOutlined /> },\r          overdue: { color: 'error', text: 'Gecikmiş', icon: <CloseCircleOutlined /> },\r          cancelled: { color: 'default', text: 'İptal', icon: <CloseCircleOutlined /> },\r        };\r        const config = statusConfig[status];\r        return (\r          <Tag color={config.color} icon={config.icon}>\r            {config.text}\r          </Tag>\r        );\r      },\r    },\r    {\r      title: 'Düzenleme Tarihi',\r      dataIndex: 'issueDate',\r      key: 'issueDate',\r      render: (date) => dayjs(date).format('DD.MM.YYYY'),\r    },\r    {\r      title: 'Son Ödeme',\r      dataIndex: 'dueDate',\r      key: 'dueDate',\r      render: (date, record) => {\r        const isOverdue = dayjs(date).isBefore(dayjs()) && record.status === 'pending';\r        return (\r          <Text type={isOverdue ? 'danger' : undefined}>\r            {dayjs(date).format('DD.MM.YYYY')}\r          </Text>\r        );\r      },\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      render: (_, record) => (\r        <Space size=\"middle\">\r          <Tooltip title=\"Detaylar\">\r            <Button\r              type=\"text\"\r              icon={<EyeOutlined />}\r              onClick={() = aria-label=\"eye outlined\"> handleViewDetails(record)}\r            />\r          </Tooltip>\r          <Tooltip title=\"İndir\">\r            <Button\r              type=\"text\"\r              icon={<DownloadOutlined />}\r              onClick={() = aria-label=\"download outlined\"> handleDownloadInvoice(record)}\r            />\r          </Tooltip>\r          <Tooltip title=\"E-posta Gönder\">\r            <Button\r              type=\"text\"\r              icon={<MailOutlined />}\r              onClick={() = aria-label=\"mail outlined\"> handleSendInvoice(record)}\r            />\r          </Tooltip>\r          {record.status === 'pending' && (\r            <Tooltip title=\"Ödendi Olarak İşaretle\">\r              <Button\r                type=\"text\"\r                icon={<CheckCircleOutlined />}\r                onClick={() = aria-label=\"check circle outlined\"> handleMarkAsPaid(record)}\r              />\r            </Tooltip>\r          )}\r        </Space>\r      ),\r    },\r  ];\r  const stats = {\r    total: invoices.length,\r    paid: invoices.filter(i => i.status === 'paid').length,\r    pending: invoices.filter(i => i.status === 'pending').length,\r    overdue: invoices.filter(i => i.status === 'overdue').length,\r    totalAmount: invoices.reduce((sum, i) => sum + i.total, 0),\r    paidAmount: invoices.filter(i => i.status === 'paid').reduce((sum, i) => sum + i.total, 0),\r    pendingAmount: invoices.filter(i => i.status === 'pending').reduce((sum, i) => sum + i.total, 0),\r  };\r  return (\r    <div className=\"master-invoices-page\">\r      <Row gutter={[24, 24]}>\r        {/* Statistics Cards */}\r        <Col span={24}>\r          <Row gutter={[16, 16]}>\r            <Col xs={24} sm={12} lg={6}>\r              <Card>\r                <Statistic\r                  title=\"Toplam Fatura\"\r                  value={stats.total}\r                  prefix={<FileTextOutlined />}\r                />\r              </Card>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <Card>\r                <Statistic\r                  title=\"Ödenen\"\r                  value={stats.paid}\r                  valueStyle={{ color: '#3f8600' }}\r                  prefix={<CheckCircleOutlined />}\r                />\r              </Card>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <Card>\r                <Statistic\r                  title=\"Bekleyen\"\r                  value={stats.pending}\r                  valueStyle={{ color: '#faad14' }}\r                  prefix={<ClockCircleOutlined />}\r                />\r              </Card>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <Card>\r                <Statistic\r                  title=\"Toplam Tutar\"\r                  value={stats.totalAmount}\r                  prefix=\"₺\"\r                  precision={2}\r                />\r              </Card>\r            </Col>\r          </Row>\r        </Col>\r        {/* Main Content */}\r        <Col span={24}>\r          <Card\r            title=\"Faturalar\"\r            extra={\r              <Space>\r                <Button icon={<ExportOutlined />} aria-label=\"export outlined\">Dışa Aktar</Button>\r                <Button type=\"primary\" icon={<PlusOutlined />} aria-label=\"plus outlined\">\r                  Yeni Fatura\r                </Button>\r              </Space>\r            }\r          >\r            {/* Filters */}\r            <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\r              <Col xs={24} sm={12} lg={8}>\r                <Input\r                  placeholder=\"Fatura no veya firma adı ile ara...\"\r                  prefix={<SearchOutlined / aria-label=\"input field\">}\r                  value={filters.search}\r                  onChange={(e) => setFilters({ ...filters, search: e.target.value })}\r                />\r              </Col>\r              <Col xs={24} sm={12} lg={6}>\r                <Select\r                  style={{ width: '100%' }}\r                  placeholder=\"Durum\"\r                  value={filters.status}\r                  onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, status: value })}\r                >\r                  <Select.Option value=\"all\" aria-label=\"select field\">Tümü</Select.Option>\r                  <Select.Option value=\"paid\" aria-label=\"select field\">Ödendi</Select.Option>\r                  <Select.Option value=\"pending\" aria-label=\"select field\">Bekliyor</Select.Option>\r                  <Select.Option value=\"overdue\" aria-label=\"select field\">Gecikmiş</Select.Option>\r                  <Select.Option value=\"cancelled\" aria-label=\"select field\">İptal</Select.Option>\r                </Select>\r              </Col>\r              <Col xs={24} sm={12} lg={8}>\r                <RangePicker\r                  style={{ width: '100%' }}\r                  placeholder={['Başlangıç', 'Bitiş']}\r                  onChange={(dates) => setFilters({ ...filters, dateRange: dates })}\r                />\r              </Col>\r              <Col xs={24} sm={12} lg={2}>\r                <Button icon={<FilterOutlined />} block aria-label=\"filter outlined\">\r                  Filtrele\r                </Button>\r              </Col>\r            </Row>\r            {/* Table */}\r            <Table\r              columns={columns}\r              dataSource={invoices}\r              rowKey=\"id\"\r              loading={loading}\r              pagination={{\r                pageSize: 10,\r                showSizeChanger: true,\r                showTotal: (total) => `Toplam ${total} fatura`,\r              }}\r            />\r          </Card>\r        </Col>\r      </Row>\r      {/* Invoice Detail Modal */}\r      <Modal\r        title={`Fatura Detayı - ${selectedInvoice?.invoiceNumber}`}\r        open={detailModalVisible}\r        onCancel={() => setDetailModalVisible(false)}\r        width={700}\r        footer={[\r          <Button key=\"close\" onClick={() => setDetailModalVisible(false)}>\r            Kapat\r          </Button>,\r          <Button key=\"print\" icon={<PrinterOutlined />} aria-label=\"printer outlined\">\r            Yazdır\r          </Button>,\r          <Button key=\"download\" type=\"primary\" icon={<DownloadOutlined />} aria-label=\"download outlined\">\r            İndir\r          </Button>,\r        ]}\r      >\r        {selectedInvoice && (\r          <div>\r            <Row gutter={[16, 16]}>\r              <Col span={12}>\r                <Text type=\"secondary\">Firma:</Text>\r                <Title level={5}>{selectedInvoice.tenant}</Title>\r              </Col>\r              <Col span={12}>\r                <Text type=\"secondary\">Durum:</Text>\r                <div>\r                  {selectedInvoice.status === 'paid' && (\r                    <Tag color=\"success\" icon={<CheckCircleOutlined />}>Ödendi</Tag>\r                  )}\r                  {selectedInvoice.status === 'pending' && (\r                    <Tag color=\"warning\" icon={<ClockCircleOutlined />}>Bekliyor</Tag>\r                  )}\r                  {selectedInvoice.status === 'overdue' && (\r                    <Tag color=\"error\" icon={<CloseCircleOutlined />}>Gecikmiş</Tag>\r                  )}\r                </div>\r              </Col>\r            </Row>\r            <Divider />\r            <Table\r              dataSource={selectedInvoice.items}\r              columns={[\r                { title: 'Açıklama', dataIndex: 'description', key: 'description' },\r                { title: 'Miktar', dataIndex: 'quantity', key: 'quantity' },\r                { title: 'Birim Fiyat', dataIndex: 'unitPrice', key: 'unitPrice', render: (v) => `₺${v}` },\r                { title: 'Toplam', dataIndex: 'total', key: 'total', render: (v) => `₺${v}` },\r              ]}\r              pagination={false}\r              rowKey=\"description\"\r            />\r            <Divider />\r            <Row justify=\"end\">\r              <Col>\r                <Space direction=\"vertical\" align=\"end\">\r                  <Text>Ara Toplam: ₺{selectedInvoice.amount}</Text>\r                  <Text>KDV (%18): ₺{selectedInvoice.tax}</Text>\r                  <Title level={4}>Toplam: ₺{selectedInvoice.total}</Title>\r                </Space>\r              </Col>\r            </Row>\r          </div>\r        )}\r      </Modal>\r    </div>\r  );\r};\rexport default MasterInvoicesPage;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Invoices/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { Card, Table, Tag, Button, Space, Select, DatePicker, Input, Modal, message, Tabs, Statistic, Row, Col, Progress } from 'antd';\rimport { ReloadOutlined, DownloadOutlined, FileTextOutlined, WarningOutlined, InfoCircleOutlined, CloseCircleOutlined, CheckCircleOutlined, DeleteOutlined, EyeOutlined } from '@ant-design/icons';\rimport type { ColumnsType } from 'antd/es/table';\rimport { api } from '@/services/api';\rimport './styles.css';\rconst { Option } = Select;\rconst { RangePicker } = DatePicker;\rconst { Search } = Input;\rconst { TabPane } = Tabs;\rinterface LogEntry {\r  id: number;\r  message: string;\r  level: string;\r  timeStamp: string;\r  exception?: string;\r  properties?: string;\r}\rinterface LogFile {\r  name: string;\r  size: number;\r  sizeFormatted: string;\r  lastModified: string;\r  type: string;\r}\rinterface LogStats {\r  level: string;\r  count: number;\r  lastOccurrence: string;\r}\rexport const LogsPage: React.FC = () => {\r  const [logs, setLogs] = useState<LogEntry[]>([]);\r  const [files, setFiles] = useState<LogFile[]>([]);\r  const [stats, setStats] = useState<LogStats[]>([]);\r  const [loading, setLoading] = useState(false);\r  const [selectedLevel, setSelectedLevel] = useState<string | undefined>();\r  const [dateRange, setDateRange] = useState<[any, any] | null>(null);\r  const [searchText, setSearchText] = useState('');\r  const [viewModalVisible, setViewModalVisible] = useState(false);\r  const [fileContent, setFileContent] = useState('');\r  const [selectedFile, setSelectedFile] = useState<string>('');\r  useEffect(() => {\r    fetchLogs();\r    fetchFiles();\r    fetchStats();\r  }, []);\r  const fetchLogs = async () => {\r    setLoading(true);\r    try {\r      const params: any = {\r        pageSize: 100,\r        page: 1\r      };\r      if (selectedLevel) params.level = selectedLevel;\r      if (dateRange && dateRange[0]) params.from = dateRange[0].format('YYYY-MM-DD');\r      if (dateRange && dateRange[1]) params.to = dateRange[1].format('YYYY-MM-DD');\r      const response = await api.get('/api/admin/logs/recent', { params });\r      setLogs(response.data.logs);\r    } catch (error) {\r      message.error('Loglar yüklenirken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const fetchFiles = async () => {\r    try {\r      const response = await api.get('/api/admin/logs/files');\r      setFiles(response.data.files);\r    } catch (error) {\r    }\r  };\r  const fetchStats = async () => {\r    try {\r      const response = await api.get('/api/admin/logs/stats');\r      setStats(response.data.stats);\r    } catch (error) {\r    }\r  };\r  const viewFile = async (fileName: string) => {\r    setLoading(true);\r    try {\r      const response = await api.get(`/api/admin/logs/files/${fileName}/content`, {\r        params: { lines: 500 }\r      });\r      setFileContent(response.data.content);\r      setSelectedFile(fileName);\r      setViewModalVisible(true);\r    } catch (error) {\r      message.error('Dosya içeriği yüklenemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const downloadFile = (fileName: string) => {\r    window.open(`${api.defaults.baseURL}/api/admin/logs/files/${fileName}`, '_blank');\r  };\r  const clearOldLogs = async () => {\r    Modal.confirm({\r      title: 'Eski Logları Temizle',\r      content: '30 günden eski tüm loglar silinecek. Emin misiniz?',\r      okText: 'Evet, Sil',\r      cancelText: 'İptal',\r      okType: 'danger',\r      onOk: async () => {\r        try {\r          const response = await api.delete('/api/admin/logs/clear?daysToKeep=30');\r          message.success(response.data.message);\r          fetchLogs();\r          fetchFiles();\r          fetchStats();\r        } catch (error) {\r          message.error('Log temizleme başarısız');\r        }\r      }\r    });\r  };\r  const getLevelTag = (level: string) => {\r    const levelMap: Record<string, { color: string; icon: React.ReactNode }> = {\r      'Error': { color: 'error', icon: <CloseCircleOutlined /> },\r      'Warning': { color: 'warning', icon: <WarningOutlined /> },\r      'Information': { color: 'processing', icon: <InfoCircleOutlined /> },\r      'Debug': { color: 'default', icon: <InfoCircleOutlined /> },\r      'Fatal': { color: 'error', icon: <CloseCircleOutlined /> }\r    };\r    const config = levelMap[level] || { color: 'default', icon: null };\r    return (\r      <Tag color={config.color}>\r        {config.icon} {level}\r      </Tag>\r    );\r  };\r  const columns: ColumnsType<LogEntry> = [\r    {\r      title: 'Zaman',\r      dataIndex: 'timeStamp',\r      key: 'timeStamp',\r      width: 180,\r      render: (text: string) => new Date(text).toLocaleString('tr-TR')\r    },\r    {\r      title: 'Seviye',\r      dataIndex: 'level',\r      key: 'level',\r      width: 120,\r      render: getLevelTag\r    },\r    {\r      title: 'Mesaj',\r      dataIndex: 'message',\r      key: 'message',\r      ellipsis: true\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      width: 100,\r      render: (_, record) => (\r        <Button\r          size=\"small\"\r          icon={<EyeOutlined />}\r          onClick={() = aria-label=\"eye outlined\"> {\r            Modal.info({\r              title: 'Log Detayı',\r              width: 800,\r              content: (\r                <div>\r                  <p><strong>Mesaj:</strong> {record.message}</p>\r                  {record.exception && (\r                    <pre style={{ background: '#f0f0f0', padding: 10, borderRadius: 4 }}>\r                      {record.exception}\r                    </pre>\r                  )}\r                  {record.properties && (\r                    <pre style={{ background: '#f0f0f0', padding: 10, borderRadius: 4 }}>\r                      {JSON.stringify(JSON.parse(record.properties), null, 2)}\r                    </pre>\r                  )}\r                </div>\r              )\r            });\r          }}\r        >\r          Detay\r        </Button>\r      )\r    }\r  ];\r  const fileColumns: ColumnsType<LogFile> = [\r    {\r      title: 'Dosya Adı',\r      dataIndex: 'name',\r      key: 'name',\r      render: (text) => <><FileTextOutlined /> {text}</>\r    },\r    {\r      title: 'Boyut',\r      dataIndex: 'sizeFormatted',\r      key: 'size',\r      width: 100\r    },\r    {\r      title: 'Son Değişiklik',\r      dataIndex: 'lastModified',\r      key: 'lastModified',\r      width: 180,\r      render: (text: string) => new Date(text).toLocaleString('tr-TR')\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      width: 150,\r      render: (_, record) => (\r        <Space>\r          <Button\r            size=\"small\"\r            icon={<EyeOutlined />}\r            onClick={() = aria-label=\"eye outlined\"> viewFile(record.name)}\r          >\r            Görüntüle\r          </Button>\r          <Button\r            size=\"small\"\r            icon={<DownloadOutlined />}\r            onClick={() = aria-label=\"download outlined\"> downloadFile(record.name)}\r          >\r            İndir\r          </Button>\r        </Space>\r      )\r    }\r  ];\r  const getStatColor = (level: string) => {\r    const colors: Record<string, string> = {\r      'Error': '#ff4d4f',\r      'Warning': '#faad14',\r      'Information': '#1890ff',\r      'Debug': '#52c41a'\r    };\r    return colors[level] || '#666';\r  };\r  return (\r    <div className=\"logs-page\">\r      <Card title=\"Log Yönetimi\" className=\"logs-header\">\r        <Row gutter={16}>\r          {stats.map((stat) => (\r            <Col span={6} key={stat.level}>\r              <Card>\r                <Statistic\r                  title={stat.level}\r                  value={stat.count}\r                  valueStyle={{ color: getStatColor(stat.level) }}\r                  suffix=\"log\"\r                />\r                <Progress\r                  percent={(stat.count / stats.reduce((a, b) => a + b.count, 0)) * 100}\r                  strokeColor={getStatColor(stat.level)}\r                  showInfo={false}\r                />\r              </Card>\r            </Col>\r          ))}\r        </Row>\r      </Card>\r      <Card className=\"logs-content\">\r        <Tabs defaultActiveKey=\"1\">\r          <TabPane tab=\"Canlı Loglar\" key=\"1\">\r            <Space style={{ marginBottom: 16 }}>\r              <Select\r                style={{ width: 150 }}\r                placeholder=\"Seviye\"\r                allowClear\r                onChange={setSelectedLevel}\r               aria-label=\"select field\">\r                <Option value=\"Error\">Error</Option>\r                <Option value=\"Warning\">Warning</Option>\r                <Option value=\"Information\">Information</Option>\r                <Option value=\"Debug\">Debug</Option>\r              </Select>\r              <RangePicker onChange={(dates) => setDateRange(dates as [any, any])} />\r              <Search\r                placeholder=\"Ara...\"\r                onSearch={setSearchText}\r                style={{ width: 200 }}\r              />\r              <Button icon={<ReloadOutlined />} onClick={fetchLogs} aria-label=\"reload outlined\">\r                Yenile\r              </Button>\r              <Button danger icon={<DeleteOutlined />} onClick={clearOldLogs} aria-label=\"delete outlined\">\r                Eski Logları Temizle\r              </Button>\r            </Space>\r            <Table\r              columns={columns}\r              dataSource={logs}\r              loading={loading}\r              rowKey=\"id\"\r              pagination={{ pageSize: 50 }}\r              scroll={{ x: 800 }}\r            />\r          </TabPane>\r          <TabPane tab=\"Log Dosyaları\" key=\"2\">\r            <Table\r              columns={fileColumns}\r              dataSource={files}\r              rowKey=\"name\"\r              pagination={false}\r            />\r          </TabPane>\r        </Tabs>\r      </Card>\r      <Modal\r        title={`Log Dosyası: ${selectedFile}`}\r        visible={viewModalVisible}\r        onCancel={() => setViewModalVisible(false)}\r        width={1000}\r        footer={[\r          <Button key=\"close\" onClick={() => setViewModalVisible(false)}>\r            Kapat\r          </Button>\r        ]}\r      >\r        <pre style={{ \r          maxHeight: 500, \r          overflow: 'auto', \r          background: '#f0f0f0', \r          padding: 10,\r          fontSize: 12\r        }}>\r          {fileContent}\r        </pre>\r      </Modal>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Logs/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { Card, Table, Button, Space, Tag, message, Modal, Spin, Alert, Tooltip, Badge, Divider } from 'antd';\rimport { SyncOutlined, CheckCircleOutlined, ExclamationCircleOutlined, DatabaseOutlined, HistoryOutlined, ThunderboltOutlined } from '@ant-design/icons';\rimport api from '@/services/api';\rimport Swal from 'sweetalert2';\rimport './styles.css';\rinterface TenantMigration {\r  tenantId: string;\r  tenantName: string;\r  tenantCode: string;\r  pendingMigrations: string[];\r  appliedMigrations: string[];\r  hasPendingMigrations: boolean;\r  error?: string;\r}\rinterface MigrationResult {\r  tenantId: string;\r  tenantName: string;\r  success: boolean;\r  message: string;\r  appliedMigrations?: string[];\r  error?: string;\r}\rconst MigrationsPage: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [applyingTo, setApplyingTo] = useState<string | null>(null);\r  const [migrations, setMigrations] = useState<TenantMigration[]>([]);\r  const [selectedTenant, setSelectedTenant] = useState<TenantMigration | null>(null);\r  const [historyModalVisible, setHistoryModalVisible] = useState(false);\r  useEffect(() => {\r    fetchMigrations();\r  }, []);\r  const fetchMigrations = async () => {\r    setLoading(true);\r    try {\r      const response = await api.get('/api/master/migrations/pending');\r      setMigrations(response.data.data || []);\r    } catch (error) {\r      message.error('Migration durumu alınamadı');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const applyMigrationToTenant = async (tenantId: string, tenantName: string) => {\r    const result = await Swal.fire({\r      title: 'Migration Uygula',\r      html: `\r        <div>\r          <p><strong>${tenantName}</strong> tenant'ına migration'lar uygulanacak.</p>\r          <div style=\"background-color: #fff2e8; border: 1px solid #faad14; border-radius: 4px; padding: 12px; margin-top: 12px;\">\r            <strong style=\"color: #faad14;\">⚠️ Dikkat</strong><br/>\r            Bu işlem database şemasını değiştirecektir. İşlem geri alınamaz!\r          </div>\r        </div>\r      `,\r      icon: 'warning',\r      showCancelButton: true,\r      confirmButtonText: 'Uygula',\r      cancelButtonText: 'İptal',\r      confirmButtonColor: '#ff4d4f',\r      showLoaderOnConfirm: true,\r      preConfirm: async () => {\r        try {\r          const response = await api.post(`/api/master/migrations/apply/${tenantId}`);\r          return response.data;\r        } catch (error: any) {\r          Swal.showValidationMessage(\r            `Hata: ${error.response?.data?.message || error.message || 'Migration uygulanamadı'}`\r          );\r          throw error;\r        }\r      },\r      allowOutsideClick: () => !Swal.isLoading()\r    });\r    if (result.isConfirmed) {\r      setApplyingTo(tenantId);\r      await Swal.fire({\r        title: 'Başarılı!',\r        html: `\r          <div>\r            <p>${result.value.message || 'Migration başarıyla uygulandı'}</p>\r            ${result.value.appliedMigrations && result.value.appliedMigrations.length > 0 ? `\r              <div style=\"margin-top: 12px; text-align: left;\">\r                <strong>Uygulanan Migration'lar:</strong>\r                <ul style=\"margin-top: 8px;\">\r                  ${result.value.appliedMigrations.map((m: string) => `<li>${m}</li>`).join('')}\r                </ul>\r              </div>\r            ` : ''}\r          </div>\r        `,\r        icon: 'success',\r        confirmButtonColor: '#52c41a'\r      });\r      await fetchMigrations();\r      setApplyingTo(null);\r    }\r  };\r  const applyMigrationsToAll = async () => {\r    const result = await Swal.fire({\r      title: 'Tüm Tenantlara Migration Uygula',\r      html: `\r        <div>\r          <p>Tüm aktif tenant'lara bekleyen migration'lar uygulanacak.</p>\r          <div style=\"background-color: #fff1f0; border: 1px solid #ff4d4f; border-radius: 4px; padding: 12px; margin-top: 12px;\">\r            <strong style=\"color: #ff4d4f;\">🚨 Kritik İşlem</strong><br/>\r            Bu işlem TÜM tenant database'lerini güncelleyecektir. İşlem geri alınamaz ve uzun sürebilir!\r          </div>\r        </div>\r      `,\r      icon: 'error',\r      showCancelButton: true,\r      confirmButtonText: 'Tümüne Uygula',\r      cancelButtonText: 'İptal',\r      confirmButtonColor: '#ff4d4f',\r      showLoaderOnConfirm: true,\r      preConfirm: async () => {\r        try {\r          const response = await api.post('/api/master/migrations/apply-all');\r          return response.data;\r        } catch (error: any) {\r          Swal.showValidationMessage(\r            `Hata: ${error.response?.data?.message || error.message || 'Migrationlar uygulanamadı'}`\r          );\r          throw error;\r        }\r      },\r      allowOutsideClick: () => !Swal.isLoading()\r    });\r    if (result.isConfirmed) {\r      setLoading(true);\r      // Show results\r      let resultsHtml = `<p>${result.value.message}</p><hr/>`;\r      resultsHtml += '<div style=\"max-height: 400px; overflow: auto; text-align: left;\">';\r      result.value.results.forEach((res: MigrationResult) => {\r        const icon = res.success ? '✅' : '❌';\r        const color = res.success ? '#52c41a' : '#ff4d4f';\r        resultsHtml += `\r          <div style=\"margin-bottom: 12px; padding: 8px; border-left: 3px solid ${color};\">\r            <span>${icon}</span>\r            <strong>${res.tenantName}:</strong> ${res.message}\r            ${res.error ? `<div style=\"color: #ff4d4f; margin-top: 4px; font-size: 12px;\">${res.error}</div>` : ''}\r            ${res.appliedMigrations && res.appliedMigrations.length > 0 ? `\r              <div style=\"margin-top: 4px; font-size: 12px;\">\r                <em>Uygulanan: ${res.appliedMigrations.join(', ')}</em>\r              </div>\r            ` : ''}\r          </div>\r        `;\r      });\r      resultsHtml += '</div>';\r      await Swal.fire({\r        title: 'Migration Sonuçları',\r        html: resultsHtml,\r        icon: result.value.failureCount > 0 ? 'warning' : 'success',\r        confirmButtonText: 'Tamam',\r        confirmButtonColor: result.value.failureCount > 0 ? '#faad14' : '#52c41a',\r        width: 800\r      });\r      await fetchMigrations();\r      setLoading(false);\r    }\r  };\r  const showMigrationHistory = async (tenant: TenantMigration) => {\r    setSelectedTenant(tenant);\r    setHistoryModalVisible(true);\r  };\r  const columns = [\r    {\r      title: 'Tenant',\r      key: 'tenant',\r      render: (record: TenantMigration) => (\r        <div>\r          <div style={{ fontWeight: 500 }}>{record.tenantName}</div>\r          <div style={{ fontSize: 12, color: '#666' }}>{record.tenantCode}</div>\r        </div>\r      ),\r    },\r    {\r      title: 'Durum',\r      key: 'status',\r      render: (record: TenantMigration) => {\r        if (record.error) {\r          return <Tag color=\"error\">Hata</Tag>;\r        }\r        return record.hasPendingMigrations ? (\r          <Badge count={record.pendingMigrations.length}>\r            <Tag color=\"warning\">Bekleyen Migration Var</Tag>\r          </Badge>\r        ) : (\r          <Tag color=\"success\">Güncel</Tag>\r        );\r      },\r    },\r    {\r      title: 'Bekleyen Migrationlar',\r      key: 'pending',\r      render: (record: TenantMigration) => {\r        if (record.error) {\r          return (\r            <Tooltip title={record.error}>\r              <span style={{ color: '#ff4d4f' }}>Bağlantı hatası</span>\r            </Tooltip>\r          );\r        }\r        if (!record.hasPendingMigrations) {\r          return <span style={{ color: '#52c41a' }}>Yok</span>;\r        }\r        return (\r          <div>\r            {record.pendingMigrations.map((migration, index) => (\r              <div key={index} style={{ fontSize: 12 }}>\r                • {migration}\r              </div>\r            ))}\r          </div>\r        );\r      },\r    },\r    {\r      title: 'Uygulanan',\r      key: 'applied',\r      render: (record: TenantMigration) => (\r        <span>{record.appliedMigrations?.length || 0} migration</span>\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      width: 200,\r      render: (record: TenantMigration) => (\r        <Space>\r          <Tooltip title=\"Migration geçmişini görüntüle\">\r            <Button\r              type=\"link\"\r              icon={<HistoryOutlined />}\r              onClick={() = aria-label=\"history outlined\"> showMigrationHistory(record)}\r            />\r          </Tooltip>\r          {record.hasPendingMigrations && !record.error && (\r            <Button\r              type=\"primary\"\r              size=\"small\"\r              icon={<SyncOutlined />}\r              loading={applyingTo === record.tenantId}\r              onClick={() = aria-label=\"sync outlined\"> applyMigrationToTenant(record.tenantId, record.tenantName)}\r            >\r              Migration Uygula\r            </Button>\r          )}\r        </Space>\r      ),\r    },\r  ];\r  const tenantsWithPending = migrations.filter(m => m.hasPendingMigrations && !m.error);\r  return (\r    <div className=\"migrations-page\">\r      <Card\r        title={\r          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r            <span>\r              <DatabaseOutlined /> Database Migration Yönetimi\r            </span>\r            <Space>\r              <Button\r                icon={<SyncOutlined />}\r                onClick={fetchMigrations}\r                loading={loading}\r               aria-label=\"sync outlined\">\r                Yenile\r              </Button>\r              {tenantsWithPending.length > 0 && (\r                <Button\r                  type=\"primary\"\r                  danger\r                  icon={<ThunderboltOutlined />}\r                  onClick={applyMigrationsToAll}\r                  loading={loading}\r                 aria-label=\"thunderbolt outlined\">\r                  Tümüne Uygula ({tenantsWithPending.length} tenant)\r                </Button>\r              )}\r            </Space>\r          </div>\r        }\r      >\r        {tenantsWithPending.length > 0 && (\r          <Alert\r            message={`${tenantsWithPending.length} tenant'ta bekleyen migration var`}\r            description=\"Migration'ları tek tek veya toplu olarak uygulayabilirsiniz.\"\r            type=\"warning\"\r            showIcon\r            style={{ marginBottom: 16 }}\r          />\r        )}\r        <Spin spinning={loading}>\r          <Table\r            dataSource={migrations}\r            columns={columns}\r            rowKey=\"tenantId\"\r            pagination={false}\r            rowClassName={(record) => record.error ? 'error-row' : ''}\r          />\r        </Spin>\r      </Card>\r      <Modal\r        title={`Migration Geçmişi - ${selectedTenant?.tenantName}`}\r        open={historyModalVisible}\r        onCancel={() => setHistoryModalVisible(false)}\r        footer={[\r          <Button key=\"close\" onClick={() => setHistoryModalVisible(false)}>\r            Kapat\r          </Button>\r        ]}\r        width={600}\r      >\r        {selectedTenant && (\r          <div>\r            <p><strong>Tenant Kodu:</strong> {selectedTenant.tenantCode}</p>\r            <Divider />\r            <h4>Uygulanan Migration'lar ({selectedTenant.appliedMigrations?.length || 0})</h4>\r            <div style={{ maxHeight: 300, overflow: 'auto' }}>\r              {selectedTenant.appliedMigrations?.map((migration, index) => (\r                <div key={index} style={{ padding: '4px 0' }}>\r                  <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 8 }} />\r                  {migration}\r                </div>\r              )) || <p>Migration geçmişi yok</p>}\r            </div>\r            {selectedTenant.hasPendingMigrations && (\r              <>\r                <Divider />\r                <h4 style={{ color: '#faad14' }}>\r                  Bekleyen Migration'lar ({selectedTenant.pendingMigrations?.length || 0})\r                </h4>\r                <div style={{ maxHeight: 200, overflow: 'auto' }}>\r                  {selectedTenant.pendingMigrations?.map((migration, index) => (\r                    <div key={index} style={{ padding: '4px 0' }}>\r                      <ExclamationCircleOutlined style={{ color: '#faad14', marginRight: 8 }} />\r                      {migration}\r                    </div>\r                  ))}\r                </div>\r              </>\r            )}\r          </div>\r        )}\r      </Modal>\r    </div>\r  );\r};\rexport default MigrationsPage;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Migrations/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Table,\r  Button,\r  Space,\r  Tag,\r  Switch,\r  Modal,\r  Form,\r  Input,\r  InputNumber,\r  Select,\r  Row,\r  Col,\r  Typography,\r  Badge,\r  Statistic,\r  Tooltip,\r  message,\r  Tabs,\r  List,\r  Avatar,\r  Progress,\r  Alert,\r  Segmented,\r} from 'antd';\rimport {\r  AppstoreOutlined,\r  EditOutlined,\r  SettingOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  DollarOutlined,\r  UserOutlined,\r  ShoppingOutlined,\r  TeamOutlined,\r  BarChartOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r  CloudOutlined,\r  SafetyOutlined,\r  RocketOutlined,\r  ThunderboltOutlined,\r  ReloadOutlined,\r  InfoCircleOutlined,\r  PlusOutlined,\r  MinusOutlined,\r  TableOutlined,\r  AppstoreAddOutlined,\r  CrownOutlined,\r  FireOutlined,\r  StarOutlined,\r  TrophyOutlined,\r  ExperimentOutlined,\r} from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport CountUp from 'react-countup';\rimport { masterApi } from '@/shared/api/master.api';\rimport '../../styles/master-layout.css';\rimport './modules.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst { Option } = Select;\rinterface Module {\r  id: string;\r  name: string;\r  displayName: string;\r  description: string;\r  icon: string;\r  isActive: boolean;\r  isPremium: boolean;\r  price: number;\r  features: string[];\r  permissions: string[];\r  dependencies: string[];\r  version: string;\r  lastUpdated: string;\r  usageCount: number;\r  color: string;\r}\rconst moduleIcons: Record<string, React.ReactNode> = {\r  crm: <TeamOutlined />,\r  inventory: <DatabaseOutlined />,\r  sales: <ShoppingOutlined />,\r  finance: <DollarOutlined />,\r  hr: <UserOutlined />,\r  production: <SettingOutlined />,\r  reporting: <BarChartOutlined />,\r  api: <ApiOutlined />,\r  cloud: <CloudOutlined />,\r  security: <SafetyOutlined />,\r};\rconst moduleColors: Record<string, string> = {\r  crm: '#1890ff',\r  inventory: '#52c41a',\r  sales: '#fa8c16',\r  finance: '#722ed1',\r  hr: '#13c2c2',\r  production: '#eb2f96',\r  reporting: '#faad14',\r  api: '#2f54eb',\r  cloud: '#73d13d',\r  security: '#ff4d4f',\r};\rexport const MasterModulesPage: React.FC = () => {\r  const [modules, setModules] = useState<Module[]>([]);\r  const [loading, setLoading] = useState(false);\r  const [showEditModal, setShowEditModal] = useState(false);\r  const [showFeatureModal, setShowFeatureModal] = useState(false);\r  const [selectedModule, setSelectedModule] = useState<Module | null>(null);\r  const [form] = Form.useForm();\r  const [featureForm] = Form.useForm();\r  const [activeTab, setActiveTab] = useState('all');\r  // Mock data - API'den gelecek\r  const mockModules: Module[] = [\r    {\r      id: '1',\r      name: 'crm',\r      displayName: 'CRM Modülü',\r      description: 'Müşteri ilişkileri yönetimi modülü',\r      icon: 'crm',\r      isActive: true,\r      isPremium: false,\r      price: 0,\r      features: ['Müşteri Yönetimi', 'Lead Takibi', 'Satış Pipeline', 'Raporlama'],\r      permissions: ['crm.view', 'crm.create', 'crm.update', 'crm.delete'],\r      dependencies: [],\r      version: '2.1.0',\r      lastUpdated: '2024-01-15',\r      usageCount: 245,\r      color: '#1890ff',\r    },\r    {\r      id: '2',\r      name: 'inventory',\r      displayName: 'Stok Yönetimi',\r      description: 'Envanter ve stok takip modülü',\r      icon: 'inventory',\r      isActive: true,\r      isPremium: false,\r      price: 0,\r      features: ['Ürün Yönetimi', 'Stok Takibi', 'Depo Yönetimi', 'Stok Uyarıları'],\r      permissions: ['inventory.view', 'inventory.create', 'inventory.update', 'inventory.delete'],\r      dependencies: [],\r      version: '2.0.5',\r      lastUpdated: '2024-01-10',\r      usageCount: 189,\r      color: '#52c41a',\r    },\r    {\r      id: '3',\r      name: 'sales',\r      displayName: 'Satış Yönetimi',\r      description: 'Satış ve sipariş yönetimi modülü',\r      icon: 'sales',\r      isActive: true,\r      isPremium: true,\r      price: 99,\r      features: ['Sipariş Yönetimi', 'Fatura Oluşturma', 'Ödeme Takibi', 'Satış Raporları'],\r      permissions: ['sales.view', 'sales.create', 'sales.update', 'sales.delete'],\r      dependencies: ['inventory'],\r      version: '1.8.2',\r      lastUpdated: '2024-01-08',\r      usageCount: 156,\r      color: '#fa8c16',\r    },\r    {\r      id: '4',\r      name: 'finance',\r      displayName: 'Finans Modülü',\r      description: 'Finansal yönetim ve muhasebe modülü',\r      icon: 'finance',\r      isActive: true,\r      isPremium: true,\r      price: 149,\r      features: ['Gelir/Gider Takibi', 'Bütçe Yönetimi', 'Finansal Raporlar', 'Vergi Hesaplamaları'],\r      permissions: ['finance.view', 'finance.create', 'finance.update', 'finance.delete'],\r      dependencies: ['sales'],\r      version: '1.5.0',\r      lastUpdated: '2024-01-05',\r      usageCount: 98,\r      color: '#722ed1',\r    },\r    {\r      id: '5',\r      name: 'hr',\r      displayName: 'İnsan Kaynakları',\r      description: 'İK ve personel yönetimi modülü',\r      icon: 'hr',\r      isActive: false,\r      isPremium: true,\r      price: 199,\r      features: ['Personel Yönetimi', 'İzin Takibi', 'Maaş Bordrosu', 'Performans Değerlendirme'],\r      permissions: ['hr.view', 'hr.create', 'hr.update', 'hr.delete'],\r      dependencies: [],\r      version: '1.2.0',\r      lastUpdated: '2023-12-20',\r      usageCount: 45,\r      color: '#13c2c2',\r    },\r  ];\r  useEffect(() => {\r    fetchModules();\r  }, []);\r  const fetchModules = async () => {\r    setLoading(true);\r    try {\r      // API çağrısı yapılacak\r      // const response = await masterApi.modules.getAll();\r      // setModules(response.data);\r      // Şimdilik mock data kullanıyoruz\r      setTimeout(() => {\r        setModules(mockModules);\r        setLoading(false);\r      }, 500);\r    } catch (error) {\r      message.error('Modüller yüklenirken hata oluştu');\r      setLoading(false);\r    }\r  };\r  const handleToggleStatus = async (module: Module) => {\r    try {\r      // await masterApi.modules.toggleStatus(module.id, !module.isActive);\r      message.success(`${module.displayName} ${module.isActive ? 'devre dışı bırakıldı' : 'aktif edildi'}`);\r      fetchModules();\r    } catch (error) {\r      message.error('Durum değiştirilemedi');\r    }\r  };\r  const handleEdit = (module: Module) => {\r    setSelectedModule(module);\r    form.setFieldsValue({\r      displayName: module.displayName,\r      description: module.description,\r      price: module.price,\r      isPremium: module.isPremium,\r      version: module.version,\r    });\r    setShowEditModal(true);\r  };\r  const handleEditSubmit = async (values: any) => {\r    try {\r      // await masterApi.modules.update(selectedModule!.id, values);\r      message.success('Modül güncellendi');\r      setShowEditModal(false);\r      fetchModules();\r    } catch (error) {\r      message.error('Modül güncellenemedi');\r    }\r  };\r  const handleManageFeatures = (module: Module) => {\r    setSelectedModule(module);\r    setShowFeatureModal(true);\r  };\r  const stats = [\r    {\r      title: 'Toplam Modül',\r      value: modules.length,\r      icon: <AppstoreOutlined />,\r      color: '#1890ff',\r    },\r    {\r      title: 'Aktif Modül',\r      value: modules.filter(m => m.isActive).length,\r      icon: <CheckCircleOutlined />,\r      color: '#52c41a',\r    },\r    {\r      title: 'Premium Modül',\r      value: modules.filter(m => m.isPremium).length,\r      icon: <DollarOutlined />,\r      color: '#722ed1',\r    },\r    {\r      title: 'Toplam Kullanım',\r      value: modules.reduce((sum, m) => sum + m.usageCount, 0),\r      icon: <TeamOutlined />,\r      color: '#fa8c16',\r    },\r  ];\r  const columns = [\r    {\r      title: 'Modül',\r      key: 'module',\r      render: (record: Module) => (\r        <Space>\r          <Avatar\r            style={{ backgroundColor: moduleColors[record.name] }}\r            icon={moduleIcons[record.name]}\r            size=\"large\"\r          />\r          <div>\r            <Text strong>{record.displayName}</Text>\r            {record.isPremium && (\r              <Badge count=\"Premium\" style={{ backgroundColor: '#722ed1', marginLeft: 8 }} />\r            )}\r            <br />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {record.description}\r            </Text>\r          </div>\r        </Space>\r      ),\r    },\r    {\r      title: 'Versiyon',\r      dataIndex: 'version',\r      key: 'version',\r      render: (version: string) => <Tag>{version}</Tag>,\r    },\r    {\r      title: 'Özellikler',\r      key: 'features',\r      render: (record: Module) => (\r        <Tooltip title={record.features.join(', ')}>\r          <Tag color=\"blue\">{record.features.length} Özellik</Tag>\r        </Tooltip>\r      ),\r    },\r    {\r      title: 'Fiyat',\r      dataIndex: 'price',\r      key: 'price',\r      render: (price: number, record: Module) => (\r        record.isPremium ? (\r          <Text strong style={{ color: '#722ed1' }}>\r            ${price}/ay\r          </Text>\r        ) : (\r          <Tag color=\"green\">Ücretsiz</Tag>\r        )\r      ),\r    },\r    {\r      title: 'Kullanım',\r      dataIndex: 'usageCount',\r      key: 'usageCount',\r      render: (count: number) => (\r        <Space>\r          <TeamOutlined />\r          <Text>{count} Tenant</Text>\r        </Space>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'isActive',\r      key: 'isActive',\r      render: (isActive: boolean, record: Module) => (\r        <Switch\r          checked={isActive}\r          onChange={() => handleToggleStatus(record)}\r          checkedChildren=\"Aktif\"\r          unCheckedChildren=\"Pasif\"\r        />\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      render: (record: Module) => (\r        <Space>\r          <Tooltip title=\"Düzenle\">\r            <Button\r              type=\"text\"\r              icon={<EditOutlined />}\r              onClick={() = aria-label=\"edit outlined\"> handleEdit(record)}\r            />\r          </Tooltip>\r          <Tooltip title=\"Özellikler\">\r            <Button\r              type=\"text\"\r              icon={<SettingOutlined />}\r              onClick={() = aria-label=\"setting outlined\"> handleManageFeatures(record)}\r            />\r          </Tooltip>\r        </Space>\r      ),\r    },\r  ];\r  const filteredModules = activeTab === 'all' \r    ? modules \r    : activeTab === 'active' \r      ? modules.filter(m => m.isActive)\r      : activeTab === 'premium'\r        ? modules.filter(m => m.isPremium)\r        : modules;\r  const [viewMode, setViewMode] = useState<'grid' | 'table'>('grid');\r  return (\r    <div className=\"master-modules-page\">\r      {/* Header */}\r      <motion.div \r        className=\"modules-header\"\r        initial={{ opacity: 0, y: -20 }}\r        animate={{ opacity: 1, y: 0 }}\r        transition={{ duration: 0.5 }}\r      >\r        <h1>\r          <AppstoreOutlined /> Modül Yönetimi\r        </h1>\r        <p className=\"subtitle\">Sistem modüllerini yönetin, yapılandırın ve özelleştirin</p>\r        <Space size=\"large\">\r          <Button\r            type=\"primary\"\r            icon={<AppstoreAddOutlined />}\r            size=\"large\"\r            className=\"gradient-button\"\r           aria-label=\"appstore add outlined\">\r            Yeni Modül Ekle\r          </Button>\r          <Button\r            icon={<ReloadOutlined />}\r            onClick={fetchModules}\r            loading={loading}\r            size=\"large\"\r           aria-label=\"reload outlined\">\r            Yenile\r          </Button>\r        </Space>\r      </motion.div>\r      {/* Stats */}\r      <Row gutter={[24, 24]} className=\"modules-stats\">\r        {stats.map((stat, index) => (\r          <Col xs={24} sm={12} lg={6} key={index}>\r            <motion.div\r              initial={{ opacity: 0, y: 20 }}\r              animate={{ opacity: 1, y: 0 }}\r              transition={{ delay: index * 0.1 }}\r              whileHover={{ scale: 1.02 }}\r            >\r              <Card className=\"module-stat-card\">\r                <div className=\"stat-icon-wrapper\" style={{\r                  background: `linear-gradient(135deg, ${stat.color}20 0%, ${stat.color}10 100%)`\r                }}>\r                  {stat.icon}\r                </div>\r                <div className=\"stat-number\">\r                  <CountUp end={stat.value} separator=\",\" duration={2} />\r                </div>\r                <div className=\"stat-title\">{stat.title}</div>\r                <div className=\"stat-change\">\r                  <Tag color=\"success\">+12%</Tag>\r                  <Text type=\"secondary\" style={{ fontSize: 12 }}>Bu ay</Text>\r                </div>\r              </Card>\r            </motion.div>\r          </Col>\r        ))}\r      </Row>\r      {/* Controls */}\r      <Card className=\"controls-card\">\r        <Row align=\"middle\" justify=\"space-between\">\r          <Col>\r            <Space size=\"middle\">\r              <Tabs activeKey={activeTab} onChange={setActiveTab} style={{ marginBottom: 0 }}>\r                <TabPane tab=\"Tüm Modüller\" key=\"all\" />\r                <TabPane tab=\"Aktif Modüller\" key=\"active\" />\r                <TabPane tab=\"Premium Modüller\" key=\"premium\" />\r              </Tabs>\r            </Space>\r          </Col>\r          <Col>\r            <Segmented\r              options={[\r                { label: 'Kart Görünümü', value: 'grid', icon: <AppstoreOutlined /> },\r                { label: 'Tablo Görünümü', value: 'table', icon: <TableOutlined /> },\r              ]}\r              value={viewMode}\r              onChange={(value) => setViewMode(value as 'grid' | 'table')}\r              className=\"view-toggle\"\r            />\r          </Col>\r        </Row>\r      </Card>\r      {/* Module Cards Grid */}\r      {viewMode === 'grid' ? (\r        <Card style={{ background: 'transparent', border: 'none', boxShadow: 'none' }}>\r          <Row gutter={[24, 24]}>\r            {filteredModules.map((module, index) => (\r              <Col xs={24} sm={12} lg={8} xl={6} key={module.id}>\r                <motion.div\r                  initial={{ opacity: 0, scale: 0.9 }}\r                  animate={{ opacity: 1, scale: 1 }}\r                  transition={{ delay: index * 0.05 }}\r                >\r                  <Card\r                    className={`module-card ${module.isPremium ? 'premium' : ''}`}\r                    hoverable\r                    style={{ borderColor: moduleColors[module.name] }}\r                  >\r                    <div className=\"module-header\">\r                      <div className=\"module-icon-box\" style={{\r                        background: `linear-gradient(135deg, ${moduleColors[module.name]}20 0%, ${moduleColors[module.name]}10 100%)`,\r                        color: moduleColors[module.name]\r                      }}>\r                        {moduleIcons[module.name]}\r                      </div>\r                      <div className=\"module-info\">\r                        <h3 className=\"module-name\">\r                          {module.displayName}\r                        </h3>\r                        <p className=\"module-description\">\r                          {module.description}\r                        </p>\r                      </div>\r                    </div>\r                    <div className=\"module-badges\">\r                      {module.isPremium && (\r                        <span className=\"module-badge badge-premium\">\r                          <CrownOutlined /> Premium\r                        </span>\r                      )}\r                      {module.isActive ? (\r                        <span className=\"module-badge badge-active\">Aktif</span>\r                      ) : (\r                        <span className=\"module-badge badge-inactive\">Pasif</span>\r                      )}\r                      {module.version === '2.1.0' && (\r                        <span className=\"module-badge badge-new\">\r                          <FireOutlined /> Yeni\r                        </span>\r                      )}\r                    </div>\r                    <div className=\"module-features\">\r                      <ul className=\"feature-list\">\r                        {module.features.slice(0, 3).map((feature, idx) => (\r                          <li key={idx} className=\"feature-item\">\r                            <span className=\"feature-icon\">\r                              <CheckCircleOutlined />\r                            </span>\r                            {feature}\r                          </li>\r                        ))}\r                      </ul>\r                    </div>\r                    <div className=\"module-progress\">\r                      <Progress\r                        percent={Math.round((module.usageCount / 300) * 100)}\r                        size=\"small\"\r                        format={() => `${module.usageCount} Kullanıcı`}\r                      />\r                    </div>\r                    <div className=\"module-footer\">\r                      <div>\r                        {module.isPremium ? (\r                          <div className=\"module-price\">${module.price}/ay</div>\r                        ) : (\r                          <Tag color=\"green\" style={{ fontSize: 14 }}>Ücretsiz</Tag>\r                        )}\r                      </div>\r                      <div className=\"module-actions\">\r                        <Switch\r                          className=\"module-toggle\"\r                          checked={module.isActive}\r                          onChange={() => handleToggleStatus(module)}\r                        />\r                        <Tooltip title=\"Düzenle\">\r                          <Button\r                            type=\"text\"\r                            icon={<EditOutlined />}\r                            onClick={() = aria-label=\"edit outlined\"> handleEdit(module)}\r                          />\r                        </Tooltip>\r                        <Tooltip title=\"Özellikler\">\r                          <Button\r                            type=\"text\"\r                            icon={<SettingOutlined />}\r                            onClick={() = aria-label=\"setting outlined\"> handleManageFeatures(module)}\r                          />\r                        </Tooltip>\r                      </div>\r                    </div>\r                  </Card>\r                </motion.div>\r              </Col>\r            ))}\r          </Row>\r        </Card>\r      ) : (\r        <Card className=\"modules-table-card\">\r          <Table\r            columns={columns}\r            dataSource={filteredModules}\r            rowKey=\"id\"\r            loading={loading}\r            pagination={{\r              pageSize: 10,\r              showTotal: (total) => `Toplam ${total} modül`,\r            }}\r          />\r        </Card>\r      )}\r      {/* Edit Modal */}\r      <Modal\r        title=\"Modül Düzenle\"\r        open={showEditModal}\r        onCancel={() => setShowEditModal(false)}\r        footer={null}\r        width={600}\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleEditSubmit}\r        >\r          <Form.Item\r            name=\"displayName\"\r            label=\"Modül Adı\"\r            rules={[{ required: true, message: 'Modül adı zorunlu' }]}\r          >\r            <Input / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item\r            name=\"description\"\r            label=\"Açıklama\"\r            rules={[{ required: true, message: 'Açıklama zorunlu' }]}\r          >\r            <Input.TextArea rows={3} / aria-label=\"input field\">\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"version\"\r                label=\"Versiyon\"\r                rules={[{ required: true, message: 'Versiyon zorunlu' }]}\r              >\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"price\"\r                label=\"Fiyat ($/ay)\"\r              >\r                <InputNumber min={0} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item\r            name=\"isPremium\"\r            valuePropName=\"checked\"\r          >\r            <Switch checkedChildren=\"Premium\" unCheckedChildren=\"Ücretsiz\" />\r          </Form.Item>\r          <Form.Item>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => setShowEditModal(false)}>İptal</Button>\r              <Button type=\"primary\" htmlType=\"submit\">\r                Kaydet\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Features Modal */}\r      <Modal\r        title={`${selectedModule?.displayName} - Özellikler`}\r        open={showFeatureModal}\r        onCancel={() => setShowFeatureModal(false)}\r        footer={null}\r        width={700}\r      >\r        {selectedModule && (\r          <Tabs defaultActiveKey=\"features\">\r            <TabPane tab=\"Özellikler\" key=\"features\">\r              <List\r                dataSource={selectedModule.features}\r                renderItem={(feature) => (\r                  <List.Item\r                    actions={[\r                      <Button\r                        type=\"text\"\r                        icon={<MinusOutlined />}\r                        danger\r                        size=\"small\"\r                      / aria-label=\"minus outlined\">\r                    ]}\r                  >\r                    <List.Item.Meta\r                      avatar={<CheckCircleOutlined style={{ color: '#52c41a' }} />}\r                      title={feature}\r                    />\r                  </List.Item>\r                )}\r              />\r              <Button\r                type=\"dashed\"\r                icon={<PlusOutlined />}\r                style={{ width: '100%', marginTop: 16 }}\r               aria-label=\"plus outlined\">\r                Yeni Özellik Ekle\r              </Button>\r            </TabPane>\r            <TabPane tab=\"İzinler\" key=\"permissions\">\r              <List\r                dataSource={selectedModule.permissions}\r                renderItem={(permission) => (\r                  <List.Item>\r                    <Tag color=\"blue\">{permission}</Tag>\r                  </List.Item>\r                )}\r              />\r            </TabPane>\r            <TabPane tab=\"Bağımlılıklar\" key=\"dependencies\">\r              {selectedModule.dependencies.length > 0 ? (\r                <List\r                  dataSource={selectedModule.dependencies}\r                  renderItem={(dep) => (\r                    <List.Item>\r                      <Tag color=\"orange\">{dep}</Tag>\r                    </List.Item>\r                  )}\r                />\r              ) : (\r                <Alert\r                  message=\"Bağımlılık Yok\"\r                  description=\"Bu modülün başka modüllere bağımlılığı bulunmuyor.\"\r                  type=\"info\"\r                />\r              )}\r            </TabPane>\r          </Tabs>\r        )}\r      </Modal>\r    </div>\r  );\r};\rexport default MasterModulesPage;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Modules/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Row,\r  Col,\r  Statistic,\r  Progress,\r  Typography,\r  Alert,\r  Button,\r  Space,\r  Tag,\r  Table,\r  Tabs,\r  Badge,\r  List,\r  Timeline,\r  Select,\r  DatePicker,\r  Tooltip,\r  message,\r  Divider,\r  Descriptions,\r  Switch,\r  notification,\r  Modal,\r  Input,\r} from 'antd';\rimport {\r  DashboardOutlined,\r  CloudServerOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r  ClockCircleOutlined,\r  WarningOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  ReloadOutlined,\r  SettingOutlined,\r  ThunderboltOutlined,\r  InfoCircleOutlined,\r  BugOutlined,\r  FileTextOutlined,\r  BarChartOutlined,\r  LineChartOutlined,\r  PieChartOutlined,\r  RocketOutlined,\r  WifiOutlined,\r  GlobalOutlined,\r  LockOutlined,\r  SafetyOutlined,\r  ExclamationCircleOutlined,\r  SearchOutlined,\r  FilterOutlined,\r  DownloadOutlined,\r  ClearOutlined,\r  PoweroffOutlined,\r  PlayCircleOutlined,\r  PauseCircleOutlined,\r  StopOutlined,\r  SyncOutlined,\r  HeartOutlined,\r  AlertOutlined,\r} from '@ant-design/icons';\rimport { Line, Pie, Column, Area, Gauge } from '@ant-design/plots';\rimport { motion } from 'framer-motion';\rimport dayjs from 'dayjs';\rimport relativeTime from 'dayjs/plugin/relativeTime';\rimport { masterApi } from '@/shared/api/master.api';\rimport '../../styles/master-layout.css';\rdayjs.extend(relativeTime);\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst { Option } = Select;\rconst { RangePicker } = DatePicker;\rconst { TextArea } = Input;\rinterface SystemMetric {\r  name: string;\r  value: number;\r  unit: string;\r  status: 'normal' | 'warning' | 'critical';\r  trend?: 'up' | 'down' | 'stable';\r}\rinterface Service {\r  id: string;\r  name: string;\r  status: 'running' | 'stopped' | 'error' | 'starting' | 'stopping';\r  uptime: string;\r  cpu: number;\r  memory: number;\r  responseTime: number;\r  errorRate: number;\r  lastCheck: string;\r}\rinterface LogEntry {\r  id: string;\r  timestamp: string;\r  level: 'info' | 'warning' | 'error' | 'debug';\r  source: string;\r  message: string;\r  details?: any;\r}\rinterface Alert {\r  id: string;\r  type: 'error' | 'warning' | 'info';\r  title: string;\r  description: string;\r  timestamp: string;\r  resolved: boolean;\r}\rexport const MasterMonitoringPage: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [activeTab, setActiveTab] = useState('overview');\r  const [services, setServices] = useState<Service[]>([]);\r  const [logs, setLogs] = useState<LogEntry[]>([]);\r  const [alerts, setAlerts] = useState<Alert[]>([]);\r  const [selectedService, setSelectedService] = useState<Service | null>(null);\r  const [showServiceModal, setShowServiceModal] = useState(false);\r  const [showLogModal, setShowLogModal] = useState(false);\r  const [selectedLog, setSelectedLog] = useState<LogEntry | null>(null);\r  const [logLevel, setLogLevel] = useState<string>('all');\r  const [dateRange, setDateRange] = useState<[dayjs.Dayjs, dayjs.Dayjs] | null>(null);\r  const [autoRefresh, setAutoRefresh] = useState(true);\r  const [refreshInterval, setRefreshInterval] = useState(30000); // 30 seconds\r  // Mock system metrics\r  const systemMetrics: SystemMetric[] = [\r    { name: 'CPU Kullanımı', value: 42, unit: '%', status: 'normal', trend: 'stable' },\r    { name: 'Bellek Kullanımı', value: 68, unit: '%', status: 'warning', trend: 'up' },\r    { name: 'Disk Kullanımı', value: 35, unit: '%', status: 'normal', trend: 'up' },\r    { name: 'Ağ Trafiği', value: 125, unit: 'MB/s', status: 'normal', trend: 'stable' },\r  ];\r  // Mock services data\r  const mockServices: Service[] = [\r    {\r      id: '1',\r      name: 'API Gateway',\r      status: 'running',\r      uptime: '15d 3h 45m',\r      cpu: 25,\r      memory: 45,\r      responseTime: 125,\r      errorRate: 0.2,\r      lastCheck: dayjs().subtract(30, 'seconds').toISOString(),\r    },\r    {\r      id: '2',\r      name: 'PostgreSQL',\r      status: 'running',\r      uptime: '30d 12h 10m',\r      cpu: 15,\r      memory: 62,\r      responseTime: 8,\r      errorRate: 0,\r      lastCheck: dayjs().subtract(30, 'seconds').toISOString(),\r    },\r    {\r      id: '3',\r      name: 'Redis Cache',\r      status: 'running',\r      uptime: '30d 12h 10m',\r      cpu: 5,\r      memory: 25,\r      responseTime: 2,\r      errorRate: 0,\r      lastCheck: dayjs().subtract(30, 'seconds').toISOString(),\r    },\r    {\r      id: '4',\r      name: 'RabbitMQ',\r      status: 'running',\r      uptime: '10d 5h 30m',\r      cpu: 12,\r      memory: 38,\r      responseTime: 15,\r      errorRate: 0.1,\r      lastCheck: dayjs().subtract(30, 'seconds').toISOString(),\r    },\r    {\r      id: '5',\r      name: 'Elasticsearch',\r      status: 'warning',\r      uptime: '5d 2h 15m',\r      cpu: 78,\r      memory: 85,\r      responseTime: 450,\r      errorRate: 2.5,\r      lastCheck: dayjs().subtract(30, 'seconds').toISOString(),\r    },\r    {\r      id: '6',\r      name: 'MinIO Storage',\r      status: 'running',\r      uptime: '20d 8h 55m',\r      cpu: 8,\r      memory: 30,\r      responseTime: 35,\r      errorRate: 0,\r      lastCheck: dayjs().subtract(30, 'seconds').toISOString(),\r    },\r  ];\r  // Mock logs data\r  const mockLogs: LogEntry[] = [\r    {\r      id: '1',\r      timestamp: dayjs().subtract(2, 'minutes').toISOString(),\r      level: 'info',\r      source: 'API Gateway',\r      message: 'New tenant registered: TechCorp',\r    },\r    {\r      id: '2',\r      timestamp: dayjs().subtract(5, 'minutes').toISOString(),\r      level: 'warning',\r      source: 'Elasticsearch',\r      message: 'High memory usage detected (85%)',\r      details: { memory: 85, threshold: 80 },\r    },\r    {\r      id: '3',\r      timestamp: dayjs().subtract(10, 'minutes').toISOString(),\r      level: 'error',\r      source: 'Payment Service',\r      message: 'Failed to process payment for order #12345',\r      details: { orderId: '12345', error: 'Gateway timeout' },\r    },\r    {\r      id: '4',\r      timestamp: dayjs().subtract(15, 'minutes').toISOString(),\r      level: 'info',\r      source: 'System',\r      message: 'Scheduled backup completed successfully',\r    },\r    {\r      id: '5',\r      timestamp: dayjs().subtract(30, 'minutes').toISOString(),\r      level: 'debug',\r      source: 'Redis Cache',\r      message: 'Cache invalidation completed for key: products_*',\r    },\r  ];\r  // Mock alerts\r  const mockAlerts: Alert[] = [\r    {\r      id: '1',\r      type: 'warning',\r      title: 'Yüksek Bellek Kullanımı',\r      description: 'Elasticsearch servisi %85 bellek kullanımına ulaştı',\r      timestamp: dayjs().subtract(5, 'minutes').toISOString(),\r      resolved: false,\r    },\r    {\r      id: '2',\r      type: 'error',\r      title: 'Ödeme Hatası',\r      description: 'Son 10 dakikada 3 ödeme işlemi başarısız oldu',\r      timestamp: dayjs().subtract(10, 'minutes').toISOString(),\r      resolved: false,\r    },\r    {\r      id: '3',\r      type: 'info',\r      title: 'Sistem Güncellemesi',\r      description: 'Yeni güvenlik yaması uygulandı',\r      timestamp: dayjs().subtract(1, 'hour').toISOString(),\r      resolved: true,\r    },\r  ];\r  useEffect(() => {\r    fetchMonitoringData();\r    if (autoRefresh) {\r      const interval = setInterval(fetchMonitoringData, refreshInterval);\r      return () => clearInterval(interval);\r    }\r  }, [autoRefresh, refreshInterval]);\r  const fetchMonitoringData = async () => {\r    setLoading(true);\r    try {\r      // API çağrıları yapılacak\r      // const [status, metrics, logs] = await Promise.all([\r      //   masterApi.monitoring.getSystemStatus(),\r      //   masterApi.monitoring.getPerformanceMetrics(),\r      //   masterApi.monitoring.getLogs(),\r      // ]);\r      // Şimdilik mock data kullanıyoruz\r      setTimeout(() => {\r        setServices(mockServices);\r        setLogs(mockLogs);\r        setAlerts(mockAlerts);\r        setLoading(false);\r      }, 500);\r    } catch (error) {\r      message.error('Monitoring verileri yüklenirken hata oluştu');\r      setLoading(false);\r    }\r  };\r  const handleServiceAction = async (service: Service, action: 'start' | 'stop' | 'restart') => {\r    try {\r      // await masterApi.monitoring.restartService(service.id);\r      notification.success({\r        message: 'İşlem Başarılı',\r        description: `${service.name} servisi ${action === 'restart' ? 'yeniden başlatıldı' : action === 'start' ? 'başlatıldı' : 'durduruldu'}`,\r      });\r      fetchMonitoringData();\r    } catch (error) {\r      message.error('İşlem başarısız oldu');\r    }\r  };\r  const handleClearCache = async () => {\r    Modal.confirm({\r      title: 'Önbelleği Temizle',\r      content: 'Tüm önbellek verilerini temizlemek istediğinizden emin misiniz?',\r      okText: 'Temizle',\r      okType: 'danger',\r      cancelText: 'İptal',\r      onOk: async () => {\r        try {\r          // await masterApi.monitoring.clearCache();\r          message.success('Önbellek temizlendi');\r        } catch (error) {\r          message.error('Önbellek temizlenemedi');\r        }\r      },\r    });\r  };\r  const getServiceStatusColor = (status: string) => {\r    const colors: Record<string, string> = {\r      running: 'success',\r      stopped: 'default',\r      error: 'error',\r      starting: 'processing',\r      stopping: 'warning',\r    };\r    return colors[status] || 'default';\r  };\r  const getServiceStatusIcon = (status: string) => {\r    const icons: Record<string, React.ReactNode> = {\r      running: <CheckCircleOutlined />,\r      stopped: <StopOutlined />,\r      error: <CloseCircleOutlined />,\r      starting: <SyncOutlined spin />,\r      stopping: <PauseCircleOutlined />,\r    };\r    return icons[status] || <InfoCircleOutlined />;\r  };\r  const getLogLevelColor = (level: string) => {\r    const colors: Record<string, string> = {\r      info: 'blue',\r      warning: 'orange',\r      error: 'red',\r      debug: 'default',\r    };\r    return colors[level] || 'default';\r  };\r  // CPU Usage Chart Data\r  const cpuChartData = Array.from({ length: 24 }, (_, i) => ({\r    time: `${i}:00`,\r    value: Math.floor(Math.random() * 40) + 30,\r  }));\r  const cpuChartConfig = {\r    data: cpuChartData,\r    xField: 'time',\r    yField: 'value',\r    smooth: true,\r    color: '#1890ff',\r    areaStyle: {\r      fill: 'l(270) 0:#ffffff 1:#1890ff',\r    },\r    yAxis: {\r      max: 100,\r      min: 0,\r    },\r  };\r  // Memory Usage Gauge\r  const memoryGaugeConfig = {\r    percent: 0.68,\r    range: {\r      color: 'l(0) 0:#52c41a 0.5:#faad14 1:#ff4d4f',\r    },\r    indicator: {\r      pointer: {\r        style: {\r          stroke: '#D0D0D0',\r        },\r      },\r      pin: {\r        style: {\r          stroke: '#D0D0D0',\r        },\r      },\r    },\r    statistic: {\r      content: {\r        style: {\r          fontSize: '24px',\r        },\r        formatter: () => '68%',\r      },\r    },\r  };\r  // Service Health Pie Chart\r  const serviceHealthData = [\r    { type: 'Sağlıklı', value: 4 },\r    { type: 'Uyarı', value: 1 },\r    { type: 'Hata', value: 1 },\r  ];\r  const serviceHealthConfig = {\r    data: serviceHealthData,\r    angleField: 'value',\r    colorField: 'type',\r    radius: 0.8,\r    label: {\r      type: 'outer',\r    },\r    color: ['#52c41a', '#faad14', '#ff4d4f'],\r  };\r  const serviceColumns = [\r    {\r      title: 'Servis',\r      dataIndex: 'name',\r      key: 'name',\r      render: (name: string, record: Service) => (\r        <Space>\r          <Badge status={getServiceStatusColor(record.status) as any} />\r          <Text strong>{name}</Text>\r        </Space>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status: string) => (\r        <Tag color={getServiceStatusColor(status)} icon={getServiceStatusIcon(status)}>\r          {status.toUpperCase()}\r        </Tag>\r      ),\r    },\r    {\r      title: 'Uptime',\r      dataIndex: 'uptime',\r      key: 'uptime',\r    },\r    {\r      title: 'CPU',\r      dataIndex: 'cpu',\r      key: 'cpu',\r      render: (cpu: number) => (\r        <Progress\r          percent={cpu}\r          size=\"small\"\r          status={cpu > 80 ? 'exception' : cpu > 60 ? 'active' : 'success'}\r        />\r      ),\r    },\r    {\r      title: 'Bellek',\r      dataIndex: 'memory',\r      key: 'memory',\r      render: (memory: number) => (\r        <Progress\r          percent={memory}\r          size=\"small\"\r          status={memory > 80 ? 'exception' : memory > 60 ? 'active' : 'success'}\r        />\r      ),\r    },\r    {\r      title: 'Yanıt Süresi',\r      dataIndex: 'responseTime',\r      key: 'responseTime',\r      render: (time: number) => (\r        <Tag color={time > 500 ? 'red' : time > 200 ? 'orange' : 'green'}>\r          {time}ms\r        </Tag>\r      ),\r    },\r    {\r      title: 'Hata Oranı',\r      dataIndex: 'errorRate',\r      key: 'errorRate',\r      render: (rate: number) => (\r        <Tag color={rate > 5 ? 'red' : rate > 2 ? 'orange' : 'green'}>\r          {rate}%\r        </Tag>\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      render: (record: Service) => (\r        <Space>\r          <Tooltip title=\"Detaylar\">\r            <Button\r              type=\"text\"\r              icon={<InfoCircleOutlined />}\r              onClick={() = aria-label=\"info circle outlined\"> {\r                setSelectedService(record);\r                setShowServiceModal(true);\r              }}\r            />\r          </Tooltip>\r          <Tooltip title=\"Yeniden Başlat\">\r            <Button\r              type=\"text\"\r              icon={<ReloadOutlined />}\r              onClick={() = aria-label=\"reload outlined\"> handleServiceAction(record, 'restart')}\r            />\r          </Tooltip>\r          {record.status === 'running' ? (\r            <Tooltip title=\"Durdur\">\r              <Button\r                type=\"text\"\r                icon={<PauseCircleOutlined />}\r                danger\r                onClick={() = aria-label=\"pause circle outlined\"> handleServiceAction(record, 'stop')}\r              />\r            </Tooltip>\r          ) : (\r            <Tooltip title=\"Başlat\">\r              <Button\r                type=\"text\"\r                icon={<PlayCircleOutlined />}\r                onClick={() = aria-label=\"play circle outlined\"> handleServiceAction(record, 'start')}\r              />\r            </Tooltip>\r          )}\r        </Space>\r      ),\r    },\r  ];\r  const filteredLogs = logs.filter(log => \r    logLevel === 'all' || log.level === logLevel\r  );\r  return (\r    <div className=\"master-monitoring-page\">\r      {/* Header */}\r      <div className=\"page-header glass-morphism\">\r        <motion.div\r          initial={{ opacity: 0, x: -20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-content\"\r        >\r          <Title level={2} className=\"gradient-text\">\r            <DashboardOutlined /> Sistem İzleme\r          </Title>\r          <Text type=\"secondary\">Sistem performansı ve servis durumlarını izleyin</Text>\r        </motion.div>\r        <motion.div\r          initial={{ opacity: 0, x: 20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-actions\"\r        >\r          <Space>\r            <Text>Otomatik Yenileme:</Text>\r            <Switch\r              checked={autoRefresh}\r              onChange={setAutoRefresh}\r              checkedChildren=\"Açık\"\r              unCheckedChildren=\"Kapalı\"\r            />\r            <Select\r              value={refreshInterval}\r              onChange={setRefreshInterval}\r              style={{ width: 120 }}\r              disabled={!autoRefresh}\r             aria-label=\"select field\">\r              <Option value={10000}>10 saniye</Option>\r              <Option value={30000}>30 saniye</Option>\r              <Option value={60000}>1 dakika</Option>\r              <Option value={300000}>5 dakika</Option>\r            </Select>\r            <Button\r              icon={<ReloadOutlined />}\r              onClick={fetchMonitoringData}\r              loading={loading}\r             aria-label=\"reload outlined\">\r              Yenile\r            </Button>\r          </Space>\r        </motion.div>\r      </div>\r      {/* Active Alerts */}\r      {alerts.filter(a => !a.resolved).length > 0 && (\r        <Alert\r          message=\"Aktif Uyarılar\"\r          description={\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              {alerts.filter(a => !a.resolved).map(alert => (\r                <div key={alert.id}>\r                  <Space>\r                    {alert.type === 'error' ? (\r                      <ExclamationCircleOutlined style={{ color: '#ff4d4f' }} />\r                    ) : (\r                      <WarningOutlined style={{ color: '#faad14' }} />\r                    )}\r                    <Text strong>{alert.title}</Text>\r                    <Text type=\"secondary\">- {alert.description}</Text>\r                    <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                      ({dayjs(alert.timestamp).fromNow()})\r                    </Text>\r                  </Space>\r                </div>\r              ))}\r            </Space>\r          }\r          type=\"warning\"\r          showIcon\r          closable\r          style={{ marginBottom: 20 }}\r        />\r      )}\r      {/* System Metrics */}\r      <Row gutter={[20, 20]} className=\"stats-row\">\r        {systemMetrics.map((metric, index) => (\r          <Col xs={24} sm={12} lg={6} key={index}>\r            <motion.div\r              initial={{ opacity: 0, y: 20 }}\r              animate={{ opacity: 1, y: 0 }}\r              transition={{ delay: index * 0.1 }}\r            >\r              <Card className=\"stat-card glass-morphism\">\r                <Statistic\r                  title={metric.name}\r                  value={metric.value}\r                  suffix={metric.unit}\r                  valueStyle={{\r                    color: metric.status === 'critical' ? '#ff4d4f' :\r                           metric.status === 'warning' ? '#faad14' : '#52c41a'\r                  }}\r                  prefix={\r                    metric.trend === 'up' ? <ArrowUpOutlined /> :\r                    metric.trend === 'down' ? <ArrowDownOutlined /> : null\r                  }\r                />\r                <Progress\r                  percent={metric.unit === '%' ? metric.value : (metric.value / 200) * 100}\r                  showInfo={false}\r                  status={\r                    metric.status === 'critical' ? 'exception' :\r                    metric.status === 'warning' ? 'active' : 'success'\r                  }\r                />\r              </Card>\r            </motion.div>\r          </Col>\r        ))}\r      </Row>\r      {/* Main Content */}\r      <Card className=\"content-card glass-morphism\">\r        <Tabs activeKey={activeTab} onChange={setActiveTab}>\r          <TabPane\r            tab={\r              <span>\r                <BarChartOutlined />\r                Genel Bakış\r              </span>\r            }\r            key=\"overview\"\r          >\r            <Row gutter={[20, 20]}>\r              <Col xs={24} lg={12}>\r                <Card title=\"CPU Kullanımı (24 Saat)\" bordered={false}>\r                  <Area {...cpuChartConfig} height={200} />\r                </Card>\r              </Col>\r              <Col xs={24} lg={6}>\r                <Card title=\"Bellek Kullanımı\" bordered={false}>\r                  <Gauge {...memoryGaugeConfig} height={200} />\r                </Card>\r              </Col>\r              <Col xs={24} lg={6}>\r                <Card title=\"Servis Durumu\" bordered={false}>\r                  <Pie {...serviceHealthConfig} height={200} />\r                </Card>\r              </Col>\r            </Row>\r            <Divider />\r            <Row gutter={[20, 20]}>\r              <Col xs={24}>\r                <Card\r                  title=\"Sistem Bilgileri\"\r                  bordered={false}\r                  extra={\r                    <Button\r                      icon={<ClearOutlined />}\r                      onClick={handleClearCache}\r                     aria-label=\"clear outlined\">\r                      Önbelleği Temizle\r                    </Button>\r                  }\r                >\r                  <Descriptions bordered column={{ xs: 1, sm: 2, lg: 3 }}>\r                    <Descriptions.Item label=\"İşletim Sistemi\">\r                      Ubuntu 22.04 LTS\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Çekirdek\">\r                      5.15.0-88-generic\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Uptime\">\r                      30d 12h 45m\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"CPU\">\r                      Intel Xeon E5-2680 v4 (8 cores)\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"RAM\">\r                      32 GB DDR4\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Disk\">\r                      500 GB SSD\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Veritabanı Boyutu\">\r                      12.5 GB\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Önbellek Boyutu\">\r                      256 MB\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Son Yedekleme\">\r                      {dayjs().subtract(6, 'hours').format('DD.MM.YYYY HH:mm')}\r                    </Descriptions.Item>\r                  </Descriptions>\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          <TabPane\r            tab={\r              <span>\r                <CloudServerOutlined />\r                Servisler\r              </span>\r            }\r            key=\"services\"\r          >\r            <Table\r              columns={serviceColumns}\r              dataSource={services}\r              rowKey=\"id\"\r              loading={loading}\r              pagination={false}\r            />\r          </TabPane>\r          <TabPane\r            tab={\r              <span>\r                <FileTextOutlined />\r                Loglar\r              </span>\r            }\r            key=\"logs\"\r          >\r            <Space style={{ marginBottom: 16 }}>\r              <Select\r                value={logLevel}\r                onChange={setLogLevel}\r                style={{ width: 120 }}\r               aria-label=\"select field\">\r                <Option value=\"all\">Tümü</Option>\r                <Option value=\"error\">Hata</Option>\r                <Option value=\"warning\">Uyarı</Option>\r                <Option value=\"info\">Bilgi</Option>\r                <Option value=\"debug\">Debug</Option>\r              </Select>\r              <RangePicker\r                showTime\r                onChange={(dates) => setDateRange(dates as [dayjs.Dayjs, dayjs.Dayjs])}\r              />\r              <Button icon={<SearchOutlined />} aria-label=\"search outlined\">Ara</Button>\r              <Button icon={<DownloadOutlined />} aria-label=\"download outlined\">İndir</Button>\r            </Space>\r            <List\r              dataSource={filteredLogs}\r              renderItem={(log) => (\r                <List.Item\r                  key={log.id}\r                  actions={[\r                    <Button\r                      type=\"link\"\r                      onClick={() => {\r                        setSelectedLog(log);\r                        setShowLogModal(true);\r                      }}\r                    >\r                      Detay\r                    </Button>\r                  ]}\r                >\r                  <List.Item.Meta\r                    avatar={\r                      <Tag color={getLogLevelColor(log.level)}>\r                        {log.level.toUpperCase()}\r                      </Tag>\r                    }\r                    title={\r                      <Space>\r                        <Text strong>{log.source}</Text>\r                        <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                          {dayjs(log.timestamp).format('DD.MM.YYYY HH:mm:ss')}\r                        </Text>\r                      </Space>\r                    }\r                    description={log.message}\r                  />\r                </List.Item>\r              )}\r            />\r          </TabPane>\r          <TabPane\r            tab={\r              <span>\r                <AlertOutlined />\r                Uyarılar\r              </span>\r            }\r            key=\"alerts\"\r          >\r            <Timeline>\r              {alerts.map(alert => (\r                <Timeline.Item\r                  key={alert.id}\r                  color={\r                    alert.type === 'error' ? 'red' :\r                    alert.type === 'warning' ? 'orange' : 'blue'\r                  }\r                  dot={\r                    alert.resolved ? <CheckCircleOutlined /> :\r                    alert.type === 'error' ? <CloseCircleOutlined /> :\r                    <ExclamationCircleOutlined />\r                  }\r                >\r                  <Space direction=\"vertical\">\r                    <Space>\r                      <Text strong>{alert.title}</Text>\r                      {alert.resolved && (\r                        <Tag color=\"success\">Çözüldü</Tag>\r                      )}\r                    </Space>\r                    <Text>{alert.description}</Text>\r                    <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                      {dayjs(alert.timestamp).format('DD.MM.YYYY HH:mm')}\r                    </Text>\r                  </Space>\r                </Timeline.Item>\r              ))}\r            </Timeline>\r          </TabPane>\r        </Tabs>\r      </Card>\r      {/* Service Details Modal */}\r      <Modal\r        title={`Servis Detayları: ${selectedService?.name}`}\r        open={showServiceModal}\r        onCancel={() => setShowServiceModal(false)}\r        footer={[\r          <Button key=\"close\" onClick={() => setShowServiceModal(false)}>\r            Kapat\r          </Button>,\r        ]}\r        width={600}\r      >\r        {selectedService && (\r          <Descriptions bordered column={1}>\r            <Descriptions.Item label=\"Durum\">\r              <Tag color={getServiceStatusColor(selectedService.status)}>\r                {selectedService.status.toUpperCase()}\r              </Tag>\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Uptime\">\r              {selectedService.uptime}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"CPU Kullanımı\">\r              <Progress percent={selectedService.cpu} />\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Bellek Kullanımı\">\r              <Progress percent={selectedService.memory} />\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Yanıt Süresi\">\r              {selectedService.responseTime}ms\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Hata Oranı\">\r              {selectedService.errorRate}%\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Son Kontrol\">\r              {dayjs(selectedService.lastCheck).format('DD.MM.YYYY HH:mm:ss')}\r            </Descriptions.Item>\r          </Descriptions>\r        )}\r      </Modal>\r      {/* Log Details Modal */}\r      <Modal\r        title=\"Log Detayları\"\r        open={showLogModal}\r        onCancel={() => setShowLogModal(false)}\r        footer={[\r          <Button key=\"close\" onClick={() => setShowLogModal(false)}>\r            Kapat\r          </Button>,\r        ]}\r        width={700}\r      >\r        {selectedLog && (\r          <>\r            <Descriptions bordered column={1}>\r              <Descriptions.Item label=\"Zaman\">\r                {dayjs(selectedLog.timestamp).format('DD.MM.YYYY HH:mm:ss')}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Seviye\">\r                <Tag color={getLogLevelColor(selectedLog.level)}>\r                  {selectedLog.level.toUpperCase()}\r                </Tag>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Kaynak\">\r                {selectedLog.source}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Mesaj\">\r                {selectedLog.message}\r              </Descriptions.Item>\r            </Descriptions>\r            {selectedLog.details && (\r              <>\r                <Divider>Detaylar</Divider>\r                <pre style={{ background: '#f5f5f5', padding: 12, borderRadius: 4 }}>\r                  {JSON.stringify(selectedLog.details, null, 2)}\r                </pre>\r              </>\r            )}\r          </>\r        )}\r      </Modal>\r    </div>\r  );\r};\r// Fix for missing icon imports\rconst ArrowUpOutlined = () => <span>↑</span>;\rconst ArrowDownOutlined = () => <span>↓</span>;\rexport default MasterMonitoringPage;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Monitoring/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect, useCallback, useMemo } from 'react';\rimport {\r  Row,\r  Col,\r  Card,\r  Statistic,\r  Progress,\r  Typography,\r  Space,\r  Tag,\r  Button,\r  Alert,\r  Badge,\r  List,\r  Timeline,\r  Tooltip,\r  Select,\r  Switch,\r  Divider,\r  Tabs,\r  notification,\r  message,\r  Empty,\r  Skeleton,\r} from 'antd';\rimport {\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  WarningOutlined,\r  SyncOutlined,\r  CloudServerOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r  WifiOutlined,\r  ThunderboltOutlined,\r  DashboardOutlined,\r  LineChartOutlined,\r  AlertOutlined,\r  ReloadOutlined,\r  SettingOutlined,\r  InfoCircleOutlined,\r  RocketOutlined,\r  BugOutlined,\r  ClockCircleOutlined,\r  FireOutlined,\r} from '@ant-design/icons';\rimport { Area, Line, Column, Gauge, Liquid } from '@ant-design/charts';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport CountUp from 'react-countup';\rimport { useRealtimeData, useWebSocketData } from '../../hooks/useRealtimeData';\rimport './monitoring.css';\rimport './monitoring-enhanced.css';\rimport './monitoring-text-fix.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\r// Service durumları\rinterface ServiceStatus {\r  name: string;\r  status: 'healthy' | 'degraded' | 'down';\r  responseTime: number;\r  uptime: number;\r  lastCheck: Date;\r  error?: string;\r}\r// Sistem metrikleri\rinterface SystemMetrics {\r  cpu: {\r    usage: number;\r    cores: number;\r    temperature?: number;\r    processes: number;\r  };\r  memory: {\r    used: number;\r    total: number;\r    percentage: number;\r    swap: number;\r  };\r  disk: {\r    used: number;\r    total: number;\r    percentage: number;\r    iops: number;\r  };\r  network: {\r    in: number;\r    out: number;\r    connections: number;\r    errors: number;\r  };\r}\r// Alert interface\rinterface SystemAlert {\r  id: string;\r  type: 'critical' | 'warning' | 'info';\r  title: string;\r  description: string;\r  timestamp: Date;\r  resolved: boolean;\r}\rconst SystemMonitoring: React.FC = () => {\r  const [autoRefresh, setAutoRefresh] = useState(true);\r  const [refreshInterval, setRefreshInterval] = useState(5000);\r  const [selectedService, setSelectedService] = useState<string | null>(null);\r  const [alertsFilter, setAlertsFilter] = useState<'all' | 'critical' | 'warning' | 'info'>('all');\r  // Mock data - gerçek API'ye bağlanacak\r  const mockMetrics: SystemMetrics = {\r    cpu: {\r      usage: Math.random() * 100,\r      cores: 8,\r      temperature: 45 + Math.random() * 20,\r      processes: Math.floor(150 + Math.random() * 50),\r    },\r    memory: {\r      used: 12.5,\r      total: 16,\r      percentage: 78.125,\r      swap: 2.1,\r    },\r    disk: {\r      used: 256,\r      total: 512,\r      percentage: 50,\r      iops: Math.floor(1000 + Math.random() * 500),\r    },\r    network: {\r      in: Math.random() * 100,\r      out: Math.random() * 50,\r      connections: Math.floor(200 + Math.random() * 100),\r      errors: Math.floor(Math.random() * 5),\r    },\r  };\r  // Services mock data\r  const services: ServiceStatus[] = [\r    {\r      name: 'API Gateway',\r      status: 'healthy',\r      responseTime: 45,\r      uptime: 99.99,\r      lastCheck: new Date(),\r    },\r    {\r      name: 'PostgreSQL Database',\r      status: 'healthy',\r      responseTime: 12,\r      uptime: 99.95,\r      lastCheck: new Date(),\r    },\r    {\r      name: 'Redis Cache',\r      status: 'healthy',\r      responseTime: 2,\r      uptime: 100,\r      lastCheck: new Date(),\r    },\r    {\r      name: 'File Storage',\r      status: 'degraded',\r      responseTime: 350,\r      uptime: 98.5,\r      lastCheck: new Date(),\r      error: 'High latency detected',\r    },\r    {\r      name: 'Email Service',\r      status: 'healthy',\r      responseTime: 120,\r      uptime: 99.8,\r      lastCheck: new Date(),\r    },\r    {\r      name: 'Background Jobs',\r      status: 'healthy',\r      responseTime: 55,\r      uptime: 99.9,\r      lastCheck: new Date(),\r    },\r  ];\r  // Alerts mock data\r  const alerts: SystemAlert[] = [\r    {\r      id: '1',\r      type: 'warning',\r      title: 'High CPU Usage',\r      description: 'CPU usage has been above 80% for the last 5 minutes',\r      timestamp: new Date(Date.now() - 10 * 60000),\r      resolved: false,\r    },\r    {\r      id: '2',\r      type: 'info',\r      title: 'Backup Completed',\r      description: 'Daily backup completed successfully',\r      timestamp: new Date(Date.now() - 30 * 60000),\r      resolved: true,\r    },\r    {\r      id: '3',\r      type: 'critical',\r      title: 'Storage Service Degraded',\r      description: 'File storage service experiencing high latency',\r      timestamp: new Date(Date.now() - 5 * 60000),\r      resolved: false,\r    },\r  ];\r  // Metrikleri state'te tut (realtime hook yerine)\r  const [metrics, setMetrics] = useState<SystemMetrics>(mockMetrics);\r  const [metricsLoading, setMetricsLoading] = useState(false);\r  // Metrikleri güncelle\r  const refreshMetrics = useCallback(() => {\r    setMetricsLoading(true);\r    // Simüle edilmiş veri güncelleme\r    setTimeout(() => {\r      setMetrics({\r        cpu: {\r          usage: Math.random() * 100,\r          cores: 8,\r          temperature: 45 + Math.random() * 20,\r          processes: Math.floor(150 + Math.random() * 50),\r        },\r        memory: {\r          used: 12.5,\r          total: 16,\r          percentage: 78.125,\r          swap: 2.1,\r        },\r        disk: {\r          used: 256,\r          total: 512,\r          percentage: 50,\r          iops: Math.floor(1000 + Math.random() * 500),\r        },\r        network: {\r          in: Math.random() * 100,\r          out: Math.random() * 50,\r          connections: Math.floor(200 + Math.random() * 100),\r          errors: Math.floor(Math.random() * 5),\r        },\r      });\r      setMetricsLoading(false);\r    }, 500);\r  }, []);\r  // Auto refresh effect\r  useEffect(() => {\r    if (autoRefresh && refreshInterval > 0) {\r      const interval = setInterval(refreshMetrics, refreshInterval);\r      return () => clearInterval(interval);\r    }\r  }, [autoRefresh, refreshInterval, refreshMetrics]);\r  // WebSocket bağlantısını devre dışı bırak (şimdilik)\r  // const { data: wsData, connected } = useWebSocketData<any>(\r  //   'ws://localhost:8080/monitoring',\r  //   {\r  //     onMessage: (data) => {\r  //       console.log('WebSocket data received:', data);\r  //     },\r  //     onError: (error) => {\r  //       console.error('WebSocket error:', error);\r  //     },\r  //   }\r  // );\r  const connected = false; // WebSocket devre dışı\r  // Service status badge\r  const getStatusBadge = (status: string) => {\r    switch (status) {\r      case 'healthy':\r        return <Badge status=\"success\" text=\"Healthy\" />;\r      case 'degraded':\r        return <Badge status=\"warning\" text=\"Degraded\" />;\r      case 'down':\r        return <Badge status=\"error\" text=\"Down\" />;\r      default:\r        return <Badge status=\"default\" text=\"Unknown\" />;\r    }\r  };\r  // Alert icon\r  const getAlertIcon = (type: string) => {\r    switch (type) {\r      case 'critical':\r        return <CloseCircleOutlined style={{ color: '#ff4d4f' }} />;\r      case 'warning':\r        return <WarningOutlined style={{ color: '#faad14' }} />;\r      case 'info':\r        return <InfoCircleOutlined style={{ color: '#1890ff' }} />;\r      default:\r        return null;\r    }\r  };\r  // CPU Gauge Chart Config\r  const cpuGaugeConfig = {\r    percent: (metrics?.cpu.usage || 0) / 100,\r    range: {\r      ticks: [0, 1 / 3, 2 / 3, 1],\r      color: ['#30BF78', '#FAAD14', '#F4664A'],\r    },\r    indicator: {\r      pointer: {\r        style: {\r          stroke: '#D0D0D0',\r        },\r      },\r      pin: {\r        style: {\r          stroke: '#D0D0D0',\r        },\r      },\r    },\r    axis: {\r      label: {\r        formatter: (v: any) => (Number(v) * 100).toFixed(0),\r      },\r      subTickLine: {\r        count: 3,\r      },\r    },\r    statistic: {\r      title: {\r        formatter: () => 'CPU',\r        style: {\r          fontSize: '14px',\r          lineHeight: 1,\r        },\r      },\r      content: {\r        offsetY: 36,\r        style: {\r          fontSize: '24px',\r          color: '#4B535E',\r        },\r        formatter: () => `${(metrics?.cpu.usage || 0).toFixed(1)}%`,\r      },\r    },\r  };\r  // Memory Liquid Chart Config\r  const memoryLiquidConfig = {\r    percent: (metrics?.memory.percentage || 0) / 100,\r    outline: {\r      border: 4,\r      distance: 8,\r    },\r    wave: {\r      length: 128,\r    },\r    statistic: {\r      title: {\r        formatter: () => 'Memory',\r        style: {\r          fontSize: '14px',\r        },\r      },\r      content: {\r        style: {\r          fontSize: '24px',\r        },\r        formatter: () => `${(metrics?.memory.percentage || 0).toFixed(1)}%`,\r      },\r    },\r  };\r  // Network Traffic Chart Data\r  const networkData = Array.from({ length: 20 }, (_, i) => ({\r    time: `${i * 5}s`,\r    in: Math.random() * 100,\r    out: Math.random() * 50,\r  }));\r  const networkConfig = {\r    data: networkData,\r    xField: 'time',\r    yField: 'in',\r    smooth: true,\r    height: 100,\r    autoFit: true,\r    areaStyle: {\r      fill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff',\r    },\r  };\r  return (\r    <div className=\"system-monitoring\">\r      {/* Header Controls */}\r      <Card className=\"monitoring-header\" bordered={false}>\r        <Row align=\"middle\" justify=\"space-between\">\r          <Col>\r            <Space>\r              <Title level={3} style={{ margin: 0 }}>\r                <DashboardOutlined /> System Monitoring\r              </Title>\r              {connected && (\r                <Tag color=\"green\" icon={<WifiOutlined />}>\r                  Live Connection\r                </Tag>\r              )}\r              <Badge \r                count={alerts.filter(a => !a.resolved && a.type === 'critical').length} \r                style={{ backgroundColor: '#ff4d4f' }}\r              >\r                <Tag color=\"default\">Alerts</Tag>\r              </Badge>\r            </Space>\r          </Col>\r          <Col>\r            <Space>\r              <Select\r                value={refreshInterval}\r                onChange={setRefreshInterval}\r                style={{ width: 120 }}\r               aria-label=\"select field\">\r                <Select.Option value={5000} aria-label=\"select field\">5 seconds</Select.Option>\r                <Select.Option value={10000} aria-label=\"select field\">10 seconds</Select.Option>\r                <Select.Option value={30000} aria-label=\"select field\">30 seconds</Select.Option>\r                <Select.Option value={60000} aria-label=\"select field\">1 minute</Select.Option>\r              </Select>\r              <Switch\r                checked={autoRefresh}\r                onChange={setAutoRefresh}\r                checkedChildren=\"Auto Refresh\"\r                unCheckedChildren=\"Manual\"\r              />\r              <Button\r                icon={<ReloadOutlined spin={metricsLoading} / aria-label=\"reload outlined\">}\r                onClick={refreshMetrics}\r                type=\"primary\"\r              >\r                Refresh\r              </Button>\r            </Space>\r          </Col>\r        </Row>\r      </Card>\r      {/* Critical Alerts */}\r      {alerts.filter(a => !a.resolved && a.type === 'critical').length > 0 && (\r        <Alert\r          message=\"Critical System Alert\"\r          description={\r            <Space direction=\"vertical\">\r              {alerts\r                .filter(a => !a.resolved && a.type === 'critical')\r                .map(alert => (\r                  <div key={alert.id}>\r                    <Text strong>{alert.title}:</Text> {alert.description}\r                  </div>\r                ))}\r            </Space>\r          }\r          type=\"error\"\r          showIcon\r          closable\r          style={{ marginBottom: 24 }}\r        />\r      )}\r      {/* System Metrics Overview */}\r      <Row gutter={[24, 24]} style={{ marginBottom: 24 }}>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"metric-card\" bordered={false}>\r            <motion.div\r              animate={{ scale: [1, 1.05, 1] }}\r              transition={{ duration: 2, repeat: Infinity }}\r            >\r              <Gauge {...cpuGaugeConfig} height={200} />\r            </motion.div>\r            <Divider />\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Cores:</Text>\r                <Text strong>{metrics?.cpu.cores || 0}</Text>\r              </div>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Temperature:</Text>\r                <Text strong>{(metrics?.cpu.temperature || 0).toFixed(1)}°C</Text>\r              </div>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Processes:</Text>\r                <Text strong>{metrics?.cpu.processes || 0}</Text>\r              </div>\r            </Space>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"metric-card\" bordered={false}>\r            <Liquid {...memoryLiquidConfig} height={200} />\r            <Divider />\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Used:</Text>\r                <Text strong>{(metrics?.memory.used || 0).toFixed(1)} GB</Text>\r              </div>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Total:</Text>\r                <Text strong>{metrics?.memory.total || 0} GB</Text>\r              </div>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Swap:</Text>\r                <Text strong>{(metrics?.memory.swap || 0).toFixed(1)} GB</Text>\r              </div>\r            </Space>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"metric-card\" bordered={false}>\r            <div className=\"disk-usage\">\r              <CloudServerOutlined style={{ fontSize: 48, color: '#1890ff' }} />\r              <Title level={2} style={{ margin: '16px 0' }}>\r                <CountUp end={metrics?.disk.percentage || 0} suffix=\"%\" />\r              </Title>\r              <Text type=\"secondary\">Disk Usage</Text>\r            </div>\r            <Progress\r              percent={metrics?.disk.percentage || 0}\r              strokeColor={{\r                '0%': '#108ee9',\r                '100%': '#87d068',\r              }}\r              status={metrics?.disk.percentage > 90 ? 'exception' : 'active'}\r            />\r            <Divider />\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Used:</Text>\r                <Text strong>{metrics?.disk.used || 0} GB</Text>\r              </div>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Total:</Text>\r                <Text strong>{metrics?.disk.total || 0} GB</Text>\r              </div>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">IOPS:</Text>\r                <Text strong>{metrics?.disk.iops || 0}</Text>\r              </div>\r            </Space>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"metric-card\" bordered={false}>\r            <div style={{ marginBottom: 16 }}>\r              <Text type=\"secondary\">Network Traffic</Text>\r            </div>\r            <Area {...networkConfig} style={{ height: 60 }} />\r            <Divider />\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">In:</Text>\r                <Text strong>{(metrics?.network.in || 0).toFixed(2)} Mbps</Text>\r              </div>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Out:</Text>\r                <Text strong>{(metrics?.network.out || 0).toFixed(2)} Mbps</Text>\r              </div>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Connections:</Text>\r                <Text strong>{metrics?.network.connections || 0}</Text>\r              </div>\r            </Space>\r          </Card>\r        </Col>\r      </Row>\r      {/* Services & Alerts Tabs */}\r      <Tabs defaultActiveKey=\"services\" type=\"card\">\r        <TabPane tab={<span><ApiOutlined /> Services Status</span>} key=\"services\">\r          <Row gutter={[24, 24]}>\r            {services.map((service) => (\r              <Col xs={24} sm={12} lg={8} key={service.name}>\r                <motion.div\r                  whileHover={{ scale: 1.02 }}\r                  whileTap={{ scale: 0.98 }}\r                >\r                  <Card\r                    className={`service-card ${service.status}`}\r                    bordered={false}\r                    hoverable\r                    onClick={() => setSelectedService(service.name)}\r                  >\r                    <Space direction=\"vertical\" style={{ width: '100%' }}>\r                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                        <Title level={5} style={{ margin: 0 }}>{service.name}</Title>\r                        {getStatusBadge(service.status)}\r                      </div>\r                      <Row gutter={16}>\r                        <Col span={12}>\r                          <Statistic\r                            title=\"Response Time\"\r                            value={service.responseTime}\r                            suffix=\"ms\"\r                            valueStyle={{\r                              color: service.responseTime > 200 ? '#faad14' : '#52c41a',\r                              fontSize: 20\r                            }}\r                          />\r                        </Col>\r                        <Col span={12}>\r                          <Statistic\r                            title=\"Uptime\"\r                            value={service.uptime}\r                            suffix=\"%\"\r                            precision={2}\r                            valueStyle={{\r                              color: service.uptime > 99 ? '#52c41a' : '#faad14',\r                              fontSize: 20\r                            }}\r                          />\r                        </Col>\r                      </Row>\r                      {service.error && (\r                        <Alert message={service.error} type=\"warning\" showIcon />\r                      )}\r                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                        <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                          <ClockCircleOutlined /> Last check: {new Date(service.lastCheck).toLocaleTimeString()}\r                        </Text>\r                        <Button size=\"small\" type=\"text\" icon={<SyncOutlined />} aria-label=\"sync outlined\">\r                          Check Now\r                        </Button>\r                      </div>\r                    </Space>\r                  </Card>\r                </motion.div>\r              </Col>\r            ))}\r          </Row>\r        </TabPane>\r        <TabPane tab={<span><AlertOutlined /> System Alerts</span>} key=\"alerts\">\r          <Card bordered={false}>\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 16 }}>\r                <Select\r                  value={alertsFilter}\r                  onChange={setAlertsFilter}\r                  style={{ width: 200 }}\r                 aria-label=\"select field\">\r                  <Select.Option value=\"all\" aria-label=\"select field\">All Alerts</Select.Option>\r                  <Select.Option value=\"critical\" aria-label=\"select field\">Critical Only</Select.Option>\r                  <Select.Option value=\"warning\" aria-label=\"select field\">Warnings</Select.Option>\r                  <Select.Option value=\"info\" aria-label=\"select field\">Info</Select.Option>\r                </Select>\r                <Button type=\"primary\" danger icon={<BugOutlined />} aria-label=\"bug outlined\">\r                  Clear Resolved\r                </Button>\r              </div>\r              <Timeline mode=\"left\">\r                {alerts\r                  .filter(a => alertsFilter === 'all' || a.type === alertsFilter)\r                  .map(alert => (\r                    <Timeline.Item\r                      key={alert.id}\r                      dot={getAlertIcon(alert.type)}\r                      color={alert.resolved ? 'gray' : undefined}\r                    >\r                      <Card\r                        size=\"small\"\r                        className={`alert-card ${alert.type} ${alert.resolved ? 'resolved' : ''}`}\r                      >\r                        <Space direction=\"vertical\" style={{ width: '100%' }}>\r                          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r                            <Text strong style={{ textDecoration: alert.resolved ? 'line-through' : 'none' }}>\r                              {alert.title}\r                            </Text>\r                            <Tag color={alert.resolved ? 'success' : 'processing'}>\r                              {alert.resolved ? 'Resolved' : 'Active'}\r                            </Tag>\r                          </div>\r                          <Text type=\"secondary\">{alert.description}</Text>\r                          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                            <ClockCircleOutlined /> {new Date(alert.timestamp).toLocaleString()}\r                          </Text>\r                          {!alert.resolved && (\r                            <Button size=\"small\" type=\"primary\">\r                              Mark as Resolved\r                            </Button>\r                          )}\r                        </Space>\r                      </Card>\r                    </Timeline.Item>\r                  ))}\r              </Timeline>\r            </Space>\r          </Card>\r        </TabPane>\r        <TabPane tab={<span><LineChartOutlined /> Performance Trends</span>} key=\"trends\">\r          <Card bordered={false}>\r            <Empty description=\"Performance trends coming soon...\" />\r          </Card>\r        </TabPane>\r      </Tabs>\r    </div>\r  );\r};\rexport default SystemMonitoring;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Monitoring/SystemMonitoring.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport './notification-settings.css';\rimport './notification-settings-enhanced.css';\rinterface NotificationPreferences {\r  email: {\r    enabled: boolean;\r    frequency: 'instant' | 'hourly' | 'daily' | 'weekly';\r    categories: {\r      system: boolean;\r      tenant: boolean;\r      payment: boolean;\r      security: boolean;\r      performance: boolean;\r    };\r  };\r  push: {\r    enabled: boolean;\r    categories: {\r      system: boolean;\r      tenant: boolean;\r      payment: boolean;\r      security: boolean;\r      performance: boolean;\r    };\r  };\r  sms: {\r    enabled: boolean;\r    phoneNumber: string;\r    criticalOnly: boolean;\r  };\r  slack: {\r    enabled: boolean;\r    webhookUrl: string;\r    channel: string;\r  };\r  webhook: {\r    enabled: boolean;\r    url: string;\r    secret: string;\r  };\r}\rconst NotificationSettings: React.FC = () => {\r  const [preferences, setPreferences] = useState<NotificationPreferences>({\r    email: {\r      enabled: true,\r      frequency: 'instant',\r      categories: {\r        system: true,\r        tenant: true,\r        payment: true,\r        security: true,\r        performance: true\r      }\r    },\r    push: {\r      enabled: true,\r      categories: {\r        system: true,\r        tenant: true,\r        payment: false,\r        security: true,\r        performance: true\r      }\r    },\r    sms: {\r      enabled: false,\r      phoneNumber: '',\r      criticalOnly: true\r    },\r    slack: {\r      enabled: false,\r      webhookUrl: '',\r      channel: '#notifications'\r    },\r    webhook: {\r      enabled: false,\r      url: '',\r      secret: ''\r    }\r  });\r  const [testMode, setTestMode] = useState<string | null>(null);\r  const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'saved'>('idle');\r  const handleSave = () => {\r    setSaveStatus('saving');\r    // Simüle edilmiş kaydetme\r    setTimeout(() => {\r      localStorage.setItem('notification_preferences', JSON.stringify(preferences));\r      setSaveStatus('saved');\r      setTimeout(() => setSaveStatus('idle'), 2000);\r    }, 1000);\r  };\r  const sendTestNotification = (channel: string) => {\r    setTestMode(channel);\r    // Test bildirimi gönder\r    setTimeout(() => {\r      alert(`Test bildirimi ${channel} kanalına gönderildi!`);\r      setTestMode(null);\r    }, 1500);\r  };\r  return (\r    <div className=\"notification-settings\">\r      <div className=\"settings-header\">\r        <h1>🔔 Bildirim Ayarları</h1>\r        <p>Bildirim tercihlerinizi ve kanallarınızı yönetin</p>\r      </div>\r      <div className=\"settings-content\">\r        {/* Email Bildirimleri */}\r        <div className=\"settings-section\">\r          <div className=\"section-header\">\r            <h2>📧 Email Bildirimleri</h2>\r            <label className=\"toggle-switch\">\r              <input\r                type=\"checkbox\"\r                checked={preferences.email.enabled}\r                onChange={(e) = aria-label=\"input field\"> setPreferences({\r                  ...preferences,\r                  email: { ...preferences.email, enabled: e.target.checked }\r                })}\r              />\r              <span className=\"toggle-slider\"></span>\r            </label>\r          </div>\r          {preferences.email.enabled && (\r            <div className=\"section-content\">\r              <div className=\"form-group\">\r                <label>Bildirim Sıklığı</label>\r                <select\r                  value={preferences.email.frequency}\r                  onChange={(e) = aria-label=\"select field\"> setPreferences({\r                    ...preferences,\r                    email: { ...preferences.email, frequency: e.target.value as any }\r                  })}\r                >\r                  <option value=\"instant\">Anında</option>\r                  <option value=\"hourly\">Saatlik Özet</option>\r                  <option value=\"daily\">Günlük Özet</option>\r                  <option value=\"weekly\">Haftalık Özet</option>\r                </select>\r              </div>\r              <div className=\"category-toggles\">\r                <h3>Bildirim Kategorileri</h3>\r                {Object.entries(preferences.email.categories).map(([key, value]) => (\r                  <label key={key} className=\"category-toggle\">\r                    <input\r                      type=\"checkbox\"\r                      checked={value}\r                      onChange={(e) = aria-label=\"input field\"> setPreferences({\r                        ...preferences,\r                        email: {\r                          ...preferences.email,\r                          categories: {\r                            ...preferences.email.categories,\r                            [key]: e.target.checked\r                          }\r                        }\r                      })}\r                    />\r                    <span>{key.charAt(0).toUpperCase() + key.slice(1)}</span>\r                  </label>\r                ))}\r              </div>\r              <button \r                className=\"test-btn\"\r                onClick={() => sendTestNotification('email')}\r                disabled={testMode === 'email'}\r              >\r                {testMode === 'email' ? 'Gönderiliyor...' : 'Test Email Gönder'}\r              </button>\r            </div>\r          )}\r        </div>\r        {/* Push Bildirimleri */}\r        <div className=\"settings-section\">\r          <div className=\"section-header\">\r            <h2>🔔 Push Bildirimleri</h2>\r            <label className=\"toggle-switch\">\r              <input\r                type=\"checkbox\"\r                checked={preferences.push.enabled}\r                onChange={(e) = aria-label=\"input field\"> setPreferences({\r                  ...preferences,\r                  push: { ...preferences.push, enabled: e.target.checked }\r                })}\r              />\r              <span className=\"toggle-slider\"></span>\r            </label>\r          </div>\r          {preferences.push.enabled && (\r            <div className=\"section-content\">\r              <div className=\"category-toggles\">\r                <h3>Bildirim Kategorileri</h3>\r                {Object.entries(preferences.push.categories).map(([key, value]) => (\r                  <label key={key} className=\"category-toggle\">\r                    <input\r                      type=\"checkbox\"\r                      checked={value}\r                      onChange={(e) = aria-label=\"input field\"> setPreferences({\r                        ...preferences,\r                        push: {\r                          ...preferences.push,\r                          categories: {\r                            ...preferences.push.categories,\r                            [key]: e.target.checked\r                          }\r                        }\r                      })}\r                    />\r                    <span>{key.charAt(0).toUpperCase() + key.slice(1)}</span>\r                  </label>\r                ))}\r              </div>\r              <button \r                className=\"test-btn\"\r                onClick={() => sendTestNotification('push')}\r                disabled={testMode === 'push'}\r              >\r                {testMode === 'push' ? 'Gönderiliyor...' : 'Test Push Gönder'}\r              </button>\r            </div>\r          )}\r        </div>\r        {/* SMS Bildirimleri */}\r        <div className=\"settings-section\">\r          <div className=\"section-header\">\r            <h2>📱 SMS Bildirimleri</h2>\r            <label className=\"toggle-switch\">\r              <input\r                type=\"checkbox\"\r                checked={preferences.sms.enabled}\r                onChange={(e) = aria-label=\"input field\"> setPreferences({\r                  ...preferences,\r                  sms: { ...preferences.sms, enabled: e.target.checked }\r                })}\r              />\r              <span className=\"toggle-slider\"></span>\r            </label>\r          </div>\r          {preferences.sms.enabled && (\r            <div className=\"section-content\">\r              <div className=\"form-group\">\r                <label>Telefon Numarası</label>\r                <input\r                  type=\"tel\"\r                  placeholder=\"+90 5XX XXX XX XX\"\r                  value={preferences.sms.phoneNumber}\r                  onChange={(e) = aria-label=\"input field\"> setPreferences({\r                    ...preferences,\r                    sms: { ...preferences.sms, phoneNumber: e.target.value }\r                  })}\r                />\r              </div>\r              <label className=\"category-toggle\">\r                <input\r                  type=\"checkbox\"\r                  checked={preferences.sms.criticalOnly}\r                  onChange={(e) = aria-label=\"input field\"> setPreferences({\r                    ...preferences,\r                    sms: { ...preferences.sms, criticalOnly: e.target.checked }\r                  })}\r                />\r                <span>Sadece kritik bildirimler</span>\r              </label>\r              <button \r                className=\"test-btn\"\r                onClick={() => sendTestNotification('sms')}\r                disabled={testMode === 'sms' || !preferences.sms.phoneNumber}\r              >\r                {testMode === 'sms' ? 'Gönderiliyor...' : 'Test SMS Gönder'}\r              </button>\r            </div>\r          )}\r        </div>\r        {/* Slack Entegrasyonu */}\r        <div className=\"settings-section\">\r          <div className=\"section-header\">\r            <h2>💬 Slack Entegrasyonu</h2>\r            <label className=\"toggle-switch\">\r              <input\r                type=\"checkbox\"\r                checked={preferences.slack.enabled}\r                onChange={(e) = aria-label=\"input field\"> setPreferences({\r                  ...preferences,\r                  slack: { ...preferences.slack, enabled: e.target.checked }\r                })}\r              />\r              <span className=\"toggle-slider\"></span>\r            </label>\r          </div>\r          {preferences.slack.enabled && (\r            <div className=\"section-content\">\r              <div className=\"form-group\">\r                <label>Webhook URL</label>\r                <input\r                  type=\"url\"\r                  placeholder=\"https://hooks.slack.com/services/...\"\r                  value={preferences.slack.webhookUrl}\r                  onChange={(e) = aria-label=\"input field\"> setPreferences({\r                    ...preferences,\r                    slack: { ...preferences.slack, webhookUrl: e.target.value }\r                  })}\r                />\r              </div>\r              <div className=\"form-group\">\r                <label>Kanal</label>\r                <input\r                  type=\"text\"\r                  placeholder=\"#notifications\"\r                  value={preferences.slack.channel}\r                  onChange={(e) = aria-label=\"input field\"> setPreferences({\r                    ...preferences,\r                    slack: { ...preferences.slack, channel: e.target.value }\r                  })}\r                />\r              </div>\r              <button \r                className=\"test-btn\"\r                onClick={() => sendTestNotification('slack')}\r                disabled={testMode === 'slack' || !preferences.slack.webhookUrl}\r              >\r                {testMode === 'slack' ? 'Gönderiliyor...' : 'Test Mesajı Gönder'}\r              </button>\r            </div>\r          )}\r        </div>\r        {/* Webhook */}\r        <div className=\"settings-section\">\r          <div className=\"section-header\">\r            <h2>🔗 Webhook</h2>\r            <label className=\"toggle-switch\">\r              <input\r                type=\"checkbox\"\r                checked={preferences.webhook.enabled}\r                onChange={(e) = aria-label=\"input field\"> setPreferences({\r                  ...preferences,\r                  webhook: { ...preferences.webhook, enabled: e.target.checked }\r                })}\r              />\r              <span className=\"toggle-slider\"></span>\r            </label>\r          </div>\r          {preferences.webhook.enabled && (\r            <div className=\"section-content\">\r              <div className=\"form-group\">\r                <label>Webhook URL</label>\r                <input\r                  type=\"url\"\r                  placeholder=\"https://your-api.com/webhook\"\r                  value={preferences.webhook.url}\r                  onChange={(e) = aria-label=\"input field\"> setPreferences({\r                    ...preferences,\r                    webhook: { ...preferences.webhook, url: e.target.value }\r                  })}\r                />\r              </div>\r              <div className=\"form-group\">\r                <label>Secret Key</label>\r                <input\r                  type=\"password\"\r                  placeholder=\"Webhook secret key\"\r                  value={preferences.webhook.secret}\r                  onChange={(e) = aria-label=\"input field\"> setPreferences({\r                    ...preferences,\r                    webhook: { ...preferences.webhook, secret: e.target.value }\r                  })}\r                />\r              </div>\r              <button \r                className=\"test-btn\"\r                onClick={() => sendTestNotification('webhook')}\r                disabled={testMode === 'webhook' || !preferences.webhook.url}\r              >\r                {testMode === 'webhook' ? 'Gönderiliyor...' : 'Test Webhook Gönder'}\r              </button>\r            </div>\r          )}\r        </div>\r      </div>\r      <div className=\"settings-footer\">\r        <button \r          className={`save-btn ${saveStatus}`}\r          onClick={handleSave}\r          disabled={saveStatus === 'saving'}\r        >\r          {saveStatus === 'saving' && '⏳ Kaydediliyor...'}\r          {saveStatus === 'saved' && '✅ Kaydedildi!'}\r          {saveStatus === 'idle' && '💾 Ayarları Kaydet'}\r        </button>\r      </div>\r    </div>\r  );\r};\rexport default NotificationSettings;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/NotificationSettings/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport {\r  Row,\r  Col,\r  Card,\r  Button,\r  Space,\r  Tag,\r  Typography,\r  Modal,\r  Form,\r  Input,\r  InputNumber,\r  Select,\r  Switch,\r  Divider,\r  Badge,\r  Tooltip,\r  Table,\r  Segmented,\r  message,\r  Popconfirm,\r  Checkbox,\r  List,\r  Avatar,\r  Progress,\r  Statistic,\r  Timeline,\r  Alert,\r  Tabs,\r} from 'antd';\rimport {\r  CrownOutlined,\r  RocketOutlined,\r  ThunderboltOutlined,\r  UserOutlined,\r  CheckOutlined,\r  CloseOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  PlusOutlined,\r  DollarOutlined,\r  GiftOutlined,\r  StarFilled,\r  FireOutlined,\r  SafetyOutlined,\r  CloudServerOutlined,\r  ApiOutlined,\r  DatabaseOutlined,\r  MailOutlined,\r  CustomerServiceOutlined,\r  TeamOutlined,\r  AppstoreOutlined,\r  BarsOutlined,\r  CopyOutlined,\r  EyeOutlined,\r  SettingOutlined,\r  InfoCircleOutlined,\r  ExportOutlined,\r  ImportOutlined,\r  ReloadOutlined,\r  HeartFilled,\r  TrophyOutlined,\r  BulbOutlined,\r  ExperimentOutlined,\r} from '@ant-design/icons';\rimport CountUp from 'react-countup';\rimport '../../styles/master-inputs.css';\rimport '../../styles/master-layout.css';\rimport './packages.css';\rimport { packagesApi, CreatePackageRequest, UpdatePackageRequest, PackageFeatureDto, PackageModuleDto } from '@/shared/api/packages.api';\rimport { useEffect } from 'react';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\r// Types\rinterface Package {\r  id: string;\r  name: string;\r  description: string;\r  price: number;\r  discountedPrice?: number;\r  currency: string;\r  billingCycle: 'monthly' | 'yearly';\r  popular?: boolean;\r  recommended?: boolean;\r  new?: boolean;\r  maxUsers: number;\r  maxStorage: number;\r  features: string[];\r  modules: string[];\r  support: string;\r  apiCalls: number;\r  customDomain: boolean;\r  whiteLabel: boolean;\r  priority: number;\r  color: string;\r  icon: React.ReactNode;\r  gradient: string;\r  subscriberCount: number;\r  revenue: number;\r  growth: number;\r  status: 'active' | 'inactive' | 'deprecated';\r  createdAt: string;\r  updatedAt: string;\r}\rinterface Feature {\r  id: string;\r  name: string;\r  description: string;\r  category: string;\r  packages: string[];\r}\rexport const MasterPackagesPage: React.FC = () => {\r  const [viewMode, setViewMode] = useState<'grid' | 'table'>('grid');\r  const [billingCycle, setBillingCycle] = useState<'monthly' | 'yearly'>('monthly');\r  const [showCreateModal, setShowCreateModal] = useState(false);\r  const [showFeatureModal, setShowFeatureModal] = useState(false);\r  const [selectedPackage, setSelectedPackage] = useState<Package | null>(null);\r  const [loading, setLoading] = useState(false);\r  const [packages, setPackages] = useState<Package[]>([]);\r  const [form] = Form.useForm();\r  const [featureForm] = Form.useForm();\r  // Fetch packages from API\r  useEffect(() => {\r    fetchPackages();\r  }, []);\r  const fetchPackages = async () => {\r    setLoading(true);\r    try {\r      const response = await packagesApi.getAll({ isActive: true });\r      if (response.data && response.data.success && response.data.data) {\r        const mappedPackages = response.data.data.map((p: any) => ({\r          id: p.id,\r          name: p.name,\r          description: p.description || 'Açıklama yok',\r          price: p.basePrice?.amount || 0,\r          discountedPrice: p.discountedPrice,\r          currency: p.basePrice?.currency || p.currency || 'TRY',\r          billingCycle: p.billingCycle?.toLowerCase() || 'monthly',\r          popular: p.isPopular || false,\r          recommended: false,\r          new: false,\r          maxUsers: p.maxUsers || 0,\r          maxStorage: p.maxStorage || 0,\r          features: p.features?.map((f: PackageFeatureDto) => f.featureName) || [],\r          modules: p.modules?.map((m: PackageModuleDto) => m.moduleName) || [],\r          support: 'E-posta',\r          apiCalls: 10000,\r          customDomain: p.basePrice?.amount > 100,\r          whiteLabel: p.basePrice?.amount > 500,\r          priority: p.displayOrder || 1,\r          color: getPackageColor(p.name),\r          icon: getPackageIcon(p.name),\r          gradient: getPackageGradient(p.name),\r          subscriberCount: Math.floor(Math.random() * 1000),\r          revenue: (p.basePrice?.amount || 0) * Math.floor(Math.random() * 100),\r          growth: Math.floor(Math.random() * 40) - 10,\r          status: p.isActive ? 'active' : 'inactive',\r          createdAt: p.createdAt || new Date().toISOString(),\r          updatedAt: p.modifiedAt || new Date().toISOString()\r        }));\r        setPackages(mappedPackages);\r      } else {\r        // Use mock data as fallback\r        setPackages(mockPackages);\r      }\r    } catch (error) {\r      message.error('Paket listesi yüklenirken hata oluştu');\r      // Use mock data as fallback\r      setPackages(mockPackages);\r    } finally {\r      setLoading(false);\r    }\r  };\r  // Helper functions for package styling\r  const getPackageColor = (name: string) => {\r    const colors: any = {\r      'Free': '#8c8c8c',\r      'Starter': '#52c41a',\r      'Professional': '#1890ff',\r      'Enterprise': '#722ed1'\r    };\r    return colors[name] || '#1890ff';\r  };\r  const getPackageIcon = (name: string) => {\r    const icons: any = {\r      'Free': <UserOutlined />,\r      'Starter': <RocketOutlined />,\r      'Professional': <ThunderboltOutlined />,\r      'Enterprise': <CrownOutlined />\r    };\r    return icons[name] || <AppstoreOutlined />;\r  };\r  const getPackageGradient = (name: string) => {\r    const gradients: any = {\r      'Free': 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r      'Starter': 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',\r      'Professional': 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',\r      'Enterprise': 'linear-gradient(135deg, #fa709a 0%, #fee140 100%)'\r    };\r    return gradients[name] || 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';\r  };\r  // Mock packages data\r  const mockPackages: Package[] = [\r    {\r      id: '1',\r      name: 'Free',\r      description: 'Küçük işletmeler için mükemmel başlangıç',\r      price: 0,\r      currency: '₺',\r      billingCycle: 'monthly',\r      maxUsers: 5,\r      maxStorage: 5,\r      features: [\r        'Temel CRM özellikleri',\r        'E-posta desteği',\r        '5 GB depolama',\r        'Temel raporlama',\r        'Mobil uygulama',\r      ],\r      modules: ['CRM'],\r      support: 'E-posta',\r      apiCalls: 1000,\r      customDomain: false,\r      whiteLabel: false,\r      priority: 1,\r      color: '#8c8c8c',\r      icon: <UserOutlined />,\r      gradient: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r      subscriberCount: 150,\r      revenue: 0,\r      growth: 25,\r      status: 'active',\r      createdAt: '2024-01-01',\r      updatedAt: '2024-01-01',\r    },\r    {\r      id: '2',\r      name: 'Starter',\r      description: 'Büyüyen işletmeler için ideal',\r      price: 299,\r      discountedPrice: 249,\r      currency: '₺',\r      billingCycle: 'monthly',\r      new: true,\r      maxUsers: 25,\r      maxStorage: 25,\r      features: [\r        'Tüm Free özellikleri',\r        'Gelişmiş CRM',\r        'Sales modülü',\r        '25 GB depolama',\r        'Özel raporlar',\r        'Öncelikli e-posta desteği',\r        'API erişimi',\r      ],\r      modules: ['CRM', 'Sales'],\r      support: 'E-posta + Telefon',\r      apiCalls: 10000,\r      customDomain: false,\r      whiteLabel: false,\r      priority: 2,\r      color: '#52c41a',\r      icon: <RocketOutlined />,\r      gradient: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',\r      subscriberCount: 89,\r      revenue: 22211,\r      growth: 15,\r      status: 'active',\r      createdAt: '2024-01-01',\r      updatedAt: '2024-03-01',\r    },\r    {\r      id: '3',\r      name: 'Professional',\r      description: 'Profesyonel ekipler için güçlü özellikler',\r      price: 599,\r      currency: '₺',\r      billingCycle: 'monthly',\r      popular: true,\r      recommended: true,\r      maxUsers: 100,\r      maxStorage: 100,\r      features: [\r        'Tüm Starter özellikleri',\r        'Finance modülü',\r        'HR modülü',\r        '100 GB depolama',\r        'Gelişmiş analitik',\r        '7/24 telefon desteği',\r        'Özel domain',\r        'Webhook entegrasyonları',\r        'Bulk işlemler',\r      ],\r      modules: ['CRM', 'Sales', 'Finance', 'HR'],\r      support: '7/24 Telefon + Chat',\r      apiCalls: 50000,\r      customDomain: true,\r      whiteLabel: false,\r      priority: 3,\r      color: '#1890ff',\r      icon: <ThunderboltOutlined />,\r      gradient: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',\r      subscriberCount: 156,\r      revenue: 93444,\r      growth: 32,\r      status: 'active',\r      createdAt: '2024-01-01',\r      updatedAt: '2024-02-15',\r    },\r    {\r      id: '4',\r      name: 'Enterprise',\r      description: 'Büyük organizasyonlar için sınırsız güç',\r      price: 1299,\r      discountedPrice: 999,\r      currency: '₺',\r      billingCycle: 'monthly',\r      maxUsers: 999999,\r      maxStorage: 999999,\r      features: [\r        'Tüm Professional özellikleri',\r        'Production modülü',\r        'Inventory modülü',\r        'Sınırsız depolama',\r        'Özel geliştirme',\r        'Dedike destek',\r        'White-label',\r        'SLA garantisi',\r        'Özel eğitim',\r        'Veri yedekleme',\r      ],\r      modules: ['CRM', 'Sales', 'Finance', 'HR', 'Production', 'Inventory'],\r      support: 'Dedike Account Manager',\r      apiCalls: 999999,\r      customDomain: true,\r      whiteLabel: true,\r      priority: 4,\r      color: '#722ed1',\r      icon: <CrownOutlined />,\r      gradient: 'linear-gradient(135deg, #fa709a 0%, #fee140 100%)',\r      subscriberCount: 45,\r      revenue: 44955,\r      growth: 18,\r      status: 'active',\r      createdAt: '2024-01-01',\r      updatedAt: '2024-01-20',\r    },\r  ];\r  // Remove this line as packages state is already defined above\r  // Mock features data\r  const mockFeatures: Feature[] = [\r    { id: '1', name: 'CRM Modülü', description: 'Müşteri ilişkileri yönetimi', category: 'Modüller', packages: ['Free', 'Starter', 'Professional', 'Enterprise'] },\r    { id: '2', name: 'Sales Modülü', description: 'Satış yönetimi', category: 'Modüller', packages: ['Starter', 'Professional', 'Enterprise'] },\r    { id: '3', name: 'Finance Modülü', description: 'Finansal yönetim', category: 'Modüller', packages: ['Professional', 'Enterprise'] },\r    { id: '4', name: 'API Erişimi', description: 'REST API erişimi', category: 'Entegrasyon', packages: ['Starter', 'Professional', 'Enterprise'] },\r    { id: '5', name: 'Özel Domain', description: 'Kendi domain adresiniz', category: 'Özelleştirme', packages: ['Professional', 'Enterprise'] },\r    { id: '6', name: 'White Label', description: 'Marka özelleştirme', category: 'Özelleştirme', packages: ['Enterprise'] },\r  ];\r  const [features, setFeatures] = useState<Feature[]>(mockFeatures);\r  // Stats\r  const stats = [\r    {\r      title: 'Toplam Paket',\r      value: packages.length,\r      icon: <GiftOutlined style={{ color: '#1890ff' }} />,\r      color: '#1890ff',\r      suffix: '',\r      trend: 0,\r    },\r    {\r      title: 'Aktif Abonelik',\r      value: packages.reduce((sum, p) => sum + p.subscriberCount, 0),\r      icon: <TeamOutlined style={{ color: '#52c41a' }} />,\r      color: '#52c41a',\r      suffix: '',\r      trend: 15,\r    },\r    {\r      title: 'Aylık Gelir',\r      value: packages.reduce((sum, p) => sum + p.revenue, 0),\r      icon: <DollarOutlined style={{ color: '#fa8c16' }} />,\r      color: '#fa8c16',\r      prefix: '₺',\r      trend: 22,\r    },\r    {\r      title: 'Ortalama Büyüme',\r      value: Math.round(packages.reduce((sum, p) => sum + p.growth, 0) / packages.length) || 0,\r      icon: <FireOutlined style={{ color: '#722ed1' }} />,\r      color: '#722ed1',\r      suffix: '%',\r      trend: 8,\r    },\r  ];\r  // Package Card Component\r  const PackageCard: React.FC<{ pkg: Package }> = ({ pkg }) => (\r    <motion.div\r      initial={{ opacity: 0, y: 20 }}\r      animate={{ opacity: 1, y: 0 }}\r      exit={{ opacity: 0, y: 20 }}\r      whileHover={{ y: -8 }}\r      transition={{ duration: 0.3 }}\r    >\r      <Card\r        className={`package-card ${pkg.popular ? 'popular' : ''}`}\r        style={{\r          background: `linear-gradient(135deg, white 0%, ${pkg.color}05 100%)`,\r          borderTop: `4px solid ${pkg.color}`,\r          height: '100%',\r          minHeight: '450px',\r        }}\r      >\r        {/* Badges */}\r        {(pkg.popular || pkg.recommended || pkg.new) && (\r          <div className=\"package-badges\">\r            {pkg.popular && (\r              <Badge.Ribbon text=\"Popüler\" color=\"red\">\r                <div />\r              </Badge.Ribbon>\r            )}\r            {pkg.recommended && (\r              <Tag color=\"green\" icon={<StarFilled />}>\r                Önerilen\r              </Tag>\r            )}\r            {pkg.new && (\r              <Tag color=\"blue\" icon={<FireOutlined />}>\r                Yeni\r              </Tag>\r            )}\r          </div>\r        )}\r        {/* Header */}\r        <div className=\"package-header\">\r          <Avatar\r            size={64}\r            style={{\r              background: pkg.gradient,\r              border: `3px solid ${pkg.color}20`,\r            }}\r          >\r            {pkg.icon}\r          </Avatar>\r          <Title level={3} style={{ color: pkg.color, marginTop: 16 }}>\r            {pkg.name}\r          </Title>\r          <Paragraph type=\"secondary\">{pkg.description}</Paragraph>\r        </div>\r        {/* Pricing */}\r        <div className=\"package-pricing\">\r          {pkg.discountedPrice ? (\r            <>\r              <Text delete style={{ fontSize: 20, color: '#8c8c8c' }}>\r                {pkg.currency}{pkg.price}\r              </Text>\r              <Title level={2} style={{ color: pkg.color, margin: '0 8px' }}>\r                {pkg.currency}{pkg.discountedPrice}\r              </Title>\r            </>\r          ) : (\r            <Title level={2} style={{ color: pkg.color }}>\r              {pkg.price === 0 ? 'Ücretsiz' : `${pkg.currency}${pkg.price}`}\r            </Title>\r          )}\r          {pkg.price > 0 && (\r            <Text type=\"secondary\">\r              / {billingCycle === 'monthly' ? 'aylık' : 'yıllık'}\r            </Text>\r          )}\r        </div>\r        <Divider />\r        {/* Features */}\r        <div className=\"package-features\">\r          <List\r            size=\"small\"\r            dataSource={pkg.features}\r            renderItem={(feature) => (\r              <List.Item style={{ border: 'none', padding: '4px 0' }}>\r                <Space>\r                  <CheckOutlined style={{ color: '#52c41a' }} />\r                  <Text>{feature}</Text>\r                </Space>\r              </List.Item>\r            )}\r          />\r        </div>\r        <Divider />\r        {/* Limits */}\r        <div className=\"package-limits\">\r          <Row gutter={[8, 8]}>\r            <Col span={12}>\r              <div className=\"limit-item\">\r                <UserOutlined style={{ color: pkg.color }} />\r                <Text strong>\r                  {pkg.maxUsers === 999999 ? 'Sınırsız' : pkg.maxUsers}\r                </Text>\r                <Text type=\"secondary\">Kullanıcı</Text>\r              </div>\r            </Col>\r            <Col span={12}>\r              <div className=\"limit-item\">\r                <DatabaseOutlined style={{ color: pkg.color }} />\r                <Text strong>\r                  {pkg.maxStorage === 999999 ? 'Sınırsız' : `${pkg.maxStorage}GB`}\r                </Text>\r                <Text type=\"secondary\">Depolama</Text>\r              </div>\r            </Col>\r            <Col span={12}>\r              <div className=\"limit-item\">\r                <ApiOutlined style={{ color: pkg.color }} />\r                <Text strong>\r                  {pkg.apiCalls === 999999 ? 'Sınırsız' : `${pkg.apiCalls / 1000}K`}\r                </Text>\r                <Text type=\"secondary\">API Çağrı</Text>\r              </div>\r            </Col>\r            <Col span={12}>\r              <div className=\"limit-item\">\r                <CustomerServiceOutlined style={{ color: pkg.color }} />\r                <Text strong>{pkg.support.split(' ')[0]}</Text>\r                <Text type=\"secondary\">Destek</Text>\r              </div>\r            </Col>\r          </Row>\r        </div>\r        <Divider />\r        {/* Stats */}\r        <div className=\"package-stats\">\r          <Row gutter={[8, 8]}>\r            <Col span={8}>\r              <Statistic\r                value={pkg.subscriberCount}\r                valueStyle={{ fontSize: 16, color: pkg.color }}\r                prefix={<TeamOutlined />}\r                title=\"Abone\"\r              />\r            </Col>\r            <Col span={8}>\r              <Statistic\r                value={pkg.revenue}\r                valueStyle={{ fontSize: 16, color: '#52c41a' }}\r                prefix=\"₺\"\r                title=\"Gelir\"\r              />\r            </Col>\r            <Col span={8}>\r              <Statistic\r                value={pkg.growth}\r                valueStyle={{\r                  fontSize: 16,\r                  color: pkg.growth > 0 ? '#52c41a' : '#ff4d4f',\r                }}\r                suffix=\"%\"\r                prefix={pkg.growth > 0 ? '+' : ''}\r                title=\"Büyüme\"\r              />\r            </Col>\r          </Row>\r        </div>\r        {/* Actions */}\r        <div className=\"package-actions\">\r          <Button\r            type=\"primary\"\r            block\r            size=\"large\"\r            style={{\r              background: pkg.gradient,\r              border: 'none',\r              height: 48,\r            }}\r            onClick={() => handleEdit(pkg)}\r          >\r            Düzenle\r          </Button>\r          <Space style={{ marginTop: 12, width: '100%' }}>\r            <Button\r              block\r              icon={<EyeOutlined />}\r              onClick={() = aria-label=\"eye outlined\"> handleViewDetails(pkg)}\r            >\r              Detaylar\r            </Button>\r            <Button\r              block\r              icon={<CopyOutlined />}\r              onClick={() = aria-label=\"copy outlined\"> handleDuplicate(pkg)}\r            >\r              Kopyala\r            </Button>\r            <Popconfirm\r              title=\"Bu paketi silmek istediğinizden emin misiniz?\"\r              onConfirm={() => handleDelete(pkg.id)}\r              okText=\"Sil\"\r              cancelText=\"İptal\"\r            >\r              <Button block danger icon={<DeleteOutlined />} aria-label=\"delete outlined\">\r                Sil\r              </Button>\r            </Popconfirm>\r          </Space>\r        </div>\r      </Card>\r    </motion.div>\r  );\r  // Table columns\r  const columns = [\r    {\r      title: 'Paket',\r      dataIndex: 'name',\r      key: 'name',\r      render: (text: string, record: Package) => (\r        <Space>\r          <Avatar style={{ background: record.gradient }}>\r            {record.icon}\r          </Avatar>\r          <div>\r            <Text strong>{text}</Text>\r            {record.popular && <Tag color=\"red\">Popüler</Tag>}\r            {record.new && <Tag color=\"blue\">Yeni</Tag>}\r          </div>\r        </Space>\r      ),\r    },\r    {\r      title: 'Fiyat',\r      key: 'price',\r      render: (record: Package) => (\r        <div>\r          {record.discountedPrice ? (\r            <>\r              <Text delete>{record.currency}{record.price}</Text>\r              <Text strong style={{ marginLeft: 8, color: record.color }}>\r                {record.currency}{record.discountedPrice}\r              </Text>\r            </>\r          ) : (\r            <Text strong style={{ color: record.color }}>\r              {record.price === 0 ? 'Ücretsiz' : `${record.currency}${record.price}`}\r            </Text>\r          )}\r        </div>\r      ),\r    },\r    {\r      title: 'Limitler',\r      key: 'limits',\r      render: (record: Package) => (\r        <Space direction=\"vertical\" size={0}>\r          <Text>{record.maxUsers === 999999 ? 'Sınırsız' : record.maxUsers} kullanıcı</Text>\r          <Text>{record.maxStorage === 999999 ? 'Sınırsız' : `${record.maxStorage}GB`} depolama</Text>\r        </Space>\r      ),\r    },\r    {\r      title: 'Aboneler',\r      dataIndex: 'subscriberCount',\r      key: 'subscriberCount',\r      render: (count: number) => (\r        <Badge count={count} style={{ backgroundColor: '#52c41a' }} />\r      ),\r    },\r    {\r      title: 'Gelir',\r      dataIndex: 'revenue',\r      key: 'revenue',\r      render: (revenue: number) => (\r        <Text strong style={{ color: '#52c41a' }}>\r          ₺{revenue.toLocaleString()}\r        </Text>\r      ),\r    },\r    {\r      title: 'Büyüme',\r      dataIndex: 'growth',\r      key: 'growth',\r      render: (growth: number) => (\r        <Tag color={growth > 0 ? 'success' : 'error'}>\r          {growth > 0 ? '+' : ''}{growth}%\r        </Tag>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status: string) => (\r        <Tag color={status === 'active' ? 'success' : 'default'}>\r          {status === 'active' ? 'Aktif' : 'Pasif'}\r        </Tag>\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      render: (record: Package) => (\r        <Space>\r          <Tooltip title=\"Düzenle\">\r            <Button\r              type=\"text\"\r              size=\"small\"\r              icon={<EditOutlined />}\r              onClick={() = aria-label=\"edit outlined\"> handleEdit(record)}\r            />\r          </Tooltip>\r          <Tooltip title=\"Kopyala\">\r            <Button\r              type=\"text\"\r              size=\"small\"\r              icon={<CopyOutlined />}\r              onClick={() = aria-label=\"copy outlined\"> handleDuplicate(record)}\r            />\r          </Tooltip>\r          <Popconfirm\r            title=\"Bu paketi silmek istediğinizden emin misiniz?\"\r            onConfirm={() => handleDelete(record.id)}\r          >\r            <Tooltip title=\"Sil\">\r              <Button\r                type=\"text\"\r                size=\"small\"\r                danger\r                icon={<DeleteOutlined />}\r              / aria-label=\"delete outlined\">\r            </Tooltip>\r          </Popconfirm>\r        </Space>\r      ),\r    },\r  ];\r  // Handlers\r  const handleEdit = (pkg: Package) => {\r    setSelectedPackage(pkg);\r    form.setFieldsValue({\r      ...pkg,\r      billingCycle: pkg.billingCycle,\r      isActive: pkg.status === 'active'\r    });\r    setShowCreateModal(true);\r  };\r  const handleDelete = async (id: string) => {\r    try {\r      await packagesApi.delete(id);\r      setPackages(packages.filter((p) => p.id !== id));\r      message.success('Paket silindi');\r    } catch (error) {\r      message.error('Paket silinirken hata oluştu');\r    }\r  };\r  const handleDuplicate = (pkg: Package) => {\r    const newPackage = {\r      ...pkg,\r      id: Date.now().toString(),\r      name: `${pkg.name} (Kopya)`,\r      createdAt: new Date().toISOString(),\r    };\r    setPackages([...packages, newPackage]);\r    message.success('Paket kopyalandı');\r  };\r  const handleViewDetails = (pkg: Package) => {\r    Modal.info({\r      title: `${pkg.name} Paket Detayları`,\r      width: 600,\r      content: (\r        <Space direction=\"vertical\" style={{ width: '100%' }}>\r          <Divider />\r          <Descriptions bordered column={2}>\r            <Descriptions.Item label=\"Fiyat\" span={2}>\r              {pkg.currency}{pkg.discountedPrice || pkg.price} / {pkg.billingCycle === 'monthly' ? 'aylık' : 'yıllık'}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Max Kullanıcı\">\r              {pkg.maxUsers === 999999 ? 'Sınırsız' : pkg.maxUsers}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Max Depolama\">\r              {pkg.maxStorage === 999999 ? 'Sınırsız' : `${pkg.maxStorage}GB`}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"API Çağrı\">\r              {pkg.apiCalls === 999999 ? 'Sınırsız' : pkg.apiCalls}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Destek\">\r              {pkg.support}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Modüller\" span={2}>\r              <Space wrap>\r                {pkg.modules.map((module) => (\r                  <Tag key={module} color=\"blue\">{module}</Tag>\r                ))}\r              </Space>\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Özellikler\" span={2}>\r              <List\r                size=\"small\"\r                dataSource={pkg.features}\r                renderItem={(feature) => (\r                  <List.Item style={{ padding: '4px 0' }}>\r                    <CheckOutlined style={{ color: '#52c41a', marginRight: 8 }} />\r                    {feature}\r                  </List.Item>\r                )}\r              />\r            </Descriptions.Item>\r          </Descriptions>\r        </Space>\r      ),\r    });\r  };\r  const handleCreatePackage = async (values: any) => {\r    setLoading(true);\r    try {\r      // Prepare features and modules\r      const features: PackageFeatureDto[] = (values.features || []).map((f: string) => ({\r        featureCode: f.toLowerCase().replace(/\\s+/g, '_'),\r        featureName: f,\r        isEnabled: true\r      }));\r      const modules: PackageModuleDto[] = (values.modules || []).map((m: string) => ({\r        moduleCode: m.toLowerCase(),\r        moduleName: m,\r        isIncluded: true\r      }));\r      if (selectedPackage) {\r        // Update existing package\r        const updateRequest: UpdatePackageRequest = {\r          id: selectedPackage.id,\r          name: values.name,\r          description: values.description,\r          basePrice: values.price,\r          billingCycle: values.billingCycle === 'monthly' ? 'Monthly' : 'Yearly',\r          maxUsers: values.maxUsers,\r          maxStorage: values.maxStorage,\r          isActive: values.isActive !== undefined ? values.isActive : true\r        };\r        await packagesApi.update(selectedPackage.id, updateRequest);\r        message.success('Paket güncellendi');\r      } else {\r        // Create new package\r        const createRequest: CreatePackageRequest = {\r          name: values.name,\r          description: values.description,\r          basePrice: values.price,\r          billingCycle: values.billingCycle === 'monthly' ? 'Monthly' : 'Yearly',\r          maxUsers: values.maxUsers,\r          maxStorage: values.maxStorage,\r          isActive: true,\r          features,\r          modules\r        };\r        await packagesApi.create(createRequest);\r        message.success('Paket oluşturuldu');\r      }\r      // Refresh packages list\r      await fetchPackages();\r      setShowCreateModal(false);\r      setSelectedPackage(null);\r      form.resetFields();\r    } catch (error) {\r      message.error(selectedPackage ? 'Paket güncellenirken hata oluştu' : 'Paket oluşturulurken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleCreateFeature = (values: any) => {\r    const newFeature: Feature = {\r      ...values,\r      id: Date.now().toString(),\r    };\r    setFeatures([...features, newFeature]);\r    message.success('Özellik eklendi');\r    setShowFeatureModal(false);\r    featureForm.resetFields();\r  };\r  return (\r    <div className=\"master-packages-page\">\r      {/* Header */}\r      <motion.div \r        className=\"packages-header\"\r        initial={{ opacity: 0, y: -20 }}\r        animate={{ opacity: 1, y: 0 }}\r        transition={{ duration: 0.5 }}\r      >\r        <Title level={1}>\r          Fiyatlandırma & Paketler\r        </Title>\r        <Paragraph className=\"subtitle\">\r          İşletmenizin ihtiyaçlarına uygun paketi seçin ve hemen başlayın\r        </Paragraph>\r        <Space style={{ marginTop: 32 }}>\r          <Button \r            icon={<PlusOutlined />} \r            onClick={() = aria-label=\"plus outlined\"> setShowFeatureModal(true)}\r            size=\"large\"\r          >\r            Özellik Ekle\r          </Button>\r          <Button\r            type=\"primary\"\r            icon={<PlusOutlined />}\r            onClick={() = aria-label=\"plus outlined\"> setShowCreateModal(true)}\r            className=\"package-action-btn primary\"\r            size=\"large\"\r          >\r            Yeni Paket Oluştur\r          </Button>\r        </Space>\r      </motion.div>\r      {/* Stats */}\r      <Row gutter={[24, 24]} className=\"packages-stats\">\r        {stats.map((stat, index) => (\r          <Col xs={24} sm={12} md={12} lg={6} key={index}>\r            <motion.div\r              initial={{ opacity: 0, y: 20 }}\r              animate={{ opacity: 1, y: 0 }}\r              transition={{ delay: index * 0.1 }}\r              whileHover={{ scale: 1.02 }}\r            >\r              <Card className=\"package-stat-card\">\r                <div className=\"stat-icon-wrapper\" style={{\r                  background: `linear-gradient(135deg, ${stat.color}20 0%, ${stat.color}10 100%)`\r                }}>\r                  {stat.icon}\r                </div>\r                <Title level={3} style={{ margin: '8px 0' }}>\r                  {stat.prefix}<CountUp end={stat.value} separator=\",\" duration={2} />{stat.suffix}\r                </Title>\r                <Text type=\"secondary\" style={{ fontSize: 14 }}>{stat.title}</Text>\r                {stat.trend && (\r                  <div style={{ marginTop: 12 }}>\r                    <Tag \r                      color={stat.trend > 0 ? 'success' : 'error'}\r                      style={{ fontSize: 12 }}\r                    >\r                      {stat.trend > 0 ? '↑' : '↓'} {Math.abs(stat.trend)}%\r                    </Tag>\r                    <Text type=\"secondary\" style={{ fontSize: 12, marginLeft: 8 }}>\r                      geçen aya göre\r                    </Text>\r                  </div>\r                )}\r              </Card>\r            </motion.div>\r          </Col>\r        ))}\r      </Row>\r      {/* Controls */}\r      <Card className=\"controls-card glass-morphism\" style={{ marginBottom: 32 }}>\r        <Row align=\"middle\" justify=\"space-between\">\r          <Col>\r            <Space size=\"large\">\r              <Text strong style={{ fontSize: 16 }}>Faturalama Dönemi:</Text>\r              <Segmented\r                value={billingCycle}\r                onChange={(value) => setBillingCycle(value as 'monthly' | 'yearly')}\r                options={[\r                  { label: 'Aylık Ödeme', value: 'monthly' },\r                  { \r                    label: (\r                      <Space>\r                        <span>Yıllık Ödeme</span>\r                        <Tag color=\"success\" style={{ marginLeft: 4 }}>\r                          %20 İNDİRİM\r                        </Tag>\r                      </Space>\r                    ), \r                    value: 'yearly' \r                  },\r                ]}\r                size=\"large\"\r              />\r            </Space>\r          </Col>\r          <Col>\r            <Space>\r              <Segmented\r                value={viewMode}\r                onChange={(value) => setViewMode(value as 'grid' | 'table')}\r                options={[\r                  { label: 'Grid', value: 'grid', icon: <AppstoreOutlined /> },\r                  { label: 'Tablo', value: 'table', icon: <BarsOutlined /> },\r                ]}\r              />\r              <Button icon={<ReloadOutlined spin={loading} / aria-label=\"reload outlined\">} onClick={() => fetchPackages()}>\r                Yenile\r              </Button>\r            </Space>\r          </Col>\r        </Row>\r      </Card>\r      {/* Content */}\r      <AnimatePresence mode=\"wait\">\r        {viewMode === 'grid' ? (\r          <motion.div\r            key=\"grid\"\r            initial={{ opacity: 0 }}\r            animate={{ opacity: 1 }}\r            exit={{ opacity: 0 }}\r          >\r            <Row gutter={[20, 20]}>\r              {packages.map((pkg) => (\r                <Col xs={24} sm={24} md={12} lg={8} xl={8} xxl={6} key={pkg.id}>\r                  <PackageCard pkg={pkg} />\r                </Col>\r              ))}\r            </Row>\r          </motion.div>\r        ) : (\r          <motion.div\r            key=\"table\"\r            initial={{ opacity: 0 }}\r            animate={{ opacity: 1 }}\r            exit={{ opacity: 0 }}\r          >\r            <Card className=\"table-card glass-morphism\">\r              <Table\r                columns={columns}\r                dataSource={packages}\r                rowKey=\"id\"\r                loading={loading}\r                pagination={{\r                  pageSize: 10,\r                  showSizeChanger: true,\r                  showTotal: (total) => `Toplam ${total} paket`,\r                }}\r              />\r            </Card>\r          </motion.div>\r        )}\r      </AnimatePresence>\r      {/* Create/Edit Package Modal */}\r      <Modal\r        title={selectedPackage ? 'Paket Düzenle' : 'Yeni Paket Oluştur'}\r        open={showCreateModal}\r        onCancel={() => {\r          setShowCreateModal(false);\r          setSelectedPackage(null);\r          form.resetFields();\r        }}\r        footer={null}\r        width={700}\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleCreatePackage}\r        >\r          <Tabs defaultActiveKey=\"1\">\r            <TabPane tab=\"Genel Bilgiler\" key=\"1\">\r              <Row gutter={16}>\r                <Col span={12}>\r                  <Form.Item\r                    name=\"name\"\r                    label=\"Paket Adı\"\r                    rules={[{ required: true, message: 'Paket adı gerekli' }]}\r                  >\r                    <Input placeholder=\"Örn: Professional\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item\r                    name=\"billingCycle\"\r                    label=\"Faturalandırma\"\r                    rules={[{ required: true }]}\r                  >\r                    <Select aria-label=\"select field\">\r                      <Select.Option value=\"monthly\" aria-label=\"select field\">Aylık</Select.Option>\r                      <Select.Option value=\"yearly\" aria-label=\"select field\">Yıllık</Select.Option>\r                    </Select>\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item\r                name=\"description\"\r                label=\"Açıklama\"\r                rules={[{ required: true, message: 'Açıklama gerekli' }]}\r              >\r                <Input.TextArea rows={3} placeholder=\"Paket açıklaması\" / aria-label=\"input field\">\r              </Form.Item>\r              <Row gutter={16}>\r                <Col span={8}>\r                  <Form.Item\r                    name=\"price\"\r                    label=\"Fiyat\"\r                    rules={[{ required: true, message: 'Fiyat gerekli' }]}\r                  >\r                    <InputNumber\r                      min={0}\r                      style={{ width: '100%' }}\r                      addonBefore=\"₺\"\r                      placeholder=\"599\"\r                    / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col span={8}>\r                  <Form.Item\r                    name=\"discountedPrice\"\r                    label=\"İndirimli Fiyat\"\r                  >\r                    <InputNumber\r                      min={0}\r                      style={{ width: '100%' }}\r                      addonBefore=\"₺\"\r                      placeholder=\"499\"\r                    / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col span={8}>\r                  <Form.Item\r                    name=\"color\"\r                    label=\"Renk\"\r                    rules={[{ required: true }]}\r                  >\r                    <Input type=\"color\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Row gutter={16}>\r                <Col span={6}>\r                  <Form.Item name=\"popular\" valuePropName=\"checked\">\r                    <Checkbox>Popüler</Checkbox>\r                  </Form.Item>\r                </Col>\r                <Col span={6}>\r                  <Form.Item name=\"recommended\" valuePropName=\"checked\">\r                    <Checkbox>Önerilen</Checkbox>\r                  </Form.Item>\r                </Col>\r                <Col span={6}>\r                  <Form.Item name=\"new\" valuePropName=\"checked\">\r                    <Checkbox>Yeni</Checkbox>\r                  </Form.Item>\r                </Col>\r                <Col span={6}>\r                  <Form.Item name=\"isActive\" valuePropName=\"checked\" initialValue={true}>\r                    <Checkbox>Aktif</Checkbox>\r                  </Form.Item>\r                </Col>\r              </Row>\r            </TabPane>\r            <TabPane tab=\"Limitler\" key=\"2\">\r              <Row gutter={16}>\r                <Col span={12}>\r                  <Form.Item\r                    name=\"maxUsers\"\r                    label=\"Maksimum Kullanıcı\"\r                    rules={[{ required: true }]}\r                  >\r                    <InputNumber\r                      min={1}\r                      style={{ width: '100%' }}\r                      placeholder=\"100\"\r                    / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item\r                    name=\"maxStorage\"\r                    label=\"Maksimum Depolama (GB)\"\r                    rules={[{ required: true }]}\r                  >\r                    <InputNumber\r                      min={1}\r                      style={{ width: '100%' }}\r                      placeholder=\"100\"\r                    / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Row gutter={16}>\r                <Col span={12}>\r                  <Form.Item\r                    name=\"apiCalls\"\r                    label=\"API Çağrı Limiti\"\r                    rules={[{ required: true }]}\r                  >\r                    <InputNumber\r                      min={0}\r                      style={{ width: '100%' }}\r                      placeholder=\"50000\"\r                    / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item\r                    name=\"support\"\r                    label=\"Destek Seviyesi\"\r                    rules={[{ required: true }]}\r                  >\r                    <Select aria-label=\"select field\">\r                      <Select.Option value=\"E-posta\" aria-label=\"select field\">E-posta</Select.Option>\r                      <Select.Option value=\"E-posta + Telefon\" aria-label=\"select field\">E-posta + Telefon</Select.Option>\r                      <Select.Option value=\"7/24 Telefon + Chat\" aria-label=\"select field\">7/24 Telefon + Chat</Select.Option>\r                      <Select.Option value=\"Dedike Account Manager\" aria-label=\"select field\">Dedike Account Manager</Select.Option>\r                    </Select>\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Row gutter={16}>\r                <Col span={12}>\r                  <Form.Item name=\"customDomain\" valuePropName=\"checked\">\r                    <Checkbox>Özel Domain Desteği</Checkbox>\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item name=\"whiteLabel\" valuePropName=\"checked\">\r                    <Checkbox>White Label</Checkbox>\r                  </Form.Item>\r                </Col>\r              </Row>\r            </TabPane>\r            <TabPane tab=\"Modüller\" key=\"3\">\r              <Form.Item name=\"modules\" label=\"Aktif Modüller\">\r                <Checkbox.Group>\r                  <Row>\r                    <Col span={8}>\r                      <Checkbox value=\"CRM\">CRM</Checkbox>\r                    </Col>\r                    <Col span={8}>\r                      <Checkbox value=\"Sales\">Sales</Checkbox>\r                    </Col>\r                    <Col span={8}>\r                      <Checkbox value=\"Finance\">Finance</Checkbox>\r                    </Col>\r                    <Col span={8}>\r                      <Checkbox value=\"HR\">HR</Checkbox>\r                    </Col>\r                    <Col span={8}>\r                      <Checkbox value=\"Production\">Production</Checkbox>\r                    </Col>\r                    <Col span={8}>\r                      <Checkbox value=\"Inventory\">Inventory</Checkbox>\r                    </Col>\r                  </Row>\r                </Checkbox.Group>\r              </Form.Item>\r            </TabPane>\r            <TabPane tab=\"Özellikler\" key=\"4\">\r              <Form.Item name=\"features\" label=\"Paket Özellikleri\">\r                <Select\r                  mode=\"tags\"\r                  style={{ width: '100%' }}\r                  placeholder=\"Özellik ekleyin\"\r                  options={features.map((f) = aria-label=\"select field\"> ({ label: f.name, value: f.name }))}\r                />\r              </Form.Item>\r            </TabPane>\r          </Tabs>\r          <Form.Item>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => setShowCreateModal(false)}>İptal</Button>\r              <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\r                {selectedPackage ? 'Güncelle' : 'Oluştur'}\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Feature Modal */}\r      <Modal\r        title=\"Yeni Özellik Ekle\"\r        open={showFeatureModal}\r        onCancel={() => {\r          setShowFeatureModal(false);\r          featureForm.resetFields();\r        }}\r        footer={null}\r      >\r        <Form\r          form={featureForm}\r          layout=\"vertical\"\r          onFinish={handleCreateFeature}\r        >\r          <Form.Item\r            name=\"name\"\r            label=\"Özellik Adı\"\r            rules={[{ required: true }]}\r          >\r            <Input placeholder=\"Örn: API Erişimi\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item\r            name=\"description\"\r            label=\"Açıklama\"\r            rules={[{ required: true }]}\r          >\r            <Input.TextArea rows={2} placeholder=\"Özellik açıklaması\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item\r            name=\"category\"\r            label=\"Kategori\"\r            rules={[{ required: true }]}\r          >\r            <Select aria-label=\"select field\">\r              <Select.Option value=\"Modüller\" aria-label=\"select field\">Modüller</Select.Option>\r              <Select.Option value=\"Entegrasyon\" aria-label=\"select field\">Entegrasyon</Select.Option>\r              <Select.Option value=\"Özelleştirme\" aria-label=\"select field\">Özelleştirme</Select.Option>\r              <Select.Option value=\"Destek\" aria-label=\"select field\">Destek</Select.Option>\r              <Select.Option value=\"Güvenlik\" aria-label=\"select field\">Güvenlik</Select.Option>\r            </Select>\r          </Form.Item>\r          <Form.Item\r            name=\"packages\"\r            label=\"Paketler\"\r            rules={[{ required: true }]}\r          >\r            <Checkbox.Group>\r              <Row>\r                {packages.map((pkg) => (\r                  <Col span={12} key={pkg.id}>\r                    <Checkbox value={pkg.name}>{pkg.name}</Checkbox>\r                  </Col>\r                ))}\r              </Row>\r            </Checkbox.Group>\r          </Form.Item>\r          <Form.Item>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => setShowFeatureModal(false)}>İptal</Button>\r              <Button type=\"primary\" htmlType=\"submit\">\r                Ekle\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r    </div>\r  );\r};\r// Add missing import\rimport { Descriptions } from 'antd';",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Packages/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Table,\r  Button,\r  Space,\r  Tag,\r  Input,\r  DatePicker,\r  Select,\r  Row,\r  Col,\r  Statistic,\r  Modal,\r  message,\r  Tooltip,\r  Typography,\r  Timeline,\r  Descriptions,\r  Alert,\r  Badge,\r} from 'antd';\rimport {\r  SearchOutlined,\r  DollarOutlined,\r  CreditCardOutlined,\r  BankOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  ClockCircleOutlined,\r  SyncOutlined,\r  ExportOutlined,\r  EyeOutlined,\r  FileTextOutlined,\r  WarningOutlined,\r  ArrowUpOutlined,\r  ArrowDownOutlined,\r} from '@ant-design/icons';\rimport type { ColumnsType } from 'antd/es/table';\rimport dayjs from 'dayjs';\rconst { RangePicker } = DatePicker;\rconst { Title, Text } = Typography;\rinterface Payment {\r  id: string;\r  transactionId: string;\r  tenant: string;\r  tenantId: string;\r  amount: number;\r  currency: string;\r  status: 'completed' | 'pending' | 'failed' | 'refunded';\r  method: 'credit_card' | 'bank_transfer' | 'paypal' | 'stripe';\r  invoiceNumber?: string;\r  description: string;\r  createdAt: string;\r  completedAt?: string;\r  refundedAt?: string;\r  failureReason?: string;\r  metadata?: Record<string, any>;\r}\rconst MasterPaymentsPage: React.FC = () => {\r  const [payments, setPayments] = useState<Payment[]>([]);\r  const [loading, setLoading] = useState(false);\r  const [selectedPayment, setSelectedPayment] = useState<Payment | null>(null);\r  const [detailModalVisible, setDetailModalVisible] = useState(false);\r  const [filters, setFilters] = useState({\r    search: '',\r    status: 'all',\r    method: 'all',\r    dateRange: null as any,\r  });\r  // Mock data\r  useEffect(() => {\r    const mockPayments: Payment[] = [\r      {\r        id: '1',\r        transactionId: 'TRX-2024-001',\r        tenant: 'TechCorp Solutions',\r        tenantId: 'tenant-1',\r        amount: 2950,\r        currency: 'TRY',\r        status: 'completed',\r        method: 'credit_card',\r        invoiceNumber: 'INV-2024-001',\r        description: 'Enterprise Package - Monthly Payment',\r        createdAt: '2024-02-10T10:30:00',\r        completedAt: '2024-02-10T10:31:00',\r        metadata: {\r          cardLast4: '4242',\r          cardBrand: 'Visa',\r        },\r      },\r      {\r        id: '2',\r        transactionId: 'TRX-2024-002',\r        tenant: 'Global Retail Inc',\r        tenantId: 'tenant-2',\r        amount: 1770,\r        currency: 'TRY',\r        status: 'pending',\r        method: 'bank_transfer',\r        invoiceNumber: 'INV-2024-002',\r        description: 'Professional Package - Monthly Payment',\r        createdAt: '2024-02-11T14:20:00',\r        metadata: {\r          bankName: 'Garanti Bank',\r          accountNumber: '****1234',\r        },\r      },\r      {\r        id: '3',\r        transactionId: 'TRX-2024-003',\r        tenant: 'StartUp Hub',\r        tenantId: 'tenant-3',\r        amount: 590,\r        currency: 'TRY',\r        status: 'failed',\r        method: 'credit_card',\r        invoiceNumber: 'INV-2024-003',\r        description: 'Starter Package - Monthly Payment',\r        createdAt: '2024-02-09T09:15:00',\r        failureReason: 'Insufficient funds',\r        metadata: {\r          cardLast4: '5555',\r          cardBrand: 'Mastercard',\r        },\r      },\r      {\r        id: '4',\r        transactionId: 'TRX-2024-004',\r        tenant: 'Digital Agency',\r        tenantId: 'tenant-4',\r        amount: 1200,\r        currency: 'TRY',\r        status: 'refunded',\r        method: 'paypal',\r        description: 'Professional Package - Refund',\r        createdAt: '2024-02-08T11:00:00',\r        completedAt: '2024-02-08T11:01:00',\r        refundedAt: '2024-02-09T10:00:00',\r        metadata: {\r          paypalEmail: 'billing@digitalagency.com',\r        },\r      },\r    ];\r    setPayments(mockPayments);\r  }, []);\r  const handleViewDetails = (payment: Payment) => {\r    setSelectedPayment(payment);\r    setDetailModalVisible(true);\r  };\r  const handleRefund = (payment: Payment) => {\r    Modal.confirm({\r      title: 'İade İşlemi',\r      content: `${payment.transactionId} numaralı ödemeyi iade etmek istediğinize emin misiniz?`,\r      onOk: () => {\r        message.success('İade işlemi başlatıldı');\r      },\r    });\r  };\r  const handleRetryPayment = (payment: Payment) => {\r    message.info('Ödeme yeniden deneniyor...');\r  };\r  const getPaymentMethodIcon = (method: string) => {\r    switch (method) {\r      case 'credit_card':\r        return <CreditCardOutlined />;\r      case 'bank_transfer':\r        return <BankOutlined />;\r      case 'paypal':\r        return <DollarOutlined />;\r      case 'stripe':\r        return <CreditCardOutlined />;\r      default:\r        return <DollarOutlined />;\r    }\r  };\r  const columns: ColumnsType<Payment> = [\r    {\r      title: 'İşlem No',\r      dataIndex: 'transactionId',\r      key: 'transactionId',\r      render: (text) => <a>{text}</a>,\r    },\r    {\r      title: 'Firma',\r      dataIndex: 'tenant',\r      key: 'tenant',\r    },\r    {\r      title: 'Tutar',\r      dataIndex: 'amount',\r      key: 'amount',\r      render: (value, record) => (\r        <Text strong>\r          {record.currency === 'TRY' ? '₺' : record.currency}\r          {value.toLocaleString('tr-TR')}\r        </Text>\r      ),\r    },\r    {\r      title: 'Yöntem',\r      dataIndex: 'method',\r      key: 'method',\r      render: (method) => {\r        const methodNames = {\r          credit_card: 'Kredi Kartı',\r          bank_transfer: 'Banka Transferi',\r          paypal: 'PayPal',\r          stripe: 'Stripe',\r        };\r        return (\r          <Space>\r            {getPaymentMethodIcon(method)}\r            <span>{methodNames[method]}</span>\r          </Space>\r        );\r      },\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status) => {\r        const statusConfig = {\r          completed: { color: 'success', text: 'Tamamlandı', icon: <CheckCircleOutlined /> },\r          pending: { color: 'warning', text: 'Bekliyor', icon: <ClockCircleOutlined /> },\r          failed: { color: 'error', text: 'Başarısız', icon: <CloseCircleOutlined /> },\r          refunded: { color: 'default', text: 'İade Edildi', icon: <SyncOutlined /> },\r        };\r        const config = statusConfig[status];\r        return (\r          <Tag color={config.color} icon={config.icon}>\r            {config.text}\r          </Tag>\r        );\r      },\r    },\r    {\r      title: 'Tarih',\r      dataIndex: 'createdAt',\r      key: 'createdAt',\r      render: (date) => dayjs(date).format('DD.MM.YYYY HH:mm'),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      render: (_, record) => (\r        <Space size=\"middle\">\r          <Tooltip title=\"Detaylar\">\r            <Button\r              type=\"text\"\r              icon={<EyeOutlined />}\r              onClick={() = aria-label=\"eye outlined\"> handleViewDetails(record)}\r            />\r          </Tooltip>\r          {record.status === 'completed' && (\r            <Tooltip title=\"İade Et\">\r              <Button\r                type=\"text\"\r                icon={<SyncOutlined />}\r                onClick={() = aria-label=\"sync outlined\"> handleRefund(record)}\r              />\r            </Tooltip>\r          )}\r          {record.status === 'failed' && (\r            <Tooltip title=\"Tekrar Dene\">\r              <Button\r                type=\"text\"\r                icon={<SyncOutlined />}\r                onClick={() = aria-label=\"sync outlined\"> handleRetryPayment(record)}\r              />\r            </Tooltip>\r          )}\r          {record.invoiceNumber && (\r            <Tooltip title=\"Faturayı Görüntüle\">\r              <Button\r                type=\"text\"\r                icon={<FileTextOutlined />}\r              / aria-label=\"file text outlined\">\r            </Tooltip>\r          )}\r        </Space>\r      ),\r    },\r  ];\r  const stats = {\r    total: payments.length,\r    completed: payments.filter(p => p.status === 'completed').length,\r    pending: payments.filter(p => p.status === 'pending').length,\r    failed: payments.filter(p => p.status === 'failed').length,\r    totalAmount: payments.filter(p => p.status === 'completed').reduce((sum, p) => sum + p.amount, 0),\r    pendingAmount: payments.filter(p => p.status === 'pending').reduce((sum, p) => sum + p.amount, 0),\r    refundedAmount: payments.filter(p => p.status === 'refunded').reduce((sum, p) => sum + p.amount, 0),\r  };\r  return (\r    <div className=\"master-payments-page\">\r      <Row gutter={[24, 24]}>\r        {/* Statistics Cards */}\r        <Col span={24}>\r          <Row gutter={[16, 16]}>\r            <Col xs={24} sm={12} lg={6}>\r              <Card>\r                <Statistic\r                  title=\"Toplam Ödeme\"\r                  value={stats.total}\r                  prefix={<DollarOutlined />}\r                />\r              </Card>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <Card>\r                <Statistic\r                  title=\"Başarılı\"\r                  value={stats.completed}\r                  valueStyle={{ color: '#3f8600' }}\r                  prefix={<CheckCircleOutlined />}\r                />\r              </Card>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <Card>\r                <Statistic\r                  title=\"Başarısız\"\r                  value={stats.failed}\r                  valueStyle={{ color: '#cf1322' }}\r                  prefix={<CloseCircleOutlined />}\r                />\r              </Card>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <Card>\r                <Statistic\r                  title=\"Toplam Gelir\"\r                  value={stats.totalAmount}\r                  prefix=\"₺\"\r                  precision={2}\r                  valueStyle={{ color: '#3f8600' }}\r                  suffix={\r                    <span style={{ fontSize: 14, color: '#3f8600' }}>\r                      <ArrowUpOutlined />\r                    </span>\r                  }\r                />\r              </Card>\r            </Col>\r          </Row>\r        </Col>\r        {/* Recent Activity Alert */}\r        {stats.failed > 0 && (\r          <Col span={24}>\r            <Alert\r              message=\"Dikkat!\"\r              description={`${stats.failed} adet başarısız ödeme işlemi bulunmaktadır. Lütfen kontrol ediniz.`}\r              type=\"warning\"\r              showIcon\r              icon={<WarningOutlined />}\r              closable\r            />\r          </Col>\r        )}\r        {/* Main Content */}\r        <Col span={24}>\r          <Card\r            title=\"Ödemeler\"\r            extra={\r              <Space>\r                <Button icon={<ExportOutlined />} aria-label=\"export outlined\">Dışa Aktar</Button>\r                <Button type=\"primary\" icon={<SyncOutlined />} aria-label=\"sync outlined\">\r                  Yenile\r                </Button>\r              </Space>\r            }\r          >\r            {/* Filters */}\r            <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\r              <Col xs={24} sm={12} lg={8}>\r                <Input\r                  placeholder=\"İşlem no veya firma adı ile ara...\"\r                  prefix={<SearchOutlined / aria-label=\"input field\">}\r                  value={filters.search}\r                  onChange={(e) => setFilters({ ...filters, search: e.target.value })}\r                />\r              </Col>\r              <Col xs={24} sm={12} lg={4}>\r                <Select\r                  style={{ width: '100%' }}\r                  placeholder=\"Durum\"\r                  value={filters.status}\r                  onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, status: value })}\r                >\r                  <Select.Option value=\"all\" aria-label=\"select field\">Tümü</Select.Option>\r                  <Select.Option value=\"completed\" aria-label=\"select field\">Tamamlandı</Select.Option>\r                  <Select.Option value=\"pending\" aria-label=\"select field\">Bekliyor</Select.Option>\r                  <Select.Option value=\"failed\" aria-label=\"select field\">Başarısız</Select.Option>\r                  <Select.Option value=\"refunded\" aria-label=\"select field\">İade Edildi</Select.Option>\r                </Select>\r              </Col>\r              <Col xs={24} sm={12} lg={4}>\r                <Select\r                  style={{ width: '100%' }}\r                  placeholder=\"Yöntem\"\r                  value={filters.method}\r                  onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, method: value })}\r                >\r                  <Select.Option value=\"all\" aria-label=\"select field\">Tümü</Select.Option>\r                  <Select.Option value=\"credit_card\" aria-label=\"select field\">Kredi Kartı</Select.Option>\r                  <Select.Option value=\"bank_transfer\" aria-label=\"select field\">Banka Transferi</Select.Option>\r                  <Select.Option value=\"paypal\" aria-label=\"select field\">PayPal</Select.Option>\r                  <Select.Option value=\"stripe\" aria-label=\"select field\">Stripe</Select.Option>\r                </Select>\r              </Col>\r              <Col xs={24} sm={12} lg={8}>\r                <RangePicker\r                  style={{ width: '100%' }}\r                  placeholder={['Başlangıç', 'Bitiş']}\r                  showTime\r                  onChange={(dates) => setFilters({ ...filters, dateRange: dates })}\r                />\r              </Col>\r            </Row>\r            {/* Table */}\r            <Table\r              columns={columns}\r              dataSource={payments}\r              rowKey=\"id\"\r              loading={loading}\r              pagination={{\r                pageSize: 10,\r                showSizeChanger: true,\r                showTotal: (total) => `Toplam ${total} ödeme`,\r              }}\r            />\r          </Card>\r        </Col>\r      </Row>\r      {/* Payment Detail Modal */}\r      <Modal\r        title={`Ödeme Detayı - ${selectedPayment?.transactionId}`}\r        open={detailModalVisible}\r        onCancel={() => setDetailModalVisible(false)}\r        width={700}\r        footer={[\r          <Button key=\"close\" onClick={() => setDetailModalVisible(false)}>\r            Kapat\r          </Button>,\r        ]}\r      >\r        {selectedPayment && (\r          <div>\r            <Descriptions bordered column={{ xs: 1, sm: 2 }}>\r              <Descriptions.Item label=\"İşlem No\">\r                {selectedPayment.transactionId}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Firma\">\r                {selectedPayment.tenant}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Tutar\">\r                ₺{selectedPayment.amount.toLocaleString('tr-TR')}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Durum\">\r                {selectedPayment.status === 'completed' && (\r                  <Badge status=\"success\" text=\"Tamamlandı\" />\r                )}\r                {selectedPayment.status === 'pending' && (\r                  <Badge status=\"processing\" text=\"Bekliyor\" />\r                )}\r                {selectedPayment.status === 'failed' && (\r                  <Badge status=\"error\" text=\"Başarısız\" />\r                )}\r                {selectedPayment.status === 'refunded' && (\r                  <Badge status=\"default\" text=\"İade Edildi\" />\r                )}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Ödeme Yöntemi\">\r                <Space>\r                  {getPaymentMethodIcon(selectedPayment.method)}\r                  <span>\r                    {selectedPayment.method === 'credit_card' && 'Kredi Kartı'}\r                    {selectedPayment.method === 'bank_transfer' && 'Banka Transferi'}\r                    {selectedPayment.method === 'paypal' && 'PayPal'}\r                    {selectedPayment.method === 'stripe' && 'Stripe'}\r                  </span>\r                </Space>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Fatura No\">\r                {selectedPayment.invoiceNumber || '-'}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Açıklama\" span={2}>\r                {selectedPayment.description}\r              </Descriptions.Item>\r              {selectedPayment.failureReason && (\r                <Descriptions.Item label=\"Hata Nedeni\" span={2}>\r                  <Text type=\"danger\">{selectedPayment.failureReason}</Text>\r                </Descriptions.Item>\r              )}\r            </Descriptions>\r            <Title level={5} style={{ marginTop: 24 }}>İşlem Geçmişi</Title>\r            <Timeline>\r              <Timeline.Item color=\"green\">\r                İşlem başlatıldı - {dayjs(selectedPayment.createdAt).format('DD.MM.YYYY HH:mm')}\r              </Timeline.Item>\r              {selectedPayment.completedAt && (\r                <Timeline.Item color=\"green\">\r                  Ödeme tamamlandı - {dayjs(selectedPayment.completedAt).format('DD.MM.YYYY HH:mm')}\r                </Timeline.Item>\r              )}\r              {selectedPayment.status === 'failed' && (\r                <Timeline.Item color=\"red\">\r                  Ödeme başarısız - {selectedPayment.failureReason}\r                </Timeline.Item>\r              )}\r              {selectedPayment.refundedAt && (\r                <Timeline.Item color=\"gray\">\r                  İade edildi - {dayjs(selectedPayment.refundedAt).format('DD.MM.YYYY HH:mm')}\r                </Timeline.Item>\r              )}\r            </Timeline>\r          </div>\r        )}\r      </Modal>\r    </div>\r  );\r};\rexport default MasterPaymentsPage;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Payments/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Row,\r  Col,\r  Progress,\r  Statistic,\r  Table,\r  Tag,\r  Alert,\r  Button,\r  Space,\r  Typography,\r  Timeline,\r  Badge,\r  Tabs,\r  List,\r  Avatar,\r  Tooltip,\r  Select,\r  DatePicker,\r} from 'antd';\rimport {\r  ThunderboltOutlined,\r  ClockCircleOutlined,\r  CloudServerOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r  WarningOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  RiseOutlined,\r  FallOutlined,\r  ReloadOutlined,\r  SettingOutlined,\r  DashboardOutlined,\r  DesktopOutlined,\r  GlobalOutlined,\r  WifiOutlined,\r} from '@ant-design/icons';\rimport {\r  LineChart,\r  Line,\r  AreaChart,\r  Area,\r  XAxis,\r  YAxis,\r  CartesianGrid,\r  Tooltip as ChartTooltip,\r  ResponsiveContainer,\r  Legend,\r} from 'recharts';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst { RangePicker } = DatePicker;\rinterface PerformanceMetric {\r  id: string;\r  name: string;\r  value: number;\r  unit: string;\r  status: 'good' | 'warning' | 'critical';\r  trend: 'up' | 'down' | 'stable';\r  trendValue: number;\r}\rinterface ServerStatus {\r  id: string;\r  name: string;\r  type: string;\r  cpu: number;\r  memory: number;\r  disk: number;\r  network: number;\r  status: 'online' | 'offline' | 'maintenance';\r  uptime: string;\r  lastCheck: string;\r}\rconst MasterPerformancePage: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [selectedServer, setSelectedServer] = useState<string>('all');\r  const [timeRange, setTimeRange] = useState('1h');\r  // Mock real-time data\r  const [realtimeData, setRealtimeData] = useState<any[]>([]);\r  useEffect(() => {\r    // Simulate real-time data updates\r    const interval = setInterval(() => {\r      const newData = {\r        time: new Date().toLocaleTimeString(),\r        cpu: Math.floor(Math.random() * 30 + 50),\r        memory: Math.floor(Math.random() * 20 + 60),\r        requests: Math.floor(Math.random() * 500 + 1000),\r        responseTime: Math.floor(Math.random() * 50 + 100),\r      };\r      setRealtimeData(prev => {\r        const updated = [...prev, newData];\r        return updated.slice(-20); // Keep last 20 data points\r      });\r    }, 2000);\r    return () => clearInterval(interval);\r  }, []);\r  const performanceMetrics: PerformanceMetric[] = [\r    {\r      id: '1',\r      name: 'Response Time',\r      value: 125,\r      unit: 'ms',\r      status: 'good',\r      trend: 'down',\r      trendValue: 15,\r    },\r    {\r      id: '2',\r      name: 'Throughput',\r      value: 1500,\r      unit: 'req/s',\r      status: 'good',\r      trend: 'up',\r      trendValue: 8,\r    },\r    {\r      id: '3',\r      name: 'Error Rate',\r      value: 0.2,\r      unit: '%',\r      status: 'good',\r      trend: 'down',\r      trendValue: 5,\r    },\r    {\r      id: '4',\r      name: 'Apdex Score',\r      value: 0.95,\r      unit: '',\r      status: 'good',\r      trend: 'stable',\r      trendValue: 0,\r    },\r  ];\r  const servers: ServerStatus[] = [\r    {\r      id: '1',\r      name: 'API Server 1',\r      type: 'Application',\r      cpu: 65,\r      memory: 72,\r      disk: 45,\r      network: 88,\r      status: 'online',\r      uptime: '45 days',\r      lastCheck: '2 seconds ago',\r    },\r    {\r      id: '2',\r      name: 'Database Primary',\r      type: 'Database',\r      cpu: 45,\r      memory: 85,\r      disk: 78,\r      network: 65,\r      status: 'online',\r      uptime: '120 days',\r      lastCheck: '5 seconds ago',\r    },\r    {\r      id: '3',\r      name: 'Cache Server',\r      type: 'Cache',\r      cpu: 25,\r      memory: 45,\r      disk: 20,\r      network: 92,\r      status: 'online',\r      uptime: '30 days',\r      lastCheck: '3 seconds ago',\r    },\r    {\r      id: '4',\r      name: 'Load Balancer',\r      type: 'Network',\r      cpu: 35,\r      memory: 40,\r      disk: 15,\r      network: 95,\r      status: 'online',\r      uptime: '180 days',\r      lastCheck: '1 second ago',\r    },\r  ];\r  const apiEndpoints = [\r    { endpoint: '/api/auth/login', avgTime: 120, calls: 15420, errors: 12, errorRate: 0.08 },\r    { endpoint: '/api/tenants', avgTime: 85, calls: 8932, errors: 5, errorRate: 0.06 },\r    { endpoint: '/api/users', avgTime: 95, calls: 12543, errors: 8, errorRate: 0.06 },\r    { endpoint: '/api/reports', avgTime: 450, calls: 3421, errors: 45, errorRate: 1.31 },\r    { endpoint: '/api/analytics', avgTime: 320, calls: 5678, errors: 23, errorRate: 0.41 },\r  ];\r  const slowQueries = [\r    {\r      query: 'SELECT * FROM tenants JOIN subscriptions...',\r      duration: 2.5,\r      executions: 145,\r      database: 'Master',\r    },\r    {\r      query: 'UPDATE users SET last_login = NOW()...',\r      duration: 1.8,\r      executions: 3421,\r      database: 'Tenant_001',\r    },\r    {\r      query: 'SELECT COUNT(*) FROM transactions WHERE...',\r      duration: 1.5,\r      executions: 892,\r      database: 'Analytics',\r    },\r  ];\r  const getStatusColor = (status: string) => {\r    switch (status) {\r      case 'good':\r      case 'online':\r        return 'success';\r      case 'warning':\r      case 'maintenance':\r        return 'warning';\r      case 'critical':\r      case 'offline':\r        return 'error';\r      default:\r        return 'default';\r    }\r  };\r  const getProgressColor = (value: number) => {\r    if (value < 50) return '#52c41a';\r    if (value < 75) return '#faad14';\r    return '#f5222d';\r  };\r  return (\r    <div className=\"master-performance-page\">\r      {/* Header */}\r      <Card style={{ marginBottom: 24 }}>\r        <Row justify=\"space-between\" align=\"middle\">\r          <Col>\r            <Space>\r              <Select\r                value={selectedServer}\r                onChange={setSelectedServer}\r                style={{ width: 200 }}\r               aria-label=\"select field\">\r                <Select.Option value=\"all\" aria-label=\"select field\">Tüm Sunucular</Select.Option>\r                {servers.map(server => (\r                  <Select.Option key={server.id} value={server.id} aria-label=\"select field\">\r                    {server.name}\r                  </Select.Option>\r                ))}\r              </Select>\r              <Select\r                value={timeRange}\r                onChange={setTimeRange}\r                style={{ width: 150 }}\r               aria-label=\"select field\">\r                <Select.Option value=\"1h\" aria-label=\"select field\">Son 1 Saat</Select.Option>\r                <Select.Option value=\"6h\" aria-label=\"select field\">Son 6 Saat</Select.Option>\r                <Select.Option value=\"24h\" aria-label=\"select field\">Son 24 Saat</Select.Option>\r                <Select.Option value=\"7d\" aria-label=\"select field\">Son 7 Gün</Select.Option>\r              </Select>\r              <Button icon={<ReloadOutlined />} onClick={() = aria-label=\"reload outlined\"> setLoading(true)}>\r                Yenile\r              </Button>\r            </Space>\r          </Col>\r          <Col>\r            <Space>\r              <Badge status=\"processing\" text=\"Canlı İzleme Aktif\" />\r              <Button icon={<SettingOutlined />} aria-label=\"setting outlined\">Ayarlar</Button>\r            </Space>\r          </Col>\r        </Row>\r      </Card>\r      {/* Key Performance Indicators */}\r      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\r        {performanceMetrics.map(metric => (\r          <Col xs={24} sm={12} lg={6} key={metric.id}>\r            <Card>\r              <Statistic\r                title={metric.name}\r                value={metric.value}\r                suffix={metric.unit}\r                valueStyle={{ color: getStatusColor(metric.status) === 'success' ? '#3f8600' : undefined }}\r                prefix={\r                  metric.trend === 'up' ? <RiseOutlined /> :\r                  metric.trend === 'down' ? <FallOutlined /> :\r                  null\r                }\r              />\r              <div style={{ marginTop: 8 }}>\r                <Tag color={getStatusColor(metric.status)}>\r                  {metric.status.toUpperCase()}\r                </Tag>\r                {metric.trend !== 'stable' && (\r                  <Text type=\"secondary\" style={{ marginLeft: 8 }}>\r                    {metric.trend === 'up' ? '+' : '-'}{metric.trendValue}%\r                  </Text>\r                )}\r              </div>\r            </Card>\r          </Col>\r        ))}\r      </Row>\r      <Tabs defaultActiveKey=\"realtime\">\r        <TabPane tab=\"Gerçek Zamanlı İzleme\" key=\"realtime\">\r          <Row gutter={[16, 16]}>\r            <Col span={24}>\r              <Card title=\"Sistem Metrikleri\" bordered={false}>\r                <ResponsiveContainer width=\"100%\" height={350}>\r                  <LineChart data={realtimeData}>\r                    <CartesianGrid strokeDasharray=\"3 3\" />\r                    <XAxis dataKey=\"time\" />\r                    <YAxis />\r                    <ChartTooltip />\r                    <Legend />\r                    <Line\r                      type=\"monotone\"\r                      dataKey=\"cpu\"\r                      stroke=\"#8884d8\"\r                      name=\"CPU %\"\r                      strokeWidth={2}\r                    />\r                    <Line\r                      type=\"monotone\"\r                      dataKey=\"memory\"\r                      stroke=\"#82ca9d\"\r                      name=\"Memory %\"\r                      strokeWidth={2}\r                    />\r                    <Line\r                      type=\"monotone\"\r                      dataKey=\"responseTime\"\r                      stroke=\"#ffc658\"\r                      name=\"Response Time (ms)\"\r                      strokeWidth={2}\r                    />\r                  </LineChart>\r                </ResponsiveContainer>\r              </Card>\r            </Col>\r          </Row>\r        </TabPane>\r        <TabPane tab=\"Sunucu Durumu\" key=\"servers\">\r          <Row gutter={[16, 16]}>\r            {servers.map(server => (\r              <Col xs={24} sm={12} lg={6} key={server.id}>\r                <Card\r                  title={\r                    <Space>\r                      <Badge status={server.status === 'online' ? 'success' : 'error'} />\r                      {server.name}\r                    </Space>\r                  }\r                  extra={<Tag color={getStatusColor(server.status)}>{server.status}</Tag>}\r                >\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <div>\r                      <Text type=\"secondary\">CPU</Text>\r                      <Progress\r                        percent={server.cpu}\r                        strokeColor={getProgressColor(server.cpu)}\r                        size=\"small\"\r                      />\r                    </div>\r                    <div>\r                      <Text type=\"secondary\">Memory</Text>\r                      <Progress\r                        percent={server.memory}\r                        strokeColor={getProgressColor(server.memory)}\r                        size=\"small\"\r                      />\r                    </div>\r                    <div>\r                      <Text type=\"secondary\">Disk</Text>\r                      <Progress\r                        percent={server.disk}\r                        strokeColor={getProgressColor(server.disk)}\r                        size=\"small\"\r                      />\r                    </div>\r                    <div>\r                      <Text type=\"secondary\">Network</Text>\r                      <Progress\r                        percent={server.network}\r                        strokeColor={getProgressColor(server.network)}\r                        size=\"small\"\r                      />\r                    </div>\r                    <div style={{ marginTop: 12 }}>\r                      <Text type=\"secondary\">Uptime: </Text>\r                      <Text strong>{server.uptime}</Text>\r                    </div>\r                    <div>\r                      <Text type=\"secondary\">Last Check: </Text>\r                      <Text>{server.lastCheck}</Text>\r                    </div>\r                  </Space>\r                </Card>\r              </Col>\r            ))}\r          </Row>\r        </TabPane>\r        <TabPane tab=\"API Performansı\" key=\"api\">\r          <Card title=\"API Endpoint Performansı\" bordered={false}>\r            <Table\r              dataSource={apiEndpoints}\r              columns={[\r                {\r                  title: 'Endpoint',\r                  dataIndex: 'endpoint',\r                  key: 'endpoint',\r                  render: (text) => <Text code>{text}</Text>,\r                },\r                {\r                  title: 'Ortalama Süre',\r                  dataIndex: 'avgTime',\r                  key: 'avgTime',\r                  render: (time) => {\r                    const color = time < 200 ? 'success' : time < 500 ? 'warning' : 'error';\r                    return <Tag color={color}>{time}ms</Tag>;\r                  },\r                },\r                {\r                  title: 'Toplam Çağrı',\r                  dataIndex: 'calls',\r                  key: 'calls',\r                  render: (calls) => calls.toLocaleString('tr-TR'),\r                },\r                {\r                  title: 'Hata Sayısı',\r                  dataIndex: 'errors',\r                  key: 'errors',\r                },\r                {\r                  title: 'Hata Oranı',\r                  dataIndex: 'errorRate',\r                  key: 'errorRate',\r                  render: (rate) => {\r                    const color = rate < 0.1 ? 'success' : rate < 1 ? 'warning' : 'error';\r                    return <Tag color={color}>{rate.toFixed(2)}%</Tag>;\r                  },\r                },\r              ]}\r              pagination={false}\r              rowKey=\"endpoint\"\r            />\r          </Card>\r        </TabPane>\r        <TabPane tab=\"Veritabanı\" key=\"database\">\r          <Row gutter={[16, 16]}>\r            <Col span={24}>\r              <Alert\r                message=\"Yavaş Sorgu Uyarısı\"\r                description=\"3 adet yavaş çalışan sorgu tespit edildi. Lütfen optimize ediniz.\"\r                type=\"warning\"\r                showIcon\r                style={{ marginBottom: 16 }}\r              />\r            </Col>\r            <Col span={24}>\r              <Card title=\"Yavaş Sorgular\" bordered={false}>\r                <Table\r                  dataSource={slowQueries}\r                  columns={[\r                    {\r                      title: 'Sorgu',\r                      dataIndex: 'query',\r                      key: 'query',\r                      render: (text) => (\r                        <Tooltip title={text}>\r                          <Text code style={{ maxWidth: 300, display: 'inline-block' }} ellipsis>\r                            {text}\r                          </Text>\r                        </Tooltip>\r                      ),\r                    },\r                    {\r                      title: 'Süre',\r                      dataIndex: 'duration',\r                      key: 'duration',\r                      render: (duration) => (\r                        <Tag color={duration > 2 ? 'error' : 'warning'}>\r                          {duration}s\r                        </Tag>\r                      ),\r                    },\r                    {\r                      title: 'Çalıştırma',\r                      dataIndex: 'executions',\r                      key: 'executions',\r                    },\r                    {\r                      title: 'Veritabanı',\r                      dataIndex: 'database',\r                      key: 'database',\r                      render: (db) => <Tag>{db}</Tag>,\r                    },\r                  ]}\r                  pagination={false}\r                  rowKey=\"query\"\r                />\r              </Card>\r            </Col>\r            <Col xs={24} lg={12}>\r              <Card title=\"Bağlantı Havuzu\" bordered={false}>\r                <Space direction=\"vertical\" style={{ width: '100%' }}>\r                  <div>\r                    <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>\r                      <Text>Aktif Bağlantılar</Text>\r                      <Text strong>85/100</Text>\r                    </div>\r                    <Progress percent={85} strokeColor=\"#1890ff\" />\r                  </div>\r                  <div>\r                    <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>\r                      <Text>Bekleyen İşlemler</Text>\r                      <Text strong>12</Text>\r                    </div>\r                    <Progress percent={12} strokeColor=\"#52c41a\" />\r                  </div>\r                  <div>\r                    <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>\r                      <Text>Zaman Aşımı</Text>\r                      <Text strong>3</Text>\r                    </div>\r                    <Progress percent={3} strokeColor=\"#faad14\" />\r                  </div>\r                </Space>\r              </Card>\r            </Col>\r            <Col xs={24} lg={12}>\r              <Card title=\"Cache Performansı\" bordered={false}>\r                <Space direction=\"vertical\" style={{ width: '100%' }}>\r                  <Statistic\r                    title=\"Cache Hit Rate\"\r                    value={92.5}\r                    suffix=\"%\"\r                    prefix={<CheckCircleOutlined />}\r                    valueStyle={{ color: '#3f8600' }}\r                  />\r                  <Row gutter={16}>\r                    <Col span={12}>\r                      <Statistic title=\"Hits\" value={125432} />\r                    </Col>\r                    <Col span={12}>\r                      <Statistic title=\"Misses\" value={10234} />\r                    </Col>\r                  </Row>\r                  <Row gutter={16}>\r                    <Col span={12}>\r                      <Statistic title=\"Keys\" value={8932} />\r                    </Col>\r                    <Col span={12}>\r                      <Statistic title=\"Memory\" value=\"256MB\" />\r                    </Col>\r                  </Row>\r                </Space>\r              </Card>\r            </Col>\r          </Row>\r        </TabPane>\r      </Tabs>\r    </div>\r  );\r};\rexport default MasterPerformancePage;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Performance/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Alert,\r  Card,\r  Row,\r  Col,\r  Typography,\r  Button,\r  Space,\r  DatePicker,\r  Select,\r  Table,\r  Tabs,\r  Statistic,\r  Tag,\r  Progress,\r  Divider,\r  Radio,\r  Tooltip,\r  message,\r  Empty,\r  Badge,\r  Segmented,\r  List,\r  Avatar,\r} from 'antd';\rimport {\r  FileTextOutlined,\r  DownloadOutlined,\r  PrinterOutlined,\r  MailOutlined,\r  CalendarOutlined,\r  BarChartOutlined,\r  LineChartOutlined,\r  PieChartOutlined,\r  AreaChartOutlined,\r  RiseOutlined,\r  FallOutlined,\r  UserOutlined,\r  ShoppingCartOutlined,\r  DollarOutlined,\r  TeamOutlined,\r  ShopOutlined,\r  FilterOutlined,\r  ReloadOutlined,\r  ExportOutlined,\r  FilePdfOutlined,\r  FileExcelOutlined,\r  ClockCircleOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  InfoCircleOutlined,\r  TrophyOutlined,\r  CrownOutlined,\r  FireOutlined,\r  RocketOutlined,\r  ThunderboltOutlined,\r} from '@ant-design/icons';\rimport { Line, Column, Pie, Area, DualAxes, Radar, Funnel } from '@ant-design/plots';\rimport { motion } from 'framer-motion';\rimport dayjs from 'dayjs';\rimport quarterOfYear from 'dayjs/plugin/quarterOfYear';\rimport weekOfYear from 'dayjs/plugin/weekOfYear';\rimport { masterApi } from '@/shared/api/master.api';\rimport '../../styles/master-layout.css';\rdayjs.extend(quarterOfYear);\rdayjs.extend(weekOfYear);\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst { Option } = Select;\rconst { RangePicker } = DatePicker;\rinterface ReportData {\r  revenue: number;\r  growth: number;\r  tenants: number;\r  users: number;\r  subscriptions: number;\r  churnRate: number;\r  arpu: number;\r  mrr: number;\r  arr: number;\r}\rinterface TenantReport {\r  id: string;\r  name: string;\r  package: string;\r  users: number;\r  revenue: number;\r  status: string;\r  createdDate: string;\r  lastActivity: string;\r}\rinterface UserReport {\r  id: string;\r  name: string;\r  tenant: string;\r  role: string;\r  loginCount: number;\r  lastLogin: string;\r  status: string;\r}\rexport const MasterReportsPage: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [activeTab, setActiveTab] = useState('overview');\r  const [reportType, setReportType] = useState('monthly');\r  const [dateRange, setDateRange] = useState<[dayjs.Dayjs, dayjs.Dayjs]>([\r    dayjs().subtract(30, 'days'),\r    dayjs(),\r  ]);\r  const [exportFormat, setExportFormat] = useState('pdf');\r  const [selectedMetric, setSelectedMetric] = useState('revenue');\r  // Mock report data\r  const reportData: ReportData = {\r    revenue: 125450,\r    growth: 23.5,\r    tenants: 156,\r    users: 3450,\r    subscriptions: 142,\r    churnRate: 2.8,\r    arpu: 850,\r    mrr: 45200,\r    arr: 542400,\r  };\r  // Mock tenant reports\r  const tenantReports: TenantReport[] = [\r    {\r      id: '1',\r      name: 'TechCorp Solutions',\r      package: 'Enterprise',\r      users: 125,\r      revenue: 12500,\r      status: 'active',\r      createdDate: '2023-06-15',\r      lastActivity: dayjs().subtract(2, 'hours').toISOString(),\r    },\r    {\r      id: '2',\r      name: 'StartupHub Inc',\r      package: 'Professional',\r      users: 45,\r      revenue: 4500,\r      status: 'active',\r      createdDate: '2023-08-20',\r      lastActivity: dayjs().subtract(1, 'day').toISOString(),\r    },\r    {\r      id: '3',\r      name: 'Digital Agency',\r      package: 'Basic',\r      users: 15,\r      revenue: 990,\r      status: 'active',\r      createdDate: '2023-10-05',\r      lastActivity: dayjs().subtract(3, 'hours').toISOString(),\r    },\r  ];\r  // Revenue trend data\r  const revenueTrendData = Array.from({ length: 12 }, (_, i) => ({\r    month: dayjs().subtract(11 - i, 'months').format('MMM'),\r    revenue: Math.floor(Math.random() * 50000) + 30000,\r    subscriptions: Math.floor(Math.random() * 30) + 100,\r  }));\r  // Package distribution data\r  const packageDistribution = [\r    { type: 'Enterprise', value: 25, count: 25 },\r    { type: 'Professional', value: 45, count: 45 },\r    { type: 'Basic', value: 65, count: 65 },\r    { type: 'Starter', value: 21, count: 21 },\r  ];\r  // User activity data\r  const userActivityData = Array.from({ length: 24 }, (_, i) => ({\r    hour: `${i}:00`,\r    active: Math.floor(Math.random() * 200) + 50,\r    new: Math.floor(Math.random() * 20) + 5,\r  }));\r  // Top tenants by revenue\r  const topTenants = [\r    { name: 'TechCorp', revenue: 12500, growth: 15 },\r    { name: 'StartupHub', revenue: 8900, growth: 32 },\r    { name: 'Digital Agency', revenue: 6750, growth: -5 },\r    { name: 'CloudFirst', revenue: 5200, growth: 18 },\r    { name: 'DataDriven Co', revenue: 4800, growth: 8 },\r  ];\r  useEffect(() => {\r    fetchReports();\r  }, [reportType, dateRange]);\r  const fetchReports = async () => {\r    setLoading(true);\r    try {\r      // API çağrıları yapılacak\r      // const response = await masterApi.reports.getOverview({\r      //   type: reportType,\r      //   startDate: dateRange[0].toISOString(),\r      //   endDate: dateRange[1].toISOString(),\r      // });\r      setTimeout(() => {\r        setLoading(false);\r      }, 500);\r    } catch (error) {\r      message.error('Raporlar yüklenirken hata oluştu');\r      setLoading(false);\r    }\r  };\r  const handleExport = (format: string) => {\r    message.success(`Rapor ${format.toUpperCase()} formatında indiriliyor...`);\r    // Export logic here\r  };\r  const handleSendEmail = () => {\r    message.success('Rapor e-posta ile gönderiliyor...');\r    // Email logic here\r  };\r  const handlePrint = () => {\r    window.print();\r  };\r  // Chart configurations\r  const revenueChartConfig = {\r    data: revenueTrendData,\r    xField: 'month',\r    yField: ['revenue', 'subscriptions'],\r    geometryOptions: [\r      {\r        geometry: 'column',\r        color: '#5B8FF9',\r      },\r      {\r        geometry: 'line',\r        color: '#5AD8A6',\r        lineStyle: {\r          lineWidth: 2,\r        },\r      },\r    ],\r    yAxis: {\r      revenue: {\r        min: 0,\r        label: {\r          formatter: (v: string) => `₺${Number(v).toLocaleString()}`,\r        },\r      },\r      subscriptions: {\r        min: 0,\r      },\r    },\r  };\r  const packagePieConfig = {\r    data: packageDistribution,\r    angleField: 'value',\r    colorField: 'type',\r    radius: 0.8,\r    label: {\r      type: 'spider',\r      content: '{name}: {percentage}',\r    },\r    interactions: [\r      {\r        type: 'element-active',\r      },\r    ],\r  };\r  const userActivityConfig = {\r    data: userActivityData,\r    xField: 'hour',\r    yField: 'active',\r    smooth: true,\r    areaStyle: {\r      fill: 'l(270) 0:#ffffff 1:#5B8FF9',\r    },\r  };\r  // KPI Cards\r  const kpiCards = [\r    {\r      title: 'Toplam Gelir',\r      value: reportData.revenue,\r      prefix: '₺',\r      suffix: '',\r      change: reportData.growth,\r      icon: <DollarOutlined />,\r      color: '#52c41a',\r    },\r    {\r      title: 'Aktif Tenant',\r      value: reportData.tenants,\r      prefix: '',\r      suffix: '',\r      change: 8.2,\r      icon: <ShopOutlined />,\r      color: '#1890ff',\r    },\r    {\r      title: 'Toplam Kullanıcı',\r      value: reportData.users,\r      prefix: '',\r      suffix: '',\r      change: 15.3,\r      icon: <TeamOutlined />,\r      color: '#722ed1',\r    },\r    {\r      title: 'MRR',\r      value: reportData.mrr,\r      prefix: '₺',\r      suffix: '',\r      change: 12.5,\r      icon: <RiseOutlined />,\r      color: '#fa8c16',\r    },\r  ];\r  const tenantColumns = [\r    {\r      title: 'Tenant',\r      dataIndex: 'name',\r      key: 'name',\r      render: (name: string) => (\r        <Space>\r          <Avatar icon={<ShopOutlined />} />\r          <Text strong>{name}</Text>\r        </Space>\r      ),\r    },\r    {\r      title: 'Paket',\r      dataIndex: 'package',\r      key: 'package',\r      render: (pkg: string) => {\r        const colors: Record<string, string> = {\r          Enterprise: 'purple',\r          Professional: 'blue',\r          Basic: 'green',\r          Starter: 'default',\r        };\r        return <Tag color={colors[pkg] || 'default'}>{pkg}</Tag>;\r      },\r    },\r    {\r      title: 'Kullanıcı',\r      dataIndex: 'users',\r      key: 'users',\r      render: (users: number) => (\r        <Space>\r          <TeamOutlined />\r          <Text>{users}</Text>\r        </Space>\r      ),\r    },\r    {\r      title: 'Gelir',\r      dataIndex: 'revenue',\r      key: 'revenue',\r      render: (revenue: number) => (\r        <Text strong>₺{revenue.toLocaleString()}</Text>\r      ),\r      sorter: (a: TenantReport, b: TenantReport) => a.revenue - b.revenue,\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status: string) => (\r        <Badge\r          status={status === 'active' ? 'success' : 'error'}\r          text={status === 'active' ? 'Aktif' : 'Pasif'}\r        />\r      ),\r    },\r    {\r      title: 'Son Aktivite',\r      dataIndex: 'lastActivity',\r      key: 'lastActivity',\r      render: (date: string) => (\r        <Text type=\"secondary\">{dayjs(date).fromNow()}</Text>\r      ),\r    },\r  ];\r  return (\r    <div className=\"master-reports-page\">\r      {/* Header */}\r      <div className=\"page-header glass-morphism\">\r        <motion.div\r          initial={{ opacity: 0, x: -20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-content\"\r        >\r          <Title level={2} className=\"gradient-text\">\r            <BarChartOutlined /> Raporlar ve Analizler\r          </Title>\r          <Text type=\"secondary\">Detaylı sistem raporları ve iş analizleri</Text>\r        </motion.div>\r        <motion.div\r          initial={{ opacity: 0, x: 20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-actions\"\r        >\r          <Space>\r            <Segmented\r              value={reportType}\r              onChange={setReportType}\r              options={[\r                { label: 'Günlük', value: 'daily' },\r                { label: 'Haftalık', value: 'weekly' },\r                { label: 'Aylık', value: 'monthly' },\r                { label: 'Yıllık', value: 'yearly' },\r              ]}\r            />\r            <RangePicker\r              value={dateRange}\r              onChange={(dates) => dates && setDateRange(dates as [dayjs.Dayjs, dayjs.Dayjs])}\r              format=\"DD.MM.YYYY\"\r            />\r            <Button\r              icon={<ReloadOutlined />}\r              onClick={fetchReports}\r              loading={loading}\r             aria-label=\"reload outlined\">\r              Yenile\r            </Button>\r          </Space>\r        </motion.div>\r      </div>\r      {/* KPI Cards */}\r      <Row gutter={[20, 20]} className=\"stats-row\">\r        {kpiCards.map((kpi, index) => (\r          <Col xs={24} sm={12} lg={6} key={index}>\r            <motion.div\r              initial={{ opacity: 0, y: 20 }}\r              animate={{ opacity: 1, y: 0 }}\r              transition={{ delay: index * 0.1 }}\r            >\r              <Card className=\"stat-card glass-morphism\">\r                <Statistic\r                  title={kpi.title}\r                  value={kpi.value}\r                  prefix={\r                    <span style={{ color: kpi.color }}>\r                      {kpi.icon}\r                      {kpi.prefix}\r                    </span>\r                  }\r                  suffix={\r                    <span style={{ fontSize: 14, color: kpi.change > 0 ? '#52c41a' : '#ff4d4f' }}>\r                      {kpi.change > 0 ? <RiseOutlined /> : <FallOutlined />}\r                      {Math.abs(kpi.change)}%\r                    </span>\r                  }\r                  valueStyle={{ color: kpi.color }}\r                />\r              </Card>\r            </motion.div>\r          </Col>\r        ))}\r      </Row>\r      {/* Main Content */}\r      <Card className=\"content-card glass-morphism\">\r        <Tabs \r          activeKey={activeTab} \r          onChange={setActiveTab}\r          tabBarExtraContent={\r            <Space>\r              <Select\r                value={exportFormat}\r                onChange={setExportFormat}\r                style={{ width: 100 }}\r               aria-label=\"select field\">\r                <Option value=\"pdf\">PDF</Option>\r                <Option value=\"excel\">Excel</Option>\r                <Option value=\"csv\">CSV</Option>\r              </Select>\r              <Button\r                icon={<DownloadOutlined />}\r                onClick={() = aria-label=\"download outlined\"> handleExport(exportFormat)}\r              >\r                İndir\r              </Button>\r              <Button icon={<MailOutlined />} onClick={handleSendEmail} aria-label=\"mail outlined\">\r                E-posta\r              </Button>\r              <Button icon={<PrinterOutlined />} onClick={handlePrint} aria-label=\"printer outlined\">\r                Yazdır\r              </Button>\r            </Space>\r          }\r        >\r          <TabPane\r            tab={\r              <span>\r                <AreaChartOutlined />\r                Genel Bakış\r              </span>\r            }\r            key=\"overview\"\r          >\r            <Row gutter={[20, 20]}>\r              <Col xs={24} lg={16}>\r                <Card\r                  title=\"Gelir ve Abonelik Trendi\"\r                  bordered={false}\r                  extra={\r                    <Radio.Group value={selectedMetric} onChange={(e) => setSelectedMetric(e.target.value)}>\r                      <Radio.Button value=\"revenue\">Gelir</Radio.Button>\r                      <Radio.Button value=\"subscriptions\">Abonelik</Radio.Button>\r                      <Radio.Button value=\"both\">Her İkisi</Radio.Button>\r                    </Radio.Group>\r                  }\r                >\r                  <DualAxes {...revenueChartConfig} height={300} />\r                </Card>\r              </Col>\r              <Col xs={24} lg={8}>\r                <Card title=\"Paket Dağılımı\" bordered={false}>\r                  <Pie {...packagePieConfig} height={300} />\r                </Card>\r              </Col>\r            </Row>\r            <Divider />\r            <Row gutter={[20, 20]}>\r              <Col xs={24} lg={12}>\r                <Card\r                  title=\"En Yüksek Gelirli Tenantlar\"\r                  bordered={false}\r                  extra={<Text type=\"secondary\">Top 5</Text>}\r                >\r                  <List\r                    dataSource={topTenants}\r                    renderItem={(item) => (\r                      <List.Item>\r                        <List.Item.Meta\r                          avatar={\r                            item.growth > 0 ? (\r                              <Avatar style={{ backgroundColor: '#52c41a' }} icon={<RiseOutlined />} />\r                            ) : (\r                              <Avatar style={{ backgroundColor: '#ff4d4f' }} icon={<FallOutlined />} />\r                            )\r                          }\r                          title={item.name}\r                          description={\r                            <Space>\r                              <Text strong>₺{item.revenue.toLocaleString()}</Text>\r                              <Tag color={item.growth > 0 ? 'green' : 'red'}>\r                                {item.growth > 0 ? '+' : ''}{item.growth}%\r                              </Tag>\r                            </Space>\r                          }\r                        />\r                        <Progress\r                          percent={(item.revenue / topTenants[0].revenue) * 100}\r                          showInfo={false}\r                          strokeColor=\"#1890ff\"\r                        />\r                      </List.Item>\r                    )}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} lg={12}>\r                <Card\r                  title=\"Kullanıcı Aktivitesi (24 Saat)\"\r                  bordered={false}\r                  extra={\r                    <Badge count={userActivityData.reduce((sum, d) => sum + d.active, 0)} showZero>\r                      <UserOutlined />\r                    </Badge>\r                  }\r                >\r                  <Area {...userActivityConfig} height={320} />\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          <TabPane\r            tab={\r              <span>\r                <ShopOutlined />\r                Tenant Raporları\r              </span>\r            }\r            key=\"tenants\"\r          >\r            <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\r              <Col xs={24} sm={8}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"Toplam Tenant\"\r                    value={reportData.tenants}\r                    prefix={<ShopOutlined />}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} sm={8}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"Ortalama Kullanıcı/Tenant\"\r                    value={Math.round(reportData.users / reportData.tenants)}\r                    prefix={<TeamOutlined />}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} sm={8}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"Churn Rate\"\r                    value={reportData.churnRate}\r                    suffix=\"%\"\r                    valueStyle={{ color: reportData.churnRate < 5 ? '#52c41a' : '#ff4d4f' }}\r                  />\r                </Card>\r              </Col>\r            </Row>\r            <Table\r              columns={tenantColumns}\r              dataSource={tenantReports}\r              rowKey=\"id\"\r              loading={loading}\r              pagination={{\r                pageSize: 10,\r                showSizeChanger: true,\r                showTotal: (total) => `Toplam ${total} tenant`,\r              }}\r            />\r          </TabPane>\r          <TabPane\r            tab={\r              <span>\r                <DollarOutlined />\r                Finansal Raporlar\r              </span>\r            }\r            key=\"financial\"\r          >\r            <Row gutter={[20, 20]}>\r              <Col xs={24} sm={12} lg={6}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"MRR (Aylık Tekrarlayan Gelir)\"\r                    value={reportData.mrr}\r                    prefix=\"₺\"\r                    valueStyle={{ color: '#52c41a' }}\r                  />\r                  <Progress percent={75} showInfo={false} strokeColor=\"#52c41a\" />\r                  <Text type=\"secondary\">Hedef: ₺60,000</Text>\r                </Card>\r              </Col>\r              <Col xs={24} sm={12} lg={6}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"ARR (Yıllık Tekrarlayan Gelir)\"\r                    value={reportData.arr}\r                    prefix=\"₺\"\r                    valueStyle={{ color: '#1890ff' }}\r                  />\r                  <Progress percent={68} showInfo={false} strokeColor=\"#1890ff\" />\r                  <Text type=\"secondary\">Hedef: ₺800,000</Text>\r                </Card>\r              </Col>\r              <Col xs={24} sm={12} lg={6}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"ARPU (Kullanıcı Başı Gelir)\"\r                    value={reportData.arpu}\r                    prefix=\"₺\"\r                    valueStyle={{ color: '#722ed1' }}\r                  />\r                  <Progress percent={85} showInfo={false} strokeColor=\"#722ed1\" />\r                  <Text type=\"secondary\">Hedef: ₺1,000</Text>\r                </Card>\r              </Col>\r              <Col xs={24} sm={12} lg={6}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"Büyüme Oranı\"\r                    value={reportData.growth}\r                    suffix=\"%\"\r                    prefix={reportData.growth > 0 ? <RiseOutlined /> : <FallOutlined />}\r                    valueStyle={{ color: reportData.growth > 0 ? '#52c41a' : '#ff4d4f' }}\r                  />\r                  <Progress\r                    percent={reportData.growth}\r                    showInfo={false}\r                    strokeColor={reportData.growth > 20 ? '#52c41a' : '#faad14'}\r                  />\r                  <Text type=\"secondary\">Hedef: %30</Text>\r                </Card>\r              </Col>\r            </Row>\r            <Divider />\r            <Row gutter={[20, 20]}>\r              <Col xs={24}>\r                <Card title=\"Gelir Tahmin Modeli\" bordered={false}>\r                  <Empty\r                    image={Empty.PRESENTED_IMAGE_SIMPLE}\r                    description=\"Gelir tahmin modeli yakında eklenecek\"\r                  />\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          <TabPane\r            tab={\r              <span>\r                <TeamOutlined />\r                Kullanıcı Raporları\r              </span>\r            }\r            key=\"users\"\r          >\r            <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\r              <Col xs={24} sm={8}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"Toplam Kullanıcı\"\r                    value={reportData.users}\r                    prefix={<UserOutlined />}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} sm={8}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"Aktif Kullanıcı (30 gün)\"\r                    value={Math.round(reportData.users * 0.75)}\r                    prefix={<CheckCircleOutlined />}\r                    valueStyle={{ color: '#52c41a' }}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} sm={8}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"Yeni Kullanıcı (30 gün)\"\r                    value={Math.round(reportData.users * 0.15)}\r                    prefix={<UserOutlined />}\r                    valueStyle={{ color: '#1890ff' }}\r                  />\r                </Card>\r              </Col>\r            </Row>\r            <Card title=\"Kullanıcı Aktivite Haritası\" bordered={false}>\r              <Empty\r                image={Empty.PRESENTED_IMAGE_SIMPLE}\r                description=\"Kullanıcı aktivite haritası yakında eklenecek\"\r              />\r            </Card>\r          </TabPane>\r          <TabPane\r            tab={\r              <span>\r                <RocketOutlined />\r                Performans\r              </span>\r            }\r            key=\"performance\"\r          >\r            <Row gutter={[20, 20]}>\r              <Col xs={24} lg={8}>\r                <Card title=\"Sistem Performansı\" bordered={false}>\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <div>\r                      <Text>API Yanıt Süresi</Text>\r                      <Progress percent={92} status=\"success\" />\r                    </div>\r                    <div>\r                      <Text>Veritabanı Performansı</Text>\r                      <Progress percent={88} status=\"success\" />\r                    </div>\r                    <div>\r                      <Text>Önbellek İsabet Oranı</Text>\r                      <Progress percent={76} status=\"active\" />\r                    </div>\r                    <div>\r                      <Text>Sistem Uptime</Text>\r                      <Progress percent={99.9} status=\"success\" />\r                    </div>\r                  </Space>\r                </Card>\r              </Col>\r              <Col xs={24} lg={8}>\r                <Card title=\"En Çok Kullanılan Özellikler\" bordered={false}>\r                  <List\r                    dataSource={[\r                      { name: 'Stok Yönetimi', usage: 3450 },\r                      { name: 'Fatura Oluşturma', usage: 2890 },\r                      { name: 'Raporlama', usage: 2100 },\r                      { name: 'Müşteri Yönetimi', usage: 1850 },\r                      { name: 'Kullanıcı Yönetimi', usage: 1200 },\r                    ]}\r                    renderItem={(item) => (\r                      <List.Item>\r                        <Space style={{ width: '100%', justifyContent: 'space-between' }}>\r                          <Text>{item.name}</Text>\r                          <Tag color=\"blue\">{item.usage}</Tag>\r                        </Space>\r                      </List.Item>\r                    )}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} lg={8}>\r                <Card title=\"Hata Oranları\" bordered={false}>\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <Alert\r                      message=\"4xx Hatalar\"\r                      description=\"125 (0.2%)\"\r                      type=\"warning\"\r                      showIcon\r                    />\r                    <Alert\r                      message=\"5xx Hatalar\"\r                      description=\"12 (0.02%)\"\r                      type=\"error\"\r                      showIcon\r                    />\r                    <Alert\r                      message=\"Başarılı İstekler\"\r                      description=\"62,863 (99.78%)\"\r                      type=\"success\"\r                      showIcon\r                    />\r                  </Space>\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r        </Tabs>\r      </Card>\r    </div>\r  );\r};\rexport default MasterReportsPage;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Reports/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Row,\r  Col,\r  Card,\r  Tabs,\r  Form,\r  Input,\r  InputNumber,\r  Select,\r  Switch,\r  Button,\r  Space,\r  Typography,\r  Divider,\r  Alert,\r  message,\r  notification,\r  Upload,\r  ColorPicker,\r  Slider,\r  Radio,\r  Checkbox,\r  TimePicker,\r  DatePicker,\r  Tag,\r  Tooltip,\r  Progress,\r  List,\r  Avatar,\r  Badge,\r  Descriptions,\r  Table,\r  Modal,\r  Drawer,\r  Spin,\r  Result,\r  Skeleton,\r  Tree,\r  TreeSelect,\r  Cascader,\r  AutoComplete,\r  Mentions,\r  Rate,\r  Transfer,\r} from 'antd';\rimport type { UploadProps, TabsProps } from 'antd';\rimport {\r  SettingOutlined,\r  GlobalOutlined,\r  SecurityScanOutlined,\r  MailOutlined,\r  DatabaseOutlined,\r  CloudServerOutlined,\r  ApiOutlined,\r  BellOutlined,\r  UserOutlined,\r  KeyOutlined,\r  LockOutlined,\r  SafetyOutlined,\r  ThunderboltOutlined,\r  RocketOutlined,\r  DollarOutlined,\r  FileTextOutlined,\r  CodeOutlined,\r  BugOutlined,\r  ExperimentOutlined,\r  ToolOutlined,\r  ControlOutlined,\r  ApartmentOutlined,\r  BlockOutlined,\r  ClusterOutlined,\r  CloudUploadOutlined,\r  CloudDownloadOutlined,\r  SyncOutlined,\r  ReloadOutlined,\r  SaveOutlined,\r  ExportOutlined,\r  ImportOutlined,\r  InfoCircleOutlined,\r  CheckCircleOutlined,\r  WarningOutlined,\r  CloseCircleOutlined,\r  QuestionCircleOutlined,\r  PlusOutlined,\r  MinusOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  CopyOutlined,\r  ScissorOutlined,\r  FolderOutlined,\r  FolderOpenOutlined,\r  FileAddOutlined,\r  FileDoneOutlined,\r  FileExcelOutlined,\r  FilePdfOutlined,\r  FileImageOutlined,\r  FileMarkdownOutlined,\r  FileZipOutlined,\r  DesktopOutlined,\r  MobileOutlined,\r  TabletOutlined,\r  LaptopOutlined,\r  ChromeOutlined,\r  GithubOutlined,\r  SlackOutlined,\r  GoogleOutlined,\r  FacebookOutlined,\r  TwitterOutlined,\r  LinkedinOutlined,\r  InstagramOutlined,\r  WhatsAppOutlined,\r} from '@ant-design/icons';\rimport { ProForm, ProFormText, ProFormSelect, ProFormSwitch, ProFormDigit, ProFormTextArea } from '@ant-design/pro-components';\rimport dayjs from 'dayjs';\rimport './system-settings-enhanced.css';\rconst { Title, Text, Paragraph, Link } = Typography;\rconst { TabPane } = Tabs;\rconst { Option } = Select;\rconst { TextArea } = Input;\rconst { Dragger } = Upload;\rconst { confirm } = Modal;\rinterface SystemConfig {\r  general: {\r    siteName: string;\r    siteUrl: string;\r    adminEmail: string;\r    supportEmail: string;\r    timezone: string;\r    dateFormat: string;\r    language: string;\r    currency: string;\r    maintenanceMode: boolean;\r    maintenanceMessage: string;\r  };\r  security: {\r    passwordMinLength: number;\r    passwordRequireUppercase: boolean;\r    passwordRequireLowercase: boolean;\r    passwordRequireNumbers: boolean;\r    passwordRequireSpecialChars: boolean;\r    passwordExpiryDays: number;\r    maxLoginAttempts: number;\r    lockoutDuration: number;\r    twoFactorAuth: boolean;\r    sessionTimeout: number;\r    ipWhitelist: string[];\r    ipBlacklist: string[];\r    enableCaptcha: boolean;\r    enableSSL: boolean;\r    enableCSRF: boolean;\r  };\r  email: {\r    smtpHost: string;\r    smtpPort: number;\r    smtpUsername: string;\r    smtpPassword: string;\r    smtpEncryption: 'none' | 'tls' | 'ssl';\r    fromName: string;\r    fromEmail: string;\r    replyToEmail: string;\r    emailSignature: string;\r    enableEmailQueue: boolean;\r    maxEmailsPerHour: number;\r  };\r  database: {\r    connectionString: string;\r    maxConnections: number;\r    connectionTimeout: number;\r    commandTimeout: number;\r    enableConnectionPooling: boolean;\r    minPoolSize: number;\r    maxPoolSize: number;\r    enableAutoMigration: boolean;\r    backupSchedule: string;\r    retentionDays: number;\r  };\r  storage: {\r    provider: 'local' | 'aws' | 'azure' | 'gcp';\r    localPath: string;\r    awsBucket: string;\r    awsRegion: string;\r    awsAccessKey: string;\r    awsSecretKey: string;\r    azureContainer: string;\r    azureConnectionString: string;\r    gcpBucket: string;\r    gcpProjectId: string;\r    maxFileSize: number;\r    allowedFileTypes: string[];\r  };\r  api: {\r    enableApi: boolean;\r    apiVersion: string;\r    rateLimit: number;\r    rateLimitWindow: number;\r    enableApiKey: boolean;\r    enableOAuth: boolean;\r    corsOrigins: string[];\r    enableSwagger: boolean;\r    enableGraphQL: boolean;\r    maxRequestSize: number;\r    timeout: number;\r  };\r  notifications: {\r    enableEmailNotifications: boolean;\r    enablePushNotifications: boolean;\r    enableSmsNotifications: boolean;\r    enableInAppNotifications: boolean;\r    enableSlackIntegration: boolean;\r    slackWebhookUrl: string;\r    enableWebhooks: boolean;\r    webhookEndpoints: string[];\r    notificationRetention: number;\r  };\r  performance: {\r    enableCaching: boolean;\r    cacheProvider: 'memory' | 'redis' | 'memcached';\r    cacheDuration: number;\r    redisConnectionString: string;\r    enableCompression: boolean;\r    compressionLevel: number;\r    enableMinification: boolean;\r    enableCDN: boolean;\r    cdnUrl: string;\r    enableLazyLoading: boolean;\r    maxConcurrentRequests: number;\r  };\r  logging: {\r    logLevel: 'debug' | 'info' | 'warning' | 'error' | 'critical';\r    enableFileLogging: boolean;\r    logFilePath: string;\r    maxLogFileSize: number;\r    logRetentionDays: number;\r    enableDatabaseLogging: boolean;\r    enableConsoleLogging: boolean;\r    enableSentryLogging: boolean;\r    sentryDsn: string;\r    enableElasticLogging: boolean;\r    elasticUrl: string;\r  };\r  billing: {\r    enableBilling: boolean;\r    currency: string;\r    taxRate: number;\r    paymentGateway: 'stripe' | 'paypal' | 'square' | 'custom';\r    stripePublicKey: string;\r    stripeSecretKey: string;\r    paypalClientId: string;\r    paypalClientSecret: string;\r    enableRecurringBilling: boolean;\r    trialPeriodDays: number;\r    enableProration: boolean;\r  };\r}\rconst EnhancedSystemSettings: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [saving, setSaving] = useState(false);\r  const [config, setConfig] = useState<SystemConfig | null>(null);\r  const [activeTab, setActiveTab] = useState('general');\r  const [testingConnection, setTestingConnection] = useState(false);\r  const [form] = Form.useForm();\r  // Mock configuration data\r  const mockConfig: SystemConfig = {\r    general: {\r      siteName: 'Stocker Platform',\r      siteUrl: 'https://stocker.com',\r      adminEmail: 'admin@stocker.com',\r      supportEmail: 'support@stocker.com',\r      timezone: 'Europe/Istanbul',\r      dateFormat: 'DD/MM/YYYY',\r      language: 'tr',\r      currency: 'TRY',\r      maintenanceMode: false,\r      maintenanceMessage: 'Sistem bakımda, lütfen daha sonra tekrar deneyin.',\r    },\r    security: {\r      passwordMinLength: 8,\r      passwordRequireUppercase: true,\r      passwordRequireLowercase: true,\r      passwordRequireNumbers: true,\r      passwordRequireSpecialChars: true,\r      passwordExpiryDays: 90,\r      maxLoginAttempts: 5,\r      lockoutDuration: 30,\r      twoFactorAuth: true,\r      sessionTimeout: 30,\r      ipWhitelist: [],\r      ipBlacklist: [],\r      enableCaptcha: true,\r      enableSSL: true,\r      enableCSRF: true,\r    },\r    email: {\r      smtpHost: 'smtp.gmail.com',\r      smtpPort: 587,\r      smtpUsername: 'noreply@stocker.com',\r      smtpPassword: '********',\r      smtpEncryption: 'tls',\r      fromName: 'Stocker Platform',\r      fromEmail: 'noreply@stocker.com',\r      replyToEmail: 'support@stocker.com',\r      emailSignature: 'Stocker Platform Team',\r      enableEmailQueue: true,\r      maxEmailsPerHour: 100,\r    },\r    database: {\r      connectionString: 'Server=localhost;Database=stocker;User Id=sa;Password=******',\r      maxConnections: 100,\r      connectionTimeout: 30,\r      commandTimeout: 30,\r      enableConnectionPooling: true,\r      minPoolSize: 10,\r      maxPoolSize: 100,\r      enableAutoMigration: true,\r      backupSchedule: '0 2 * * *',\r      retentionDays: 30,\r    },\r    storage: {\r      provider: 'aws',\r      localPath: '/var/storage',\r      awsBucket: 'stocker-uploads',\r      awsRegion: 'eu-west-1',\r      awsAccessKey: 'AKIA**********',\r      awsSecretKey: '********',\r      azureContainer: '',\r      azureConnectionString: '',\r      gcpBucket: '',\r      gcpProjectId: '',\r      maxFileSize: 10485760,\r      allowedFileTypes: ['jpg', 'jpeg', 'png', 'pdf', 'doc', 'docx', 'xls', 'xlsx'],\r    },\r    api: {\r      enableApi: true,\r      apiVersion: 'v1',\r      rateLimit: 1000,\r      rateLimitWindow: 3600,\r      enableApiKey: true,\r      enableOAuth: true,\r      corsOrigins: ['http://localhost:3000', 'https://stocker.com'],\r      enableSwagger: true,\r      enableGraphQL: false,\r      maxRequestSize: 5242880,\r      timeout: 30000,\r    },\r    notifications: {\r      enableEmailNotifications: true,\r      enablePushNotifications: true,\r      enableSmsNotifications: false,\r      enableInAppNotifications: true,\r      enableSlackIntegration: true,\r      slackWebhookUrl: 'https://hooks.slack.com/services/******',\r      enableWebhooks: true,\r      webhookEndpoints: ['https://api.example.com/webhook'],\r      notificationRetention: 30,\r    },\r    performance: {\r      enableCaching: true,\r      cacheProvider: 'redis',\r      cacheDuration: 3600,\r      redisConnectionString: 'redis://localhost:6379',\r      enableCompression: true,\r      compressionLevel: 6,\r      enableMinification: true,\r      enableCDN: true,\r      cdnUrl: 'https://cdn.stocker.com',\r      enableLazyLoading: true,\r      maxConcurrentRequests: 10,\r    },\r    logging: {\r      logLevel: 'info',\r      enableFileLogging: true,\r      logFilePath: '/var/log/stocker',\r      maxLogFileSize: 10485760,\r      logRetentionDays: 30,\r      enableDatabaseLogging: true,\r      enableConsoleLogging: true,\r      enableSentryLogging: true,\r      sentryDsn: 'https://******@sentry.io/******',\r      enableElasticLogging: false,\r      elasticUrl: '',\r    },\r    billing: {\r      enableBilling: true,\r      currency: 'TRY',\r      taxRate: 18,\r      paymentGateway: 'stripe',\r      stripePublicKey: 'pk_live_******',\r      stripeSecretKey: 'sk_live_******',\r      paypalClientId: '',\r      paypalClientSecret: '',\r      enableRecurringBilling: true,\r      trialPeriodDays: 14,\r      enableProration: true,\r    },\r  };\r  useEffect(() => {\r    loadConfiguration();\r  }, []);\r  const loadConfiguration = async () => {\r    setLoading(true);\r    try {\r      // Simulated API call\r      setTimeout(() => {\r        setConfig(mockConfig);\r        form.setFieldsValue(mockConfig);\r        setLoading(false);\r      }, 1000);\r    } catch (error) {\r      message.error('Ayarlar yüklenemedi');\r      setLoading(false);\r    }\r  };\r  const handleSave = async (values: any) => {\r    setSaving(true);\r    try {\r      // Simulated API call\r      setTimeout(() => {\r        message.success('Ayarlar başarıyla kaydedildi');\r        setSaving(false);\r      }, 1500);\r    } catch (error) {\r      message.error('Ayarlar kaydedilemedi');\r      setSaving(false);\r    }\r  };\r  const handleTestConnection = (type: string) => {\r    setTestingConnection(true);\r    setTimeout(() => {\r      notification.success({\r        message: 'Bağlantı Başarılı',\r        description: `${type} bağlantısı başarıyla test edildi.`,\r      });\r      setTestingConnection(false);\r    }, 2000);\r  };\r  const handleExportSettings = () => {\r    const dataStr = JSON.stringify(config, null, 2);\r    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\r    const exportFileDefaultName = `system-settings-${dayjs().format('YYYY-MM-DD')}.json`;\r    const linkElement = document.createElement('a');\r    linkElement.setAttribute('href', dataUri);\r    linkElement.setAttribute('download', exportFileDefaultName);\r    linkElement.click();\r    message.success('Ayarlar dışa aktarıldı');\r  };\r  const handleImportSettings = (file: any) => {\r    const reader = new FileReader();\r    reader.onload = (e) => {\r      try {\r        const importedConfig = JSON.parse(e.target?.result as string);\r        setConfig(importedConfig);\r        form.setFieldsValue(importedConfig);\r        message.success('Ayarlar başarıyla içe aktarıldı');\r      } catch (error) {\r        message.error('Geçersiz ayar dosyası');\r      }\r    };\r    reader.readAsText(file);\r    return false;\r  };\r  const handleResetSettings = () => {\r    confirm({\r      title: 'Ayarları Sıfırla',\r      icon: <WarningOutlined />,\r      content: 'Tüm ayarlar varsayılan değerlere döndürülecek. Bu işlem geri alınamaz.',\r      okText: 'Sıfırla',\r      okType: 'danger',\r      cancelText: 'İptal',\r      onOk() {\r        loadConfiguration();\r        message.success('Ayarlar sıfırlandı');\r      },\r    });\r  };\r  if (loading) {\r    return (\r      <div className=\"system-settings-loading\">\r        <Card>\r          <Skeleton active paragraph={{ rows: 8 }} />\r        </Card>\r      </div>\r    );\r  }\r  const tabItems: TabsProps['items'] = [\r    {\r      key: 'general',\r      label: (\r        <span>\r          <GlobalOutlined />\r          Genel Ayarlar\r        </span>\r      ),\r      children: (\r        <Card title=\"Genel Sistem Ayarları\" className=\"settings-card\">\r          <Form.Item label=\"Site Adı\" name={['general', 'siteName']} rules={[{ required: true }]}>\r            <Input prefix={<GlobalOutlined / aria-label=\"input field\">} />\r          </Form.Item>\r          <Form.Item label=\"Site URL\" name={['general', 'siteUrl']} rules={[{ required: true, type: 'url' }]}>\r            <Input prefix={<GlobalOutlined / aria-label=\"input field\">} />\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Admin Email\" name={['general', 'adminEmail']} rules={[{ required: true, type: 'email' }]}>\r                <Input prefix={<MailOutlined / aria-label=\"input field\">} />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Destek Email\" name={['general', 'supportEmail']} rules={[{ required: true, type: 'email' }]}>\r                <Input prefix={<MailOutlined / aria-label=\"input field\">} />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item label=\"Zaman Dilimi\" name={['general', 'timezone']}>\r                <Select aria-label=\"select field\">\r                  <Option value=\"Europe/Istanbul\">Europe/Istanbul</Option>\r                  <Option value=\"UTC\">UTC</Option>\r                  <Option value=\"America/New_York\">America/New_York</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Tarih Formatı\" name={['general', 'dateFormat']}>\r                <Select aria-label=\"select field\">\r                  <Option value=\"DD/MM/YYYY\">DD/MM/YYYY</Option>\r                  <Option value=\"MM/DD/YYYY\">MM/DD/YYYY</Option>\r                  <Option value=\"YYYY-MM-DD\">YYYY-MM-DD</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Para Birimi\" name={['general', 'currency']}>\r                <Select aria-label=\"select field\">\r                  <Option value=\"TRY\">TRY (₺)</Option>\r                  <Option value=\"USD\">USD ($)</Option>\r                  <Option value=\"EUR\">EUR (€)</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r          </Row>\r          <Divider />\r          <Form.Item label=\"Bakım Modu\" name={['general', 'maintenanceMode']} valuePropName=\"checked\">\r            <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r          </Form.Item>\r          <Form.Item label=\"Bakım Mesajı\" name={['general', 'maintenanceMessage']}>\r            <TextArea rows={4} />\r          </Form.Item>\r        </Card>\r      ),\r    },\r    {\r      key: 'security',\r      label: (\r        <span>\r          <SecurityScanOutlined />\r          Güvenlik\r        </span>\r      ),\r      children: (\r        <Card title=\"Güvenlik Ayarları\" className=\"settings-card\">\r          <Title level={5}>Şifre Politikaları</Title>\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item label=\"Minimum Şifre Uzunluğu\" name={['security', 'passwordMinLength']}>\r                <InputNumber min={6} max={32} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Şifre Geçerlilik Süresi (Gün)\" name={['security', 'passwordExpiryDays']}>\r                <InputNumber min={0} max={365} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Maksimum Giriş Denemesi\" name={['security', 'maxLoginAttempts']}>\r                <InputNumber min={3} max={10} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Space direction=\"vertical\" style={{ width: '100%' }}>\r            <Form.Item name={['security', 'passwordRequireUppercase']} valuePropName=\"checked\">\r              <Checkbox>Büyük harf zorunlu</Checkbox>\r            </Form.Item>\r            <Form.Item name={['security', 'passwordRequireLowercase']} valuePropName=\"checked\">\r              <Checkbox>Küçük harf zorunlu</Checkbox>\r            </Form.Item>\r            <Form.Item name={['security', 'passwordRequireNumbers']} valuePropName=\"checked\">\r              <Checkbox>Rakam zorunlu</Checkbox>\r            </Form.Item>\r            <Form.Item name={['security', 'passwordRequireSpecialChars']} valuePropName=\"checked\">\r              <Checkbox>Özel karakter zorunlu</Checkbox>\r            </Form.Item>\r          </Space>\r          <Divider />\r          <Title level={5}>Güvenlik Özellikleri</Title>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"İki Faktörlü Doğrulama\" name={['security', 'twoFactorAuth']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Oturum Zaman Aşımı (Dakika)\" name={['security', 'sessionTimeout']}>\r                <InputNumber min={5} max={1440} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item label=\"CAPTCHA\" name={['security', 'enableCaptcha']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"SSL\" name={['security', 'enableSSL']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"CSRF Koruması\" name={['security', 'enableCSRF']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r          </Row>\r        </Card>\r      ),\r    },\r    {\r      key: 'email',\r      label: (\r        <span>\r          <MailOutlined />\r          Email\r        </span>\r      ),\r      children: (\r        <Card title=\"Email Ayarları\" className=\"settings-card\">\r          <Row gutter={16}>\r            <Col span={16}>\r              <Form.Item label=\"SMTP Sunucu\" name={['email', 'smtpHost']} rules={[{ required: true }]}>\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Port\" name={['email', 'smtpPort']} rules={[{ required: true }]}>\r                <InputNumber min={1} max={65535} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Kullanıcı Adı\" name={['email', 'smtpUsername']}>\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Şifre\" name={['email', 'smtpPassword']}>\r                <Input.Password / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item label=\"Şifreleme\" name={['email', 'smtpEncryption']}>\r            <Radio.Group>\r              <Radio value=\"none\">Yok</Radio>\r              <Radio value=\"tls\">TLS</Radio>\r              <Radio value=\"ssl\">SSL</Radio>\r            </Radio.Group>\r          </Form.Item>\r          <Divider />\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Gönderen Adı\" name={['email', 'fromName']}>\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Gönderen Email\" name={['email', 'fromEmail']} rules={[{ type: 'email' }]}>\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item label=\"Email İmzası\" name={['email', 'emailSignature']}>\r            <TextArea rows={4} />\r          </Form.Item>\r          <Space>\r            <Button \r              icon={<ThunderboltOutlined />}\r              onClick={() = aria-label=\"thunderbolt outlined\"> handleTestConnection('Email')}\r              loading={testingConnection}\r            >\r              Bağlantıyı Test Et\r            </Button>\r          </Space>\r        </Card>\r      ),\r    },\r    {\r      key: 'database',\r      label: (\r        <span>\r          <DatabaseOutlined />\r          Veritabanı\r        </span>\r      ),\r      children: (\r        <Card title=\"Veritabanı Ayarları\" className=\"settings-card\">\r          <Form.Item \r            label=\"Bağlantı Dizesi\" \r            name={['database', 'connectionString']}\r            rules={[{ required: true }]}\r          >\r            <Input.Password placeholder=\"Server=localhost;Database=stocker;...\" / aria-label=\"input field\">\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item label=\"Maksimum Bağlantı\" name={['database', 'maxConnections']}>\r                <InputNumber min={1} max={1000} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Bağlantı Timeout (sn)\" name={['database', 'connectionTimeout']}>\r                <InputNumber min={5} max={300} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Komut Timeout (sn)\" name={['database', 'commandTimeout']}>\r                <InputNumber min={5} max={300} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item label=\"Connection Pooling\" name={['database', 'enableConnectionPooling']} valuePropName=\"checked\">\r            <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Minimum Pool Size\" name={['database', 'minPoolSize']}>\r                <InputNumber min={1} max={100} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Maximum Pool Size\" name={['database', 'maxPoolSize']}>\r                <InputNumber min={1} max={500} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Divider />\r          <Title level={5}>Yedekleme</Title>\r          <Form.Item label=\"Yedekleme Zamanlaması (Cron)\" name={['database', 'backupSchedule']}>\r            <Input placeholder=\"0 2 * * * (Her gün saat 02:00)\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item label=\"Yedek Saklama Süresi (Gün)\" name={['database', 'retentionDays']}>\r            <InputNumber min={1} max={365} style={{ width: '100%' }} / aria-label=\"input field\">\r          </Form.Item>\r          <Space>\r            <Button \r              icon={<ThunderboltOutlined />}\r              onClick={() = aria-label=\"thunderbolt outlined\"> handleTestConnection('Database')}\r              loading={testingConnection}\r            >\r              Bağlantıyı Test Et\r            </Button>\r            <Button icon={<CloudDownloadOutlined />} aria-label=\"cloud download outlined\">\r              Manuel Yedek Al\r            </Button>\r          </Space>\r        </Card>\r      ),\r    },\r    {\r      key: 'storage',\r      label: (\r        <span>\r          <CloudServerOutlined />\r          Depolama\r        </span>\r      ),\r      children: (\r        <Card title=\"Depolama Ayarları\" className=\"settings-card\">\r          <Form.Item label=\"Depolama Sağlayıcı\" name={['storage', 'provider']}>\r            <Select aria-label=\"select field\">\r              <Option value=\"local\">Yerel Depolama</Option>\r              <Option value=\"aws\">Amazon S3</Option>\r              <Option value=\"azure\">Azure Blob Storage</Option>\r              <Option value=\"gcp\">Google Cloud Storage</Option>\r            </Select>\r          </Form.Item>\r          <Form.Item \r            noStyle\r            shouldUpdate={(prevValues, currentValues) => \r              prevValues?.storage?.provider !== currentValues?.storage?.provider\r            }\r          >\r            {({ getFieldValue }) => {\r              const provider = getFieldValue(['storage', 'provider']);\r              if (provider === 'local') {\r                return (\r                  <Form.Item label=\"Yerel Yol\" name={['storage', 'localPath']}>\r                    <Input / aria-label=\"input field\">\r                  </Form.Item>\r                );\r              }\r              if (provider === 'aws') {\r                return (\r                  <>\r                    <Row gutter={16}>\r                      <Col span={12}>\r                        <Form.Item label=\"S3 Bucket\" name={['storage', 'awsBucket']}>\r                          <Input / aria-label=\"input field\">\r                        </Form.Item>\r                      </Col>\r                      <Col span={12}>\r                        <Form.Item label=\"AWS Region\" name={['storage', 'awsRegion']}>\r                          <Input / aria-label=\"input field\">\r                        </Form.Item>\r                      </Col>\r                    </Row>\r                    <Row gutter={16}>\r                      <Col span={12}>\r                        <Form.Item label=\"Access Key\" name={['storage', 'awsAccessKey']}>\r                          <Input / aria-label=\"input field\">\r                        </Form.Item>\r                      </Col>\r                      <Col span={12}>\r                        <Form.Item label=\"Secret Key\" name={['storage', 'awsSecretKey']}>\r                          <Input.Password / aria-label=\"input field\">\r                        </Form.Item>\r                      </Col>\r                    </Row>\r                  </>\r                );\r              }\r              return null;\r            }}\r          </Form.Item>\r          <Divider />\r          <Form.Item label=\"Maksimum Dosya Boyutu (MB)\" name={['storage', 'maxFileSize']}>\r            <InputNumber \r              min={1} \r              max={100} \r              formatter={value = aria-label=\"input field\"> `${value} MB`}\r              parser={value => value?.replace(' MB', '') as any}\r              style={{ width: '100%' }} \r            />\r          </Form.Item>\r          <Form.Item label=\"İzin Verilen Dosya Türleri\" name={['storage', 'allowedFileTypes']}>\r            <Select mode=\"tags\" placeholder=\"jpg, png, pdf...\" aria-label=\"select field\">\r              <Option value=\"jpg\">jpg</Option>\r              <Option value=\"png\">png</Option>\r              <Option value=\"pdf\">pdf</Option>\r              <Option value=\"doc\">doc</Option>\r              <Option value=\"docx\">docx</Option>\r            </Select>\r          </Form.Item>\r        </Card>\r      ),\r    },\r    {\r      key: 'api',\r      label: (\r        <span>\r          <ApiOutlined />\r          API\r        </span>\r      ),\r      children: (\r        <Card title=\"API Ayarları\" className=\"settings-card\">\r          <Form.Item label=\"API Durumu\" name={['api', 'enableApi']} valuePropName=\"checked\">\r            <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r          </Form.Item>\r          <Form.Item label=\"API Versiyonu\" name={['api', 'apiVersion']}>\r            <Input / aria-label=\"input field\">\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Rate Limit (İstek/Saat)\" name={['api', 'rateLimit']}>\r                <InputNumber min={10} max={10000} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Maksimum İstek Boyutu (MB)\" name={['api', 'maxRequestSize']}>\r                <InputNumber \r                  min={1} \r                  max={100}\r                  formatter={value = aria-label=\"input field\"> `${value} MB`}\r                  parser={value => value?.replace(' MB', '') as any}\r                  style={{ width: '100%' }} \r                />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item label=\"API Key\" name={['api', 'enableApiKey']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"OAuth\" name={['api', 'enableOAuth']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Swagger\" name={['api', 'enableSwagger']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item label=\"CORS Origins\" name={['api', 'corsOrigins']}>\r            <Select mode=\"tags\" placeholder=\"http://localhost:3000\" aria-label=\"select field\">\r              <Option value=\"http://localhost:3000\">http://localhost:3000</Option>\r              <Option value=\"https://stocker.com\">https://stocker.com</Option>\r            </Select>\r          </Form.Item>\r        </Card>\r      ),\r    },\r    {\r      key: 'notifications',\r      label: (\r        <span>\r          <BellOutlined />\r          Bildirimler\r        </span>\r      ),\r      children: (\r        <Card title=\"Bildirim Ayarları\" className=\"settings-card\">\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Email Bildirimleri\" name={['notifications', 'enableEmailNotifications']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Push Bildirimleri\" name={['notifications', 'enablePushNotifications']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"SMS Bildirimleri\" name={['notifications', 'enableSmsNotifications']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Uygulama İçi Bildirimler\" name={['notifications', 'enableInAppNotifications']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Divider />\r          <Title level={5}>Entegrasyonlar</Title>\r          <Form.Item label=\"Slack Entegrasyonu\" name={['notifications', 'enableSlackIntegration']} valuePropName=\"checked\">\r            <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r          </Form.Item>\r          <Form.Item label=\"Slack Webhook URL\" name={['notifications', 'slackWebhookUrl']}>\r            <Input placeholder=\"https://hooks.slack.com/services/...\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item label=\"Webhook Endpoints\" name={['notifications', 'webhookEndpoints']}>\r            <Select mode=\"tags\" placeholder=\"Webhook URL ekle\" aria-label=\"select field\">\r              <Option value=\"https://api.example.com/webhook\">https://api.example.com/webhook</Option>\r            </Select>\r          </Form.Item>\r          <Form.Item label=\"Bildirim Saklama Süresi (Gün)\" name={['notifications', 'notificationRetention']}>\r            <InputNumber min={1} max={365} style={{ width: '100%' }} / aria-label=\"input field\">\r          </Form.Item>\r        </Card>\r      ),\r    },\r    {\r      key: 'performance',\r      label: (\r        <span>\r          <RocketOutlined />\r          Performans\r        </span>\r      ),\r      children: (\r        <Card title=\"Performans Ayarları\" className=\"settings-card\">\r          <Form.Item label=\"Önbellekleme\" name={['performance', 'enableCaching']} valuePropName=\"checked\">\r            <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Cache Sağlayıcı\" name={['performance', 'cacheProvider']}>\r                <Select aria-label=\"select field\">\r                  <Option value=\"memory\">Memory</Option>\r                  <Option value=\"redis\">Redis</Option>\r                  <Option value=\"memcached\">Memcached</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Cache Süresi (Saniye)\" name={['performance', 'cacheDuration']}>\r                <InputNumber min={60} max={86400} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item label=\"Redis Bağlantı\" name={['performance', 'redisConnectionString']}>\r            <Input placeholder=\"redis://localhost:6379\" / aria-label=\"input field\">\r          </Form.Item>\r          <Divider />\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item label=\"Sıkıştırma\" name={['performance', 'enableCompression']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Minification\" name={['performance', 'enableMinification']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Lazy Loading\" name={['performance', 'enableLazyLoading']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item label=\"CDN\" name={['performance', 'enableCDN']} valuePropName=\"checked\">\r            <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r          </Form.Item>\r          <Form.Item label=\"CDN URL\" name={['performance', 'cdnUrl']}>\r            <Input placeholder=\"https://cdn.stocker.com\" / aria-label=\"input field\">\r          </Form.Item>\r        </Card>\r      ),\r    },\r    {\r      key: 'logging',\r      label: (\r        <span>\r          <FileTextOutlined />\r          Loglama\r        </span>\r      ),\r      children: (\r        <Card title=\"Loglama Ayarları\" className=\"settings-card\">\r          <Form.Item label=\"Log Seviyesi\" name={['logging', 'logLevel']}>\r            <Select aria-label=\"select field\">\r              <Option value=\"debug\">Debug</Option>\r              <Option value=\"info\">Info</Option>\r              <Option value=\"warning\">Warning</Option>\r              <Option value=\"error\">Error</Option>\r              <Option value=\"critical\">Critical</Option>\r            </Select>\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item label=\"Dosya Loglama\" name={['logging', 'enableFileLogging']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Veritabanı Loglama\" name={['logging', 'enableDatabaseLogging']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Konsol Loglama\" name={['logging', 'enableConsoleLogging']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item label=\"Log Dosya Yolu\" name={['logging', 'logFilePath']}>\r            <Input placeholder=\"/var/log/stocker\" / aria-label=\"input field\">\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Max Log Dosya Boyutu (MB)\" name={['logging', 'maxLogFileSize']}>\r                <InputNumber \r                  min={1} \r                  max={1000}\r                  formatter={value = aria-label=\"input field\"> `${value} MB`}\r                  parser={value => value?.replace(' MB', '') as any}\r                  style={{ width: '100%' }} \r                />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Log Saklama Süresi (Gün)\" name={['logging', 'logRetentionDays']}>\r                <InputNumber min={1} max={365} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Divider />\r          <Title level={5}>External Logging</Title>\r          <Form.Item label=\"Sentry\" name={['logging', 'enableSentryLogging']} valuePropName=\"checked\">\r            <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r          </Form.Item>\r          <Form.Item label=\"Sentry DSN\" name={['logging', 'sentryDsn']}>\r            <Input placeholder=\"https://xxxx@sentry.io/xxxx\" / aria-label=\"input field\">\r          </Form.Item>\r        </Card>\r      ),\r    },\r    {\r      key: 'billing',\r      label: (\r        <span>\r          <DollarOutlined />\r          Faturalama\r        </span>\r      ),\r      children: (\r        <Card title=\"Faturalama Ayarları\" className=\"settings-card\">\r          <Form.Item label=\"Faturalama Sistemi\" name={['billing', 'enableBilling']} valuePropName=\"checked\">\r            <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Para Birimi\" name={['billing', 'currency']}>\r                <Select aria-label=\"select field\">\r                  <Option value=\"TRY\">TRY (₺)</Option>\r                  <Option value=\"USD\">USD ($)</Option>\r                  <Option value=\"EUR\">EUR (€)</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"KDV Oranı (%)\" name={['billing', 'taxRate']}>\r                <InputNumber min={0} max={100} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item label=\"Ödeme Yöntemi\" name={['billing', 'paymentGateway']}>\r            <Select aria-label=\"select field\">\r              <Option value=\"stripe\">Stripe</Option>\r              <Option value=\"paypal\">PayPal</Option>\r              <Option value=\"square\">Square</Option>\r              <Option value=\"custom\">Özel</Option>\r            </Select>\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Stripe Public Key\" name={['billing', 'stripePublicKey']}>\r                <Input placeholder=\"pk_live_...\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Stripe Secret Key\" name={['billing', 'stripeSecretKey']}>\r                <Input.Password placeholder=\"sk_live_...\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Divider />\r          <Form.Item label=\"Tekrarlanan Ödemeler\" name={['billing', 'enableRecurringBilling']} valuePropName=\"checked\">\r            <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r          </Form.Item>\r          <Form.Item label=\"Deneme Süresi (Gün)\" name={['billing', 'trialPeriodDays']}>\r            <InputNumber min={0} max={90} style={{ width: '100%' }} / aria-label=\"input field\">\r          </Form.Item>\r        </Card>\r      ),\r    },\r  ];\r  return (\r    <div className=\"enhanced-system-settings\">\r      <div className=\"settings-header\">\r        <div className=\"header-content\">\r          <Title level={2}>\r            <SettingOutlined /> Sistem Ayarları\r          </Title>\r          <Text type=\"secondary\">\r            Sistem genelinde geçerli olan tüm ayarları buradan yapılandırabilirsiniz\r          </Text>\r        </div>\r        <Space>\r          <Button icon={<ImportOutlined />} onClick={() = aria-label=\"import outlined\"> document.getElementById('import-settings')?.click()}>\r            İçe Aktar\r          </Button>\r          <input\r            id=\"import-settings\"\r            type=\"file\"\r            accept=\".json\"\r            style={{ display: 'none' }}\r            onChange={(e) = aria-label=\"input field\"> e.target.files?.[0] && handleImportSettings(e.target.files[0])}\r          />\r          <Button icon={<ExportOutlined />} onClick={handleExportSettings} aria-label=\"export outlined\">\r            Dışa Aktar\r          </Button>\r          <Button icon={<ReloadOutlined />} onClick={handleResetSettings} aria-label=\"reload outlined\">\r            Sıfırla\r          </Button>\r          <Button \r            type=\"primary\" \r            icon={<SaveOutlined />}\r            onClick={() = aria-label=\"save outlined\"> form.validateFields().then(handleSave)}\r            loading={saving}\r          >\r            Kaydet\r          </Button>\r        </Space>\r      </div>\r      <Form\r        form={form}\r        layout=\"vertical\"\r        initialValues={config || undefined}\r        onFinish={handleSave}\r      >\r        <Tabs \r          activeKey={activeTab} \r          onChange={setActiveTab}\r          items={tabItems}\r        />\r      </Form>\r      <Card className=\"settings-footer\">\r        <Alert\r          message=\"Önemli Bilgi\"\r          description=\"Yapılan değişiklikler kaydedildikten sonra sistem genelinde geçerli olacaktır. Bazı ayarlar için sistemin yeniden başlatılması gerekebilir.\"\r          type=\"info\"\r          showIcon\r        />\r      </Card>\r    </div>\r  );\r};\rexport default EnhancedSystemSettings;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Settings/EnhancedSystemSettings.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Tabs,\r  Form,\r  Input,\r  Select,\r  Switch,\r  Button,\r  Row,\r  Col,\r  InputNumber,\r  TimePicker,\r  Space,\r  Typography,\r  Divider,\r  Alert,\r  Table,\r  Tag,\r  Modal,\r  message,\r  Spin,\r  Badge,\r  List,\r  Tooltip,\r  Upload,\r  Radio,\r  Checkbox,\r  Collapse,\r  Progress,\r  Statistic,\r  notification,\r} from 'antd';\rimport {\r  SettingOutlined,\r  MailOutlined,\r  SafetyOutlined,\r  DatabaseOutlined,\r  ToolOutlined,\r  BellOutlined,\r  SaveOutlined,\r  ReloadOutlined,\r  CloudUploadOutlined,\r  InfoCircleOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  GlobalOutlined,\r  ClockCircleOutlined,\r  LockOutlined,\r  KeyOutlined,\r  UserOutlined,\r  ApiOutlined,\r  FileProtectOutlined,\r  WarningOutlined,\r  SendOutlined,\r  TestTubeOutlined,\r  DeleteOutlined,\r  ExportOutlined,\r  ImportOutlined,\r  ThunderboltOutlined,\r  CloudServerOutlined,\r  SecurityScanOutlined,\r  NotificationOutlined,\r  CalendarOutlined,\r  FieldTimeOutlined,\r} from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport dayjs from 'dayjs';\rimport {\r  settingsApi,\r  GeneralSettings,\r  EmailSettings,\r  SecuritySettings,\r  BackupSettings,\r  MaintenanceSettings,\r  NotificationSettings,\r} from '@/shared/api/settings.api';\rimport '../../styles/master-layout.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Panel } = Collapse;\rconst { TextArea } = Input;\rconst { Option } = Select;\rexport const MasterSettingsPage: React.FC = () => {\r  const [activeTab, setActiveTab] = useState('general');\r  const [loading, setLoading] = useState(false);\r  const [saving, setSaving] = useState(false);\r  const [settings, setSettings] = useState<any>({});\r  const [generalForm] = Form.useForm();\r  const [emailForm] = Form.useForm();\r  const [securityForm] = Form.useForm();\r  const [backupForm] = Form.useForm();\r  const [maintenanceForm] = Form.useForm();\r  const [notificationForm] = Form.useForm();\r  useEffect(() => {\r    fetchSettings();\r  }, []);\r  const fetchSettings = async () => {\r    setLoading(true);\r    try {\r      const response = await settingsApi.getAll();\r      if (response.data?.success && response.data?.data) {\r        const settings = response.data.data;\r        setSettings(settings);\r        // Set form values\r        generalForm.setFieldsValue(settings.general);\r        emailForm.setFieldsValue(settings.email);\r        securityForm.setFieldsValue(settings.security);\r        backupForm.setFieldsValue({\r          ...settings.backup,\r          time: dayjs(settings.backup.time, 'HH:mm'),\r        });\r        maintenanceForm.setFieldsValue(settings.maintenance);\r        notificationForm.setFieldsValue(settings.notifications);\r      } else {\r        // Use mock data as fallback\r        const mockSettings = {\r        general: {\r          siteName: 'Stocker',\r          siteUrl: 'https://stoocker.app',\r          adminEmail: 'info@stoocker.app',\r          defaultLanguage: 'tr',\r          defaultTimezone: 'Europe/Istanbul',\r          dateFormat: 'DD/MM/YYYY',\r          timeFormat: 'HH:mm',\r          currency: 'TRY',\r          maxUploadSize: 10,\r          allowRegistration: true,\r          requireEmailVerification: true,\r          maintenanceMode: false,\r        },\r        email: {\r          provider: 'SMTP',\r          smtpHost: 'smtp.gmail.com',\r          smtpPort: 587,\r          smtpUsername: 'info@stoocker.app',\r          smtpEncryption: 'TLS',\r          fromEmail: 'info@stoocker.app',\r          fromName: 'Stocker',\r          testMode: false,\r        },\r        security: {\r          enforcePasswordPolicy: true,\r          minPasswordLength: 8,\r          requireUppercase: true,\r          requireLowercase: true,\r          requireNumbers: true,\r          requireSpecialChars: true,\r          passwordExpiryDays: 90,\r          maxLoginAttempts: 5,\r          lockoutDuration: 30,\r          enableTwoFactor: true,\r          sessionTimeout: 60,\r          enableCaptcha: true,\r          allowedIpAddresses: [],\r          blockedIpAddresses: [],\r        },\r        backup: {\r          enabled: true,\r          frequency: 'daily',\r          time: '03:00',\r          retentionDays: 30,\r          backupLocation: '/backups',\r          includeDatabase: true,\r          includeFiles: true,\r          emailNotification: true,\r          notificationEmail: 'admin@stoocker.app',\r        },\r        maintenance: {\r          enabled: false,\r          message: 'Sistem bakım çalışması yapılmaktadır. Lütfen daha sonra tekrar deneyin.',\r          allowedIPs: ['127.0.0.1'],\r          showCountdown: true,\r        },\r        notifications: {\r          emailNotifications: true,\r          pushNotifications: false,\r          smsNotifications: false,\r          newUserNotification: true,\r          newTenantNotification: true,\r          errorNotification: true,\r          systemUpdateNotification: true,\r          reportNotification: true,\r          notificationEmails: ['admin@stoocker.app', 'info@stoocker.app'],\r        },\r      };\r        setSettings(mockSettings);\r        // Set form values\r        generalForm.setFieldsValue(mockSettings.general);\r        emailForm.setFieldsValue(mockSettings.email);\r        securityForm.setFieldsValue(mockSettings.security);\r        backupForm.setFieldsValue({\r          ...mockSettings.backup,\r          time: dayjs(mockSettings.backup.time, 'HH:mm'),\r        });\r        maintenanceForm.setFieldsValue(mockSettings.maintenance);\r        notificationForm.setFieldsValue(mockSettings.notifications);\r      }\r    } catch (error) {\r      message.error('Ayarlar yüklenirken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleGeneralSubmit = async (values: GeneralSettings) => {\r    setSaving(true);\r    try {\r      await settingsApi.updateGeneral(values);\r      message.success('Genel ayarlar güncellendi');\r    } catch (error) {\r      message.error('Ayarlar güncellenirken hata oluştu');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleEmailSubmit = async (values: EmailSettings) => {\r    setSaving(true);\r    try {\r      await settingsApi.updateEmail(values);\r      message.success('E-posta ayarları güncellendi');\r    } catch (error) {\r      message.error('Ayarlar güncellenirken hata oluştu');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleSecuritySubmit = async (values: SecuritySettings) => {\r    setSaving(true);\r    try {\r      await settingsApi.updateSecurity(values);\r      message.success('Güvenlik ayarları güncellendi');\r    } catch (error) {\r      message.error('Ayarlar güncellenirken hata oluştu');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleBackupSubmit = async (values: any) => {\r    setSaving(true);\r    try {\r      const backupSettings = {\r        ...values,\r        time: values.time.format('HH:mm'),\r      };\r      await settingsApi.updateBackup(backupSettings);\r      message.success('Yedekleme ayarları güncellendi');\r    } catch (error) {\r      message.error('Ayarlar güncellenirken hata oluştu');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleTestEmail = () => {\r    Modal.confirm({\r      title: 'E-posta Testi',\r      content: (\r        <Form layout=\"vertical\">\r          <Form.Item label=\"Alıcı E-posta\" name=\"to\" rules={[{ required: true, type: 'email' }]}>\r            <Input placeholder=\"test@example.com\" / aria-label=\"input field\">\r          </Form.Item>\r        </Form>\r      ),\r      onOk: async () => {\r        try {\r          // await settingsApi.testEmailSettings({ to: 'test@example.com', subject: 'Test', body: 'Test email' });\r          message.success('Test e-postası gönderildi');\r        } catch (error) {\r          message.error('E-posta gönderilemedi');\r        }\r      },\r    });\r  };\r  const handleBackupNow = async () => {\r    Modal.confirm({\r      title: 'Manuel Yedekleme',\r      content: 'Şimdi manuel yedekleme yapmak istediğinizden emin misiniz?',\r      onOk: async () => {\r        try {\r          await settingsApi.backupNow();\r          notification.success({\r            message: 'Yedekleme Başlatıldı',\r            description: 'Yedekleme işlemi arka planda başlatıldı. Tamamlandığında bildirim alacaksınız.',\r          });\r        } catch (error) {\r          message.error('Yedekleme başlatılamadı');\r        }\r      },\r    });\r  };\r  const handleClearCache = async () => {\r    Modal.confirm({\r      title: 'Önbellek Temizleme',\r      content: 'Tüm sistem önbelleğini temizlemek istediğinizden emin misiniz?',\r      onOk: async () => {\r        try {\r          await settingsApi.clearCache();\r          message.success('Önbellek temizlendi');\r        } catch (error) {\r          message.error('Önbellek temizlenemedi');\r        }\r      },\r    });\r  };\r  const tabItems = [\r    {\r      key: 'general',\r      label: (\r        <span>\r          <GlobalOutlined />\r          Genel\r        </span>\r      ),\r      children: (\r        <Card>\r          <Form\r            form={generalForm}\r            layout=\"vertical\"\r            onFinish={handleGeneralSubmit}\r          >\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"siteName\"\r                  label=\"Site Adı\"\r                  rules={[{ required: true }]}\r                >\r                  <Input placeholder=\"Stocker\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"siteUrl\"\r                  label=\"Site URL\"\r                  rules={[{ required: true, type: 'url' }]}\r                >\r                  <Input placeholder=\"https://example.com\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"adminEmail\"\r                  label=\"Admin E-posta\"\r                  rules={[{ required: true, type: 'email' }]}\r                >\r                  <Input placeholder=\"admin@example.com\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"defaultLanguage\"\r                  label=\"Varsayılan Dil\"\r                  rules={[{ required: true }]}\r                >\r                  <Select aria-label=\"select field\">\r                    <Option value=\"tr\">Türkçe</Option>\r                    <Option value=\"en\">English</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"defaultTimezone\"\r                  label=\"Saat Dilimi\"\r                  rules={[{ required: true }]}\r                >\r                  <Select showSearch aria-label=\"select field\">\r                    <Option value=\"Europe/Istanbul\">Europe/Istanbul</Option>\r                    <Option value=\"Europe/London\">Europe/London</Option>\r                    <Option value=\"America/New_York\">America/New_York</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"currency\"\r                  label=\"Para Birimi\"\r                  rules={[{ required: true }]}\r                >\r                  <Select aria-label=\"select field\">\r                    <Option value=\"TRY\">TRY (₺)</Option>\r                    <Option value=\"USD\">USD ($)</Option>\r                    <Option value=\"EUR\">EUR (€)</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"dateFormat\"\r                  label=\"Tarih Formatı\"\r                  rules={[{ required: true }]}\r                >\r                  <Select aria-label=\"select field\">\r                    <Option value=\"DD/MM/YYYY\">DD/MM/YYYY</Option>\r                    <Option value=\"MM/DD/YYYY\">MM/DD/YYYY</Option>\r                    <Option value=\"YYYY-MM-DD\">YYYY-MM-DD</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"maxUploadSize\"\r                  label=\"Max Dosya Boyutu (MB)\"\r                  rules={[{ required: true }]}\r                >\r                  <InputNumber min={1} max={100} style={{ width: '100%' }} / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={24}>\r                <Divider />\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"allowRegistration\"\r                  label=\"Kayıt İzni\"\r                  valuePropName=\"checked\"\r                >\r                  <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r                </Form.Item>\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"requireEmailVerification\"\r                  label=\"E-posta Doğrulama\"\r                  valuePropName=\"checked\"\r                >\r                  <Switch checkedChildren=\"Zorunlu\" unCheckedChildren=\"İsteğe Bağlı\" />\r                </Form.Item>\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"maintenanceMode\"\r                  label=\"Bakım Modu\"\r                  valuePropName=\"checked\"\r                >\r                  <Switch checkedChildren=\"Aktif\" unCheckedChildren=\"Pasif\" />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Form.Item>\r              <Space>\r                <Button type=\"primary\" htmlType=\"submit\" loading={saving} icon={<SaveOutlined />} aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r                <Button onClick={() => generalForm.resetFields()} icon={<ReloadOutlined />}>\r                  Sıfırla\r                </Button>\r              </Space>\r            </Form.Item>\r          </Form>\r        </Card>\r      ),\r    },\r    {\r      key: 'email',\r      label: (\r        <span>\r          <MailOutlined />\r          E-posta\r        </span>\r      ),\r      children: (\r        <Card>\r          <Form\r            form={emailForm}\r            layout=\"vertical\"\r            onFinish={handleEmailSubmit}\r          >\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"provider\"\r                  label=\"E-posta Sağlayıcı\"\r                  rules={[{ required: true }]}\r                >\r                  <Select aria-label=\"select field\">\r                    <Option value=\"SMTP\">SMTP</Option>\r                    <Option value=\"SendGrid\">SendGrid</Option>\r                    <Option value=\"AWS SES\">AWS SES</Option>\r                    <Option value=\"Mailgun\">Mailgun</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"smtpHost\"\r                  label=\"SMTP Sunucu\"\r                  rules={[{ required: true }]}\r                >\r                  <Input placeholder=\"smtp.gmail.com\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"smtpPort\"\r                  label=\"Port\"\r                  rules={[{ required: true }]}\r                >\r                  <InputNumber min={1} max={65535} style={{ width: '100%' }} / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"smtpEncryption\"\r                  label=\"Şifreleme\"\r                  rules={[{ required: true }]}\r                >\r                  <Select aria-label=\"select field\">\r                    <Option value=\"TLS\">TLS</Option>\r                    <Option value=\"SSL\">SSL</Option>\r                    <Option value=\"None\">Yok</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"smtpUsername\"\r                  label=\"Kullanıcı Adı\"\r                  rules={[{ required: true }]}\r                >\r                  <Input placeholder=\"username@gmail.com\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"smtpPassword\"\r                  label=\"Şifre\"\r                >\r                  <Input.Password placeholder=\"••••••••\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"fromEmail\"\r                  label=\"Gönderen E-posta\"\r                  rules={[{ required: true, type: 'email' }]}\r                >\r                  <Input placeholder=\"noreply@example.com\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"fromName\"\r                  label=\"Gönderen Adı\"\r                  rules={[{ required: true }]}\r                >\r                  <Input placeholder=\"Stocker\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"testMode\"\r                  label=\"Test Modu\"\r                  valuePropName=\"checked\"\r                >\r                  <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Form.Item>\r              <Space>\r                <Button type=\"primary\" htmlType=\"submit\" loading={saving} icon={<SaveOutlined />} aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r                <Button onClick={handleTestEmail} icon={<SendOutlined />} aria-label=\"send outlined\">\r                  Test E-postası Gönder\r                </Button>\r                <Button onClick={() => emailForm.resetFields()} icon={<ReloadOutlined />}>\r                  Sıfırla\r                </Button>\r              </Space>\r            </Form.Item>\r          </Form>\r        </Card>\r      ),\r    },\r    {\r      key: 'security',\r      label: (\r        <span>\r          <SafetyOutlined />\r          Güvenlik\r        </span>\r      ),\r      children: (\r        <Card>\r          <Form\r            form={securityForm}\r            layout=\"vertical\"\r            onFinish={handleSecuritySubmit}\r          >\r            <Collapse defaultActiveKey={['password', 'login', 'session']}>\r              <Panel header=\"Şifre Politikası\" key=\"password\">\r                <Row gutter={24}>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"enforcePasswordPolicy\"\r                      label=\"Şifre Politikası\"\r                      valuePropName=\"checked\"\r                    >\r                      <Switch checkedChildren=\"Zorunlu\" unCheckedChildren=\"İsteğe Bağlı\" />\r                    </Form.Item>\r                  </Col>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"minPasswordLength\"\r                      label=\"Minimum Şifre Uzunluğu\"\r                    >\r                      <InputNumber min={6} max={32} style={{ width: '100%' }} / aria-label=\"input field\">\r                    </Form.Item>\r                  </Col>\r                  <Col span={6}>\r                    <Form.Item\r                      name=\"requireUppercase\"\r                      valuePropName=\"checked\"\r                    >\r                      <Checkbox>Büyük Harf</Checkbox>\r                    </Form.Item>\r                  </Col>\r                  <Col span={6}>\r                    <Form.Item\r                      name=\"requireLowercase\"\r                      valuePropName=\"checked\"\r                    >\r                      <Checkbox>Küçük Harf</Checkbox>\r                    </Form.Item>\r                  </Col>\r                  <Col span={6}>\r                    <Form.Item\r                      name=\"requireNumbers\"\r                      valuePropName=\"checked\"\r                    >\r                      <Checkbox>Rakam</Checkbox>\r                    </Form.Item>\r                  </Col>\r                  <Col span={6}>\r                    <Form.Item\r                      name=\"requireSpecialChars\"\r                      valuePropName=\"checked\"\r                    >\r                      <Checkbox>Özel Karakter</Checkbox>\r                    </Form.Item>\r                  </Col>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"passwordExpiryDays\"\r                      label=\"Şifre Geçerlilik Süresi (Gün)\"\r                    >\r                      <InputNumber min={0} max={365} style={{ width: '100%' }} / aria-label=\"input field\">\r                    </Form.Item>\r                  </Col>\r                </Row>\r              </Panel>\r              <Panel header=\"Giriş Güvenliği\" key=\"login\">\r                <Row gutter={24}>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"maxLoginAttempts\"\r                      label=\"Max Giriş Denemesi\"\r                    >\r                      <InputNumber min={3} max={10} style={{ width: '100%' }} / aria-label=\"input field\">\r                    </Form.Item>\r                  </Col>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"lockoutDuration\"\r                      label=\"Kilitleme Süresi (Dakika)\"\r                    >\r                      <InputNumber min={5} max={60} style={{ width: '100%' }} / aria-label=\"input field\">\r                    </Form.Item>\r                  </Col>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"enableTwoFactor\"\r                      label=\"İki Faktörlü Doğrulama\"\r                      valuePropName=\"checked\"\r                    >\r                      <Switch checkedChildren=\"Zorunlu\" unCheckedChildren=\"İsteğe Bağlı\" />\r                    </Form.Item>\r                  </Col>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"enableCaptcha\"\r                      label=\"CAPTCHA\"\r                      valuePropName=\"checked\"\r                    >\r                      <Switch checkedChildren=\"Aktif\" unCheckedChildren=\"Pasif\" />\r                    </Form.Item>\r                  </Col>\r                </Row>\r              </Panel>\r              <Panel header=\"Oturum Yönetimi\" key=\"session\">\r                <Row gutter={24}>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"sessionTimeout\"\r                      label=\"Oturum Zaman Aşımı (Dakika)\"\r                    >\r                      <InputNumber min={15} max={480} style={{ width: '100%' }} / aria-label=\"input field\">\r                    </Form.Item>\r                  </Col>\r                </Row>\r              </Panel>\r              <Panel header=\"IP Kısıtlamaları\" key=\"ip\">\r                <Row gutter={24}>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"allowedIpAddresses\"\r                      label=\"İzin Verilen IP Adresleri\"\r                    >\r                      <Select\r                        mode=\"tags\"\r                        placeholder=\"IP adresi girin\"\r                        style={{ width: '100%' }}\r                      / aria-label=\"select field\">\r                    </Form.Item>\r                  </Col>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"blockedIpAddresses\"\r                      label=\"Engellenen IP Adresleri\"\r                    >\r                      <Select\r                        mode=\"tags\"\r                        placeholder=\"IP adresi girin\"\r                        style={{ width: '100%' }}\r                      / aria-label=\"select field\">\r                    </Form.Item>\r                  </Col>\r                </Row>\r              </Panel>\r            </Collapse>\r            <Form.Item style={{ marginTop: 24 }}>\r              <Space>\r                <Button type=\"primary\" htmlType=\"submit\" loading={saving} icon={<SaveOutlined />} aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r                <Button onClick={() => securityForm.resetFields()} icon={<ReloadOutlined />}>\r                  Sıfırla\r                </Button>\r              </Space>\r            </Form.Item>\r          </Form>\r        </Card>\r      ),\r    },\r    {\r      key: 'backup',\r      label: (\r        <span>\r          <DatabaseOutlined />\r          Yedekleme\r        </span>\r      ),\r      children: (\r        <Card>\r          <Form\r            form={backupForm}\r            layout=\"vertical\"\r            onFinish={handleBackupSubmit}\r          >\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"enabled\"\r                  label=\"Otomatik Yedekleme\"\r                  valuePropName=\"checked\"\r                >\r                  <Switch checkedChildren=\"Aktif\" unCheckedChildren=\"Pasif\" />\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"frequency\"\r                  label=\"Yedekleme Sıklığı\"\r                  rules={[{ required: true }]}\r                >\r                  <Select aria-label=\"select field\">\r                    <Option value=\"daily\">Günlük</Option>\r                    <Option value=\"weekly\">Haftalık</Option>\r                    <Option value=\"monthly\">Aylık</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"time\"\r                  label=\"Yedekleme Saati\"\r                  rules={[{ required: true }]}\r                >\r                  <TimePicker format=\"HH:mm\" style={{ width: '100%' }} />\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"retentionDays\"\r                  label=\"Saklama Süresi (Gün)\"\r                  rules={[{ required: true }]}\r                >\r                  <InputNumber min={7} max={365} style={{ width: '100%' }} / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={24}>\r                <Form.Item\r                  name=\"backupLocation\"\r                  label=\"Yedekleme Konumu\"\r                  rules={[{ required: true }]}\r                >\r                  <Input placeholder=\"/backups\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"includeDatabase\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>Veritabanı</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"includeFiles\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>Dosyalar</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"emailNotification\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>E-posta Bildirimi</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={24}>\r                <Form.Item\r                  name=\"notificationEmail\"\r                  label=\"Bildirim E-postası\"\r                >\r                  <Input type=\"email\" placeholder=\"admin@example.com\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider />\r            <Alert\r              message=\"Son Yedekleme\"\r              description=\"23 Aralık 2024, 03:00 - Başarılı\"\r              type=\"success\"\r              showIcon\r              action={\r                <Button size=\"small\" onClick={handleBackupNow}>\r                  Şimdi Yedekle\r                </Button>\r              }\r            />\r            <Form.Item style={{ marginTop: 24 }}>\r              <Space>\r                <Button type=\"primary\" htmlType=\"submit\" loading={saving} icon={<SaveOutlined />} aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r                <Button onClick={handleBackupNow} icon={<CloudUploadOutlined />} aria-label=\"cloud upload outlined\">\r                  Manuel Yedekleme\r                </Button>\r                <Button onClick={() => backupForm.resetFields()} icon={<ReloadOutlined />}>\r                  Sıfırla\r                </Button>\r              </Space>\r            </Form.Item>\r          </Form>\r        </Card>\r      ),\r    },\r    {\r      key: 'maintenance',\r      label: (\r        <span>\r          <ToolOutlined />\r          Bakım\r        </span>\r      ),\r      children: (\r        <Card>\r          <Form\r            form={maintenanceForm}\r            layout=\"vertical\"\r            onFinish={(values) => message.success('Bakım ayarları güncellendi')}\r          >\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"enabled\"\r                  label=\"Bakım Modu\"\r                  valuePropName=\"checked\"\r                >\r                  <Switch \r                    checkedChildren=\"Aktif\" \r                    unCheckedChildren=\"Pasif\"\r                    onChange={(checked) => {\r                      if (checked) {\r                        Modal.confirm({\r                          title: 'Bakım Modunu Etkinleştir',\r                          content: 'Bakım modu etkinleştirildiğinde kullanıcılar sisteme erişemez. Devam etmek istiyor musunuz?',\r                          okText: 'Evet',\r                          cancelText: 'İptal',\r                          onCancel: () => {\r                            maintenanceForm.setFieldValue('enabled', false);\r                          },\r                        });\r                      }\r                    }}\r                  />\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"showCountdown\"\r                  label=\"Geri Sayım Göster\"\r                  valuePropName=\"checked\"\r                >\r                  <Switch checkedChildren=\"Evet\" unCheckedChildren=\"Hayır\" />\r                </Form.Item>\r              </Col>\r              <Col span={24}>\r                <Form.Item\r                  name=\"message\"\r                  label=\"Bakım Mesajı\"\r                >\r                  <TextArea\r                    rows={4}\r                    placeholder=\"Sistem bakım çalışması yapılmaktadır...\"\r                  />\r                </Form.Item>\r              </Col>\r              <Col span={24}>\r                <Form.Item\r                  name=\"allowedIPs\"\r                  label=\"İzin Verilen IP Adresleri (Bakım sırasında erişebilecek)\"\r                >\r                  <Select\r                    mode=\"tags\"\r                    placeholder=\"IP adresi girin\"\r                    style={{ width: '100%' }}\r                  / aria-label=\"select field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider />\r            <Card title=\"Sistem Araçları\" size=\"small\">\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <Button \r                  icon={<DeleteOutlined />} \r                  onClick={handleClearCache}\r                  block\r                 aria-label=\"delete outlined\">\r                  Önbelleği Temizle\r                </Button>\r                <Button \r                  icon={<ReloadOutlined />} \r                  onClick={() = aria-label=\"reload outlined\"> message.info('Servisler yeniden başlatılıyor...')}\r                  block\r                >\r                  Servisleri Yeniden Başlat\r                </Button>\r                <Button \r                  icon={<ExportOutlined />} \r                  onClick={() = aria-label=\"export outlined\"> message.info('Sistem logları indiriliyor...')}\r                  block\r                >\r                  Logları İndir\r                </Button>\r              </Space>\r            </Card>\r            <Form.Item style={{ marginTop: 24 }}>\r              <Space>\r                <Button type=\"primary\" htmlType=\"submit\" loading={saving} icon={<SaveOutlined />} aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r                <Button onClick={() => maintenanceForm.resetFields()} icon={<ReloadOutlined />}>\r                  Sıfırla\r                </Button>\r              </Space>\r            </Form.Item>\r          </Form>\r        </Card>\r      ),\r    },\r    {\r      key: 'notifications',\r      label: (\r        <span>\r          <BellOutlined />\r          Bildirimler\r        </span>\r      ),\r      children: (\r        <Card>\r          <Form\r            form={notificationForm}\r            layout=\"vertical\"\r            onFinish={(values) => message.success('Bildirim ayarları güncellendi')}\r          >\r            <Row gutter={24}>\r              <Col span={24}>\r                <Title level={5}>Bildirim Kanalları</Title>\r                <Divider />\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"emailNotifications\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>E-posta Bildirimleri</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"pushNotifications\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>Push Bildirimleri</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"smsNotifications\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>SMS Bildirimleri</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={24}>\r                <Title level={5}>Bildirim Türleri</Title>\r                <Divider />\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"newUserNotification\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>Yeni Kullanıcı Kayıtları</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"newTenantNotification\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>Yeni Tenant Oluşturma</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"errorNotification\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>Sistem Hataları</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"systemUpdateNotification\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>Sistem Güncellemeleri</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"reportNotification\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>Raporlar</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={24}>\r                <Form.Item\r                  name=\"notificationEmails\"\r                  label=\"Bildirim E-postaları\"\r                >\r                  <Select\r                    mode=\"tags\"\r                    placeholder=\"E-posta adresi girin\"\r                    style={{ width: '100%' }}\r                  / aria-label=\"select field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Form.Item style={{ marginTop: 24 }}>\r              <Space>\r                <Button type=\"primary\" htmlType=\"submit\" loading={saving} icon={<SaveOutlined />} aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r                <Button onClick={() => notificationForm.resetFields()} icon={<ReloadOutlined />}>\r                  Sıfırla\r                </Button>\r              </Space>\r            </Form.Item>\r          </Form>\r        </Card>\r      ),\r    },\r  ];\r  return (\r    <div className=\"master-settings-page\">\r      {/* Header */}\r      <div className=\"page-header glass-morphism\">\r        <motion.div\r          initial={{ opacity: 0, x: -20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-content\"\r        >\r          <Title level={2} className=\"gradient-text\">\r            <SettingOutlined /> Sistem Ayarları\r          </Title>\r          <Text type=\"secondary\">Sistem yapılandırması ve ayarları yönetin</Text>\r        </motion.div>\r        <motion.div\r          initial={{ opacity: 0, x: 20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-actions\"\r        >\r          <Space>\r            <Button icon={<ExportOutlined />} aria-label=\"export outlined\">\r              Ayarları Dışa Aktar\r            </Button>\r            <Button icon={<ImportOutlined />} aria-label=\"import outlined\">\r              Ayarları İçe Aktar\r            </Button>\r          </Space>\r        </motion.div>\r      </div>\r      {/* Content */}\r      <Card className=\"settings-card glass-morphism\">\r        <Spin spinning={loading}>\r          <Tabs\r            activeKey={activeTab}\r            onChange={setActiveTab}\r            items={tabItems}\r            type=\"card\"\r          />\r        </Spin>\r      </Card>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Settings/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Table,\r  Button,\r  Space,\r  Tag,\r  Modal,\r  Form,\r  Select,\r  DatePicker,\r  Switch,\r  message,\r  Dropdown,\r  Input,\r  Row,\r  Col,\r  Statistic,\r  Badge,\r  Typography,\r  Tooltip,\r  Drawer,\r  Descriptions,\r  Timeline,\r  Alert,\r} from 'antd';\rimport {\r  PlusOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  StopOutlined,\r  PlayCircleOutlined,\r  ReloadOutlined,\r  MoreOutlined,\r  CalendarOutlined,\r  DollarOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  ClockCircleOutlined,\r  ExclamationCircleOutlined,\r  DownloadOutlined,\r  FilterOutlined,\r  SearchOutlined,\r  ShoppingCartOutlined,\r} from '@ant-design/icons';\rimport type { ColumnsType } from 'antd/es/table';\rimport { subscriptionsApi, SubscriptionDto } from '@/shared/api/subscriptions.api';\rimport { masterApi } from '@/shared/api/master.api';\rimport dayjs from 'dayjs';\rconst { Title, Text } = Typography;\rconst { Option } = Select;\rconst { RangePicker } = DatePicker;\rconst { TextArea } = Input;\rexport const MasterSubscriptionsPage: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [subscriptions, setSubscriptions] = useState<SubscriptionDto[]>([]);\r  const [filteredSubscriptions, setFilteredSubscriptions] = useState<SubscriptionDto[]>([]);\r  const [modalVisible, setModalVisible] = useState(false);\r  const [editingSubscription, setEditingSubscription] = useState<SubscriptionDto | null>(null);\r  const [detailDrawerVisible, setDetailDrawerVisible] = useState(false);\r  const [selectedSubscription, setSelectedSubscription] = useState<SubscriptionDto | null>(null);\r  const [tenants, setTenants] = useState<any[]>([]);\r  const [packages, setPackages] = useState<any[]>([]);\r  const [form] = Form.useForm();\r  // Stats\r  const [stats, setStats] = useState({\r    total: 0,\r    active: 0,\r    trial: 0,\r    suspended: 0,\r    revenue: 0,\r  });\r  // Filters\r  const [statusFilter, setStatusFilter] = useState<string>('all');\r  const [searchText, setSearchText] = useState('');\r  useEffect(() => {\r    fetchSubscriptions();\r    fetchTenants();\r    fetchPackages();\r  }, []);\r  useEffect(() => {\r    filterSubscriptions();\r    calculateStats();\r  }, [subscriptions, statusFilter, searchText]);\r  const fetchSubscriptions = async () => {\r    setLoading(true);\r    try {\r      const response = await subscriptionsApi.getAll();\r      if (response.data?.success) {\r        setSubscriptions(response.data.data || []);\r      }\r    } catch (error) {\r      message.error('Abonelikler yüklenemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const fetchTenants = async () => {\r    try {\r      const response = await masterApi.tenants.getAll();\r      if (response.data?.data) {\r        setTenants(response.data.data);\r      }\r    } catch (error) {\r    }\r  };\r  const fetchPackages = async () => {\r    try {\r      const response = await masterApi.packages.getAll();\r      if (response.data?.data) {\r        setPackages(response.data.data);\r      }\r    } catch (error) {\r    }\r  };\r  const filterSubscriptions = () => {\r    let filtered = [...subscriptions];\r    if (statusFilter !== 'all') {\r      filtered = filtered.filter(s => s.status === statusFilter);\r    }\r    if (searchText) {\r      filtered = filtered.filter(s =>\r        s.tenantName?.toLowerCase().includes(searchText.toLowerCase()) ||\r        s.packageName?.toLowerCase().includes(searchText.toLowerCase())\r      );\r    }\r    setFilteredSubscriptions(filtered);\r  };\r  const calculateStats = () => {\r    const active = subscriptions.filter(s => s.status === 'Active').length;\r    const trial = subscriptions.filter(s => s.status === 'Trial').length;\r    const suspended = subscriptions.filter(s => s.status === 'Suspended').length;\r    const revenue = subscriptions\r      .filter(s => s.status === 'Active')\r      .reduce((sum, s) => sum + (s.price?.amount || 0), 0);\r    setStats({\r      total: subscriptions.length,\r      active,\r      trial,\r      suspended,\r      revenue,\r    });\r  };\r  const handleCreate = () => {\r    form.resetFields();\r    setEditingSubscription(null);\r    setModalVisible(true);\r  };\r  const handleEdit = (record: SubscriptionDto) => {\r    setEditingSubscription(record);\r    form.setFieldsValue({\r      tenantId: record.tenantId,\r      packageId: record.packageId,\r      startDate: dayjs(record.startDate),\r      endDate: dayjs(record.endDate),\r      autoRenew: record.autoRenew,\r    });\r    setModalVisible(true);\r  };\r  const handleSubmit = async (values: any) => {\r    try {\r      const data = {\r        ...values,\r        startDate: values.startDate?.format('YYYY-MM-DD'),\r        endDate: values.endDate?.format('YYYY-MM-DD'),\r      };\r      if (editingSubscription) {\r        await subscriptionsApi.update(editingSubscription.id, data);\r        message.success('Abonelik güncellendi');\r      } else {\r        await subscriptionsApi.create(data);\r        message.success('Abonelik oluşturuldu');\r      }\r      setModalVisible(false);\r      fetchSubscriptions();\r    } catch (error) {\r      message.error('İşlem başarısız');\r    }\r  };\r  const handleCancel = async (id: string) => {\r    Modal.confirm({\r      title: 'Aboneliği İptal Et',\r      content: 'Bu aboneliği iptal etmek istediğinizden emin misiniz?',\r      okText: 'İptal Et',\r      cancelText: 'Vazgeç',\r      onOk: async () => {\r        try {\r          await subscriptionsApi.cancel(id);\r          message.success('Abonelik iptal edildi');\r          fetchSubscriptions();\r        } catch (error) {\r          message.error('İptal işlemi başarısız');\r        }\r      },\r    });\r  };\r  const handleSuspend = async (id: string) => {\r    Modal.confirm({\r      title: 'Aboneliği Askıya Al',\r      content: (\r        <Form>\r          <Form.Item label=\"Askıya Alma Nedeni\">\r            <TextArea rows={3} placeholder=\"Neden belirtiniz...\" />\r          </Form.Item>\r        </Form>\r      ),\r      okText: 'Askıya Al',\r      cancelText: 'Vazgeç',\r      onOk: async () => {\r        try {\r          await subscriptionsApi.suspend(id, 'Manual suspension');\r          message.success('Abonelik askıya alındı');\r          fetchSubscriptions();\r        } catch (error) {\r          message.error('İşlem başarısız');\r        }\r      },\r    });\r  };\r  const handleActivate = async (id: string) => {\r    try {\r      await subscriptionsApi.activate(id);\r      message.success('Abonelik aktifleştirildi');\r      fetchSubscriptions();\r    } catch (error) {\r      message.error('Aktifleştirme başarısız');\r    }\r  };\r  const handleRenew = async (id: string) => {\r    Modal.confirm({\r      title: 'Aboneliği Yenile',\r      content: 'Bu aboneliği 1 ay daha yenilemek istiyor musunuz?',\r      okText: 'Yenile',\r      cancelText: 'Vazgeç',\r      onOk: async () => {\r        try {\r          await subscriptionsApi.renew(id, 1);\r          message.success('Abonelik yenilendi');\r          fetchSubscriptions();\r        } catch (error) {\r          message.error('Yenileme başarısız');\r        }\r      },\r    });\r  };\r  const showDetail = (record: SubscriptionDto) => {\r    setSelectedSubscription(record);\r    setDetailDrawerVisible(true);\r  };\r  const getStatusColor = (status: string) => {\r    const colors: Record<string, string> = {\r      Active: 'success',\r      Trial: 'processing',\r      Suspended: 'warning',\r      Cancelled: 'error',\r      Expired: 'default',\r    };\r    return colors[status] || 'default';\r  };\r  const getStatusIcon = (status: string) => {\r    const icons: Record<string, React.ReactNode> = {\r      Active: <CheckCircleOutlined />,\r      Trial: <ClockCircleOutlined />,\r      Suspended: <ExclamationCircleOutlined />,\r      Cancelled: <CloseCircleOutlined />,\r      Expired: <ClockCircleOutlined />,\r    };\r    return icons[status] || null;\r  };\r  const columns: ColumnsType<SubscriptionDto> = [\r    {\r      title: 'Tenant',\r      dataIndex: 'tenantName',\r      key: 'tenantName',\r      render: (text: string) => <Text strong>{text}</Text>,\r    },\r    {\r      title: 'Paket',\r      dataIndex: 'packageName',\r      key: 'packageName',\r      render: (text: string) => (\r        <Tag color=\"blue\">{text}</Tag>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status: string) => (\r        <Badge status={getStatusColor(status) as any} text={\r          <Space>\r            {getStatusIcon(status)}\r            <span>{status}</span>\r          </Space>\r        } />\r      ),\r    },\r    {\r      title: 'Fiyat',\r      key: 'price',\r      render: (_, record) => (\r        <Text strong style={{ color: '#52c41a' }}>\r          ₺{record.price?.amount || 0}\r        </Text>\r      ),\r    },\r    {\r      title: 'Başlangıç',\r      dataIndex: 'startDate',\r      key: 'startDate',\r      render: (date: string) => dayjs(date).format('DD.MM.YYYY'),\r    },\r    {\r      title: 'Bitiş',\r      dataIndex: 'endDate',\r      key: 'endDate',\r      render: (date: string) => {\r        const daysLeft = dayjs(date).diff(dayjs(), 'day');\r        const color = daysLeft < 7 ? 'red' : daysLeft < 30 ? 'orange' : 'green';\r        return (\r          <Tooltip title={`${daysLeft} gün kaldı`}>\r            <Text style={{ color }}>\r              {dayjs(date).format('DD.MM.YYYY')}\r            </Text>\r          </Tooltip>\r        );\r      },\r    },\r    {\r      title: 'Otomatik Yenileme',\r      dataIndex: 'autoRenew',\r      key: 'autoRenew',\r      render: (autoRenew: boolean) => (\r        <Switch checked={autoRenew} disabled size=\"small\" />\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      fixed: 'right',\r      width: 120,\r      render: (_, record) => (\r        <Dropdown\r          menu={{\r            items: [\r              {\r                key: 'view',\r                label: 'Detaylar',\r                icon: <CalendarOutlined />,\r                onClick: () => showDetail(record),\r              },\r              {\r                key: 'edit',\r                label: 'Düzenle',\r                icon: <EditOutlined />,\r                onClick: () => handleEdit(record),\r              },\r              { type: 'divider' },\r              ...(record.status === 'Active' ? [\r                {\r                  key: 'suspend',\r                  label: 'Askıya Al',\r                  icon: <StopOutlined />,\r                  onClick: () => handleSuspend(record.id),\r                },\r              ] : []),\r              ...(record.status === 'Suspended' ? [\r                {\r                  key: 'activate',\r                  label: 'Aktifleştir',\r                  icon: <PlayCircleOutlined />,\r                  onClick: () => handleActivate(record.id),\r                },\r              ] : []),\r              {\r                key: 'renew',\r                label: 'Yenile',\r                icon: <ReloadOutlined />,\r                onClick: () => handleRenew(record.id),\r              },\r              { type: 'divider' },\r              {\r                key: 'cancel',\r                label: 'İptal Et',\r                icon: <CloseCircleOutlined />,\r                danger: true,\r                onClick: () => handleCancel(record.id),\r              },\r            ],\r          }}\r          trigger={['click']}\r        >\r          <Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r        </Dropdown>\r      ),\r    },\r  ];\r  return (\r    <div className=\"master-subscriptions-page\">\r      {/* Stats Cards */}\r      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Toplam Abonelik\"\r              value={stats.total}\r              prefix={<ShoppingCartOutlined />}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Aktif\"\r              value={stats.active}\r              prefix={<CheckCircleOutlined />}\r              valueStyle={{ color: '#52c41a' }}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Deneme\"\r              value={stats.trial}\r              prefix={<ClockCircleOutlined />}\r              valueStyle={{ color: '#1890ff' }}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Aylık Gelir\"\r              value={stats.revenue}\r              prefix=\"₺\"\r              valueStyle={{ color: '#faad14' }}\r            />\r          </Card>\r        </Col>\r      </Row>\r      {/* Main Content */}\r      <Card\r        title=\"Abonelik Yönetimi\"\r        extra={\r          <Space>\r            <Select\r              value={statusFilter}\r              onChange={setStatusFilter}\r              style={{ width: 150 }}\r             aria-label=\"select field\">\r              <Option value=\"all\">Tüm Durumlar</Option>\r              <Option value=\"Active\">Aktif</Option>\r              <Option value=\"Trial\">Deneme</Option>\r              <Option value=\"Suspended\">Askıda</Option>\r              <Option value=\"Cancelled\">İptal</Option>\r            </Select>\r            <Input\r              placeholder=\"Ara...\"\r              prefix={<SearchOutlined / aria-label=\"input field\">}\r              value={searchText}\r              onChange={(e) => setSearchText(e.target.value)}\r              style={{ width: 200 }}\r            />\r            <Button icon={<ReloadOutlined />} onClick={fetchSubscriptions} aria-label=\"reload outlined\">\r              Yenile\r            </Button>\r            <Button type=\"primary\" icon={<PlusOutlined />} onClick={handleCreate} aria-label=\"plus outlined\">\r              Yeni Abonelik\r            </Button>\r          </Space>\r        }\r      >\r        <Table\r          columns={columns}\r          dataSource={filteredSubscriptions}\r          rowKey=\"id\"\r          loading={loading}\r          scroll={{ x: 1200 }}\r          pagination={{\r            showSizeChanger: true,\r            showTotal: (total) => `Toplam ${total} abonelik`,\r          }}\r        />\r      </Card>\r      {/* Create/Edit Modal */}\r      <Modal\r        title={editingSubscription ? 'Abonelik Düzenle' : 'Yeni Abonelik'}\r        open={modalVisible}\r        onCancel={() => setModalVisible(false)}\r        footer={null}\r        width={600}\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleSubmit}\r        >\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"tenantId\"\r                label=\"Tenant\"\r                rules={[{ required: true, message: 'Tenant seçiniz' }]}\r              >\r                <Select\r                  showSearch\r                  placeholder=\"Tenant seçiniz\"\r                  optionFilterProp=\"children\"\r                 aria-label=\"select field\">\r                  {tenants.map(t => (\r                    <Option key={t.id} value={t.id}>{t.name}</Option>\r                  ))}\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"packageId\"\r                label=\"Paket\"\r                rules={[{ required: true, message: 'Paket seçiniz' }]}\r              >\r                <Select placeholder=\"Paket seçiniz\" aria-label=\"select field\">\r                  {packages.map(p => (\r                    <Option key={p.id} value={p.id}>\r                      {p.name} - ₺{p.price}\r                    </Option>\r                  ))}\r                </Select>\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"startDate\"\r                label=\"Başlangıç Tarihi\"\r                rules={[{ required: true, message: 'Başlangıç tarihi seçiniz' }]}\r              >\r                <DatePicker style={{ width: '100%' }} />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"endDate\"\r                label=\"Bitiş Tarihi\"\r                rules={[{ required: true, message: 'Bitiş tarihi seçiniz' }]}\r              >\r                <DatePicker style={{ width: '100%' }} />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item\r            name=\"autoRenew\"\r            label=\"Otomatik Yenileme\"\r            valuePropName=\"checked\"\r          >\r            <Switch />\r          </Form.Item>\r          <Form.Item>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => setModalVisible(false)}>İptal</Button>\r              <Button type=\"primary\" htmlType=\"submit\">\r                {editingSubscription ? 'Güncelle' : 'Oluştur'}\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Detail Drawer */}\r      <Drawer\r        title=\"Abonelik Detayları\"\r        placement=\"right\"\r        width={600}\r        onClose={() => setDetailDrawerVisible(false)}\r        open={detailDrawerVisible}\r      >\r        {selectedSubscription && (\r          <>\r            <Descriptions bordered column={1} style={{ marginBottom: 24 }}>\r              <Descriptions.Item label=\"Tenant\">\r                {selectedSubscription.tenantName}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Paket\">\r                <Tag color=\"blue\">{selectedSubscription.packageName}</Tag>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Durum\">\r                <Badge status={getStatusColor(selectedSubscription.status) as any} text={selectedSubscription.status} />\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Fiyat\">\r                ₺{selectedSubscription.price?.amount || 0}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Başlangıç\">\r                {dayjs(selectedSubscription.startDate).format('DD.MM.YYYY')}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Bitiş\">\r                {dayjs(selectedSubscription.endDate).format('DD.MM.YYYY')}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Otomatik Yenileme\">\r                <Switch checked={selectedSubscription.autoRenew} disabled />\r              </Descriptions.Item>\r            </Descriptions>\r            <Title level={5}>Özellikler</Title>\r            <Space wrap style={{ marginBottom: 24 }}>\r              {selectedSubscription.features?.map(feature => (\r                <Tag key={feature} icon={<CheckCircleOutlined />} color=\"success\">\r                  {feature}\r                </Tag>\r              ))}\r            </Space>\r            <Title level={5}>İşlem Geçmişi</Title>\r            <Timeline>\r              <Timeline.Item color=\"green\">\r                Abonelik oluşturuldu - {dayjs(selectedSubscription.createdAt).format('DD.MM.YYYY HH:mm')}\r              </Timeline.Item>\r              <Timeline.Item color=\"blue\">\r                Paket güncellendi - {dayjs().subtract(15, 'day').format('DD.MM.YYYY HH:mm')}\r              </Timeline.Item>\r              <Timeline.Item color=\"gray\">\r                Otomatik yenileme aktifleştirildi - {dayjs().subtract(30, 'day').format('DD.MM.YYYY HH:mm')}\r              </Timeline.Item>\r            </Timeline>\r          </>\r        )}\r      </Drawer>\r    </div>\r  );\r};\rexport default MasterSubscriptionsPage;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Subscriptions/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect, useMemo } from 'react';\rimport { useParams, useNavigate } from 'react-router-dom';\rimport {\r  Row,\r  Col,\r  Card,\r  Tabs,\r  Descriptions,\r  Table,\r  Tag,\r  Button,\r  Space,\r  Typography,\r  Timeline,\r  Avatar,\r  Badge,\r  Statistic,\r  Progress,\r  Switch,\r  Modal,\r  Form,\r  Input,\r  Select,\r  DatePicker,\r  message,\r  Tooltip,\r  Divider,\r  List,\r  Alert,\r  Dropdown,\r  Menu,\r  notification,\r  Breadcrumb,\r  Empty,\r  Drawer,\r  Skeleton,\r} from 'antd';\rimport {\r  ArrowLeftOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  LockOutlined,\r  UnlockOutlined,\r  UserOutlined,\r  TeamOutlined,\r  AppstoreOutlined,\r  DollarOutlined,\r  CalendarOutlined,\r  HistoryOutlined,\r  SettingOutlined,\r  CreditCardOutlined,\r  FileTextOutlined,\r  CloudServerOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  WarningOutlined,\r  InfoCircleOutlined,\r  RiseOutlined,\r  FallOutlined,\r  SyncOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  GlobalOutlined,\r  SafetyOutlined,\r  ExclamationCircleOutlined,\r  MoreOutlined,\r  DownloadOutlined,\r  PlusOutlined,\r  ReloadOutlined,\r  SendOutlined,\r  PrintOutlined,\r  ShareAltOutlined,\r  EyeOutlined,\r  BankOutlined,\r  ShoppingCartOutlined,\r  LineChartOutlined,\r  BarChartOutlined,\r  PieChartOutlined,\r  FundOutlined,\r  KeyOutlined,\r  BellOutlined,\r  MessageOutlined,\r  ClockCircleOutlined,\r  EnvironmentOutlined,\r  RocketOutlined,\r  FireOutlined,\r  ThunderboltOutlined,\r  SaveOutlined,\r  BarChartOutlined,\r} from '@ant-design/icons';\rimport { Area, Line, Column, Pie, Gauge, Liquid, DualAxes } from '@ant-design/charts';\rimport dayjs from 'dayjs';\rimport relativeTime from 'dayjs/plugin/relativeTime';\rimport { masterTenantApi } from '@/shared/api/master.api';\rimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\rimport './tenant-detail-enhanced.css';\rdayjs.extend(relativeTime);\rconst { Title, Text, Paragraph, Link } = Typography;\rconst { TabPane } = Tabs;\rconst { Option } = Select;\rconst { TextArea } = Input;\rconst { confirm } = Modal;\rinterface TenantDetailData {\r  id: string;\r  name: string;\r  code: string;\r  domain: string;\r  email: string;\r  phone: string;\r  address: string;\r  city: string;\r  country: string;\r  status: 'active' | 'suspended' | 'pending' | 'expired';\r  plan: string;\r  maxUsers: number;\r  currentUsers: number;\r  storage: {\r    used: number;\r    total: number;\r  };\r  createdAt: string;\r  expiresAt: string;\r  lastLogin: string;\r  modules: string[];\r  subscription: {\r    id: string;\r    plan: string;\r    price: number;\r    period: 'monthly' | 'yearly';\r    startDate: string;\r    endDate: string;\r    autoRenew: boolean;\r  };\r  billing: {\r    totalPaid: number;\r    outstandingBalance: number;\r    nextPayment: string;\r    paymentMethod: string;\r  };\r  usage: {\r    apiCalls: number;\r    bandwidth: number;\r    transactions: number;\r    emails: number;\r  };\r  admins: Array<{\r    id: string;\r    name: string;\r    email: string;\r    role: string;\r    lastLogin: string;\r  }>;\r}\rconst EnhancedTenantDetail: React.FC = () => {\r  const { id } = useParams<{ id: string }>();\r  const navigate = useNavigate();\r  const queryClient = useQueryClient();\r  const [activeTab, setActiveTab] = useState('overview');\r  const [editModalVisible, setEditModalVisible] = useState(false);\r  const [actionDrawerVisible, setActionDrawerVisible] = useState(false);\r  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\r  const [form] = Form.useForm();\r  // Fetch tenant data from API\r  const { data: apiTenant, isLoading: loading, error } = useQuery({\r    queryKey: ['tenant', id],\r    queryFn: () => masterTenantApi.getById(id!),\r    enabled: !!id,\r  });\r  // Fetch statistics\r  const { data: statistics } = useQuery({\r    queryKey: ['tenant-statistics', id],\r    queryFn: () => masterTenantApi.getStatistics(id!),\r    enabled: !!id,\r  });\r  // Map API data to component format\r  const tenant: TenantDetailData | null = useMemo(() => {\r    if (!apiTenant) return null;\r    return {\r      id: apiTenant.id,\r      name: apiTenant.name,\r      code: apiTenant.code,\r      domain: apiTenant.domain || '',\r      email: apiTenant.contactEmail || 'info@example.com',\r      phone: apiTenant.contactPhone || '',\r      address: apiTenant.address || '',\r      city: apiTenant.city || '',\r      country: apiTenant.country || 'Türkiye',\r      status: apiTenant.isActive ? 'active' : 'inactive',\r      plan: apiTenant.subscription?.packageName || 'Standart',\r      maxUsers: 100, // TODO: Get from package details\r      currentUsers: apiTenant.userCount || 0,\r      storage: {\r        used: statistics?.storageUsed || 0,\r        total: statistics?.storageTotal || 100,\r      },\r      createdAt: apiTenant.createdAt,\r      expiresAt: apiTenant.subscription?.endDate || new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),\r      lastLogin: apiTenant.updatedAt || apiTenant.createdAt,\r      modules: [], // TODO: Get from subscription modules\r      subscription: apiTenant.subscription ? {\r        id: apiTenant.subscription.id,\r        plan: apiTenant.subscription.packageName,\r        price: apiTenant.subscription.price,\r        period: 'monthly',\r        startDate: apiTenant.subscription.startDate,\r        endDate: apiTenant.subscription.endDate,\r        autoRenew: true,\r      } : {\r        id: 'N/A',\r        plan: 'No Subscription',\r        price: 0,\r        period: 'monthly',\r        startDate: apiTenant.createdAt,\r        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\r        autoRenew: false,\r      },\r      billing: {\r        totalPaid: 0,\r        outstandingBalance: 0,\r        nextPayment: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\r        paymentMethod: 'Kredi Kartı',\r      },\r      usage: {\r        apiCalls: statistics?.apiCallCount || 0,\r        bandwidth: statistics?.bandwidthUsed || 0,\r        transactions: statistics?.transactionCount || 0,\r        emails: statistics?.emailCount || 0,\r      },\r      admins: [],\r    };\r  }, [apiTenant, statistics]);\r  // Toggle status mutation\r  const toggleStatusMutation = useMutation({\r    mutationFn: () => masterTenantApi.toggleStatus(id!),\r    onSuccess: () => {\r      message.success('Kiracı durumu güncellendi');\r      queryClient.invalidateQueries({ queryKey: ['tenant', id] });\r    },\r    onError: () => {\r      message.error('Durum güncellenirken hata oluştu');\r    },\r  });\r  useEffect(() => {\r    if (error) {\r      message.error('Kiracı bilgileri yüklenemedi');\r      navigate('/master/tenants');\r    }\r  }, [error, navigate]);\r  const handleStatusChange = (checked: boolean) => {\r    confirm({\r      title: checked ? 'Kiracıyı Aktifleştir' : 'Kiracıyı Askıya Al',\r      icon: <ExclamationCircleOutlined />,\r      content: `Bu kiracıyı ${checked ? 'aktifleştirmek' : 'askıya almak'} istediğinize emin misiniz?`,\r      okText: 'Evet',\r      cancelText: 'İptal',\r      onOk() {\r        toggleStatusMutation.mutate();\r      },\r    });\r  };\r  const handleDelete = () => {\r    confirm({\r      title: 'Kiracıyı Sil',\r      icon: <ExclamationCircleOutlined />,\r      content: 'Bu işlem geri alınamaz. Tüm veriler silinecektir.',\r      okText: 'Sil',\r      okType: 'danger',\r      cancelText: 'İptal',\r      onOk() {\r        message.success('Kiracı silindi');\r        navigate('/master/tenants');\r      },\r    });\r  };\r  const getStatusColor = (status: string) => {\r    const colors = {\r      active: 'success',\r      suspended: 'warning',\r      pending: 'processing',\r      expired: 'error',\r    };\r    return colors[status as keyof typeof colors] || 'default';\r  };\r  const getStatusIcon = (status: string) => {\r    const icons = {\r      active: <CheckCircleOutlined />,\r      suspended: <WarningOutlined />,\r      pending: <SyncOutlined spin />,\r      expired: <CloseCircleOutlined />,\r    };\r    return icons[status as keyof typeof icons];\r  };\r  // Charts Configuration\r  const usageChartConfig = {\r    data: [\r      { date: '2024-01', value: 850000, type: 'API Calls' },\r      { date: '2024-01', value: 650, type: 'Bandwidth (GB)' },\r      { date: '2024-01', value: 35000, type: 'Transactions' },\r      { date: '2023-12', value: 920000, type: 'API Calls' },\r      { date: '2023-12', value: 720, type: 'Bandwidth (GB)' },\r      { date: '2023-12', value: 38000, type: 'Transactions' },\r      { date: '2023-11', value: 780000, type: 'API Calls' },\r      { date: '2023-11', value: 590, type: 'Bandwidth (GB)' },\r      { date: '2023-11', value: 32000, type: 'Transactions' },\r    ],\r    xField: 'date',\r    yField: 'value',\r    seriesField: 'type',\r    smooth: true,\r    animation: {\r      appear: {\r        animation: 'path-in',\r        duration: 1000,\r      },\r    },\r  };\r  const storageGaugeConfig = {\r    percent: tenant ? tenant.storage.used / tenant.storage.total : 0,\r    range: {\r      color: ['#30BF78', '#FAAD14', '#F4664A'],\r    },\r    indicator: {\r      pointer: {\r        style: {\r          stroke: '#D0D0D0',\r        },\r      },\r      pin: {\r        style: {\r          stroke: '#D0D0D0',\r        },\r      },\r    },\r    axis: {\r      label: {\r        formatter: (v: string) => {\r          return Number(v) * 100 + ' GB';\r        },\r      },\r    },\r    statistic: {\r      content: {\r        formatter: () => {\r          return tenant ? `${tenant.storage.used} / ${tenant.storage.total} GB` : '0 GB';\r        },\r        style: {\r          fontSize: '16px',\r        },\r      },\r    },\r  };\r  const actionMenu = (\r    <Menu>\r      <Menu.Item key=\"email\" icon={<MailOutlined />}>\r        Email Gönder\r      </Menu.Item>\r      <Menu.Item key=\"invoice\" icon={<FileTextOutlined />}>\r        Fatura Oluştur\r      </Menu.Item>\r      <Menu.Item key=\"backup\" icon={<CloudServerOutlined />}>\r        Yedek Al\r      </Menu.Item>\r      <Menu.Item key=\"reset\" icon={<KeyOutlined />}>\r        Şifre Sıfırla\r      </Menu.Item>\r      <Menu.Divider />\r      <Menu.Item key=\"export\" icon={<DownloadOutlined />}>\r        Verileri Dışa Aktar\r      </Menu.Item>\r      <Menu.Item key=\"audit\" icon={<FileTextOutlined />}>\r        Denetim Raporu\r      </Menu.Item>\r    </Menu>\r  );\r  if (loading) {\r    return (\r      <div className=\"tenant-detail-loading\">\r        <Card>\r          <Skeleton active paragraph={{ rows: 8 }} />\r        </Card>\r      </div>\r    );\r  }\r  if (!tenant) {\r    return (\r      <Card>\r        <Empty description=\"Kiracı bulunamadı\" />\r      </Card>\r    );\r  }\r  return (\r    <div className=\"enhanced-tenant-detail\">\r      {/* Header */}\r      <div className=\"detail-header\">\r        <div className=\"header-content\">\r          <Button \r            icon={<ArrowLeftOutlined />} \r            onClick={() = aria-label=\"arrow left outlined\"> navigate('/master/tenants')}\r            className=\"back-button\"\r          >\r            Geri\r          </Button>\r          <Breadcrumb>\r            <Breadcrumb.Item>Master</Breadcrumb.Item>\r            <Breadcrumb.Item>Kiracılar</Breadcrumb.Item>\r            <Breadcrumb.Item>{tenant.name}</Breadcrumb.Item>\r          </Breadcrumb>\r        </div>\r      </div>\r      {/* Tenant Header Card */}\r      <Card className=\"tenant-header-card\">\r        <Row gutter={[24, 24]} align=\"middle\">\r          <Col xs={24} sm={8} lg={6}>\r            <div className=\"tenant-avatar-section\">\r              <Avatar \r                size={120} \r                icon={<BankOutlined />}\r                className=\"tenant-avatar\"\r                style={{ \r                  background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r                }}\r              />\r              <div className=\"tenant-status-wrapper\">\r                <Badge \r                  status={getStatusColor(tenant.status) as any} \r                  text={\r                    <Tag \r                      color={getStatusColor(tenant.status)}\r                      icon={getStatusIcon(tenant.status)}\r                    >\r                      {tenant.status.toUpperCase()}\r                    </Tag>\r                  }\r                />\r              </div>\r            </div>\r          </Col>\r          <Col xs={24} sm={16} lg={12}>\r            <div className=\"tenant-info\">\r              <Title level={2}>{tenant.name}</Title>\r              <Space direction=\"vertical\" size=\"small\">\r                <Text type=\"secondary\">\r                  <GlobalOutlined /> {tenant.domain}\r                </Text>\r                <Text type=\"secondary\">\r                  <MailOutlined /> {tenant.email}\r                </Text>\r                <Text type=\"secondary\">\r                  <PhoneOutlined /> {tenant.phone}\r                </Text>\r                <Text type=\"secondary\">\r                  <EnvironmentOutlined /> {tenant.city}, {tenant.country}\r                </Text>\r              </Space>\r              <Divider />\r              <Space wrap>\r                <Tag color=\"blue\" icon={<AppstoreOutlined />}>\r                  {tenant.plan}\r                </Tag>\r                <Tag color=\"green\" icon={<TeamOutlined />}>\r                  {tenant.currentUsers}/{tenant.maxUsers} Kullanıcı\r                </Tag>\r                <Tag color=\"orange\" icon={<CalendarOutlined />}>\r                  {dayjs(tenant.expiresAt).format('DD/MM/YYYY')} tarihine kadar\r                </Tag>\r              </Space>\r            </div>\r          </Col>\r          <Col xs={24} lg={6}>\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <Button \r                type=\"primary\" \r                icon={<EditOutlined />}\r                block\r                onClick={() = aria-label=\"edit outlined\"> setEditModalVisible(true)}\r              >\r                Düzenle\r              </Button>\r              <Button \r                icon={<SettingOutlined />}\r                block\r                onClick={() = aria-label=\"setting outlined\"> setActionDrawerVisible(true)}\r              >\r                İşlemler\r              </Button>\r              <Dropdown overlay={actionMenu} trigger={['click']}>\r                <Button icon={<MoreOutlined />} block aria-label=\"more outlined\">\r                  Diğer\r                </Button>\r              </Dropdown>\r              <Divider />\r              <Space style={{ width: '100%', justifyContent: 'space-between' }}>\r                <Text>Durum</Text>\r                <Switch\r                  checked={tenant.status === 'active'}\r                  onChange={handleStatusChange}\r                  checkedChildren=\"Aktif\"\r                  unCheckedChildren=\"Pasif\"\r                />\r              </Space>\r            </Space>\r          </Col>\r        </Row>\r      </Card>\r      {/* Stats Cards */}\r      <Row gutter={[16, 16]} style={{ marginTop: 24 }}>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"stat-card\">\r            <Statistic\r              title=\"Toplam Ödeme\"\r              value={tenant.billing.totalPaid}\r              prefix=\"₺\"\r              valueStyle={{ color: '#52c41a' }}\r            />\r            <Progress percent={100} showInfo={false} strokeColor=\"#52c41a\" />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"stat-card\">\r            <Statistic\r              title=\"API Kullanımı\"\r              value={tenant.usage.apiCalls}\r              suffix=\"/ ay\"\r              valueStyle={{ color: '#1890ff' }}\r            />\r            <Progress percent={75} showInfo={false} strokeColor=\"#1890ff\" />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"stat-card\">\r            <Statistic\r              title=\"Depolama\"\r              value={tenant.storage.used}\r              suffix={`/ ${tenant.storage.total} GB`}\r              valueStyle={{ color: '#faad14' }}\r            />\r            <Progress \r              percent={(tenant.storage.used / tenant.storage.total) * 100} \r              showInfo={false} \r              strokeColor=\"#faad14\" \r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"stat-card\">\r            <Statistic\r              title=\"Aktif Modül\"\r              value={tenant.modules.length}\r              suffix=\"/ 10\"\r              valueStyle={{ color: '#722ed1' }}\r            />\r            <Progress \r              percent={(tenant.modules.length / 10) * 100} \r              showInfo={false} \r              strokeColor=\"#722ed1\" \r            />\r          </Card>\r        </Col>\r      </Row>\r      {/* Main Content Tabs */}\r      <Card style={{ marginTop: 24 }}>\r        <Tabs activeKey={activeTab} onChange={setActiveTab}>\r          <TabPane \r            tab={\r              <span>\r                <InfoCircleOutlined />\r                Genel Bilgiler\r              </span>\r            } \r            key=\"overview\"\r          >\r            <Row gutter={[24, 24]}>\r              <Col xs={24} lg={12}>\r                <Card title=\"Temel Bilgiler\" className=\"info-card\">\r                  <Descriptions column={1} bordered>\r                    <Descriptions.Item label=\"Şirket Kodu\">{tenant.code}</Descriptions.Item>\r                    <Descriptions.Item label=\"Domain\">{tenant.domain}</Descriptions.Item>\r                    <Descriptions.Item label=\"Kayıt Tarihi\">\r                      {dayjs(tenant.createdAt).format('DD/MM/YYYY HH:mm')}\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Son Giriş\">\r                      {dayjs(tenant.lastLogin).fromNow()}\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Adres\">\r                      {tenant.address}\r                    </Descriptions.Item>\r                  </Descriptions>\r                </Card>\r              </Col>\r              <Col xs={24} lg={12}>\r                <Card title=\"Abonelik Bilgileri\" className=\"info-card\">\r                  <Descriptions column={1} bordered>\r                    <Descriptions.Item label=\"Plan\">{tenant.subscription.plan}</Descriptions.Item>\r                    <Descriptions.Item label=\"Fiyat\">\r                      ₺{tenant.subscription.price} / {tenant.subscription.period === 'monthly' ? 'Ay' : 'Yıl'}\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Başlangıç\">\r                      {dayjs(tenant.subscription.startDate).format('DD/MM/YYYY')}\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Bitiş\">\r                      {dayjs(tenant.subscription.endDate).format('DD/MM/YYYY')}\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Otomatik Yenileme\">\r                      <Switch checked={tenant.subscription.autoRenew} disabled />\r                    </Descriptions.Item>\r                  </Descriptions>\r                </Card>\r              </Col>\r            </Row>\r            <Card title=\"Aktif Modüller\" style={{ marginTop: 24 }}>\r              <Space wrap size=\"large\">\r                {tenant.modules.map(module => (\r                  <Tag \r                    key={module}\r                    color=\"blue\"\r                    icon={<AppstoreOutlined />}\r                    style={{ padding: '8px 16px', fontSize: '14px' }}\r                  >\r                    {module}\r                  </Tag>\r                ))}\r              </Space>\r            </Card>\r          </TabPane>\r          <TabPane \r            tab={\r              <span>\r                <TeamOutlined />\r                Kullanıcılar\r              </span>\r            } \r            key=\"users\"\r          >\r            <Table\r              columns={[\r                {\r                  title: 'Ad Soyad',\r                  dataIndex: 'name',\r                  key: 'name',\r                  render: (text: string) => (\r                    <Space>\r                      <Avatar icon={<UserOutlined />} />\r                      {text}\r                    </Space>\r                  ),\r                },\r                {\r                  title: 'Email',\r                  dataIndex: 'email',\r                  key: 'email',\r                },\r                {\r                  title: 'Rol',\r                  dataIndex: 'role',\r                  key: 'role',\r                  render: (role: string) => (\r                    <Tag color={role === 'Süper Admin' ? 'red' : 'blue'}>{role}</Tag>\r                  ),\r                },\r                {\r                  title: 'Son Giriş',\r                  dataIndex: 'lastLogin',\r                  key: 'lastLogin',\r                  render: (date: string) => dayjs(date).fromNow(),\r                },\r                {\r                  title: 'İşlemler',\r                  key: 'actions',\r                  render: () => (\r                    <Space>\r                      <Button size=\"small\" icon={<EditOutlined />} / aria-label=\"edit outlined\">\r                      <Button size=\"small\" icon={<DeleteOutlined />} danger / aria-label=\"delete outlined\">\r                    </Space>\r                  ),\r                },\r              ]}\r              dataSource={tenant.admins}\r              rowKey=\"id\"\r            />\r          </TabPane>\r          <TabPane \r            tab={\r              <span>\r                <LineChartOutlined />\r                Kullanım\r              </span>\r            } \r            key=\"usage\"\r          >\r            <Row gutter={[24, 24]}>\r              <Col xs={24} lg={16}>\r                <Card title=\"Aylık Kullanım Trendleri\">\r                  <Line {...usageChartConfig} height={300} />\r                </Card>\r              </Col>\r              <Col xs={24} lg={8}>\r                <Card title=\"Depolama Kullanımı\">\r                  <Gauge {...storageGaugeConfig} height={200} />\r                </Card>\r                <Card title=\"Kullanım Özeti\" style={{ marginTop: 24 }}>\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <div className=\"usage-item\">\r                      <Text>API Çağrıları</Text>\r                      <Text strong>{tenant.usage.apiCalls.toLocaleString()}</Text>\r                    </div>\r                    <div className=\"usage-item\">\r                      <Text>Bant Genişliği</Text>\r                      <Text strong>{tenant.usage.bandwidth} GB</Text>\r                    </div>\r                    <div className=\"usage-item\">\r                      <Text>İşlemler</Text>\r                      <Text strong>{tenant.usage.transactions.toLocaleString()}</Text>\r                    </div>\r                    <div className=\"usage-item\">\r                      <Text>Email</Text>\r                      <Text strong>{tenant.usage.emails.toLocaleString()}</Text>\r                    </div>\r                  </Space>\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          <TabPane \r            tab={\r              <span>\r                <DollarOutlined />\r                Faturalama\r              </span>\r            } \r            key=\"billing\"\r          >\r            <Alert\r              message=\"Ödeme Durumu\"\r              description=\"Tüm ödemeler güncel. Bir sonraki ödeme tarihi: 15/02/2024\"\r              type=\"success\"\r              showIcon\r              style={{ marginBottom: 24 }}\r            />\r            <Card title=\"Ödeme Geçmişi\">\r              <Table\r                columns={[\r                  {\r                    title: 'Fatura No',\r                    dataIndex: 'invoiceNo',\r                    key: 'invoiceNo',\r                  },\r                  {\r                    title: 'Tarih',\r                    dataIndex: 'date',\r                    key: 'date',\r                  },\r                  {\r                    title: 'Tutar',\r                    dataIndex: 'amount',\r                    key: 'amount',\r                    render: (amount: number) => `₺${amount}`,\r                  },\r                  {\r                    title: 'Durum',\r                    dataIndex: 'status',\r                    key: 'status',\r                    render: (status: string) => (\r                      <Tag color={status === 'paid' ? 'success' : 'warning'}>\r                        {status === 'paid' ? 'Ödendi' : 'Bekliyor'}\r                      </Tag>\r                    ),\r                  },\r                  {\r                    title: 'İşlemler',\r                    key: 'actions',\r                    render: () => (\r                      <Space>\r                        <Button size=\"small\" icon={<EyeOutlined />} aria-label=\"eye outlined\">Görüntüle</Button>\r                        <Button size=\"small\" icon={<DownloadOutlined />} aria-label=\"download outlined\">İndir</Button>\r                      </Space>\r                    ),\r                  },\r                ]}\r                dataSource={[\r                  { invoiceNo: 'INV-2024-001', date: '15/01/2024', amount: 2999, status: 'paid' },\r                  { invoiceNo: 'INV-2023-012', date: '15/12/2023', amount: 2999, status: 'paid' },\r                  { invoiceNo: 'INV-2023-011', date: '15/11/2023', amount: 2999, status: 'paid' },\r                ]}\r                rowKey=\"invoiceNo\"\r              />\r            </Card>\r          </TabPane>\r          <TabPane \r            tab={\r              <span>\r                <HistoryOutlined />\r                Aktivite Geçmişi\r              </span>\r            } \r            key=\"activity\"\r          >\r            <Timeline mode=\"left\">\r              <Timeline.Item \r                color=\"green\" \r                label={dayjs().subtract(2, 'hours').format('DD/MM/YYYY HH:mm')}\r              >\r                Yeni kullanıcı eklendi: Mehmet Öz\r              </Timeline.Item>\r              <Timeline.Item \r                color=\"blue\" \r                label={dayjs().subtract(1, 'days').format('DD/MM/YYYY HH:mm')}\r              >\r                API limiti güncellendi: 2M → 3M\r              </Timeline.Item>\r              <Timeline.Item \r                color=\"orange\" \r                label={dayjs().subtract(3, 'days').format('DD/MM/YYYY HH:mm')}\r              >\r                Fatura ödendi: ₺2999\r              </Timeline.Item>\r              <Timeline.Item \r                color=\"red\" \r                label={dayjs().subtract(5, 'days').format('DD/MM/YYYY HH:mm')}\r              >\r                Şifre sıfırlama talebi\r              </Timeline.Item>\r              <Timeline.Item \r                label={dayjs().subtract(7, 'days').format('DD/MM/YYYY HH:mm')}\r              >\r                CRM modülü aktifleştirildi\r              </Timeline.Item>\r            </Timeline>\r          </TabPane>\r        </Tabs>\r      </Card>\r      {/* Edit Modal */}\r      <Modal\r        title=\"Kiracı Bilgilerini Düzenle\"\r        visible={editModalVisible}\r        onCancel={() => setEditModalVisible(false)}\r        footer={[\r          <Button key=\"cancel\" onClick={() => setEditModalVisible(false)}>\r            İptal\r          </Button>,\r          <Button key=\"save\" type=\"primary\" icon={<SaveOutlined />} aria-label=\"save outlined\">\r            Kaydet\r          </Button>,\r        ]}\r        width={700}\r      >\r        <Form form={form} layout=\"vertical\">\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Şirket Adı\" name=\"name\">\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Şirket Kodu\" name=\"code\">\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Email\" name=\"email\">\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Telefon\" name=\"phone\">\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item label=\"Adres\" name=\"address\">\r            <TextArea rows={3} />\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Action Drawer */}\r      <Drawer\r        title=\"Hızlı İşlemler\"\r        placement=\"right\"\r        onClose={() => setActionDrawerVisible(false)}\r        visible={actionDrawerVisible}\r        width={400}\r      >\r        <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\r          <Button type=\"primary\" icon={<MailOutlined />} block aria-label=\"mail outlined\">\r            Email Gönder\r          </Button>\r          <Button icon={<FileTextOutlined />} block aria-label=\"file text outlined\">\r            Fatura Oluştur\r          </Button>\r          <Button icon={<CloudServerOutlined />} block aria-label=\"cloud server outlined\">\r            Yedek Al\r          </Button>\r          <Button icon={<KeyOutlined />} block aria-label=\"key outlined\">\r            Şifre Sıfırla\r          </Button>\r          <Button icon={<BellOutlined />} block aria-label=\"bell outlined\">\r            Bildirim Gönder\r          </Button>\r          <Divider />\r          <Button danger icon={<DeleteOutlined />} block onClick={handleDelete} aria-label=\"delete outlined\">\r            Kiracıyı Sil\r          </Button>\r        </Space>\r      </Drawer>\r    </div>\r  );\r};\rexport default EnhancedTenantDetail;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/TenantDetail/EnhancedTenantDetail.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { useParams, useNavigate } from 'react-router-dom';\rimport {\r  Row,\r  Col,\r  Card,\r  Tabs,\r  Descriptions,\r  Table,\r  Tag,\r  Button,\r  Space,\r  Typography,\r  Timeline,\r  Avatar,\r  Badge,\r  Statistic,\r  Progress,\r  Switch,\r  Modal,\r  Form,\r  Input,\r  Select,\r  DatePicker,\r  message,\r  Tooltip,\r  Divider,\r  List,\r  Result,\r  Skeleton,\r  Alert,\r} from 'antd';\rimport {\r  ArrowLeftOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  LockOutlined,\r  UnlockOutlined,\r  UserOutlined,\r  TeamOutlined,\r  AppstoreOutlined,\r  DollarOutlined,\r  CalendarOutlined,\r  HistoryOutlined,\r  SettingOutlined,\r  CreditCardOutlined,\r  FileTextOutlined,\r  CloudServerOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  WarningOutlined,\r  InfoCircleOutlined,\r  RiseOutlined,\r  FallOutlined,\r  SyncOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  GlobalOutlined,\r  SafetyOutlined,\r} from '@ant-design/icons';\rimport { Area, Column, Pie } from '@ant-design/charts';\rimport { tenantsApi } from '@/shared/api/tenants.api';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst { Option } = Select;\rinterface TenantDetails {\r  id: string;\r  name: string;\r  code: string;\r  domain: string;\r  email: string;\r  phone: string;\r  status: 'active' | 'suspended' | 'pending';\r  plan: string;\r  maxUsers: number;\r  currentUsers: number;\r  storage: {\r    used: number;\r    total: number;\r  };\r  createdAt: Date;\r  expiresAt: Date;\r  lastLogin: Date;\r  modules: string[];\r  subscription: {\r    id: string;\r    plan: string;\r    price: number;\r    period: 'monthly' | 'yearly';\r    startDate: Date;\r    endDate: Date;\r    autoRenew: boolean;\r  };\r  billing: {\r    totalPaid: number;\r    totalDue: number;\r    lastPayment: Date;\r    nextPayment: Date;\r  };\r}\rconst TenantDetail: React.FC = () => {\r  const { id } = useParams<{ id: string }>();\r  const navigate = useNavigate();\r  const [loading, setLoading] = useState(true);\r  const [tenant, setTenant] = useState<TenantDetails | null>(null);\r  const [activeTab, setActiveTab] = useState('overview');\r  const [editModalVisible, setEditModalVisible] = useState(false);\r  const [form] = Form.useForm();\r  useEffect(() => {\r    if (id) {\r      fetchTenantDetails(id);\r    }\r  }, [id]);\r  const fetchTenantDetails = async (tenantId: string) => {\r    try {\r      setLoading(true);\r      const response = await tenantsApi.getById(tenantId);\r      if (response.data?.success && response.data?.data) {\r        // Mock additional data for demonstration\r        const tenantData = {\r          ...response.data.data,\r          storage: {\r            used: 3.2,\r            total: 10,\r          },\r          currentUsers: 15,\r          lastLogin: new Date(),\r          subscription: {\r            id: 'sub-1',\r            plan: response.data.data.plan || 'Professional',\r            price: 299,\r            period: 'monthly' as const,\r            startDate: new Date(response.data.data.createdAt),\r            endDate: new Date(response.data.data.expiresAt || Date.now() + 30 * 24 * 60 * 60 * 1000),\r            autoRenew: true,\r          },\r          billing: {\r            totalPaid: 2990,\r            totalDue: 0,\r            lastPayment: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\r            nextPayment: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\r          },\r        };\r        setTenant(tenantData);\r        form.setFieldsValue(tenantData);\r      }\r    } catch (error) {\r      message.error('Tenant detayları yüklenemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleEdit = async (values: any) => {\r    try {\r      const response = await tenantsApi.update(id!, values);\r      if (response.data?.success) {\r        message.success('Tenant başarıyla güncellendi');\r        setEditModalVisible(false);\r        fetchTenantDetails(id!);\r      }\r    } catch (error) {\r      message.error('Tenant güncellenemedi');\r    }\r  };\r  const handleDelete = () => {\r    Modal.confirm({\r      title: 'Tenant Sil',\r      content: 'Bu tenant\\'ı silmek istediğinizden emin misiniz? Bu işlem geri alınamaz.',\r      okText: 'Sil',\r      okType: 'danger',\r      cancelText: 'İptal',\r      onOk: async () => {\r        try {\r          const response = await tenantsApi.delete(id!);\r          if (response.data?.success) {\r            message.success('Tenant başarıyla silindi');\r            navigate('/master/tenants');\r          }\r        } catch (error) {\r          message.error('Tenant silinemedi');\r        }\r      },\r    });\r  };\r  const handleToggleStatus = async () => {\r    try {\r      const response = await tenantsApi.toggleStatus(id!);\r      if (response.data?.success) {\r        message.success('Tenant durumu güncellendi');\r        fetchTenantDetails(id!);\r      }\r    } catch (error) {\r      message.error('Tenant durumu güncellenemedi');\r    }\r  };\r  if (loading) {\r    return (\r      <div className=\"tenant-detail-page\">\r        <Card>\r          <Skeleton active paragraph={{ rows: 8 }} />\r        </Card>\r      </div>\r    );\r  }\r  if (!tenant) {\r    return (\r      <div className=\"tenant-detail-page\">\r        <Result\r          status=\"404\"\r          title=\"Tenant Bulunamadı\"\r          subTitle=\"Aradığınız tenant mevcut değil veya silinmiş olabilir.\"\r          extra={\r            <Button type=\"primary\" onClick={() => navigate('/master/tenants')}>\r              Tenant Listesine Dön\r            </Button>\r          }\r        />\r      </div>\r    );\r  }\r  // Revenue chart data\r  const revenueData = [\r    { month: 'Oca', revenue: 299 },\r    { month: 'Şub', revenue: 299 },\r    { month: 'Mar', revenue: 299 },\r    { month: 'Nis', revenue: 299 },\r    { month: 'May', revenue: 299 },\r    { month: 'Haz', revenue: 299 },\r  ];\r  const revenueConfig = {\r    data: revenueData,\r    xField: 'month',\r    yField: 'revenue',\r    height: 200,\r    smooth: true,\r    color: '#667eea',\r  };\r  // User activity data\r  const userActivityData = [\r    { date: '01', users: 12 },\r    { date: '02', users: 15 },\r    { date: '03', users: 10 },\r    { date: '04', users: 18 },\r    { date: '05', users: 14 },\r    { date: '06', users: 16 },\r    { date: '07', users: 13 },\r  ];\r  const activityConfig = {\r    data: userActivityData,\r    xField: 'date',\r    yField: 'users',\r    height: 200,\r    columnStyle: {\r      radius: [8, 8, 0, 0],\r    },\r  };\r  // Module usage data\r  const moduleData = [\r    { type: 'CRM', value: 45 },\r    { type: 'Stok', value: 30 },\r    { type: 'Muhasebe', value: 20 },\r    { type: 'İK', value: 5 },\r  ];\r  const moduleConfig = {\r    data: moduleData,\r    angleField: 'value',\r    colorField: 'type',\r    radius: 0.8,\r    innerRadius: 0.6,\r    height: 200,\r  };\r  // User list columns\r  const userColumns = [\r    {\r      title: 'Kullanıcı',\r      dataIndex: 'name',\r      key: 'name',\r      render: (name: string, record: any) => (\r        <Space>\r          <Avatar icon={<UserOutlined />} />\r          <div>\r            <div>{name}</div>\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>{record.email}</Text>\r          </div>\r        </Space>\r      ),\r    },\r    {\r      title: 'Rol',\r      dataIndex: 'role',\r      key: 'role',\r      render: (role: string) => (\r        <Tag color={role === 'Admin' ? 'red' : 'blue'}>{role}</Tag>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status: string) => (\r        <Badge status={status === 'active' ? 'success' : 'default'} text={status === 'active' ? 'Aktif' : 'Pasif'} />\r      ),\r    },\r    {\r      title: 'Son Giriş',\r      dataIndex: 'lastLogin',\r      key: 'lastLogin',\r      render: (date: Date) => new Date(date).toLocaleDateString('tr-TR'),\r    },\r  ];\r  const mockUsers = [\r    { key: '1', name: 'John Doe', email: 'john@company.com', role: 'Admin', status: 'active', lastLogin: new Date() },\r    { key: '2', name: 'Jane Smith', email: 'jane@company.com', role: 'User', status: 'active', lastLogin: new Date() },\r    { key: '3', name: 'Bob Wilson', email: 'bob@company.com', role: 'User', status: 'inactive', lastLogin: new Date() },\r  ];\r  return (\r    <div className=\"tenant-detail-page\">\r      {/* Header */}\r      <Card className=\"header-card\">\r        <Row align=\"middle\" justify=\"space-between\">\r          <Col>\r            <Space align=\"center\" size=\"large\">\r              <Button\r                icon={<ArrowLeftOutlined />}\r                onClick={() = aria-label=\"arrow left outlined\"> navigate('/master/tenants')}\r              >\r                Geri\r              </Button>\r              <Avatar \r                size={64} \r                style={{ backgroundColor: '#667eea' }}\r                icon={<TeamOutlined />}\r              >\r                {tenant.name.substring(0, 2).toUpperCase()}\r              </Avatar>\r              <div>\r                <Title level={3} style={{ margin: 0 }}>{tenant.name}</Title>\r                <Space>\r                  <Tag color={tenant.status === 'active' ? 'success' : 'error'}>\r                    {tenant.status === 'active' ? 'Aktif' : 'Askıda'}\r                  </Tag>\r                  <Tag color=\"blue\">{tenant.plan}</Tag>\r                  <Text type=\"secondary\">Kod: {tenant.code}</Text>\r                </Space>\r              </div>\r            </Space>\r          </Col>\r          <Col>\r            <Space>\r              <Tooltip title={tenant.status === 'active' ? 'Askıya Al' : 'Aktifleştir'}>\r                <Button\r                  icon={tenant.status === 'active' ? <LockOutlined /> : <UnlockOutlined />}\r                  onClick={handleToggleStatus}\r                 aria-label=\"button\">\r                  {tenant.status === 'active' ? 'Askıya Al' : 'Aktifleştir'}\r                </Button>\r              </Tooltip>\r              <Button \r                type=\"primary\" \r                icon={<EditOutlined />}\r                onClick={() = aria-label=\"edit outlined\"> setEditModalVisible(true)}\r              >\r                Düzenle\r              </Button>\r              <Button \r                danger \r                icon={<DeleteOutlined />}\r                onClick={handleDelete}\r               aria-label=\"delete outlined\">\r                Sil\r              </Button>\r            </Space>\r          </Col>\r        </Row>\r      </Card>\r      {/* Stats Cards */}\r      <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Kullanıcılar\"\r              value={tenant.currentUsers}\r              suffix={`/ ${tenant.maxUsers}`}\r              prefix={<UserOutlined />}\r              valueStyle={{ color: '#667eea' }}\r            />\r            <Progress \r              percent={(tenant.currentUsers / tenant.maxUsers) * 100} \r              showInfo={false}\r              strokeColor=\"#667eea\"\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Depolama\"\r              value={tenant.storage.used}\r              suffix={`/ ${tenant.storage.total} GB`}\r              prefix={<DatabaseOutlined />}\r              valueStyle={{ color: '#52c41a' }}\r            />\r            <Progress \r              percent={(tenant.storage.used / tenant.storage.total) * 100} \r              showInfo={false}\r              strokeColor=\"#52c41a\"\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Aylık Ödeme\"\r              value={tenant.subscription.price}\r              prefix=\"₺\"\r              suffix=\"/ ay\"\r              valueStyle={{ color: '#faad14' }}\r            />\r            <Text type=\"secondary\">Sonraki: {tenant.billing.nextPayment.toLocaleDateString('tr-TR')}</Text>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Toplam Ödeme\"\r              value={tenant.billing.totalPaid}\r              prefix=\"₺\"\r              valueStyle={{ color: '#13c2c2' }}\r            />\r            <Text type=\"secondary\">Son: {tenant.billing.lastPayment.toLocaleDateString('tr-TR')}</Text>\r          </Card>\r        </Col>\r      </Row>\r      {/* Main Content */}\r      <Card style={{ marginTop: 16 }}>\r        <Tabs activeKey={activeTab} onChange={setActiveTab}>\r          <TabPane tab={<span><InfoCircleOutlined /> Genel Bilgiler</span>} key=\"overview\">\r            <Row gutter={[24, 24]}>\r              <Col xs={24} lg={12}>\r                <Card title=\"Tenant Bilgileri\" size=\"small\">\r                  <Descriptions column={1} size=\"small\">\r                    <Descriptions.Item label=\"Tenant Adı\">{tenant.name}</Descriptions.Item>\r                    <Descriptions.Item label=\"Tenant Kodu\">{tenant.code}</Descriptions.Item>\r                    <Descriptions.Item label=\"Domain\">\r                      <a href={`https://${tenant.domain}`} target=\"_blank\" rel=\"noopener noreferrer\">\r                        {tenant.domain} <GlobalOutlined />\r                      </a>\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"E-posta\">\r                      <Space>\r                        <MailOutlined />\r                        {tenant.email}\r                      </Space>\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Telefon\">\r                      <Space>\r                        <PhoneOutlined />\r                        {tenant.phone}\r                      </Space>\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Oluşturma Tarihi\">\r                      {new Date(tenant.createdAt).toLocaleDateString('tr-TR')}\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Son Giriş\">\r                      {new Date(tenant.lastLogin).toLocaleDateString('tr-TR')}\r                    </Descriptions.Item>\r                  </Descriptions>\r                </Card>\r              </Col>\r              <Col xs={24} lg={12}>\r                <Card title=\"Abonelik Bilgileri\" size=\"small\">\r                  <Descriptions column={1} size=\"small\">\r                    <Descriptions.Item label=\"Plan\">{tenant.subscription.plan}</Descriptions.Item>\r                    <Descriptions.Item label=\"Ücret\">\r                      ₺{tenant.subscription.price} / {tenant.subscription.period === 'monthly' ? 'Ay' : 'Yıl'}\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Başlangıç\">\r                      {tenant.subscription.startDate.toLocaleDateString('tr-TR')}\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Bitiş\">\r                      {tenant.subscription.endDate.toLocaleDateString('tr-TR')}\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Otomatik Yenileme\">\r                      <Switch checked={tenant.subscription.autoRenew} disabled />\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Modüller\">\r                      {tenant.modules.map(module => (\r                        <Tag key={module} color=\"blue\">{module}</Tag>\r                      ))}\r                    </Descriptions.Item>\r                  </Descriptions>\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          <TabPane tab={<span><UserOutlined /> Kullanıcılar</span>} key=\"users\">\r            <Card \r              title={`Kullanıcılar (${tenant.currentUsers} / ${tenant.maxUsers})`}\r              extra={\r                <Button type=\"primary\" icon={<UserOutlined />} aria-label=\"user outlined\">\r                  Kullanıcı Ekle\r                </Button>\r              }\r            >\r              <Table\r                columns={userColumns}\r                dataSource={mockUsers}\r                pagination={{ pageSize: 10 }}\r              />\r            </Card>\r          </TabPane>\r          <TabPane tab={<span><BarChartOutlined /> Analitik</span>} key=\"analytics\">\r            <Row gutter={[16, 16]}>\r              <Col xs={24} lg={8}>\r                <Card title=\"Gelir Trendi\" size=\"small\">\r                  <Area {...revenueConfig} />\r                </Card>\r              </Col>\r              <Col xs={24} lg={8}>\r                <Card title=\"Kullanıcı Aktivitesi\" size=\"small\">\r                  <Column {...activityConfig} />\r                </Card>\r              </Col>\r              <Col xs={24} lg={8}>\r                <Card title=\"Modül Kullanımı\" size=\"small\">\r                  <Pie {...moduleConfig} />\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          <TabPane tab={<span><HistoryOutlined /> Aktivite Geçmişi</span>} key=\"activity\">\r            <Timeline mode=\"left\">\r              <Timeline.Item color=\"green\" label=\"Bugün\">\r                Admin girişi yapıldı\r              </Timeline.Item>\r              <Timeline.Item color=\"blue\" label=\"2 gün önce\">\r                Yeni kullanıcı eklendi: Jane Smith\r              </Timeline.Item>\r              <Timeline.Item label=\"5 gün önce\">\r                Abonelik yenilendi\r              </Timeline.Item>\r              <Timeline.Item color=\"red\" label=\"1 hafta önce\">\r                Ödeme başarısız\r              </Timeline.Item>\r              <Timeline.Item label=\"2 hafta önce\">\r                Plan güncellendi: Professional → Enterprise\r              </Timeline.Item>\r            </Timeline>\r          </TabPane>\r          <TabPane tab={<span><CreditCardOutlined /> Ödemeler</span>} key=\"payments\">\r            <Alert\r              message=\"Ödeme Durumu\"\r              description=\"Tüm ödemeler güncel. Sonraki ödeme tarihi: 5 gün sonra.\"\r              type=\"success\"\r              showIcon\r              style={{ marginBottom: 16 }}\r            />\r            <Table\r              columns={[\r                { title: 'Tarih', dataIndex: 'date', key: 'date' },\r                { title: 'Açıklama', dataIndex: 'description', key: 'description' },\r                { title: 'Tutar', dataIndex: 'amount', key: 'amount', render: (amount: number) => `₺${amount}` },\r                { \r                  title: 'Durum', \r                  dataIndex: 'status', \r                  key: 'status',\r                  render: (status: string) => (\r                    <Tag color={status === 'paid' ? 'success' : 'error'}>\r                      {status === 'paid' ? 'Ödendi' : 'Bekliyor'}\r                    </Tag>\r                  )\r                },\r              ]}\r              dataSource={[\r                { key: '1', date: '01.12.2024', description: 'Aylık abonelik', amount: 299, status: 'paid' },\r                { key: '2', date: '01.11.2024', description: 'Aylık abonelik', amount: 299, status: 'paid' },\r                { key: '3', date: '01.10.2024', description: 'Aylık abonelik', amount: 299, status: 'paid' },\r              ]}\r            />\r          </TabPane>\r          <TabPane tab={<span><SettingOutlined /> Ayarlar</span>} key=\"settings\">\r            <Row gutter={[16, 16]}>\r              <Col xs={24} lg={12}>\r                <Card title=\"Limit Ayarları\" size=\"small\">\r                  <Form layout=\"vertical\">\r                    <Form.Item label=\"Maksimum Kullanıcı\">\r                      <Input type=\"number\" value={tenant.maxUsers} / aria-label=\"input field\">\r                    </Form.Item>\r                    <Form.Item label=\"Maksimum Depolama (GB)\">\r                      <Input type=\"number\" value={tenant.storage.total} / aria-label=\"input field\">\r                    </Form.Item>\r                    <Form.Item label=\"API Rate Limit\">\r                      <Input value=\"1000 req/hour\" / aria-label=\"input field\">\r                    </Form.Item>\r                    <Form.Item>\r                      <Button type=\"primary\">Kaydet</Button>\r                    </Form.Item>\r                  </Form>\r                </Card>\r              </Col>\r              <Col xs={24} lg={12}>\r                <Card title=\"Güvenlik Ayarları\" size=\"small\">\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                      <Text>İki Faktörlü Doğrulama</Text>\r                      <Switch defaultChecked />\r                    </div>\r                    <Divider />\r                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                      <Text>IP Kısıtlaması</Text>\r                      <Switch />\r                    </div>\r                    <Divider />\r                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                      <Text>SSO Entegrasyonu</Text>\r                      <Switch />\r                    </div>\r                    <Divider />\r                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                      <Text>API Erişimi</Text>\r                      <Switch defaultChecked />\r                    </div>\r                  </Space>\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r        </Tabs>\r      </Card>\r      {/* Edit Modal */}\r      <Modal\r        title=\"Tenant Düzenle\"\r        open={editModalVisible}\r        onCancel={() => setEditModalVisible(false)}\r        footer={null}\r        width={600}\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleEdit}\r        >\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"name\"\r                label=\"Tenant Adı\"\r                rules={[{ required: true, message: 'Tenant adı gerekli' }]}\r              >\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"code\"\r                label=\"Tenant Kodu\"\r                rules={[{ required: true, message: 'Tenant kodu gerekli' }]}\r              >\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"email\"\r                label=\"E-posta\"\r                rules={[\r                  { required: true, message: 'E-posta gerekli' },\r                  { type: 'email', message: 'Geçerli bir e-posta girin' }\r                ]}\r              >\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"phone\"\r                label=\"Telefon\"\r                rules={[{ required: true, message: 'Telefon gerekli' }]}\r              >\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"plan\"\r                label=\"Plan\"\r                rules={[{ required: true, message: 'Plan seçimi gerekli' }]}\r              >\r                <Select aria-label=\"select field\">\r                  <Option value=\"Free\">Free</Option>\r                  <Option value=\"Starter\">Starter</Option>\r                  <Option value=\"Professional\">Professional</Option>\r                  <Option value=\"Enterprise\">Enterprise</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"maxUsers\"\r                label=\"Maksimum Kullanıcı\"\r                rules={[{ required: true, message: 'Maksimum kullanıcı sayısı gerekli' }]}\r              >\r                <Input type=\"number\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item>\r            <Space>\r              <Button type=\"primary\" htmlType=\"submit\">\r                Güncelle\r              </Button>\r              <Button onClick={() => setEditModalVisible(false)}>\r                İptal\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r    </div>\r  );\r};\rexport default TenantDetail;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/TenantDetail/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect, useCallback, useMemo } from 'react';\rimport { useNavigate, useLocation } from 'react-router-dom';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport {\r  Row,\r  Col,\r  Card,\r  Table,\r  Button,\r  Space,\r  Tag,\r  Avatar,\r  Typography,\r  Input,\r  Select,\r  DatePicker,\r  Dropdown,\r  Modal,\r  Form,\r  Switch,\r  Badge,\r  Tooltip,\r  Divider,\r  Tabs,\r  Statistic,\r  Progress,\r  Timeline,\r  List,\r  message,\r  notification,\r  Drawer,\r  Segmented,\r  Empty,\r  Result,\r  Alert,\r  Popconfirm,\r  Upload,\r  Radio,\r  Checkbox,\r  InputNumber,\r  Skeleton,\r} from 'antd';\rimport { VirtualList } from '@/shared/components/VirtualList';\rimport { VirtualTable } from '@/shared/components/VirtualTable';\rimport {\r  TeamOutlined,\r  UserOutlined,\r  PlusOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  SearchOutlined,\r  FilterOutlined,\r  ExportOutlined,\r  ImportOutlined,\r  ReloadOutlined,\r  MoreOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  ClockCircleOutlined,\r  InfoCircleOutlined,\r  WarningOutlined,\r  LockOutlined,\r  UnlockOutlined,\r  LoginOutlined,\r  SettingOutlined,\r  EyeOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  GlobalOutlined,\r  CalendarOutlined,\r  DollarOutlined,\r  CrownOutlined,\r  FireOutlined,\r  RocketOutlined,\r  ThunderboltOutlined,\r  SafetyOutlined,\r  DatabaseOutlined,\r  CloudServerOutlined,\r  ApiOutlined,\r  AppstoreOutlined,\r  BarsOutlined,\r  CopyOutlined,\r  DownloadOutlined,\r  SyncOutlined,\r  StarOutlined,\r  HeartOutlined,\r  CommentOutlined,\r  ShareAltOutlined,\r  FolderOpenOutlined,\r  FileTextOutlined,\r  PaperClipOutlined,\r  BellOutlined,\r  QuestionCircleOutlined,\r} from '@ant-design/icons';\rimport { Line, Column, Pie, TinyLine, TinyColumn, Progress as TinyProgress } from '@ant-design/plots';\rimport CountUp from 'react-countup';\rimport '../../styles/master-inputs.css';\rimport '../../styles/master-layout.css';\rimport './tenants.css';\rimport { tenantsApi } from '@/shared/api/tenants.api';\rimport { Tenant as ApiTenant } from '@/shared/types';\rconst { Title, Text, Paragraph } = Typography;\rconst { Search } = Input;\rconst { RangePicker } = DatePicker;\rconst { TabPane } = Tabs;\rconst { Meta } = Card;\rconst { Option } = Select;\r// Types\rinterface Tenant {\r  id: string;\r  name: string;\r  domain: string;\r  email: string;\r  phone: string;\r  plan: 'Free' | 'Starter' | 'Professional' | 'Enterprise';\r  status: 'active' | 'suspended' | 'pending' | 'expired';\r  userCount: number;\r  maxUsers: number;\r  storageUsed: number;\r  maxStorage: number;\r  createdAt: string;\r  expiresAt: string;\r  lastLogin: string;\r  revenue: number;\r  growth: number;\r  modules: string[];\r  features: string[];\r  owner: {\r    name: string;\r    email: string;\r    avatar?: string;\r  };\r  performance: {\r    cpu: number;\r    memory: number;\r    requests: number;\r    errors: number;\r  };\r}\rinterface TenantCardProps {\r  tenant: Tenant;\r  onEdit: (tenant: Tenant) => void;\r  onDelete: (id: string) => void;\r  onToggleStatus: (id: string) => void;\r  onLoginAs: (tenant: Tenant) => void;\r  onViewDetails: (tenant: Tenant) => void;\r}\rexport const MasterTenantsPage: React.FC = () => {\r  const navigate = useNavigate();\r  const location = useLocation();\r  const [loading, setLoading] = useState(false);\r  const [viewMode, setViewMode] = useState<'grid' | 'table'>('table');\r  const [selectedTenants, setSelectedTenants] = useState<string[]>([]);\r  const [searchText, setSearchText] = useState('');\r  const [filterStatus, setFilterStatus] = useState<string>('all');\r  const [filterPlan, setFilterPlan] = useState<string>('all');\r  const [showCreateModal, setShowCreateModal] = useState(false);\r  const [showDetailsDrawer, setShowDetailsDrawer] = useState(false);\r  const [selectedTenant, setSelectedTenant] = useState<Tenant | null>(null);\r  const [form] = Form.useForm();\r  const [page, setPage] = useState(1);\r  const [pageSize, setPageSize] = useState(10);\r  const [totalCount, setTotalCount] = useState(0);\r  const [showBulkActions, setShowBulkActions] = useState(false);\r  const [bulkLoading, setBulkLoading] = useState(false);\r  // Mock data\r  const mockTenants: Tenant[] = [\r    {\r      id: '1',\r      name: 'TechCorp Solutions',\r      domain: 'techcorp.stoocker.app',\r      email: 'admin@techcorp.com',\r      phone: '+90 555 123 4567',\r      plan: 'Enterprise',\r      status: 'active',\r      userCount: 245,\r      maxUsers: 500,\r      storageUsed: 75,\r      maxStorage: 100,\r      createdAt: '2024-01-15',\r      expiresAt: '2025-01-15',\r      lastLogin: '2 saat önce',\r      revenue: 45000,\r      growth: 15,\r      modules: ['CRM', 'Sales', 'Finance', 'HR'],\r      features: ['API Access', 'Custom Domain', 'Priority Support'],\r      owner: {\r        name: 'John Doe',\r        email: 'john@techcorp.com',\r        avatar: undefined,\r      },\r      performance: {\r        cpu: 45,\r        memory: 68,\r        requests: 12450,\r        errors: 3,\r      },\r    },\r    {\r      id: '2',\r      name: 'Digital Dynamics',\r      domain: 'digital.stoocker.app',\r      email: 'info@digital.com',\r      phone: '+90 555 987 6543',\r      plan: 'Professional',\r      status: 'active',\r      userCount: 89,\r      maxUsers: 100,\r      storageUsed: 32,\r      maxStorage: 50,\r      createdAt: '2024-02-20',\r      expiresAt: '2025-02-20',\r      lastLogin: '1 gün önce',\r      revenue: 18500,\r      growth: -5,\r      modules: ['CRM', 'Sales'],\r      features: ['API Access'],\r      owner: {\r        name: 'Jane Smith',\r        email: 'jane@digital.com',\r      },\r      performance: {\r        cpu: 32,\r        memory: 45,\r        requests: 5670,\r        errors: 12,\r      },\r    },\r    {\r      id: '3',\r      name: 'StartupHub',\r      domain: 'startup.stoocker.app',\r      email: 'hello@startup.com',\r      phone: '+90 555 456 7890',\r      plan: 'Starter',\r      status: 'pending',\r      userCount: 12,\r      maxUsers: 25,\r      storageUsed: 8,\r      maxStorage: 10,\r      createdAt: '2024-03-10',\r      expiresAt: '2025-03-10',\r      lastLogin: '3 gün önce',\r      revenue: 4500,\r      growth: 22,\r      modules: ['CRM'],\r      features: [],\r      owner: {\r        name: 'Mike Johnson',\r        email: 'mike@startup.com',\r      },\r      performance: {\r        cpu: 15,\r        memory: 22,\r        requests: 890,\r        errors: 0,\r      },\r    },\r    {\r      id: '4',\r      name: 'CloudFirst Inc',\r      domain: 'cloudfirst.stoocker.app',\r      email: 'contact@cloudfirst.com',\r      phone: '+90 555 321 6547',\r      plan: 'Enterprise',\r      status: 'suspended',\r      userCount: 156,\r      maxUsers: 500,\r      storageUsed: 85,\r      maxStorage: 100,\r      createdAt: '2023-12-01',\r      expiresAt: '2024-12-01',\r      lastLogin: '1 hafta önce',\r      revenue: 38000,\r      growth: -12,\r      modules: ['CRM', 'Sales', 'Finance', 'HR', 'Production'],\r      features: ['API Access', 'Custom Domain', 'Priority Support', 'White Label'],\r      owner: {\r        name: 'Sarah Williams',\r        email: 'sarah@cloudfirst.com',\r      },\r      performance: {\r        cpu: 78,\r        memory: 82,\r        requests: 18900,\r        errors: 45,\r      },\r    },\r  ];\r  const [tenants, setTenants] = useState<Tenant[]>([]);\r  // Fetch tenants from API\r  useEffect(() => {\r    fetchTenants();\r  }, [page, pageSize]);\r  // Debounced search effect\r  useEffect(() => {\r    const timer = setTimeout(() => {\r      if (searchText !== '' || filterStatus !== 'all') {\r        fetchTenants();\r      }\r    }, 500);\r    return () => clearTimeout(timer);\r  }, [searchText, filterStatus]);\r  const fetchTenants = async () => {\r    setLoading(true);\r    try {\r      const response = await tenantsApi.getAll({\r        page,\r        pageSize,\r        search: searchText || undefined,\r        isActive: filterStatus === 'active' ? true : filterStatus === 'suspended' ? false : undefined\r      });\r      // Check if response has the expected structure\r      if (response.data && response.data.success && response.data.data) {\r        // Map API response to component format\r        const mappedTenants = response.data.data.map((t: any) => ({\r          id: t.id,\r          name: t.name,\r          domain: t.domain || `${t.code}.stoocker.app`,\r          email: t.contactEmail,\r          phone: 'N/A',\r          plan: ['Free', 'Starter', 'Professional', 'Enterprise'].includes(t.packageName) ? t.packageName : 'Free',\r          status: t.isActive ? 'active' : 'suspended',\r          userCount: t.userCount || 0,\r          maxUsers: 100, // Default max users\r          storageUsed: Math.floor(Math.random() * 50), // Mock storage\r          maxStorage: 100, // Default max storage\r          createdAt: t.createdDate ? new Date(t.createdDate).toLocaleDateString('tr-TR') : 'N/A',\r          expiresAt: t.subscriptionEndDate ? new Date(t.subscriptionEndDate).toLocaleDateString('tr-TR') : 'N/A',\r          lastLogin: 'Bilinmiyor',\r          revenue: Math.floor(Math.random() * 50000), // Mock revenue for demo\r          growth: Math.floor(Math.random() * 40) - 10, // Mock growth for demo\r          modules: ['CRM', 'Sales'], // Mock modules\r          features: ['API Access'], // Mock features\r          owner: {\r            name: 'Admin',\r            email: t.contactEmail,\r            avatar: undefined\r          },\r          performance: {\r            cpu: Math.floor(Math.random() * 100),\r            memory: Math.floor(Math.random() * 100),\r            requests: Math.floor(Math.random() * 20000),\r            errors: Math.floor(Math.random() * 50)\r          }\r        }));\r        setTenants(mappedTenants);\r        setTotalCount(mappedTenants.length);\r      } else {\r        message.warning('API veri formatı beklenenden farklı');\r        setTenants([]);\r        setTotalCount(0);\r      }\r    } catch (error: any) {\r      if (error.response?.status === 401) {\r        message.error('Oturum süreniz dolmuş, lütfen tekrar giriş yapın');\r      } else if (error.response?.status === 403) {\r        message.error('Bu sayfaya erişim yetkiniz yok');\r      } else if (error.code === 'ERR_NETWORK') {\r        message.error('Bağlantı hatası, lütfen internet bağlantınızı kontrol edin');\r        // Use mock data only for network errors during development\r        if (import.meta.env.DEV) {\r          message.info('Geliştirme modunda mock data gösteriliyor');\r          setTenants(mockTenants);\r        }\r      } else {\r        message.error('Tenant listesi yüklenirken hata oluştu');\r        setTenants([]);\r      }\r    } finally {\r      setLoading(false);\r    }\r  };\r  // Stats cards\r  const stats = [\r    {\r      title: 'Toplam Tenant',\r      value: tenants.length,\r      icon: <TeamOutlined />,\r      color: '#1890ff',\r      trend: 12,\r      suffix: '',\r    },\r    {\r      title: 'Aktif Tenant',\r      value: tenants.filter(t => t.status === 'active').length,\r      icon: <CheckCircleOutlined />,\r      color: '#52c41a',\r      trend: 8,\r      suffix: '',\r    },\r    {\r      title: 'Toplam Kullanıcı',\r      value: tenants.reduce((sum, t) => sum + t.userCount, 0),\r      icon: <UserOutlined />,\r      color: '#722ed1',\r      trend: 15,\r      suffix: '',\r    },\r    {\r      title: 'Aylık Gelir',\r      value: tenants.reduce((sum, t) => sum + t.revenue, 0),\r      icon: <DollarOutlined />,\r      color: '#fa8c16',\r      trend: 22,\r      prefix: '₺',\r    },\r  ];\r  // Plan colors and icons\r  const planConfig = {\r    Free: { color: '#8c8c8c', icon: <UserOutlined /> },\r    Starter: { color: '#52c41a', icon: <RocketOutlined /> },\r    Professional: { color: '#1890ff', icon: <ThunderboltOutlined /> },\r    Enterprise: { color: '#722ed1', icon: <CrownOutlined /> },\r  };\r  // Status config\r  const statusConfig = {\r    active: { color: 'success', text: 'Aktif', icon: <CheckCircleOutlined /> },\r    suspended: { color: 'error', text: 'Askıda', icon: <CloseCircleOutlined /> },\r    pending: { color: 'warning', text: 'Bekliyor', icon: <ClockCircleOutlined /> },\r    expired: { color: 'default', text: 'Süresi Dolmuş', icon: <InfoCircleOutlined /> },\r  };\r  // Tenant Card Component\r  const TenantCard: React.FC<TenantCardProps> = ({\r    tenant,\r    onEdit,\r    onDelete,\r    onToggleStatus,\r    onLoginAs,\r    onViewDetails,\r  }) => {\r    // Ensure plan exists in config, fallback to Free\r    const planInfo = planConfig[tenant.plan] || planConfig['Free'] || {\r      color: '#8c8c8c',\r      icon: <UserOutlined />\r    };\r    // Ensure status exists in config, fallback to pending\r    const statusInfo = statusConfig[tenant.status] || statusConfig['pending'] || {\r      color: 'default',\r      text: 'Bilinmiyor',\r      icon: <InfoCircleOutlined />\r    };\r    return (\r      <motion.div\r        layout\r        initial={{ opacity: 0, scale: 0.9 }}\r        animate={{ opacity: 1, scale: 1 }}\r        exit={{ opacity: 0, scale: 0.9 }}\r        whileHover={{ y: -5 }}\r        transition={{ duration: 0.3 }}\r      >\r        <Card\r          className=\"tenant-card glass-morphism\"\r          size=\"small\"\r          style={{\r            borderTop: `3px solid ${planInfo.color}`,\r            height: '100%',\r            minHeight: '320px',\r          }}\r          actions={[\r            <Tooltip title=\"Detaylar\">\r              <Button\r                type=\"text\"\r                icon={<EyeOutlined />}\r                onClick={() = aria-label=\"eye outlined\"> onViewDetails(tenant)}\r              />\r            </Tooltip>,\r            <Tooltip title=\"Düzenle\">\r              <Button\r                type=\"text\"\r                icon={<EditOutlined />}\r                onClick={() = aria-label=\"edit outlined\"> onEdit(tenant)}\r              />\r            </Tooltip>,\r            <Tooltip title={tenant.status === 'active' ? 'Askıya Al' : 'Aktifleştir'}>\r              <Button\r                type=\"text\"\r                icon={tenant.status === 'active' ? <LockOutlined /> : <UnlockOutlined />}\r                onClick={() = aria-label=\"button\"> onToggleStatus(tenant.id)}\r              />\r            </Tooltip>,\r            <Dropdown\r              menu={{\r                items: [\r                  {\r                    key: 'login',\r                    label: 'Tenant Olarak Giriş',\r                    icon: <LoginOutlined />,\r                    onClick: () => onLoginAs(tenant),\r                  },\r                  {\r                    key: 'copy',\r                    label: 'Domain Kopyala',\r                    icon: <CopyOutlined />,\r                    onClick: () => {\r                      navigator.clipboard.writeText(tenant.domain);\r                      message.success('Domain kopyalandı');\r                    },\r                  },\r                  { type: 'divider' },\r                  {\r                    key: 'delete',\r                    label: 'Sil',\r                    icon: <DeleteOutlined />,\r                    danger: true,\r                    onClick: () => onDelete(tenant.id),\r                  },\r                ],\r              }}\r              trigger={['click']}\r            >\r              <Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r            </Dropdown>,\r          ]}\r        >\r          {/* Header */}\r          <div className=\"tenant-card-header\">\r            <Avatar\r              size={48}\r              style={{\r                background: planInfo.color,\r                border: `2px solid ${planInfo.color}20`,\r              }}\r            >\r              {tenant.name.substring(0, 2).toUpperCase()}\r            </Avatar>\r            <div className=\"tenant-info\" style={{ flex: 1, minWidth: 0 }}>\r              <Title level={5} style={{ margin: 0, fontSize: 14, width: '100%', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}>\r                {tenant.name}\r              </Title>\r              <Space size={2} style={{ marginTop: 4 }}>\r                <Tag color={planInfo.color} style={{ margin: 0, fontSize: 10 }}>\r                  {tenant.plan}\r                </Tag>\r                <Tag color={statusInfo.color} style={{ margin: 0, fontSize: 10 }}>\r                  {statusInfo.text === 'Aktif' ? 'Aktif' : 'Askıda'}\r                </Tag>\r              </Space>\r            </div>\r          </div>\r          <Divider style={{ margin: '8px 0' }} />\r          {/* Stats */}\r          <Row gutter={[8, 8]}>\r            <Col span={12}>\r              <Statistic\r                title=\"Kullanıcı\"\r                value={tenant.userCount || 0}\r                suffix={`/ ${tenant.maxUsers || 10}`}\r                prefix={<UserOutlined />}\r                valueStyle={{ fontSize: 14 }}\r              />\r              <Progress\r                percent={tenant.maxUsers ? Math.min((tenant.userCount || 0) / tenant.maxUsers * 100, 100) : 0}\r                size=\"small\"\r                showInfo={false}\r                strokeColor={planInfo?.color || '#1890ff'}\r              />\r            </Col>\r            <Col span={12}>\r              <Statistic\r                title=\"Depolama\"\r                value={tenant.storageUsed || 0}\r                suffix={`GB / ${tenant.maxStorage || 10}GB`}\r                prefix={<DatabaseOutlined />}\r                valueStyle={{ fontSize: 14 }}\r              />\r              <Progress\r                percent={tenant.maxStorage ? Math.min((tenant.storageUsed || 0) / tenant.maxStorage * 100, 100) : 0}\r                size=\"small\"\r                showInfo={false}\r                strokeColor={\r                  tenant.maxStorage && (tenant.storageUsed / tenant.maxStorage) * 100 > 80\r                    ? '#ff4d4f'\r                    : planInfo?.color || '#1890ff'\r                }\r              />\r            </Col>\r          </Row>\r          <Divider style={{ margin: '8px 0' }} />\r          {/* Info */}\r          <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\r            <div className=\"info-item\">\r              <GlobalOutlined />\r              <Text type=\"secondary\">{tenant.domain}</Text>\r            </div>\r            <div className=\"info-item\">\r              <MailOutlined />\r              <Text type=\"secondary\">{tenant.email}</Text>\r            </div>\r            <div className=\"info-item\">\r              <CalendarOutlined />\r              <Text type=\"secondary\">Son giriş: {tenant.lastLogin}</Text>\r            </div>\r          </Space>\r          <Divider style={{ margin: '8px 0' }} />\r          {/* Revenue & Growth */}\r          <Row gutter={8}>\r            <Col span={12}>\r              <div className=\"metric-box\" style={{ textAlign: 'center' }}>\r                <Text type=\"secondary\" style={{ fontSize: 11 }}>Gelir</Text>\r                <div style={{ fontSize: 13, fontWeight: 600, color: '#52c41a' }}>\r                  ₺<CountUp end={tenant.revenue} separator=\",\" />\r                </div>\r              </div>\r            </Col>\r            <Col span={12}>\r              <div className=\"metric-box\" style={{ textAlign: 'center' }}>\r                <Text type=\"secondary\" style={{ fontSize: 11 }}>Büyüme</Text>\r                <div\r                  style={{\r                    fontSize: 13,\r                    fontWeight: 600,\r                    color: tenant.growth > 0 ? '#52c41a' : '#ff4d4f',\r                  }}\r                >\r                  {tenant.growth > 0 ? '+' : ''}\r                  {tenant.growth}%\r                </div>\r              </div>\r            </Col>\r          </Row>\r          {/* Modules */}\r          <div className=\"modules-section\" style={{ marginTop: 12 }}>\r            <Space size={[4, 4]} wrap style={{ display: 'flex', flexWrap: 'wrap' }}>\r              {tenant.modules.slice(0, 3).map((module) => (\r                <Tag key={module} color=\"blue\" style={{ margin: 0, fontSize: 11 }}>\r                  {module}\r                </Tag>\r              ))}\r              {tenant.modules.length > 3 && (\r                <Tag color=\"default\" style={{ margin: 0, fontSize: 11 }}>\r                  +{tenant.modules.length - 3}\r                </Tag>\r              )}\r            </Space>\r          </div>\r        </Card>\r      </motion.div>\r    );\r  };\r  // Table columns\r  const columns = [\r    {\r      title: 'Tenant',\r      dataIndex: 'name',\r      key: 'name',\r      fixed: 'left',\r      width: 250,\r      render: (text: string, record: Tenant) => (\r        <Space>\r          <Avatar style={{ backgroundColor: planConfig[record.plan]?.color || '#8c8c8c' }}>\r            {text.substring(0, 2).toUpperCase()}\r          </Avatar>\r          <div>\r            <Text strong>{text}</Text>\r            <br />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {record.domain}\r            </Text>\r          </div>\r        </Space>\r      ),\r    },\r    {\r      title: 'Plan',\r      dataIndex: 'plan',\r      key: 'plan',\r      width: 120,\r      render: (plan: Tenant['plan']) => (\r        <Tag color={planConfig[plan]?.color || '#8c8c8c'} icon={planConfig[plan]?.icon || <UserOutlined />}>\r          {plan}\r        </Tag>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      width: 120,\r      render: (status: Tenant['status']) => (\r        <Tag color={statusConfig[status].color} icon={statusConfig[status].icon}>\r          {statusConfig[status].text}\r        </Tag>\r      ),\r    },\r    {\r      title: 'Kullanıcılar',\r      key: 'users',\r      width: 150,\r      render: (record: Tenant) => (\r        <Space direction=\"vertical\" size={0}>\r          <Text>{record.userCount} / {record.maxUsers}</Text>\r          <Progress\r            percent={(record.userCount / record.maxUsers) * 100}\r            size=\"small\"\r            showInfo={false}\r          />\r        </Space>\r      ),\r    },\r    {\r      title: 'Depolama',\r      key: 'storage',\r      width: 150,\r      render: (record: Tenant) => (\r        <Space direction=\"vertical\" size={0}>\r          <Text>{record.storageUsed}GB / {record.maxStorage}GB</Text>\r          <Progress\r            percent={(record.storageUsed / record.maxStorage) * 100}\r            size=\"small\"\r            showInfo={false}\r            strokeColor={\r              (record.storageUsed / record.maxStorage) * 100 > 80 ? '#ff4d4f' : undefined\r            }\r          />\r        </Space>\r      ),\r    },\r    {\r      title: 'Gelir',\r      dataIndex: 'revenue',\r      key: 'revenue',\r      width: 120,\r      render: (revenue: number) => (\r        <Text strong style={{ color: '#52c41a' }}>\r          ₺{revenue.toLocaleString()}\r        </Text>\r      ),\r    },\r    {\r      title: 'Büyüme',\r      dataIndex: 'growth',\r      key: 'growth',\r      width: 100,\r      render: (growth: number) => (\r        <Tag color={growth > 0 ? 'success' : 'error'}>\r          {growth > 0 ? '+' : ''}{growth}%\r        </Tag>\r      ),\r    },\r    {\r      title: 'Son Giriş',\r      dataIndex: 'lastLogin',\r      key: 'lastLogin',\r      width: 120,\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      fixed: 'right',\r      width: 120,\r      render: (record: Tenant) => (\r        <Space>\r          <Tooltip title=\"Detaylar\">\r            <Button\r              type=\"text\"\r              size=\"small\"\r              icon={<EyeOutlined />}\r              onClick={() = aria-label=\"eye outlined\"> handleViewDetails(record)}\r            />\r          </Tooltip>\r          <Tooltip title=\"Düzenle\">\r            <Button\r              type=\"text\"\r              size=\"small\"\r              icon={<EditOutlined />}\r              onClick={() = aria-label=\"edit outlined\"> handleEdit(record)}\r            />\r          </Tooltip>\r          <Dropdown\r            menu={{\r              items: [\r                {\r                  key: 'login',\r                  label: 'Tenant Olarak Giriş',\r                  icon: <LoginOutlined />,\r                },\r                {\r                  key: 'toggle',\r                  label: record.status === 'active' ? 'Askıya Al' : 'Aktifleştir',\r                  icon: record.status === 'active' ? <LockOutlined /> : <UnlockOutlined />,\r                },\r                { type: 'divider' },\r                {\r                  key: 'delete',\r                  label: 'Sil',\r                  icon: <DeleteOutlined />,\r                  danger: true,\r                },\r              ],\r              onClick: ({ key }) => handleTableAction(key, record),\r            }}\r            trigger={['click']}\r          >\r            <Button type=\"text\" size=\"small\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r          </Dropdown>\r        </Space>\r      ),\r    },\r  ];\r  // Handlers\r  const handleEdit = (tenant: Tenant) => {\r    setSelectedTenant(tenant);\r    form.setFieldsValue(tenant);\r    setShowCreateModal(true);\r  };\r  const handleDelete = (id: string) => {\r    Modal.confirm({\r      title: 'Tenant Sil',\r      content: 'Bu tenant\\'ı silmek istediğinizden emin misiniz? Bu işlem geri alınamaz.',\r      okText: 'Sil',\r      okType: 'danger',\r      cancelText: 'İptal',\r      onOk: async () => {\r        try {\r          setLoading(true);\r          const response = await tenantsApi.delete(id);\r          if (response.data?.success) {\r            message.success('Tenant başarıyla silindi');\r            fetchTenants(); // Refresh the list\r          } else {\r            message.error(response.data?.message || 'Tenant silinemedi');\r          }\r        } catch (error: any) {\r          message.error(error.response?.data?.message || 'Tenant silinirken hata oluştu');\r        } finally {\r          setLoading(false);\r        }\r      },\r    });\r  };\r  const handleToggleStatus = async (id: string) => {\r    try {\r      setLoading(true);\r      const tenant = tenants.find(t => t.id === id);\r      if (!tenant) return;\r      const response = await tenantsApi.toggleStatus(id);\r      if (response.data?.success) {\r        message.success(`Tenant ${tenant.status === 'active' ? 'askıya alındı' : 'aktifleştirildi'}`);\r        fetchTenants(); // Refresh the list\r      } else {\r        message.error(response.data?.message || 'Tenant durumu güncellenemedi');\r      }\r    } catch (error: any) {\r      message.error(error.response?.data?.message || 'Tenant durumu güncellenirken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleLoginAs = (tenant: Tenant) => {\r    message.info(`${tenant.name} olarak giriş yapılıyor...`);\r    // Implement login as tenant\r  };\r  const handleViewDetails = (tenant: Tenant) => {\r    navigate(`/master/tenants/${tenant.id}`);\r  };\r  // Bulk Operations\r  const handleBulkDelete = () => {\r    if (selectedTenants.length === 0) {\r      message.warning('Lütfen silmek için tenant seçin');\r      return;\r    }\r    Modal.confirm({\r      title: 'Toplu Silme',\r      content: `${selectedTenants.length} tenant silinecek. Bu işlem geri alınamaz. Devam etmek istiyor musunuz?`,\r      okText: 'Evet, Sil',\r      okType: 'danger',\r      cancelText: 'İptal',\r      onOk: async () => {\r        try {\r          setBulkLoading(true);\r          const promises = selectedTenants.map(id => tenantsApi.delete(id));\r          await Promise.all(promises);\r          message.success(`${selectedTenants.length} tenant başarıyla silindi`);\r          setSelectedTenants([]);\r          setShowBulkActions(false);\r          fetchTenants();\r        } catch (error) {\r          message.error('Toplu silme işlemi başarısız oldu');\r        } finally {\r          setBulkLoading(false);\r        }\r      },\r    });\r  };\r  const handleBulkStatusChange = (newStatus: 'active' | 'suspended') => {\r    if (selectedTenants.length === 0) {\r      message.warning('Lütfen durum değiştirmek için tenant seçin');\r      return;\r    }\r    Modal.confirm({\r      title: 'Toplu Durum Değişikliği',\r      content: `${selectedTenants.length} tenant'ın durumu \"${newStatus === 'active' ? 'Aktif' : 'Askıda'}\" olarak değiştirilecek. Devam etmek istiyor musunuz?`,\r      okText: 'Evet, Değiştir',\r      cancelText: 'İptal',\r      onOk: async () => {\r        try {\r          setBulkLoading(true);\r          const promises = selectedTenants.map(id => tenantsApi.toggleStatus(id));\r          await Promise.all(promises);\r          message.success(`${selectedTenants.length} tenant'ın durumu güncellendi`);\r          setSelectedTenants([]);\r          setShowBulkActions(false);\r          fetchTenants();\r        } catch (error) {\r          message.error('Toplu durum değişikliği başarısız oldu');\r        } finally {\r          setBulkLoading(false);\r        }\r      },\r    });\r  };\r  const handleExport = () => {\r    const dataToExport = selectedTenants.length > 0 \r      ? tenants.filter(t => selectedTenants.includes(t.id))\r      : tenants;\r    const csv = convertToCSV(dataToExport);\r    downloadCSV(csv, `tenants-${new Date().toISOString().split('T')[0]}.csv`);\r    message.success(`${dataToExport.length} tenant dışa aktarıldı`);\r  };\r  const convertToCSV = (data: Tenant[]) => {\r    const headers = ['ID', 'Name', 'Domain', 'Email', 'Phone', 'Plan', 'Status', 'Users', 'Storage', 'Created At', 'Revenue'];\r    const rows = data.map(t => [\r      t.id,\r      t.name,\r      t.domain,\r      t.email,\r      t.phone,\r      t.plan,\r      t.status,\r      `${t.userCount}/${t.maxUsers}`,\r      `${t.storageUsed}/${t.maxStorage}GB`,\r      t.createdAt,\r      t.revenue\r    ]);\r    return [headers, ...rows].map(row => row.join(',')).join('\\n');\r  };\r  const downloadCSV = (csv: string, filename: string) => {\r    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r    const link = document.createElement('a');\r    link.href = URL.createObjectURL(blob);\r    link.download = filename;\r    link.click();\r  };\r  const handleImport = (file: File) => {\r    const reader = new FileReader();\r    reader.onload = (e) => {\r      const text = e.target?.result as string;\r      // Parse CSV and import tenants\r      message.success('Tenants imported successfully');\r    };\r    reader.readAsText(file);\r    return false; // Prevent default upload behavior\r  };\r  const handleTableAction = (key: string, record: Tenant) => {\r    switch (key) {\r      case 'login':\r        handleLoginAs(record);\r        break;\r      case 'toggle':\r        handleToggleStatus(record.id);\r        break;\r      case 'delete':\r        handleDelete(record.id);\r        break;\r    }\r  };\r  const handleCreateTenant = async (values: any) => {\r    try {\r      setLoading(true);\r      const tenantData = {\r        name: values.name,\r        code: values.domain,\r        contactEmail: values.email,\r        contactPhone: values.phone,\r        packageId: values.plan === 'Enterprise' ? '1' : values.plan === 'Professional' ? '2' : values.plan === 'Starter' ? '3' : '4',\r        maxUsers: values.maxUsers || 10,\r        modules: values.modules || [],\r      };\r      const response = await tenantsApi.create(tenantData);\r      if (response.data?.success) {\r        message.success('Tenant başarıyla oluşturuldu');\r        setShowCreateModal(false);\r        form.resetFields();\r        fetchTenants(); // Refresh the list\r      } else {\r        message.error(response.data?.message || 'Tenant oluşturulamadı');\r      }\r    } catch (error: any) {\r      message.error(error.response?.data?.message || 'Tenant oluşturulurken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  // Filtered tenants\r  const filteredTenants = tenants.filter(tenant => {\r    const matchesSearch = tenant.name.toLowerCase().includes(searchText.toLowerCase()) ||\r                         tenant.domain.toLowerCase().includes(searchText.toLowerCase()) ||\r                         tenant.email.toLowerCase().includes(searchText.toLowerCase());\r    const matchesStatus = filterStatus === 'all' || tenant.status === filterStatus;\r    const matchesPlan = filterPlan === 'all' || tenant.plan === filterPlan;\r    return matchesSearch && matchesStatus && matchesPlan;\r  });\r  return (\r    <div className=\"master-tenants-page\">\r      {/* Header */}\r      <div className=\"page-header glass-morphism\">\r        <motion.div\r          initial={{ opacity: 0, x: -20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-content\"\r        >\r          <Title level={2} className=\"gradient-text\">\r            <TeamOutlined /> Tenant Yönetimi\r          </Title>\r          <Text type=\"secondary\">Tüm tenant'ları yönetin ve izleyin</Text>\r        </motion.div>\r        <motion.div\r          initial={{ opacity: 0, x: 20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-actions\"\r        >\r          <Space>\r            <Upload\r              accept=\".csv\"\r              showUploadList={false}\r              beforeUpload={handleImport}\r            >\r              <Button icon={<ImportOutlined />} aria-label=\"import outlined\">İçe Aktar</Button>\r            </Upload>\r            <Button icon={<ExportOutlined />} onClick={handleExport} aria-label=\"export outlined\">Dışa Aktar</Button>\r            {selectedTenants.length > 0 && (\r              <Badge count={selectedTenants.length} offset={[-5, 5]}>\r                <Dropdown\r                  menu={{\r                    items: [\r                      {\r                        key: 'activate',\r                        label: 'Aktifleştir',\r                        icon: <UnlockOutlined />,\r                        onClick: () => handleBulkStatusChange('active'),\r                      },\r                      {\r                        key: 'suspend',\r                        label: 'Askıya Al',\r                        icon: <LockOutlined />,\r                        onClick: () => handleBulkStatusChange('suspended'),\r                      },\r                      { type: 'divider' },\r                      {\r                        key: 'delete',\r                        label: 'Toplu Sil',\r                        icon: <DeleteOutlined />,\r                        danger: true,\r                        onClick: handleBulkDelete,\r                      },\r                    ],\r                  }}\r                >\r                  <Button type=\"primary\" loading={bulkLoading}>\r                    Toplu İşlemler ({selectedTenants.length})\r                  </Button>\r                </Dropdown>\r              </Badge>\r            )}\r            <Button\r              type=\"primary\"\r              icon={<PlusOutlined />}\r              onClick={() = aria-label=\"plus outlined\"> setShowCreateModal(true)}\r              style={{\r                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r                border: 'none',\r                height: 40,\r                borderRadius: 10,\r                fontWeight: 600,\r                boxShadow: '0 4px 12px rgba(102, 126, 234, 0.3)'\r              }}\r              onMouseEnter={(e) => {\r                e.currentTarget.style.transform = 'translateY(-2px)';\r                e.currentTarget.style.boxShadow = '0 6px 20px rgba(102, 126, 234, 0.4)';\r              }}\r              onMouseLeave={(e) => {\r                e.currentTarget.style.transform = 'translateY(0)';\r                e.currentTarget.style.boxShadow = '0 4px 12px rgba(102, 126, 234, 0.3)';\r              }}\r            >\r              Yeni Tenant\r            </Button>\r          </Space>\r        </motion.div>\r      </div>\r      {/* Stats */}\r      <Row gutter={[24, 24]} className=\"stats-row\">\r        {stats.map((stat, index) => (\r          <Col xs={24} sm={12} lg={6} key={index}>\r            <motion.div\r              initial={{ opacity: 0, y: 20 }}\r              animate={{ opacity: 1, y: 0 }}\r              transition={{ delay: index * 0.1 }}\r              whileHover={{ scale: 1.02 }}\r            >\r              <Card className=\"stat-card glass-morphism\" bodyStyle={{ padding: 20 }}>\r                <div style={{ display: 'flex', alignItems: 'center', gap: 16 }}>\r                  <div className=\"stat-icon-wrapper\" style={{ \r                    width: 60, \r                    height: 60, \r                    borderRadius: 14,\r                    background: `${stat.color}15`,\r                    display: 'flex',\r                    alignItems: 'center',\r                    justifyContent: 'center',\r                    fontSize: 26,\r                    color: stat.color,\r                    boxShadow: `0 4px 12px ${stat.color}20`\r                  }}>\r                    {stat.icon}\r                  </div>\r                  <div style={{ flex: 1 }}>\r                    <Text type=\"secondary\" style={{ fontSize: 13, fontWeight: 500, textTransform: 'uppercase', letterSpacing: 0.5 }}>{stat.title}</Text>\r                    <div style={{ fontSize: 28, fontWeight: 700, color: '#1a1a1a', marginTop: 4 }}>\r                      {stat.prefix}<CountUp end={stat.value} separator=\",\" duration={2} />{stat.suffix}\r                    </div>\r                    {stat.trend && (\r                      <div style={{ marginTop: 8, display: 'flex', alignItems: 'center', gap: 4 }}>\r                        <Tag \r                          color={stat.trend > 0 ? 'success' : 'error'} \r                          style={{ fontSize: 12 }}\r                        >\r                          {stat.trend > 0 ? '↑' : '↓'} {Math.abs(stat.trend)}%\r                        </Tag>\r                        <Text type=\"secondary\" style={{ fontSize: 12 }}>geçen aya göre</Text>\r                      </div>\r                    )}\r                  </div>\r                </div>\r              </Card>\r            </motion.div>\r          </Col>\r        ))}\r      </Row>\r      {/* Filters */}\r      <Card className=\"filters-card glass-morphism\">\r        <Row gutter={[16, 16]} align=\"middle\">\r          <Col flex=\"auto\">\r            <Space size=\"middle\" wrap>\r              <Search\r                placeholder=\"Tenant ara...\"\r                allowClear\r                onChange={(e) => setSearchText(e.target.value)}\r                style={{ width: 250 }}\r                prefix={<SearchOutlined />}\r              />\r              <Select\r                placeholder=\"Durum\"\r                value={filterStatus}\r                onChange={setFilterStatus}\r                style={{ width: 120 }}\r               aria-label=\"select field\">\r                <Option value=\"all\">Tümü</Option>\r                <Option value=\"active\">Aktif</Option>\r                <Option value=\"suspended\">Askıda</Option>\r                <Option value=\"pending\">Bekliyor</Option>\r                <Option value=\"expired\">Süresi Dolmuş</Option>\r              </Select>\r              <Select\r                placeholder=\"Plan\"\r                value={filterPlan}\r                onChange={setFilterPlan}\r                style={{ width: 120 }}\r               aria-label=\"select field\">\r                <Option value=\"all\">Tümü</Option>\r                <Option value=\"Free\">Free</Option>\r                <Option value=\"Starter\">Starter</Option>\r                <Option value=\"Professional\">Professional</Option>\r                <Option value=\"Enterprise\">Enterprise</Option>\r              </Select>\r              <RangePicker />\r            </Space>\r          </Col>\r          <Col>\r            <Space>\r              <Segmented\r                value={viewMode}\r                onChange={(value) => setViewMode(value as 'grid' | 'table')}\r                options={[\r                  { label: 'Tablo', value: 'table', icon: <BarsOutlined /> },\r                  { label: 'Grid', value: 'grid', icon: <AppstoreOutlined /> },\r                ]}\r              />\r              <Button\r                icon={<ReloadOutlined spin={loading} / aria-label=\"reload outlined\">}\r                onClick={() => fetchTenants()}\r              >\r                Yenile\r              </Button>\r            </Space>\r          </Col>\r        </Row>\r      </Card>\r      {/* Content */}\r      <AnimatePresence mode=\"wait\">\r        {viewMode === 'grid' ? (\r          <motion.div\r            key=\"grid\"\r            initial={{ opacity: 0 }}\r            animate={{ opacity: 1 }}\r            exit={{ opacity: 0 }}\r          >\r            {filteredTenants.length > 20 ? (\r              // Use virtual scrolling for large datasets\r              <div style={{ height: 'calc(100vh - 350px)' }}>\r                <VirtualList\r                  items={filteredTenants}\r                  itemHeight={350}\r                  renderItem={(tenant) => (\r                    <div style={{ padding: '12px' }}>\r                      <TenantCard\r                        tenant={tenant}\r                        onEdit={handleEdit}\r                        onDelete={handleDelete}\r                        onToggleStatus={handleToggleStatus}\r                        onLoginAs={handleLoginAs}\r                        onViewDetails={handleViewDetails}\r                      />\r                    </div>\r                  )}\r                  emptyText=\"Tenant bulunamadı\"\r                />\r              </div>\r            ) : (\r              // Use regular rendering for small datasets\r              <>\r                <Row gutter={[24, 24]}>\r                  {filteredTenants.map((tenant) => (\r                    <Col xs={24} sm={24} md={12} lg={8} xl={8} xxl={6} key={tenant.id}>\r                      <TenantCard\r                        tenant={tenant}\r                        onEdit={handleEdit}\r                        onDelete={handleDelete}\r                        onToggleStatus={handleToggleStatus}\r                        onLoginAs={handleLoginAs}\r                        onViewDetails={handleViewDetails}\r                      />\r                    </Col>\r                  ))}\r                </Row>\r                {filteredTenants.length === 0 && (\r                  <Empty\r                    description=\"Tenant bulunamadı\"\r                    image={Empty.PRESENTED_IMAGE_SIMPLE}\r                  />\r                )}\r              </>\r            )}\r          </motion.div>\r        ) : (\r          <motion.div\r            key=\"table\"\r            initial={{ opacity: 0 }}\r            animate={{ opacity: 1 }}\r            exit={{ opacity: 0 }}\r          >\r            <Card className=\"table-card glass-morphism\">\r              {filteredTenants.length > 50 ? (\r                // Use virtual table for large datasets\r                <div style={{ height: 'calc(100vh - 350px)' }}>\r                  <VirtualTable\r                    columns={columns}\r                    dataSource={filteredTenants}\r                    rowKey=\"id\"\r                    loading={loading}\r                    selectable={true}\r                    onSelectionChange={setSelectedTenants}\r                    onRowClick={handleViewDetails}\r                  />\r                </div>\r              ) : (\r                // Use regular table for small datasets\r                <Table\r                  columns={columns}\r                  dataSource={filteredTenants}\r                  rowKey=\"id\"\r                  loading={loading}\r                  pagination={{\r                    current: page,\r                    pageSize: pageSize,\r                    total: totalCount || filteredTenants.length,\r                    showSizeChanger: true,\r                    showTotal: (total) => `Toplam ${total} tenant`,\r                    onChange: (newPage, newPageSize) => {\r                      setPage(newPage);\r                      if (newPageSize) setPageSize(newPageSize);\r                    },\r                  }}\r                  scroll={{ x: 1500 }}\r                  onRow={(record) => ({\r                    onClick: () => handleViewDetails(record),\r                    style: { cursor: 'pointer' }\r                  })}\r                  rowSelection={{\r                    selectedRowKeys: selectedTenants,\r                    onChange: setSelectedTenants,\r                  }}\r                />\r              )}\r            </Card>\r          </motion.div>\r        )}\r      </AnimatePresence>\r      {/* Create/Edit Modal */}\r      <Modal\r        title={selectedTenant ? 'Tenant Düzenle' : 'Yeni Tenant Oluştur'}\r        open={showCreateModal}\r        onCancel={() => {\r          setShowCreateModal(false);\r          setSelectedTenant(null);\r          form.resetFields();\r        }}\r        footer={null}\r        width={600}\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleCreateTenant}\r        >\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"name\"\r                label=\"Tenant Adı\"\r                rules={[{ required: true, message: 'Tenant adı gerekli' }]}\r              >\r                <Input placeholder=\"Örn: TechCorp Solutions\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"domain\"\r                label=\"Domain\"\r                rules={[{ required: true, message: 'Domain gerekli' }]}\r              >\r                <Input placeholder=\"Örn: techcorp\" addonAfter=\".stoocker.app\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"email\"\r                label=\"E-posta\"\r                rules={[\r                  { required: true, message: 'E-posta gerekli' },\r                  { type: 'email', message: 'Geçerli bir e-posta girin' },\r                ]}\r              >\r                <Input placeholder=\"admin@example.com\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"phone\"\r                label=\"Telefon\"\r                rules={[{ required: true, message: 'Telefon gerekli' }]}\r              >\r                <Input placeholder=\"+90 555 123 4567\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"plan\"\r                label=\"Plan\"\r                rules={[{ required: true, message: 'Plan seçin' }]}\r              >\r                <Select placeholder=\"Plan seçin\" aria-label=\"select field\">\r                  <Option value=\"Free\">Free</Option>\r                  <Option value=\"Starter\">Starter</Option>\r                  <Option value=\"Professional\">Professional</Option>\r                  <Option value=\"Enterprise\">Enterprise</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"maxUsers\"\r                label=\"Maksimum Kullanıcı\"\r                rules={[{ required: true, message: 'Kullanıcı limiti gerekli' }]}\r              >\r                <InputNumber\r                  min={1}\r                  max={10000}\r                  style={{ width: '100%' }}\r                  placeholder=\"100\"\r                / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item\r            name=\"modules\"\r            label=\"Modüller\"\r          >\r            <Checkbox.Group>\r              <Row>\r                <Col span={8}>\r                  <Checkbox value=\"CRM\">CRM</Checkbox>\r                </Col>\r                <Col span={8}>\r                  <Checkbox value=\"Sales\">Sales</Checkbox>\r                </Col>\r                <Col span={8}>\r                  <Checkbox value=\"Finance\">Finance</Checkbox>\r                </Col>\r                <Col span={8}>\r                  <Checkbox value=\"HR\">HR</Checkbox>\r                </Col>\r                <Col span={8}>\r                  <Checkbox value=\"Production\">Production</Checkbox>\r                </Col>\r                <Col span={8}>\r                  <Checkbox value=\"Inventory\">Inventory</Checkbox>\r                </Col>\r              </Row>\r            </Checkbox.Group>\r          </Form.Item>\r          <Form.Item>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => setShowCreateModal(false)}>İptal</Button>\r              <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\r                {selectedTenant ? 'Güncelle' : 'Oluştur'}\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Details Drawer */}\r      <Drawer\r        title=\"Tenant Detayları\"\r        placement=\"right\"\r        width={600}\r        open={showDetailsDrawer}\r        onClose={() => {\r          setShowDetailsDrawer(false);\r          setSelectedTenant(null);\r        }}\r        destroyOnClose={true}\r        maskClosable={true}\r        zIndex={1000}\r        getContainer={false}\r      >\r        {selectedTenant ? (\r          <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\r            {/* Tenant Info */}\r            <Card className=\"glass-morphism\">\r              <Space align=\"start\">\r                <Avatar size={64} style={{ background: planConfig[selectedTenant.plan]?.color || '#667eea' }}>\r                  {selectedTenant.name.substring(0, 2).toUpperCase()}\r                </Avatar>\r                <div>\r                  <Title level={4}>{selectedTenant.name}</Title>\r                  <Space>\r                    <Tag color={planConfig[selectedTenant.plan]?.color || '#8c8c8c'}>\r                      {selectedTenant.plan}\r                    </Tag>\r                    <Tag color={statusConfig[selectedTenant.status]?.color || 'default'}>\r                      {statusConfig[selectedTenant.status]?.text || selectedTenant.status}\r                    </Tag>\r                  </Space>\r                </div>\r              </Space>\r            </Card>\r            {/* Performance Metrics */}\r            <Card title=\"Performans Metrikleri\" className=\"glass-morphism\">\r              <Row gutter={[16, 16]}>\r                <Col span={12}>\r                  <Text type=\"secondary\">CPU Kullanımı</Text>\r                  <Progress percent={selectedTenant.performance.cpu} />\r                </Col>\r                <Col span={12}>\r                  <Text type=\"secondary\">Memory Kullanımı</Text>\r                  <Progress percent={selectedTenant.performance.memory} />\r                </Col>\r                <Col span={12}>\r                  <Statistic\r                    title=\"Günlük İstek\"\r                    value={selectedTenant.performance.requests}\r                    prefix={<ApiOutlined />}\r                  />\r                </Col>\r                <Col span={12}>\r                  <Statistic\r                    title=\"Hata Sayısı\"\r                    value={selectedTenant.performance.errors}\r                    prefix={<WarningOutlined />}\r                    valueStyle={{ color: '#ff4d4f' }}\r                  />\r                </Col>\r              </Row>\r            </Card>\r            {/* Contact Info */}\r            <Card title=\"İletişim Bilgileri\" className=\"glass-morphism\">\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div>\r                  <Text type=\"secondary\">Sahip</Text>\r                  <br />\r                  <Text strong>{selectedTenant.owner.name}</Text>\r                </div>\r                <div>\r                  <Text type=\"secondary\">E-posta</Text>\r                  <br />\r                  <Text copyable>{selectedTenant.email}</Text>\r                </div>\r                <div>\r                  <Text type=\"secondary\">Telefon</Text>\r                  <br />\r                  <Text>{selectedTenant.phone}</Text>\r                </div>\r                <div>\r                  <Text type=\"secondary\">Domain</Text>\r                  <br />\r                  <Text copyable>{selectedTenant.domain}</Text>\r                </div>\r              </Space>\r            </Card>\r            {/* Modules & Features */}\r            <Card title=\"Modüller ve Özellikler\" className=\"glass-morphism\">\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div>\r                  <Text type=\"secondary\">Aktif Modüller</Text>\r                  <br />\r                  <Space wrap>\r                    {selectedTenant.modules.map((module) => (\r                      <Tag key={module} color=\"blue\">\r                        {module}\r                      </Tag>\r                    ))}\r                  </Space>\r                </div>\r                <div>\r                  <Text type=\"secondary\">Özellikler</Text>\r                  <br />\r                  <Space wrap>\r                    {selectedTenant.features.map((feature) => (\r                      <Tag key={feature} color=\"green\">\r                        {feature}\r                      </Tag>\r                    ))}\r                  </Space>\r                </div>\r              </Space>\r            </Card>\r            {/* Actions */}\r            <Space style={{ width: '100%' }}>\r              <Button\r                type=\"primary\"\r                icon={<LoginOutlined />}\r                block\r                onClick={() = aria-label=\"login outlined\"> handleLoginAs(selectedTenant)}\r              >\r                Tenant Olarak Giriş Yap\r              </Button>\r              <Button\r                icon={<EditOutlined />}\r                block\r                onClick={() = aria-label=\"edit outlined\"> {\r                  setShowDetailsDrawer(false);\r                  handleEdit(selectedTenant);\r                }}\r              >\r                Düzenle\r              </Button>\r            </Space>\r          </Space>\r        ) : (\r          <Empty description=\"Tenant seçilmedi\" />\r        )}\r      </Drawer>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Tenants/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Table,\r  Card,\r  Button,\r  Space,\r  Tag,\r  Modal,\r  Form,\r  Input,\r  Select,\r  Switch,\r  Dropdown,\r  Menu,\r  Typography,\r  Row,\r  Col,\r  Statistic,\r  Avatar,\r  Badge,\r  Tooltip,\r  message,\r  Popconfirm,\r  Divider,\r  Alert,\r  Descriptions,\r  Timeline,\r  List,\r  Tabs,\r} from 'antd';\rimport {\r  UserOutlined,\r  PlusOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  KeyOutlined,\r  LockOutlined,\r  UnlockOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  TeamOutlined,\r  SafetyOutlined,\r  CalendarOutlined,\r  MoreOutlined,\r  SearchOutlined,\r  FilterOutlined,\r  ExportOutlined,\r  ReloadOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  UserAddOutlined,\r  UsergroupAddOutlined,\r  CrownOutlined,\r  SettingOutlined,\r  InfoCircleOutlined,\r  EyeOutlined,\r  EyeInvisibleOutlined,\r  GlobalOutlined,\r  ApartmentOutlined,\r} from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport dayjs from 'dayjs';\rimport relativeTime from 'dayjs/plugin/relativeTime';\rimport 'dayjs/locale/tr';\rimport { usersApi, MasterUser, CreateUserRequest, UpdateUserRequest } from '@/shared/api/users.api';\rimport '../../styles/master-layout.css';\rimport './users.css';\rimport CountUp from 'react-countup';\rdayjs.extend(relativeTime);\rdayjs.locale('tr');\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst { Option } = Select;\rexport const MasterUsersPage: React.FC = () => {\r  const [users, setUsers] = useState<MasterUser[]>([]);\r  const [loading, setLoading] = useState(false);\r  const [showModal, setShowModal] = useState(false);\r  const [showPasswordModal, setShowPasswordModal] = useState(false);\r  const [showDetailsModal, setShowDetailsModal] = useState(false);\r  const [selectedUser, setSelectedUser] = useState<MasterUser | null>(null);\r  const [searchText, setSearchText] = useState('');\r  const [filterRole, setFilterRole] = useState<string>('');\r  const [filterStatus, setFilterStatus] = useState<boolean | undefined>();\r  const [showPassword, setShowPassword] = useState(false);\r  const [form] = Form.useForm();\r  const [passwordForm] = Form.useForm();\r  const [pagination, setPagination] = useState({\r    current: 1,\r    pageSize: 10,\r    total: 0,\r  });\r  useEffect(() => {\r    fetchUsers();\r  }, [pagination.current, pagination.pageSize, searchText, filterRole, filterStatus]);\r  const fetchUsers = async () => {\r    setLoading(true);\r    try {\r      const response = await usersApi.getAll({\r        page: pagination.current,\r        pageSize: pagination.pageSize,\r        search: searchText,\r        role: filterRole,\r        isActive: filterStatus,\r      });\r      if (response.data?.success && response.data?.data) {\r        const mappedUsers = response.data.data.map((user: any) => ({\r          id: user.id,\r          username: user.username || user.userName,\r          email: user.email,\r          firstName: user.firstName,\r          lastName: user.lastName,\r          phoneNumber: user.phoneNumber,\r          role: user.role || 'User',\r          isActive: user.isActive,\r          isTwoFactorEnabled: user.isTwoFactorEnabled || false,\r          lastLoginDate: user.lastLoginDate,\r          createdDate: user.createdDate || user.createdAt,\r          tenantAccess: user.tenantAccess || [],\r        }));\r        setUsers(mappedUsers);\r        setPagination(prev => ({\r          ...prev,\r          total: response.data.totalCount || mappedUsers.length,\r        }));\r      }\r    } catch (error) {\r      message.error('Kullanıcılar yüklenirken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const getRoleColor = (role: string) => {\r    const colors: Record<string, string> = {\r      'SuperAdmin': 'purple',\r      'Admin': 'red',\r      'Support': 'blue',\r      'User': 'green',\r      'Viewer': 'default',\r    };\r    return colors[role] || 'default';\r  };\r  const getRoleIcon = (role: string) => {\r    const icons: Record<string, React.ReactNode> = {\r      'SuperAdmin': <CrownOutlined />,\r      'Admin': <SafetyOutlined />,\r      'Support': <TeamOutlined />,\r      'User': <UserOutlined />,\r      'Viewer': <EyeOutlined />,\r    };\r    return icons[role] || <UserOutlined />;\r  };\r  const stats = [\r    {\r      title: 'Toplam Kullanıcı',\r      value: users.length,\r      icon: <TeamOutlined style={{ color: '#1890ff' }} />,\r      color: '#1890ff',\r      trend: 12,\r    },\r    {\r      title: 'Aktif Kullanıcı',\r      value: users.filter(u => u.isActive).length,\r      icon: <CheckCircleOutlined style={{ color: '#52c41a' }} />,\r      color: '#52c41a',\r      trend: 8,\r    },\r    {\r      title: 'Admin Kullanıcı',\r      value: users.filter(u => u.role === 'Admin' || u.role === 'SuperAdmin').length,\r      icon: <SafetyOutlined style={{ color: '#722ed1' }} />,\r      color: '#722ed1',\r      trend: -3,\r    },\r    {\r      title: '2FA Aktif',\r      value: users.filter(u => u.isTwoFactorEnabled).length,\r      icon: <LockOutlined style={{ color: '#fa8c16' }} />,\r      color: '#fa8c16',\r      trend: 25,\r    },\r  ];\r  const columns = [\r    {\r      title: 'Kullanıcı',\r      key: 'user',\r      render: (record: MasterUser) => (\r        <Space>\r          <Badge\r            dot\r            status={record.isActive ? 'success' : 'error'}\r            offset={[-5, 5]}\r          >\r            <Avatar icon={<UserOutlined />} style={{ backgroundColor: '#1890ff' }}>\r              {record.firstName?.[0]}{record.lastName?.[0]}\r            </Avatar>\r          </Badge>\r          <div>\r            <Text strong>{`${record.firstName} ${record.lastName}`}</Text>\r            <br />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              @{record.username}\r            </Text>\r          </div>\r        </Space>\r      ),\r    },\r    {\r      title: 'E-posta',\r      dataIndex: 'email',\r      key: 'email',\r      render: (email: string) => (\r        <Space>\r          <MailOutlined />\r          <Text>{email}</Text>\r        </Space>\r      ),\r    },\r    {\r      title: 'Telefon',\r      dataIndex: 'phoneNumber',\r      key: 'phoneNumber',\r      render: (phone: string) => phone ? (\r        <Space>\r          <PhoneOutlined />\r          <Text>{phone}</Text>\r        </Space>\r      ) : <Text type=\"secondary\">-</Text>,\r    },\r    {\r      title: 'Rol',\r      dataIndex: 'role',\r      key: 'role',\r      render: (role: string) => (\r        <Tag color={getRoleColor(role)} icon={getRoleIcon(role)}>\r          {role}\r        </Tag>\r      ),\r    },\r    {\r      title: 'Güvenlik',\r      key: 'security',\r      render: (record: MasterUser) => (\r        <Space>\r          {record.isTwoFactorEnabled && (\r            <Tooltip title=\"2FA Aktif\">\r              <Tag color=\"green\" icon={<LockOutlined />}>\r                2FA\r              </Tag>\r            </Tooltip>\r          )}\r          {record.tenantAccess && record.tenantAccess.length > 0 && (\r            <Tooltip title={`${record.tenantAccess.length} Tenant Erişimi`}>\r              <Tag color=\"blue\" icon={<ApartmentOutlined />}>\r                {record.tenantAccess.length}\r              </Tag>\r            </Tooltip>\r          )}\r        </Space>\r      ),\r    },\r    {\r      title: 'Son Giriş',\r      dataIndex: 'lastLoginDate',\r      key: 'lastLoginDate',\r      render: (date: string) => date ? (\r        <Tooltip title={dayjs(date).format('DD MMMM YYYY HH:mm')}>\r          <Text type=\"secondary\">{dayjs(date).fromNow()}</Text>\r        </Tooltip>\r      ) : <Text type=\"secondary\">Hiç giriş yapmadı</Text>,\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'isActive',\r      key: 'isActive',\r      render: (isActive: boolean) => (\r        <Tag color={isActive ? 'success' : 'error'}>\r          {isActive ? 'Aktif' : 'Pasif'}\r        </Tag>\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      width: 120,\r      render: (record: MasterUser) => (\r        <Dropdown\r          overlay={\r            <Menu>\r              <Menu.Item\r                key=\"view\"\r                icon={<EyeOutlined />}\r                onClick={() => handleViewDetails(record)}\r              >\r                Detaylar\r              </Menu.Item>\r              <Menu.Item\r                key=\"edit\"\r                icon={<EditOutlined />}\r                onClick={() => handleEdit(record)}\r              >\r                Düzenle\r              </Menu.Item>\r              <Menu.Item\r                key=\"password\"\r                icon={<KeyOutlined />}\r                onClick={() => handleResetPassword(record)}\r              >\r                Şifre Sıfırla\r              </Menu.Item>\r              <Menu.Divider />\r              <Menu.Item\r                key=\"toggle\"\r                icon={record.isActive ? <LockOutlined /> : <UnlockOutlined />}\r                onClick={() => handleToggleStatus(record)}\r              >\r                {record.isActive ? 'Devre Dışı Bırak' : 'Aktif Et'}\r              </Menu.Item>\r              <Menu.Divider />\r              <Menu.Item\r                key=\"delete\"\r                icon={<DeleteOutlined />}\r                danger\r                onClick={() => handleDelete(record.id)}\r              >\r                Sil\r              </Menu.Item>\r            </Menu>\r          }\r          placement=\"bottomRight\"\r        >\r          <Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r        </Dropdown>\r      ),\r    },\r  ];\r  const handleCreate = () => {\r    form.resetFields();\r    setSelectedUser(null);\r    setShowModal(true);\r  };\r  const handleEdit = (user: MasterUser) => {\r    setSelectedUser(user);\r    form.setFieldsValue({\r      firstName: user.firstName,\r      lastName: user.lastName,\r      email: user.email,\r      username: user.username,\r      phoneNumber: user.phoneNumber,\r      role: user.role,\r      isActive: user.isActive,\r    });\r    setShowModal(true);\r  };\r  const handleSubmit = async (values: any) => {\r    setLoading(true);\r    try {\r      if (selectedUser) {\r        // Update\r        const updateData: UpdateUserRequest = {\r          firstName: values.firstName,\r          lastName: values.lastName,\r          email: values.email,\r          phoneNumber: values.phoneNumber,\r          role: values.role,\r          isActive: values.isActive,\r        };\r        await usersApi.update(selectedUser.id, updateData);\r        message.success('Kullanıcı güncellendi');\r      } else {\r        // Create\r        const createData: CreateUserRequest = {\r          username: values.username,\r          email: values.email,\r          password: values.password,\r          firstName: values.firstName,\r          lastName: values.lastName,\r          phoneNumber: values.phoneNumber,\r          role: values.role,\r          isActive: values.isActive !== false,\r        };\r        await usersApi.create(createData);\r        message.success('Kullanıcı oluşturuldu');\r      }\r      setShowModal(false);\r      fetchUsers();\r    } catch (error) {\r      message.error(selectedUser ? 'Kullanıcı güncellenemedi' : 'Kullanıcı oluşturulamadı');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleToggleStatus = async (user: MasterUser) => {\r    try {\r      await usersApi.toggleStatus(user.id);\r      message.success(`Kullanıcı ${user.isActive ? 'devre dışı bırakıldı' : 'aktif edildi'}`);\r      fetchUsers();\r    } catch (error) {\r      message.error('Durum değiştirilemedi');\r    }\r  };\r  const handleDelete = async (id: string) => {\r    Modal.confirm({\r      title: 'Kullanıcıyı Sil',\r      content: 'Bu kullanıcıyı silmek istediğinizden emin misiniz?',\r      okText: 'Sil',\r      okType: 'danger',\r      cancelText: 'İptal',\r      onOk: async () => {\r        try {\r          await usersApi.delete(id);\r          message.success('Kullanıcı silindi');\r          fetchUsers();\r        } catch (error) {\r          message.error('Kullanıcı silinemedi');\r        }\r      },\r    });\r  };\r  const handleResetPassword = (user: MasterUser) => {\r    setSelectedUser(user);\r    passwordForm.resetFields();\r    setShowPasswordModal(true);\r  };\r  const handlePasswordSubmit = async (values: any) => {\r    if (!selectedUser) return;\r    setLoading(true);\r    try {\r      await usersApi.resetPassword(selectedUser.id, values.newPassword);\r      message.success('Şifre başarıyla sıfırlandı');\r      setShowPasswordModal(false);\r    } catch (error) {\r      message.error('Şifre sıfırlanamadı');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleViewDetails = (user: MasterUser) => {\r    setSelectedUser(user);\r    setShowDetailsModal(true);\r  };\r  const handleTableChange = (newPagination: any) => {\r    setPagination({\r      current: newPagination.current,\r      pageSize: newPagination.pageSize,\r      total: pagination.total,\r    });\r  };\r  return (\r    <div className=\"master-users-page\">\r      {/* Header */}\r      <motion.div \r        className=\"users-header\"\r        initial={{ opacity: 0, y: -20 }}\r        animate={{ opacity: 1, y: 0 }}\r        transition={{ duration: 0.5 }}\r      >\r        <div className=\"users-header-content\">\r          <Title level={1}>\r            <TeamOutlined /> Kullanıcı Yönetimi\r          </Title>\r          <Paragraph>Sistem kullanıcılarını yönetin ve yetkilendirin</Paragraph>\r        </div>\r        <div className=\"users-header-actions\">\r          <Button \r            icon={<ExportOutlined />}\r            size=\"large\"\r           aria-label=\"export outlined\">\r            Dışa Aktar\r          </Button>\r          <Button\r            type=\"primary\"\r            icon={<UserAddOutlined />}\r            onClick={handleCreate}\r            className=\"gradient-btn\"\r            size=\"large\"\r           aria-label=\"user add outlined\">\r            Yeni Kullanıcı\r          </Button>\r        </div>\r      </motion.div>\r      {/* Stats */}\r      <Row gutter={[24, 24]} className=\"users-stats\">\r        {stats.map((stat, index) => (\r          <Col xs={24} sm={12} lg={6} key={index}>\r            <motion.div\r              initial={{ opacity: 0, y: 20 }}\r              animate={{ opacity: 1, y: 0 }}\r              transition={{ delay: index * 0.1 }}\r              whileHover={{ scale: 1.02 }}\r            >\r              <Card className=\"user-stat-card\">\r                <div className=\"stat-icon-box\" style={{\r                  background: `linear-gradient(135deg, ${stat.color}20 0%, ${stat.color}10 100%)`\r                }}>\r                  {stat.icon}\r                </div>\r                <div className=\"stat-value\">\r                  <CountUp end={stat.value} separator=\",\" duration={2} />\r                </div>\r                <div className=\"stat-label\">{stat.title}</div>\r                {stat.trend && (\r                  <div className=\"stat-trend\">\r                    <Tag \r                      color={stat.trend > 0 ? 'success' : 'error'}\r                      style={{ fontSize: 12 }}\r                    >\r                      {stat.trend > 0 ? '↑' : '↓'} {Math.abs(stat.trend)}%\r                    </Tag>\r                    <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                      geçen aya göre\r                    </Text>\r                  </div>\r                )}\r              </Card>\r            </motion.div>\r          </Col>\r        ))}\r      </Row>\r      {/* Filters */}\r      <Card className=\"filter-card glass-morphism\">\r        <Row gutter={[16, 16]} align=\"middle\">\r          <Col flex=\"auto\">\r            <Space size=\"middle\">\r              <Input\r                placeholder=\"Kullanıcı ara...\"\r                prefix={<SearchOutlined / aria-label=\"input field\">}\r                value={searchText}\r                onChange={(e) => setSearchText(e.target.value)}\r                style={{ width: 250 }}\r                allowClear\r              />\r              <Select\r                placeholder=\"Rol\"\r                value={filterRole}\r                onChange={setFilterRole}\r                style={{ width: 150 }}\r                allowClear\r               aria-label=\"select field\">\r                <Option value=\"SuperAdmin\">Super Admin</Option>\r                <Option value=\"Admin\">Admin</Option>\r                <Option value=\"Support\">Destek</Option>\r                <Option value=\"User\">Kullanıcı</Option>\r                <Option value=\"Viewer\">İzleyici</Option>\r              </Select>\r              <Select\r                placeholder=\"Durum\"\r                value={filterStatus}\r                onChange={setFilterStatus}\r                style={{ width: 120 }}\r                allowClear\r               aria-label=\"select field\">\r                <Option value={true}>Aktif</Option>\r                <Option value={false}>Pasif</Option>\r              </Select>\r            </Space>\r          </Col>\r          <Col>\r            <Button\r              icon={<ReloadOutlined />}\r              onClick={fetchUsers}\r              loading={loading}\r             aria-label=\"reload outlined\">\r              Yenile\r            </Button>\r          </Col>\r        </Row>\r      </Card>\r      {/* Table */}\r      <Card className=\"table-card glass-morphism\">\r        <Table\r          columns={columns}\r          dataSource={users}\r          rowKey=\"id\"\r          loading={loading}\r          pagination={pagination}\r          onChange={handleTableChange}\r        />\r      </Card>\r      {/* Create/Edit Modal */}\r      <Modal\r        title={selectedUser ? 'Kullanıcı Düzenle' : 'Yeni Kullanıcı'}\r        open={showModal}\r        onCancel={() => setShowModal(false)}\r        footer={null}\r        width={600}\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleSubmit}\r        >\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"firstName\"\r                label=\"Ad\"\r                rules={[{ required: true, message: 'Ad zorunlu' }]}\r              >\r                <Input placeholder=\"Ad\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"lastName\"\r                label=\"Soyad\"\r                rules={[{ required: true, message: 'Soyad zorunlu' }]}\r              >\r                <Input placeholder=\"Soyad\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          {!selectedUser && (\r            <Form.Item\r              name=\"username\"\r              label=\"Kullanıcı Adı\"\r              rules={[\r                { required: true, message: 'Kullanıcı adı zorunlu' },\r                { min: 3, message: 'En az 3 karakter olmalı' },\r              ]}\r            >\r              <Input placeholder=\"Kullanıcı adı\" / aria-label=\"input field\">\r            </Form.Item>\r          )}\r          <Form.Item\r            name=\"email\"\r            label=\"E-posta\"\r            rules={[\r              { required: true, message: 'E-posta zorunlu' },\r              { type: 'email', message: 'Geçerli bir e-posta girin' },\r            ]}\r          >\r            <Input placeholder=\"E-posta\" / aria-label=\"input field\">\r          </Form.Item>\r          {!selectedUser && (\r            <Form.Item\r              name=\"password\"\r              label=\"Şifre\"\r              rules={[\r                { required: true, message: 'Şifre zorunlu' },\r                { min: 6, message: 'En az 6 karakter olmalı' },\r              ]}\r            >\r              <Input.Password\r                placeholder=\"Şifre\"\r                iconRender={visible = aria-label=\"input field\"> (visible ? <EyeOutlined /> : <EyeInvisibleOutlined />)}\r              />\r            </Form.Item>\r          )}\r          <Form.Item\r            name=\"phoneNumber\"\r            label=\"Telefon\"\r          >\r            <Input placeholder=\"Telefon numarası\" / aria-label=\"input field\">\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"role\"\r                label=\"Rol\"\r                rules={[{ required: true, message: 'Rol seçimi zorunlu' }]}\r              >\r                <Select placeholder=\"Rol seçin\" aria-label=\"select field\">\r                  <Option value=\"Admin\">Admin</Option>\r                  <Option value=\"Support\">Destek</Option>\r                  <Option value=\"User\">Kullanıcı</Option>\r                  <Option value=\"Viewer\">İzleyici</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"isActive\"\r                label=\"Durum\"\r                valuePropName=\"checked\"\r                initialValue={true}\r              >\r                <Switch checkedChildren=\"Aktif\" unCheckedChildren=\"Pasif\" />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => setShowModal(false)}>İptal</Button>\r              <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\r                {selectedUser ? 'Güncelle' : 'Oluştur'}\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Password Reset Modal */}\r      <Modal\r        title=\"Şifre Sıfırla\"\r        open={showPasswordModal}\r        onCancel={() => setShowPasswordModal(false)}\r        footer={null}\r        width={400}\r      >\r        <Alert\r          message={`${selectedUser?.firstName} ${selectedUser?.lastName} kullanıcısının şifresini sıfırlıyorsunuz`}\r          type=\"info\"\r          showIcon\r          style={{ marginBottom: 16 }}\r        />\r        <Form\r          form={passwordForm}\r          layout=\"vertical\"\r          onFinish={handlePasswordSubmit}\r        >\r          <Form.Item\r            name=\"newPassword\"\r            label=\"Yeni Şifre\"\r            rules={[\r              { required: true, message: 'Şifre zorunlu' },\r              { min: 6, message: 'En az 6 karakter olmalı' },\r            ]}\r          >\r            <Input.Password\r              placeholder=\"Yeni şifre\"\r              iconRender={visible = aria-label=\"input field\"> (visible ? <EyeOutlined /> : <EyeInvisibleOutlined />)}\r            />\r          </Form.Item>\r          <Form.Item\r            name=\"confirmPassword\"\r            label=\"Şifre Tekrar\"\r            dependencies={['newPassword']}\r            rules={[\r              { required: true, message: 'Şifre tekrarı zorunlu' },\r              ({ getFieldValue }) => ({\r                validator(_, value) {\r                  if (!value || getFieldValue('newPassword') === value) {\r                    return Promise.resolve();\r                  }\r                  return Promise.reject(new Error('Şifreler eşleşmiyor'));\r                },\r              }),\r            ]}\r          >\r            <Input.Password\r              placeholder=\"Şifre tekrar\"\r              iconRender={visible = aria-label=\"input field\"> (visible ? <EyeOutlined /> : <EyeInvisibleOutlined />)}\r            />\r          </Form.Item>\r          <Form.Item>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => setShowPasswordModal(false)}>İptal</Button>\r              <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\r                Şifreyi Sıfırla\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Details Modal */}\r      <Modal\r        title=\"Kullanıcı Detayları\"\r        open={showDetailsModal}\r        onCancel={() => setShowDetailsModal(false)}\r        footer={[\r          <Button key=\"close\" onClick={() => setShowDetailsModal(false)}>\r            Kapat\r          </Button>,\r        ]}\r        width={700}\r      >\r        {selectedUser && (\r          <Tabs defaultActiveKey=\"1\">\r            <TabPane tab=\"Genel Bilgiler\" key=\"1\">\r              <Descriptions bordered column={2}>\r                <Descriptions.Item label=\"Ad Soyad\" span={2}>\r                  {selectedUser.firstName} {selectedUser.lastName}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Kullanıcı Adı\">\r                  @{selectedUser.username}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Rol\">\r                  <Tag color={getRoleColor(selectedUser.role)}>\r                    {selectedUser.role}\r                  </Tag>\r                </Descriptions.Item>\r                <Descriptions.Item label=\"E-posta\">\r                  {selectedUser.email}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Telefon\">\r                  {selectedUser.phoneNumber || '-'}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Durum\">\r                  <Tag color={selectedUser.isActive ? 'success' : 'error'}>\r                    {selectedUser.isActive ? 'Aktif' : 'Pasif'}\r                  </Tag>\r                </Descriptions.Item>\r                <Descriptions.Item label=\"2FA\">\r                  <Tag color={selectedUser.isTwoFactorEnabled ? 'success' : 'default'}>\r                    {selectedUser.isTwoFactorEnabled ? 'Aktif' : 'Pasif'}\r                  </Tag>\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Kayıt Tarihi\" span={2}>\r                  {dayjs(selectedUser.createdDate).format('DD MMMM YYYY HH:mm')}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Son Giriş\" span={2}>\r                  {selectedUser.lastLoginDate\r                    ? dayjs(selectedUser.lastLoginDate).format('DD MMMM YYYY HH:mm')\r                    : 'Henüz giriş yapmadı'}\r                </Descriptions.Item>\r              </Descriptions>\r            </TabPane>\r            <TabPane tab=\"Tenant Erişimleri\" key=\"2\">\r              {selectedUser.tenantAccess && selectedUser.tenantAccess.length > 0 ? (\r                <List\r                  dataSource={selectedUser.tenantAccess}\r                  renderItem={(tenant) => (\r                    <List.Item>\r                      <List.Item.Meta\r                        avatar={<ApartmentOutlined />}\r                        title={tenant}\r                        description=\"Erişim yetkisi var\"\r                      />\r                    </List.Item>\r                  )}\r                />\r              ) : (\r                <Alert\r                  message=\"Tenant Erişimi Yok\"\r                  description=\"Bu kullanıcının herhangi bir tenant'a erişimi bulunmuyor.\"\r                  type=\"info\"\r                  showIcon\r                />\r              )}\r            </TabPane>\r            <TabPane tab=\"İşlem Geçmişi\" key=\"3\">\r              <Timeline>\r                <Timeline.Item color=\"green\">\r                  Hesap oluşturuldu - {dayjs(selectedUser.createdDate).format('DD MMMM YYYY')}\r                </Timeline.Item>\r                {selectedUser.lastLoginDate && (\r                  <Timeline.Item color=\"blue\">\r                    Son giriş - {dayjs(selectedUser.lastLoginDate).fromNow()}\r                  </Timeline.Item>\r                )}\r              </Timeline>\r            </TabPane>\r          </Tabs>\r        )}\r      </Modal>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Users/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect, useRef } from 'react';\rimport {\r  Button,\r  Card,\r  Progress,\r  Space,\r  Typography,\r  Tooltip,\r  Avatar,\r  Badge,\r  Steps,\r  message\r} from 'antd';\rimport {\r  CloseOutlined,\r  ArrowLeftOutlined,\r  ArrowRightOutlined,\r  CheckCircleOutlined,\r  PlayCircleOutlined,\r  PauseCircleOutlined,\r  RedoOutlined,\r  StepForwardOutlined,\r  InfoCircleOutlined,\r  BulbOutlined,\r  RocketOutlined,\r  TrophyOutlined\r} from '@ant-design/icons';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport Joyride, { CallBackProps, STATUS, Step as JoyrideStep, Styles } from 'react-joyride';\rimport confetti from 'canvas-confetti';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Step } = Steps;\rinterface TourStep {\r  target: string;\r  title: string;\r  content: string;\r  placement?: 'top' | 'bottom' | 'left' | 'right' | 'center';\r  disableBeacon?: boolean;\r  spotlightClicks?: boolean;\r  styles?: Partial<Styles>;\r  action?: () => void;\r}\rinterface OnboardingTourProps {\r  steps: TourStep[];\r  onComplete?: () => void;\r  onSkip?: () => void;\r  showProgress?: boolean;\r  continuous?: boolean;\r  autoStart?: boolean;\r  userId?: string;\r}\rexport const OnboardingTour: React.FC<OnboardingTourProps> = ({\r  steps,\r  onComplete,\r  onSkip,\r  showProgress = true,\r  continuous = true,\r  autoStart = false,\r  userId\r}) => {\r  const [run, setRun] = useState(autoStart);\r  const [stepIndex, setStepIndex] = useState(0);\r  const [tourProgress, setTourProgress] = useState(0);\r  const [isPaused, setIsPaused] = useState(false);\r  const [achievements, setAchievements] = useState<string[]>([]);\r  // Convert custom steps to Joyride format\r  const joyrideSteps: JoyrideStep[] = steps.map(step => ({\r    target: step.target,\r    title: step.title,\r    content: (\r      <div className=\"tour-step-content\">\r        <Paragraph>{step.content}</Paragraph>\r        {step.action && (\r          <Button \r            type=\"primary\" \r            size=\"small\" \r            onClick={step.action}\r            style={{ marginTop: 8 }}\r          >\r            Try it\r          </Button>\r        )}\r      </div>\r    ),\r    placement: step.placement || 'bottom',\r    disableBeacon: step.disableBeacon,\r    spotlightClicks: step.spotlightClicks,\r    styles: {\r      options: {\r        primaryColor: '#667eea',\r        zIndex: 10000,\r        ...step.styles?.options\r      },\r      ...step.styles\r    }\r  }));\r  const handleJoyrideCallback = (data: CallBackProps) => {\r    const { status, index, type } = data;\r    if (type === 'step:after') {\r      setStepIndex(index + 1);\r      setTourProgress(((index + 1) / steps.length) * 100);\r      // Check for achievements\r      checkAchievements(index + 1);\r    }\r    if (status === STATUS.FINISHED) {\r      handleTourComplete();\r    } else if (status === STATUS.SKIPPED) {\r      handleTourSkip();\r    }\r  };\r  const checkAchievements = (completedSteps: number) => {\r    const newAchievements = [];\r    if (completedSteps === 1) {\r      newAchievements.push('first_step');\r      showAchievement('İlk Adım', 'Turu başlattınız!');\r    }\r    if (completedSteps === Math.floor(steps.length / 2)) {\r      newAchievements.push('halfway');\r      showAchievement('Yarı Yol', 'Turun yarısını tamamladınız!');\r    }\r    if (completedSteps === steps.length) {\r      newAchievements.push('completed');\r      showAchievement('Tur Tamamlandı', 'Tüm adımları bitirdiniz!');\r    }\r    setAchievements(prev => [...prev, ...newAchievements]);\r  };\r  const showAchievement = (title: string, description: string) => {\r    message.success({\r      content: (\r        <Space>\r          <TrophyOutlined style={{ color: '#faad14', fontSize: 20 }} />\r          <div>\r            <Text strong>{title}</Text>\r            <br />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>{description}</Text>\r          </div>\r        </Space>\r      ),\r      duration: 3\r    });\r  };\r  const handleTourComplete = () => {\r    // Trigger confetti animation\r    confetti({\r      particleCount: 100,\r      spread: 70,\r      origin: { y: 0.6 }\r    });\r    // Save completion to localStorage\r    const completionData = {\r      userId,\r      completedAt: new Date().toISOString(),\r      steps: steps.length,\r      achievements\r    };\r    localStorage.setItem('onboarding_completed', JSON.stringify(completionData));\r    if (onComplete) {\r      onComplete();\r    }\r    message.success('Tebrikler! Onboarding turu tamamlandı 🎉');\r  };\r  const handleTourSkip = () => {\r    if (onSkip) {\r      onSkip();\r    }\r    setRun(false);\r    message.info('Tur atlandı. İstediğiniz zaman tekrar başlatabilirsiniz.');\r  };\r  const startTour = () => {\r    setRun(true);\r    setStepIndex(0);\r    setTourProgress(0);\r  };\r  const pauseTour = () => {\r    setIsPaused(true);\r    setRun(false);\r  };\r  const resumeTour = () => {\r    setIsPaused(false);\r    setRun(true);\r  };\r  const restartTour = () => {\r    setStepIndex(0);\r    setTourProgress(0);\r    setRun(true);\r    setIsPaused(false);\r  };\r  return (\r    <>\r      <Joyride\r        steps={joyrideSteps}\r        run={run}\r        stepIndex={stepIndex}\r        continuous={continuous}\r        showProgress={false}\r        showSkipButton\r        callback={handleJoyrideCallback}\r        locale={{\r          back: 'Geri',\r          close: 'Kapat',\r          last: 'Bitir',\r          next: 'İleri',\r          open: 'Aç',\r          skip: 'Atla'\r        }}\r        styles={{\r          options: {\r            primaryColor: '#667eea',\r            zIndex: 10000\r          }\r        }}\r      />\r      {/* Floating Control Panel */}\r      {showProgress && run && (\r        <motion.div\r          className=\"tour-control-panel\"\r          initial={{ opacity: 0, y: 20 }}\r          animate={{ opacity: 1, y: 0 }}\r          exit={{ opacity: 0, y: 20 }}\r        >\r          <Card size=\"small\" className=\"tour-control-card\">\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <div className=\"tour-header\">\r                <Space>\r                  <RocketOutlined style={{ color: '#667eea' }} />\r                  <Text strong>Onboarding Turu</Text>\r                </Space>\r                <Button\r                  type=\"text\"\r                  icon={<CloseOutlined />}\r                  size=\"small\"\r                  onClick={handleTourSkip}\r                / aria-label=\"close outlined\">\r              </div>\r              <Progress\r                percent={tourProgress}\r                strokeColor={{\r                  '0%': '#667eea',\r                  '100%': '#764ba2'\r                }}\r                size=\"small\"\r              />\r              <div className=\"tour-info\">\r                <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                  Adım {stepIndex + 1} / {steps.length}\r                </Text>\r              </div>\r              <Space>\r                {isPaused ? (\r                  <Tooltip title=\"Devam Et\">\r                    <Button\r                      icon={<PlayCircleOutlined />}\r                      size=\"small\"\r                      onClick={resumeTour}\r                    / aria-label=\"play circle outlined\">\r                  </Tooltip>\r                ) : (\r                  <Tooltip title=\"Duraklat\">\r                    <Button\r                      icon={<PauseCircleOutlined />}\r                      size=\"small\"\r                      onClick={pauseTour}\r                    / aria-label=\"pause circle outlined\">\r                  </Tooltip>\r                )}\r                <Tooltip title=\"Baştan Başla\">\r                  <Button\r                    icon={<RedoOutlined />}\r                    size=\"small\"\r                    onClick={restartTour}\r                  / aria-label=\"redo outlined\">\r                </Tooltip>\r                <Tooltip title=\"Turu Atla\">\r                  <Button\r                    icon={<StepForwardOutlined />}\r                    size=\"small\"\r                    onClick={handleTourSkip}\r                  / aria-label=\"step forward outlined\">\r                </Tooltip>\r              </Space>\r            </Space>\r          </Card>\r        </motion.div>\r      )}\r      {/* Start Tour Button (when tour is not running) */}\r      {!run && (\r        <motion.div\r          className=\"tour-start-button\"\r          initial={{ scale: 0 }}\r          animate={{ scale: 1 }}\r          whileHover={{ scale: 1.1 }}\r          whileTap={{ scale: 0.9 }}\r        >\r          <Tooltip title=\"Tur Başlat\">\r            <Button\r              type=\"primary\"\r              shape=\"circle\"\r              icon={<BulbOutlined />}\r              size=\"large\"\r              onClick={startTour}\r              style={{\r                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r                border: 'none',\r                boxShadow: '0 4px 12px rgba(102, 126, 234, 0.3)'\r              }}\r            / aria-label=\"bulb outlined\">\r          </Tooltip>\r        </motion.div>\r      )}\r    </>\r  );\r};\r// Interactive Walkthrough Component\rinterface InteractiveWalkthroughProps {\r  title: string;\r  description: string;\r  steps: Array<{\r    title: string;\r    description: string;\r    action?: () => void;\r    completed?: boolean;\r  }>;\r  onComplete?: () => void;\r}\rexport const InteractiveWalkthrough: React.FC<InteractiveWalkthroughProps> = ({\r  title,\r  description,\r  steps,\r  onComplete\r}) => {\r  const [currentStep, setCurrentStep] = useState(0);\r  const [completedSteps, setCompletedSteps] = useState<number[]>([]);\r  const handleStepComplete = (index: number) => {\r    setCompletedSteps(prev => [...prev, index]);\r    if (index < steps.length - 1) {\r      setCurrentStep(index + 1);\r    } else {\r      if (onComplete) {\r        onComplete();\r      }\r      message.success('Walkthrough tamamlandı!');\r    }\r  };\r  return (\r    <Card className=\"interactive-walkthrough\">\r      <Title level={4}>{title}</Title>\r      <Paragraph>{description}</Paragraph>\r      <Steps current={currentStep} style={{ marginTop: 24 }}>\r        {steps.map((step, index) => (\r          <Step\r            key={index}\r            title={step.title}\r            status={\r              completedSteps.includes(index) \r                ? 'finish' \r                : index === currentStep \r                ? 'process' \r                : 'wait'\r            }\r            icon={\r              completedSteps.includes(index) \r                ? <CheckCircleOutlined /> \r                : undefined\r            }\r          />\r        ))}\r      </Steps>\r      <Card\r        style={{ marginTop: 24 }}\r        className=\"walkthrough-step-card\"\r      >\r        <Title level={5}>{steps[currentStep]?.title}</Title>\r        <Paragraph>{steps[currentStep]?.description}</Paragraph>\r        <Space>\r          <Button\r            type=\"primary\"\r            onClick={() => {\r              if (steps[currentStep]?.action) {\r                steps[currentStep].action!();\r              }\r              handleStepComplete(currentStep);\r            }}\r          >\r            {currentStep === steps.length - 1 ? 'Tamamla' : 'Devam'}\r          </Button>\r          {currentStep > 0 && (\r            <Button onClick={() => setCurrentStep(currentStep - 1)}>\r              Geri\r            </Button>\r          )}\r        </Space>\r      </Card>\r    </Card>\r  );\r};\r// Checklist Component\rinterface ChecklistItem {\r  id: string;\r  title: string;\r  description?: string;\r  completed: boolean;\r  required?: boolean;\r}\rinterface OnboardingChecklistProps {\r  items: ChecklistItem[];\r  onItemComplete?: (itemId: string) => void;\r  title?: string;\r}\rexport const OnboardingChecklist: React.FC<OnboardingChecklistProps> = ({\r  items,\r  onItemComplete,\r  title = 'Başlangıç Kontrol Listesi'\r}) => {\r  const completedCount = items.filter(item => item.completed).length;\r  const progress = (completedCount / items.length) * 100;\r  return (\r    <Card className=\"onboarding-checklist\">\r      <Space direction=\"vertical\" style={{ width: '100%' }}>\r        <div className=\"checklist-header\">\r          <Title level={4}>{title}</Title>\r          <Badge\r            count={`${completedCount}/${items.length}`}\r            style={{ backgroundColor: progress === 100 ? '#52c41a' : '#667eea' }}\r          />\r        </div>\r        <Progress\r          percent={progress}\r          strokeColor={{\r            '0%': '#667eea',\r            '100%': '#764ba2'\r          }}\r          status={progress === 100 ? 'success' : 'active'}\r        />\r        <div className=\"checklist-items\">\r          {items.map(item => (\r            <motion.div\r              key={item.id}\r              className={`checklist-item ${item.completed ? 'completed' : ''}`}\r              whileHover={{ scale: 1.02 }}\r              whileTap={{ scale: 0.98 }}\r              onClick={() => !item.completed && onItemComplete && onItemComplete(item.id)}\r            >\r              <Space>\r                {item.completed ? (\r                  <CheckCircleOutlined style={{ color: '#52c41a', fontSize: 20 }} />\r                ) : (\r                  <div className=\"checklist-checkbox\" />\r                )}\r                <div>\r                  <Text strong={!item.completed} delete={item.completed}>\r                    {item.title}\r                  </Text>\r                  {item.required && !item.completed && (\r                    <Badge status=\"error\" text=\"Zorunlu\" style={{ marginLeft: 8 }} />\r                  )}\r                  {item.description && (\r                    <Text type=\"secondary\" style={{ display: 'block', fontSize: 12 }}>\r                      {item.description}\r                    </Text>\r                  )}\r                </div>\r              </Space>\r            </motion.div>\r          ))}\r        </div>\r        {progress === 100 && (\r          <motion.div\r            initial={{ opacity: 0, scale: 0.8 }}\r            animate={{ opacity: 1, scale: 1 }}\r            className=\"checklist-complete\"\r          >\r            <TrophyOutlined style={{ fontSize: 32, color: '#faad14' }} />\r            <Title level={5}>Tebrikler!</Title>\r            <Text>Tüm görevleri tamamladınız!</Text>\r          </motion.div>\r        )}\r      </Space>\r    </Card>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/onboarding/components/OnboardingTour/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { useNavigate, useSearchParams } from 'react-router-dom';\rimport {\r  Card,\r  Form,\r  Input,\r  Button,\r  Row,\r  Col,\r  Typography,\r  Space,\r  Alert,\r  Modal,\r  Steps,\r  Spin,\r  Divider,\r  Radio,\r  Select,\r  Checkbox,\r  message,\r  Tag,\r  Statistic,\r  Progress,\r  InputNumber,\r  Tooltip,\r  Badge,\r  Result,\r  List,\r  Avatar,\r  Tabs\r} from 'antd';\rimport {\r  CreditCardOutlined,\r  LockOutlined,\r  SafetyOutlined,\r  CheckCircleOutlined,\r  LoadingOutlined,\r  BankOutlined,\r  MobileOutlined,\r  WalletOutlined,\r  InfoCircleOutlined,\r  SecurityScanOutlined,\r  GlobalOutlined,\r  FieldTimeOutlined,\r  FileProtectOutlined,\r  ShoppingCartOutlined,\r  CalendarOutlined,\r  UserOutlined,\r  PhoneOutlined,\r  MailOutlined,\r  EnvironmentOutlined,\r  ExclamationCircleOutlined\r} from '@ant-design/icons';\rimport { apiClient } from '@/shared/api/client';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Step } = Steps;\rconst { TabPane } = Tabs;\rinterface PaymentData {\r  tenantId: string;\r  packageId: string;\r  packageName: string;\r  amount: number;\r  currency: string;\r  billingPeriod: string;\r  companyName: string;\r  contactEmail: string;\r}\rexport const PaymentPage: React.FC = () => {\r  const navigate = useNavigate();\r  const [searchParams] = useSearchParams();\r  const [form] = Form.useForm();\r  // Payment states\r  const [paymentMethod, setPaymentMethod] = useState<'credit_card' | 'bank_transfer' | 'digital_wallet'>('credit_card');\r  const [currentStep, setCurrentStep] = useState(0);\r  const [processing, setProcessing] = useState(false);\r  const [show3DSecure, setShow3DSecure] = useState(false);\r  const [smsCode, setSmsCode] = useState('');\r  const [timeLeft, setTimeLeft] = useState(180); // 3 minutes for 3D Secure\r  const [paymentComplete, setPaymentComplete] = useState(false);\r  const [transactionId, setTransactionId] = useState('');\r  const [invoiceNumber, setInvoiceNumber] = useState('');\r  // Payment data from registration\r  const [paymentData, setPaymentData] = useState<PaymentData | null>(null);\r  // Card display states\r  const [cardNumber, setCardNumber] = useState('');\r  const [cardName, setCardName] = useState('');\r  const [cardExpiry, setCardExpiry] = useState('');\r  const [cardCvv, setCardCvv] = useState('');\r  const [cardType, setCardType] = useState('');\r  const [installment, setInstallment] = useState(1);\r  useEffect(() => {\r    // Get payment data from URL params or session\r    const data: PaymentData = {\r      tenantId: searchParams.get('tenantId') || '',\r      packageId: searchParams.get('packageId') || '',\r      packageName: searchParams.get('package') || 'Profesyonel',\r      amount: Number(searchParams.get('amount')) || 999,\r      currency: '₺',\r      billingPeriod: searchParams.get('period') || 'Monthly',\r      companyName: searchParams.get('company') || 'Demo Şirket',\r      contactEmail: searchParams.get('email') || 'demo@example.com'\r    };\r    setPaymentData(data);\r  }, [searchParams]);\r  // 3D Secure countdown timer\r  useEffect(() => {\r    if (show3DSecure && timeLeft > 0) {\r      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r      return () => clearTimeout(timer);\r    } else if (timeLeft === 0) {\r      message.error('3D Secure doğrulama süresi doldu');\r      setShow3DSecure(false);\r      setTimeLeft(180);\r    }\r  }, [show3DSecure, timeLeft]);\r  // Detect card type\r  const detectCardType = (number: string) => {\r    const cleanNumber = number.replace(/\\s/g, '');\r    if (cleanNumber.startsWith('4')) return 'visa';\r    if (cleanNumber.startsWith('5')) return 'mastercard';\r    if (cleanNumber.startsWith('3')) return 'amex';\r    if (cleanNumber.startsWith('6')) return 'troy';\r    return '';\r  };\r  // Format card number\r  const formatCardNumber = (value: string) => {\r    const v = value.replace(/\\s+/g, '').replace(/[^0-9]/gi, '');\r    const matches = v.match(/\\d{4,16}/g);\r    const match = (matches && matches[0]) || '';\r    const parts = [];\r    for (let i = 0, len = match.length; i < len; i += 4) {\r      parts.push(match.substring(i, i + 4));\r    }\r    if (parts.length) {\r      return parts.join(' ');\r    } else {\r      return value;\r    }\r  };\r  // Format expiry date\r  const formatExpiry = (value: string) => {\r    const v = value.replace(/\\s+/g, '').replace(/[^0-9]/gi, '');\r    if (v.length >= 2) {\r      return v.substring(0, 2) + '/' + v.substring(2, 4);\r    }\r    return v;\r  };\r  // Handle card number change\r  const handleCardNumberChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r    const formatted = formatCardNumber(e.target.value);\r    setCardNumber(formatted);\r    setCardType(detectCardType(formatted));\r  };\r  // Calculate installment options\r  const calculateInstallments = () => {\r    if (!paymentData) return [];\r    const baseAmount = paymentData.amount;\r    const installmentOptions = [\r      { value: 1, label: 'Tek Çekim', amount: baseAmount },\r      { value: 2, label: '2 Taksit', amount: baseAmount / 2 },\r      { value: 3, label: '3 Taksit', amount: baseAmount / 3 },\r      { value: 6, label: '6 Taksit', amount: baseAmount / 6 },\r      { value: 9, label: '9 Taksit', amount: baseAmount / 9 },\r      { value: 12, label: '12 Taksit', amount: baseAmount / 12 }\r    ];\r    return installmentOptions;\r  };\r  // Process credit card payment\r  const processCreditCardPayment = async (values: any) => {\r    setProcessing(true);\r    setCurrentStep(1);\r    // Simulate payment gateway processing\r    await new Promise(resolve => setTimeout(resolve, 2000));\r    // Show 3D Secure\r    setShow3DSecure(true);\r    setProcessing(false);\r  };\r  // Verify 3D Secure\r  const verify3DSecure = async () => {\r    if (smsCode !== '123456') {\r      message.error('Doğrulama kodu hatalı');\r      return;\r    }\r    setProcessing(true);\r    setShow3DSecure(false);\r    setCurrentStep(2);\r    // Simulate final payment processing\r    await new Promise(resolve => setTimeout(resolve, 3000));\r    // Generate transaction details\r    const txId = `TRX${Date.now()}`;\r    const invNo = `INV-${Date.now()}`;\r    setTransactionId(txId);\r    setInvoiceNumber(invNo);\r    // Call backend to complete payment\r    try {\r      await apiClient.post('/api/public/process-payment', {\r        tenantId: paymentData?.tenantId,\r        packageId: paymentData?.packageId,\r        amount: paymentData?.amount,\r        currency: paymentData?.currency,\r        paymentMethod: 'credit_card',\r        billingPeriod: paymentData?.billingPeriod,\r        transactionId: txId,\r        invoiceNumber: invNo\r      });\r      setPaymentComplete(true);\r      message.success('Ödeme başarıyla tamamlandı!');\r    } catch (error) {\r      message.error('Ödeme işlemi başarısız');\r    } finally {\r      setProcessing(false);\r    }\r  };\r  // Render credit card form\r  const renderCreditCardForm = () => (\r    <div className=\"payment-form-container\">\r      <Row gutter={[32, 32]}>\r        <Col xs={24} lg={14}>\r          <Card className=\"payment-form-card\">\r            <Title level={4}>\r              <CreditCardOutlined /> Kart Bilgileri\r            </Title>\r            <Form\r              form={form}\r              layout=\"vertical\"\r              onFinish={processCreditCardPayment}\r              autoComplete=\"off\"\r            >\r              <Form.Item\r                label=\"Kart Numarası\"\r                name=\"cardNumber\"\r                rules={[\r                  { required: true, message: 'Kart numarası zorunludur' },\r                  { pattern: /^[\\d\\s]{19}$/, message: 'Geçerli bir kart numarası giriniz' }\r                ]}\r              >\r                <Input\r                  size=\"large\"\r                  placeholder=\"1234 5678 9012 3456\"\r                  value={cardNumber}\r                  onChange={handleCardNumberChange}\r                  maxLength={19}\r                  prefix={<CreditCardOutlined / aria-label=\"input field\">}\r                  suffix={\r                    cardType && (\r                      <img\r                        src={`/images/cards/${cardType}.png`}\r                        alt={cardType}\r                        style={{ height: 20 }}\r                      />\r                    )\r                  }\r                />\r              </Form.Item>\r              <Form.Item\r                label=\"Kart Üzerindeki İsim\"\r                name=\"cardName\"\r                rules={[{ required: true, message: 'Kart sahibi adı zorunludur' }]}\r              >\r                <Input\r                  size=\"large\"\r                  placeholder=\"AD SOYAD\"\r                  value={cardName}\r                  onChange={(e) = aria-label=\"input field\"> setCardName(e.target.value.toUpperCase())}\r                  style={{ textTransform: 'uppercase' }}\r                />\r              </Form.Item>\r              <Row gutter={16}>\r                <Col span={12}>\r                  <Form.Item\r                    label=\"Son Kullanma Tarihi\"\r                    name=\"expiry\"\r                    rules={[\r                      { required: true, message: 'Son kullanma tarihi zorunludur' },\r                      { pattern: /^(0[1-9]|1[0-2])\\/\\d{2}$/, message: 'AA/YY formatında giriniz' }\r                    ]}\r                  >\r                    <Input\r                      size=\"large\"\r                      placeholder=\"AA/YY\"\r                      value={cardExpiry}\r                      onChange={(e) = aria-label=\"input field\"> setCardExpiry(formatExpiry(e.target.value))}\r                      maxLength={5}\r                    />\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item\r                    label={\r                      <Space>\r                        CVV\r                        <Tooltip title=\"Kartınızın arkasındaki 3 haneli güvenlik kodu\">\r                          <InfoCircleOutlined />\r                        </Tooltip>\r                      </Space>\r                    }\r                    name=\"cvv\"\r                    rules={[\r                      { required: true, message: 'CVV zorunludur' },\r                      { pattern: /^\\d{3,4}$/, message: '3 veya 4 haneli CVV giriniz' }\r                    ]}\r                  >\r                    <Input.Password\r                      size=\"large\"\r                      placeholder=\"123\"\r                      value={cardCvv}\r                      onChange={(e) = aria-label=\"input field\"> setCardCvv(e.target.value)}\r                      maxLength={4}\r                    />\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item label=\"Taksit Seçenekleri\">\r                <Radio.Group\r                  value={installment}\r                  onChange={(e) => setInstallment(e.target.value)}\r                  style={{ width: '100%' }}\r                >\r                  <Row gutter={[8, 8]}>\r                    {calculateInstallments().map((option) => (\r                      <Col span={8} key={option.value}>\r                        <Radio.Button value={option.value} style={{ width: '100%', textAlign: 'center' }}>\r                          <div>\r                            <Text strong>{option.label}</Text>\r                            <br />\r                            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                              {paymentData?.currency}{option.amount.toFixed(2)}\r                            </Text>\r                          </div>\r                        </Radio.Button>\r                      </Col>\r                    ))}\r                  </Row>\r                </Radio.Group>\r              </Form.Item>\r              <Divider />\r              <Form.Item\r                name=\"saveCard\"\r                valuePropName=\"checked\"\r              >\r                <Checkbox>\r                  Kartımı gelecek ödemeler için kaydet\r                </Checkbox>\r              </Form.Item>\r              <Form.Item\r                name=\"agreement\"\r                valuePropName=\"checked\"\r                rules={[\r                  {\r                    validator: (_, value) =>\r                      value ? Promise.resolve() : Promise.reject(new Error('Sözleşmeyi kabul etmelisiniz')),\r                  },\r                ]}\r              >\r                <Checkbox>\r                  <a href=\"#\" target=\"_blank\">Ön Bilgilendirme Formu</a> ve{' '}\r                  <a href=\"#\" target=\"_blank\">Mesafeli Satış Sözleşmesi</a>'ni okudum ve kabul ediyorum\r                </Checkbox>\r              </Form.Item>\r              <Button\r                type=\"primary\"\r                htmlType=\"submit\"\r                size=\"large\"\r                block\r                loading={processing}\r                icon={<LockOutlined />}\r               aria-label=\"lock outlined\">\r                Güvenli Ödeme Yap\r              </Button>\r            </Form>\r            <Divider />\r            <div className=\"security-badges\">\r              <Space size=\"large\" wrap>\r                <Space>\r                  <SafetyOutlined style={{ fontSize: 24, color: '#52c41a' }} />\r                  <Text>256-bit SSL</Text>\r                </Space>\r                <Space>\r                  <SecurityScanOutlined style={{ fontSize: 24, color: '#1890ff' }} />\r                  <Text>PCI DSS</Text>\r                </Space>\r                <Space>\r                  <FileProtectOutlined style={{ fontSize: 24, color: '#722ed1' }} />\r                  <Text>3D Secure</Text>\r                </Space>\r              </Space>\r            </div>\r          </Card>\r          {/* Bank logos */}\r          <Card className=\"bank-logos\" style={{ marginTop: 16 }}>\r            <Text type=\"secondary\">Anlaşmalı Bankalar:</Text>\r            <div className=\"bank-logo-grid\">\r              {['garanti', 'isbank', 'akbank', 'yapikredi', 'qnb', 'denizbank', 'teb', 'ing'].map(bank => (\r                <div key={bank} className=\"bank-logo\">\r                  <img src={`/images/banks/${bank}.png`} alt={bank} />\r                </div>\r              ))}\r            </div>\r          </Card>\r        </Col>\r        <Col xs={24} lg={10}>\r          {/* Visual credit card */}\r          <div className=\"credit-card-visual\">\r            <div className={`credit-card ${cardType}`}>\r              <div className=\"card-front\">\r                <div className=\"card-chip\"></div>\r                <div className=\"card-logo\">\r                  {cardType && <img src={`/images/cards/${cardType}-white.png`} alt={cardType} />}\r                </div>\r                <div className=\"card-number\">\r                  {cardNumber || '•••• •••• •••• ••••'}\r                </div>\r                <div className=\"card-info\">\r                  <div className=\"card-holder\">\r                    <Text className=\"label\">Card Holder</Text>\r                    <Text className=\"value\">{cardName || 'AD SOYAD'}</Text>\r                  </div>\r                  <div className=\"card-expiry\">\r                    <Text className=\"label\">Expires</Text>\r                    <Text className=\"value\">{cardExpiry || 'AA/YY'}</Text>\r                  </div>\r                </div>\r              </div>\r            </div>\r          </div>\r          {/* Order summary */}\r          <Card className=\"order-summary\" style={{ marginTop: 24 }}>\r            <Title level={4}>\r              <ShoppingCartOutlined /> Sipariş Özeti\r            </Title>\r            <div className=\"summary-item\">\r              <Text>Şirket:</Text>\r              <Text strong>{paymentData?.companyName}</Text>\r            </div>\r            <div className=\"summary-item\">\r              <Text>Paket:</Text>\r              <Text strong>{paymentData?.packageName}</Text>\r            </div>\r            <div className=\"summary-item\">\r              <Text>Dönem:</Text>\r              <Text strong>\r                {paymentData?.billingPeriod === 'Monthly' ? 'Aylık' : 'Yıllık'}\r              </Text>\r            </div>\r            {installment > 1 && (\r              <div className=\"summary-item\">\r                <Text>Taksit:</Text>\r                <Text strong>{installment} Taksit</Text>\r              </div>\r            )}\r            <Divider />\r            <div className=\"summary-total\">\r              <Title level={5}>Toplam Tutar</Title>\r              <Title level={3} style={{ margin: 0, color: '#52c41a' }}>\r                {paymentData?.currency}{paymentData?.amount}\r              </Title>\r              {installment > 1 && (\r                <Text type=\"secondary\">\r                  {installment} x {paymentData?.currency}\r                  {(paymentData?.amount || 0) / installment}\r                </Text>\r              )}\r            </div>\r            <Alert\r              message=\"Güvenli Ödeme\"\r              description=\"Tüm işlemleriniz 256-bit SSL ile korunmaktadır\"\r              type=\"success\"\r              showIcon\r              icon={<SafetyOutlined />}\r              style={{ marginTop: 16 }}\r            />\r          </Card>\r          {/* Help section */}\r          <Card style={{ marginTop: 16 }}>\r            <Title level={5}>Yardım ve Destek</Title>\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <Text>\r                <PhoneOutlined /> 0850 123 45 67\r              </Text>\r              <Text>\r                <MailOutlined /> destek@stocker.com\r              </Text>\r              <Text>\r                <FieldTimeOutlined /> 7/24 Canlı Destek\r              </Text>\r            </Space>\r          </Card>\r        </Col>\r      </Row>\r    </div>\r  );\r  // Render 3D Secure modal\r  const render3DSecure = () => (\r    <Modal\r      title={\r        <Space>\r          <SecurityScanOutlined style={{ color: '#1890ff' }} />\r          3D Secure Doğrulama\r        </Space>\r      }\r      visible={show3DSecure}\r      footer={null}\r      closable={false}\r      width={500}\r    >\r      <div className=\"secure-3d-container\">\r        <Alert\r          message=\"Güvenlik Doğrulaması\"\r          description=\"Bankanız tarafından cep telefonunuza SMS ile gönderilen 6 haneli doğrulama kodunu giriniz.\"\r          type=\"info\"\r          showIcon\r          style={{ marginBottom: 24 }}\r        />\r        <div className=\"bank-info\">\r          <img src=\"/images/banks/bank-logo.png\" alt=\"Bank\" style={{ height: 40 }} />\r          <Title level={5} style={{ margin: '16px 0' }}>\r            DEMO BANK 3D Secure\r          </Title>\r        </div>\r        <div className=\"transaction-info\">\r          <div className=\"info-row\">\r            <Text type=\"secondary\">İşyeri:</Text>\r            <Text strong>Stocker SaaS Platform</Text>\r          </div>\r          <div className=\"info-row\">\r            <Text type=\"secondary\">Tutar:</Text>\r            <Text strong>{paymentData?.currency}{paymentData?.amount}</Text>\r          </div>\r          <div className=\"info-row\">\r            <Text type=\"secondary\">Tarih:</Text>\r            <Text strong>{new Date().toLocaleString('tr-TR')}</Text>\r          </div>\r          <div className=\"info-row\">\r            <Text type=\"secondary\">Kart:</Text>\r            <Text strong>**** **** **** {cardNumber.slice(-4)}</Text>\r          </div>\r        </div>\r        <Divider />\r        <Form onFinish={verify3DSecure}>\r          <Form.Item\r            label=\"SMS Doğrulama Kodu\"\r            name=\"smsCode\"\r            rules={[{ required: true, message: 'Doğrulama kodu zorunludur' }]}\r            extra={\r              <Space>\r                <Text type=\"secondary\">Demo için kod:</Text>\r                <Text type=\"success\" strong>123456</Text>\r              </Space>\r            }\r          >\r            <Input\r              size=\"large\"\r              placeholder=\"6 haneli kod\"\r              maxLength={6}\r              value={smsCode}\r              onChange={(e) = aria-label=\"input field\"> setSmsCode(e.target.value)}\r              prefix={<MobileOutlined />}\r              suffix={\r                <Text type=\"secondary\">\r                  {Math.floor(timeLeft / 60)}:{(timeLeft % 60).toString().padStart(2, '0')}\r                </Text>\r              }\r            />\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Button\r                size=\"large\"\r                block\r                onClick={() => {\r                  setShow3DSecure(false);\r                  message.info('İşlem iptal edildi');\r                }}\r              >\r                İptal\r              </Button>\r            </Col>\r            <Col span={12}>\r              <Button\r                type=\"primary\"\r                size=\"large\"\r                block\r                htmlType=\"submit\"\r                loading={processing}\r              >\r                Doğrula ve Öde\r              </Button>\r            </Col>\r          </Row>\r        </Form>\r        <Alert\r          message=\"Test Ortamı\"\r          description=\"Bu bir test işlemidir. Gerçek ödeme alınmayacaktır.\"\r          type=\"warning\"\r          style={{ marginTop: 16 }}\r        />\r      </div>\r    </Modal>\r  );\r  // Render payment success\r  const renderPaymentSuccess = () => (\r    <Result\r      status=\"success\"\r      title=\"Ödeme Başarılı!\"\r      subTitle={\r        <div>\r          <Paragraph>\r            Ödemeniz başarıyla alındı ve hesabınız aktif edildi.\r          </Paragraph>\r          <Space direction=\"vertical\" style={{ width: '100%', marginTop: 24 }}>\r            <div className=\"success-detail\">\r              <Text type=\"secondary\">İşlem No:</Text>\r              <Text strong copyable>{transactionId}</Text>\r            </div>\r            <div className=\"success-detail\">\r              <Text type=\"secondary\">Fatura No:</Text>\r              <Text strong copyable>{invoiceNumber}</Text>\r            </div>\r            <div className=\"success-detail\">\r              <Text type=\"secondary\">Tutar:</Text>\r              <Text strong>\r                {paymentData?.currency}{paymentData?.amount}\r              </Text>\r            </div>\r            <div className=\"success-detail\">\r              <Text type=\"secondary\">Tarih:</Text>\r              <Text strong>{new Date().toLocaleString('tr-TR')}</Text>\r            </div>\r          </Space>\r        </div>\r      }\r      extra={[\r        <Button key=\"invoice\" icon={<FileProtectOutlined />} aria-label=\"file protect outlined\">\r          Faturayı İndir\r        </Button>,\r        <Button\r          type=\"primary\"\r          key=\"console\"\r          icon={<CheckCircleOutlined />}\r          onClick={() = aria-label=\"check circle outlined\"> navigate('/login')}\r        >\r          Panele Git\r        </Button>\r      ]}\r    />\r  );\r  if (!paymentData) {\r    return (\r      <div style={{ textAlign: 'center', padding: 100 }}>\r        <Spin size=\"large\" />\r      </div>\r    );\r  }\r  return (\r    <div className=\"payment-page\">\r      <div className=\"payment-header\">\r        <div className=\"container\">\r          <Space size=\"large\">\r            <img src=\"/logo.png\" alt=\"Stocker\" style={{ height: 40 }} />\r            <Title level={3} style={{ margin: 0, color: '#fff' }}>\r              Güvenli Ödeme\r            </Title>\r          </Space>\r          <Space>\r            <SafetyOutlined style={{ fontSize: 24, color: '#52c41a' }} />\r            <Text style={{ color: '#fff' }}>256-bit SSL Güvenlik</Text>\r          </Space>\r        </div>\r      </div>\r      <div className=\"payment-content\">\r        <div className=\"container\">\r          <Steps\r            current={currentStep}\r            style={{ marginBottom: 32 }}\r            items={[\r              {\r                title: 'Ödeme Bilgileri',\r                icon: <CreditCardOutlined />\r              },\r              {\r                title: 'Doğrulama',\r                icon: <SecurityScanOutlined />\r              },\r              {\r                title: 'Tamamlandı',\r                icon: <CheckCircleOutlined />\r              }\r            ]}\r          />\r          {paymentComplete ? (\r            renderPaymentSuccess()\r          ) : (\r            <>\r              <Tabs\r                activeKey={paymentMethod}\r                onChange={(key) => setPaymentMethod(key as any)}\r                size=\"large\"\r              >\r                <TabPane\r                  tab={\r                    <Space>\r                      <CreditCardOutlined />\r                      Kredi/Banka Kartı\r                    </Space>\r                  }\r                  key=\"credit_card\"\r                >\r                  {renderCreditCardForm()}\r                </TabPane>\r                <TabPane\r                  tab={\r                    <Space>\r                      <BankOutlined />\r                      Havale/EFT\r                    </Space>\r                  }\r                  key=\"bank_transfer\"\r                >\r                  <Card>\r                    <Alert\r                      message=\"Banka Havalesi Bilgileri\"\r                      description=\"Aşağıdaki hesap bilgilerine havale/EFT yapabilirsiniz.\"\r                      type=\"info\"\r                      showIcon\r                      style={{ marginBottom: 24 }}\r                    />\r                    <List\r                      dataSource={[\r                        { bank: 'Garanti BBVA', iban: 'TR12 0006 2000 1234 0006 2345 67', branch: 'Levent Şubesi' },\r                        { bank: 'İş Bankası', iban: 'TR34 0006 4000 0011 2345 6789 00', branch: 'Maslak Şubesi' },\r                        { bank: 'Akbank', iban: 'TR56 0004 6000 5888 8000 1234 56', branch: 'Sarıyer Şubesi' }\r                      ]}\r                      renderItem={(item) => (\r                        <List.Item>\r                          <Card style={{ width: '100%' }}>\r                            <Space direction=\"vertical\" style={{ width: '100%' }}>\r                              <Text strong>{item.bank}</Text>\r                              <Text copyable>{item.iban}</Text>\r                              <Text type=\"secondary\">{item.branch}</Text>\r                            </Space>\r                          </Card>\r                        </List.Item>\r                      )}\r                    />\r                    <Alert\r                      message=\"Önemli\"\r                      description={`Açıklama kısmına \"${paymentData.companyName} - ${invoiceNumber}\" yazınız.`}\r                      type=\"warning\"\r                      style={{ marginTop: 16 }}\r                    />\r                  </Card>\r                </TabPane>\r                <TabPane\r                  tab={\r                    <Space>\r                      <WalletOutlined />\r                      Dijital Cüzdan\r                    </Space>\r                  }\r                  key=\"digital_wallet\"\r                >\r                  <Card>\r                    <Row gutter={[16, 16]}>\r                      {['PayPal', 'Apple Pay', 'Google Pay', 'BKM Express'].map((wallet) => (\r                        <Col span={12} key={wallet}>\r                          <Card\r                            hoverable\r                            className=\"wallet-card\"\r                            onClick={() => message.info(`${wallet} ile ödeme simülasyonu`)}\r                          >\r                            <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                              <WalletOutlined style={{ fontSize: 48, color: '#1890ff' }} />\r                              <Text strong>{wallet}</Text>\r                            </Space>\r                          </Card>\r                        </Col>\r                      ))}\r                    </Row>\r                  </Card>\r                </TabPane>\r              </Tabs>\r            </>\r          )}\r        </div>\r      </div>\r      {render3DSecure()}\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/payment/pages/PaymentPage/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { Layout, Typography, Card, Row, Col, Button, Tag, Space, Switch, List, Tooltip, Badge, Tabs, message } from 'antd';\rimport {\r  RocketOutlined,\r  CheckCircleOutlined,\r  CrownOutlined,\r  ThunderboltOutlined,\r  StarFilled,\r  UserOutlined,\r  ArrowLeftOutlined,\r  InfoCircleOutlined,\r  FireOutlined,\r  GiftOutlined,\r  SafetyOutlined,\r  CustomerServiceOutlined,\r  ApiOutlined,\r  CloudOutlined,\r  TeamOutlined,\r  DashboardOutlined,\r  GlobalOutlined\r} from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport { motion } from 'framer-motion';\rimport { PricingCalculator } from '../../components/PricingCalculator';\rimport './style.css';\rimport './pricing-fixes.css';\rconst { Header, Content } = Layout;\rconst { Title, Text, Paragraph } = Typography;\rinterface PricingPlan {\r  id: string;\r  name: string;\r  description: string;\r  monthlyPrice: number;\r  yearlyPrice: number;\r  discount?: string;\r  popular?: boolean;\r  enterprise?: boolean;\r  icon: React.ReactNode;\r  color: string;\r  features: string[];\r  limitations?: string[];\r  userLimit?: string;\r  storageLimit?: string;\r  supportType: string;\r  badge?: string;\r}\rexport const PricingPage: React.FC = () => {\r  const navigate = useNavigate();\r  const [billingPeriod, setBillingPeriod] = useState<'monthly' | 'yearly'>('yearly');\r  const [selectedCategory, setSelectedCategory] = useState('all');\r  const pricingPlans: PricingPlan[] = [\r    {\r      id: 'starter',\r      name: 'Başlangıç',\r      description: 'Küçük işletmeler ve girişimciler için ideal',\r      monthlyPrice: 299,\r      yearlyPrice: 2990,\r      discount: '2 Ay Ücretsiz',\r      icon: <RocketOutlined />,\r      color: '#52c41a',\r      userLimit: '1-5 Kullanıcı',\r      storageLimit: '10 GB',\r      supportType: 'E-posta Desteği',\r      features: [\r        'Temel CRM Modülü',\r        'Stok Yönetimi',\r        'Faturalama',\r        'Temel Raporlar',\r        'Mobil Uygulama',\r        'E-posta Desteği',\r        'Aylık Güncelleme'\r      ],\r      limitations: [\r        'Sınırlı Entegrasyon',\r        'Temel Raporlama'\r      ]\r    },\r    {\r      id: 'professional',\r      name: 'Profesyonel',\r      description: 'Büyüyen işletmeler için kapsamlı çözüm',\r      monthlyPrice: 599,\r      yearlyPrice: 5990,\r      discount: '2 Ay Ücretsiz',\r      popular: true,\r      badge: 'EN POPÜLER',\r      icon: <StarFilled />,\r      color: '#1890ff',\r      userLimit: '6-20 Kullanıcı',\r      storageLimit: '100 GB',\r      supportType: '7/24 Telefon Desteği',\r      features: [\r        'Tüm Başlangıç Özellikleri',\r        'Gelişmiş CRM',\r        'İnsan Kaynakları',\r        'Muhasebe Modülü',\r        'E-Ticaret Entegrasyonları',\r        'Özel Raporlar',\r        'API Erişimi',\r        '7/24 Telefon Desteği',\r        'Haftalık Güncelleme',\r        'Eğitim Videoları'\r      ]\r    },\r    {\r      id: 'business',\r      name: 'İşletme',\r      description: 'Kurumsal işletmeler için güçlü araçlar',\r      monthlyPrice: 999,\r      yearlyPrice: 9990,\r      discount: '2 Ay Ücretsiz',\r      icon: <CrownOutlined />,\r      color: '#722ed1',\r      userLimit: '21-50 Kullanıcı',\r      storageLimit: '500 GB',\r      supportType: 'Özel Müşteri Temsilcisi',\r      features: [\r        'Tüm Profesyonel Özellikleri',\r        'Üretim Modülü',\r        'Proje Yönetimi',\r        'İleri Düzey Analitik',\r        'Çoklu Şube Yönetimi',\r        'Özel Entegrasyonlar',\r        'Veri Yedekleme',\r        'Özel Müşteri Temsilcisi',\r        'Günlük Güncelleme',\r        'Yerinde Eğitim'\r      ]\r    },\r    {\r      id: 'enterprise',\r      name: 'Kurumsal',\r      description: 'Büyük ölçekli kurumlar için özel çözümler',\r      monthlyPrice: 0,\r      yearlyPrice: 0,\r      enterprise: true,\r      icon: <ThunderboltOutlined />,\r      color: '#f5222d',\r      userLimit: 'Sınırsız Kullanıcı',\r      storageLimit: 'Sınırsız',\r      supportType: 'Premium 7/24 Destek',\r      badge: 'ÖZEL FİYAT',\r      features: [\r        'Tüm Özellikler Dahil',\r        'Sınırsız Kullanıcı',\r        'Sınırsız Depolama',\r        'Özel Geliştirme',\r        'On-Premise Kurulum',\r        'Beyaz Etiket Seçeneği',\r        'SLA Garantisi',\r        'Premium 7/24 Destek',\r        'Özel Eğitim Programı',\r        'Danışmanlık Hizmeti'\r      ]\r    }\r  ];\r  const addons = [\r    {\r      name: 'E-Ticaret Plus',\r      description: 'Tüm pazaryeri entegrasyonları',\r      price: 149,\r      icon: <GlobalOutlined />\r    },\r    {\r      name: 'Gelişmiş Analitik',\r      description: 'AI destekli iş zekası raporları',\r      price: 199,\r      icon: <DashboardOutlined />\r    },\r    {\r      name: 'Ekstra Depolama',\r      description: 'Her 100 GB için',\r      price: 49,\r      icon: <CloudOutlined />\r    },\r    {\r      name: 'Ek Kullanıcı',\r      description: 'Her kullanıcı için',\r      price: 29,\r      icon: <TeamOutlined />\r    }\r  ];\r  const comparisionFeatures = [\r    { feature: 'CRM Modülü', starter: true, professional: true, business: true, enterprise: true },\r    { feature: 'Stok Yönetimi', starter: true, professional: true, business: true, enterprise: true },\r    { feature: 'Faturalama', starter: true, professional: true, business: true, enterprise: true },\r    { feature: 'İnsan Kaynakları', starter: false, professional: true, business: true, enterprise: true },\r    { feature: 'Muhasebe', starter: false, professional: true, business: true, enterprise: true },\r    { feature: 'E-Ticaret', starter: false, professional: true, business: true, enterprise: true },\r    { feature: 'Üretim', starter: false, professional: false, business: true, enterprise: true },\r    { feature: 'Proje Yönetimi', starter: false, professional: false, business: true, enterprise: true },\r    { feature: 'API Erişimi', starter: false, professional: true, business: true, enterprise: true },\r    { feature: 'Özel Raporlar', starter: false, professional: true, business: true, enterprise: true },\r    { feature: 'Çoklu Şube', starter: false, professional: false, business: true, enterprise: true },\r    { feature: 'Veri Yedekleme', starter: 'Aylık', professional: 'Haftalık', business: 'Günlük', enterprise: 'Anlık' },\r    { feature: '7/24 Destek', starter: false, professional: true, business: true, enterprise: true },\r    { feature: 'Eğitim', starter: 'Video', professional: 'Video + Webinar', business: 'Yerinde', enterprise: 'Özel Program' }\r  ];\r  const faqs = [\r    {\r      question: 'Deneme sürümü var mı?',\r      answer: '14 gün ücretsiz deneme sürümü sunuyoruz. Kredi kartı gerekmez.'\r    },\r    {\r      question: 'Planımı daha sonra değiştirebilir miyim?',\r      answer: 'Evet, istediğiniz zaman planınızı yükseltebilir veya düşürebilirsiniz.'\r    },\r    {\r      question: 'İptal politikanız nedir?',\r      answer: 'İstediğiniz zaman iptal edebilirsiniz. Yıllık planlarda kalan süre için iade yapılır.'\r    },\r    {\r      question: 'Kurulum ücreti var mı?',\r      answer: 'Hayır, kurulum tamamen ücretsizdir ve ekibimiz size destek olur.'\r    }\r  ];\r  const calculatePrice = (plan: PricingPlan) => {\r    if (plan.enterprise) return 'Teklif Al';\r    const price = billingPeriod === 'monthly' ? plan.monthlyPrice : plan.yearlyPrice;\r    return `₺${price.toLocaleString('tr-TR')}`;\r  };\r  const calculateSavings = (plan: PricingPlan) => {\r    if (plan.enterprise || billingPeriod === 'monthly') return null;\r    const yearlyTotal = plan.yearlyPrice;\r    const monthlyTotal = plan.monthlyPrice * 12;\r    const savings = monthlyTotal - yearlyTotal;\r    return savings > 0 ? `Yıllık ₺${savings.toLocaleString('tr-TR')} tasarruf` : null;\r  };\r  return (\r    <Layout className=\"pricing-layout\">\r      <Header className=\"pricing-header\">\r        <div className=\"header-container\">\r          <div className=\"header-content\">\r            <Button \r              icon={<ArrowLeftOutlined />} \r              onClick={() = aria-label=\"arrow left outlined\"> navigate('/')}\r              type=\"text\"\r              className=\"back-button\"\r            >\r              Ana Sayfa\r            </Button>\r            <div className=\"logo-section\" onClick={() => navigate('/')} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => navigate('/')(e)}>\r              <RocketOutlined className=\"logo-icon\" />\r              <span className=\"logo-text\">Stocker</span>\r            </div>\r          </div>\r          <div className=\"header-actions\">\r            <Button onClick={() => navigate('/blog')}>Blog</Button>\r            <Button onClick={() => navigate('/training')}>Eğitimler</Button>\r            <Button onClick={() => navigate('/login')}>Giriş Yap</Button>\r            <Button type=\"primary\" onClick={() => navigate('/register')}>\r              Ücretsiz Dene\r            </Button>\r          </div>\r        </div>\r      </Header>\r      <Content className=\"pricing-content\">\r        {/* Hero Section */}\r        <motion.section \r          className=\"pricing-hero\"\r          initial={{ opacity: 0, y: 20 }}\r          animate={{ opacity: 1, y: 0 }}\r          transition={{ duration: 0.5 }}\r        >\r          <Badge.Ribbon text=\"🎁 Yıl Sonu İndirimi %20\" color=\"red\">\r            <div className=\"hero-content\">\r              <Title level={1} className=\"hero-title\">\r                <span className=\"gradient-text\">İşletmeniz İçin</span>\r                <br />\r                En Uygun Planı Seçin\r              </Title>\r              <Paragraph className=\"hero-description\">\r                14 gün ücretsiz deneme • Kredi kartı gerekmez • İstediğiniz zaman iptal edin\r              </Paragraph>\r              <div className={`billing-toggle ${billingPeriod}`}>\r                <span \r                  className={billingPeriod === 'monthly' ? 'active' : ''}\r                  onClick={() => setBillingPeriod('monthly')}\r                >\r                  Aylık\r                </span>\r                <span \r                  className={billingPeriod === 'yearly' ? 'active' : ''}\r                  onClick={() => setBillingPeriod('yearly')}\r                >\r                  Yıllık\r                  {billingPeriod === 'yearly' && (\r                    <Tag color=\"green\" className=\"save-tag\" style={{ marginLeft: 8 }}>%20 İndirim</Tag>\r                  )}\r                </span>\r              </div>\r            </div>\r          </Badge.Ribbon>\r        </motion.section>\r        {/* Trust Badges */}\r        <section className=\"trust-section\">\r          <Row gutter={[32, 32]} justify=\"center\">\r            <Col xs={24} sm={8} md={6}>\r              <div className=\"trust-item\">\r                <SafetyOutlined className=\"trust-icon\" />\r                <Text strong>SSL Güvenlik</Text>\r                <Text type=\"secondary\">256-bit Şifreleme</Text>\r              </div>\r            </Col>\r            <Col xs={24} sm={8} md={6}>\r              <div className=\"trust-item\">\r                <CustomerServiceOutlined className=\"trust-icon\" />\r                <Text strong>7/24 Destek</Text>\r                <Text type=\"secondary\">Türkçe Destek Ekibi</Text>\r              </div>\r            </Col>\r            <Col xs={24} sm={8} md={6}>\r              <div className=\"trust-item\">\r                <ApiOutlined className=\"trust-icon\" />\r                <Text strong>%99.9 Uptime</Text>\r                <Text type=\"secondary\">SLA Garantili</Text>\r              </div>\r            </Col>\r            <Col xs={24} sm={8} md={6}>\r              <div className=\"trust-item\">\r                <GiftOutlined className=\"trust-icon\" />\r                <Text strong>14 Gün Deneme</Text>\r                <Text type=\"secondary\">Kredi Kartı Gerekmez</Text>\r              </div>\r            </Col>\r          </Row>\r        </section>\r        {/* Pricing Cards */}\r        <section className=\"pricing-cards-section\">\r          <Row gutter={[24, 24]} justify=\"center\">\r            {pricingPlans.map((plan, index) => (\r              <Col xs={24} sm={12} lg={6} key={plan.id}>\r                <motion.div\r                  initial={{ opacity: 0, y: 30 }}\r                  animate={{ opacity: 1, y: 0 }}\r                  transition={{ duration: 0.5, delay: index * 0.1 }}\r                >\r                  <Card \r                    className={`pricing-card ${plan.popular ? 'popular' : ''} ${plan.enterprise ? 'enterprise' : ''}`}\r                    hoverable\r                    bordered={false}\r                  >\r                    {plan.badge && (\r                      <div className=\"plan-badge\">\r                        <FireOutlined /> {plan.badge}\r                      </div>\r                    )}\r                    <div className=\"plan-header\">\r                      <div className=\"plan-icon\" style={{ color: plan.color }}>\r                        {plan.icon}\r                      </div>\r                      <Title level={3} className=\"plan-name\">{plan.name}</Title>\r                      <Paragraph className=\"plan-description\">{plan.description}</Paragraph>\r                    </div>\r                    <div className=\"plan-price\">\r                      <div className=\"price-amount\">\r                        {plan.enterprise ? (\r                          <span className=\"custom-price\">Özel Fiyat</span>\r                        ) : (\r                          <>\r                            <span className=\"currency\">₺</span>\r                            <span className=\"amount\">\r                              {billingPeriod === 'monthly' ? plan.monthlyPrice : Math.floor(plan.yearlyPrice / 12)}\r                            </span>\r                            <span className=\"period\">/ay</span>\r                          </>\r                        )}\r                      </div>\r                      {calculateSavings(plan) && (\r                        <Text type=\"success\" className=\"savings-text\">\r                          {calculateSavings(plan)}\r                        </Text>\r                      )}\r                    </div>\r                    <div className=\"plan-limits\">\r                      <Tag icon={<UserOutlined />}>{plan.userLimit}</Tag>\r                      <Tag icon={<CloudOutlined />}>{plan.storageLimit}</Tag>\r                    </div>\r                    <List\r                      className=\"plan-features\"\r                      dataSource={plan.features}\r                      renderItem={item => (\r                        <List.Item className=\"feature-item\">\r                          <CheckCircleOutlined className=\"feature-icon\" />\r                          <Text>{item}</Text>\r                        </List.Item>\r                      )}\r                    />\r                    {plan.limitations && (\r                      <div className=\"plan-limitations\">\r                        {plan.limitations.map((limit, idx) => (\r                          <Text key={idx} type=\"secondary\" className=\"limitation\">\r                            • {limit}\r                          </Text>\r                        ))}\r                      </div>\r                    )}\r                    <Button\r                      type={plan.popular ? 'primary' : 'default'}\r                      size=\"large\"\r                      block\r                      className={`plan-button ${plan.enterprise ? 'enterprise-button' : ''}`}\r                      onClick={() => {\r                        if (plan.enterprise) {\r                          message.info('Satış ekibimiz sizinle iletişime geçecek');\r                        } else {\r                          navigate('/register');\r                        }\r                      }}\r                    >\r                      {plan.enterprise ? 'Teklif Al' : 'Hemen Başla'}\r                    </Button>\r                    <Text type=\"secondary\" className=\"support-type\">\r                      <CustomerServiceOutlined /> {plan.supportType}\r                    </Text>\r                  </Card>\r                </motion.div>\r              </Col>\r            ))}\r          </Row>\r        </section>\r        {/* Comparison Table */}\r        <section className=\"comparison-section\">\r          <div className=\"section-header\">\r            <Title level={2}>Detaylı Özellik Karşılaştırması</Title>\r            <Paragraph>Tüm planlarımızın özelliklerini karşılaştırın</Paragraph>\r          </div>\r          <Card className=\"comparison-card\">\r            <div className=\"comparison-table\">\r              <table>\r                <thead>\r                  <tr>\r                    <th>Özellikler</th>\r                    <th>Başlangıç</th>\r                    <th className=\"highlighted\">Profesyonel</th>\r                    <th>İşletme</th>\r                    <th>Kurumsal</th>\r                  </tr>\r                </thead>\r                <tbody>\r                  {comparisionFeatures.map((item, index) => (\r                    <tr key={index}>\r                      <td className=\"feature-name\">\r                        <Text strong>{item.feature}</Text>\r                      </td>\r                      <td>\r                        {typeof item.starter === 'boolean' ? (\r                          item.starter ? (\r                            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r                              <CheckCircleOutlined style={{ color: '#52c41a', fontSize: 22 }} />\r                            </div>\r                          ) : (\r                            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r                              <span style={{ color: '#d1d5db', fontSize: 24 }}>-</span>\r                            </div>\r                          )\r                        ) : (\r                          <Tag color=\"blue\">{item.starter}</Tag>\r                        )}\r                      </td>\r                      <td className=\"highlighted\">\r                        {typeof item.professional === 'boolean' ? (\r                          item.professional ? (\r                            <CheckCircleOutlined style={{ color: '#52c41a', fontSize: 22 }} />\r                          ) : (\r                            <span className=\"not-included\">-</span>\r                          )\r                        ) : (\r                          <Tag color=\"blue\">{item.professional}</Tag>\r                        )}\r                      </td>\r                      <td>\r                        {typeof item.business === 'boolean' ? (\r                          item.business ? (\r                            <CheckCircleOutlined style={{ color: '#52c41a', fontSize: 22 }} />\r                          ) : (\r                            <span className=\"not-included\">-</span>\r                          )\r                        ) : (\r                          <Tag color=\"purple\">{item.business}</Tag>\r                        )}\r                      </td>\r                      <td>\r                        {typeof item.enterprise === 'boolean' ? (\r                          item.enterprise ? (\r                            <CheckCircleOutlined style={{ color: '#52c41a', fontSize: 22 }} />\r                          ) : (\r                            <span className=\"not-included\">-</span>\r                          )\r                        ) : (\r                          <Tag color=\"red\">{item.enterprise}</Tag>\r                        )}\r                      </td>\r                    </tr>\r                  ))}\r                </tbody>\r              </table>\r            </div>\r          </Card>\r        </section>\r        {/* Pricing Calculator Section */}\r        <section className=\"calculator-section\" style={{ marginBottom: 80 }}>\r          <div className=\"section-header\">\r            <Title level={2}>Özel Fiyatlandırma</Title>\r            <Paragraph>İhtiyaçlarınıza göre kendi planınızı oluşturun</Paragraph>\r          </div>\r          <PricingCalculator />\r        </section>\r        {/* Add-ons Section */}\r        <section className=\"addons-section\">\r          <div className=\"section-header\">\r            <Title level={2}>Ek Hizmetler</Title>\r            <Paragraph>İhtiyacınıza göre planınızı özelleştirin</Paragraph>\r          </div>\r          <Row gutter={[24, 24]}>\r            {addons.map((addon, index) => (\r              <Col xs={24} sm={12} md={6} key={index}>\r                <Card className=\"addon-card\" hoverable>\r                  <div className=\"addon-icon\" style={{ color: '#1890ff' }}>\r                    {addon.icon}\r                  </div>\r                  <Title level={4}>{addon.name}</Title>\r                  <Paragraph type=\"secondary\">{addon.description}</Paragraph>\r                  <div className=\"addon-price\">\r                    <Text strong style={{ fontSize: 20 }}>₺{addon.price}</Text>\r                    <Text type=\"secondary\">/ay</Text>\r                  </div>\r                  <Button type=\"link\">Ekle →</Button>\r                </Card>\r              </Col>\r            ))}\r          </Row>\r        </section>\r        {/* FAQ Section */}\r        <section className=\"faq-section\">\r          <div className=\"section-header\">\r            <Title level={2}>Sıkça Sorulan Sorular</Title>\r          </div>\r          <Row gutter={[32, 32]}>\r            {faqs.map((faq, index) => (\r              <Col xs={24} md={12} key={index}>\r                <Card className=\"faq-card\">\r                  <Title level={4}>\r                    <InfoCircleOutlined style={{ marginRight: 8, color: '#1890ff' }} />\r                    {faq.question}\r                  </Title>\r                  <Paragraph>{faq.answer}</Paragraph>\r                </Card>\r              </Col>\r            ))}\r          </Row>\r        </section>\r        {/* CTA Section */}\r        <section className=\"pricing-cta\">\r          <Card className=\"cta-card\">\r            <Title level={2} style={{ color: 'white' }}>\r              Hala Karar Veremediniz mi?\r            </Title>\r            <Paragraph style={{ color: 'rgba(255,255,255,0.9)', fontSize: 18 }}>\r              14 gün ücretsiz deneme sürümüyle başlayın. Kredi kartı gerekmez.\r            </Paragraph>\r            <Space size=\"large\">\r              <Button \r                type=\"primary\" \r                size=\"large\"\r                icon={<RocketOutlined />}\r                onClick={() = aria-label=\"rocket outlined\"> navigate('/register')}\r                className=\"cta-button\"\r              >\r                Ücretsiz Deneyin\r              </Button>\r              <Button \r                size=\"large\"\r                ghost\r                style={{ color: 'white', borderColor: 'white' }}\r                icon={<CustomerServiceOutlined />}\r                onClick={() = aria-label=\"customer service outlined\"> message.info('Satış ekibimiz sizinle iletişime geçecek')}\r              >\r                Satış Ekibiyle Görüşün\r              </Button>\r            </Space>\r          </Card>\r        </section>\r      </Content>\r    </Layout>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/pricing/pages/PricingPage/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { useNavigate } from 'react-router-dom';\rimport { \r  Card, \r  Steps, \r  Button, \r  Form, \r  Input, \r  Select, \r  Typography, \r  Space, \r  Row, \r  Col,\r  Divider,\r  Alert,\r  Badge,\r  Tag,\r  List,\r  message,\r  Modal,\r  Result,\r  Spin,\r  Checkbox,\r  Popover\r} from 'antd';\rimport {\r  CheckCircleOutlined,\r  ShoppingCartOutlined,\r  UserOutlined,\r  CreditCardOutlined,\r  RocketOutlined,\r  CheckOutlined,\r  CloseOutlined,\r  InfoCircleOutlined,\r  SafetyOutlined,\r  ThunderboltOutlined,\r  GlobalOutlined,\r  TeamOutlined,\r  BarChartOutlined,\r  CloudOutlined,\r  CustomerServiceOutlined,\r  GiftOutlined\r} from '@ant-design/icons';\rimport { apiClient } from '@/shared/api/client';\rimport PasswordStrength from '@/shared/components/PasswordStrength';\rimport { useSignalRValidation } from '@/shared/hooks/useSignalR';\rimport { ModuleSelection } from './ModuleSelection';\rimport { RegisterWizard } from './RegisterWizard';\rimport { NeonWizard } from './NeonWizard';\rimport { ModernWizard } from './ModernWizard';\rimport { PremiumPackageCard } from './PremiumPackageCard';\rimport './style.css';\rimport './module-selection.css';\rimport './premium-package-selection.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Step } = Steps;\rinterface Package {\r  id: string;\r  name: string;\r  description: string;\r  price: number;\r  currency: string;\r  billingPeriod: 'Monthly' | 'Yearly';\r  features: string[];\r  maxUsers: number;\r  maxStorage: number;\r  modules: string[];\r  isPopular?: boolean;\r  discount?: number;\r}\rinterface ModulePackageData {\r  selectedModules: string[];\r  basePackage: string;\r  totalPrice: number;\r}\rinterface RegisterFormData {\r  // Company Info\r  companyName: string;\r  companyCode: string;\r  domain?: string;\r  // Contact Info\r  contactName: string;\r  contactEmail: string;\r  contactPhone: string;\r  // Address\r  address?: string;\r  city?: string;\r  country?: string;\r  // Account\r  password: string;\r  confirmPassword: string;\r  // Package\r  packageId: string;\r  billingPeriod: 'Monthly' | 'Yearly';\r}\rexport const RegisterPage: React.FC = () => {\r  const navigate = useNavigate();\r  const [currentStep, setCurrentStep] = useState(0);\r  const [packages, setPackages] = useState<Package[]>([]);\r  const [selectedPackage, setSelectedPackage] = useState<Package | null>(null);\r  const [billingPeriod, setBillingPeriod] = useState<'Monthly' | 'Yearly'>('Monthly');\r  const [loading, setLoading] = useState(false);\r  const [paymentProcessing, setPaymentProcessing] = useState(false);\r  const [registrationComplete, setRegistrationComplete] = useState(false);\r  const [tenantId, setTenantId] = useState<string | null>(null); // Store tenant ID after registration\r  const [passwordStrength, setPasswordStrength] = useState<any>(null);\r  const [password, setPassword] = useState('');\r  const [modulePackageData, setModulePackageData] = useState<ModulePackageData | null>(null);\r  const [form] = Form.useForm();\r  // SignalR Validation Hook\r  const {\r    isConnected,\r    emailValidation,\r    passwordStrength: signalRPasswordStrength,\r    domainCheck,\r    phoneValidation,\r    companyNameCheck,\r    identityValidation,\r    tenantCodeValidation,\r    validateEmail,\r    checkPasswordStrength,\r    checkDomain,\r    validatePhone,\r    checkCompanyName,\r    validateIdentity,\r    validateTenantCode,\r    error: validationError\r  } = useSignalRValidation();\r  // Fetch available packages\r  useEffect(() => {\r    fetchPackages();\r  }, []);\r  // Show connection status\r  useEffect(() => {\r    if (isConnected) {\r      message.success('Real-time validation bağlantısı kuruldu', 2);\r    }\r  }, [isConnected]);\r  // Update password strength from SignalR\r  useEffect(() => {\r    if (signalRPasswordStrength) {\r      setPasswordStrength({\r        score: signalRPasswordStrength.score,\r        level: signalRPasswordStrength.level,\r        isAcceptable: signalRPasswordStrength.score >= 3,\r        feedback: signalRPasswordStrength.suggestions\r      });\r    }\r  }, [signalRPasswordStrength]);\r  const fetchPackages = async () => {\r    try {\r      // Fetch real packages from API\r      const response = await apiClient.get('/api/public/packages');\r      if (response.data?.success && response.data?.data && response.data.data.length > 0) {\r        const packages = response.data.data.map((pkg: any) => ({\r          id: pkg.id, // Real GUID from backend\r          name: pkg.name,\r          description: pkg.description,\r          price: pkg.basePrice?.amount || 0,\r          currency: pkg.basePrice?.currency || pkg.currency || '₺',\r          type: pkg.type,\r          billingPeriod: 'Monthly',\r          features: pkg.features?.map((f: any) => f.featureName || f.name || f) || [],\r          maxUsers: pkg.maxUsers || 0,\r          maxStorage: pkg.maxStorage || 0,\r          modules: pkg.modules?.map((m: any) => m.moduleName || m) || [],\r          isPopular: pkg.type === 'Professional' || pkg.isPopular,\r          discount: pkg.discount || 0,\r          trialDays: pkg.trialDays || 14\r        }));\r        setPackages(packages);\r        // Don't auto-select - let user choose\r      } else {\r        // Fallback to mock packages if API fails\r        const mockPackages: Package[] = [\r        {\r          id: 'a1b2c3d4-e5f6-7890-abcd-ef1234567890', // Mock GUID\r          name: 'Başlangıç',\r          description: 'Küçük işletmeler için ideal',\r          price: 499,\r          currency: '₺',\r          billingPeriod: 'Monthly',\r          features: [\r            '5 Kullanıcı',\r            '10 GB Depolama',\r            'CRM Modülü',\r            'Temel Raporlama',\r            'Email Desteği',\r            'Mobil Uygulama'\r          ],\r          maxUsers: 5,\r          maxStorage: 10,\r          modules: ['CRM'],\r        },\r        {\r          id: 'b2c3d4e5-f6a7-8901-bcde-f23456789012', // Mock GUID\r          name: 'Profesyonel',\r          description: 'Büyüyen işletmeler için',\r          price: 999,\r          currency: '₺',\r          billingPeriod: 'Monthly',\r          features: [\r            '20 Kullanıcı',\r            '50 GB Depolama',\r            'CRM + Stok Modülü',\r            'Gelişmiş Raporlama',\r            'Öncelikli Destek',\r            'API Erişimi',\r            'Özel Eğitim'\r          ],\r          maxUsers: 20,\r          maxStorage: 50,\r          modules: ['CRM', 'Inventory'],\r          isPopular: true,\r          discount: 20\r        },\r        {\r          id: 'c3d4e5f6-a7b8-9012-cdef-345678901234', // Mock GUID\r          name: 'Enterprise',\r          description: 'Büyük ölçekli işletmeler için',\r          price: 2499,\r          currency: '₺',\r          billingPeriod: 'Monthly',\r          features: [\r            'Sınırsız Kullanıcı',\r            '500 GB Depolama',\r            'Tüm Modüller',\r            'Özel Raporlama',\r            '7/24 Destek',\r            'Özel Entegrasyonlar',\r            'SLA Garantisi',\r            'Özel Sunucu Seçeneği'\r          ],\r          maxUsers: -1,\r          maxStorage: 500,\r          modules: ['CRM', 'Inventory', 'Finance', 'HR', 'Projects'],\r        }\r      ];\r        setPackages(mockPackages);\r        // Don't auto-select - let user choose\r      }\r    } catch (error: any) {\r      message.error('Paketler API\\'den yüklenemedi, mock data kullanılıyor');\r      // Use mock packages on error\r      const mockPackages: Package[] = [\r        {\r          id: 'a1b2c3d4-e5f6-7890-abcd-ef1234567890',\r          name: 'Başlangıç',\r          description: 'Küçük işletmeler için ideal',\r          price: 499,\r          currency: '₺',\r          billingPeriod: 'Monthly',\r          features: ['5 Kullanıcı', '10 GB Depolama', 'CRM Modülü'],\r          maxUsers: 5,\r          maxStorage: 10,\r          modules: ['CRM'],\r        },\r        {\r          id: 'b2c3d4e5-f6a7-8901-bcde-f23456789012',\r          name: 'Profesyonel',\r          description: 'Büyüyen işletmeler için',\r          price: 999,\r          currency: '₺',\r          billingPeriod: 'Monthly',\r          features: ['20 Kullanıcı', '50 GB Depolama', 'Tüm Modüller'],\r          maxUsers: 20,\r          maxStorage: 50,\r          modules: ['CRM', 'Inventory'],\r          isPopular: true,\r        },\r        {\r          id: 'c3d4e5f6-a7b8-9012-cdef-345678901234',\r          name: 'Enterprise',\r          description: 'Kurumsal çözümler',\r          price: 2499,\r          currency: '₺',\r          billingPeriod: 'Monthly',\r          features: ['Sınırsız Kullanıcı', '500 GB Depolama'],\r          maxUsers: -1,\r          maxStorage: 500,\r          modules: ['CRM', 'Inventory', 'Finance'],\r        }\r      ];\r      setPackages(mockPackages);\r      // Don't auto-select - let user choose\r    }\r  };\r  const handleModuleSelectionComplete = (selectedModules: string[], basePackage: string, totalPrice: number) => {\r    setModulePackageData({\r      selectedModules,\r      basePackage,\r      totalPrice\r    });\r    setCurrentStep(1);\r  };\r  const handlePackageSelect = (pkg: Package) => {\r    setSelectedPackage(pkg);\r    setCurrentStep(1);\r  };\r  const handleRegistration = async (values: any) => {\r    setLoading(true);\r    try {\r      // Backend'in beklediği formatı oluştur\r      const [firstName, ...lastNameParts] = values.contactName?.split(' ') || ['', ''];\r      const lastName = lastNameParts.join(' ') || firstName;\r      const registrationData = {\r        // Şirket bilgileri\r        companyName: values.companyName,\r        companyCode: values.companyCode,\r        identityType: values.identityType,\r        identityNumber: values.identityNumber,\r        sector: values.sector,\r        employeeCount: values.employeeCount,\r        // İletişim bilgileri\r        contactName: values.contactName,\r        contactEmail: values.contactEmail,\r        contactPhone: values.contactPhone,\r        contactTitle: values.contactTitle,\r        // Kullanıcı bilgileri\r        email: values.contactEmail, // Backend email field'ı bekliyor\r        username: values.contactEmail?.split('@')[0] || values.companyCode, // Email'den username oluştur\r        firstName: firstName,\r        lastName: lastName,\r        password: values.password,\r        // Domain ve paket\r        domain: `${values.companyCode}`,\r        packageId: selectedPackage?.id,\r        billingPeriod\r      };\r      // API call to register tenant (creates INACTIVE tenant)\r      const response = await apiClient.post('/api/public/register', registrationData);\r      if (response.data?.success && response.data?.data?.id) {\r        // Store tenant ID for payment step\r        setTenantId(response.data.data.id);\r        message.success('Kayıt başarılı! Şimdi ödeme adımına geçiliyor...');\r        // Move to payment step\r        setCurrentStep(2);\r      } else {\r        message.error('Kayıt sırasında bir hata oluştu');\r      }\r    } catch (error: any) {\r      message.error(error.response?.data?.message || 'Kayıt işlemi başarısız');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const simulatePayment = async (paymentMethod: string) => {\r    // Check if we have tenant ID from registration\r    if (!tenantId) {\r      message.error('Kayıt bilgileri bulunamadı. Lütfen önce kayıt işlemini tamamlayın.');\r      setCurrentStep(1);\r      return;\r    }\r    // Redirect to realistic payment page with tenant ID\r    const params = new URLSearchParams({\r      tenantId: tenantId, // Use actual tenant ID from registration\r      packageId: selectedPackage?.id || '',\r      package: selectedPackage?.name || '',\r      amount: calculatePrice().toString(),\r      period: billingPeriod,\r      company: form.getFieldValue('companyName'),\r      email: form.getFieldValue('contactEmail'),\r      method: paymentMethod\r    });\r    navigate(`/payment?${params.toString()}`);\r  };\r  const calculatePrice = () => {\r    if (modulePackageData) {\r      // Use module-based pricing\r      let price = modulePackageData.totalPrice;\r      // Apply yearly discount\r      if (billingPeriod === 'Yearly') {\r        price = price * 12 * 0.8; // 20% yearly discount\r      }\r      return Math.floor(price);\r    }\r    // Fallback to old pricing\r    if (!selectedPackage || !selectedPackage.price) return 0;\r    let price = selectedPackage.price;\r    // Apply yearly discount\r    if (billingPeriod === 'Yearly') {\r      price = price * 12 * 0.8; // 20% yearly discount\r    }\r    // Apply package discount if any\r    if (selectedPackage.discount) {\r      price = price * (1 - selectedPackage.discount / 100);\r    }\r    return Math.floor(price);\r  };\r  const renderModuleSelection = () => (\r    <ModuleSelection\r      onComplete={handleModuleSelectionComplete}\r      initialModules={modulePackageData?.selectedModules}\r      initialPackage={modulePackageData?.basePackage}\r    />\r  );\r  const renderPackageSelection = () => (\r    <div className=\"package-selection-wrapper\">\r      <div className=\"floating-shapes\">\r        <div className=\"floating-shape\"></div>\r        <div className=\"floating-shape\"></div>\r        <div className=\"floating-shape\"></div>\r      </div>\r      <div className=\"billing-toggle-container\">\r        <div className=\"billing-toggle\">\r          <button \r            className={`billing-toggle-btn ${billingPeriod === 'Monthly' ? 'active' : ''}`}\r            onClick={() => setBillingPeriod('Monthly')}\r          >\r            Aylık\r          </button>\r          <button \r            className={`billing-toggle-btn ${billingPeriod === 'Yearly' ? 'active' : ''}`}\r            onClick={() => setBillingPeriod('Yearly')}\r          >\r            Yıllık \r            <span className=\"discount-badge\">💸 %20 İndirim</span>\r          </button>\r        </div>\r      </div>\r      <div className=\"packages-grid\">\r        {packages.map((pkg) => (\r          <PremiumPackageCard\r            key={pkg.id}\r            package={pkg}\r            isSelected={selectedPackage?.id === pkg.id}\r            onSelect={handlePackageSelect}\r            billingPeriod={billingPeriod}\r          />\r        ))}\r      </div>\r      <div className=\"package-comparison\">\r        <Card style={{ marginTop: 48 }}>\r          <Title level={4}>\r            <InfoCircleOutlined /> Neden Stocker?\r          </Title>\r          <Row gutter={[24, 24]} style={{ marginTop: 24 }}>\r            <Col xs={24} md={6}>\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <ThunderboltOutlined style={{ fontSize: 32, color: '#667eea' }} />\r                <Text strong>Hızlı Kurulum</Text>\r                <Text type=\"secondary\" style={{ textAlign: 'center' }}>\r                  5 dakikada başlayın\r                </Text>\r              </Space>\r            </Col>\r            <Col xs={24} md={6}>\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <SafetyOutlined style={{ fontSize: 32, color: '#667eea' }} />\r                <Text strong>%99.9 Uptime</Text>\r                <Text type=\"secondary\" style={{ textAlign: 'center' }}>\r                  SLA garantisi\r                </Text>\r              </Space>\r            </Col>\r            <Col xs={24} md={6}>\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <CustomerServiceOutlined style={{ fontSize: 32, color: '#667eea' }} />\r                <Text strong>7/24 Destek</Text>\r                <Text type=\"secondary\" style={{ textAlign: 'center' }}>\r                  Her zaman yanınızdayız\r                </Text>\r              </Space>\r            </Col>\r            <Col xs={24} md={6}>\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <GiftOutlined style={{ fontSize: 32, color: '#667eea' }} />\r                <Text strong>14 Gün Deneme</Text>\r                <Text type=\"secondary\" style={{ textAlign: 'center' }}>\r                  Kredi kartı gerekmez\r                </Text>\r              </Space>\r            </Col>\r          </Row>\r        </Card>\r      </div>\r    </div>\r  );\r  const handleWizardComplete = (data: any) => {\r    // Wizard'dan gelen veriyi kaydet ve ödeme adımına geç\r    setTenantId(data.id);\r    message.success('Kayıt başarılı! Şimdi ödeme adımına geçiliyor...');\r    setCurrentStep(2);\r  };\r  const renderRegistrationForm = () => {\r    return (\r      <ModernWizard \r        onComplete={handleWizardComplete}\r        selectedPackage={selectedPackage}\r        signalRValidation={{\r          isConnected,\r          emailValidation,\r          passwordStrength: signalRPasswordStrength,\r          domainCheck,\r          phoneValidation,\r          companyNameCheck,\r          identityValidation,\r          tenantCodeValidation,\r          validateEmail,\r          checkPasswordStrength,\r          checkDomain,\r          validatePhone,\r          checkCompanyName,\r          validateIdentity,\r          validateTenantCode,\r          error: validationError\r        }}\r      />\r    );\r  };\r  const renderPayment = () => (\r    <div className=\"payment-section\">\r      <Row gutter={[48, 24]} justify=\"center\">\r        <Col xs={24} md={16}>\r          <Card>\r            <Title level={3}>\r              <CreditCardOutlined /> Ödeme Bilgileri\r            </Title>\r            {paymentProcessing ? (\r              <div style={{ textAlign: 'center', padding: '60px 0' }}>\r                <Spin size=\"large\" />\r                <Title level={4} style={{ marginTop: 24 }}>\r                  Ödeme işleniyor...\r                </Title>\r                <Text type=\"secondary\">\r                  Lütfen bekleyin, ödemeniz güvenli bir şekilde işleniyor.\r                </Text>\r              </div>\r            ) : (\r              <>\r                <Alert\r                  message=\"Kayıt Başarılı!\"\r                  description={`Tenant ID: ${tenantId}. Şimdi ödeme yaparak hesabınızı aktifleştirin.`}\r                  type=\"info\"\r                  showIcon\r                  style={{ marginBottom: 24 }}\r                />\r                <div className=\"payment-methods\">\r                  <Title level={5}>Ödeme Yöntemi Seçin</Title>\r                  <Row gutter={[16, 16]}>\r                    <Col span={12}>\r                      <Card \r                        hoverable \r                        className=\"payment-method-card\"\r                        onClick={() => simulatePayment('credit_card')}\r                      >\r                        <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                          <CreditCardOutlined style={{ fontSize: 48, color: '#667eea' }} />\r                          <Text strong>Kredi Kartı</Text>\r                          <Text type=\"secondary\">Visa, Mastercard, Amex</Text>\r                        </Space>\r                      </Card>\r                    </Col>\r                    <Col span={12}>\r                      <Card \r                        hoverable \r                        className=\"payment-method-card\"\r                        onClick={() => simulatePayment('bank_transfer')}\r                      >\r                        <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                          <img \r                            src=\"https://cdn-icons-png.flaticon.com/512/2830/2830284.png\" \r                            alt=\"Bank Transfer\" \r                            style={{ width: 48, height: 48 }}\r                          />\r                          <Text strong>Banka Havalesi / EFT</Text>\r                          <Text type=\"secondary\">3 iş günü içinde</Text>\r                        </Space>\r                      </Card>\r                    </Col>\r                  </Row>\r                </div>\r                <Divider />\r                <div className=\"payment-summary\">\r                  <Title level={5}>Ödeme Özeti</Title>\r                  <div className=\"summary-details\">\r                    <div className=\"summary-row\">\r                      <Text>Şirket:</Text>\r                      <Text strong>{form.getFieldValue('companyName')}</Text>\r                    </div>\r                    <div className=\"summary-row\">\r                      <Text>Paket:</Text>\r                      <Text strong>{selectedPackage?.name}</Text>\r                    </div>\r                    <div className=\"summary-row\">\r                      <Text>Dönem:</Text>\r                      <Text strong>{billingPeriod === 'Monthly' ? 'Aylık' : 'Yıllık'}</Text>\r                    </div>\r                    <Divider />\r                    <div className=\"summary-row total\">\r                      <Title level={5}>Toplam Tutar:</Title>\r                      <Title level={4} style={{ color: '#667eea', margin: 0 }}>\r                        {selectedPackage?.currency}{calculatePrice()}\r                      </Title>\r                    </div>\r                  </div>\r                </div>\r                <Alert\r                  message=\"Güvenli Ödeme\"\r                  description=\"Ödeme bilgileriniz 256-bit SSL şifreleme ile korunmaktadır.\"\r                  type=\"success\"\r                  showIcon\r                  icon={<SafetyOutlined />}\r                  style={{ marginTop: 24 }}\r                />\r              </>\r            )}\r          </Card>\r        </Col>\r      </Row>\r    </div>\r  );\r  // Directly render the wizard with integrated package selection\r  return renderRegistrationForm();\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/register/pages/RegisterPage/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect, useRef } from 'react';\rimport { message, Spin, Modal } from 'antd';\rimport Select from 'react-select';\rimport { apiClient } from '@/shared/api/client';\rimport { Captcha } from '@/features/auth/components/Captcha';\rimport { EmailVerificationModal } from '@/features/auth/components/EmailVerification';\r// SignalR validation will be passed as props from parent component\rimport {\r  ShopOutlined,\r  UserOutlined,\r  LockOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  IdcardOutlined,\r  BankOutlined,\r  TeamOutlined,\r  CheckOutlined,\r  SafetyOutlined,\r  InfoCircleOutlined,\r  ArrowLeftOutlined,\r  ArrowRightOutlined,\r  BarChartOutlined,\r  RiseOutlined,\r  GlobalOutlined,\r  LoadingOutlined,\r  EyeOutlined,\r  EyeInvisibleOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  ShoppingCartOutlined,\r  CrownOutlined,\r  RocketOutlined\r} from '@ant-design/icons';\rimport './modern-wizard.css';\rimport './modern-wizard-phone-validation.css';\rimport './package-selection.css';\rinterface ModernWizardProps {\r  onComplete: (data: any) => void;\r  selectedPackage?: any;\r  signalRValidation?: {\r    isConnected: boolean;\r    emailValidation: any;\r    passwordStrength: any;\r    domainCheck: any;\r    phoneValidation: any;\r    companyNameCheck: any;\r    identityValidation: any;\r    tenantCodeValidation: any;\r    validateEmail: (email: string) => Promise<void>;\r    checkPasswordStrength: (password: string) => Promise<void>;\r    checkDomain: (domain: string) => Promise<void>;\r    validatePhone: (phone: string, countryCode?: string) => Promise<void>;\r    checkCompanyName: (name: string) => Promise<void>;\r    validateIdentity: (identityNumber: string) => Promise<void>;\r    validateTenantCode: (code: string) => Promise<void>;\r    error: string | null;\r  };\r}\rexport const ModernWizard: React.FC<ModernWizardProps> = ({ onComplete, selectedPackage, signalRValidation }) => {\r  const [currentStep, setCurrentStep] = useState(0);\r  const [loading, setLoading] = useState(false);\r  const [packages, setPackages] = useState<any[]>([]);\r  const [loadingPackages, setLoadingPackages] = useState(false);\r  const [validating, setValidating] = useState<{ [key: string]: boolean }>({});\r  const [validationErrors, setValidationErrors] = useState<{ [key: string]: string }>({});\r  const [validationSuccess, setValidationSuccess] = useState<{ [key: string]: boolean }>({});\r  const [showCompanySuggestions, setShowCompanySuggestions] = useState(false);\r  const [companySuggestions, setCompanySuggestions] = useState<string[]>([]);\r  const [showTitleSuggestions, setShowTitleSuggestions] = useState(false);\r  const [titleSuggestions, setTitleSuggestions] = useState<string[]>([]);\r  const [showEmailSuggestions, setShowEmailSuggestions] = useState(false);\r  const [emailSuggestions, setEmailSuggestions] = useState<string[]>([]);\r  const [captchaToken, setCaptchaToken] = useState<string | null>(null);\r  const [showEmailVerification, setShowEmailVerification] = useState(false);\r  const [emailVerified, setEmailVerified] = useState(false);\r  const captchaRef = useRef<any>(null);\r  const [formData, setFormData] = useState({\r    // Step 1 - Company Info\r    companyName: '',\r    companyCode: '',\r    identityType: 'TC',\r    identityNumber: '',\r    sector: '',\r    employeeCount: '',\r    // Step 2 - Contact Info\r    contactName: '',\r    contactEmail: '',\r    contactPhone: '',\r    contactTitle: '',\r    // Step 3 - Security\r    password: '',\r    confirmPassword: '',\r    termsAccepted: false,\r    // Step 4 - Package\r    packageId: '',\r    packageName: '',\r    billingPeriod: 'Monthly',\r    // Step 5 - Security Verification\r    captchaVerified: false,\r    emailVerificationCode: ''\r  });\r  const [passwordStrength, setPasswordStrength] = useState({\r    score: 0,\r    hasMinLength: false,\r    hasUpperCase: false,\r    hasLowerCase: false,\r    hasNumber: false,\r    hasSpecial: false\r  });\r  // Use SignalR validation from props if provided\r  const {\r    isConnected = false,\r    emailValidation = null,\r    passwordStrength: signalRPasswordStrength = null,\r    domainCheck = null,\r    phoneValidation = null,\r    companyNameCheck = null,\r    identityValidation = null,\r    tenantCodeValidation = null,\r    validateEmail = async () => {},\r    checkPasswordStrength: checkSignalRPasswordStrength = async () => {},\r    checkDomain = async () => {},\r    validatePhone = async () => {},\r    checkCompanyName = async () => {},\r    validateIdentity = async () => {},\r    validateTenantCode = async () => {},\r    error: validationError = null\r  } = signalRValidation || {};\r  const steps = [\r    { label: 'Şirket', icon: <ShopOutlined /> },\r    { label: 'İletişim', icon: <UserOutlined /> },\r    { label: 'Güvenlik', icon: <LockOutlined /> },\r    { label: 'Paket', icon: <ShoppingCartOutlined /> }\r  ];\r  // Şirket tipleri ve sektörler için öneriler\r  const companyTypes = [\r    { suffix: 'A.Ş.', description: 'Anonim Şirket' },\r    { suffix: 'Ltd. Şti.', description: 'Limited Şirket' },\r    { suffix: 'Tic. Ltd. Şti.', description: 'Ticaret Limited' },\r    { suffix: 'San. ve Tic. A.Ş.', description: 'Sanayi ve Ticaret' }\r  ];\r  const companySectors = [\r    'Teknoloji',\r    'Yazılım',\r    'Bilişim',\r    'Danışmanlık',\r    'Pazarlama',\r    'Reklam',\r    'İnşaat',\r    'Otomotiv',\r    'Tekstil',\r    'Gıda',\r    'Lojistik',\r    'Turizm',\r    'Sağlık',\r    'Eğitim',\r    'Enerji',\r    'Üretim',\r    'Ticaret',\r    'Hizmet'\r  ];\r  // Dinamik öneri oluşturucu\r  const generateCompanySuggestions = (input: string): string[] => {\r    if (!input || input.length < 2) return [];\r    const suggestions: string[] = [];\r    const capitalizedInput = input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();\r    // Temel şirket isimleri\r    suggestions.push(`${capitalizedInput} A.Ş.`);\r    suggestions.push(`${capitalizedInput} Ltd. Şti.`);\r    // Sektör bazlı öneriler\r    if (input.length >= 3) {\r      suggestions.push(`${capitalizedInput} Teknoloji A.Ş.`);\r      suggestions.push(`${capitalizedInput} Yazılım Ltd. Şti.`);\r      suggestions.push(`${capitalizedInput} Bilişim Hizmetleri A.Ş.`);\r      suggestions.push(`${capitalizedInput} Danışmanlık Ltd. Şti.`);\r      suggestions.push(`${capitalizedInput} Ticaret A.Ş.`);\r      suggestions.push(`${capitalizedInput} Sanayi ve Ticaret A.Ş.`);\r      suggestions.push(`${capitalizedInput} İnşaat Ltd. Şti.`);\r      suggestions.push(`${capitalizedInput} Otomotiv San. ve Tic. A.Ş.`);\r    }\r    // Grup/Holding önerileri (daha uzun isimler için)\r    if (input.length >= 4) {\r      suggestions.push(`${capitalizedInput} Holding A.Ş.`);\r      suggestions.push(`${capitalizedInput} Grup Şirketleri`);\r    }\r    // Maksimum 8 öneri göster\r    return suggestions.slice(0, 8);\r  };\r  // Ünvan (Title) önerileri oluşturucu\r  const generateTitleSuggestions = (input: string): string[] => {\r    if (!input || input.length < 1) return [];\r    const titles = [\r      'Genel Müdür',\r      'Genel Koordinatör',\r      'İnsan Kaynakları Müdürü',\r      'İnsan Kaynakları Uzmanı',\r      'Yazılım Müdürü',\r      'Yazılım Geliştirici',\r      'Proje Müdürü',\r      'Proje Yöneticisi',\r      'Satış Müdürü',\r      'Satış Danışmanı',\r      'Pazarlama Müdürü',\r      'Pazarlama Uzmanı',\r      'Muhasebe Müdürü',\r      'Mali İşler Müdürü',\r      'Operasyon Müdürü',\r      'İdari İşler Müdürü',\r      'Bilgi İşlem Müdürü',\r      'Teknik Müdür',\r      'Üretim Müdürü',\r      'Kalite Müdürü',\r      'Ar-Ge Müdürü',\r      'İş Geliştirme Müdürü',\r      'Satın Alma Müdürü',\r      'Lojistik Müdürü',\r      'Fabrika Müdürü',\r      'Bölge Müdürü',\r      'Şube Müdürü',\r      'CEO',\r      'CFO',\r      'CTO',\r      'COO',\r      'CMO',\r      'Kurucu',\r      'Kurucu Ortak',\r      'Yönetim Kurulu Başkanı',\r      'Yönetim Kurulu Üyesi',\r      'İcra Kurulu Üyesi'\r    ];\r    const lowerInput = input.toLowerCase();\r    const filtered = titles.filter(title => \r      title.toLowerCase().includes(lowerInput)\r    );\r    // Başlangıç eşleşmelerini öne al\r    const startsWith = filtered.filter(title => \r      title.toLowerCase().startsWith(lowerInput)\r    );\r    const contains = filtered.filter(title => \r      !title.toLowerCase().startsWith(lowerInput)\r    );\r    return [...startsWith, ...contains].slice(0, 8);\r  };\r  // Email domain önerileri oluşturucu\r  const generateEmailSuggestions = (input: string): string[] => {\r    if (!input || input.length < 2) return [];\r    const suggestions: string[] = [];\r    const [localPart, domainPart] = input.split('@');\r    if (!localPart) return [];\r    // Eğer @ işareti yoksa veya domain kısmı boşsa\r    if (!domainPart || domainPart.length === 0) {\r      // Şirket adına göre domain öner\r      const companyName = formData.companyName.toLowerCase()\r        .replace(/\\s+/g, '')\r        .replace(/[^a-z0-9]/gi, '');\r      if (companyName) {\r        suggestions.push(`${localPart}@${companyName}.com`);\r        suggestions.push(`${localPart}@${companyName}.com.tr`);\r        suggestions.push(`${localPart}@${companyName}.net`);\r        suggestions.push(`${localPart}@${companyName}.org`);\r      }\r      // Popüler domain önerileri\r      suggestions.push(`${localPart}@gmail.com`);\r      suggestions.push(`${localPart}@hotmail.com`);\r      suggestions.push(`${localPart}@outlook.com`);\r      suggestions.push(`${localPart}@yandex.com`);\r    } else {\r      // Domain kısmı yazılmaya başlandıysa tamamlama öner\r      const domains = [\r        'gmail.com',\r        'hotmail.com',\r        'outlook.com',\r        'yahoo.com',\r        'yandex.com',\r        'icloud.com',\r        'protonmail.com'\r      ];\r      const companyName = formData.companyName.toLowerCase()\r        .replace(/\\s+/g, '')\r        .replace(/[^a-z0-9]/gi, '');\r      if (companyName) {\r        domains.unshift(`${companyName}.com`);\r        domains.unshift(`${companyName}.com.tr`);\r      }\r      const filtered = domains.filter(domain => \r        domain.startsWith(domainPart.toLowerCase())\r      );\r      filtered.forEach(domain => {\r        suggestions.push(`${localPart}@${domain}`);\r      });\r    }\r    return suggestions.slice(0, 8);\r  };\r  const sectorOptions = [\r    { value: 'Teknoloji', label: 'Teknoloji' },\r    { value: 'E-Ticaret', label: 'E-Ticaret' },\r    { value: 'Perakende', label: 'Perakende' },\r    { value: 'Üretim', label: 'Üretim' },\r    { value: 'Hizmet', label: 'Hizmet' },\r    { value: 'Sağlık', label: 'Sağlık' },\r    { value: 'Eğitim', label: 'Eğitim' },\r    { value: 'Diğer', label: 'Diğer' }\r  ];\r  const employeeCountOptions = [\r    { value: '1-10', label: '1-10 Kişi' },\r    { value: '11-50', label: '11-50 Kişi' },\r    { value: '51-100', label: '51-100 Kişi' },\r    { value: '101-500', label: '101-500 Kişi' },\r    { value: '500+', label: '500+ Kişi' }\r  ];\r  // Custom styles for react-select\r  const customSelectStyles = {\r    control: (provided: any, state: any) => ({\r      ...provided,\r      minHeight: '54px',\r      border: state.isFocused \r        ? '2px solid #667eea' \r        : validationErrors[state.selectProps.name] \r          ? '2px solid #ef4444'\r          : '2px solid #e5e7eb',\r      borderRadius: '14px',\r      boxShadow: state.isFocused ? '0 0 0 3px rgba(102, 126, 234, 0.1)' : 'none',\r      backgroundColor: validationErrors[state.selectProps.name] ? '#fef2f2' : 'white',\r      '&:hover': {\r        borderColor: state.isFocused ? '#667eea' : '#d1d5db'\r      }\r    }),\r    valueContainer: (provided: any) => ({\r      ...provided,\r      padding: '0 18px',\r      height: '50px'\r    }),\r    input: (provided: any) => ({\r      ...provided,\r      margin: '0',\r      padding: '0'\r    }),\r    placeholder: (provided: any) => ({\r      ...provided,\r      color: '#9ca3af',\r      fontSize: '16px'\r    }),\r    singleValue: (provided: any) => ({\r      ...provided,\r      color: '#1f2937',\r      fontSize: '16px'\r    }),\r    menu: (provided: any) => ({\r      ...provided,\r      borderRadius: '12px',\r      boxShadow: '0 10px 40px rgba(0, 0, 0, 0.1)',\r      border: '1px solid #e5e7eb',\r      marginTop: '4px'\r    }),\r    menuList: (provided: any) => ({\r      ...provided,\r      padding: '8px'\r    }),\r    option: (provided: any, state: any) => ({\r      ...provided,\r      backgroundColor: state.isSelected \r        ? '#667eea' \r        : state.isFocused \r          ? '#f3f4f6' \r          : 'white',\r      color: state.isSelected ? 'white' : '#1f2937',\r      padding: '12px 16px',\r      borderRadius: '8px',\r      cursor: 'pointer',\r      fontSize: '15px',\r      '&:active': {\r        backgroundColor: state.isSelected ? '#667eea' : '#e5e7eb'\r      }\r    }),\r    indicatorSeparator: () => ({\r      display: 'none'\r    }),\r    dropdownIndicator: (provided: any, state: any) => ({\r      ...provided,\r      color: state.isFocused ? '#667eea' : '#9ca3af',\r      '&:hover': {\r        color: '#667eea'\r      }\r    })\r  };\r  // Fetch packages when step 3 is reached\r  useEffect(() => {\r    if (currentStep === 3 && packages.length === 0) {\r      fetchPackages();\r    }\r  }, [currentStep]);\r  const fetchPackages = async () => {\r    setLoadingPackages(true);\r    try {\r      const response = await apiClient.get('/api/public/packages');\r      if (response.data?.success && response.data?.data) {\r        const packagesData = response.data.data.map((pkg: any) => ({\r          id: pkg.id,\r          name: pkg.name,\r          description: pkg.description,\r          price: pkg.basePrice?.amount || 0,\r          currency: pkg.basePrice?.currency || '₺',\r          type: pkg.type,\r          features: pkg.features?.map((f: any) => f.featureName || f.name || f) || [],\r          maxUsers: pkg.maxUsers || 0,\r          maxStorage: pkg.maxStorage || 0,\r          modules: pkg.modules?.map((m: any) => m.moduleName || m) || [],\r          isPopular: pkg.type === 'Professional',\r          trialDays: pkg.trialDays || 14\r        }));\r        setPackages(packagesData);\r      }\r    } catch (error) {\r      // Fallback to mock data\r      setPackages([\r        {\r          id: 'starter-package',\r          name: 'Başlangıç',\r          description: 'Küçük işletmeler için',\r          price: 499,\r          currency: '₺',\r          features: ['5 Kullanıcı', '10 GB Depolama', 'Temel Raporlama'],\r          type: 'Starter'\r        },\r        {\r          id: 'professional-package',\r          name: 'Profesyonel',\r          description: 'Büyüyen işletmeler için',\r          price: 999,\r          currency: '₺',\r          features: ['20 Kullanıcı', '50 GB Depolama', 'Gelişmiş Raporlama'],\r          isPopular: true,\r          type: 'Professional'\r        },\r        {\r          id: 'enterprise-package',\r          name: 'Enterprise',\r          description: 'Kurumsal çözümler',\r          price: 2499,\r          currency: '₺',\r          features: ['Sınırsız Kullanıcı', '500 GB Depolama', 'Özel Raporlama'],\r          type: 'Enterprise'\r        }\r      ]);\r    } finally {\r      setLoadingPackages(false);\r    }\r  };\r  useEffect(() => {\r    if (formData.password) {\r      checkPasswordStrength(formData.password);\r      // Also check with SignalR\r      if (isConnected) {\r        checkSignalRPasswordStrength(formData.password);\r      }\r    }\r  }, [formData.password, isConnected]);\r  // Handle SignalR validation responses\r  useEffect(() => {\r    if (emailValidation) {\r      setValidating(prev => ({ ...prev, email: false }));\r      if (!emailValidation.isValid) {\r        setValidationErrors(prev => ({ ...prev, email: emailValidation.message || 'Geçersiz e-posta' }));\r      } else {\r        setValidationErrors(prev => ({ ...prev, email: '' }));\r      }\r    }\r  }, [emailValidation]);\r  useEffect(() => {\r    if (phoneValidation) {\r      setValidating(prev => ({ ...prev, phone: false }));\r      if (!phoneValidation.isValid) {\r        setValidationErrors(prev => ({ ...prev, phone: phoneValidation.message || 'Geçersiz telefon' }));\r      } else {\r        setValidationErrors(prev => ({ ...prev, phone: '' }));\r      }\r    }\r  }, [phoneValidation]);\r  useEffect(() => {\r    if (identityValidation) {\r      setValidating(prev => ({ ...prev, identityNumber: false }));\r      if (!identityValidation.isValid) {\r        setValidationErrors(prev => ({ ...prev, identityNumber: identityValidation.message || 'Geçersiz kimlik/vergi numarası' }));\r        setValidationSuccess(prev => ({ ...prev, identityNumber: false }));\r      } else {\r        setValidationErrors(prev => ({ ...prev, identityNumber: '' }));\r        setValidationSuccess(prev => ({ ...prev, identityNumber: true }));\r      }\r    }\r  }, [identityValidation]);\r  useEffect(() => {\r    if (companyNameCheck) {\r      setValidating(prev => ({ ...prev, companyName: false }));\r      // Check the actual validation result from API\r      // API returns isValid: false when there are issues\r      const isValid = companyNameCheck.isValid === true;\r      const isUnique = companyNameCheck.isUnique !== false;\r      const containsRestricted = companyNameCheck.containsRestrictedWords === true;\r      // Company name is available only if it's valid, unique, and doesn't contain restricted words\r      const isAvailable = isValid && isUnique && !containsRestricted;\r      if (!isAvailable) {\r        // Build detailed error message\r        let errorMessage = companyNameCheck.message || 'Bu şirket adı kullanılamaz';\r        // Add restriction details if available\r        if (companyNameCheck.details?.restriction) {\r          errorMessage += ` (${companyNameCheck.details.restriction})`;\r        }\r        setValidationErrors(prev => ({ ...prev, companyName: errorMessage }));\r        setValidationSuccess(prev => ({ ...prev, companyName: false }));\r      } else {\r        // Company name is available - show success\r        setValidationErrors(prev => ({ ...prev, companyName: '' }));\r        setValidationSuccess(prev => ({ ...prev, companyName: true }));\r      }\r    }\r  }, [companyNameCheck]);\r  // Tenant Code Validation Effect\r  useEffect(() => {\r    if (tenantCodeValidation) {\r      setValidating(prev => ({ ...prev, companyCode: false }));\r      if (!tenantCodeValidation.isAvailable) {\r        let errorMessage = tenantCodeValidation.message || 'Bu kod kullanılamaz';\r        // Add suggestions if available\r        if (tenantCodeValidation.suggestedCodes && tenantCodeValidation.suggestedCodes.length > 0) {\r          errorMessage += ` (Öneriler: ${tenantCodeValidation.suggestedCodes.slice(0, 3).join(', ')})`;\r        }\r        setValidationErrors(prev => ({ ...prev, companyCode: errorMessage }));\r        setValidationSuccess(prev => ({ ...prev, companyCode: false }));\r      } else {\r        setValidationErrors(prev => ({ ...prev, companyCode: '' }));\r        setValidationSuccess(prev => ({ ...prev, companyCode: true }));\r      }\r    }\r  }, [tenantCodeValidation]);\r  // Domain Check Effect (for backward compatibility)\r  useEffect(() => {\r    if (domainCheck && !tenantCodeValidation) {\r      setValidating(prev => ({ ...prev, companyCode: false }));\r      if (!domainCheck.isAvailable) {\r        setValidationErrors(prev => ({ ...prev, companyCode: 'Bu kod zaten kullanımda' }));\r        setValidationSuccess(prev => ({ ...prev, companyCode: false }));\r      } else {\r        setValidationErrors(prev => ({ ...prev, companyCode: '' }));\r        setValidationSuccess(prev => ({ ...prev, companyCode: true }));\r      }\r    }\r  }, [domainCheck, tenantCodeValidation]);\r  useEffect(() => {\r    if (signalRPasswordStrength) {\r      setPasswordStrength({\r        score: signalRPasswordStrength.score,\r        hasMinLength: signalRPasswordStrength.score >= 1,\r        hasUpperCase: signalRPasswordStrength.hasUpperCase || false,\r        hasLowerCase: signalRPasswordStrength.hasLowerCase || false,\r        hasNumber: signalRPasswordStrength.hasDigit || false,\r        hasSpecial: signalRPasswordStrength.hasSpecialChar || false\r      });\r    }\r  }, [signalRPasswordStrength]);\r  const checkPasswordStrength = (password: string) => {\r    const strength = {\r      score: 0,\r      hasMinLength: password.length >= 8,\r      hasUpperCase: /[A-Z]/.test(password),\r      hasLowerCase: /[a-z]/.test(password),\r      hasNumber: /[0-9]/.test(password),\r      hasSpecial: /[!@#$%^&*(),.?\":{}|<>]/.test(password)\r    };\r    let score = 0;\r    if (strength.hasMinLength) score++;\r    if (strength.hasUpperCase) score++;\r    if (strength.hasLowerCase) score++;\r    if (strength.hasNumber) score++;\r    if (strength.hasSpecial) score++;\r    strength.score = score;\r    setPasswordStrength(strength);\r  };\r  const getPasswordStrengthLabel = () => {\r    if (passwordStrength.score === 0) return '';\r    if (passwordStrength.score <= 2) return 'weak';\r    if (passwordStrength.score === 3) return 'fair';\r    if (passwordStrength.score === 4) return 'good';\r    return 'strong';\r  };\r  const handleInputChange = (field: string, value: any) => {\r    setFormData(prev => ({ ...prev, [field]: value }));\r    // Clear previous error and success states\r    setValidationErrors(prev => ({ ...prev, [field]: '' }));\r    setValidationSuccess(prev => ({ ...prev, [field]: false }));\r    // Company name autocomplete - dinamik öneri oluştur\r    if (field === 'companyName') {\r      if (value && value.length >= 2) {\r        const generatedSuggestions = generateCompanySuggestions(value);\r        setCompanySuggestions(generatedSuggestions);\r        setShowCompanySuggestions(generatedSuggestions.length > 0);\r      } else {\r        setShowCompanySuggestions(false);\r      }\r    }\r    // Title (Ünvan) autocomplete\r    if (field === 'contactTitle') {\r      if (value && value.length >= 1) {\r        const generatedSuggestions = generateTitleSuggestions(value);\r        setTitleSuggestions(generatedSuggestions);\r        setShowTitleSuggestions(generatedSuggestions.length > 0);\r      } else {\r        setShowTitleSuggestions(false);\r      }\r    }\r    // Email autocomplete\r    if (field === 'contactEmail') {\r      if (value && value.length >= 2) {\r        const generatedSuggestions = generateEmailSuggestions(value);\r        setEmailSuggestions(generatedSuggestions);\r        setShowEmailSuggestions(generatedSuggestions.length > 0);\r      } else {\r        setShowEmailSuggestions(false);\r      }\r    }\r    // Trigger real-time validation for specific fields\r    if (isConnected) {\r      switch(field) {\r        case 'contactEmail':\r          if (value && value.includes('@')) {\r            setValidating(prev => ({ ...prev, email: true }));\r            validateEmail(value);\r          }\r          break;\r        case 'contactPhone':\r          if (value && value.length >= 10) {\r            setValidating(prev => ({ ...prev, phone: true }));\r            validatePhone(value);\r          }\r          break;\r        case 'companyName':\r          if (value && value.length >= 3) {\r            setValidating(prev => ({ ...prev, companyName: true }));\r            checkCompanyName(value);\r          }\r          break;\r        case 'companyCode':\r          if (value && value.length >= 3) {\r            setValidating(prev => ({ ...prev, companyCode: true }));\r            checkDomain(value);\r          }\r          break;\r        case 'identityNumber':\r          // TC Kimlik No: 11 haneli, Vergi No: 10 haneli\r          const cleanNumber = value.replace(/\\D/g, '');\r          if (cleanNumber.length === 10 || cleanNumber.length === 11) {\r            // Sadece SignalR bağlı ise validation yap\r            if (isConnected) {\r              setValidating(prev => ({ ...prev, identityNumber: true }));\r              // Async validation with proper error handling\r              try {\r                validateIdentity(cleanNumber).then(() => {\r                }).catch(error => {\r                  setValidating(prev => ({ ...prev, identityNumber: false }));\r                  setValidationErrors(prev => ({ ...prev, identityNumber: 'Doğrulama sırasında hata oluştu' }));\r                });\r              } catch (error) {\r                setValidating(prev => ({ ...prev, identityNumber: false }));\r                setValidationErrors(prev => ({ ...prev, identityNumber: 'Doğrulama sırasında hata oluştu' }));\r              }\r            } else {\r              // SignalR bağlı değilse basit client-side validation yap\r              const isValidLength = (formData.identityType === 'TC' && cleanNumber.length === 11) || \r                                   (formData.identityType === 'VKN' && cleanNumber.length === 10);\r              if (isValidLength) {\r                setValidationSuccess(prev => ({ ...prev, identityNumber: true }));\r              }\r            }\r          }\r          break;\r      }\r    }\r  };\r  const selectCompanySuggestion = (company: string) => {\r    setFormData(prev => ({ ...prev, companyName: company }));\r    setShowCompanySuggestions(false);\r    setValidationErrors(prev => ({ ...prev, companyName: '' }));\r    // Auto-generate company code from name\r    const code = company\r      .toLowerCase()\r      .replace(/[^a-z0-9\\s]/g, '')\r      .split(' ')\r      .slice(0, 2)\r      .join('-')\r      .substring(0, 20);\r    setFormData(prev => ({ ...prev, companyCode: code }));\r    // Validate if connected\r    if (isConnected) {\r      setValidating(prev => ({ ...prev, companyName: true }));\r      checkCompanyName(company);\r    }\r  };\r  const selectTitleSuggestion = (title: string) => {\r    setFormData(prev => ({ ...prev, contactTitle: title }));\r    setShowTitleSuggestions(false);\r    setValidationErrors(prev => ({ ...prev, contactTitle: '' }));\r  };\r  const selectEmailSuggestion = (email: string) => {\r    setFormData(prev => ({ ...prev, contactEmail: email }));\r    setShowEmailSuggestions(false);\r    setValidationErrors(prev => ({ ...prev, email: '' }));\r    // Validate email if connected\r    if (isConnected && email && email.includes('@')) {\r      setValidating(prev => ({ ...prev, email: true }));\r      validateEmail(email);\r    }\r  };\r  const validateStep = (step: number): boolean => {\r    const errors: { [key: string]: string } = {};\r    let hasError = false;\r    switch (step) {\r      case 0:\r        if (!formData.companyName) {\r          errors.companyName = 'Şirket adı zorunludur';\r          hasError = true;\r        }\r        if (!formData.companyCode) {\r          errors.companyCode = 'Şirket kodu zorunludur';\r          hasError = true;\r        }\r        if (!formData.identityNumber) {\r          errors.identityNumber = 'Kimlik/Vergi numarası zorunludur';\r          hasError = true;\r        } else if (formData.identityType === 'TC' && formData.identityNumber.length !== 11) {\r          errors.identityNumber = 'TC Kimlik numarası 11 haneli olmalıdır';\r          hasError = true;\r        } else if (formData.identityType === 'VKN' && formData.identityNumber.length !== 10) {\r          errors.identityNumber = 'Vergi numarası 10 haneli olmalıdır';\r          hasError = true;\r        }\r        if (!formData.sector) {\r          errors.sector = 'Sektör seçimi zorunludur';\r          hasError = true;\r        }\r        if (!formData.employeeCount) {\r          errors.employeeCount = 'Çalışan sayısı zorunludur';\r          hasError = true;\r        }\r        if (hasError) {\r          setValidationErrors(prev => ({ ...prev, ...errors }));\r          message.error('Lütfen tüm zorunlu alanları doldurun');\r          return false;\r        }\r        return true;\r      case 1:\r        if (!formData.contactName) {\r          errors.contactName = 'Ad Soyad zorunludur';\r          hasError = true;\r        }\r        if (!formData.contactTitle) {\r          errors.contactTitle = 'Ünvan zorunludur';\r          hasError = true;\r        }\r        if (!formData.contactEmail) {\r          errors.email = 'E-posta adresi zorunludur';\r          hasError = true;\r        } else {\r          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r          if (!emailRegex.test(formData.contactEmail)) {\r            errors.email = 'Geçerli bir e-posta adresi girin';\r            hasError = true;\r          }\r        }\r        if (!formData.contactPhone) {\r          errors.phone = 'Telefon numarası zorunludur';\r          hasError = true;\r        } else {\r          const phoneRegex = /^[0-9]{10,11}$/;\r          if (!phoneRegex.test(formData.contactPhone.replace(/\\D/g, ''))) {\r            errors.phone = 'Geçerli bir telefon numarası girin';\r            hasError = true;\r          }\r        }\r        if (hasError) {\r          setValidationErrors(prev => ({ ...prev, ...errors }));\r          message.error('Lütfen tüm zorunlu alanları doldurun');\r          return false;\r        }\r        return true;\r      case 2:\r        if (!formData.password) {\r          errors.password = 'Şifre zorunludur';\r          hasError = true;\r        } else if (passwordStrength.score < 3) {\r          errors.password = 'Lütfen daha güçlü bir şifre seçin';\r          hasError = true;\r        }\r        if (!formData.confirmPassword) {\r          errors.confirmPassword = 'Şifre tekrarı zorunludur';\r          hasError = true;\r        } else if (formData.password !== formData.confirmPassword) {\r          errors.confirmPassword = 'Şifreler eşleşmiyor';\r          hasError = true;\r        }\r        if (!formData.termsAccepted) {\r          errors.terms = 'Kullanım koşullarını kabul etmelisiniz';\r          hasError = true;\r        }\r        if (hasError) {\r          setValidationErrors(prev => ({ ...prev, ...errors }));\r          message.error('Lütfen tüm zorunlu alanları doldurun');\r          return false;\r        }\r        return true;\r      case 3:\r        if (!formData.packageId) {\r          setValidationErrors(prev => ({ ...prev, packageId: 'Lütfen bir paket seçin' }));\r          message.error('Lütfen bir paket seçin');\r          return false;\r        }\r        return true;\r      default:\r        return true;\r    }\r  };\r  const handleNext = () => {\r    if (validateStep(currentStep)) {\r      if (currentStep < steps.length - 1) {\r        setCurrentStep(currentStep + 1);\r      } else {\r        handleSubmit();\r      }\r    }\r  };\r  const handleBack = () => {\r    if (currentStep > 0) {\r      setCurrentStep(currentStep - 1);\r    }\r  };\r  const handleSubmit = async () => {\r    // Önce captcha ve e-posta doğrulaması yap\r    if (!captchaToken) {\r      message.warning('Lütfen önce güvenlik doğrulamasını tamamlayın');\r      // Captcha modal'ını aç\r      Modal.confirm({\r        title: 'Güvenlik Doğrulaması',\r        icon: <SafetyOutlined />,\r        content: (\r          <div style={{ marginTop: 16 }}>\r            <p style={{ marginBottom: 16 }}>Kayıt işlemini tamamlamak için lütfen güvenlik doğrulamasını yapın.</p>\r            <Captcha\r              siteKey={process.env.REACT_APP_RECAPTCHA_SITE_KEY || '6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI'}\r              onVerify={(token) => {\r                setCaptchaToken(token);\r                message.success('Güvenlik doğrulaması başarılı!');\r                Modal.destroyAll();\r                // Captcha tamamlandı, şimdi e-posta doğrulaması\r                if (!emailVerified) {\r                  setShowEmailVerification(true);\r                } else {\r                  // Her ikisi de tamamsa kayıt işlemini başlat\r                  performRegistration();\r                }\r              }}\r              onError={() => {\r                message.error('Güvenlik doğrulaması başarısız!');\r              }}\r            />\r          </div>\r        ),\r        okText: 'İptal',\r        cancelButtonProps: { style: { display: 'none' } },\r        onOk: () => {}\r      });\r      return;\r    }\r    // E-posta doğrulaması kontrolü\r    if (!emailVerified) {\r      setShowEmailVerification(true);\r      message.warning('Lütfen e-posta adresinizi doğrulayın');\r      return;\r    }\r    // Her şey tamam, kayıt işlemini başlat\r    performRegistration();\r  };\r  const performRegistration = async () => {\r    setLoading(true);\r    try {\r      const [firstName, ...lastNameParts] = formData.contactName.split(' ');\r      const lastName = lastNameParts.join(' ') || firstName;\r      const registrationData = {\r        companyName: formData.companyName,\r        companyCode: formData.companyCode,\r        identityType: formData.identityType,\r        identityNumber: formData.identityNumber,\r        sector: formData.sector,\r        employeeCount: formData.employeeCount,\r        contactName: formData.contactName,\r        contactEmail: formData.contactEmail,\r        contactPhone: formData.contactPhone,\r        contactTitle: formData.contactTitle,\r        email: formData.contactEmail,\r        username: formData.contactEmail.split('@')[0] || formData.companyCode,\r        firstName: firstName,\r        lastName: lastName,\r        password: formData.password,\r        domain: formData.companyCode,\r        packageId: formData.packageId || selectedPackage?.id,\r        billingPeriod: formData.billingPeriod || 'Monthly'\r      };\r      const response = await apiClient.post('/api/public/register', registrationData);\r      if (response.data?.success && response.data?.data?.id) {\r        message.success('Kayıt başarıyla tamamlandı!');\r        onComplete(response.data.data);\r      } else {\r        message.error('Kayıt sırasında bir hata oluştu');\r      }\r    } catch (error: any) {\r      // Detaylı hata mesajı\r      let errorMessage = 'Kayıt işlemi başarısız';\r      if (error.response?.data?.errors) {\r        // Validation hataları varsa\r        const errors = error.response.data.errors;\r        const errorList = Object.keys(errors).map(key => \r          `${key}: ${Array.isArray(errors[key]) ? errors[key].join(', ') : errors[key]}`\r        ).join('\\n');\r        message.error({\r          content: (\r            <div>\r              <strong>Kayıt hatası:</strong>\r              <br />\r              {errorList}\r            </div>\r          ),\r          duration: 5\r        });\r      } else if (error.response?.data?.message) {\r        // Genel hata mesajı\r        errorMessage = error.response.data.message;\r        message.error(errorMessage, 5);\r      } else if (error.response?.status === 400) {\r        errorMessage = 'Girdiğiniz bilgilerde hata var. Lütfen kontrol edin.';\r        message.error(errorMessage, 5);\r      } else if (error.response?.status === 500) {\r        errorMessage = 'Sunucu hatası. Lütfen daha sonra tekrar deneyin.';\r        message.error(errorMessage, 5);\r      } else {\r        message.error(errorMessage, 5);\r      }\r      // Debug için console'a detaylı bilgi\r    } finally {\r      setLoading(false);\r    }\r  };\r  const renderStepContent = () => {\r    switch (currentStep) {\r      case 0:\r        return (\r          <div className=\"form-fields\">\r            <div className=\"form-header\">\r              <h2 className=\"form-title\">Şirket Bilgileri</h2>\r              <p className=\"form-subtitle\">İşletmenizin temel bilgilerini girin</p>\r            </div>\r            <div className=\"form-row\">\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Şirket Adı <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"input-wrapper\">\r                  <span className=\"input-icon\"><ShopOutlined /></span>\r                  <input\r                    type=\"text\"\r                    className={`form-input form-input-icon ${validationErrors.companyName ? 'input-error' : ''} ${validationSuccess.companyName ? 'input-success' : ''} ${validating.companyName ? 'input-validating' : ''}`}\r                    placeholder=\"Örn: ABC Teknoloji A.Ş.\"\r                    value={formData.companyName}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('companyName', e.target.value)}\r                    onFocus={() => {\r                      if (formData.companyName && formData.companyName.length >= 2) {\r                        const generatedSuggestions = generateCompanySuggestions(formData.companyName);\r                        setCompanySuggestions(generatedSuggestions);\r                        setShowCompanySuggestions(generatedSuggestions.length > 0);\r                      }\r                    }}\r                    onBlur={() => {\r                      // Delay to allow click on suggestions\r                      setTimeout(() => setShowCompanySuggestions(false), 200);\r                    }}\r                  />\r                  {validating.companyName && <Spin size=\"small\" className=\"input-spinner\" />}\r                  {/* Autocomplete Suggestions */}\r                  {showCompanySuggestions && (\r                    <div className=\"autocomplete-suggestions\">\r                      {companySuggestions.map((suggestion, index) => (\r                        <div\r                          key={index}\r                          className=\"suggestion-item\"\r                          onClick={() => selectCompanySuggestion(suggestion)}\r                         role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => selectCompanySuggestion(suggestion)(e)}>\r                          <ShopOutlined className=\"suggestion-icon\" />\r                          <span className=\"suggestion-text\">{suggestion}</span>\r                          {suggestion.includes('A.Ş.') && !suggestion.includes('San.') && !suggestion.includes('Holding') && (\r                            <span className=\"suggestion-badge\">A.Ş.</span>\r                          )}\r                          {suggestion.includes('Ltd. Şti.') && (\r                            <span className=\"suggestion-badge\">Ltd.</span>\r                          )}\r                          {suggestion.includes('Holding') && (\r                            <span className=\"suggestion-badge\">Holding</span>\r                          )}\r                          {suggestion.includes('Teknoloji') && (\r                            <span className=\"suggestion-badge\" style={{background: 'linear-gradient(135deg, #3B82F6, #8B5CF6)'}}>Teknoloji</span>\r                          )}\r                          {suggestion.includes('Yazılım') && (\r                            <span className=\"suggestion-badge\" style={{background: 'linear-gradient(135deg, #10B981, #059669)'}}>Yazılım</span>\r                          )}\r                        </div>\r                      ))}\r                      <div className=\"suggestion-footer\">\r                        <span className=\"suggestion-hint\">💡 Bir öneriyi seçin veya kendi şirket adınızı yazın</span>\r                      </div>\r                    </div>\r                  )}\r                </div>\r                {validationErrors.companyName && <span className=\"error-message\">{validationErrors.companyName}</span>}\r                {validationSuccess.companyName && !validationErrors.companyName && <span className=\"success-message\">✓ Şirket adı kullanılabilir</span>}\r              </div>\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Şirket Kodu <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"input-wrapper\">\r                  <span className=\"input-icon\"><IdcardOutlined /></span>\r                  <input\r                    type=\"text\"\r                    className={`form-input form-input-icon ${validationErrors.companyCode ? 'input-error' : ''} ${validationSuccess.companyCode ? 'input-success' : ''} ${validating.companyCode ? 'input-validating' : ''}`}\r                    placeholder=\"Örn: abc-tech\"\r                    value={formData.companyCode}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('companyCode', e.target.value.toLowerCase().replace(/[^a-z0-9-]/g, ''))}\r                    onBlur={() => {\r                      if (formData.companyCode && formData.companyCode.length >= 3 && !validating.companyCode) {\r                        setValidating(prev => ({ ...prev, companyCode: true }));\r                        // Use tenant code validation if available, fallback to domain check\r                        if (validateTenantCode) {\r                          validateTenantCode(formData.companyCode);\r                        } else if (checkDomain) {\r                          checkDomain(formData.companyCode);\r                        }\r                      }\r                    }}\r                  />\r                  {validating.companyCode && <Spin size=\"small\" className=\"input-spinner\" />}\r                  {validationErrors.companyCode && <span className=\"error-message\">{validationErrors.companyCode}</span>}\r                {validationSuccess.companyCode && !validationErrors.companyCode && <span className=\"success-message\">✓ Şirket kodu kullanılabilir</span>}\r                </div>\r              </div>\r            </div>\r            <div className=\"form-row single\">\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Kimlik Türü <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"radio-cards\">\r                  <div className=\"radio-card\">\r                    <input\r                      type=\"radio\"\r                      id=\"tc\"\r                      name=\"identityType\"\r                      value=\"TC\"\r                      checked={formData.identityType === 'TC'}\r                      onChange={(e) = aria-label=\"input field\"> handleInputChange('identityType', e.target.value)}\r                    />\r                    <label htmlFor=\"tc\" className=\"radio-card-label\">\r                      <div className=\"radio-card-icon\"><UserOutlined /></div>\r                      <div className=\"radio-card-text\">\r                        <div className=\"radio-card-title\">TC Kimlik</div>\r                        <div className=\"radio-card-desc\">Şahıs şirketleri için</div>\r                      </div>\r                    </label>\r                  </div>\r                  <div className=\"radio-card\">\r                    <input\r                      type=\"radio\"\r                      id=\"vkn\"\r                      name=\"identityType\"\r                      value=\"VKN\"\r                      checked={formData.identityType === 'VKN'}\r                      onChange={(e) = aria-label=\"input field\"> handleInputChange('identityType', e.target.value)}\r                    />\r                    <label htmlFor=\"vkn\" className=\"radio-card-label\">\r                      <div className=\"radio-card-icon\"><BankOutlined /></div>\r                      <div className=\"radio-card-text\">\r                        <div className=\"radio-card-title\">Vergi No</div>\r                        <div className=\"radio-card-desc\">Kurumsal şirketler için</div>\r                      </div>\r                    </label>\r                  </div>\r                </div>\r              </div>\r            </div>\r            <div className=\"form-row single\">\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  {formData.identityType === 'TC' ? 'TC Kimlik No' : 'Vergi No'} <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"input-wrapper\">\r                  <input\r                    type=\"text\"\r                    className={`form-input ${validationErrors.identityNumber ? 'input-error' : ''} ${validationSuccess.identityNumber ? 'input-success' : ''} ${validating.identityNumber ? 'input-validating' : ''}`}\r                    placeholder={formData.identityType === 'TC' ? '11 haneli TC kimlik numarası' : '10 haneli vergi numarası'}\r                    value={formData.identityNumber}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('identityNumber', e.target.value.replace(/\\D/g, ''))}\r                    maxLength={formData.identityType === 'TC' ? 11 : 10}\r                  />\r                  {validating.identityNumber && (\r                    <div className=\"input-spinner\">\r                      <LoadingOutlined style={{ fontSize: 16, color: '#667eea' }} />\r                    </div>\r                  )}\r                </div>\r                {validationErrors.identityNumber && <span className=\"error-message\">{validationErrors.identityNumber}</span>}\r                {validationSuccess.identityNumber && <span className=\"success-message\">✓ {formData.identityType === 'TC' ? 'TC Kimlik numarası' : 'Vergi numarası'} geçerli</span>}\r              </div>\r            </div>\r            <div className=\"form-row\">\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Sektör <span className=\"form-label-required\">*</span>\r                </label>\r                <Select\r                  name=\"sector\"\r                  options={sectorOptions}\r                  value={sectorOptions.find(opt = aria-label=\"select field\"> opt.value === formData.sector)}\r                  onChange={(option) => handleInputChange('sector', option?.value || '')}\r                  placeholder=\"Sektör seçin\"\r                  styles={customSelectStyles}\r                  isSearchable={true}\r                  isClearable={true}\r                  noOptionsMessage={() => \"Sonuç bulunamadı\"}\r                />\r                {validationErrors.sector && <span className=\"error-message\">{validationErrors.sector}</span>}\r              </div>\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Çalışan Sayısı <span className=\"form-label-required\">*</span>\r                </label>\r                <Select\r                  name=\"employeeCount\"\r                  options={employeeCountOptions}\r                  value={employeeCountOptions.find(opt = aria-label=\"select field\"> opt.value === formData.employeeCount)}\r                  onChange={(option) => handleInputChange('employeeCount', option?.value || '')}\r                  placeholder=\"Çalışan sayısı seçin\"\r                  styles={customSelectStyles}\r                  isSearchable={false}\r                  isClearable={true}\r                  noOptionsMessage={() => \"Sonuç bulunamadı\"}\r                />\r                {validationErrors.employeeCount && <span className=\"error-message\">{validationErrors.employeeCount}</span>}\r              </div>\r            </div>\r          </div>\r        );\r      case 1:\r        return (\r          <div className=\"form-fields\">\r            <div className=\"form-header\">\r              <h2 className=\"form-title\">İletişim Bilgileri</h2>\r              <p className=\"form-subtitle\">Hesap yöneticisi bilgilerini girin</p>\r            </div>\r            <div className=\"info-box\">\r              <span className=\"info-box-icon\"><InfoCircleOutlined /></span>\r              <div className=\"info-box-content\">\r                <div className=\"info-box-title\">Önemli Bilgi</div>\r                <div className=\"info-box-text\">\r                  Bu bilgiler hesabınızın ana yöneticisi için kullanılacaktır.\r                  Kayıt sonrası ek kullanıcılar ekleyebilirsiniz.\r                </div>\r              </div>\r            </div>\r            <div className=\"form-row\">\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Ad Soyad <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"input-wrapper\">\r                  <span className=\"input-icon\"><UserOutlined /></span>\r                  <input\r                    type=\"text\"\r                    className={`form-input form-input-icon ${validationErrors.contactName ? 'input-error' : ''}`}\r                    placeholder=\"Örn: Ahmet Yılmaz\"\r                    value={formData.contactName}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('contactName', e.target.value)}\r                  />\r                </div>\r                {validationErrors.contactName && <span className=\"error-message\">{validationErrors.contactName}</span>}\r              </div>\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Ünvan <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"input-wrapper\" style={{ position: 'relative' }}>\r                  <span className=\"input-icon\"><IdcardOutlined /></span>\r                  <input\r                    type=\"text\"\r                    className={`form-input form-input-icon ${validationErrors.contactTitle ? 'input-error' : ''}`}\r                    placeholder=\"Örn: Genel Müdür\"\r                    value={formData.contactTitle}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('contactTitle', e.target.value)}\r                    onFocus={() => {\r                      if (formData.contactTitle.length >= 1) {\r                        const suggestions = generateTitleSuggestions(formData.contactTitle);\r                        setTitleSuggestions(suggestions);\r                        setShowTitleSuggestions(suggestions.length > 0);\r                      }\r                    }}\r                    onBlur={() => {\r                      setTimeout(() => setShowTitleSuggestions(false), 200);\r                    }}\r                  />\r                  {showTitleSuggestions && (\r                    <div className=\"autocomplete-suggestions\">\r                      {titleSuggestions.map((title, index) => (\r                        <div\r                          key={index}\r                          className=\"suggestion-item\"\r                          onClick={() => selectTitleSuggestion(title)}\r                         role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => selectTitleSuggestion(title)(e)}>\r                          <span className=\"suggestion-icon\">👤</span>\r                          <span className=\"suggestion-text\">{title}</span>\r                        </div>\r                      ))}\r                      <div className=\"suggestion-footer\">\r                        <span className=\"suggestion-hint\">💡 Yönetici pozisyonları</span>\r                      </div>\r                    </div>\r                  )}\r                </div>\r                {validationErrors.contactTitle && <span className=\"error-message\">{validationErrors.contactTitle}</span>}\r              </div>\r            </div>\r            <div className=\"form-row single\">\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  E-posta Adresi <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"input-wrapper\" style={{ position: 'relative' }}>\r                  <span className=\"input-icon\"><MailOutlined /></span>\r                  <input\r                    type=\"email\"\r                    className={`form-input form-input-icon ${validationErrors.email ? 'input-error' : ''} ${validating.email ? 'input-validating' : ''}`}\r                    placeholder=\"ornek@sirket.com\"\r                    value={formData.contactEmail}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('contactEmail', e.target.value)}\r                    onFocus={() => {\r                      if (formData.contactEmail.length >= 2) {\r                        const suggestions = generateEmailSuggestions(formData.contactEmail);\r                        setEmailSuggestions(suggestions);\r                        setShowEmailSuggestions(suggestions.length > 0);\r                      }\r                    }}\r                    onBlur={() => {\r                      setTimeout(() => setShowEmailSuggestions(false), 200);\r                    }}\r                  />\r                  {validating.email && <Spin size=\"small\" className=\"input-spinner\" />}\r                  {showEmailSuggestions && (\r                    <div className=\"autocomplete-suggestions\">\r                      {emailSuggestions.map((email, index) => (\r                        <div\r                          key={index}\r                          className=\"suggestion-item\"\r                          onClick={() => selectEmailSuggestion(email)}\r                         role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => selectEmailSuggestion(email)(e)}>\r                          <span className=\"suggestion-icon\">✉️</span>\r                          <span className=\"suggestion-text\">{email}</span>\r                          {email.includes(formData.companyName.toLowerCase().replace(/\\s+/g, '').replace(/[^a-z0-9]/gi, '')) && (\r                            <span className=\"suggestion-badge\">Şirket</span>\r                          )}\r                        </div>\r                      ))}\r                      <div className=\"suggestion-footer\">\r                        <span className=\"suggestion-hint\">🌐 Domain önerileri</span>\r                      </div>\r                    </div>\r                  )}\r                  {validationErrors.email && <span className=\"error-message\">{validationErrors.email}</span>}\r                </div>\r              </div>\r            </div>\r            <div className=\"form-row single\">\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Telefon <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"input-wrapper\">\r                  <span className=\"input-icon\"><PhoneOutlined /></span>\r                  <input\r                    type=\"tel\"\r                    className={`form-input form-input-icon ${validationErrors.phone ? 'input-error' : ''} ${validating.phone ? 'input-validating' : ''} ${phoneValidation?.isValid && !validating.phone ? 'input-success' : ''}`}\r                    placeholder=\"5XX XXX XX XX\"\r                    value={formData.contactPhone}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('contactPhone', e.target.value)}\r                  />\r                  {validating.phone && <Spin size=\"small\" className=\"input-spinner\" />}\r                  {!validating.phone && phoneValidation && !validationErrors.phone && (\r                    <span className=\"validation-icon\">\r                      {phoneValidation.isValid ? (\r                        <CheckCircleOutlined style={{ color: '#52c41a', fontSize: '16px' }} />\r                      ) : (\r                        <CloseCircleOutlined style={{ color: '#ff4d4f', fontSize: '16px' }} />\r                      )}\r                    </span>\r                  )}\r                  {validationErrors.phone && <span className=\"error-message\">{validationErrors.phone}</span>}\r                  {!validating.phone && phoneValidation && phoneValidation.formattedNumber && phoneValidation.isValid && (\r                    <span className=\"success-hint\" style={{ color: '#52c41a', fontSize: '12px', marginTop: '4px' }}>\r                      Formatlanmış: {phoneValidation.formattedNumber}\r                    </span>\r                  )}\r                </div>\r              </div>\r            </div>\r          </div>\r        );\r      case 2:\r        return (\r          <div className=\"form-fields\">\r            <div className=\"form-header\">\r              <h2 className=\"form-title\">Hesap Güvenliği</h2>\r              <p className=\"form-subtitle\">Güçlü bir şifre belirleyin</p>\r            </div>\r            <div className=\"form-row single\">\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Şifre <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"input-wrapper\">\r                  <span className=\"input-icon\"><LockOutlined /></span>\r                  <input\r                    type=\"password\"\r                    className={`form-input form-input-icon ${validationErrors.password ? 'input-error' : ''}`}\r                    placeholder=\"En az 8 karakter\"\r                    value={formData.password}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('password', e.target.value)}\r                  />\r                </div>\r                {validationErrors.password && <span className=\"error-message\">{validationErrors.password}</span>}\r              </div>\r            </div>\r            <div className=\"form-row single\">\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Şifre Tekrar <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"input-wrapper\">\r                  <span className=\"input-icon\"><LockOutlined /></span>\r                  <input\r                    type=\"password\"\r                    className={`form-input form-input-icon ${validationErrors.confirmPassword ? 'input-error' : ''}`}\r                    placeholder=\"Şifreyi tekrar girin\"\r                    value={formData.confirmPassword}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('confirmPassword', e.target.value)}\r                  />\r                </div>\r                {validationErrors.confirmPassword && <span className=\"error-message\">{validationErrors.confirmPassword}</span>}\r              </div>\r            </div>\r            {formData.password && (\r              <div className=\"password-meter\">\r                <div className=\"password-meter-bar\">\r                  <div className={`password-meter-fill ${getPasswordStrengthLabel()}`} />\r                </div>\r                <div className=\"password-requirements\">\r                  <div className={`requirement-item ${passwordStrength.hasMinLength ? 'met' : ''}`}>\r                    <span className=\"requirement-icon\">{passwordStrength.hasMinLength ? <CheckOutlined /> : '○'}</span>\r                    En az 8 karakter\r                  </div>\r                  <div className={`requirement-item ${passwordStrength.hasUpperCase ? 'met' : ''}`}>\r                    <span className=\"requirement-icon\">{passwordStrength.hasUpperCase ? <CheckOutlined /> : '○'}</span>\r                    Büyük harf\r                  </div>\r                  <div className={`requirement-item ${passwordStrength.hasLowerCase ? 'met' : ''}`}>\r                    <span className=\"requirement-icon\">{passwordStrength.hasLowerCase ? <CheckOutlined /> : '○'}</span>\r                    Küçük harf\r                  </div>\r                  <div className={`requirement-item ${passwordStrength.hasNumber ? 'met' : ''}`}>\r                    <span className=\"requirement-icon\">{passwordStrength.hasNumber ? <CheckOutlined /> : '○'}</span>\r                    Rakam\r                  </div>\r                  <div className={`requirement-item ${passwordStrength.hasSpecial ? 'met' : ''}`}>\r                    <span className=\"requirement-icon\">{passwordStrength.hasSpecial ? <CheckOutlined /> : '○'}</span>\r                    Özel karakter\r                  </div>\r                </div>\r              </div>\r            )}\r            <div className=\"form-row single\">\r              <div className=\"form-group\">\r                <label className=\"checkbox-label\">\r                  <input\r                    type=\"checkbox\"\r                    checked={formData.termsAccepted}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('termsAccepted', e.target.checked)}\r                  />\r                  <span>\r                    <a href=\"#\" onClick={(e) => e.preventDefault()}>Kullanım koşullarını</a> ve \r                    <a href=\"#\" onClick={(e) => e.preventDefault()}> gizlilik politikasını</a> okudum, kabul ediyorum.\r                  </span>\r                </label>\r                {validationErrors.terms && <span className=\"error-message\" style={{marginTop: '8px', display: 'block'}}>{validationErrors.terms}</span>}\r              </div>\r            </div>\r            <div className=\"info-box\">\r              <span className=\"info-box-icon\"><SafetyOutlined /></span>\r              <div className=\"info-box-content\">\r                <div className=\"info-box-title\">Güvenlik Garantisi</div>\r                <div className=\"info-box-text\">\r                  Tüm verileriniz 256-bit SSL şifreleme ile korunur.\r                  Şifreniz güvenli bir şekilde hashlenerek saklanır.\r                </div>\r              </div>\r            </div>\r          </div>\r        );\r      case 3:\r        return (\r          <div className=\"form-fields package-selection-step\">\r            <div className=\"form-header\">\r              <h2 className=\"form-title\">Paket Seçimi</h2>\r              <p className=\"form-subtitle\">İşletmenize en uygun paketi seçin</p>\r            </div>\r            {/* Billing Period Toggle - Üstte */}\r            <div className=\"billing-toggle-container\">\r              <div className=\"billing-toggle\">\r                <button \r                  className={`billing-toggle-btn ${formData.billingPeriod === 'Monthly' ? 'active' : ''}`}\r                  onClick={() => handleInputChange('billingPeriod', 'Monthly')}\r                >\r                  Aylık\r                </button>\r                <button \r                  className={`billing-toggle-btn ${formData.billingPeriod === 'Yearly' ? 'active' : ''}`}\r                  onClick={() => handleInputChange('billingPeriod', 'Yearly')}\r                >\r                  Yıllık\r                  <span className=\"discount-badge\">%20 İndirim</span>\r                </button>\r              </div>\r            </div>\r            {loadingPackages ? (\r              <div className=\"packages-loading\">\r                <Spin size=\"large\" />\r                <p>Paketler yükleniyor...</p>\r              </div>\r            ) : (\r              <div className=\"packages-container\">\r                {packages.map((pkg) => (\r                  <div \r                    key={pkg.id}\r                    className={`package-item ${formData.packageId === pkg.id ? 'selected' : ''} ${pkg.isPopular ? 'popular' : ''}`}\r                    onClick={() => {\r                      setFormData(prev => ({\r                        ...prev,\r                        packageId: pkg.id,\r                        packageName: pkg.name\r                      }));\r                    }}\r                   role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => {\r                      setFormData(prev => ({\r                        ...prev,\r                        packageId: pkg.id,\r                        packageName: pkg.name\r                      (e)}>\r                    {pkg.isPopular && (\r                      <div className=\"package-badge\">\r                        <span>EN POPÜLER</span>\r                      </div>\r                    )}\r                    <div className=\"package-content\">\r                      <div className=\"package-header\">\r                        <div className=\"package-icon\">\r                          {pkg.type === 'Starter' || pkg.name === 'Başlangıç' ? <RocketOutlined /> : null}\r                          {pkg.type === 'Professional' || pkg.name === 'Profesyonel' ? <CrownOutlined /> : null}\r                          {pkg.type === 'Enterprise' || pkg.name === 'Enterprise' ? <GlobalOutlined /> : null}\r                          {!pkg.type && pkg.name !== 'Başlangıç' && pkg.name !== 'Profesyonel' && pkg.name !== 'Enterprise' ? <ShoppingCartOutlined /> : null}\r                        </div>\r                        <div className=\"package-info\">\r                          <h3 className=\"package-name\">{pkg.name}</h3>\r                          <p className=\"package-description\">{pkg.description}</p>\r                        </div>\r                      </div>\r                      <div className=\"package-price-section\">\r                        <div className=\"package-price\">\r                          <span className=\"price-amount\">\r                            {pkg.currency}{formData.billingPeriod === 'Yearly' \r                              ? Math.floor(pkg.price * 12 * 0.8 / 12) \r                              : pkg.price}\r                          </span>\r                          <span className=\"price-period\">/ay</span>\r                        </div>\r                        {formData.billingPeriod === 'Yearly' && (\r                          <div style={{ marginTop: '4px' }}>\r                            <span className=\"price-original\">{pkg.currency}{pkg.price}</span>\r                            <span style={{ color: '#10b981', fontSize: '12px', marginLeft: '8px' }}>\r                              %20 tasarruf\r                            </span>\r                          </div>\r                        )}\r                        <div className=\"package-select\" style={{ marginTop: '16px' }}>\r                          <div className={`package-radio ${formData.packageId === pkg.id ? 'checked' : ''}`}>\r                            {formData.packageId === pkg.id && <CheckOutlined />}\r                          </div>\r                        </div>\r                      </div>\r                      <ul className=\"package-features\">\r                        {pkg.features?.map((feature, idx) => (\r                          <li key={idx}>\r                            <CheckOutlined style={{ color: '#10b981' }} /> {feature}\r                          </li>\r                        ))}\r                      </ul>\r                    </div>\r                  </div>\r                ))}\r              </div>\r            )}\r            {validationErrors.packageId && (\r              <span className=\"error-message package-error\">\r                {validationErrors.packageId}\r              </span>\r            )}\r          </div>\r        );\r      default:\r        return null;\r    }\r  };\r  const getProgressWidth = () => {\r    return `${((currentStep) / (steps.length - 1)) * 100}%`;\r  };\r  const getStepTitle = () => {\r    switch(currentStep) {\r      case 0: return 'Şirket Profili Oluşturun';\r      case 1: return 'İletişim Bilgilerini Tamamlayın';\r      case 2: return 'Güvenlik Ayarlarını Yapın';\r      case 3: return 'Paket Seçimi Yapın';\r      default: return 'İşletmenizi Güçlendirin';\r    }\r  };\r  const getStepDescription = () => {\r    switch(currentStep) {\r      case 0: return 'Şirketinizin temel bilgilerini girerek profilinizi oluşturun. Bu bilgiler faturalama ve yasal süreçlerde kullanılacaktır.';\r      case 1: return 'Hesap yöneticisi bilgilerinizi ekleyin. Size özel destek ve güncellemeler için iletişim bilgileriniz önemlidir.';\r      case 2: return 'Güçlü bir şifre belirleyerek hesabınızı koruma altına alın. Verilerinizin güvenliği bizim için önceliklidir.';\r      case 3: return 'İhtiyaçlarınıza en uygun paketi seçin. Her pakette farklı özellikler ve limitler bulunur.';\r      default: return 'Modern CRM ve stok yönetimi çözümleriyle işletmenizin verimliliğini artırın.';\r    }\r  };\r  return (\r    <div className=\"modern-wizard-container\">\r      {/* Left Side - Form Panel */}\r      <div className=\"wizard-form-panel\">\r        <div className=\"form-progress\">\r          <div className=\"progress-steps\">\r            <div className=\"progress-line\" style={{ width: getProgressWidth() }} />\r            {steps.map((step, index) => (\r              <div\r                key={index}\r                className={`progress-step ${\r                  index === currentStep ? 'active' : ''\r                } ${\r                  index < currentStep ? 'completed' : ''\r                }`}\r              >\r                <div className=\"step-circle\">\r                  {index < currentStep ? <CheckOutlined /> : (index + 1)}\r                </div>\r                <div className=\"step-label\">{step.label}</div>\r              </div>\r            ))}\r          </div>\r        </div>\r        {loading ? (\r          <div className=\"form-loading\">\r            <div className=\"loading-spinner\"></div>\r            <div className=\"loading-text\">İşleniyor...</div>\r          </div>\r        ) : (\r          <>\r            {renderStepContent()}\r            <div className=\"form-actions\">\r              {currentStep > 0 && (\r                <button\r                  className=\"btn btn-secondary\"\r                  onClick={handleBack}\r                >\r                  <ArrowLeftOutlined /> Geri\r                </button>\r              )}\r              <div className=\"step-dots\">\r                {steps.map((_, index) => (\r                  <div\r                    key={index}\r                    className={`step-dot ${index === currentStep ? 'active' : ''}`}\r                  />\r                ))}\r              </div>\r              <button\r                className=\"btn btn-primary\"\r                onClick={handleNext}\r                disabled={loading}\r              >\r                {currentStep === steps.length - 1 ? (\r                  <>Kayıt Ol <CheckOutlined /></>\r                ) : (\r                  <>İleri <ArrowRightOutlined /></>\r                )}\r              </button>\r            </div>\r          </>\r        )}\r      </div>\r      {/* Right Side - Visual Panel */}\r      <div className=\"wizard-visual-panel\">\r        <div className=\"floating-element\"></div>\r        <div className=\"floating-element\"></div>\r        <div className=\"floating-element\"></div>\r        <div className=\"wizard-brand\">\r          <h1>\r            <span className=\"wizard-brand-icon\">📊</span>\r            Stocker\r          </h1>\r          <p>İşletmenizi dijitalleştirin, büyütün</p>\r          {isConnected && (\r            <div className=\"connection-status\">\r              <span className=\"status-dot active\"></span>\r              <span className=\"status-text\">Canlı doğrulama aktif</span>\r            </div>\r          )}\r        </div>\r        <div className=\"wizard-illustration\">\r          <div className=\"illustration-container step-illustration\">\r            <div className={`illustration-graphic step-${currentStep}-graphic`}>\r              <div className=\"chart-bars\">\r                <div className=\"chart-bar\"></div>\r                <div className=\"chart-bar\"></div>\r                <div className=\"chart-bar\"></div>\r                <div className=\"chart-bar\"></div>\r                <div className=\"chart-bar\"></div>\r              </div>\r            </div>\r            <div className=\"illustration-text\">\r              <h2>{getStepTitle()}</h2>\r              <p>{getStepDescription()}</p>\r            </div>\r          </div>\r        </div>\r        <div className=\"wizard-features\">\r          <div className=\"feature-item\">\r            <div className=\"feature-icon\">🚀</div>\r            <div className=\"feature-text\">\r              <h4>Hızlı Kurulum</h4>\r              <p>5 dakikada başlayın</p>\r            </div>\r          </div>\r          <div className=\"feature-item\">\r            <div className=\"feature-icon\">🔒</div>\r            <div className=\"feature-text\">\r              <h4>Güvenli Altyapı</h4>\r              <p>256-bit SSL şifreleme</p>\r            </div>\r          </div>\r          <div className=\"feature-item\">\r            <div className=\"feature-icon\">📱</div>\r            <div className=\"feature-text\">\r              <h4>Mobil Uyumlu</h4>\r              <p>Her yerden erişim</p>\r            </div>\r          </div>\r        </div>\r      </div>\r      {/* E-posta Doğrulama Modal */}\r      <EmailVerificationModal\r        visible={showEmailVerification}\r        email={formData.contactEmail}\r        onClose={() => setShowEmailVerification(false)}\r        onVerified={() => {\r          setEmailVerified(true);\r          setShowEmailVerification(false);\r          message.success('E-posta adresiniz başarıyla doğrulandı!');\r          // Eğer captcha da tamamlandıysa kayıt işlemini başlat\r          if (captchaToken) {\r            performRegistration();\r          }\r        }}\r      />\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/register/pages/RegisterPage/ModernWizard.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { \r  Card, \r  Row, \r  Col, \r  Checkbox, \r  Typography, \r  Tag, \r  Space, \r  Button, \r  Divider,\r  Badge,\r  Tooltip,\r  message\r} from 'antd';\rimport {\r  UserOutlined,\r  InboxOutlined,\r  CalculatorOutlined,\r  TeamOutlined,\r  ShoppingCartOutlined,\r  ToolOutlined,\r  ProjectOutlined,\r  CarOutlined,\r  ShopOutlined,\r  FileTextOutlined,\r  ApiOutlined,\r  BankOutlined,\r  BarChartOutlined,\r  CheckCircleOutlined,\r  InfoCircleOutlined,\r  CrownOutlined,\r  PlusCircleOutlined,\r  AppstoreOutlined\r} from '@ant-design/icons';\rimport { modules, basePackages, calculateTotalPrice, getRequiredModules, getModulesByCategory } from '../../data/modules';\rconst { Title, Text, Paragraph } = Typography;\rinterface ModuleSelectionProps {\r  onComplete: (selectedModules: string[], basePackage: string, totalPrice: number) => void;\r  initialModules?: string[];\r  initialPackage?: string;\r}\rconst iconMap: { [key: string]: React.ReactNode } = {\r  'UserOutlined': <UserOutlined />,\r  'InboxOutlined': <InboxOutlined />,\r  'CalculatorOutlined': <CalculatorOutlined />,\r  'TeamOutlined': <TeamOutlined />,\r  'ShoppingCartOutlined': <ShoppingCartOutlined />,\r  'ToolOutlined': <ToolOutlined />,\r  'ProjectOutlined': <ProjectOutlined />,\r  'CarOutlined': <CarOutlined />,\r  'ShopOutlined': <ShopOutlined />,\r  'FileTextOutlined': <FileTextOutlined />,\r  'ApiOutlined': <ApiOutlined />,\r  'BankOutlined': <BankOutlined />,\r  'BarChartOutlined': <BarChartOutlined />\r};\rexport const ModuleSelection: React.FC<ModuleSelectionProps> = ({ \r  onComplete, \r  initialModules = [], \r  initialPackage = 'starter' \r}) => {\r  const [selectedModules, setSelectedModules] = useState<string[]>([...getRequiredModules(), ...initialModules]);\r  const [selectedPackage, setSelectedPackage] = useState<string>(initialPackage);\r  const [totalPrice, setTotalPrice] = useState(0);\r  useEffect(() => {\r    const price = calculateTotalPrice(selectedModules, selectedPackage);\r    setTotalPrice(price);\r  }, [selectedModules, selectedPackage]);\r  const handleModuleToggle = (moduleId: string, checked: boolean) => {\r    const module = modules.find(m => m.id === moduleId);\r    if (module?.required && !checked) {\r      message.warning('Bu modül zorunludur ve kaldırılamaz');\r      return;\r    }\r    if (checked) {\r      setSelectedModules([...selectedModules, moduleId]);\r    } else {\r      setSelectedModules(selectedModules.filter(id => id !== moduleId));\r    }\r  };\r  const handlePackageSelect = (packageId: string) => {\r    setSelectedPackage(packageId);\r  };\r  const handleContinue = () => {\r    if (selectedModules.length === 0) {\r      message.error('En az bir modül seçmelisiniz');\r      return;\r    }\r    onComplete(selectedModules, selectedPackage, totalPrice);\r  };\r  const renderModuleCard = (module: typeof modules[0]) => {\r    const isSelected = selectedModules.includes(module.id);\r    const icon = module.icon ? iconMap[module.icon] : <AppstoreOutlined />;\r    return (\r      <Card\r        key={module.id}\r        className={`module-card ${isSelected ? 'selected' : ''} ${module.required ? 'required' : ''}`}\r        hoverable={!module.required}\r        style={{\r          borderColor: isSelected ? '#667eea' : undefined,\r          borderWidth: isSelected ? 2 : 1\r        }}\r      >\r        <div style={{ position: 'relative' }}>\r          {module.popular && (\r            <Badge.Ribbon text=\"Popüler\" color=\"red\" />\r          )}\r          {module.required && (\r            <Tag color=\"blue\" style={{ position: 'absolute', top: 0, right: 0 }}>\r              Zorunlu\r            </Tag>\r          )}\r          <Checkbox\r            checked={isSelected}\r            disabled={module.required}\r            onChange={(e) => handleModuleToggle(module.id, e.target.checked)}\r            style={{ position: 'absolute', top: 0, left: 0 }}\r          />\r          <div style={{ textAlign: 'center', marginTop: 20 }}>\r            <div style={{ fontSize: 32, color: isSelected ? '#667eea' : '#999', marginBottom: 16 }}>\r              {icon}\r            </div>\r            <Title level={5} style={{ marginBottom: 8 }}>{module.name}</Title>\r            <Paragraph type=\"secondary\" style={{ fontSize: 13, marginBottom: 16 }}>\r              {module.description}\r            </Paragraph>\r            <div style={{ marginBottom: 16, display: 'flex', justifyContent: 'center', alignItems: 'baseline', flexWrap: 'wrap' }}>\r              <Text strong style={{ fontSize: 20, color: '#667eea' }}>\r                ₺{module.price}\r              </Text>\r              <Text type=\"secondary\" style={{ fontSize: 14, marginLeft: 4 }}>/ay</Text>\r            </div>\r            <div style={{ textAlign: 'left' }}>\r              {module.features.slice(0, 3).map((feature, idx) => (\r                <div key={idx} style={{ marginBottom: 4 }}>\r                  <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 6 }} />\r                  <Text style={{ fontSize: 12 }}>{feature}</Text>\r                </div>\r              ))}\r              {module.features.length > 3 && (\r                <Tooltip title={\r                  <div>\r                    {module.features.slice(3).map((feature, idx) => (\r                      <div key={idx}>{feature}</div>\r                    ))}\r                  </div>\r                }>\r                  <Text type=\"secondary\" style={{ fontSize: 12, cursor: 'pointer' }}>\r                    +{module.features.length - 3} özellik daha...\r                  </Text>\r                </Tooltip>\r              )}\r            </div>\r          </div>\r        </div>\r      </Card>\r    );\r  };\r  return (\r    <div className=\"module-selection\">\r      {/* Base Package Selection */}\r      <div style={{ marginBottom: 48 }}>\r        <Title level={3}>\r          <CrownOutlined /> Temel Paket Seçimi\r        </Title>\r        <Paragraph type=\"secondary\">\r          İşletmenizin büyüklüğüne uygun paketi seçin\r        </Paragraph>\r        <Row gutter={[24, 24]}>\r          {basePackages.map(pkg => (\r            <Col xs={24} md={8} key={pkg.id}>\r              <Badge.Ribbon \r                text=\"Popüler\" \r                color=\"red\"\r                style={{ display: pkg.popular ? 'block' : 'none' }}\r              >\r                <Card\r                  hoverable\r                  className={`package-card ${selectedPackage === pkg.id ? 'selected' : ''}`}\r                  onClick={() => handlePackageSelect(pkg.id)}\r                  style={{\r                    borderColor: selectedPackage === pkg.id ? '#667eea' : undefined,\r                    borderWidth: selectedPackage === pkg.id ? 2 : 1\r                  }}\r                >\r                  <div style={{ textAlign: 'center' }}>\r                    <Title level={4}>{pkg.name}</Title>\r                    <Text type=\"secondary\">{pkg.description}</Text>\r                    <div style={{ margin: '20px 0', display: 'flex', justifyContent: 'center', alignItems: 'baseline', flexWrap: 'wrap' }}>\r                      <Text strong style={{ fontSize: 24, color: '#667eea' }}>\r                        ₺{pkg.basePrice}\r                      </Text>\r                      <Text type=\"secondary\" style={{ fontSize: 14, marginLeft: 4 }}>/ay</Text>\r                    </div>\r                    <div style={{ textAlign: 'left' }}>\r                      {pkg.features.map((feature, idx) => (\r                        <div key={idx} style={{ marginBottom: 8 }}>\r                          <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 8 }} />\r                          <Text>{feature}</Text>\r                        </div>\r                      ))}\r                    </div>\r                    <Button\r                      type={selectedPackage === pkg.id ? 'primary' : 'default'}\r                      block\r                      style={{ marginTop: 16 }}\r                    >\r                      {selectedPackage === pkg.id ? 'Seçildi' : 'Seç'}\r                    </Button>\r                  </div>\r                </Card>\r              </Badge.Ribbon>\r            </Col>\r          ))}\r        </Row>\r      </div>\r      <Divider />\r      {/* Core Modules */}\r      <div style={{ marginBottom: 48 }}>\r        <Title level={3}>\r          <AppstoreOutlined /> Temel Modüller\r        </Title>\r        <Paragraph type=\"secondary\">\r          İşletmenizin temel ihtiyaçlarını karşılayan modüller\r        </Paragraph>\r        <Row gutter={[16, 16]}>\r          {getModulesByCategory('core').map(module => (\r            <Col xs={24} sm={12} md={8} lg={6} key={module.id}>\r              {renderModuleCard(module)}\r            </Col>\r          ))}\r        </Row>\r      </div>\r      {/* Addon Modules */}\r      <div style={{ marginBottom: 48 }}>\r        <Title level={3}>\r          <PlusCircleOutlined /> Eklenti Modüller\r        </Title>\r        <Paragraph type=\"secondary\">\r          İşletmenizi bir üst seviyeye taşıyacak özellikler\r        </Paragraph>\r        <Row gutter={[16, 16]}>\r          {getModulesByCategory('addon').map(module => (\r            <Col xs={24} sm={12} md={8} lg={6} key={module.id}>\r              {renderModuleCard(module)}\r            </Col>\r          ))}\r        </Row>\r      </div>\r      {/* Integration Modules */}\r      <div style={{ marginBottom: 48 }}>\r        <Title level={3}>\r          <ApiOutlined /> Entegrasyon Modülleri\r        </Title>\r        <Paragraph type=\"secondary\">\r          Diğer sistemlerle entegrasyon özellikleri\r        </Paragraph>\r        <Row gutter={[16, 16]}>\r          {getModulesByCategory('integration').map(module => (\r            <Col xs={24} sm={12} md={8} lg={6} key={module.id}>\r              {renderModuleCard(module)}\r            </Col>\r          ))}\r        </Row>\r      </div>\r      {/* Price Summary */}\r      <Card\r        style={{\r          position: 'sticky',\r          bottom: 0,\r          background: '#fff',\r          borderRadius: '8px 8px 0 0',\r          boxShadow: '0 -4px 12px rgba(0,0,0,0.1)',\r          zIndex: 10\r        }}\r      >\r        <Row align=\"middle\" justify=\"space-between\">\r          <Col>\r            <Space size=\"large\">\r              <div>\r                <Text type=\"secondary\">Temel Paket:</Text>\r                <br />\r                <Text strong style={{ fontSize: 18 }}>\r                  {basePackages.find(p => p.id === selectedPackage)?.name}\r                </Text>\r              </div>\r              <Divider type=\"vertical\" style={{ height: 40 }} />\r              <div>\r                <Text type=\"secondary\">Seçilen Modüller:</Text>\r                <br />\r                <Text strong style={{ fontSize: 18 }}>\r                  {selectedModules.length} modül\r                </Text>\r              </div>\r              <Divider type=\"vertical\" style={{ height: 40 }} />\r              <div>\r                <Text type=\"secondary\">Toplam Fiyat:</Text>\r                <br />\r                <Text strong style={{ fontSize: 24, color: '#667eea' }}>\r                  ₺{totalPrice}/ay\r                </Text>\r              </div>\r            </Space>\r          </Col>\r          <Col>\r            <Button\r              type=\"primary\"\r              size=\"large\"\r              onClick={handleContinue}\r              disabled={selectedModules.length === 0}\r            >\r              Devam Et\r            </Button>\r          </Col>\r        </Row>\r      </Card>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/register/pages/RegisterPage/ModuleSelection.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { Form, message } from 'antd';\rimport {\r  UserOutlined,\r  ShopOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  LockOutlined,\r  InfoCircleOutlined,\r  TeamOutlined,\r  CheckCircleOutlined,\r  IdcardOutlined,\r  CheckOutlined,\r  CloseOutlined,\r  SafetyOutlined,\r  BankOutlined,\r  SolutionOutlined,\r  ArrowLeftOutlined,\r  ArrowRightOutlined,\r  RocketOutlined\r} from '@ant-design/icons';\rimport { apiClient } from '@/shared/api/client';\rimport './neon-wizard.css';\rinterface NeonWizardProps {\r  onComplete: (data: any) => void;\r  selectedPackage?: any;\r}\rexport const NeonWizard: React.FC<NeonWizardProps> = ({ onComplete, selectedPackage }) => {\r  const [form] = Form.useForm();\r  const [currentStep, setCurrentStep] = useState(0);\r  const [loading, setLoading] = useState(false);\r  const [formData, setFormData] = useState<any>({});\r  const [password, setPassword] = useState('');\r  const [completedSteps, setCompletedSteps] = useState<number[]>([]);\r  const steps = [\r    {\r      id: 1,\r      title: 'Şirket Bilgileri',\r      description: 'İşletme detayları',\r      icon: <ShopOutlined />\r    },\r    {\r      id: 2, \r      title: 'Yetkili Bilgileri',\r      description: 'İletişim bilgileri',\r      icon: <UserOutlined />\r    },\r    {\r      id: 3,\r      title: 'Hesap Güvenliği',\r      description: 'Şifre oluşturma',\r      icon: <LockOutlined />\r    }\r  ];\r  const passwordRequirements = [\r    { key: 'length', label: 'En az 8 karakter', test: (pwd: string) => pwd.length >= 8 },\r    { key: 'uppercase', label: 'Büyük harf (A-Z)', test: (pwd: string) => /[A-Z]/.test(pwd) },\r    { key: 'lowercase', label: 'Küçük harf (a-z)', test: (pwd: string) => /[a-z]/.test(pwd) },\r    { key: 'number', label: 'Rakam (0-9)', test: (pwd: string) => /\\d/.test(pwd) },\r    { key: 'special', label: 'Özel karakter (!@#$%)', test: (pwd: string) => /[@$!%*?&]/.test(pwd) },\r    { key: 'noSpace', label: 'Boşluk içermemeli', test: (pwd: string) => !/\\s/.test(pwd) }\r  ];\r  const next = async () => {\r    try {\r      const values = await form.validateFields();\r      const newFormData = { ...formData, ...values };\r      setFormData(newFormData);\r      if (!completedSteps.includes(currentStep)) {\r        setCompletedSteps([...completedSteps, currentStep]);\r      }\r      if (currentStep === steps.length - 1) {\r        handleSubmit(newFormData);\r      } else {\r        setCurrentStep(currentStep + 1);\r      }\r    } catch (error) {\r      message.error('Lütfen tüm zorunlu alanları doldurun');\r    }\r  };\r  const prev = () => {\r    setCurrentStep(currentStep - 1);\r  };\r  const goToStep = (stepIndex: number) => {\r    if (stepIndex <= Math.max(...completedSteps, 0) + 1) {\r      setCurrentStep(stepIndex);\r    }\r  };\r  const handleSubmit = async (allValues: any) => {\r    setLoading(true);\r    try {\r      const [firstName, ...lastNameParts] = allValues.contactName?.split(' ') || ['', ''];\r      const lastName = lastNameParts.join(' ') || firstName;\r      const registrationData = {\r        companyName: allValues.companyName,\r        companyCode: allValues.companyCode,\r        identityType: allValues.identityType,\r        identityNumber: allValues.identityNumber,\r        sector: allValues.sector,\r        employeeCount: allValues.employeeCount,\r        contactName: allValues.contactName,\r        contactEmail: allValues.email,\r        contactPhone: allValues.phone,\r        contactTitle: allValues.title,\r        email: allValues.email,\r        username: allValues.email?.split('@')[0] || allValues.companyCode,\r        firstName: firstName,\r        lastName: lastName,\r        password: allValues.password,\r        domain: allValues.companyCode,\r        packageId: selectedPackage?.id,\r        billingPeriod: 'Monthly'\r      };\r      const response = await apiClient.post('/api/public/register', registrationData);\r      if (response.data?.success) {\r        message.success('Kayıt başarılı! Yönlendiriliyorsunuz...');\r        onComplete(response.data.data);\r      } else {\r        message.error(response.data?.message || 'Kayıt başarısız');\r      }\r    } catch (error: any) {\r      message.error(error.response?.data?.message || 'Bir hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const getProgressPercentage = () => {\r    return ((currentStep + 1) / steps.length) * 100;\r  };\r  const renderStepContent = () => {\r    switch (currentStep) {\r      case 0:\r        return (\r          <>\r            <div className=\"neon-form-header\">\r              <h3>Şirket Bilgilerinizi Girin</h3>\r              <p>İşletmenizin temel bilgilerini doldurun</p>\r            </div>\r            <div className=\"neon-form-body\">\r              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '24px' }}>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <ShopOutlined className=\"neon-form-label-icon\" />\r                    Şirket Adı\r                  </label>\r                  <Form.Item\r                    name=\"companyName\"\r                    rules={[{ required: true, message: 'Şirket adı zorunludur' }]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <input \r                        className=\"neon-input\"\r                        placeholder=\"ABC Teknoloji A.Ş.\"\r                      / aria-label=\"input field\">\r                      <ShopOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <InfoCircleOutlined className=\"neon-form-label-icon\" />\r                    Şirket Kodu\r                  </label>\r                  <Form.Item\r                    name=\"companyCode\"\r                    rules={[\r                      { required: true, message: 'Şirket kodu zorunludur' },\r                      { pattern: /^[a-z0-9-]+$/, message: 'Küçük harf, rakam ve tire' }\r                    ]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <input \r                        className=\"neon-input\"\r                        placeholder=\"abc-teknoloji\"\r                      / aria-label=\"input field\">\r                      <RocketOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r              </div>\r              <div className=\"neon-form-group\">\r                <label className=\"neon-form-label\">\r                  <IdcardOutlined className=\"neon-form-label-icon\" />\r                  Vergi Türü\r                </label>\r                <Form.Item\r                  name=\"identityType\"\r                  initialValue=\"vergi\"\r                  rules={[{ required: true, message: 'Vergi türü seçimi zorunludur' }]}\r                  noStyle\r                >\r                  <div className=\"neon-radio-group\">\r                    <div className=\"neon-radio-button\">\r                      <input type=\"radio\" id=\"tc\" name=\"identityType\" value=\"tc\" / aria-label=\"input field\">\r                      <label htmlFor=\"tc\" className=\"neon-radio-label\" onClick={() => form.setFieldsValue({ identityType: 'tc' })}>\r                        <IdcardOutlined className=\"neon-radio-icon\" />\r                        Şahıs Şirketi\r                      </label>\r                    </div>\r                    <div className=\"neon-radio-button\">\r                      <input type=\"radio\" id=\"vergi\" name=\"identityType\" value=\"vergi\" defaultChecked / aria-label=\"input field\">\r                      <label htmlFor=\"vergi\" className=\"neon-radio-label\" onClick={() => form.setFieldsValue({ identityType: 'vergi' })}>\r                        <BankOutlined className=\"neon-radio-icon\" />\r                        Kurumsal\r                      </label>\r                    </div>\r                  </div>\r                </Form.Item>\r              </div>\r              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '24px' }}>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <IdcardOutlined className=\"neon-form-label-icon\" />\r                    TC Kimlik / Vergi No\r                  </label>\r                  <Form.Item\r                    name=\"identityNumber\"\r                    rules={[\r                      { required: true, message: 'Bu alan zorunludur' },\r                      { pattern: /^\\d{10,11}$/, message: '10-11 haneli olmalı' }\r                    ]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <input \r                        className=\"neon-input\"\r                        placeholder=\"12345678901\"\r                        maxLength={11}\r                      / aria-label=\"input field\">\r                      <IdcardOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <TeamOutlined className=\"neon-form-label-icon\" />\r                    Çalışan Sayısı\r                  </label>\r                  <Form.Item\r                    name=\"employeeCount\"\r                    rules={[{ required: true, message: 'Çalışan sayısı zorunludur' }]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <select className=\"neon-input neon-select\" aria-label=\"select field\">\r                        <option value=\"\">Seçiniz</option>\r                        <option value=\"1-10\">1-10 Kişi</option>\r                        <option value=\"11-50\">11-50 Kişi</option>\r                        <option value=\"51-100\">51-100 Kişi</option>\r                        <option value=\"101-500\">101-500 Kişi</option>\r                        <option value=\"500+\">500+ Kişi</option>\r                      </select>\r                      <TeamOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r              </div>\r              <div className=\"neon-form-group\">\r                <label className=\"neon-form-label\">\r                  <ShopOutlined className=\"neon-form-label-icon\" />\r                  Sektör\r                </label>\r                <Form.Item\r                  name=\"sector\"\r                  rules={[{ required: true, message: 'Sektör seçimi zorunludur' }]}\r                  noStyle\r                >\r                  <div className=\"neon-input-wrapper\">\r                    <select className=\"neon-input neon-select\" aria-label=\"select field\">\r                      <option value=\"\">Sektörünüzü seçin</option>\r                      <option value=\"Teknoloji\">💻 Teknoloji</option>\r                      <option value=\"Perakende\">🛍️ Perakende</option>\r                      <option value=\"Üretim\">🏭 Üretim</option>\r                      <option value=\"Hizmet\">🤝 Hizmet</option>\r                      <option value=\"İnşaat\">🏗️ İnşaat</option>\r                      <option value=\"Sağlık\">🏥 Sağlık</option>\r                      <option value=\"Eğitim\">🎓 Eğitim</option>\r                      <option value=\"Lojistik\">🚚 Lojistik</option>\r                      <option value=\"Gıda\">🍽️ Gıda</option>\r                      <option value=\"Diğer\">📋 Diğer</option>\r                    </select>\r                    <ShopOutlined className=\"neon-input-icon\" />\r                  </div>\r                </Form.Item>\r              </div>\r            </div>\r          </>\r        );\r      case 1:\r        return (\r          <>\r            <div className=\"neon-form-header\">\r              <h3>Yetkili Bilgileri</h3>\r              <p>İletişim ve yetkili kişi bilgilerini girin</p>\r            </div>\r            <div className=\"neon-form-body\">\r              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '24px' }}>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <UserOutlined className=\"neon-form-label-icon\" />\r                    Ad Soyad\r                  </label>\r                  <Form.Item\r                    name=\"contactName\"\r                    rules={[{ required: true, message: 'Ad soyad zorunludur' }]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <input \r                        className=\"neon-input\"\r                        placeholder=\"Ahmet Yılmaz\"\r                      / aria-label=\"input field\">\r                      <UserOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <SolutionOutlined className=\"neon-form-label-icon\" />\r                    Unvan\r                  </label>\r                  <Form.Item\r                    name=\"title\"\r                    rules={[{ required: true, message: 'Unvan zorunludur' }]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <select className=\"neon-input neon-select\" aria-label=\"select field\">\r                        <option value=\"\">Unvanınızı seçin</option>\r                        <option value=\"Genel Müdür\">Genel Müdür</option>\r                        <option value=\"İşletme Sahibi\">İşletme Sahibi</option>\r                        <option value=\"Müdür\">Müdür</option>\r                        <option value=\"Yönetici\">Yönetici</option>\r                        <option value=\"Muhasebe Müdürü\">Muhasebe Müdürü</option>\r                        <option value=\"IT Müdürü\">IT Müdürü</option>\r                        <option value=\"Satın Alma Müdürü\">Satın Alma Müdürü</option>\r                        <option value=\"İnsan Kaynakları\">İnsan Kaynakları</option>\r                        <option value=\"Diğer\">Diğer</option>\r                      </select>\r                      <SolutionOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r              </div>\r              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '24px' }}>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <MailOutlined className=\"neon-form-label-icon\" />\r                    E-posta Adresi\r                  </label>\r                  <Form.Item\r                    name=\"email\"\r                    rules={[\r                      { required: true, message: 'E-posta zorunludur' },\r                      { type: 'email', message: 'Geçerli bir e-posta girin' }\r                    ]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <input \r                        type=\"email\"\r                        className=\"neon-input\"\r                        placeholder=\"ahmet@sirket.com\"\r                      / aria-label=\"input field\">\r                      <MailOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <PhoneOutlined className=\"neon-form-label-icon\" />\r                    Telefon Numarası\r                  </label>\r                  <Form.Item\r                    name=\"phone\"\r                    rules={[\r                      { required: true, message: 'Telefon zorunludur' },\r                      { pattern: /^[0-9]{10,11}$/, message: 'Geçerli telefon girin' }\r                    ]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <input \r                        className=\"neon-input\"\r                        placeholder=\"5551234567\"\r                        maxLength={11}\r                      / aria-label=\"input field\">\r                      <PhoneOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r              </div>\r              <div className=\"neon-info-box\">\r                <InfoCircleOutlined className=\"neon-info-icon\" />\r                <div className=\"neon-info-content\">\r                  <h5>Önemli Bilgilendirme</h5>\r                  <p>\r                    E-posta adresiniz hem iletişim hem de sisteme giriş için kullanılacaktır. \r                    Lütfen aktif olarak kullandığınız bir e-posta adresi girin.\r                  </p>\r                </div>\r              </div>\r            </div>\r          </>\r        );\r      case 2:\r        return (\r          <>\r            <div className=\"neon-form-header\">\r              <h3>Hesap Güvenliği</h3>\r              <p>Güçlü bir şifre oluşturarak hesabınızı koruyun</p>\r            </div>\r            <div className=\"neon-form-body\">\r              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '24px' }}>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <LockOutlined className=\"neon-form-label-icon\" />\r                    Şifre\r                  </label>\r                  <Form.Item\r                    name=\"password\"\r                    rules={[\r                      { required: true, message: 'Şifre zorunludur' },\r                      { min: 8, message: 'En az 8 karakter olmalı' },\r                      { \r                        pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/,\r                        message: 'Şifre gereksinimleri karşılanmıyor'\r                      }\r                    ]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <input \r                        type=\"password\"\r                        className=\"neon-input\"\r                        placeholder=\"Güvenli şifreniz\"\r                        onChange={(e) = aria-label=\"input field\"> setPassword(e.target.value)}\r                      />\r                      <LockOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <LockOutlined className=\"neon-form-label-icon\" />\r                    Şifre Tekrar\r                  </label>\r                  <Form.Item\r                    name=\"confirmPassword\"\r                    dependencies={['password']}\r                    rules={[\r                      { required: true, message: 'Şifre tekrarı zorunludur' },\r                      ({ getFieldValue }) => ({\r                        validator(_, value) {\r                          if (!value || getFieldValue('password') === value) {\r                            return Promise.resolve();\r                          }\r                          return Promise.reject(new Error('Şifreler eşleşmiyor'));\r                        },\r                      }),\r                    ]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <input \r                        type=\"password\"\r                        className=\"neon-input\"\r                        placeholder=\"Şifrenizi tekrar girin\"\r                      / aria-label=\"input field\">\r                      <LockOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r              </div>\r              {password && (\r                <div className=\"neon-password-strength\">\r                  <div className=\"neon-password-header\">\r                    <SafetyOutlined className=\"neon-password-header-icon\" />\r                    <h5>Şifre Gereksinimleri</h5>\r                  </div>\r                  <div className=\"neon-password-requirements\">\r                    {passwordRequirements.map(req => (\r                      <div \r                        key={req.key} \r                        className={`neon-requirement ${req.test(password) ? 'valid' : ''}`}\r                      >\r                        {req.test(password) ? (\r                          <CheckCircleOutlined className=\"neon-requirement-icon\" />\r                        ) : (\r                          <CloseOutlined className=\"neon-requirement-icon\" />\r                        )}\r                        {req.label}\r                      </div>\r                    ))}\r                  </div>\r                </div>\r              )}\r              {selectedPackage && (\r                <div className=\"neon-info-box\">\r                  <CheckCircleOutlined className=\"neon-info-icon\" />\r                  <div className=\"neon-info-content\">\r                    <h5>Seçili Paket: {selectedPackage.name}</h5>\r                    <p>\r                      Aylık {selectedPackage.price}₺ ödeme ile başlayacaksınız. \r                      İlk 14 gün ücretsiz deneme süreniz bulunmaktadır.\r                    </p>\r                  </div>\r                </div>\r              )}\r            </div>\r          </>\r        );\r      default:\r        return null;\r    }\r  };\r  return (\r    <div className=\"neon-wizard-wrapper\">\r      {/* Animated Background Shapes */}\r      <div className=\"floating-shapes\">\r        <div className=\"shape shape-1\"></div>\r        <div className=\"shape shape-2\"></div>\r        <div className=\"shape shape-3\"></div>\r      </div>\r      <div className=\"neon-wizard-card\">\r        {/* Left Sidebar */}\r        <div className=\"neon-wizard-sidebar\">\r          <div className=\"wizard-logo\">\r            <h2>Stocker</h2>\r            <p>İşletme Yönetim Sistemi</p>\r          </div>\r          <div className=\"neon-steps\">\r            {steps.map((step, index) => (\r              <div \r                key={step.id}\r                className={`neon-step ${currentStep === index ? 'active' : ''} ${completedSteps.includes(index) ? 'completed' : ''}`}\r                onClick={() => goToStep(index)}\r               role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => goToStep(index)(e)}>\r                <div className=\"neon-step-indicator\">\r                  {completedSteps.includes(index) && currentStep !== index ? (\r                    <CheckOutlined className=\"neon-step-check\" />\r                  ) : (\r                    <span>{index + 1}</span>\r                  )}\r                </div>\r                <div className=\"neon-step-content\">\r                  <h4>{step.title}</h4>\r                  <p>{step.description}</p>\r                </div>\r              </div>\r            ))}\r          </div>\r        </div>\r        {/* Right Content */}\r        <div className=\"neon-wizard-content\">\r          {/* Progress Bar */}\r          <div className=\"neon-progress-bar\">\r            <div \r              className=\"neon-progress-fill\" \r              style={{ width: `${getProgressPercentage()}%` }}\r            />\r          </div>\r          <Form\r            form={form}\r            layout=\"vertical\"\r            autoComplete=\"off\"\r          >\r            {loading ? (\r              <div className=\"neon-loading\">\r                <div className=\"neon-spinner\"></div>\r                <div className=\"neon-loading-text\">İşleminiz gerçekleştiriliyor...</div>\r              </div>\r            ) : (\r              renderStepContent()\r            )}\r          </Form>\r          {/* Footer */}\r          <div className=\"neon-wizard-footer\">\r            <button\r              className=\"neon-btn neon-btn-secondary\"\r              onClick={prev}\r              disabled={currentStep === 0}\r            >\r              <ArrowLeftOutlined />\r              Geri\r            </button>\r            <div className=\"neon-step-dots\">\r              {steps.map((_, index) => (\r                <div \r                  key={index} \r                  className={`neon-dot ${currentStep === index ? 'active' : ''}`}\r                />\r              ))}\r            </div>\r            <button\r              className=\"neon-btn neon-btn-primary\"\r              onClick={next}\r              disabled={loading}\r            >\r              {currentStep === steps.length - 1 ? 'Kaydı Tamamla' : 'İleri'}\r              {currentStep < steps.length - 1 && <ArrowRightOutlined />}\r              {currentStep === steps.length - 1 && <CheckOutlined />}\r            </button>\r          </div>\r        </div>\r      </div>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/register/pages/RegisterPage/NeonWizard.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React from 'react';\rimport { CheckCircleOutlined, RocketOutlined, CrownOutlined, ThunderboltOutlined } from '@ant-design/icons';\rimport './premium-package-selection.css';\rinterface Package {\r  id: string;\r  name: string;\r  description: string;\r  price: number;\r  currency: string;\r  billingPeriod: string;\r  features: string[];\r  maxUsers: number;\r  maxStorage: number;\r  modules: string[];\r  isPopular?: boolean;\r  discount?: number;\r}\rinterface PremiumPackageCardProps {\r  package: Package;\r  isSelected: boolean;\r  onSelect: (pkg: Package) => void;\r  billingPeriod: 'Monthly' | 'Yearly';\r}\rconst packageIcons: { [key: string]: React.ReactNode } = {\r  'Başlangıç': '🚀',\r  'Profesyonel': '💎',\r  'Enterprise': '👑'\r};\rconst packageThemes: { [key: string]: string } = {\r  'Başlangıç': 'starter',\r  'Profesyonel': 'professional',\r  'Enterprise': 'enterprise'\r};\rconst featureIcons: { [key: string]: string } = {\r  'Kullanıcı': '👤',\r  'Depolama': '💾',\r  'CRM': '📊',\r  'Stok': '📦',\r  'Muhasebe': '💰',\r  'İK': '👥',\r  'Proje': '📋',\r  'Destek': '🎧',\r  'API': '🔌',\r  'Eğitim': '🎓',\r  'Raporlama': '📈',\r  'Entegrasyon': '🔗',\r  'Mobil': '📱',\r  'Email': '✉️',\r  'SLA': '🛡️',\r  'Sunucu': '🖥️'\r};\rexport const PremiumPackageCard: React.FC<PremiumPackageCardProps> = ({\r  package: pkg,\r  isSelected,\r  onSelect,\r  billingPeriod\r}) => {\r  const theme = packageThemes[pkg.name] || 'starter';\r  const calculatePrice = () => {\r    let price = pkg.price;\r    if (billingPeriod === 'Yearly') {\r      price = Math.floor(price * 12 * 0.8 / 12); // 20% yearly discount\r    }\r    return price;\r  };\r  const getFeatureIcon = (feature: string) => {\r    const foundIcon = Object.keys(featureIcons).find(key => \r      feature.toLowerCase().includes(key.toLowerCase())\r    );\r    return foundIcon ? featureIcons[foundIcon] : '✨';\r  };\r  const formatFeature = (feature: string) => {\r    // Parse feature text to extract value and label\r    const match = feature.match(/(\\d+)\\s*(.*)/);\r    if (match) {\r      return {\r        value: match[1],\r        label: match[2]\r      };\r    }\r    return {\r      value: '',\r      label: feature\r    };\r  };\r  return (\r    <div className={`premium-package-card ${isSelected ? 'selected' : ''}`} onClick={() => onSelect(pkg)} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => onSelect(pkg)(e)}>\r      {pkg.isPopular && (\r        <div className=\"package-special-badge\">\r          <div className=\"badge-popular\">En Popüler</div>\r        </div>\r      )}\r      <div className={`package-card-header ${theme}`}>\r        <div className=\"package-icon-container\">\r          <div className=\"package-mega-icon\">\r            {packageIcons[pkg.name] || '📦'}\r          </div>\r        </div>\r        <div className=\"package-title-group\">\r          <h2 className=\"package-main-title\">{pkg.name}</h2>\r          <p className=\"package-subtitle\">{pkg.description}</p>\r        </div>\r        <div className=\"package-price-display\">\r          <div className=\"price-tag\">\r            <span className=\"price-currency\">{pkg.currency}</span>\r            <span className=\"price-value\">{calculatePrice()}</span>\r            <span className=\"price-period\">/ay</span>\r          </div>\r          {billingPeriod === 'Yearly' && (\r            <div className=\"price-discount\">%20 İndirim</div>\r          )}\r        </div>\r      </div>\r      <div className=\"package-card-body\">\r        <ul className=\"premium-features-list\">\r          {pkg.features.map((feature, index) => {\r            const { value, label } = formatFeature(feature);\r            return (\r              <li key={index} className=\"premium-feature-item\">\r                <div className={`feature-icon-wrapper ${theme}`}>\r                  {getFeatureIcon(feature)}\r                </div>\r                <span className=\"feature-text\">\r                  {value && <span className=\"feature-value\">{value} </span>}\r                  {label}\r                </span>\r              </li>\r            );\r          })}\r        </ul>\r        {pkg.modules && pkg.modules.length > 0 && (\r          <div className=\"package-modules\">\r            {pkg.modules.map((module, index) => (\r              <span key={index} className=\"module-pill\">\r                {module}\r              </span>\r            ))}\r          </div>\r        )}\r        <button className={`package-select-button ${theme}`}>\r          {isSelected ? 'Seçildi ✓' : 'Bu Paketi Seç'}\r        </button>\r      </div>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/register/pages/RegisterPage/PremiumPackageCard.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Steps,\r  Form,\r  Input,\r  Select,\r  Button,\r  Card,\r  Row,\r  Col,\r  Typography,\r  Space,\r  Divider,\r  Radio,\r  message,\r  Alert,\r  Tooltip,\r  Progress,\r  Spin,\r  Checkbox\r} from 'antd';\rimport Swal from 'sweetalert2';\rimport withReactContent from 'sweetalert2-react-content';\rimport { showRegistrationSuccess, showApiResponse } from '../../../../shared/utils/sweetAlert';\rimport {\r  UserOutlined,\r  ShopOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  LockOutlined,\r  InfoCircleOutlined,\r  BuildOutlined,\r  TeamOutlined,\r  CheckCircleOutlined,\r  IdcardOutlined,\r  CheckOutlined,\r  CloseOutlined,\r  LoadingOutlined,\r  SafetyOutlined,\r  BankOutlined,\r  GlobalOutlined,\r  SolutionOutlined,\r  ArrowLeftOutlined,\r  ArrowRightOutlined\r} from '@ant-design/icons';\rimport { apiClient } from '@/shared/api/client';\rimport PasswordStrength from '@/shared/components/PasswordStrength';\rimport { useRealTimeValidation } from '../../hooks/useRealTimeValidation';\rimport ReCAPTCHA from 'react-google-recaptcha';\rimport './register-wizard.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Step } = Steps;\rconst MySwal = withReactContent(Swal);\rinterface RegisterWizardProps {\r  onComplete: (data: any) => void;\r  selectedPackage?: any;\r}\rexport const RegisterWizard: React.FC<RegisterWizardProps> = ({ onComplete, selectedPackage }) => {\r  const [form] = Form.useForm();\r  const [currentStep, setCurrentStep] = useState(0);\r  const [loading, setLoading] = useState(false);\r  const [formData, setFormData] = useState<any>({});\r  const [password, setPassword] = useState('');\r  const [captchaToken, setCaptchaToken] = useState<string | null>(null);\r  const recaptchaRef = React.useRef<ReCAPTCHA>(null);\r  // Real-time validation hook\r  const {\r    isConnected,\r    validationResults,\r    loading: validationLoading,\r    validateEmail,\r    checkPasswordStrength,\r    checkDomain,\r    validatePhone,\r    checkCompanyName,\r    validateIdentity,\r    clearValidation\r  } = useRealTimeValidation();\r  const steps = [\r    {\r      title: 'Şirket Bilgileri',\r      icon: <ShopOutlined />,\r      description: 'Şirket detaylarınızı girin'\r    },\r    {\r      title: 'Yetkili Bilgileri',\r      icon: <UserOutlined />,\r      description: 'İletişim bilgilerinizi girin'\r    },\r    {\r      title: 'Hesap Güvenliği',\r      icon: <LockOutlined />,\r      description: 'Giriş bilgilerinizi oluşturun'\r    }\r  ];\r  // Password requirements check\r  const passwordRequirements = [\r    { key: 'length', label: 'En az 8 karakter', test: (pwd: string) => pwd.length >= 8 },\r    { key: 'uppercase', label: 'En az 1 büyük harf', test: (pwd: string) => /[A-Z]/.test(pwd) },\r    { key: 'lowercase', label: 'En az 1 küçük harf', test: (pwd: string) => /[a-z]/.test(pwd) },\r    { key: 'number', label: 'En az 1 rakam', test: (pwd: string) => /\\d/.test(pwd) },\r    { key: 'special', label: 'En az 1 özel karakter', test: (pwd: string) => /[@$!%*?&]/.test(pwd) }\r  ];\r  const next = async () => {\r    try {\r      const values = await form.validateFields();\r      // Check captcha on last step\r      if (currentStep === steps.length - 1 && !captchaToken) {\r        message.error('Lütfen güvenlik doğrulamasını tamamlayın');\r        return;\r      }\r      const newFormData = { ...formData, ...values };\r      setFormData(newFormData);\r      if (currentStep === steps.length - 1) {\r        handleSubmit(newFormData);\r      } else {\r        setCurrentStep(currentStep + 1);\r      }\r    } catch (error) {\r      message.error('Lütfen tüm zorunlu alanları doldurun');\r    }\r  };\r  const prev = () => {\r    setCurrentStep(currentStep - 1);\r  };\r  const handleSubmit = async (allValues: any) => {\r    setLoading(true);\r    try {\r      const [firstName, ...lastNameParts] = allValues.contactName?.split(' ') || ['', ''];\r      const lastName = lastNameParts.join(' ') || firstName;\r      const registrationData = {\r        // Company Information\r        companyName: allValues.companyName,\r        companyCode: allValues.companyCode,\r        taxNumber: allValues.identityType === 'vergi' ? allValues.identityNumber : null,\r        taxOffice: allValues.taxOffice,\r        tradeRegistryNumber: allValues.tradeRegistryNumber || null,\r        mersisNumber: allValues.mersisNumber || null,\r        // Contact Information\r        contactEmail: allValues.email,\r        contactPhone: allValues.phone,\r        contactFax: allValues.fax || null,\r        website: allValues.website || null,\r        // Address\r        addressLine1: allValues.address || null,\r        addressLine2: allValues.addressLine2 || null,\r        city: allValues.city || null,\r        state: allValues.state || null,\r        country: allValues.country || 'Türkiye',\r        postalCode: allValues.postalCode || null,\r        // Business Information\r        industryType: allValues.sector,\r        businessType: allValues.identityType === 'vergi' ? 'Kurumsal' : 'Şahıs',\r        employeeCountRange: allValues.employeeCount,\r        annualRevenue: allValues.annualRevenue || null,\r        currency: 'TRY',\r        // Admin User Information\r        adminEmail: allValues.email,\r        adminUsername: allValues.email?.split('@')[0] || allValues.companyCode,\r        adminFirstName: firstName,\r        adminLastName: lastName,\r        adminPhone: allValues.phone,\r        adminTitle: allValues.title || null,\r        adminPassword: allValues.password,\r        // Package & Subscription\r        packageId: selectedPackage?.id || null,\r        billingCycle: 'Monthly',\r        // Preferences\r        preferredLanguage: 'tr-TR',\r        preferredTimeZone: 'Turkey Standard Time',\r        acceptTerms: true,\r        acceptPrivacyPolicy: true,\r        allowMarketing: allValues.allowMarketing || false,\r        // Captcha\r        captchaToken: captchaToken\r      };\r      const response = await apiClient.post('/api/public/tenant-registration/register', registrationData);\r      if (response.data?.success) {\r        // Başarılı kayıt alert'i - sweetAlert utility'sini kullan\r        await showRegistrationSuccess(allValues.email);\r        onComplete(response.data.data);\r      } else {\r        // Hata alert'i - sweetAlert utility'sini kullan\r        await showApiResponse.error(\r          response.data?.message || 'Kayıt işlemi sırasında bir hata oluştu.',\r          'Kayıt Başarısız'\r        );\r      }\r    } catch (error: any) {\r      // Detaylı hata alert'i - sweetAlert utility'sini kullan\r      await showApiResponse.error(error, 'Kayıt işlemi sırasında bir hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const getProgressPercentage = () => {\r    return ((currentStep + 1) / steps.length) * 100;\r  };\r  const renderStepContent = () => {\r    switch (currentStep) {\r      case 0:\r        return (\r          <div className=\"form-section\">\r            <div className=\"form-section-title\">\r              <ShopOutlined />\r              <h3>Şirket Bilgileri</h3>\r            </div>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"companyName\"\r                  label=\"Şirket Adı\"\r                  className=\"wizard-form-item\"\r                  rules={[{ required: true, message: 'Şirket adı zorunludur' }]}\r                >\r                  <Input \r                    size=\"large\"\r                    prefix={<ShopOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"ABC Teknoloji A.Ş.\" \r                  />\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"companyCode\"\r                  label={\r                    <Space>\r                      Şirket Kodu\r                      <Tooltip title=\"URL'de kullanılacak benzersiz kod\">\r                        <InfoCircleOutlined className=\"wizard-tooltip\" />\r                      </Tooltip>\r                    </Space>\r                  }\r                  className=\"wizard-form-item\"\r                  rules={[\r                    { required: true, message: 'Şirket kodu zorunludur' },\r                    { pattern: /^[a-z0-9-]+$/, message: 'Küçük harf, rakam ve tire kullanın' }\r                  ]}\r                  validateStatus={\r                    validationResults.domain?.isAvailable === false ? 'error' : \r                    validationResults.domain?.isAvailable === true ? 'success' : ''\r                  }\r                  help={\r                    validationLoading.domain ? 'Kontrol ediliyor...' :\r                    validationResults.domain?.message\r                  }\r                  hasFeedback={!!validationResults.domain}\r                >\r                  <Input \r                    size=\"large\"\r                    placeholder=\"abc-teknoloji\" \r                    addonAfter=\".stocker.app\"\r                    onChange={(e) = aria-label=\"input field\"> {\r                      const value = e.target.value.toLowerCase().replace(/[^a-z0-9-]/g, '');\r                      form.setFieldValue('companyCode', value);\r                      if (value.length >= 3) {\r                        checkDomain(value);\r                      }\r                    }}\r                  />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"identityType\"\r                  label=\"Vergi Türü\"\r                  className=\"wizard-form-item\"\r                  rules={[{ required: true, message: 'Vergi türü seçimi zorunludur' }]}\r                  initialValue=\"vergi\"\r                >\r                  <Radio.Group size=\"large\" className=\"identity-type-selector\">\r                    <Radio.Button value=\"tc\">\r                      <Space>\r                        <IdcardOutlined />\r                        Şahıs Şirketi\r                      </Space>\r                    </Radio.Button>\r                    <Radio.Button value=\"vergi\">\r                      <Space>\r                        <BankOutlined />\r                        Kurumsal\r                      </Space>\r                    </Radio.Button>\r                  </Radio.Group>\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"identityNumber\"\r                  label=\"TC Kimlik / Vergi No\"\r                  className=\"wizard-form-item\"\r                  rules={[\r                    { required: true, message: 'Bu alan zorunludur' },\r                    { pattern: /^\\d{10,11}$/, message: '10-11 haneli olmalı' }\r                  ]}\r                  validateStatus={\r                    validationResults.identity?.isValid === false ? 'error' : \r                    validationResults.identity?.isValid === true ? 'success' : ''\r                  }\r                  help={\r                    validationLoading.identity ? 'Doğrulanıyor...' :\r                    validationResults.identity?.message\r                  }\r                  hasFeedback={!!validationResults.identity}\r                >\r                  <Input \r                    size=\"large\"\r                    prefix={<IdcardOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"12345678901\" \r                    maxLength={11}\r                    onChange={(e) => {\r                      const value = e.target.value.replace(/\\D/g, '');\r                      form.setFieldValue('identityNumber', value);\r                      if (value.length === 10 || value.length === 11) {\r                        validateIdentity(value);\r                      }\r                    }}\r                  />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"sector\"\r                  label=\"Sektör\"\r                  className=\"wizard-form-item\"\r                  rules={[{ required: true, message: 'Sektör seçimi zorunludur' }]}\r                >\r                  <Select size=\"large\" placeholder=\"Sektörünüzü seçin\" className=\"sector-select\" aria-label=\"select field\">\r                    <Select.Option value=\"Teknoloji\" aria-label=\"select field\">\r                      <Space>\r                        <span>💻</span>\r                        <span>Teknoloji</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Perakende\" aria-label=\"select field\">\r                      <Space>\r                        <span>🛍️</span>\r                        <span>Perakende</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Üretim\" aria-label=\"select field\">\r                      <Space>\r                        <span>🏭</span>\r                        <span>Üretim</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Hizmet\" aria-label=\"select field\">\r                      <Space>\r                        <span>🤝</span>\r                        <span>Hizmet</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"İnşaat\" aria-label=\"select field\">\r                      <Space>\r                        <span>🏗️</span>\r                        <span>İnşaat</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Sağlık\" aria-label=\"select field\">\r                      <Space>\r                        <span>🏥</span>\r                        <span>Sağlık</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Eğitim\" aria-label=\"select field\">\r                      <Space>\r                        <span>🎓</span>\r                        <span>Eğitim</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Lojistik\" aria-label=\"select field\">\r                      <Space>\r                        <span>🚚</span>\r                        <span>Lojistik</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Gıda\" aria-label=\"select field\">\r                      <Space>\r                        <span>🍽️</span>\r                        <span>Gıda</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Diğer\" aria-label=\"select field\">\r                      <Space>\r                        <span>📋</span>\r                        <span>Diğer</span>\r                      </Space>\r                    </Select.Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"employeeCount\"\r                  label=\"Çalışan Sayısı\"\r                  className=\"wizard-form-item\"\r                  rules={[{ required: true, message: 'Çalışan sayısı zorunludur' }]}\r                >\r                  <Select size=\"large\" placeholder=\"Çalışan sayınızı seçin\" aria-label=\"select field\">\r                    <Select.Option value=\"1-10\" aria-label=\"select field\">\r                      <Space>\r                        <TeamOutlined />\r                        <span>1-10 Kişi</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"11-50\" aria-label=\"select field\">\r                      <Space>\r                        <TeamOutlined />\r                        <span>11-50 Kişi</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"51-100\" aria-label=\"select field\">\r                      <Space>\r                        <TeamOutlined />\r                        <span>51-100 Kişi</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"101-500\" aria-label=\"select field\">\r                      <Space>\r                        <TeamOutlined />\r                        <span>101-500 Kişi</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"500+\" aria-label=\"select field\">\r                      <Space>\r                        <TeamOutlined />\r                        <span>500+ Kişi</span>\r                      </Space>\r                    </Select.Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"taxOffice\"\r                  label=\"Vergi Dairesi\"\r                  className=\"wizard-form-item\"\r                >\r                  <Input \r                    size=\"large\"\r                    prefix={<BankOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"Merkez Vergi Dairesi\" \r                  />\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"tradeRegistryNumber\"\r                  label=\"Ticaret Sicil No\"\r                  className=\"wizard-form-item\"\r                >\r                  <Input \r                    size=\"large\"\r                    placeholder=\"123456\" \r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"mersisNumber\"\r                  label=\"MERSİS No\"\r                  className=\"wizard-form-item\"\r                >\r                  <Input \r                    size=\"large\"\r                    placeholder=\"0123456789012345\" \r                    maxLength={16}\r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"annualRevenue\"\r                  label=\"Yıllık Ciro (Opsiyonel)\"\r                  className=\"wizard-form-item\"\r                >\r                  <Select size=\"large\" placeholder=\"Yıllık ciro aralığı\" aria-label=\"select field\">\r                    <Select.Option value=\"0-1M\" aria-label=\"select field\">0 - 1 Milyon TL</Select.Option>\r                    <Select.Option value=\"1M-5M\" aria-label=\"select field\">1 - 5 Milyon TL</Select.Option>\r                    <Select.Option value=\"5M-10M\" aria-label=\"select field\">5 - 10 Milyon TL</Select.Option>\r                    <Select.Option value=\"10M-50M\" aria-label=\"select field\">10 - 50 Milyon TL</Select.Option>\r                    <Select.Option value=\"50M+\" aria-label=\"select field\">50+ Milyon TL</Select.Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider orientation=\"left\">Adres Bilgileri</Divider>\r            <Row gutter={[24, 0]}>\r              <Col xs={24}>\r                <Form.Item\r                  name=\"address\"\r                  label=\"Adres\"\r                  className=\"wizard-form-item\"\r                >\r                  <Input.TextArea \r                    size=\"large\"\r                    rows={2}\r                    placeholder=\"Cadde, sokak, bina no\" \r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={8}>\r                <Form.Item\r                  name=\"city\"\r                  label=\"İl\"\r                  className=\"wizard-form-item\"\r                >\r                  <Select \r                    size=\"large\" \r                    showSearch\r                    placeholder=\"İl seçin\"\r                   aria-label=\"select field\">\r                    <Select.Option value=\"İstanbul\" aria-label=\"select field\">İstanbul</Select.Option>\r                    <Select.Option value=\"Ankara\" aria-label=\"select field\">Ankara</Select.Option>\r                    <Select.Option value=\"İzmir\" aria-label=\"select field\">İzmir</Select.Option>\r                    <Select.Option value=\"Bursa\" aria-label=\"select field\">Bursa</Select.Option>\r                    <Select.Option value=\"Antalya\" aria-label=\"select field\">Antalya</Select.Option>\r                    <Select.Option value=\"Adana\" aria-label=\"select field\">Adana</Select.Option>\r                    <Select.Option value=\"Kocaeli\" aria-label=\"select field\">Kocaeli</Select.Option>\r                    <Select.Option value=\"Konya\" aria-label=\"select field\">Konya</Select.Option>\r                    <Select.Option value=\"Gaziantep\" aria-label=\"select field\">Gaziantep</Select.Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={8}>\r                <Form.Item\r                  name=\"state\"\r                  label=\"İlçe\"\r                  className=\"wizard-form-item\"\r                >\r                  <Input \r                    size=\"large\"\r                    placeholder=\"İlçe adı\" \r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={8}>\r                <Form.Item\r                  name=\"postalCode\"\r                  label=\"Posta Kodu\"\r                  className=\"wizard-form-item\"\r                >\r                  <Input \r                    size=\"large\"\r                    placeholder=\"34100\" \r                    maxLength={5}\r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r          </div>\r        );\r      case 1:\r        return (\r          <div className=\"form-section\">\r            <div className=\"form-section-title\">\r              <UserOutlined />\r              <h3>Yetkili Bilgileri</h3>\r            </div>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"contactName\"\r                  label=\"Ad Soyad\"\r                  className=\"wizard-form-item\"\r                  rules={[{ required: true, message: 'Ad soyad zorunludur' }]}\r                >\r                  <Input \r                    size=\"large\"\r                    prefix={<UserOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"Ahmet Yılmaz\" \r                  />\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"title\"\r                  label=\"Unvan\"\r                  className=\"wizard-form-item\"\r                  rules={[{ required: true, message: 'Unvan zorunludur' }]}\r                >\r                  <Select size=\"large\" placeholder=\"Unvanınızı seçin\" aria-label=\"select field\">\r                    <Select.Option value=\"Genel Müdür\" aria-label=\"select field\">\r                      <Space>\r                        <SolutionOutlined />\r                        <span>Genel Müdür</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"İşletme Sahibi\" aria-label=\"select field\">\r                      <Space>\r                        <SolutionOutlined />\r                        <span>İşletme Sahibi</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Müdür\" aria-label=\"select field\">\r                      <Space>\r                        <SolutionOutlined />\r                        <span>Müdür</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Yönetici\" aria-label=\"select field\">\r                      <Space>\r                        <SolutionOutlined />\r                        <span>Yönetici</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Muhasebe Müdürü\" aria-label=\"select field\">\r                      <Space>\r                        <SolutionOutlined />\r                        <span>Muhasebe Müdürü</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"IT Müdürü\" aria-label=\"select field\">\r                      <Space>\r                        <SolutionOutlined />\r                        <span>IT Müdürü</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Satın Alma Müdürü\" aria-label=\"select field\">\r                      <Space>\r                        <SolutionOutlined />\r                        <span>Satın Alma Müdürü</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"İnsan Kaynakları\" aria-label=\"select field\">\r                      <Space>\r                        <SolutionOutlined />\r                        <span>İnsan Kaynakları</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Diğer\" aria-label=\"select field\">\r                      <Space>\r                        <SolutionOutlined />\r                        <span>Diğer</span>\r                      </Space>\r                    </Select.Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"email\"\r                  label=\"E-posta\"\r                  className=\"wizard-form-item\"\r                  rules={[\r                    { required: true, message: 'E-posta zorunludur' },\r                    { type: 'email', message: 'Geçerli bir e-posta girin' }\r                  ]}\r                  validateStatus={\r                    validationResults.email?.isValid === false ? 'error' : \r                    validationResults.email?.isValid === true ? 'success' : ''\r                  }\r                  help={\r                    validationLoading.email ? 'Kontrol ediliyor...' :\r                    validationResults.email?.message\r                  }\r                  hasFeedback={!!validationResults.email}\r                >\r                  <Input \r                    size=\"large\"\r                    prefix={<MailOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"ahmet@sirket.com\" \r                    onChange={(e) => {\r                      const value = e.target.value;\r                      if (value.includes('@') && value.includes('.')) {\r                        validateEmail(value);\r                      }\r                    }}\r                  />\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"phone\"\r                  label=\"Telefon\"\r                  className=\"wizard-form-item\"\r                  rules={[\r                    { required: true, message: 'Telefon zorunludur' },\r                    { pattern: /^[0-9]{10,11}$/, message: 'Geçerli telefon girin' }\r                  ]}\r                  validateStatus={\r                    validationResults.phone?.isValid === false ? 'error' : \r                    validationResults.phone?.isValid === true ? 'success' : ''\r                  }\r                  help={\r                    validationLoading.phone ? 'Doğrulanıyor...' :\r                    validationResults.phone?.details?.formattedNumber || validationResults.phone?.message\r                  }\r                  hasFeedback={!!validationResults.phone}\r                >\r                  <Input \r                    size=\"large\"\r                    prefix={<PhoneOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"5551234567\" \r                    maxLength={11}\r                    onChange={(e) => {\r                      const value = e.target.value.replace(/\\D/g, '');\r                      form.setFieldValue('phone', value);\r                      if (value.length >= 10) {\r                        validatePhone(value);\r                      }\r                    }}\r                  />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"fax\"\r                  label=\"Faks (Opsiyonel)\"\r                  className=\"wizard-form-item\"\r                >\r                  <Input \r                    size=\"large\"\r                    prefix={<PhoneOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"2121234567\" \r                    maxLength={11}\r                  />\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"website\"\r                  label=\"Web Sitesi (Opsiyonel)\"\r                  className=\"wizard-form-item\"\r                  rules={[\r                    { type: 'url', message: 'Geçerli bir URL girin' }\r                  ]}\r                >\r                  <Input \r                    size=\"large\"\r                    prefix={<GlobalOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"https://www.sirket.com\" \r                  />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Alert\r              message=\"Önemli Bilgilendirme\"\r              description=\"Bu e-posta adresiniz hem iletişim hem de sisteme giriş için kullanılacaktır. Lütfen aktif olarak kullandığınız bir e-posta adresi girin.\"\r              type=\"info\"\r              showIcon\r              className=\"wizard-info-alert\"\r              icon={<InfoCircleOutlined />}\r            />\r          </div>\r        );\r      case 2:\r        return (\r          <div className=\"form-section\">\r            <div className=\"form-section-title\">\r              <LockOutlined />\r              <h3>Hesap Güvenliği</h3>\r            </div>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"password\"\r                  label=\"Şifre\"\r                  className=\"wizard-form-item\"\r                  rules={[\r                    { required: true, message: 'Şifre zorunludur' },\r                    { min: 8, message: 'En az 8 karakter olmalı' },\r                    { \r                      pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/,\r                      message: 'Şifre gereksinimleri karşılanmıyor'\r                    }\r                  ]}\r                >\r                  <Input.Password \r                    size=\"large\"\r                    prefix={<LockOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"Güvenli şifreniz\"\r                    onChange={(e) => {\r                      const value = e.target.value;\r                      setPassword(value);\r                      if (value.length > 0) {\r                        checkPasswordStrength(value);\r                      }\r                    }}\r                  />\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"confirmPassword\"\r                  label=\"Şifre Tekrar\"\r                  className=\"wizard-form-item\"\r                  dependencies={['password']}\r                  rules={[\r                    { required: true, message: 'Şifre tekrarı zorunludur' },\r                    ({ getFieldValue }) => ({\r                      validator(_, value) {\r                        if (!value || getFieldValue('password') === value) {\r                          return Promise.resolve();\r                        }\r                        return Promise.reject(new Error('Şifreler eşleşmiyor'));\r                      },\r                    }),\r                  ]}\r                >\r                  <Input.Password \r                    size=\"large\"\r                    prefix={<LockOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"Şifrenizi tekrar girin\" \r                  />\r                </Form.Item>\r              </Col>\r            </Row>\r            {password && (\r              <div className=\"password-requirements\">\r                <div className=\"password-requirements-title\">\r                  <SafetyOutlined /> Şifre Gereksinimleri\r                </div>\r                {/* Real-time password strength */}\r                {validationResults.password && (\r                  <div className=\"password-strength-meter\">\r                    <Progress \r                      percent={validationResults.password.score * 20} \r                      strokeColor={validationResults.password.color}\r                      showInfo={false}\r                    />\r                    <span style={{ color: validationResults.password.color }}>\r                      Güç: {validationResults.password.level}\r                    </span>\r                  </div>\r                )}\r                {passwordRequirements.map(req => (\r                  <div \r                    key={req.key} \r                    className={`password-requirement-item ${req.test(password) ? 'fulfilled' : ''}`}\r                  >\r                    {req.test(password) ? (\r                      <CheckCircleOutlined style={{ color: '#52c41a' }} />\r                    ) : (\r                      <CloseOutlined style={{ color: '#ff4d4f' }} />\r                    )}\r                    <span>{req.label}</span>\r                  </div>\r                ))}\r                {/* Password suggestions */}\r                {validationResults.password?.suggestions?.length > 0 && (\r                  <Alert\r                    message=\"Öneriler\"\r                    description={\r                      <ul style={{ margin: 0, paddingLeft: 20 }}>\r                        {validationResults.password.suggestions.map((suggestion: string, index: number) => (\r                          <li key={index}>{suggestion}</li>\r                        ))}\r                      </ul>\r                    }\r                    type=\"info\"\r                    showIcon\r                    style={{ marginTop: 10 }}\r                  />\r                )}\r              </div>\r            )}\r            <Divider orientation=\"left\">Sözleşmeler ve İzinler</Divider>\r            <Row gutter={[24, 0]}>\r              <Col xs={24}>\r                <Form.Item\r                  name=\"acceptTerms\"\r                  valuePropName=\"checked\"\r                  className=\"wizard-form-item\"\r                  rules={[\r                    {\r                      validator: (_, value) =>\r                        value ? Promise.resolve() : Promise.reject(new Error('Kullanım koşullarını kabul etmelisiniz')),\r                    },\r                  ]}\r                >\r                  <Checkbox>\r                    <span>\r                      <a href=\"/terms\" target=\"_blank\" rel=\"noopener noreferrer\">Kullanım Koşulları</a>'nı okudum ve kabul ediyorum\r                    </span>\r                  </Checkbox>\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={[24, 0]}>\r              <Col xs={24}>\r                <Form.Item\r                  name=\"acceptPrivacy\"\r                  valuePropName=\"checked\"\r                  className=\"wizard-form-item\"\r                  rules={[\r                    {\r                      validator: (_, value) =>\r                        value ? Promise.resolve() : Promise.reject(new Error('Gizlilik politikasını kabul etmelisiniz')),\r                    },\r                  ]}\r                >\r                  <Checkbox>\r                    <span>\r                      <a href=\"/privacy\" target=\"_blank\" rel=\"noopener noreferrer\">Gizlilik Politikası</a>'nı okudum ve kabul ediyorum\r                    </span>\r                  </Checkbox>\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={[24, 0]}>\r              <Col xs={24}>\r                <Form.Item\r                  name=\"allowMarketing\"\r                  valuePropName=\"checked\"\r                  className=\"wizard-form-item\"\r                  initialValue={false}\r                >\r                  <Checkbox>\r                    <span>Stocker'dan pazarlama e-postaları almak istiyorum (Opsiyonel)</span>\r                  </Checkbox>\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider orientation=\"left\">Güvenlik Doğrulaması</Divider>\r            <Row gutter={[24, 0]}>\r              <Col xs={24}>\r                <div style={{ display: 'flex', justifyContent: 'center', marginBottom: 16 }}>\r                  <ReCAPTCHA\r                    ref={recaptchaRef}\r                    sitekey={import.meta.env.VITE_RECAPTCHA_SITE_KEY || \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\"} // Test key\r                    onChange={(token) => {\r                      setCaptchaToken(token);\r                      if (token) {\r                        message.success('Güvenlik doğrulaması başarılı');\r                      }\r                    }}\r                    onExpired={() => {\r                      setCaptchaToken(null);\r                      message.warning('Güvenlik doğrulaması süresi doldu, lütfen tekrar deneyin');\r                    }}\r                    onErrored={() => {\r                      setCaptchaToken(null);\r                      message.error('Güvenlik doğrulaması başarısız');\r                    }}\r                    theme=\"light\"\r                    size=\"normal\"\r                  />\r                </div>\r                {!captchaToken && (\r                  <Alert\r                    message=\"Robot olmadığınızı doğrulayın\"\r                    description=\"Kayıt işlemini tamamlamak için yukarıdaki güvenlik doğrulamasını tamamlamanız gerekmektedir.\"\r                    type=\"warning\"\r                    showIcon\r                  />\r                )}\r              </Col>\r            </Row>\r            {selectedPackage && (\r              <div className=\"wizard-summary\">\r                <div className=\"wizard-summary-item\">\r                  <span className=\"wizard-summary-label\">Seçili Paket:</span>\r                  <span className=\"wizard-summary-value\">{selectedPackage.name}</span>\r                </div>\r                <div className=\"wizard-summary-item\">\r                  <span className=\"wizard-summary-label\">Aylık Ücret:</span>\r                  <span className=\"wizard-summary-value\">{selectedPackage.price}₺</span>\r                </div>\r                <div className=\"wizard-summary-item\">\r                  <span className=\"wizard-summary-label\">Deneme Süresi:</span>\r                  <span className=\"wizard-summary-value\">14 Gün Ücretsiz</span>\r                </div>\r              </div>\r            )}\r          </div>\r        );\r      default:\r        return null;\r    }\r  };\r  return (\r    <div className=\"register-wizard-container\">\r      <Card className=\"wizard-card\">\r        <div className=\"wizard-header\">\r          <h2>Stocker'a Hoş Geldiniz</h2>\r          <p>İşletmenizi dijitalleştirmek için doğru yerdesiniz</p>\r        </div>\r        <div className=\"step-progress-bar\">\r          <div \r            className=\"step-progress-fill\" \r            style={{ width: `${getProgressPercentage()}%` }}\r          />\r        </div>\r        <div className=\"wizard-steps\">\r          <Steps current={currentStep}>\r            {steps.map((step, index) => (\r              <Step\r                key={index}\r                title={step.title}\r                description={step.description}\r                icon={step.icon}\r              />\r            ))}\r          </Steps>\r        </div>\r        <Form\r          form={form}\r          layout=\"vertical\"\r          autoComplete=\"off\"\r          className=\"wizard-form\"\r        >\r          <div className=\"wizard-form-content\">\r            {loading ? (\r              <div className=\"wizard-loading\">\r                <Spin \r                  size=\"large\" \r                  indicator={<LoadingOutlined style={{ fontSize: 48 }} spin />}\r                />\r              </div>\r            ) : (\r              renderStepContent()\r            )}\r          </div>\r        </Form>\r        <div className=\"wizard-footer\">\r          <div className=\"wizard-footer-content\">\r            <Button\r              size=\"large\"\r              onClick={prev}\r              disabled={currentStep === 0}\r              className=\"wizard-btn wizard-btn-secondary\"\r              icon={<ArrowLeftOutlined />}\r             aria-label=\"arrow left outlined\">\r              Geri\r            </Button>\r            <Space size={8}>\r              {[...Array(steps.length)].map((_, index) => (\r                <div\r                  key={index}\r                  style={{\r                    width: 8,\r                    height: 8,\r                    borderRadius: '50%',\r                    background: index === currentStep ? '#667eea' : '#e8e8e8',\r                    transition: 'all 0.3s ease'\r                  }}\r                />\r              ))}\r            </Space>\r            <Button \r              type=\"primary\"\r              size=\"large\"\r              loading={loading}\r              onClick={next}\r              className=\"wizard-btn wizard-btn-primary\"\r              icon={currentStep === steps.length - 1 ? <CheckOutlined /> : <ArrowRightOutlined />}\r             aria-label=\"button\">\r              {currentStep === steps.length - 1 ? 'Kaydı Tamamla' : 'İleri'}\r            </Button>\r          </div>\r        </div>\r      </Card>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/register/pages/RegisterPage/RegisterWizard.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { useNavigate } from 'react-router-dom';\rimport {\r  Card,\r  Steps,\r  Button,\r  Form,\r  Input,\r  Typography,\r  Space,\r  Row,\r  Col,\r  Progress,\r  message,\r  Radio,\r  Tooltip,\r  Tag,\r  Alert,\r  Checkbox,\r  Spin,\r  AutoComplete\r} from 'antd';\rimport {\r  UserOutlined,\r  LockOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  RocketOutlined,\r  CheckCircleOutlined,\r  ArrowRightOutlined,\r  ArrowLeftOutlined,\r  TeamOutlined,\r  BankOutlined,\r  InfoCircleOutlined,\r  LoadingOutlined,\r  IdcardOutlined,\r  BankFilled as BuildingOutlined,\r  ClockCircleOutlined,\r  ShopOutlined,\r  CheckOutlined,\r  HomeOutlined,\r  CloseOutlined\r} from '@ant-design/icons';\rimport { useSignalRValidation } from '@/shared/hooks/useSignalR';\rimport { apiClient } from '@/shared/api/client';\rimport PasswordStrength from '@/shared/components/PasswordStrength';\rimport { useAuthStore } from '@/app/store/auth.store';\rimport { showApiResponse, showRegistrationSuccess } from '@/shared/utils/sweetAlert';\rimport Swal from 'sweetalert2';\rimport { navigateToSubdomain } from '@/shared/utils/subdomain';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rinterface RegisterData {\r  // Step 1: Account Type\r  accountType: 'company' | 'individual';\r  // Step 2: Basic Info\r  companyName?: string;\r  fullName?: string;\r  subdomain?: string;\r  identityType: 'tc' | 'vergi';\r  identityNumber: string;\r  // Step 3: Business Details\r  sector: string;\r  employeeCount: string;\r  // Step 4: Contact Info\r  email: string;\r  phone: string;\r  // Step 5: Security\r  password: string;\r  confirmPassword: string;\r  // Step 6: Agreement\r  termsAccepted: boolean;\r  marketingAccepted: boolean;\r}\rconst RegisterWizard: React.FC = () => {\r  const navigate = useNavigate();\r  const [form] = Form.useForm();\r  const [currentStep, setCurrentStep] = useState(0);\r  const [registerData, setRegisterData] = useState<Partial<RegisterData>>({ \r    accountType: 'company', // Default to company\r    identityType: 'vergi' \r  });\r  const [loading, setLoading] = useState(false);\r  const [identityType, setIdentityType] = useState<'tc' | 'vergi'>('vergi');\r  const [isValidating, setIsValidating] = useState(false);\r  const [subdomain, setSubdomain] = useState('');\r  const [subdomainAvailable, setSubdomainAvailable] = useState<boolean | null>(null);\r  const [checkingSubdomain, setCheckingSubdomain] = useState(false);\r  // const [completionTime, setCompletionTime] = useState(3); // minutes - Removed\r  const [progressPercent, setProgressPercent] = useState(0);\r  const {\r    emailValidation,\r    identityValidation,\r    domainCheck,\r    validateEmail,\r    validateIdentity,\r    checkDomain,\r    isConnected\r  } = useSignalRValidation();\r  // Calculate progress\r  useEffect(() => {\r    const totalSteps = 6;\r    const percent = Math.round(((currentStep + 1) / totalSteps) * 100);\r    setProgressPercent(percent);\r  }, [currentStep]);\r  useEffect(() => {\r    if (identityValidation) {\r      setIsValidating(false);\r    }\r  }, [identityValidation]);\r  // Company name suggestions\r  const [companySuggestions, setCompanySuggestions] = useState<string[]>([]);\r  const handleCompanySearch = (value: string) => {\r    // Simulate company suggestions\r    if (value) {\r      setCompanySuggestions([\r        `${value} Teknoloji A.Ş.`,\r        `${value} Bilişim Ltd. Şti.`,\r        `${value} Yazılım ve Danışmanlık`,\r        `${value} İnovasyon Merkezi`\r      ]);\r      // Auto-generate subdomain suggestion\r      const suggestedSubdomain = value\r        .toLowerCase()\r        .replace(/[^a-z0-9]/g, '')\r        .substring(0, 30);\r      if (suggestedSubdomain && suggestedSubdomain !== subdomain) {\r        setSubdomain(suggestedSubdomain);\r        checkSubdomainAvailability(suggestedSubdomain);\r      }\r    }\r  };\r  // Check subdomain availability via SignalR\r  const checkSubdomainAvailability = async (domain: string) => {\r    if (!domain || domain.length < 3) {\r      setSubdomainAvailable(null);\r      return;\r    }\r    // Use SignalR if connected, otherwise fallback to API\r    if (isConnected) {\r      setCheckingSubdomain(true);\r      // SignalR will handle the response via the hook\r      // The response will come through the validation hub\r    } else {\r      // Fallback to direct API call\r      setCheckingSubdomain(true);\r      try {\r        const response = await apiClient.get(`/api/tenants/check-subdomain/${domain}`);\r        setSubdomainAvailable(response.data.available);\r      } catch (error) {\r        // If error, assume it's available (API might not be implemented yet)\r        setSubdomainAvailable(true);\r      } finally {\r        setCheckingSubdomain(false);\r      }\r    }\r  };\r  // Debounced subdomain check\r  useEffect(() => {\r    const timer = setTimeout(() => {\r      if (subdomain && subdomain.length >= 3) {\r        if (isConnected) {\r          // Use SignalR for real-time validation\r          checkDomain(subdomain);\r          setCheckingSubdomain(true);\r        } else {\r          // Fallback to API\r          checkSubdomainAvailability(subdomain);\r        }\r      }\r    }, 500);\r    return () => clearTimeout(timer);\r  }, [subdomain, isConnected, checkDomain]);\r  // Listen to SignalR domain check results\r  useEffect(() => {\r    if (domainCheck) {\r      setSubdomainAvailable(domainCheck.isAvailable);\r      setCheckingSubdomain(false);\r    }\r  }, [domainCheck]);\r  const handleNext = async () => {\r    try {\r      const values = await form.validateFields();\r      setRegisterData({ ...registerData, ...values });\r      if (currentStep < 5) {\r        setCurrentStep(currentStep + 1);\r        window.scrollTo({ top: 0, behavior: 'smooth' });\r      } else {\r        handleSubmit();\r      }\r    } catch (error) {\r      showApiResponse.toast.error('Lütfen gerekli alanları doldurun');\r    }\r  };\r  const handlePrev = () => {\r    setCurrentStep(currentStep - 1);\r    window.scrollTo({ top: 0, behavior: 'smooth' });\r  };\r  const handleSubmit = async () => {\r    setLoading(true);\r    try {\r      const values = await form.validateFields();\r      const allData = { ...registerData, ...values };\r      // Show loading alert\r      showApiResponse.loading('Hesabınız oluşturuluyor...');\r      // Prepare registration data for API\r      const registrationData = {\r        // User info\r        email: allData.email,\r        password: allData.password,\r        firstName: allData.fullName?.split(' ')[0] || allData.contactName?.split(' ')[0] || '',\r        lastName: allData.fullName?.split(' ').slice(1).join(' ') || allData.contactName?.split(' ').slice(1).join(' ') || '',\r        username: allData.email.split('@')[0],\r        // Company info\r        companyName: allData.companyName || allData.fullName,\r        companyCode: allData.subdomain || allData.companyName?.toLowerCase().replace(/[^a-z0-9]/g, '') || 'company',\r        domain: allData.subdomain || allData.companyName?.toLowerCase().replace(/[^a-z0-9]/g, '') || 'company',\r        // Identity info\r        identityType: allData.identityType,\r        identityNumber: allData.identityNumber,\r        // Business details\r        sector: allData.sector,\r        employeeCount: allData.employeeCount,\r        // Contact info\r        contactName: allData.fullName || allData.contactName || `${allData.firstName} ${allData.lastName}`,\r        phoneNumber: allData.phone,\r        title: allData.accountType === 'company' ? 'Yönetici' : 'Kullanıcı'\r      };\r      // Call actual API\r      const response = await apiClient.post('/api/auth/register', registrationData);\r      // Close loading alert\r      Swal.close();\r      // Check if registration was successful\r      // API might return data directly or wrapped in response.data\r      const responseData = response.data;\r      if (response.status === 200 || response.status === 201) {\r        // Show success message with email verification info\r        await showRegistrationSuccess(allData.email);\r        // Auto login after registration\r        try {\r          // Small delay before login attempt\r          await new Promise(resolve => setTimeout(resolve, 1000));\r          const loginResponse = await apiClient.post('/api/auth/login', {\r            email: allData.email,\r            password: allData.password\r          });\r          if (loginResponse.data.accessToken || loginResponse.data.token) {\r            const token = loginResponse.data.accessToken || loginResponse.data.token;\r            localStorage.setItem('token', token);\r            localStorage.setItem('user', JSON.stringify(loginResponse.data.user || loginResponse.data));\r            // Show final success and redirect\r            await showApiResponse.success(\r              'Hesabınız başarıyla oluşturuldu ve giriş yapıldı. Yönlendiriliyorsunuz...',\r              'Hoş Geldiniz!'\r            );\r            // Redirect to subdomain if available\r            setTimeout(() => {\r              if (response.data.subdomain) {\r                // Navigate to the tenant's subdomain\r                navigateToSubdomain(response.data.subdomain, '/dashboard');\r              } else {\r                navigate('/dashboard');\r              }\r            }, 1000);\r          } else {\r            throw new Error('No token received');\r          }\r        } catch (loginError: any) {\r          // If auto-login fails, still show success but redirect to login\r          await showApiResponse.info(\r            'Hesabınız oluşturuldu. E-posta doğrulaması sonrası giriş yapabilirsiniz.',\r            'Kayıt Başarılı'\r          );\r          setTimeout(() => {\r            navigate('/login');\r          }, 2000);\r        }\r      } else {\r        // Show error with API message\r        showApiResponse.error(\r          { response: { data: responseData } },\r          'Kayıt işlemi başarısız oldu'\r        );\r      }\r    } catch (error: any) {\r      // Close loading alert if open\r      Swal.close();\r      // Parse error details\r      let errorMessage = 'Kayıt sırasında bir hata oluştu';\r      let errorDetails = null;\r      if (error.response?.data) {\r        const data = error.response.data;\r        // Check for validation errors\r        if (data.errors) {\r          // If errors is an object with field-specific errors\r          if (typeof data.errors === 'object' && !Array.isArray(data.errors)) {\r            const fieldErrors: string[] = [];\r            Object.entries(data.errors).forEach(([field, errors]: [string, any]) => {\r              if (Array.isArray(errors)) {\r                errors.forEach(err => {\r                  fieldErrors.push(`${field}: ${err}`);\r                });\r              } else {\r                fieldErrors.push(`${field}: ${errors}`);\r              }\r            });\r            if (fieldErrors.length > 0) {\r              errorMessage = 'Lütfen formdaki hataları düzeltin';\r              errorDetails = fieldErrors;\r            }\r          }\r          // If errors is a simple array\r          else if (Array.isArray(data.errors)) {\r            errorMessage = 'Kayıt işlemi başarısız';\r            errorDetails = data.errors;\r          }\r        }\r        // Check for general message\r        else if (data.message) {\r          errorMessage = data.message;\r        }\r        // Check for title and detail (API problem response)\r        else if (data.title) {\r          errorMessage = data.title;\r          if (data.detail) {\r            errorDetails = [data.detail];\r          }\r        }\r      }\r      // Show error with parsed details\r      if (errorDetails && Array.isArray(errorDetails) && errorDetails.length > 0) {\r        // Show validation errors in a formatted way\r        Swal.fire({\r          icon: 'error',\r          title: 'Kayıt Hatası',\r          html: `\r            <div style=\"text-align: left;\">\r              <p>${errorMessage}</p>\r              <ul style=\"margin-top: 10px; padding-left: 20px;\">\r                ${errorDetails.map(err => `<li style=\"margin: 5px 0;\">${err}</li>`).join('')}\r              </ul>\r            </div>\r          `,\r          confirmButtonText: 'Tamam',\r          confirmButtonColor: '#667eea',\r          width: '500px'\r        });\r      } else {\r        // Show general error\r        showApiResponse.error(error, errorMessage);\r      }\r    } finally {\r      setLoading(false);\r    }\r  };\r  const renderStepContent = () => {\r    switch (currentStep) {\r      case 0: // Account Type Selection\r        return (\r          <div className=\"step-account-type\">\r            <div className=\"step-header\">\r              <Title level={2}>Hesap Türünüzü Seçin</Title>\r              <Paragraph type=\"secondary\">\r                İşletmeniz için kurumsal hesap mı, yoksa kişisel kullanım için bireysel hesap mı açmak istiyorsunuz?\r              </Paragraph>\r            </div>\r            <Form.Item name=\"accountType\" rules={[{ required: true, message: 'Hesap türü seçimi zorunludur' }]}>\r              <Radio.Group \r                size=\"large\" \r                className=\"account-type-cards\"\r              >\r                <Space direction=\"vertical\" size={16} style={{ width: '100%' }}>\r                  <Radio.Button value=\"company\" className=\"account-type-card selected-default\">\r                    <div className=\"card-content\">\r                      <div className=\"selection-indicator\">\r                        <CheckOutlined />\r                      </div>\r                      <ShopOutlined className=\"card-icon company-icon\" />\r                      <div className=\"card-text\">\r                        <Title level={4}>Kurumsal Hesap</Title>\r                        <Text type=\"secondary\">Şirketler ve işletmeler için profesyonel çözüm</Text>\r                      </div>\r                      <div className=\"card-benefits\">\r                        <ul className=\"benefit-list\">\r                          <li>Sınırsız kullanıcı ekleme</li>\r                          <li>E-Fatura ve E-Arşiv entegrasyonu</li>\r                          <li>Gelişmiş raporlama ve analiz</li>\r                          <li>Özel destek ve eğitim</li>\r                        </ul>\r                      </div>\r                      <Tag color=\"green\" className=\"recommended-tag\">\r                        <CheckCircleOutlined /> Önerilen\r                      </Tag>\r                    </div>\r                  </Radio.Button>\r                  <Radio.Button value=\"individual\" className=\"account-type-card\">\r                    <div className=\"card-content\">\r                      <div className=\"selection-indicator\">\r                        <CheckOutlined />\r                      </div>\r                      <UserOutlined className=\"card-icon individual-icon\" />\r                      <div className=\"card-text\">\r                        <Title level={4}>Bireysel Hesap</Title>\r                        <Text type=\"secondary\">Freelancer ve bireysel kullanıcılar için ideal</Text>\r                      </div>\r                      <div className=\"card-benefits\">\r                        <ul className=\"benefit-list\">\r                          <li>Tek kullanıcı hesabı</li>\r                          <li>Temel stok takibi</li>\r                          <li>Basit raporlama</li>\r                          <li>E-posta desteği</li>\r                        </ul>\r                      </div>\r                    </div>\r                  </Radio.Button>\r                </Space>\r              </Radio.Group>\r            </Form.Item>\r            <Alert\r              message=\"Bilgi\"\r              description=\"Hesap türünüzü daha sonra yükseltebilir veya değiştirebilirsiniz.\"\r              type=\"info\"\r              showIcon\r              style={{ marginTop: 24 }}\r            />\r          </div>\r        );\r      case 1: // Basic Information\r        return (\r          <div className=\"step-basic-info\">\r            <div className=\"step-header\">\r              <Title level={2}>Temel Bilgiler</Title>\r              <Paragraph type=\"secondary\">\r                {registerData.accountType === 'company' ? 'Şirket' : 'Kişisel'} bilgilerinizi girin\r              </Paragraph>\r            </div>\r            <Space direction=\"vertical\" size={24} style={{ width: '100%' }}>\r              {registerData.accountType === 'company' ? (\r                <Form.Item \r                  name=\"companyName\" \r                  label={\r                    <span>\r                      <ShopOutlined style={{ marginRight: 8, color: '#667eea' }} />\r                      Şirket Adı <Text type=\"danger\">*</Text>\r                    </span>\r                  }\r                  rules={[{ required: true, message: 'Şirket adı zorunludur' }]}\r                  extra=\"Resmi şirket unvanınızı yazın\"\r                >\r                  <AutoComplete\r                    size=\"large\"\r                    placeholder=\"Örn: ABC Teknoloji A.Ş.\"\r                    onSearch={handleCompanySearch}\r                    options={companySuggestions.map(s => ({ value: s }))}\r                    suffixIcon={<ShopOutlined />}\r                  />\r                </Form.Item>\r              ) : null}\r              {registerData.accountType === 'company' && (\r                <Form.Item\r                  name=\"subdomain\"\r                  label={\r                    <span>\r                      <HomeOutlined style={{ marginRight: 8, color: '#667eea' }} />\r                      Web Adresi (Subdomain) <Text type=\"danger\">*</Text>\r                    </span>\r                  }\r                  rules={[\r                    { required: true, message: 'Web adresi zorunludur' },\r                    { min: 3, message: 'En az 3 karakter olmalıdır' },\r                    { max: 30, message: 'En fazla 30 karakter olabilir' },\r                    { pattern: /^[a-z0-9][a-z0-9-]*[a-z0-9]$/, message: 'Sadece küçük harf, rakam ve tire kullanabilirsiniz' }\r                  ]}\r                  validateStatus={\r                    checkingSubdomain ? 'validating' :\r                    subdomainAvailable === false ? 'error' :\r                    subdomainAvailable === true ? 'success' : ''\r                  }\r                  hasFeedback={subdomain.length > 0}\r                  help={\r                    subdomainAvailable === false ? 'Bu adres kullanımda, başka bir tane deneyin' :\r                    subdomainAvailable === true ? 'Bu adres müsait!' : \r                    subdomain.length > 0 && subdomain.length < 3 ? 'En az 3 karakter olmalıdır' : ''\r                  }\r                  extra={\r                    <div style={{ marginTop: 8 }}>\r                      <Text type=\"secondary\">Şirketinizin web adresi: </Text>\r                      <Text strong style={{ color: '#667eea' }}>\r                        {subdomain || 'sirketiniz'}.stoocker.app\r                      </Text>\r                    </div>\r                  }\r                >\r                  <Input\r                    size=\"large\"\r                    placeholder=\"sirketiniz\"\r                    value={subdomain}\r                    onChange={(e) = aria-label=\"input field\"> {\r                      const value = e.target.value.toLowerCase().replace(/[^a-z0-9-]/g, '');\r                      setSubdomain(value);\r                      form.setFieldsValue({ subdomain: value });\r                    }}\r                    prefix={<HomeOutlined style={{ color: '#999' }} />}\r                    suffix={\r                      checkingSubdomain ? <LoadingOutlined /> :\r                      subdomainAvailable === true ? <CheckCircleOutlined style={{ color: '#52c41a' }} /> :\r                      subdomainAvailable === false ? <CloseOutlined style={{ color: '#f5222d' }} /> : null\r                    }\r                    addonAfter=\".stoocker.app\"\r                  />\r                </Form.Item>\r              )}\r              {registerData.accountType === 'individual' ? (\r                <Form.Item \r                  name=\"fullName\" \r                  label={\r                    <span>\r                      <UserOutlined style={{ marginRight: 8, color: '#667eea' }} />\r                      Ad Soyad <Text type=\"danger\">*</Text>\r                    </span>\r                  }\r                  rules={[{ required: true, message: 'Ad soyad zorunludur' }]}\r                >\r                  <Input \r                    size=\"large\" \r                    placeholder=\"Adınız ve soyadınız\"\r                    prefix={<UserOutlined style={{ color: '#999' }} / aria-label=\"input field\">}\r                  />\r                </Form.Item>\r              ) : null}\r              <div className=\"identity-selector\">\r                <Text strong style={{ marginBottom: 8, display: 'block' }}>\r                  <IdcardOutlined style={{ marginRight: 8, color: '#667eea' }} />\r                  Kimlik Doğrulama Tipi <Text type=\"danger\">*</Text>\r                </Text>\r                <Radio.Group \r                  value={identityType}\r                  onChange={(e) => setIdentityType(e.target.value)}\r                  size=\"large\"\r                  style={{ width: '100%' }}\r                >\r                  <Space direction=\"vertical\" size={12} style={{ width: '100%' }}>\r                    <Radio value=\"tc\" className=\"identity-option\">\r                      <Space>\r                        <IdcardOutlined />\r                        <span>TC Kimlik No</span>\r                        <Tooltip title=\"11 haneli TC kimlik numaranız\">\r                          <InfoCircleOutlined style={{ color: '#999' }} />\r                        </Tooltip>\r                      </Space>\r                    </Radio>\r                    <Radio value=\"vergi\" className=\"identity-option\">\r                      <Space>\r                        <BankOutlined />\r                        <span>Vergi No</span>\r                        <Tooltip title=\"10 haneli vergi numaranız\">\r                          <InfoCircleOutlined style={{ color: '#999' }} />\r                        </Tooltip>\r                      </Space>\r                    </Radio>\r                  </Space>\r                </Radio.Group>\r              </div>\r              <Form.Item\r                name=\"identityNumber\"\r                label={\r                  <span>\r                    {identityType === 'tc' ? \r                      <IdcardOutlined style={{ marginRight: 8, color: '#667eea' }} /> : \r                      <BankOutlined style={{ marginRight: 8, color: '#667eea' }} />\r                    }\r                    {identityType === 'tc' ? 'TC Kimlik No' : 'Vergi No'} <Text type=\"danger\">*</Text>\r                  </span>\r                }\r                rules={[\r                  { required: true, message: `${identityType === 'tc' ? 'TC Kimlik No' : 'Vergi No'} zorunludur` },\r                  { len: identityType === 'tc' ? 11 : 10, message: `${identityType === 'tc' ? '11' : '10'} haneli olmalıdır` }\r                ]}\r                validateStatus={identityValidation?.isValid === false ? 'error' : ''}\r                help={identityValidation?.isValid === false ? identityValidation.message : ''}\r              >\r                <Input\r                  size=\"large\"\r                  placeholder={identityType === 'tc' ? '11 haneli TC Kimlik No' : '10 haneli Vergi No'}\r                  maxLength={identityType === 'tc' ? 11 : 10}\r                  suffix={\r                    isValidating ? <LoadingOutlined / aria-label=\"input field\"> :\r                    identityValidation?.isValid ? <CheckCircleOutlined style={{ color: '#52c41a' }} /> : null\r                  }\r                  onChange={async (e) => {\r                    const value = e.target.value.replace(/\\D/g, '');\r                    form.setFieldsValue({ identityNumber: value });\r                    if (value.length === (identityType === 'tc' ? 11 : 10)) {\r                      setIsValidating(true);\r                      try {\r                        await validateIdentity(value);\r                      } catch (error) {\r                      } finally {\r                        setTimeout(() => setIsValidating(false), 1000);\r                      }\r                    }\r                  }}\r                />\r              </Form.Item>\r            </Space>\r          </div>\r        );\r      case 2: // Business Details\r        return (\r          <div className=\"step-business\">\r            <div className=\"step-header\">\r              <Title level={2}>İşletme Detayları</Title>\r              <Paragraph type=\"secondary\">\r                Sektörünüzü ve işletme büyüklüğünüzü belirtin\r              </Paragraph>\r            </div>\r            <Space direction=\"vertical\" size={32} style={{ width: '100%' }}>\r              <div>\r                <Text strong style={{ marginBottom: 16, display: 'block', fontSize: 16 }}>\r                  Faaliyet Sektörünüz <Text type=\"danger\">*</Text>\r                </Text>\r                <Form.Item \r                  name=\"sector\" \r                  rules={[{ required: true, message: 'Sektör seçimi zorunludur' }]}\r                >\r                  <Radio.Group className=\"sector-cards\">\r                    <Row gutter={[16, 16]}>\r                      {[\r                        { value: 'tech', label: 'Teknoloji', icon: '💻' },\r                        { value: 'retail', label: 'Perakende', icon: '🛍️' },\r                        { value: 'service', label: 'Hizmet', icon: '🤝' },\r                        { value: 'production', label: 'Üretim', icon: '🏭' },\r                        { value: 'health', label: 'Sağlık', icon: '🏥' },\r                        { value: 'education', label: 'Eğitim', icon: '🎓' },\r                        { value: 'construction', label: 'İnşaat', icon: '🏗️' },\r                        { value: 'other', label: 'Diğer', icon: '📊' }\r                      ].map(sector => (\r                        <Col xs={12} sm={8} md={6} key={sector.value}>\r                          <Radio.Button value={sector.value} className=\"sector-card\">\r                            <div className=\"sector-card-content\">\r                              <span className=\"sector-icon\">{sector.icon}</span>\r                              <span className=\"sector-label\">{sector.label}</span>\r                            </div>\r                          </Radio.Button>\r                        </Col>\r                      ))}\r                    </Row>\r                  </Radio.Group>\r                </Form.Item>\r              </div>\r              <div>\r                <Text strong style={{ marginBottom: 16, display: 'block', fontSize: 16 }}>\r                  Çalışan Sayısı <Text type=\"danger\">*</Text>\r                </Text>\r                <Form.Item \r                  name=\"employeeCount\" \r                  rules={[{ required: true, message: 'Çalışan sayısı seçimi zorunludur' }]}\r                >\r                  <Radio.Group className=\"employee-cards\">\r                    <Row gutter={[16, 16]}>\r                      {[\r                        { value: '1-10', label: '1-10', desc: 'Mikro İşletme' },\r                        { value: '11-50', label: '11-50', desc: 'Küçük İşletme' },\r                        { value: '51-200', label: '51-200', desc: 'Orta Ölçekli' },\r                        { value: '200+', label: '200+', desc: 'Büyük İşletme' }\r                      ].map(size => (\r                        <Col xs={12} sm={6} key={size.value}>\r                          <Radio.Button value={size.value} className=\"employee-card\">\r                            <TeamOutlined style={{ fontSize: 24, marginBottom: 8 }} />\r                            <div className=\"employee-count\">{size.label}</div>\r                            <div className=\"employee-desc\">{size.desc}</div>\r                          </Radio.Button>\r                        </Col>\r                      ))}\r                    </Row>\r                  </Radio.Group>\r                </Form.Item>\r              </div>\r            </Space>\r          </div>\r        );\r      case 3: // Contact Information\r        return (\r          <div className=\"step-contact\">\r            <div className=\"step-header\">\r              <Title level={2}>İletişim Bilgileri</Title>\r              <Paragraph type=\"secondary\">\r                Size ulaşabileceğimiz iletişim bilgilerinizi girin\r              </Paragraph>\r            </div>\r            <Space direction=\"vertical\" size={24} style={{ width: '100%' }}>\r              <Form.Item\r                name=\"email\"\r                label={\r                  <span>\r                    E-posta Adresi <Text type=\"danger\">*</Text>\r                  </span>\r                }\r                rules={[\r                  { required: true, message: 'E-posta adresi zorunludur' },\r                  { type: 'email', message: 'Geçerli bir e-posta adresi girin' }\r                ]}\r                validateStatus={emailValidation?.isValid === false ? 'error' : ''}\r                help={emailValidation?.isValid === false ? 'Bu e-posta adresi zaten kullanımda' : ''}\r                extra=\"Giriş yapmak ve bildirimler için kullanılacak\"\r              >\r                <Input\r                  size=\"large\"\r                  prefix={<MailOutlined / aria-label=\"input field\">}\r                  placeholder=\"ornek@sirket.com\"\r                  onChange={(e) => validateEmail(e.target.value)}\r                  suffix={\r                    emailValidation?.isValid ? \r                    <CheckCircleOutlined style={{ color: '#52c41a' }} /> : null\r                  }\r                />\r              </Form.Item>\r              <Form.Item\r                name=\"phone\"\r                label={\r                  <span>\r                    Telefon Numarası <Text type=\"danger\">*</Text>\r                  </span>\r                }\r                rules={[\r                  { required: true, message: 'Telefon numarası zorunludur' },\r                  { pattern: /^[0-9]{10,11}$/, message: 'Geçerli bir telefon numarası girin' }\r                ]}\r                extra=\"Başında 0 olmadan, 10 haneli olarak girin\"\r              >\r                <Input\r                  size=\"large\"\r                  prefix={<PhoneOutlined / aria-label=\"input field\">}\r                  placeholder=\"5XX XXX XX XX\"\r                  maxLength={10}\r                />\r              </Form.Item>\r            </Space>\r          </div>\r        );\r      case 4: // Security\r        return (\r          <div className=\"step-security\">\r            <div className=\"step-header\">\r              <Title level={2}>Güvenlik</Title>\r              <Paragraph type=\"secondary\">\r                Hesabınız için güçlü bir şifre belirleyin\r              </Paragraph>\r            </div>\r            <Space direction=\"vertical\" size={24} style={{ width: '100%' }}>\r              <Form.Item\r                name=\"password\"\r                label={\r                  <span>\r                    Şifre <Text type=\"danger\">*</Text>\r                  </span>\r                }\r                rules={[\r                  { required: true, message: 'Şifre zorunludur' },\r                  { min: 8, message: 'Şifre en az 8 karakter olmalıdır' }\r                ]}\r                extra={<PasswordStrength password={form.getFieldValue('password')} />}\r              >\r                <Input.Password\r                  size=\"large\"\r                  prefix={<LockOutlined / aria-label=\"input field\">}\r                  placeholder=\"En az 8 karakter\"\r                />\r              </Form.Item>\r              <Form.Item\r                name=\"confirmPassword\"\r                label={\r                  <span>\r                    Şifre Tekrar <Text type=\"danger\">*</Text>\r                  </span>\r                }\r                dependencies={['password']}\r                rules={[\r                  { required: true, message: 'Şifre tekrarı zorunludur' },\r                  ({ getFieldValue }) => ({\r                    validator(_, value) {\r                      if (!value || getFieldValue('password') === value) {\r                        return Promise.resolve();\r                      }\r                      return Promise.reject(new Error('Şifreler eşleşmiyor'));\r                    },\r                  }),\r                ]}\r              >\r                <Input.Password\r                  size=\"large\"\r                  prefix={<LockOutlined / aria-label=\"input field\">}\r                  placeholder=\"Şifrenizi tekrar girin\"\r                />\r              </Form.Item>\r              <Alert\r                message=\"Güvenlik İpuçları\"\r                description={\r                  <ul style={{ marginBottom: 0, paddingLeft: 20 }}>\r                    <li>Büyük ve küçük harf kullanın</li>\r                    <li>En az bir rakam ekleyin</li>\r                    <li>Özel karakter kullanın (!@#$%)</li>\r                    <li>Kişisel bilgilerinizi kullanmayın</li>\r                  </ul>\r                }\r                type=\"info\"\r                showIcon\r              />\r            </Space>\r          </div>\r        );\r      case 5: // Agreement & Summary\r        return (\r          <div className=\"step-agreement\">\r            <div className=\"step-header\">\r              <Title level={2}>Neredeyse Hazırsınız!</Title>\r              <Paragraph type=\"secondary\">\r                Son adım: Sözleşmeleri onaylayın ve hesabınızı oluşturun\r              </Paragraph>\r            </div>\r            <Card className=\"summary-card\">\r              <Title level={4}>Hesap Özeti</Title>\r              <Space direction=\"vertical\" size={12} style={{ width: '100%' }}>\r                <div className=\"summary-item\">\r                  <Text type=\"secondary\">Hesap Türü:</Text>\r                  <Text strong>{registerData.accountType === 'company' ? 'Kurumsal' : 'Bireysel'}</Text>\r                </div>\r                {registerData.companyName && (\r                  <div className=\"summary-item\">\r                    <Text type=\"secondary\">Şirket:</Text>\r                    <Text strong>{registerData.companyName}</Text>\r                  </div>\r                )}\r                <div className=\"summary-item\">\r                  <Text type=\"secondary\">E-posta:</Text>\r                  <Text strong>{registerData.email}</Text>\r                </div>\r                <div className=\"summary-item\">\r                  <Text type=\"secondary\">Sektör:</Text>\r                  <Text strong>{registerData.sector}</Text>\r                </div>\r              </Space>\r            </Card>\r            <Space direction=\"vertical\" size={16} style={{ width: '100%', marginTop: 24 }}>\r              <Form.Item\r                name=\"termsAccepted\"\r                valuePropName=\"checked\"\r                rules={[\r                  {\r                    validator: (_, value) =>\r                      value ? Promise.resolve() : Promise.reject(new Error('Sözleşmeyi kabul etmelisiniz')),\r                  },\r                ]}\r              >\r                <Checkbox>\r                  <Space>\r                    <span>\r                      <a href=\"/terms\" target=\"_blank\">Kullanım Sözleşmesi</a> ve{' '}\r                      <a href=\"/privacy\" target=\"_blank\">Gizlilik Politikası</a>'nı okudum, kabul ediyorum\r                    </span>\r                    <Text type=\"danger\">*</Text>\r                  </Space>\r                </Checkbox>\r              </Form.Item>\r              <Form.Item name=\"marketingAccepted\" valuePropName=\"checked\">\r                <Checkbox>\r                  Stocker'dan haberler ve kampanyalar hakkında e-posta almak istiyorum\r                </Checkbox>\r              </Form.Item>\r            </Space>\r            <Alert\r              message=\"Hesabınız oluşturulduktan sonra:\"\r              description={\r                <ul style={{ marginBottom: 0, paddingLeft: 20 }}>\r                  <li>14 gün ücretsiz deneme başlayacak</li>\r                  <li>Tüm özelliklere erişim sağlanacak</li>\r                  <li>İstediğiniz zaman iptal edebileceksiniz</li>\r                  <li>7/24 destek alabileceksiniz</li>\r                </ul>\r              }\r              type=\"success\"\r              showIcon\r              style={{ marginTop: 24 }}\r            />\r          </div>\r        );\r      default:\r        return null;\r    }\r  };\r  return (\r    <div className=\"register-wizard-container\">\r      <div className=\"wizard-header\">\r        <div className=\"wizard-header-content\">\r          <div className=\"wizard-logo\">\r            <RocketOutlined />\r            <span>Stocker</span>\r          </div>\r          <Button \r            className=\"wizard-home-button\" \r            onClick={() => navigate('/')}\r            icon={<HomeOutlined />}\r            type=\"primary\"\r            size=\"large\"\r            style={{ \r              background: 'white', \r              color: '#667eea',\r              border: 'none',\r              fontWeight: 600,\r              boxShadow: '0 4px 12px rgba(0,0,0,0.15)',\r              display: 'flex',\r              alignItems: 'center',\r              gap: '8px'\r            }}\r          >\r            Anasayfaya Dön\r          </Button>\r        </div>\r        <div className=\"wizard-progress\">\r          <div className=\"wizard-title\">\r            {currentStep === 0 && (\r              <>\r                <Title level={3} style={{ color: 'white', margin: 0 }}>Kayıt Sihirbazına Hoş Geldiniz</Title>\r                <Text style={{ color: 'rgba(255, 255, 255, 0.9)' }}>Hesabınızı oluşturmak için adımları takip edin</Text>\r              </>\r            )}\r            {currentStep === 1 && (\r              <>\r                <Title level={3} style={{ color: 'white', margin: 0 }}>Kimlik Doğrulama</Title>\r                <Text style={{ color: 'rgba(255, 255, 255, 0.9)' }}>Güvenliğiniz için kimlik bilgilerinizi doğrulayın</Text>\r              </>\r            )}\r            {currentStep === 2 && (\r              <>\r                <Title level={3} style={{ color: 'white', margin: 0 }}>İşletme Profili</Title>\r                <Text style={{ color: 'rgba(255, 255, 255, 0.9)' }}>Size özel çözümler sunabilmemiz için</Text>\r              </>\r            )}\r            {currentStep === 3 && (\r              <>\r                <Title level={3} style={{ color: 'white', margin: 0 }}>İletişim Tercihleri</Title>\r                <Text style={{ color: 'rgba(255, 255, 255, 0.9)' }}>Size ulaşabileceğimiz bilgiler</Text>\r              </>\r            )}\r            {currentStep === 4 && (\r              <>\r                <Title level={3} style={{ color: 'white', margin: 0 }}>Güvenlik Ayarları</Title>\r                <Text style={{ color: 'rgba(255, 255, 255, 0.9)' }}>Hesabınızı korumak için güçlü bir şifre</Text>\r              </>\r            )}\r            {currentStep === 5 && (\r              <>\r                <Title level={3} style={{ color: 'white', margin: 0 }}>Son Adım!</Title>\r                <Text style={{ color: 'rgba(255, 255, 255, 0.9)' }}>Sözleşmeleri onaylayın ve başlayalım</Text>\r              </>\r            )}\r          </div>\r          <div className=\"step-indicators\">\r            {['Hesap Türü', 'Temel Bilgiler', 'İşletme', 'İletişim', 'Güvenlik', 'Onay'].map((step, index) => (\r              <div \r                key={index} \r                className={`step-indicator ${index === currentStep ? 'active' : ''} ${index < currentStep ? 'completed' : ''}`}\r              >\r                <div className=\"step-number\">\r                  {index < currentStep ? <CheckOutlined /> : index + 1}\r                </div>\r                <span className=\"step-label\">{step}</span>\r              </div>\r            ))}\r          </div>\r          <Progress \r            percent={progressPercent} \r            strokeColor=\"#667eea\"\r            showInfo={false}\r            style={{ marginBottom: 0 }}\r          />\r        </div>\r      </div>\r      <div className=\"wizard-content\">\r        <Card className=\"wizard-card\">\r          {!isConnected && (\r            <Alert\r              message=\"Bağlantı Kontrol Ediliyor\"\r              description=\"Gerçek zamanlı doğrulama servisi bağlanıyor...\"\r              type=\"warning\"\r              showIcon\r              icon={<LoadingOutlined />}\r              style={{ marginBottom: 24 }}\r            />\r          )}\r          <Form\r            form={form}\r            layout=\"vertical\"\r            size=\"large\"\r            initialValues={registerData}\r            onFinish={handleSubmit}\r          >\r            {renderStepContent()}\r          </Form>\r          <div className=\"wizard-actions\">\r            {currentStep > 0 && (\r              <Button \r                size=\"large\" \r                onClick={handlePrev}\r                icon={<ArrowLeftOutlined />}\r               aria-label=\"arrow left outlined\">\r                Geri\r              </Button>\r            )}\r            <Button\r              type=\"primary\"\r              size=\"large\"\r              onClick={handleNext}\r              loading={loading}\r              icon={currentStep === 5 ? <CheckCircleOutlined /> : <ArrowRightOutlined />}\r              iconPosition=\"end\"\r             aria-label=\"button\">\r              {currentStep === 5 ? 'Hesabı Oluştur' : 'Devam Et'}\r            </Button>\r          </div>\r        </Card>\r      </div>\r    </div>\r  );\r};\rexport default RegisterWizard;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/register/pages/RegisterWizard/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { Card, Input, Form, Typography, Space, Alert, Badge, Tag, Spin, Row, Col, Button, Tabs, Divider, Radio } from 'antd';\rimport { CheckCircleOutlined, CloseCircleOutlined, LoadingOutlined, ApiOutlined, WifiOutlined, IdcardOutlined } from '@ant-design/icons';\rimport { useSignalRValidation } from '@/shared/hooks/useSignalR';\rimport { apiClient } from '@/shared/api/client';\rconst { Title, Text } = Typography;\rconst { TabPane } = Tabs;\rexport const SignalRTestPage: React.FC = () => {\r  // SignalR Hook\r  const {\r    isConnected,\r    emailValidation,\r    passwordStrength,\r    domainCheck,\r    phoneValidation,\r    companyNameCheck,\r    identityValidation,\r    error,\r    validateEmail,\r    checkPasswordStrength,\r    checkDomain,\r    validatePhone,\r    checkCompanyName,\r    validateIdentity,\r  } = useSignalRValidation();\r  // State for inputs\r  const [emailInput, setEmailInput] = useState('');\r  const [passwordInput, setPasswordInput] = useState('');\r  const [domainInput, setDomainInput] = useState('');\r  const [phoneInput, setPhoneInput] = useState('');\r  const [companyInput, setCompanyInput] = useState('');\r  const [identityInput, setIdentityInput] = useState('');\r  const [identityType, setIdentityType] = useState<'tc' | 'vkn'>('tc');\r  // State for validation loading\r  const [isValidatingEmail, setIsValidatingEmail] = useState(false);\r  const [isValidatingPassword, setIsValidatingPassword] = useState(false);\r  const [isValidatingDomain, setIsValidatingDomain] = useState(false);\r  const [isValidatingPhone, setIsValidatingPhone] = useState(false);\r  const [isValidatingCompany, setIsValidatingCompany] = useState(false);\r  const [isValidatingIdentity, setIsValidatingIdentity] = useState(false);\r  // State for REST API results\r  const [apiEmailResult, setApiEmailResult] = useState<any>(null);\r  const [apiPasswordResult, setApiPasswordResult] = useState<any>(null);\r  const [apiDomainResult, setApiDomainResult] = useState<any>(null);\r  const [apiPhoneResult, setApiPhoneResult] = useState<any>(null);\r  const [apiCompanyResult, setApiCompanyResult] = useState<any>(null);\r  const [apiIdentityResult, setApiIdentityResult] = useState<any>(null);\r  // State for API loading\r  const [apiEmailLoading, setApiEmailLoading] = useState(false);\r  const [apiPasswordLoading, setApiPasswordLoading] = useState(false);\r  const [apiDomainLoading, setApiDomainLoading] = useState(false);\r  const [apiPhoneLoading, setApiPhoneLoading] = useState(false);\r  const [apiCompanyLoading, setApiCompanyLoading] = useState(false);\r  const [apiIdentityLoading, setApiIdentityLoading] = useState(false);\r  // SignalR Handlers\r  const handleEmailChange = async (value: string) => {\r    setEmailInput(value);\r    if (value && value.includes('@')) {\r      setIsValidatingEmail(true);\r      await validateEmail(value);\r    }\r  };\r  const handlePasswordChange = async (value: string) => {\r    setPasswordInput(value);\r    if (value) {\r      setIsValidatingPassword(true);\r      await checkPasswordStrength(value);\r    }\r  };\r  const handleDomainChange = async (value: string) => {\r    setDomainInput(value);\r    if (value && value.length > 2) {\r      setIsValidatingDomain(true);\r      await checkDomain(`${value}.stocker.app`);\r    }\r  };\r  const handlePhoneChange = async (value: string) => {\r    setPhoneInput(value);\r    if (value && value.length > 6) {\r      setIsValidatingPhone(true);\r      await validatePhone(value, 'TR');\r    }\r  };\r  const handleCompanyChange = async (value: string) => {\r    setCompanyInput(value);\r    if (value && value.length > 2) {\r      setIsValidatingCompany(true);\r      await checkCompanyName(value);\r    }\r  };\r  const handleIdentityChange = async (value: string) => {\r    setIdentityInput(value);\r    const cleanValue = value.replace(/\\D/g, '');\r    const expectedLength = identityType === 'tc' ? 11 : 10;\r    if (cleanValue.length === expectedLength) {\r      setIsValidatingIdentity(true);\r      try {\r        await validateIdentity(cleanValue);\r      } catch (error) {\r      }\r    }\r  };\r  // REST API Handlers\r  const validateEmailViaAPI = async () => {\r    if (!emailInput || !emailInput.includes('@')) {\r      return;\r    }\r    setApiEmailLoading(true);\r    try {\r      const response = await apiClient.post('/api/public/validate/email', { email: emailInput });\r      setApiEmailResult(response.data);\r    } catch (error: any) {\r      setApiEmailResult({ \r        isValid: false, \r        message: error.response?.data?.message || 'API hatası'\r      });\r    } finally {\r      setApiEmailLoading(false);\r    }\r  };\r  const checkPasswordViaAPI = async () => {\r    if (!passwordInput) {\r      return;\r    }\r    setApiPasswordLoading(true);\r    try {\r      const response = await apiClient.post('/api/public/validate/password-strength', { password: passwordInput });\r      setApiPasswordResult(response.data);\r    } catch (error: any) {\r      setApiPasswordResult({ \r        score: 0,\r        message: error.response?.data?.message || 'API hatası'\r      });\r    } finally {\r      setApiPasswordLoading(false);\r    }\r  };\r  const checkDomainViaAPI = async () => {\r    if (!domainInput || domainInput.length < 3) {\r      return;\r    }\r    setApiDomainLoading(true);\r    try {\r      const response = await apiClient.post('/api/public/validate/domain', { \r        domain: `${domainInput}.stocker.app` \r      });\r      setApiDomainResult(response.data);\r    } catch (error: any) {\r      setApiDomainResult({ \r        isAvailable: false,\r        message: error.response?.data?.message || 'API hatası'\r      });\r    } finally {\r      setApiDomainLoading(false);\r    }\r  };\r  const validatePhoneViaAPI = async () => {\r    if (!phoneInput || phoneInput.length < 7) {\r      return;\r    }\r    setApiPhoneLoading(true);\r    try {\r      const response = await apiClient.post('/api/public/validate/phone', { \r        phoneNumber: phoneInput,\r        countryCode: 'TR'\r      });\r      setApiPhoneResult(response.data);\r    } catch (error: any) {\r      setApiPhoneResult({ \r        isValid: false,\r        message: error.response?.data?.message || 'API hatası'\r      });\r    } finally {\r      setApiPhoneLoading(false);\r    }\r  };\r  const checkCompanyViaAPI = async () => {\r    if (!companyInput || companyInput.length < 3) {\r      return;\r    }\r    setApiCompanyLoading(true);\r    try {\r      const response = await apiClient.post('/api/public/validate/company-name', { \r        companyName: companyInput \r      });\r      setApiCompanyResult(response.data);\r    } catch (error: any) {\r      setApiCompanyResult({ \r        isValid: false,\r        message: error.response?.data?.message || 'API hatası'\r      });\r    } finally {\r      setApiCompanyLoading(false);\r    }\r  };\r  const validateIdentityViaAPI = async () => {\r    const cleanValue = identityInput.replace(/\\D/g, '');\r    const expectedLength = identityType === 'tc' ? 11 : 10;\r    if (cleanValue.length !== expectedLength) {\r      return;\r    }\r    setApiIdentityLoading(true);\r    try {\r      const response = await apiClient.post('/api/public/validate/identity', { \r        identityNumber: cleanValue \r      });\r      setApiIdentityResult(response.data);\r    } catch (error: any) {\r      setApiIdentityResult({ \r        isValid: false,\r        message: error.response?.data?.message || 'API hatası',\r        numberType: identityType === 'tc' ? 'TCKimlik' : 'VergiNo'\r      });\r    } finally {\r      setApiIdentityLoading(false);\r    }\r  };\r  // Reset loading states when results come in\r  useEffect(() => {\r    if (emailValidation) setIsValidatingEmail(false);\r  }, [emailValidation]);\r  useEffect(() => {\r    if (passwordStrength) setIsValidatingPassword(false);\r  }, [passwordStrength]);\r  useEffect(() => {\r    if (domainCheck) setIsValidatingDomain(false);\r  }, [domainCheck]);\r  useEffect(() => {\r    if (phoneValidation) setIsValidatingPhone(false);\r  }, [phoneValidation]);\r  useEffect(() => {\r    if (companyNameCheck) setIsValidatingCompany(false);\r  }, [companyNameCheck]);\r  useEffect(() => {\r    if (identityValidation) setIsValidatingIdentity(false);\r  }, [identityValidation]);\r  const getPasswordStrengthColor = (level?: string) => {\r    switch (level) {\r      case 'VeryWeak': return '#ff4d4f';\r      case 'Weak': return '#faad14';\r      case 'Fair': return '#fadb14';\r      case 'Strong': return '#52c41a';\r      case 'VeryStrong': return '#389e0d';\r      default: return '#d9d9d9';\r    }\r  };\r  const renderValidationCard = (\r    title: string,\r    input: string,\r    setInput: (value: string) => void,\r    signalRResult: any,\r    apiResult: any,\r    handleSignalR: (value: string) => void,\r    handleAPI: () => void,\r    isSignalRLoading: boolean,\r    isAPILoading: boolean,\r    placeholder: string,\r    isPassword: boolean = false,\r    addonAfter?: string\r  ) => (\r    <Card title={title}>\r      <Tabs defaultActiveKey=\"signalr\">\r        <TabPane\r          tab={\r            <span>\r              <WifiOutlined /> SignalR (Real-time)\r            </span>\r          }\r          key=\"signalr\"\r        >\r          <Form.Item\r            label={`${title} - SignalR`}\r            validateStatus={\r              isSignalRLoading ? 'validating' :\r              signalRResult ? (signalRResult.isValid || signalRResult.score >= 3 ? 'success' : 'error') : ''\r            }\r            hasFeedback={isSignalRLoading || !!signalRResult}\r            help={signalRResult?.message || (signalRResult?.suggestions && signalRResult.suggestions.join(', '))}\r          >\r            {isPassword ? (\r              <Input.Password\r                placeholder={placeholder}\r                value={input}\r                onChange={(e) = aria-label=\"input field\"> {\r                  setInput(e.target.value);\r                  handleSignalR(e.target.value);\r                }}\r              />\r            ) : (\r              <Input\r                placeholder={placeholder}\r                value={input}\r                onChange={(e) = aria-label=\"input field\"> {\r                  setInput(e.target.value);\r                  handleSignalR(e.target.value);\r                }}\r                addonAfter={addonAfter}\r                suffix={\r                  isSignalRLoading ? <Spin indicator={<LoadingOutlined />} /> :\r                  signalRResult ? (\r                    signalRResult.isValid || signalRResult.score >= 3 ? \r                    <CheckCircleOutlined style={{ color: '#52c41a' }} /> :\r                    <CloseCircleOutlined style={{ color: '#ff4d4f' }} />\r                  ) : null\r                }\r              />\r            )}\r          </Form.Item>\r          {signalRResult && (\r            <Alert\r              message=\"SignalR Result\"\r              description={\r                <div>\r                  {signalRResult.score !== undefined && (\r                    <div>\r                      <Text>Score: </Text>\r                      <Tag color={getPasswordStrengthColor(signalRResult.level)}>\r                        {signalRResult.level} ({signalRResult.score}/5)\r                      </Tag>\r                    </div>\r                  )}\r                  {signalRResult.details && (\r                    <pre>{JSON.stringify(signalRResult.details, null, 2)}</pre>\r                  )}\r                  {signalRResult.suggestions && signalRResult.suggestions.length > 0 && (\r                    <ul>\r                      {signalRResult.suggestions.map((s: string, i: number) => (\r                        <li key={i}>{s}</li>\r                      ))}\r                    </ul>\r                  )}\r                </div>\r              }\r              type={signalRResult.isValid || signalRResult.score >= 3 ? \"success\" : \"warning\"}\r            />\r          )}\r        </TabPane>\r        <TabPane\r          tab={\r            <span>\r              <ApiOutlined /> REST API\r            </span>\r          }\r          key=\"api\"\r        >\r          <Form.Item\r            label={`${title} - REST API`}\r            validateStatus={\r              isAPILoading ? 'validating' :\r              apiResult ? (apiResult.isValid || apiResult.score >= 3 || apiResult.isAvailable ? 'success' : 'error') : ''\r            }\r            hasFeedback={isAPILoading}\r          >\r            <Space.Compact style={{ width: '100%' }}>\r              {isPassword ? (\r                <Input.Password\r                  placeholder={placeholder}\r                  value={input}\r                  onChange={(e) = aria-label=\"input field\"> setInput(e.target.value)}\r                />\r              ) : (\r                <Input\r                  placeholder={placeholder}\r                  value={input}\r                  onChange={(e) = aria-label=\"input field\"> setInput(e.target.value)}\r                  addonAfter={addonAfter}\r                />\r              )}\r              <Button\r                type=\"primary\"\r                onClick={handleAPI}\r                loading={isAPILoading}\r              >\r                Validate\r              </Button>\r            </Space.Compact>\r          </Form.Item>\r          {apiResult && (\r            <Alert\r              message=\"API Result\"\r              description={\r                <div>\r                  <p><strong>Message:</strong> {apiResult.message}</p>\r                  {apiResult.score !== undefined && (\r                    <p>\r                      <strong>Score:</strong>{' '}\r                      <Tag color={getPasswordStrengthColor(apiResult.level)}>\r                        {apiResult.level} ({apiResult.score}/5)\r                      </Tag>\r                    </p>\r                  )}\r                  {apiResult.formattedNumber && (\r                    <p><strong>Formatted:</strong> {apiResult.formattedNumber}</p>\r                  )}\r                  {apiResult.carrier && (\r                    <p><strong>Carrier:</strong> {apiResult.carrier}</p>\r                  )}\r                  {apiResult.suggestions && apiResult.suggestions.length > 0 && (\r                    <div>\r                      <strong>Suggestions:</strong>\r                      <ul>\r                        {apiResult.suggestions.map((s: string, i: number) => (\r                          <li key={i}>{s}</li>\r                        ))}\r                      </ul>\r                    </div>\r                  )}\r                  {apiResult.details && Object.keys(apiResult.details).length > 0 && (\r                    <details>\r                      <summary>Details</summary>\r                      <pre>{JSON.stringify(apiResult.details, null, 2)}</pre>\r                    </details>\r                  )}\r                </div>\r              }\r              type={apiResult.isValid || apiResult.score >= 3 || apiResult.isAvailable ? \"success\" : \"warning\"}\r            />\r          )}\r        </TabPane>\r      </Tabs>\r    </Card>\r  );\r  return (\r    <div style={{ padding: 24, maxWidth: 1400, margin: '0 auto' }}>\r      <Title level={2}>Validation Test Page</Title>\r      <Alert\r        message={isConnected ? \"SignalR Connected\" : \"SignalR Disconnected\"}\r        description={isConnected \r          ? \"Real-time validation is active. Type in the fields to see instant validation.\" \r          : \"SignalR is not connected. Using mock service for real-time validation.\"}\r        type={isConnected ? \"success\" : \"warning\"}\r        showIcon\r        style={{ marginBottom: 24 }}\r      />\r      {error && (\r        <Alert\r          message=\"Validation Error\"\r          description={error}\r          type=\"error\"\r          showIcon\r          closable\r          style={{ marginBottom: 24 }}\r        />\r      )}\r      <Row gutter={[24, 24]}>\r        <Col xs={24} md={12}>\r          {renderValidationCard(\r            \"Email Validation\",\r            emailInput,\r            setEmailInput,\r            emailValidation,\r            apiEmailResult,\r            handleEmailChange,\r            validateEmailViaAPI,\r            isValidatingEmail,\r            apiEmailLoading,\r            \"test@example.com\"\r          )}\r        </Col>\r        <Col xs={24} md={12}>\r          {renderValidationCard(\r            \"Password Strength\",\r            passwordInput,\r            setPasswordInput,\r            passwordStrength,\r            apiPasswordResult,\r            handlePasswordChange,\r            checkPasswordViaAPI,\r            isValidatingPassword,\r            apiPasswordLoading,\r            \"Enter a password\",\r            true\r          )}\r        </Col>\r        <Col xs={24} md={12}>\r          {renderValidationCard(\r            \"Domain Availability\",\r            domainInput,\r            setDomainInput,\r            domainCheck,\r            apiDomainResult,\r            handleDomainChange,\r            checkDomainViaAPI,\r            isValidatingDomain,\r            apiDomainLoading,\r            \"mycompany\",\r            false,\r            \".stocker.app\"\r          )}\r        </Col>\r        <Col xs={24} md={12}>\r          {renderValidationCard(\r            \"Phone Validation\",\r            phoneInput,\r            setPhoneInput,\r            phoneValidation,\r            apiPhoneResult,\r            handlePhoneChange,\r            validatePhoneViaAPI,\r            isValidatingPhone,\r            apiPhoneLoading,\r            \"+90 555 123 4567\"\r          )}\r        </Col>\r        <Col xs={24} md={12}>\r          {renderValidationCard(\r            \"Company Name Validation\",\r            companyInput,\r            setCompanyInput,\r            companyNameCheck,\r            apiCompanyResult,\r            handleCompanyChange,\r            checkCompanyViaAPI,\r            isValidatingCompany,\r            apiCompanyLoading,\r            \"ABC Technology Inc.\"\r          )}\r        </Col>\r        <Col xs={24} md={12}>\r          <Card title=\"TC Kimlik / Vergi No Validation\">\r            <Space direction=\"vertical\" style={{ width: '100%', marginBottom: 16 }}>\r              <Radio.Group \r                value={identityType} \r                onChange={(e) => {\r                  setIdentityType(e.target.value);\r                  setIdentityInput('');\r                  setApiIdentityResult(null);\r                }}\r              >\r                <Radio.Button value=\"tc\">TC Kimlik No</Radio.Button>\r                <Radio.Button value=\"vkn\">Vergi No</Radio.Button>\r              </Radio.Group>\r            </Space>\r            <Tabs defaultActiveKey=\"signalr\">\r              <TabPane\r                tab={\r                  <span>\r                    <WifiOutlined /> SignalR (Real-time)\r                  </span>\r                }\r                key=\"signalr\"\r              >\r                <Form.Item\r                  label={`${identityType === 'tc' ? 'TC Kimlik No' : 'Vergi No'} - SignalR`}\r                  validateStatus={\r                    isValidatingIdentity ? 'validating' :\r                    identityValidation ? (identityValidation.isValid ? 'success' : 'error') : ''\r                  }\r                  hasFeedback={isValidatingIdentity || !!identityValidation}\r                  help={identityValidation?.message}\r                >\r                  <Input\r                    placeholder={identityType === 'tc' ? '11111111110' : '1234567890'}\r                    value={identityInput}\r                    onChange={(e) = aria-label=\"input field\"> {\r                      setIdentityInput(e.target.value);\r                      handleIdentityChange(e.target.value);\r                    }}\r                    maxLength={identityType === 'tc' ? 11 : 10}\r                    prefix={<IdcardOutlined />}\r                    suffix={\r                      isValidatingIdentity ? <Spin indicator={<LoadingOutlined />} /> :\r                      identityValidation ? (\r                        identityValidation.isValid ? \r                        <CheckCircleOutlined style={{ color: '#52c41a' }} /> :\r                        <CloseCircleOutlined style={{ color: '#ff4d4f' }} />\r                      ) : null\r                    }\r                  />\r                </Form.Item>\r                {identityValidation && (\r                  <Alert\r                    message=\"SignalR Result\"\r                    description={\r                      <div>\r                        <p><strong>Type:</strong> {identityValidation.numberType}</p>\r                        <p><strong>Message:</strong> {identityValidation.message}</p>\r                        {identityValidation.details && Object.keys(identityValidation.details).length > 0 && (\r                          <details>\r                            <summary>Details</summary>\r                            <pre>{JSON.stringify(identityValidation.details, null, 2)}</pre>\r                          </details>\r                        )}\r                      </div>\r                    }\r                    type={identityValidation.isValid ? \"success\" : \"warning\"}\r                  />\r                )}\r              </TabPane>\r              <TabPane\r                tab={\r                  <span>\r                    <ApiOutlined /> REST API\r                  </span>\r                }\r                key=\"api\"\r              >\r                <Form.Item\r                  label={`${identityType === 'tc' ? 'TC Kimlik No' : 'Vergi No'} - REST API`}\r                  validateStatus={\r                    apiIdentityLoading ? 'validating' :\r                    apiIdentityResult ? (apiIdentityResult.isValid ? 'success' : 'error') : ''\r                  }\r                  hasFeedback={apiIdentityLoading}\r                >\r                  <Space.Compact style={{ width: '100%' }}>\r                    <Input\r                      placeholder={identityType === 'tc' ? '11111111110' : '1234567890'}\r                      value={identityInput}\r                      onChange={(e) = aria-label=\"input field\"> setIdentityInput(e.target.value)}\r                      maxLength={identityType === 'tc' ? 11 : 10}\r                      prefix={<IdcardOutlined />}\r                    />\r                    <Button\r                      type=\"primary\"\r                      onClick={validateIdentityViaAPI}\r                      loading={apiIdentityLoading}\r                    >\r                      Validate\r                    </Button>\r                  </Space.Compact>\r                </Form.Item>\r                {apiIdentityResult && (\r                  <Alert\r                    message=\"API Result\"\r                    description={\r                      <div>\r                        <p><strong>Type:</strong> {apiIdentityResult.numberType}</p>\r                        <p><strong>Message:</strong> {apiIdentityResult.message}</p>\r                        {apiIdentityResult.formattedNumber && (\r                          <p><strong>Formatted:</strong> {apiIdentityResult.formattedNumber}</p>\r                        )}\r                        {apiIdentityResult.details && Object.keys(apiIdentityResult.details).length > 0 && (\r                          <details>\r                            <summary>Details</summary>\r                            <pre>{JSON.stringify(apiIdentityResult.details, null, 2)}</pre>\r                          </details>\r                        )}\r                      </div>\r                    }\r                    type={apiIdentityResult.isValid ? \"success\" : \"warning\"}\r                  />\r                )}\r              </TabPane>\r            </Tabs>\r          </Card>\r        </Col>\r      </Row>\r      <Divider />\r      <Card title=\"Connection & API Information\" style={{ marginTop: 24 }}>\r        <Row gutter={[24, 24]}>\r          <Col xs={24} md={12}>\r            <Title level={5}>SignalR Status</Title>\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <Space>\r                <Badge status={isConnected ? \"success\" : \"error\"} />\r                <Text strong>Connection: </Text>\r                <Text>{isConnected ? 'Connected' : 'Disconnected'}</Text>\r              </Space>\r              <Space>\r                <Text strong>Validation Hub: </Text>\r                <Text code>http://localhost:5104/hubs/validation</Text>\r              </Space>\r              <Space>\r                <Text strong>Protocol: </Text>\r                <Text>WebSockets / LongPolling</Text>\r              </Space>\r            </Space>\r          </Col>\r          <Col xs={24} md={12}>\r            <Title level={5}>REST API Endpoints</Title>\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <Text code>POST /api/public/validate/email</Text>\r              <Text code>POST /api/public/validate/phone</Text>\r              <Text code>POST /api/public/validate/password-strength</Text>\r              <Text code>POST /api/public/validate/domain</Text>\r              <Text code>POST /api/public/validate/company-name</Text>\r            </Space>\r          </Col>\r        </Row>\r      </Card>\r      <Card title=\"Test Scenarios\" style={{ marginTop: 24 }}>\r        <Title level={5}>Try these test cases:</Title>\r        <Row gutter={[24, 24]}>\r          <Col xs={24} md={8}>\r            <Text strong>Email Tests:</Text>\r            <ul>\r              <li>Valid: test@example.com</li>\r              <li>Typo: test@gmial.com</li>\r              <li>Disposable: test@tempmail.com</li>\r              <li>Invalid: test@</li>\r            </ul>\r          </Col>\r          <Col xs={24} md={8}>\r            <Text strong>Phone Tests (TR):</Text>\r            <ul>\r              <li>Valid: 5551234567</li>\r              <li>With code: 905551234567</li>\r              <li>Invalid: 1234567890</li>\r              <li>Short: 555123</li>\r            </ul>\r          </Col>\r          <Col xs={24} md={8}>\r            <Text strong>Password Tests:</Text>\r            <ul>\r              <li>Weak: 123456</li>\r              <li>Medium: Test123</li>\r              <li>Strong: Test@123456</li>\r              <li>Very Strong: MyP@ssw0rd!2024</li>\r            </ul>\r          </Col>\r        </Row>\r        <Row gutter={[24, 24]} style={{ marginTop: 16 }}>\r          <Col xs={24} md={8}>\r            <Text strong>TC Kimlik No Tests:</Text>\r            <ul>\r              <li>Valid Test: 11111111110</li>\r              <li>Valid Test: 10000000146</li>\r              <li>Invalid: 12345678901</li>\r              <li>Invalid: 00000000000</li>\r            </ul>\r          </Col>\r          <Col xs={24} md={8}>\r            <Text strong>Vergi No Tests:</Text>\r            <ul>\r              <li>Valid Test: 1234567890</li>\r              <li>Invalid: 1111111111</li>\r              <li>Invalid: 0000000000</li>\r              <li>Short: 123456</li>\r            </ul>\r          </Col>\r          <Col xs={24} md={8}>\r            <Text strong>Company Name Tests:</Text>\r            <ul>\r              <li>Available: MyUniqueCompany</li>\r              <li>Similar: Microsoft Tech</li>\r              <li>Premium: DataCloud</li>\r              <li>Short: AB</li>\r            </ul>\r          </Col>\r        </Row>\r      </Card>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/register/pages/SignalRTest/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Tabs,\r  Form,\r  Input,\r  Button,\r  Select,\r  Switch,\r  Row,\r  Col,\r  Upload,\r  message,\r  Alert,\r  Divider,\r  Typography,\r  Space,\r  InputNumber,\r  TimePicker,\r  Radio,\r  Checkbox,\r  Modal,\r  List,\r  Avatar,\r  Badge,\r  Tag,\r  Tooltip,\r  notification,\r} from 'antd';\rimport {\r  SaveOutlined,\r  UploadOutlined,\r  SettingOutlined,\r  BellOutlined,\r  MailOutlined,\r  GlobalOutlined,\r  SafetyOutlined,\r  FileTextOutlined,\r  DollarOutlined,\r  ClockCircleOutlined,\r  UserOutlined,\r  LockOutlined,\r  ApiOutlined,\r  DatabaseOutlined,\r  CloudUploadOutlined,\r  InfoCircleOutlined,\r  CheckCircleOutlined,\r  ExclamationCircleOutlined,\r  KeyOutlined,\r  TeamOutlined,\r  PhoneOutlined,\r  EnvironmentOutlined,\r  BankOutlined,\r  PlusOutlined,\r} from '@ant-design/icons';\rimport { PageHeader } from '@/shared/components/PageHeader';\rimport { formRules } from '@/shared/utils/validators';\rimport dayjs from 'dayjs';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Option } = Select;\rconst { TabPane } = Tabs;\rconst { TextArea } = Input;\rconst { Dragger } = Upload;\rinterface CompanySettings {\r  companyName: string;\r  companyLogo?: string;\r  companyAddress: string;\r  companyPhone: string;\r  companyEmail: string;\r  taxNumber: string;\r  taxOffice: string;\r  website?: string;\r  industry: string;\r}\rinterface GeneralSettings {\r  timezone: string;\r  language: string;\r  currency: string;\r  dateFormat: string;\r  timeFormat: string;\r  weekStartsOn: string;\r  fiscalYearStart: string;\r}\rinterface NotificationSettings {\r  emailNotifications: boolean;\r  smsNotifications: boolean;\r  pushNotifications: boolean;\r  invoiceReminders: boolean;\r  paymentReminders: boolean;\r  systemUpdates: boolean;\r  marketingEmails: boolean;\r  reminderDays: number;\r}\rinterface InvoiceSettings {\r  invoicePrefix: string;\r  invoiceStartNumber: number;\r  invoiceNumberFormat: string;\r  dueDays: number;\r  defaultTaxRate: number;\r  defaultPaymentMethod: string;\r  showLogo: boolean;\r  showQRCode: boolean;\r  footerText: string;\r}\rinterface SecuritySettings {\r  twoFactorAuth: boolean;\r  sessionTimeout: number;\r  passwordExpiry: number;\r  passwordComplexity: string;\r  ipWhitelist: string[];\r  loginAttempts: number;\r  lockoutDuration: number;\r}\rexport const TenantSettings: React.FC = () => {\r  const [activeTab, setActiveTab] = useState('company');\r  const [loading, setLoading] = useState(false);\r  const [saving, setSaving] = useState(false);\r  const [companyForm] = Form.useForm();\r  const [generalForm] = Form.useForm();\r  const [notificationForm] = Form.useForm();\r  const [invoiceForm] = Form.useForm();\r  const [securityForm] = Form.useForm();\r  const [emailForm] = Form.useForm();\r  useEffect(() => {\r    loadSettings();\r  }, []);\r  const loadSettings = async () => {\r    setLoading(true);\r    try {\r      // API'den ayarları yükle\r      // const response = await settingsService.getTenantSettings();\r      // Mock data\r      const mockSettings = {\r        company: {\r          companyName: 'ABC Teknoloji A.Ş.',\r          companyAddress: 'Maslak Mah. Teknoloji Cad. No:15\\nSarıyer/İstanbul',\r          companyPhone: '+90 212 555 0100',\r          companyEmail: 'info@abcteknoloji.com',\r          taxNumber: '1234567890',\r          taxOffice: 'Sarıyer',\r          website: 'www.abcteknoloji.com',\r          industry: 'technology',\r        },\r        general: {\r          timezone: 'Europe/Istanbul',\r          language: 'tr',\r          currency: 'TRY',\r          dateFormat: 'DD.MM.YYYY',\r          timeFormat: '24h',\r          weekStartsOn: 'monday',\r          fiscalYearStart: '01-01',\r        },\r        notifications: {\r          emailNotifications: true,\r          smsNotifications: false,\r          pushNotifications: true,\r          invoiceReminders: true,\r          paymentReminders: true,\r          systemUpdates: true,\r          marketingEmails: false,\r          reminderDays: 3,\r        },\r        invoice: {\r          invoicePrefix: 'INV',\r          invoiceStartNumber: 1000,\r          invoiceNumberFormat: '{prefix}-{year}-{number}',\r          dueDays: 30,\r          defaultTaxRate: 18,\r          defaultPaymentMethod: 'BankTransfer',\r          showLogo: true,\r          showQRCode: true,\r          footerText: 'Teşekkür ederiz.',\r        },\r        security: {\r          twoFactorAuth: false,\r          sessionTimeout: 30,\r          passwordExpiry: 90,\r          passwordComplexity: 'medium',\r          ipWhitelist: [],\r          loginAttempts: 5,\r          lockoutDuration: 30,\r        },\r      };\r      companyForm.setFieldsValue(mockSettings.company);\r      generalForm.setFieldsValue(mockSettings.general);\r      notificationForm.setFieldsValue(mockSettings.notifications);\r      invoiceForm.setFieldsValue(mockSettings.invoice);\r      securityForm.setFieldsValue(mockSettings.security);\r    } catch (error) {\r      message.error('Ayarlar yüklenemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleSaveCompanySettings = async (values: CompanySettings) => {\r    setSaving(true);\r    try {\r      // await settingsService.updateCompanySettings(values);\r      message.success('Şirket bilgileri güncellendi');\r    } catch (error) {\r      message.error('Güncelleme başarısız');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleSaveGeneralSettings = async (values: GeneralSettings) => {\r    setSaving(true);\r    try {\r      // await settingsService.updateGeneralSettings(values);\r      message.success('Genel ayarlar güncellendi');\r    } catch (error) {\r      message.error('Güncelleme başarısız');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleSaveNotificationSettings = async (values: NotificationSettings) => {\r    setSaving(true);\r    try {\r      // await settingsService.updateNotificationSettings(values);\r      message.success('Bildirim ayarları güncellendi');\r    } catch (error) {\r      message.error('Güncelleme başarısız');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleSaveInvoiceSettings = async (values: InvoiceSettings) => {\r    setSaving(true);\r    try {\r      // await settingsService.updateInvoiceSettings(values);\r      message.success('Fatura ayarları güncellendi');\r    } catch (error) {\r      message.error('Güncelleme başarısız');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleSaveSecuritySettings = async (values: SecuritySettings) => {\r    setSaving(true);\r    try {\r      // await settingsService.updateSecuritySettings(values);\r      message.success('Güvenlik ayarları güncellendi');\r    } catch (error) {\r      message.error('Güncelleme başarısız');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleTestEmailSettings = async () => {\r    const values = emailForm.getFieldsValue();\r    try {\r      // await settingsService.testEmailSettings(values);\r      notification.success({\r        message: 'Test Başarılı',\r        description: 'Test e-postası başarıyla gönderildi.',\r      });\r    } catch (error) {\r      notification.error({\r        message: 'Test Başarısız',\r        description: 'E-posta gönderilemedi. Ayarları kontrol edin.',\r      });\r    }\r  };\r  const uploadProps = {\r    name: 'logo',\r    action: '/api/upload/logo',\r    headers: {\r      authorization: 'authorization-text',\r    },\r    onChange(info: any) {\r      if (info.file.status === 'done') {\r        message.success(`${info.file.name} yüklendi`);\r      } else if (info.file.status === 'error') {\r        message.error(`${info.file.name} yüklenemedi`);\r      }\r    },\r  };\r  return (\r    <div className=\"tenant-settings-page\">\r      <PageHeader\r        title=\"Ayarlar\"\r        subtitle=\"Sistem ve şirket ayarlarını yönetin\"\r        breadcrumbs={[\r          { title: 'Ana Sayfa', path: '/app/tenant' },\r          { title: 'Ayarlar' },\r        ]}\r      />\r      <Card loading={loading}>\r        <Tabs activeKey={activeTab} onChange={setActiveTab}>\r          {/* Şirket Bilgileri */}\r          <TabPane\r            tab={\r              <span>\r                <BankOutlined />\r                Şirket Bilgileri\r              </span>\r            }\r            key=\"company\"\r          >\r            <Form\r              form={companyForm}\r              layout=\"vertical\"\r              onFinish={handleSaveCompanySettings}\r            >\r              <Title level={4}>Şirket Bilgileri</Title>\r              <Paragraph type=\"secondary\">\r                Faturalarda ve raporlarda görünecek şirket bilgilerinizi güncelleyin.\r              </Paragraph>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"companyName\"\r                    label=\"Şirket Adı\"\r                    rules={[formRules.required()]}\r                  >\r                    <Input prefix={<BankOutlined / aria-label=\"input field\">} placeholder=\"Şirket adı\" />\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item name=\"website\" label=\"Web Sitesi\">\r                    <Input prefix={<GlobalOutlined / aria-label=\"input field\">} placeholder=\"www.sirket.com\" />\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"companyEmail\"\r                    label=\"E-posta\"\r                    rules={[formRules.required(), formRules.email()]}\r                  >\r                    <Input prefix={<MailOutlined / aria-label=\"input field\">} placeholder=\"info@sirket.com\" />\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"companyPhone\"\r                    label=\"Telefon\"\r                    rules={[formRules.required()]}\r                  >\r                    <Input prefix={<PhoneOutlined / aria-label=\"input field\">} placeholder=\"+90 XXX XXX XX XX\" />\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item\r                name=\"companyAddress\"\r                label=\"Adres\"\r                rules={[formRules.required()]}\r              >\r                <TextArea\r                  rows={3}\r                  placeholder=\"Şirket adresi\"\r                />\r              </Form.Item>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"taxNumber\"\r                    label=\"Vergi No\"\r                    rules={[formRules.required()]}\r                  >\r                    <Input placeholder=\"Vergi numarası\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"taxOffice\"\r                    label=\"Vergi Dairesi\"\r                    rules={[formRules.required()]}\r                  >\r                    <Input placeholder=\"Vergi dairesi\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item name=\"industry\" label=\"Sektör\">\r                <Select placeholder=\"Sektör seçin\" aria-label=\"select field\">\r                  <Option value=\"technology\">Teknoloji</Option>\r                  <Option value=\"retail\">Perakende</Option>\r                  <Option value=\"manufacturing\">Üretim</Option>\r                  <Option value=\"service\">Hizmet</Option>\r                  <Option value=\"education\">Eğitim</Option>\r                  <Option value=\"healthcare\">Sağlık</Option>\r                  <Option value=\"other\">Diğer</Option>\r                </Select>\r              </Form.Item>\r              <Divider />\r              <Title level={5}>Logo</Title>\r              <Dragger {...uploadProps} style={{ marginBottom: 24 }}>\r                <p className=\"ant-upload-drag-icon\">\r                  <CloudUploadOutlined />\r                </p>\r                <p className=\"ant-upload-text\">\r                  Logo yüklemek için tıklayın veya sürükleyin\r                </p>\r                <p className=\"ant-upload-hint\">\r                  PNG, JPG veya SVG formatında, maksimum 2MB\r                </p>\r              </Dragger>\r              <Form.Item>\r                <Button\r                  type=\"primary\"\r                  htmlType=\"submit\"\r                  loading={saving}\r                  icon={<SaveOutlined />}\r                 aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r              </Form.Item>\r            </Form>\r          </TabPane>\r          {/* Genel Ayarlar */}\r          <TabPane\r            tab={\r              <span>\r                <SettingOutlined />\r                Genel Ayarlar\r              </span>\r            }\r            key=\"general\"\r          >\r            <Form\r              form={generalForm}\r              layout=\"vertical\"\r              onFinish={handleSaveGeneralSettings}\r            >\r              <Title level={4}>Genel Ayarlar</Title>\r              <Paragraph type=\"secondary\">\r                Dil, para birimi ve tarih formatı gibi genel sistem ayarlarını yapılandırın.\r              </Paragraph>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item name=\"language\" label=\"Dil\">\r                    <Select aria-label=\"select field\">\r                      <Option value=\"tr\">Türkçe</Option>\r                      <Option value=\"en\">English</Option>\r                    </Select>\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item name=\"timezone\" label=\"Saat Dilimi\">\r                    <Select showSearch aria-label=\"select field\">\r                      <Option value=\"Europe/Istanbul\">İstanbul (UTC+3)</Option>\r                      <Option value=\"Europe/London\">Londra (UTC+0)</Option>\r                      <Option value=\"America/New_York\">New York (UTC-5)</Option>\r                    </Select>\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item name=\"currency\" label=\"Para Birimi\">\r                    <Select aria-label=\"select field\">\r                      <Option value=\"TRY\">TRY - Türk Lirası (₺)</Option>\r                      <Option value=\"USD\">USD - Amerikan Doları ($)</Option>\r                      <Option value=\"EUR\">EUR - Euro (€)</Option>\r                    </Select>\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item name=\"fiscalYearStart\" label=\"Mali Yıl Başlangıcı\">\r                    <Select aria-label=\"select field\">\r                      <Option value=\"01-01\">1 Ocak</Option>\r                      <Option value=\"04-01\">1 Nisan</Option>\r                      <Option value=\"07-01\">1 Temmuz</Option>\r                      <Option value=\"10-01\">1 Ekim</Option>\r                    </Select>\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item name=\"dateFormat\" label=\"Tarih Formatı\">\r                    <Select aria-label=\"select field\">\r                      <Option value=\"DD.MM.YYYY\">DD.MM.YYYY (31.12.2024)</Option>\r                      <Option value=\"MM/DD/YYYY\">MM/DD/YYYY (12/31/2024)</Option>\r                      <Option value=\"YYYY-MM-DD\">YYYY-MM-DD (2024-12-31)</Option>\r                    </Select>\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item name=\"timeFormat\" label=\"Saat Formatı\">\r                    <Radio.Group>\r                      <Radio value=\"24h\">24 Saat (14:30)</Radio>\r                      <Radio value=\"12h\">12 Saat (2:30 PM)</Radio>\r                    </Radio.Group>\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item name=\"weekStartsOn\" label=\"Hafta Başlangıcı\">\r                <Radio.Group>\r                  <Radio value=\"monday\">Pazartesi</Radio>\r                  <Radio value=\"sunday\">Pazar</Radio>\r                </Radio.Group>\r              </Form.Item>\r              <Form.Item>\r                <Button\r                  type=\"primary\"\r                  htmlType=\"submit\"\r                  loading={saving}\r                  icon={<SaveOutlined />}\r                 aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r              </Form.Item>\r            </Form>\r          </TabPane>\r          {/* Bildirim Ayarları */}\r          <TabPane\r            tab={\r              <span>\r                <BellOutlined />\r                Bildirimler\r              </span>\r            }\r            key=\"notifications\"\r          >\r            <Form\r              form={notificationForm}\r              layout=\"vertical\"\r              onFinish={handleSaveNotificationSettings}\r            >\r              <Title level={4}>Bildirim Ayarları</Title>\r              <Paragraph type=\"secondary\">\r                Hangi bildirimleri almak istediğinizi seçin.\r              </Paragraph>\r              <Title level={5}>Bildirim Kanalları</Title>\r              <Row gutter={24} style={{ marginBottom: 24 }}>\r                <Col span={8}>\r                  <Form.Item name=\"emailNotifications\" valuePropName=\"checked\">\r                    <Switch /> E-posta Bildirimleri\r                  </Form.Item>\r                </Col>\r                <Col span={8}>\r                  <Form.Item name=\"smsNotifications\" valuePropName=\"checked\">\r                    <Switch /> SMS Bildirimleri\r                  </Form.Item>\r                </Col>\r                <Col span={8}>\r                  <Form.Item name=\"pushNotifications\" valuePropName=\"checked\">\r                    <Switch /> Push Bildirimleri\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Divider />\r              <Title level={5}>Bildirim Türleri</Title>\r              <Row gutter={[24, 16]}>\r                <Col span={12}>\r                  <Form.Item name=\"invoiceReminders\" valuePropName=\"checked\">\r                    <Switch /> Fatura Hatırlatmaları\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item name=\"paymentReminders\" valuePropName=\"checked\">\r                    <Switch /> Ödeme Hatırlatmaları\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item name=\"systemUpdates\" valuePropName=\"checked\">\r                    <Switch /> Sistem Güncellemeleri\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item name=\"marketingEmails\" valuePropName=\"checked\">\r                    <Switch /> Pazarlama E-postaları\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Divider />\r              <Form.Item\r                name=\"reminderDays\"\r                label=\"Hatırlatma Süresi (Vade tarihinden kaç gün önce)\"\r              >\r                <InputNumber min={1} max={30} style={{ width: 200 }} / aria-label=\"input field\">\r              </Form.Item>\r              <Form.Item>\r                <Button\r                  type=\"primary\"\r                  htmlType=\"submit\"\r                  loading={saving}\r                  icon={<SaveOutlined />}\r                 aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r              </Form.Item>\r            </Form>\r          </TabPane>\r          {/* Fatura Ayarları */}\r          <TabPane\r            tab={\r              <span>\r                <FileTextOutlined />\r                Fatura\r              </span>\r            }\r            key=\"invoice\"\r          >\r            <Form\r              form={invoiceForm}\r              layout=\"vertical\"\r              onFinish={handleSaveInvoiceSettings}\r            >\r              <Title level={4}>Fatura Ayarları</Title>\r              <Paragraph type=\"secondary\">\r                Fatura numaralandırma ve varsayılan değerleri ayarlayın.\r              </Paragraph>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"invoicePrefix\"\r                    label=\"Fatura Ön Eki\"\r                    rules={[formRules.required()]}\r                  >\r                    <Input placeholder=\"INV\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"invoiceStartNumber\"\r                    label=\"Başlangıç Numarası\"\r                    rules={[formRules.required()]}\r                  >\r                    <InputNumber min={1} style={{ width: '100%' }} / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item\r                name=\"invoiceNumberFormat\"\r                label=\"Numara Formatı\"\r                extra=\"Kullanılabilir: {prefix}, {year}, {month}, {number}\"\r              >\r                <Input placeholder=\"{prefix}-{year}-{number}\" / aria-label=\"input field\">\r              </Form.Item>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"dueDays\"\r                    label=\"Varsayılan Vade (Gün)\"\r                    rules={[formRules.required()]}\r                  >\r                    <InputNumber min={0} max={365} style={{ width: '100%' }} / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"defaultTaxRate\"\r                    label=\"Varsayılan KDV Oranı (%)\"\r                    rules={[formRules.required()]}\r                  >\r                    <Select aria-label=\"select field\">\r                      <Option value={0}>%0</Option>\r                      <Option value={1}>%1</Option>\r                      <Option value={8}>%8</Option>\r                      <Option value={18}>%18</Option>\r                    </Select>\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item name=\"defaultPaymentMethod\" label=\"Varsayılan Ödeme Yöntemi\">\r                <Select aria-label=\"select field\">\r                  <Option value=\"BankTransfer\">Banka Havalesi</Option>\r                  <Option value=\"CreditCard\">Kredi Kartı</Option>\r                  <Option value=\"Cash\">Nakit</Option>\r                  <Option value=\"Check\">Çek</Option>\r                </Select>\r              </Form.Item>\r              <Divider />\r              <Title level={5}>Görünüm Ayarları</Title>\r              <Row gutter={[24, 16]}>\r                <Col span={12}>\r                  <Form.Item name=\"showLogo\" valuePropName=\"checked\">\r                    <Switch /> Logo Göster\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item name=\"showQRCode\" valuePropName=\"checked\">\r                    <Switch /> QR Kod Göster\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item name=\"footerText\" label=\"Fatura Alt Metni\">\r                <TextArea\r                  rows={2}\r                  placeholder=\"Faturanın altında görünecek metin\"\r                />\r              </Form.Item>\r              <Form.Item>\r                <Button\r                  type=\"primary\"\r                  htmlType=\"submit\"\r                  loading={saving}\r                  icon={<SaveOutlined />}\r                 aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r              </Form.Item>\r            </Form>\r          </TabPane>\r          {/* Güvenlik Ayarları */}\r          <TabPane\r            tab={\r              <span>\r                <SafetyOutlined />\r                Güvenlik\r              </span>\r            }\r            key=\"security\"\r          >\r            <Form\r              form={securityForm}\r              layout=\"vertical\"\r              onFinish={handleSaveSecuritySettings}\r            >\r              <Title level={4}>Güvenlik Ayarları</Title>\r              <Paragraph type=\"secondary\">\r                Hesap güvenliği ve erişim kontrolü ayarlarını yapılandırın.\r              </Paragraph>\r              <Alert\r                message=\"Güvenlik Uyarısı\"\r                description=\"Bu ayarlar tüm kullanıcıları etkileyecektir. Dikkatli bir şekilde yapılandırın.\"\r                type=\"warning\"\r                showIcon\r                style={{ marginBottom: 24 }}\r              />\r              <Title level={5}>Kimlik Doğrulama</Title>\r              <Form.Item name=\"twoFactorAuth\" valuePropName=\"checked\">\r                <Switch /> İki Faktörlü Kimlik Doğrulama\r              </Form.Item>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"sessionTimeout\"\r                    label=\"Oturum Zaman Aşımı (Dakika)\"\r                  >\r                    <InputNumber min={5} max={480} style={{ width: '100%' }} / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"passwordExpiry\"\r                    label=\"Şifre Geçerlilik Süresi (Gün)\"\r                  >\r                    <InputNumber min={0} max={365} style={{ width: '100%' }} / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item name=\"passwordComplexity\" label=\"Şifre Karmaşıklığı\">\r                <Radio.Group>\r                  <Radio value=\"low\">Düşük (En az 6 karakter)</Radio>\r                  <Radio value=\"medium\">Orta (8 karakter, büyük/küçük harf)</Radio>\r                  <Radio value=\"high\">Yüksek (8 karakter, özel karakter)</Radio>\r                </Radio.Group>\r              </Form.Item>\r              <Divider />\r              <Title level={5}>Erişim Kontrolü</Title>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"loginAttempts\"\r                    label=\"Maksimum Giriş Denemesi\"\r                  >\r                    <InputNumber min={3} max={10} style={{ width: '100%' }} / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"lockoutDuration\"\r                    label=\"Hesap Kilitleme Süresi (Dakika)\"\r                  >\r                    <InputNumber min={5} max={1440} style={{ width: '100%' }} / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item\r                name=\"ipWhitelist\"\r                label=\"IP Beyaz Listesi\"\r                extra=\"Her satıra bir IP adresi girin. Boş bırakılırsa tüm IP'ler kabul edilir.\"\r              >\r                <TextArea\r                  rows={4}\r                  placeholder=\"192.168.1.1&#10;10.0.0.0/24\"\r                />\r              </Form.Item>\r              <Form.Item>\r                <Space>\r                  <Button\r                    type=\"primary\"\r                    htmlType=\"submit\"\r                    loading={saving}\r                    icon={<SaveOutlined />}\r                   aria-label=\"save outlined\">\r                    Kaydet\r                  </Button>\r                  <Button icon={<KeyOutlined />} aria-label=\"key outlined\">\r                    Tüm Oturumları Sonlandır\r                  </Button>\r                </Space>\r              </Form.Item>\r            </Form>\r          </TabPane>\r          {/* E-posta Ayarları */}\r          <TabPane\r            tab={\r              <span>\r                <MailOutlined />\r                E-posta\r              </span>\r            }\r            key=\"email\"\r          >\r            <Form\r              form={emailForm}\r              layout=\"vertical\"\r              onFinish={(values) => {\r                message.success('E-posta ayarları güncellendi');\r              }}\r            >\r              <Title level={4}>E-posta Ayarları</Title>\r              <Paragraph type=\"secondary\">\r                Sistem e-postalarının gönderimi için SMTP ayarlarını yapılandırın.\r              </Paragraph>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"smtpHost\"\r                    label=\"SMTP Sunucu\"\r                    rules={[formRules.required()]}\r                  >\r                    <Input placeholder=\"smtp.gmail.com\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"smtpPort\"\r                    label=\"Port\"\r                    rules={[formRules.required()]}\r                  >\r                    <Select aria-label=\"select field\">\r                      <Option value={25}>25 (Varsayılan)</Option>\r                      <Option value={465}>465 (SSL)</Option>\r                      <Option value={587}>587 (TLS)</Option>\r                      <Option value={2525}>2525 (Alternatif)</Option>\r                    </Select>\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"smtpUser\"\r                    label=\"Kullanıcı Adı\"\r                    rules={[formRules.required()]}\r                  >\r                    <Input placeholder=\"email@domain.com\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"smtpPassword\"\r                    label=\"Şifre\"\r                    rules={[formRules.required()]}\r                  >\r                    <Input.Password placeholder=\"SMTP şifresi\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item name=\"smtpSecure\" valuePropName=\"checked\">\r                <Switch /> SSL/TLS Kullan\r              </Form.Item>\r              <Divider />\r              <Title level={5}>Gönderen Bilgileri</Title>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"fromEmail\"\r                    label=\"Gönderen E-posta\"\r                    rules={[formRules.required(), formRules.email()]}\r                  >\r                    <Input placeholder=\"noreply@domain.com\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"fromName\"\r                    label=\"Gönderen Adı\"\r                    rules={[formRules.required()]}\r                  >\r                    <Input placeholder=\"Stocker Sistem\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item>\r                <Space>\r                  <Button\r                    type=\"primary\"\r                    htmlType=\"submit\"\r                    loading={saving}\r                    icon={<SaveOutlined />}\r                   aria-label=\"save outlined\">\r                    Kaydet\r                  </Button>\r                  <Button onClick={handleTestEmailSettings} icon={<MailOutlined />} aria-label=\"mail outlined\">\r                    Test E-postası Gönder\r                  </Button>\r                </Space>\r              </Form.Item>\r            </Form>\r          </TabPane>\r          {/* API Ayarları */}\r          <TabPane\r            tab={\r              <span>\r                <ApiOutlined />\r                API\r              </span>\r            }\r            key=\"api\"\r          >\r            <Title level={4}>API Ayarları</Title>\r            <Paragraph type=\"secondary\">\r              API anahtarlarını ve webhook ayarlarını yönetin.\r            </Paragraph>\r            <Alert\r              message=\"API Anahtarı\"\r              description=\"API anahtarınız sistem tarafından otomatik oluşturulur ve güvenli bir şekilde saklanır.\"\r              type=\"info\"\r              showIcon\r              style={{ marginBottom: 24 }}\r            />\r            <Card title=\"API Anahtarları\" style={{ marginBottom: 24 }}>\r              <List\r                dataSource={[\r                  {\r                    id: '1',\r                    name: 'Production API Key',\r                    key: 'sk_live_***************',\r                    created: '2024-01-01',\r                    lastUsed: '2024-01-15',\r                  },\r                  {\r                    id: '2',\r                    name: 'Test API Key',\r                    key: 'sk_test_***************',\r                    created: '2024-01-01',\r                    lastUsed: '2024-01-14',\r                  },\r                ]}\r                renderItem={(item) => (\r                  <List.Item\r                    actions={[\r                      <Button type=\"link\" danger size=\"small\">\r                        İptal Et\r                      </Button>,\r                    ]}\r                  >\r                    <List.Item.Meta\r                      title={item.name}\r                      description={\r                        <Space>\r                          <Text code>{item.key}</Text>\r                          <Text type=\"secondary\">\r                            Son kullanım: {item.lastUsed}\r                          </Text>\r                        </Space>\r                      }\r                    />\r                  </List.Item>\r                )}\r              />\r              <Button type=\"dashed\" icon={<PlusOutlined />} block aria-label=\"plus outlined\">\r                Yeni API Anahtarı Oluştur\r              </Button>\r            </Card>\r            <Card title=\"Webhook Ayarları\">\r              <Form layout=\"vertical\">\r                <Form.Item\r                  label=\"Webhook URL\"\r                  extra=\"Sistem olayları bu adrese POST isteği olarak gönderilir\"\r                >\r                  <Input placeholder=\"https://your-domain.com/webhook\" / aria-label=\"input field\">\r                </Form.Item>\r                <Form.Item label=\"Webhook Olayları\">\r                  <Checkbox.Group>\r                    <Row>\r                      <Col span={12}>\r                        <Checkbox value=\"invoice.created\">Fatura Oluşturuldu</Checkbox>\r                      </Col>\r                      <Col span={12}>\r                        <Checkbox value=\"invoice.paid\">Fatura Ödendi</Checkbox>\r                      </Col>\r                      <Col span={12}>\r                        <Checkbox value=\"user.created\">Kullanıcı Oluşturuldu</Checkbox>\r                      </Col>\r                      <Col span={12}>\r                        <Checkbox value=\"user.deleted\">Kullanıcı Silindi</Checkbox>\r                      </Col>\r                    </Row>\r                  </Checkbox.Group>\r                </Form.Item>\r                <Form.Item>\r                  <Button type=\"primary\" icon={<SaveOutlined />} aria-label=\"save outlined\">\r                    Webhook Ayarlarını Kaydet\r                  </Button>\r                </Form.Item>\r              </Form>\r            </Card>\r          </TabPane>\r        </Tabs>\r      </Card>\r    </div>\r  );\r};\rexport default TenantSettings;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/settings/pages/TenantSettings/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect, useRef } from 'react';\rimport {\r  Badge,\r  Button,\r  Input,\r  Avatar,\r  Space,\r  Typography,\r  Tooltip,\r  Card,\r  List,\r  Upload,\r  message as antMessage,\r  Popover,\r  Rate,\r  Tag\r} from 'antd';\rimport {\r  MessageOutlined,\r  SendOutlined,\r  CloseOutlined,\r  SmileOutlined,\r  PaperClipOutlined,\r  CustomerServiceOutlined,\r  MinusOutlined,\r  SoundOutlined,\r  VideoCameraOutlined,\r  PhoneOutlined,\r  MoreOutlined,\r  CheckCircleOutlined,\r  ClockCircleOutlined\r} from '@ant-design/icons';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport EmojiPicker, { EmojiClickData } from 'emoji-picker-react';\rimport './style.css';\rconst { Text, Title } = Typography;\rconst { TextArea } = Input;\rinterface Message {\r  id: string;\r  type: 'user' | 'agent' | 'system';\r  content: string;\r  timestamp: Date;\r  status?: 'sending' | 'sent' | 'delivered' | 'read';\r  attachments?: string[];\r  agentInfo?: {\r    name: string;\r    avatar?: string;\r    title?: string;\r  };\r}\rinterface LiveChatProps {\r  position?: 'bottom-right' | 'bottom-left';\r  primaryColor?: string;\r  onClose?: () => void;\r  userId?: string;\r  metadata?: Record<string, any>;\r}\rexport const LiveChat: React.FC<LiveChatProps> = ({\r  position = 'bottom-right',\r  primaryColor = '#667eea',\r  onClose,\r  userId,\r  metadata\r}) => {\r  const [isOpen, setIsOpen] = useState(false);\r  const [isMinimized, setIsMinimized] = useState(false);\r  const [messages, setMessages] = useState<Message[]>([]);\r  const [inputMessage, setInputMessage] = useState('');\r  const [isTyping, setIsTyping] = useState(false);\r  const [showEmoji, setShowEmoji] = useState(false);\r  const [isConnected, setIsConnected] = useState(false);\r  const [isConnecting, setIsConnecting] = useState(false);\r  const [unreadCount, setUnreadCount] = useState(0);\r  const [agentTyping, setAgentTyping] = useState(false);\r  const [satisfaction, setSatisfaction] = useState<number | null>(null);\r  const messagesEndRef = useRef<HTMLDivElement>(null);\r  const inputRef = useRef<HTMLTextAreaElement>(null);\r  const fileInputRef = useRef<HTMLInputElement>(null);\r  // Auto scroll to bottom\r  const scrollToBottom = () => {\r    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r  };\r  useEffect(() => {\r    scrollToBottom();\r  }, [messages]);\r  // Initialize chat\r  useEffect(() => {\r    if (isOpen && !isConnected && !isConnecting) {\r      connectToAgent();\r    }\r  }, [isOpen]);\r  // Simulate connection to agent\r  const connectToAgent = async () => {\r    setIsConnecting(true);\r    // Add system message\r    addMessage({\r      type: 'system',\r      content: 'Destek ekibine bağlanıyorsunuz...'\r    });\r    // Simulate connection delay\r    setTimeout(() => {\r      setIsConnected(true);\r      setIsConnecting(false);\r      // Add agent joined message\r      addMessage({\r        type: 'agent',\r        content: 'Merhaba! Ben Ayşe, müşteri temsilcinizim. Size nasıl yardımcı olabilirim?',\r        agentInfo: {\r          name: 'Ayşe Y.',\r          title: 'Müşteri Temsilcisi',\r          avatar: 'https://i.pravatar.cc/150?img=1'\r        }\r      });\r    }, 2000);\r  };\r  const addMessage = (messageData: Partial<Message>) => {\r    const newMessage: Message = {\r      id: Date.now().toString(),\r      timestamp: new Date(),\r      status: 'sent',\r      ...messageData\r    } as Message;\r    setMessages(prev => [...prev, newMessage]);\r    // Update unread count if chat is minimized\r    if (isMinimized && messageData.type === 'agent') {\r      setUnreadCount(prev => prev + 1);\r    }\r  };\r  const handleSendMessage = () => {\r    if (!inputMessage.trim()) return;\r    // Add user message\r    addMessage({\r      type: 'user',\r      content: inputMessage,\r      status: 'sending'\r    });\r    setInputMessage('');\r    // Simulate agent typing\r    setTimeout(() => {\r      setAgentTyping(true);\r    }, 1000);\r    // Simulate agent response\r    setTimeout(() => {\r      setAgentTyping(false);\r      addMessage({\r        type: 'agent',\r        content: getAutoResponse(inputMessage),\r        agentInfo: {\r          name: 'Ayşe Y.',\r          title: 'Müşteri Temsilcisi',\r          avatar: 'https://i.pravatar.cc/150?img=1'\r        }\r      });\r    }, 3000);\r  };\r  const getAutoResponse = (message: string): string => {\r    const lowerMessage = message.toLowerCase();\r    if (lowerMessage.includes('fiyat') || lowerMessage.includes('ücret')) {\r      return 'Fiyatlandırma hakkında detaylı bilgi için https://stocker.app/pricing sayfamızı ziyaret edebilirsiniz. Özel teklifler için satış ekibimizle iletişime geçebilirsiniz.';\r    }\r    if (lowerMessage.includes('demo')) {\r      return 'Demo talebi için https://stocker.app/demo linkinden form doldurabilirsiniz. Satış ekibimiz en kısa sürede sizinle iletişime geçecektir.';\r    }\r    if (lowerMessage.includes('destek') || lowerMessage.includes('yardım')) {\r      return 'Size yardımcı olmaktan mutluluk duyarım! Lütfen yaşadığınız sorunu detaylı bir şekilde açıklayın.';\r    }\r    return 'Mesajınız için teşekkürler. Size en iyi şekilde yardımcı olabilmem için biraz daha detay verebilir misiniz?';\r  };\r  const handleEmojiClick = (emojiData: EmojiClickData) => {\r    setInputMessage(prev => prev + emojiData.emoji);\r    setShowEmoji(false);\r    inputRef.current?.focus();\r  };\r  const handleFileUpload = (file: File) => {\r    // Simulate file upload\r    antMessage.success(`${file.name} yüklendi`);\r    addMessage({\r      type: 'user',\r      content: `Dosya gönderildi: ${file.name}`,\r      attachments: [file.name]\r    });\r    return false; // Prevent default upload\r  };\r  const toggleChat = () => {\r    setIsOpen(!isOpen);\r    if (!isOpen) {\r      setIsMinimized(false);\r      setUnreadCount(0);\r    }\r  };\r  const handleMinimize = () => {\r    setIsMinimized(!isMinimized);\r    if (!isMinimized) {\r      setUnreadCount(0);\r    }\r  };\r  const handleClose = () => {\r    setIsOpen(false);\r    if (onClose) {\r      onClose();\r    }\r  };\r  const renderMessage = (message: Message) => {\r    const isUser = message.type === 'user';\r    const isSystem = message.type === 'system';\r    if (isSystem) {\r      return (\r        <div key={message.id} className=\"chat-message-system\">\r          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r            {message.content}\r          </Text>\r        </div>\r      );\r    }\r    return (\r      <motion.div\r        key={message.id}\r        className={`chat-message ${isUser ? 'chat-message-user' : 'chat-message-agent'}`}\r        initial={{ opacity: 0, y: 10 }}\r        animate={{ opacity: 1, y: 0 }}\r        transition={{ duration: 0.3 }}\r      >\r        {!isUser && message.agentInfo && (\r          <Avatar\r            src={message.agentInfo.avatar}\r            style={{ marginRight: 8 }}\r          >\r            {message.agentInfo.name[0]}\r          </Avatar>\r        )}\r        <div className=\"chat-message-content\">\r          {!isUser && message.agentInfo && (\r            <div className=\"chat-message-header\">\r              <Text strong>{message.agentInfo.name}</Text>\r              <Text type=\"secondary\" style={{ fontSize: 11, marginLeft: 8 }}>\r                {message.agentInfo.title}\r              </Text>\r            </div>\r          )}\r          <div className={`chat-message-bubble ${isUser ? 'user-bubble' : 'agent-bubble'}`}>\r            <Text>{message.content}</Text>\r            {message.attachments && (\r              <div className=\"chat-message-attachments\">\r                {message.attachments.map((file, index) => (\r                  <Tag key={index} icon={<PaperClipOutlined />}>\r                    {file}\r                  </Tag>\r                ))}\r              </div>\r            )}\r          </div>\r          <div className=\"chat-message-meta\">\r            <Text type=\"secondary\" style={{ fontSize: 11 }}>\r              {new Date(message.timestamp).toLocaleTimeString('tr-TR', {\r                hour: '2-digit',\r                minute: '2-digit'\r              })}\r            </Text>\r            {isUser && message.status && (\r              <span className=\"chat-message-status\">\r                {message.status === 'sending' && <ClockCircleOutlined />}\r                {message.status === 'sent' && <CheckCircleOutlined />}\r                {message.status === 'delivered' && (\r                  <span style={{ color: primaryColor }}>\r                    <CheckCircleOutlined />\r                    <CheckCircleOutlined style={{ marginLeft: -8 }} />\r                  </span>\r                )}\r                {message.status === 'read' && (\r                  <span style={{ color: primaryColor }}>\r                    <CheckCircleOutlined />\r                    <CheckCircleOutlined style={{ marginLeft: -8 }} />\r                  </span>\r                )}\r              </span>\r            )}\r          </div>\r        </div>\r      </motion.div>\r    );\r  };\r  return (\r    <>\r      {/* Chat Button */}\r      <AnimatePresence>\r        {!isOpen && (\r          <motion.div\r            className={`live-chat-button live-chat-${position}`}\r            initial={{ scale: 0 }}\r            animate={{ scale: 1 }}\r            exit={{ scale: 0 }}\r            whileHover={{ scale: 1.1 }}\r            whileTap={{ scale: 0.9 }}\r            onClick={toggleChat}\r            style={{ background: primaryColor }}\r          >\r            <Badge count={unreadCount} offset={[-5, 5]}>\r              <MessageOutlined style={{ fontSize: 24, color: 'white' }} />\r            </Badge>\r          </motion.div>\r        )}\r      </AnimatePresence>\r      {/* Chat Window */}\r      <AnimatePresence>\r        {isOpen && (\r          <motion.div\r            className={`live-chat-window live-chat-${position} ${isMinimized ? 'minimized' : ''}`}\r            initial={{ opacity: 0, y: 20, scale: 0.9 }}\r            animate={{ opacity: 1, y: 0, scale: 1 }}\r            exit={{ opacity: 0, y: 20, scale: 0.9 }}\r            transition={{ duration: 0.3 }}\r          >\r            {/* Header */}\r            <div \r              className=\"chat-header\"\r              style={{ background: `linear-gradient(135deg, ${primaryColor} 0%, ${primaryColor}dd 100%)` }}\r            >\r              <div className=\"chat-header-info\">\r                <Space>\r                  <Badge status={isConnected ? 'success' : 'processing'} />\r                  <div>\r                    <Text strong style={{ color: 'white', display: 'block' }}>\r                      Canlı Destek\r                    </Text>\r                    <Text style={{ color: 'rgba(255, 255, 255, 0.8)', fontSize: 11 }}>\r                      {isConnected ? 'Çevrimiçi' : 'Bağlanıyor...'}\r                    </Text>\r                  </div>\r                </Space>\r              </div>\r              <Space>\r                <Tooltip title=\"Küçült\">\r                  <Button\r                    type=\"text\"\r                    icon={<MinusOutlined />}\r                    onClick={handleMinimize}\r                    style={{ color: 'white' }}\r                  / aria-label=\"minus outlined\">\r                </Tooltip>\r                <Tooltip title=\"Kapat\">\r                  <Button\r                    type=\"text\"\r                    icon={<CloseOutlined />}\r                    onClick={handleClose}\r                    style={{ color: 'white' }}\r                  / aria-label=\"close outlined\">\r                </Tooltip>\r              </Space>\r            </div>\r            {/* Messages */}\r            {!isMinimized && (\r              <>\r                <div className=\"chat-messages\">\r                  {messages.map(renderMessage)}\r                  {agentTyping && (\r                    <div className=\"chat-typing\">\r                      <Avatar size=\"small\" src=\"https://i.pravatar.cc/150?img=1\">\r                        A\r                      </Avatar>\r                      <div className=\"typing-indicator\">\r                        <span></span>\r                        <span></span>\r                        <span></span>\r                      </div>\r                    </div>\r                  )}\r                  <div ref={messagesEndRef} />\r                </div>\r                {/* Input */}\r                <div className=\"chat-input\">\r                  {showEmoji && (\r                    <div className=\"emoji-picker-wrapper\">\r                      <EmojiPicker onEmojiClick={handleEmojiClick} />\r                    </div>\r                  )}\r                  <div className=\"chat-input-actions\">\r                    <Space>\r                      <Tooltip title=\"Emoji\">\r                        <Button\r                          type=\"text\"\r                          icon={<SmileOutlined />}\r                          onClick={() = aria-label=\"smile outlined\"> setShowEmoji(!showEmoji)}\r                        />\r                      </Tooltip>\r                      <Upload\r                        beforeUpload={handleFileUpload}\r                        showUploadList={false}\r                      >\r                        <Tooltip title=\"Dosya Ekle\">\r                          <Button\r                            type=\"text\"\r                            icon={<PaperClipOutlined />}\r                          / aria-label=\"paper clip outlined\">\r                        </Tooltip>\r                      </Upload>\r                    </Space>\r                  </div>\r                  <TextArea\r                    ref={inputRef}\r                    value={inputMessage}\r                    onChange={(e) => setInputMessage(e.target.value)}\r                    onPressEnter={(e) => {\r                      if (!e.shiftKey) {\r                        e.preventDefault();\r                        handleSendMessage();\r                      }\r                    }}\r                    placeholder=\"Mesajınızı yazın...\"\r                    autoSize={{ minRows: 1, maxRows: 4 }}\r                    disabled={!isConnected}\r                  />\r                  <Button\r                    type=\"primary\"\r                    icon={<SendOutlined />}\r                    onClick={handleSendMessage}\r                    disabled={!inputMessage.trim() || !isConnected}\r                    style={{ background: primaryColor }}\r                  / aria-label=\"send outlined\">\r                </div>\r              </>\r            )}\r          </motion.div>\r        )}\r      </AnimatePresence>\r    </>\r  );\r};\r// Quick Actions Floating Button\rexport const QuickActions: React.FC = () => {\r  const [visible, setVisible] = useState(false);\r  const actions = [\r    { icon: <MessageOutlined />, label: 'Canlı Destek', onClick: () => {} },\r    { icon: <PhoneOutlined />, label: 'Bizi Arayın', onClick: () => {} },\r    { icon: <MailOutlined />, label: 'E-posta Gönder', onClick: () => {} },\r    { icon: <VideoCameraOutlined />, label: 'Video Görüşme', onClick: () => {} }\r  ];\r  return (\r    <Popover\r      content={\r        <List\r          dataSource={actions}\r          renderItem={(item) => (\r            <List.Item onClick={item.onClick} style={{ cursor: 'pointer' }}>\r              <Space>\r                {item.icon}\r                <Text>{item.label}</Text>\r              </Space>\r            </List.Item>\r          )}\r        />\r      }\r      trigger=\"click\"\r      open={visible}\r      onOpenChange={setVisible}\r      placement=\"topRight\"\r    >\r      <motion.div\r        className=\"quick-actions-button\"\r        whileHover={{ scale: 1.1 }}\r        whileTap={{ scale: 0.9 }}\r      >\r        <CustomerServiceOutlined style={{ fontSize: 24 }} />\r      </motion.div>\r    </Popover>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/support/components/LiveChat/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Row,\r  Col,\r  Statistic,\r  Space,\r  Typography,\r  Button,\r  Progress,\r  Tag,\r  Alert,\r  Divider,\r  Timeline,\r  List,\r  Avatar,\r  Badge,\r  Tooltip,\r  Spin,\r  message\r} from 'antd';\rimport {\r  UserOutlined,\r  TeamOutlined,\r  ShopOutlined,\r  AppstoreOutlined,\r  DatabaseOutlined,\r  CloudServerOutlined,\r  BarChartOutlined,\r  RiseOutlined,\r  FallOutlined,\r  CheckCircleOutlined,\r  ClockCircleOutlined,\r  WarningOutlined,\r  InfoCircleOutlined,\r  RocketOutlined,\r  SettingOutlined,\r  BellOutlined,\r  DollarOutlined,\r  CalendarOutlined,\r  FileTextOutlined,\r  ApiOutlined,\r  SafetyOutlined,\r  SyncOutlined\r} from '@ant-design/icons';\rimport { useParams, useNavigate } from 'react-router-dom';\rimport { apiClient } from '@/shared/api/client';\rimport SetupWizard from '@/features/tenant/setup/components/SetupWizard';\rimport SetupChecklist from '@/features/tenant/setup/components/SetupChecklist';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rinterface DashboardMetrics {\r  users: {\r    total: number;\r    active: number;\r    inactive: number;\r    growth: number;\r  };\r  storage: {\r    used: number;\r    total: number;\r    percentage: number;\r  };\r  billing: {\r    currentPlan: string;\r    monthlyRevenue: number;\r    nextBillingDate: string;\r    paymentStatus: string;\r  };\r  activity: {\r    dailyActiveUsers: number;\r    weeklyActiveUsers: number;\r    monthlyActiveUsers: number;\r    lastActivity: string;\r  };\r  modules: {\r    total: number;\r    active: number;\r    names: string[];\r  };\r  health: {\r    status: 'healthy' | 'warning' | 'critical';\r    uptime: number;\r    lastIncident: string | null;\r    apiLatency: number;\r  };\r}\rinterface RecentActivity {\r  id: string;\r  type: 'user' | 'system' | 'billing' | 'security';\r  title: string;\r  description: string;\r  timestamp: string;\r  icon: React.ReactNode;\r  color: string;\r}\rconst TenantDashboard: React.FC = () => {\r  const { tenantId } = useParams<{ tenantId: string }>();\r  const navigate = useNavigate();\r  const [loading, setLoading] = useState(true);\r  const [refreshing, setRefreshing] = useState(false);\r  const [metrics, setMetrics] = useState<DashboardMetrics | null>(null);\r  const [recentActivities, setRecentActivities] = useState<RecentActivity[]>([]);\r  const [setupProgress, setSetupProgress] = useState<any>(null);\r  const [showSetupWizard, setShowSetupWizard] = useState(false);\r  useEffect(() => {\r    if (tenantId) {\r      fetchDashboardData();\r    }\r  }, [tenantId]);\r  const fetchDashboardData = async () => {\r    try {\r      setLoading(true);\r      // Fetch multiple endpoints in parallel\r      const [metricsRes, setupRes, activitiesRes] = await Promise.all([\r        apiClient.get(`/api/master/tenants/${tenantId}/statistics`),\r        apiClient.get(`/api/master/tenants/${tenantId}/setup-checklist`),\r        apiClient.get(`/api/master/tenants/${tenantId}/activities?limit=5`)\r      ]);\r      if (metricsRes.data?.success) {\r        setMetrics(metricsRes.data.data);\r      }\r      if (setupRes.data?.success) {\r        setSetupProgress(setupRes.data.data);\r      }\r      if (activitiesRes.data?.success) {\r        setRecentActivities(activitiesRes.data.data);\r      }\r    } catch (error) {\r      message.error('Dashboard verileri yüklenemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleRefresh = async () => {\r    setRefreshing(true);\r    await fetchDashboardData();\r    setRefreshing(false);\r    message.success('Dashboard güncellendi');\r  };\r  const getHealthStatusColor = (status: string) => {\r    switch (status) {\r      case 'healthy': return '#52c41a';\r      case 'warning': return '#faad14';\r      case 'critical': return '#f5222d';\r      default: return '#d9d9d9';\r    }\r  };\r  const getPaymentStatusTag = (status: string) => {\r    switch (status) {\r      case 'paid': return <Tag color=\"success\">Ödendi</Tag>;\r      case 'pending': return <Tag color=\"warning\">Bekliyor</Tag>;\r      case 'overdue': return <Tag color=\"error\">Gecikmiş</Tag>;\r      default: return <Tag>{status}</Tag>;\r    }\r  };\r  const quickActions = [\r    {\r      title: 'Kullanıcı Davet Et',\r      icon: <UserOutlined />,\r      color: '#1890ff',\r      onClick: () => navigate(`/tenant/${tenantId}/users/invite`)\r    },\r    {\r      title: 'Modül Ekle',\r      icon: <AppstoreOutlined />,\r      color: '#52c41a',\r      onClick: () => navigate(`/tenant/${tenantId}/modules`)\r    },\r    {\r      title: 'Fatura Detayları',\r      icon: <DollarOutlined />,\r      color: '#faad14',\r      onClick: () => navigate(`/tenant/${tenantId}/billing`)\r    },\r    {\r      title: 'Sistem Ayarları',\r      icon: <SettingOutlined />,\r      color: '#722ed1',\r      onClick: () => navigate(`/tenant/${tenantId}/settings`)\r    }\r  ];\r  if (loading) {\r    return (\r      <div className=\"dashboard-loading\">\r        <Spin size=\"large\" tip=\"Dashboard yükleniyor...\" />\r      </div>\r    );\r  }\r  return (\r    <div className=\"tenant-dashboard-container\">\r      {/* Header Section */}\r      <div className=\"dashboard-header\">\r        <Row align=\"middle\" justify=\"space-between\">\r          <Col>\r            <Space direction=\"vertical\" size={0}>\r              <Title level={2} style={{ margin: 0 }}>\r                <BarChartOutlined /> Tenant Dashboard\r              </Title>\r              <Text type=\"secondary\">\r                Tenant ID: {tenantId}\r              </Text>\r            </Space>\r          </Col>\r          <Col>\r            <Space>\r              <Button\r                icon={<SyncOutlined spin={refreshing} / aria-label=\"sync outlined\">}\r                onClick={handleRefresh}\r                disabled={refreshing}\r              >\r                Yenile\r              </Button>\r              <Button\r                type=\"primary\"\r                icon={<RocketOutlined />}\r                onClick={() = aria-label=\"rocket outlined\"> setShowSetupWizard(true)}\r              >\r                Kurulum Sihirbazı\r              </Button>\r            </Space>\r          </Col>\r        </Row>\r      </div>\r      {/* Setup Progress Alert */}\r      {setupProgress && !setupProgress.canGoLive && (\r        <Alert\r          message=\"Kurulum Tamamlanmamış\"\r          description={`Sistemin canlıya geçmesi için ${setupProgress.requiredItems - setupProgress.requiredCompletedItems} zorunlu adım tamamlanmalı.`}\r          type=\"warning\"\r          showIcon\r          icon={<WarningOutlined />}\r          action={\r            <Button size=\"small\" type=\"primary\" onClick={() => setShowSetupWizard(true)}>\r              Kurulumu Tamamla\r            </Button>\r          }\r          style={{ marginBottom: 24 }}\r        />\r      )}\r      {/* Key Metrics */}\r      <Row gutter={[16, 16]} className=\"metrics-row\">\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"metric-card\">\r            <Statistic\r              title=\"Toplam Kullanıcı\"\r              value={metrics?.users.total || 0}\r              prefix={<TeamOutlined />}\r              suffix={\r                <span className={metrics?.users.growth >= 0 ? 'growth-positive' : 'growth-negative'}>\r                  {metrics?.users.growth >= 0 ? <RiseOutlined /> : <FallOutlined />}\r                  {Math.abs(metrics?.users.growth || 0)}%\r                </span>\r              }\r            />\r            <Progress\r              percent={(metrics?.users.active / metrics?.users.total) * 100 || 0}\r              strokeColor=\"#52c41a\"\r              showInfo={false}\r              size=\"small\"\r              style={{ marginTop: 8 }}\r            />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {metrics?.users.active} aktif kullanıcı\r            </Text>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"metric-card\">\r            <Statistic\r              title=\"Depolama Kullanımı\"\r              value={metrics?.storage.percentage || 0}\r              suffix=\"%\"\r              prefix={<DatabaseOutlined />}\r            />\r            <Progress\r              percent={metrics?.storage.percentage || 0}\r              strokeColor={metrics?.storage.percentage > 80 ? '#ff4d4f' : '#1890ff'}\r              size=\"small\"\r              style={{ marginTop: 8 }}\r            />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {metrics?.storage.used}GB / {metrics?.storage.total}GB\r            </Text>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"metric-card\">\r            <Statistic\r              title=\"Aylık Gelir\"\r              value={metrics?.billing.monthlyRevenue || 0}\r              prefix=\"₺\"\r              precision={2}\r              valueStyle={{ color: '#52c41a' }}\r            />\r            <div style={{ marginTop: 8 }}>\r              <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                Plan: {metrics?.billing.currentPlan}\r              </Text>\r              <br />\r              {getPaymentStatusTag(metrics?.billing.paymentStatus || '')}\r            </div>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"metric-card\">\r            <Statistic\r              title=\"Sistem Durumu\"\r              value={metrics?.health.uptime || 0}\r              suffix=\"%\"\r              valueStyle={{ color: getHealthStatusColor(metrics?.health.status || '') }}\r            />\r            <div style={{ marginTop: 8 }}>\r              <Badge\r                status={metrics?.health.status === 'healthy' ? 'success' : 'error'}\r                text={metrics?.health.status === 'healthy' ? 'Sağlıklı' : 'Sorunlu'}\r              />\r              <br />\r              <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                API Gecikme: {metrics?.health.apiLatency}ms\r              </Text>\r            </div>\r          </Card>\r        </Col>\r      </Row>\r      {/* Main Content Grid */}\r      <Row gutter={[16, 16]} style={{ marginTop: 24 }}>\r        {/* Setup Progress */}\r        <Col xs={24} lg={8}>\r          <Card\r            title={\r              <Space>\r                <CheckCircleOutlined />\r                <span>Kurulum Durumu</span>\r              </Space>\r            }\r            extra={\r              <Button\r                type=\"link\"\r                size=\"small\"\r                onClick={() => navigate(`/tenant/${tenantId}/setup`)}\r              >\r                Detaylar\r              </Button>\r            }\r            className=\"dashboard-card\"\r          >\r            {setupProgress && (\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div>\r                  <Text strong>Genel İlerleme</Text>\r                  <Progress\r                    percent={setupProgress.overallProgress || 0}\r                    strokeColor={{\r                      '0%': '#108ee9',\r                      '100%': '#87d068',\r                    }}\r                  />\r                </div>\r                <div>\r                  <Text strong>Zorunlu Adımlar</Text>\r                  <Progress\r                    percent={setupProgress.requiredProgress || 0}\r                    strokeColor=\"#ff4d4f\"\r                    format={percent => (\r                      <span style={{ fontSize: 12 }}>\r                        {setupProgress.requiredCompletedItems}/{setupProgress.requiredItems}\r                      </span>\r                    )}\r                  />\r                </div>\r                <Divider style={{ margin: '12px 0' }} />\r                <Space wrap>\r                  <Badge status=\"success\" text={`${setupProgress.completedItems} Tamamlandı`} />\r                  <Badge status=\"processing\" text={`${setupProgress.totalItems - setupProgress.completedItems} Bekliyor`} />\r                </Space>\r                {setupProgress.canGoLive && (\r                  <Alert\r                    message=\"Canlıya Geçmeye Hazır!\"\r                    type=\"success\"\r                    showIcon\r                    style={{ marginTop: 12 }}\r                  />\r                )}\r              </Space>\r            )}\r          </Card>\r        </Col>\r        {/* Active Modules */}\r        <Col xs={24} lg={8}>\r          <Card\r            title={\r              <Space>\r                <AppstoreOutlined />\r                <span>Aktif Modüller</span>\r              </Space>\r            }\r            extra={\r              <Button\r                type=\"link\"\r                size=\"small\"\r                onClick={() => navigate(`/tenant/${tenantId}/modules`)}\r              >\r                Yönet\r              </Button>\r            }\r            className=\"dashboard-card\"\r          >\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <div style={{ marginBottom: 16 }}>\r                <Text type=\"secondary\">Toplam Modül</Text>\r                <Title level={3} style={{ margin: '8px 0' }}>\r                  {metrics?.modules.active} / {metrics?.modules.total}\r                </Title>\r              </div>\r              <div className=\"module-tags\">\r                {metrics?.modules.names.map(module => (\r                  <Tag key={module} color=\"blue\" style={{ marginBottom: 8 }}>\r                    {module}\r                  </Tag>\r                ))}\r              </div>\r              <Button\r                type=\"dashed\"\r                block\r                icon={<AppstoreOutlined />}\r                onClick={() = aria-label=\"appstore outlined\"> navigate(`/tenant/${tenantId}/modules/add`)}\r              >\r                Yeni Modül Ekle\r              </Button>\r            </Space>\r          </Card>\r        </Col>\r        {/* Recent Activity */}\r        <Col xs={24} lg={8}>\r          <Card\r            title={\r              <Space>\r                <ClockCircleOutlined />\r                <span>Son Aktiviteler</span>\r              </Space>\r            }\r            extra={\r              <Button\r                type=\"link\"\r                size=\"small\"\r                onClick={() => navigate(`/tenant/${tenantId}/activities`)}\r              >\r                Tümü\r              </Button>\r            }\r            className=\"dashboard-card\"\r          >\r            <Timeline mode=\"left\">\r              {recentActivities.map(activity => (\r                <Timeline.Item\r                  key={activity.id}\r                  dot={activity.icon}\r                  color={activity.color}\r                >\r                  <Text strong>{activity.title}</Text>\r                  <br />\r                  <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                    {activity.description}\r                  </Text>\r                  <br />\r                  <Text type=\"secondary\" style={{ fontSize: 11 }}>\r                    {activity.timestamp}\r                  </Text>\r                </Timeline.Item>\r              ))}\r            </Timeline>\r          </Card>\r        </Col>\r      </Row>\r      {/* Quick Actions */}\r      <Card\r        title={\r          <Space>\r            <RocketOutlined />\r            <span>Hızlı İşlemler</span>\r          </Space>\r        }\r        className=\"dashboard-card\"\r        style={{ marginTop: 16 }}\r      >\r        <Row gutter={[16, 16]}>\r          {quickActions.map((action, index) => (\r            <Col xs={12} sm={6} key={index}>\r              <Button\r                type=\"default\"\r                block\r                size=\"large\"\r                icon={action.icon}\r                onClick={action.onClick}\r                style={{ height: 'auto', padding: '16px' }}\r               aria-label=\"button\">\r                <div style={{ marginTop: 8 }}>{action.title}</div>\r              </Button>\r            </Col>\r          ))}\r        </Row>\r      </Card>\r      {/* Setup Wizard Modal */}\r      {showSetupWizard && tenantId && (\r        <SetupWizard\r          tenantId={tenantId}\r          onClose={() => {\r            setShowSetupWizard(false);\r            fetchDashboardData();\r          }}\r        />\r      )}\r    </div>\r  );\r};\rexport default TenantDashboard;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/tenant/dashboard/pages/DashboardPage/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Row,\r  Col,\r  Typography,\r  Badge,\r  Switch,\r  Button,\r  Space,\r  Tag,\r  Statistic,\r  message,\r  Spin,\r  Modal,\r  Descriptions,\r  Progress,\r  Alert,\r  Tooltip\r} from 'antd';\rimport {\r  AppstoreOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  ClockCircleOutlined,\r  ExperimentOutlined,\r  WarningOutlined,\r  ReloadOutlined,\r  InfoCircleOutlined,\r  TeamOutlined,\r  DatabaseOutlined,\r  FolderOutlined\r} from '@ant-design/icons';\rimport tenantModulesService from '../../../../../services/tenant/modulesService';\rimport { ModuleDto, ModulesSummaryDto } from '../../../../../types/tenant/modules';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst ModulesPage: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [modules, setModules] = useState<ModuleDto[]>([]);\r  const [summary, setSummary] = useState<ModulesSummaryDto | null>(null);\r  const [selectedModule, setSelectedModule] = useState<ModuleDto | null>(null);\r  const [detailModalVisible, setDetailModalVisible] = useState(false);\r  const [toggleLoading, setToggleLoading] = useState<string | null>(null);\r  useEffect(() => {\r    loadModules();\r  }, []);\r  const loadModules = async () => {\r    try {\r      setLoading(true);\r      const [modulesData, summaryData] = await Promise.all([\r        tenantModulesService.getModules(),\r        tenantModulesService.getModulesSummary()\r      ]);\r      setModules(modulesData);\r      setSummary(summaryData);\r    } catch (error) {\r      message.error('Modüller yüklenirken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleToggleModule = async (module: ModuleDto) => {\r    try {\r      setToggleLoading(module.moduleCode);\r      const newStatus = !module.isEnabled;\r      await tenantModulesService.toggleModule(module.moduleCode, newStatus);\r      message.success(`${module.moduleName} ${newStatus ? 'etkinleştirildi' : 'devre dışı bırakıldı'}`);\r      loadModules();\r    } catch (error: any) {\r      message.error(error.response?.data?.message || 'İşlem başarısız oldu');\r    } finally {\r      setToggleLoading(null);\r    }\r  };\r  const showModuleDetail = (module: ModuleDto) => {\r    setSelectedModule(module);\r    setDetailModalVisible(true);\r  };\r  const getModuleIcon = (moduleCode: string) => {\r    const icons: { [key: string]: React.ReactNode } = {\r      CRM: <TeamOutlined />,\r      HR: <TeamOutlined />,\r      INVENTORY: <DatabaseOutlined />,\r      FINANCE: <FolderOutlined />,\r      SALES: <AppstoreOutlined />,\r      PURCHASE: <AppstoreOutlined />\r    };\r    return icons[moduleCode] || <AppstoreOutlined />;\r  };\r  const getModuleColor = (module: ModuleDto) => {\r    if (!module.isEnabled) return '#d9d9d9';\r    if (module.isExpired) return '#ff4d4f';\r    if (module.isTrial) return '#faad14';\r    return '#52c41a';\r  };\r  const getModuleStatus = (module: ModuleDto) => {\r    if (module.isExpired) return <Tag color=\"error\">Süresi Dolmuş</Tag>;\r    if (!module.isEnabled) return <Tag>Devre Dışı</Tag>;\r    if (module.isTrial) return <Tag color=\"warning\">Deneme</Tag>;\r    return <Tag color=\"success\">Aktif</Tag>;\r  };\r  const calculateUsagePercentage = (used?: number, limit?: number) => {\r    if (!used || !limit) return 0;\r    return Math.min((used / limit) * 100, 100);\r  };\r  if (loading) {\r    return (\r      <div className=\"modules-loading\">\r        <Spin size=\"large\" tip=\"Modüller yükleniyor...\" />\r      </div>\r    );\r  }\r  return (\r    <div className=\"modules-page\">\r      <Card className=\"modules-header\">\r        <Row gutter={[16, 16]} align=\"middle\">\r          <Col flex=\"1\">\r            <Title level={2}>\r              <AppstoreOutlined /> Modül Yönetimi\r            </Title>\r            <Text type=\"secondary\">\r              Sistemde bulunan modülleri yönetin ve durumlarını kontrol edin\r            </Text>\r          </Col>\r          <Col>\r            <Button \r              icon={<ReloadOutlined />}\r              onClick={loadModules}\r             aria-label=\"reload outlined\">\r              Yenile\r            </Button>\r          </Col>\r        </Row>\r      </Card>\r      {summary && (\r        <Row gutter={[16, 16]} className=\"modules-stats\">\r          <Col xs={24} sm={12} md={8} lg={4}>\r            <Card>\r              <Statistic\r                title=\"Toplam Modül\"\r                value={summary.totalModules}\r                prefix={<AppstoreOutlined />}\r              />\r            </Card>\r          </Col>\r          <Col xs={24} sm={12} md={8} lg={4}>\r            <Card>\r              <Statistic\r                title=\"Aktif Modül\"\r                value={summary.enabledModules}\r                prefix={<CheckCircleOutlined />}\r                valueStyle={{ color: '#52c41a' }}\r              />\r            </Card>\r          </Col>\r          <Col xs={24} sm={12} md={8} lg={4}>\r            <Card>\r              <Statistic\r                title=\"Devre Dışı\"\r                value={summary.disabledModules}\r                prefix={<CloseCircleOutlined />}\r                valueStyle={{ color: '#d9d9d9' }}\r              />\r            </Card>\r          </Col>\r          <Col xs={24} sm={12} md={8} lg={4}>\r            <Card>\r              <Statistic\r                title=\"Deneme\"\r                value={summary.trialModules}\r                prefix={<ExperimentOutlined />}\r                valueStyle={{ color: '#faad14' }}\r              />\r            </Card>\r          </Col>\r          <Col xs={24} sm={12} md={8} lg={4}>\r            <Card>\r              <Statistic\r                title=\"Süresi Dolmuş\"\r                value={summary.expiredModules}\r                prefix={<WarningOutlined />}\r                valueStyle={{ color: '#ff4d4f' }}\r              />\r            </Card>\r          </Col>\r        </Row>\r      )}\r      <Row gutter={[16, 16]} className=\"modules-grid\">\r        {modules.map(module => (\r          <Col xs={24} sm={12} md={8} lg={6} key={module.id}>\r            <Card\r              className={`module-card ${!module.isEnabled ? 'disabled' : ''} ${module.isExpired ? 'expired' : ''}`}\r              actions={[\r                <Switch\r                  checked={module.isEnabled}\r                  onChange={() => handleToggleModule(module)}\r                  loading={toggleLoading === module.moduleCode}\r                  disabled={module.isExpired}\r                />,\r                <Button\r                  type=\"link\"\r                  icon={<InfoCircleOutlined />}\r                  onClick={() = aria-label=\"info circle outlined\"> showModuleDetail(module)}\r                >\r                  Detay\r                </Button>\r              ]}\r            >\r              <Card.Meta\r                avatar={\r                  <div className=\"module-icon\" style={{ color: getModuleColor(module) }}>\r                    {getModuleIcon(module.moduleCode)}\r                  </div>\r                }\r                title={\r                  <Space>\r                    {module.moduleName}\r                    {getModuleStatus(module)}\r                  </Space>\r                }\r                description={module.description}\r              />\r              {module.userLimit && (\r                <div className=\"module-limit\">\r                  <Text type=\"secondary\">Kullanıcı Limiti:</Text>\r                  <Progress\r                    percent={calculateUsagePercentage(0, module.userLimit)}\r                    size=\"small\"\r                    format={() => `0 / ${module.userLimit}`}\r                  />\r                </div>\r              )}\r              {module.storageLimit && (\r                <div className=\"module-limit\">\r                  <Text type=\"secondary\">Depolama Limiti:</Text>\r                  <Progress\r                    percent={calculateUsagePercentage(0, module.storageLimit)}\r                    size=\"small\"\r                    format={() => `0 / ${module.storageLimit} MB`}\r                  />\r                </div>\r              )}\r              {module.expiryDate && (\r                <div className=\"module-expiry\">\r                  <ClockCircleOutlined />\r                  <Text type=\"secondary\">\r                    Son Kullanım: {new Date(module.expiryDate).toLocaleDateString('tr-TR')}\r                  </Text>\r                </div>\r              )}\r            </Card>\r          </Col>\r        ))}\r      </Row>\r      <Modal\r        title={`${selectedModule?.moduleName} Modül Detayı`}\r        visible={detailModalVisible}\r        onCancel={() => setDetailModalVisible(false)}\r        footer={[\r          <Button key=\"close\" onClick={() => setDetailModalVisible(false)}>\r            Kapat\r          </Button>\r        ]}\r        width={600}\r      >\r        {selectedModule && (\r          <Descriptions bordered column={1}>\r            <Descriptions.Item label=\"Modül Adı\">\r              {selectedModule.moduleName}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Modül Kodu\">\r              {selectedModule.moduleCode}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Açıklama\">\r              {selectedModule.description || '-'}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Durum\">\r              {getModuleStatus(selectedModule)}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Etkinleştirme Tarihi\">\r              {selectedModule.enabledDate\r                ? new Date(selectedModule.enabledDate).toLocaleString('tr-TR')\r                : '-'}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Devre Dışı Bırakma Tarihi\">\r              {selectedModule.disabledDate\r                ? new Date(selectedModule.disabledDate).toLocaleString('tr-TR')\r                : '-'}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Kullanıcı Limiti\">\r              {selectedModule.userLimit || 'Sınırsız'}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Depolama Limiti\">\r              {selectedModule.storageLimit ? `${selectedModule.storageLimit} MB` : 'Sınırsız'}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Kayıt Limiti\">\r              {selectedModule.recordLimit || 'Sınırsız'}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Son Kullanım Tarihi\">\r              {selectedModule.expiryDate\r                ? new Date(selectedModule.expiryDate).toLocaleString('tr-TR')\r                : 'Süresiz'}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Oluşturulma Tarihi\">\r              {new Date(selectedModule.createdAt).toLocaleString('tr-TR')}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Güncellenme Tarihi\">\r              {selectedModule.updatedAt\r                ? new Date(selectedModule.updatedAt).toLocaleString('tr-TR')\r                : '-'}\r            </Descriptions.Item>\r          </Descriptions>\r        )}\r      </Modal>\r    </div>\r  );\r};\rexport default ModulesPage;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/tenant/modules/pages/ModulesPage/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Tabs,\r  Form,\r  Input,\r  InputNumber,\r  Switch,\r  Button,\r  Space,\r  Typography,\r  message,\r  Spin,\r  Row,\r  Col,\r  Empty,\r  Tag,\r  Divider,\r} from 'antd';\rimport {\r  SettingOutlined,\r  SaveOutlined,\r  ReloadOutlined,\r  GlobalOutlined,\r  SecurityScanOutlined,\r  MailOutlined,\r  FileTextOutlined,\r  BankOutlined,\r} from '@ant-design/icons';\rimport tenantSettingsService from '@/services/tenant/settingsService';\rimport { SettingDto } from '@/types/tenant/settings';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { TextArea } = Input;\rinterface GroupedSettings {\r  [category: string]: SettingDto[];\r}\rconst SystemSettingsPage: React.FC = () => {\r  const [loading, setLoading] = useState(true);\r  const [saving, setSaving] = useState(false);\r  const [settings, setSettings] = useState<SettingDto[]>([]);\r  const [groupedSettings, setGroupedSettings] = useState<GroupedSettings>({});\r  const [editedValues, setEditedValues] = useState<{ [key: string]: string }>({});\r  const [form] = Form.useForm();\r  useEffect(() => {\r    loadSettings();\r  }, []);\r  const loadSettings = async () => {\r    setLoading(true);\r    try {\r      const categories = await tenantSettingsService.getSettings();\r      // Flatten settings from categories\r      const allSettings: SettingDto[] = [];\r      const grouped: GroupedSettings = {};\r      categories.forEach(category => {\r        const categorySettings = category.settings.map(setting => ({\r          ...setting,\r          category: category.category\r        }));\r        allSettings.push(...categorySettings);\r        grouped[category.category] = categorySettings;\r      });\r      setSettings(allSettings);\r      setGroupedSettings(grouped);\r      // Set initial form values\r      const formValues: { [key: string]: any } = {};\r      allSettings.forEach(setting => {\r        formValues[setting.settingKey] = convertValue(setting.settingValue, setting.dataType);\r      });\r      form.setFieldsValue(formValues);\r    } catch (error) {\r      message.error('Ayarlar yüklenirken bir hata oluştu');\r    }\r    setLoading(false);\r  };\r  const convertValue = (value: string, dataType: string) => {\r    if (dataType === 'boolean') return value === 'true';\r    if (dataType === 'number') return parseInt(value) || 0;\r    return value;\r  };\r  const handleFieldChange = (key: string, value: any, dataType: string) => {\r    let stringValue = value;\r    if (dataType === 'boolean') stringValue = value ? 'true' : 'false';\r    else if (dataType === 'number') stringValue = value?.toString() || '0';\r    else stringValue = value?.toString() || '';\r    setEditedValues(prev => ({\r      ...prev,\r      [key]: stringValue\r    }));\r  };\r  const handleSave = async () => {\r    if (Object.keys(editedValues).length === 0) {\r      message.info('Değişiklik yapılmadı');\r      return;\r    }\r    setSaving(true);\r    try {\r      const promises = Object.entries(editedValues).map(([key, value]) =>\r        tenantSettingsService.updateSettingValue(key, value)\r      );\r      await Promise.all(promises);\r      message.success('Ayarlar başarıyla kaydedildi');\r      setEditedValues({});\r      await loadSettings();\r    } catch (error) {\r      message.error('Ayarlar kaydedilirken hata oluştu');\r    }\r    setSaving(false);\r  };\r  const handleReset = () => {\r    setEditedValues({});\r    loadSettings();\r    message.info('Değişiklikler geri alındı');\r  };\r  const getIcon = (category: string) => {\r    const icons: { [key: string]: React.ReactNode } = {\r      'Genel': <GlobalOutlined />,\r      'Güvenlik': <SecurityScanOutlined />,\r      'E-posta': <MailOutlined />,\r      'Fatura': <FileTextOutlined />,\r      'Yerelleştirme': <GlobalOutlined />,\r    };\r    return icons[category] || <SettingOutlined />;\r  };\r  const renderField = (setting: SettingDto) => {\r    const { settingKey, dataType, isSystemSetting, description } = setting;\r    const value = form.getFieldValue(settingKey);\r    if (dataType === 'boolean') {\r      return (\r        <Switch\r          checked={value}\r          disabled={isSystemSetting}\r          onChange={(checked) => handleFieldChange(settingKey, checked, dataType)}\r        />\r      );\r    }\r    if (dataType === 'number') {\r      return (\r        <InputNumber\r          value={value}\r          disabled={isSystemSetting}\r          style={{ width: '100%' }}\r          onChange={(val) = aria-label=\"input field\"> handleFieldChange(settingKey, val, dataType)}\r        />\r      );\r    }\r    if (settingKey.includes('description') || settingKey.includes('message')) {\r      return (\r        <TextArea\r          value={value}\r          disabled={isSystemSetting}\r          rows={3}\r          placeholder={description}\r          onChange={(e) => handleFieldChange(settingKey, e.target.value, dataType)}\r        />\r      );\r    }\r    return (\r      <Input\r        value={value}\r        disabled={isSystemSetting}\r        placeholder={description}\r        onChange={(e) = aria-label=\"input field\"> handleFieldChange(settingKey, e.target.value, dataType)}\r      />\r    );\r  };\r  if (loading) {\r    return (\r      <div className=\"settings-loading\">\r        <Spin size=\"large\" />\r        <Title level={4}>Ayarlar Yükleniyor...</Title>\r      </div>\r    );\r  }\r  if (settings.length === 0) {\r    return (\r      <Card className=\"settings-empty\">\r        <Empty description=\"Ayar bulunamadı\" />\r      </Card>\r    );\r  }\r  const tabItems = Object.entries(groupedSettings).map(([category, categorySettings]) => ({\r    key: category,\r    label: (\r      <span>\r        {getIcon(category)}\r        <span style={{ marginLeft: 8 }}>{category}</span>\r      </span>\r    ),\r    children: (\r      <div className=\"settings-category\">\r        <Row gutter={[16, 16]}>\r          {categorySettings.map(setting => (\r            <Col xs={24} sm={24} md={12} key={setting.id}>\r              <Card size=\"small\" className=\"setting-card\">\r                <div className=\"setting-header\">\r                  <Text strong>{setting.settingKey}</Text>\r                  {setting.isSystemSetting && (\r                    <Tag color=\"orange\" size=\"small\">Sistem</Tag>\r                  )}\r                  {editedValues[setting.settingKey] !== undefined && (\r                    <Tag color=\"blue\" size=\"small\">Değişti</Tag>\r                  )}\r                </div>\r                {setting.description && (\r                  <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                    {setting.description}\r                  </Text>\r                )}\r                <Form.Item\r                  name={setting.settingKey}\r                  style={{ marginBottom: 0, marginTop: 8 }}\r                >\r                  {renderField(setting)}\r                </Form.Item>\r              </Card>\r            </Col>\r          ))}\r        </Row>\r      </div>\r    ),\r  }));\r  return (\r    <div className=\"system-settings-page\">\r      <Card className=\"settings-header-card\">\r        <div className=\"settings-header\">\r          <div>\r            <Title level={3}>\r              <SettingOutlined /> Sistem Ayarları\r            </Title>\r            <Text type=\"secondary\">\r              Tenant ayarlarınızı buradan yönetebilirsiniz\r            </Text>\r          </div>\r          <Space>\r            <Button\r              icon={<ReloadOutlined />}\r              onClick={handleReset}\r              disabled={Object.keys(editedValues).length === 0}\r             aria-label=\"reload outlined\">\r              Sıfırla\r            </Button>\r            <Button\r              type=\"primary\"\r              icon={<SaveOutlined />}\r              onClick={handleSave}\r              loading={saving}\r              disabled={Object.keys(editedValues).length === 0}\r             aria-label=\"save outlined\">\r              Kaydet ({Object.keys(editedValues).length})\r            </Button>\r          </Space>\r        </div>\r      </Card>\r      <Card className=\"settings-content\">\r        <Form form={form} layout=\"vertical\">\r          <Tabs items={tabItems} />\r        </Form>\r      </Card>\r    </div>\r  );\r};\rexport default SystemSettingsPage;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/tenant/pages/SystemSettingsPage/SystemSettingsPage.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { \r  Card, \r  Tabs, \r  Form, \r  Input, \r  Switch, \r  Button, \r  Space, \r  Typography, \r  message, \r  Spin,\r  Descriptions,\r  Divider,\r  Alert,\r  Select\r} from 'antd';\rimport { \r  SettingOutlined, \r  SaveOutlined, \r  ReloadOutlined,\r  LockOutlined,\r  GlobalOutlined,\r  DatabaseOutlined,\r  MailOutlined,\r  BellOutlined\r} from '@ant-design/icons';\rimport tenantSettingsService from '../../../../../services/tenant/settingsService';\rimport { SettingCategoryDto, SettingDto } from '../../../../../types/tenant/settings';\rimport './style.css';\rconst { Title, Text } = Typography;\rconst { TabPane } = Tabs;\rconst SettingsPage: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [saving, setSaving] = useState(false);\r  const [settings, setSettings] = useState<SettingCategoryDto[]>([]);\r  const [form] = Form.useForm();\r  const [activeTab, setActiveTab] = useState('General');\r  useEffect(() => {\r    loadSettings();\r  }, []);\r  const loadSettings = async () => {\r    try {\r      setLoading(true);\r      const data = await tenantSettingsService.getSettings();\r      setSettings(data);\r      // Form değerlerini ayarla\r      const formValues: any = {};\r      data.forEach(category => {\r        category.settings.forEach(setting => {\r          formValues[setting.settingKey] = setting.settingValue;\r        });\r      });\r      form.setFieldsValue(formValues);\r    } catch (error) {\r      message.error('Ayarlar yüklenirken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleSave = async (values: any) => {\r    try {\r      setSaving(true);\r      const promises = Object.entries(values).map(([key, value]) => \r        tenantSettingsService.updateSettingValue(key, value as string)\r      );\r      await Promise.all(promises);\r      message.success('Ayarlar başarıyla kaydedildi');\r      loadSettings();\r    } catch (error) {\r      message.error('Ayarlar kaydedilirken hata oluştu');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const getCategoryIcon = (category: string) => {\r    switch(category.toLowerCase()) {\r      case 'general': return <SettingOutlined />;\r      case 'security': return <LockOutlined />;\r      case 'localization': return <GlobalOutlined />;\r      case 'database': return <DatabaseOutlined />;\r      case 'email': return <MailOutlined />;\r      case 'notifications': return <BellOutlined />;\r      default: return <SettingOutlined />;\r    }\r  };\r  const renderSettingField = (setting: SettingDto) => {\r    const fieldProps = {\r      label: setting.settingKey,\r      name: setting.settingKey,\r      help: setting.description,\r      rules: [{ required: !setting.isPublic }]\r    };\r    if (setting.dataType === 'Boolean') {\r      return (\r        <Form.Item {...fieldProps} valuePropName=\"checked\">\r          <Switch disabled={setting.isSystemSetting} />\r        </Form.Item>\r      );\r    }\r    if (setting.dataType === 'Number') {\r      return (\r        <Form.Item {...fieldProps}>\r          <Input \r            type=\"number\" \r            disabled={setting.isSystemSetting}\r            prefix={setting.isEncrypted ? <LockOutlined / aria-label=\"input field\"> : undefined}\r          />\r        </Form.Item>\r      );\r    }\r    if (setting.dataType === 'Select') {\r      // Configuration'dan seçenekleri parse et\r      const options = setting.configuration ? JSON.parse(setting.configuration) : [];\r      return (\r        <Form.Item {...fieldProps}>\r          <Select disabled={setting.isSystemSetting} aria-label=\"select field\">\r            {options.map((opt: any) => (\r              <Select.Option key={opt.value} value={opt.value} aria-label=\"select field\">\r                {opt.label}\r              </Select.Option>\r            ))}\r          </Select>\r        </Form.Item>\r      );\r    }\r    return (\r      <Form.Item {...fieldProps}>\r        <Input \r          disabled={setting.isSystemSetting}\r          type={setting.isEncrypted ? 'password' : 'text'}\r          prefix={setting.isEncrypted ? <LockOutlined / aria-label=\"input field\"> : undefined}\r        />\r      </Form.Item>\r    );\r  };\r  if (loading) {\r    return (\r      <div className=\"settings-loading\">\r        <Spin size=\"large\" tip=\"Ayarlar yükleniyor...\" />\r      </div>\r    );\r  }\r  return (\r    <div className=\"settings-page\">\r      <Card className=\"settings-header\">\r        <Space direction=\"vertical\" style={{ width: '100%' }}>\r          <Title level={2}>\r            <SettingOutlined /> Sistem Ayarları\r          </Title>\r          <Text type=\"secondary\">\r            Sistemin genel ayarlarını bu sayfadan yönetebilirsiniz\r          </Text>\r        </Space>\r      </Card>\r      <Card className=\"settings-content\">\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleSave}\r          autoComplete=\"off\"\r        >\r          <Tabs \r            activeKey={activeTab} \r            onChange={setActiveTab}\r            type=\"card\"\r          >\r            {settings.map(category => (\r              <TabPane \r                tab={\r                  <span>\r                    {getCategoryIcon(category.category)}\r                    {' '}\r                    {category.category}\r                  </span>\r                } \r                key={category.category}\r              >\r                {category.description && (\r                  <Alert\r                    message={category.description}\r                    type=\"info\"\r                    showIcon\r                    style={{ marginBottom: 20 }}\r                  />\r                )}\r                <div className=\"settings-category\">\r                  {category.settings.map(setting => (\r                    <div key={setting.id} className=\"setting-item\">\r                      {renderSettingField(setting)}\r                      {setting.isSystemSetting && (\r                        <Text type=\"warning\" style={{ fontSize: 12 }}>\r                          * Sistem ayarı - Değiştirilemez\r                        </Text>\r                      )}\r                    </div>\r                  ))}\r                </div>\r              </TabPane>\r            ))}\r          </Tabs>\r          <Divider />\r          <Space>\r            <Button \r              type=\"primary\" \r              icon={<SaveOutlined />}\r              loading={saving}\r              htmlType=\"submit\"\r             aria-label=\"save outlined\">\r              Kaydet\r            </Button>\r            <Button \r              icon={<ReloadOutlined />}\r              onClick={loadSettings}\r             aria-label=\"reload outlined\">\r              Yenile\r            </Button>\r          </Space>\r        </Form>\r      </Card>\r    </div>\r  );\r};\rexport default SettingsPage;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/tenant/settings/pages/SettingsPage/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Progress,\r  List,\r  Button,\r  Space,\r  Typography,\r  Badge,\r  Tag,\r  Tooltip,\r  Row,\r  Col,\r  Divider,\r  Alert,\r  Spin,\r  message,\r  Drawer,\r  Timeline\r} from 'antd';\rimport {\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  ClockCircleOutlined,\r  ExclamationCircleOutlined,\r  RocketOutlined,\r  ShopOutlined,\r  TeamOutlined,\r  AppstoreOutlined,\r  DatabaseOutlined,\r  SafetyOutlined,\r  CloudUploadOutlined,\r  FileTextOutlined,\r  SettingOutlined,\r  InfoCircleOutlined,\r  WarningOutlined,\r  SyncOutlined,\r  CheckOutlined,\r  LoadingOutlined\r} from '@ant-design/icons';\rimport { apiClient } from '@/shared/api/client';\rimport './styles.css';\rconst { Title, Text, Paragraph } = Typography;\rinterface SetupChecklistProps {\r  tenantId: string;\r  onGoLive?: () => void;\r  compact?: boolean;\r}\rinterface ChecklistItem {\r  key: string;\r  title: string;\r  description: string;\r  icon: React.ReactNode;\r  required: boolean;\r  completed: boolean;\r  category: 'basic' | 'organization' | 'modules' | 'financial' | 'security' | 'advanced';\r  action?: () => void;\r  helpLink?: string;\r}\rconst SetupChecklist: React.FC<SetupChecklistProps> = ({ \r  tenantId, \r  onGoLive,\r  compact = false \r}) => {\r  const [loading, setLoading] = useState(true);\r  const [checklistData, setChecklistData] = useState<any>(null);\r  const [selectedCategory, setSelectedCategory] = useState<string>('all');\r  const [detailDrawerVisible, setDetailDrawerVisible] = useState(false);\r  const [selectedItem, setSelectedItem] = useState<ChecklistItem | null>(null);\r  const [refreshing, setRefreshing] = useState(false);\r  const categories = [\r    { key: 'all', label: 'Tümü', color: '#1890ff' },\r    { key: 'basic', label: 'Temel Ayarlar', color: '#52c41a' },\r    { key: 'organization', label: 'Organizasyon', color: '#722ed1' },\r    { key: 'modules', label: 'Modüller', color: '#fa8c16' },\r    { key: 'financial', label: 'Mali İşlemler', color: '#eb2f96' },\r    { key: 'security', label: 'Güvenlik', color: '#f5222d' },\r    { key: 'advanced', label: 'Gelişmiş', color: '#13c2c2' }\r  ];\r  const checklistItems: ChecklistItem[] = [\r    // Basic Setup\r    {\r      key: 'companyinfo',\r      title: 'Şirket Bilgileri',\r      description: 'Temel şirket bilgilerini tamamlayın',\r      icon: <ShopOutlined />,\r      required: true,\r      completed: checklistData?.companyInfoCompleted || false,\r      category: 'basic',\r      action: () => handleItemAction('companyinfo')\r    },\r    {\r      key: 'logo',\r      title: 'Logo Yükleme',\r      description: 'Şirket logonuzu yükleyin',\r      icon: <FileTextOutlined />,\r      required: false,\r      completed: checklistData?.logoUploaded || false,\r      category: 'basic',\r      action: () => handleItemAction('logo')\r    },\r    {\r      key: 'adminuser',\r      title: 'Yönetici Kullanıcı',\r      description: 'Ana yönetici hesabını oluşturun',\r      icon: <TeamOutlined />,\r      required: true,\r      completed: checklistData?.adminUserCreated || false,\r      category: 'basic',\r      action: () => handleItemAction('adminuser')\r    },\r    // Organization Setup\r    {\r      key: 'departments',\r      title: 'Departmanlar',\r      description: 'Departman yapısını oluşturun',\r      icon: <TeamOutlined />,\r      required: false,\r      completed: checklistData?.departmentsCreated || false,\r      category: 'organization',\r      action: () => handleItemAction('departments')\r    },\r    {\r      key: 'branches',\r      title: 'Şubeler',\r      description: 'Şube bilgilerini ekleyin',\r      icon: <ShopOutlined />,\r      required: false,\r      completed: checklistData?.branchesCreated || false,\r      category: 'organization',\r      action: () => handleItemAction('branches')\r    },\r    {\r      key: 'roles',\r      title: 'Roller ve Yetkiler',\r      description: 'Kullanıcı rollerini tanımlayın',\r      icon: <SafetyOutlined />,\r      required: true,\r      completed: checklistData?.rolesConfigured || false,\r      category: 'organization',\r      action: () => handleItemAction('roles')\r    },\r    {\r      key: 'users',\r      title: 'Kullanıcıları Davet Et',\r      description: 'Takım üyelerini sisteme davet edin',\r      icon: <TeamOutlined />,\r      required: false,\r      completed: checklistData?.usersInvited || false,\r      category: 'organization',\r      action: () => handleItemAction('users')\r    },\r    // Module Setup\r    {\r      key: 'modules',\r      title: 'Modül Seçimi',\r      description: 'İhtiyacınız olan modülleri seçin',\r      icon: <AppstoreOutlined />,\r      required: true,\r      completed: checklistData?.modulesSelected || false,\r      category: 'modules',\r      action: () => handleItemAction('modules')\r    },\r    {\r      key: 'moduleconfig',\r      title: 'Modül Yapılandırması',\r      description: 'Seçili modülleri yapılandırın',\r      icon: <SettingOutlined />,\r      required: true,\r      completed: checklistData?.modulesConfigured || false,\r      category: 'modules',\r      action: () => handleItemAction('moduleconfig')\r    },\r    // Financial Setup\r    {\r      key: 'chartofaccounts',\r      title: 'Hesap Planı',\r      description: 'Muhasebe hesap planını oluşturun',\r      icon: <DatabaseOutlined />,\r      required: true,\r      completed: checklistData?.chartOfAccountsSetup || false,\r      category: 'financial',\r      action: () => handleItemAction('chartofaccounts')\r    },\r    {\r      key: 'taxsettings',\r      title: 'Vergi Ayarları',\r      description: 'KDV ve diğer vergi ayarlarını yapın',\r      icon: <DatabaseOutlined />,\r      required: true,\r      completed: checklistData?.taxSettingsConfigured || false,\r      category: 'financial',\r      action: () => handleItemAction('taxsettings')\r    },\r    {\r      key: 'currency',\r      title: 'Para Birimi',\r      description: 'Varsayılan para birimini ayarlayın',\r      icon: <DatabaseOutlined />,\r      required: true,\r      completed: checklistData?.currencyConfigured || false,\r      category: 'financial',\r      action: () => handleItemAction('currency')\r    },\r    // Security\r    {\r      key: 'security',\r      title: 'Güvenlik Ayarları',\r      description: 'Güvenlik politikalarını yapılandırın',\r      icon: <SafetyOutlined />,\r      required: true,\r      completed: checklistData?.securitySettingsConfigured || false,\r      category: 'security',\r      action: () => handleItemAction('security')\r    },\r    {\r      key: 'passwordpolicy',\r      title: 'Şifre Politikası',\r      description: 'Şifre kurallarını belirleyin',\r      icon: <SafetyOutlined />,\r      required: true,\r      completed: checklistData?.passwordPolicySet || false,\r      category: 'security',\r      action: () => handleItemAction('passwordpolicy')\r    },\r    {\r      key: 'backup',\r      title: 'Yedekleme Ayarları',\r      description: 'Otomatik yedekleme yapılandırın',\r      icon: <CloudUploadOutlined />,\r      required: true,\r      completed: checklistData?.backupConfigured || false,\r      category: 'security',\r      action: () => handleItemAction('backup')\r    }\r  ];\r  useEffect(() => {\r    fetchChecklistData();\r  }, [tenantId]);\r  const fetchChecklistData = async () => {\r    try {\r      setLoading(true);\r      const response = await apiClient.get(`/api/master/tenants/${tenantId}/setup-checklist`);\r      if (response.data?.success) {\r        setChecklistData(response.data.data);\r      }\r    } catch (error) {\r      message.error('Checklist bilgileri yüklenemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleRefresh = async () => {\r    setRefreshing(true);\r    await fetchChecklistData();\r    setRefreshing(false);\r    message.success('Checklist güncellendi');\r  };\r  const handleItemAction = async (itemKey: string) => {\r    const item = checklistItems.find(i => i.key === itemKey);\r    if (item) {\r      setSelectedItem(item);\r      setDetailDrawerVisible(true);\r    }\r  };\r  const handleCompleteItem = async (itemKey: string) => {\r    try {\r      const response = await apiClient.put(\r        `/api/master/tenants/${tenantId}/setup-checklist/${checklistData.id}`,\r        {\r          itemKey,\r          isCompleted: true,\r          completedBy: 'current-user' // This should come from auth context\r        }\r      );\r      if (response.data?.success) {\r        setChecklistData(response.data.data);\r        message.success('Öğe tamamlandı olarak işaretlendi');\r        setDetailDrawerVisible(false);\r      }\r    } catch (error) {\r      message.error('İşlem sırasında hata oluştu');\r    }\r  };\r  const handleGoLive = async () => {\r    if (!checklistData?.canGoLive) {\r      message.warning('Canlıya geçiş için tüm zorunlu adımlar tamamlanmalıdır');\r      return;\r    }\r    // Call go-live process\r    onGoLive?.();\r  };\r  const getFilteredItems = () => {\r    if (selectedCategory === 'all') return checklistItems;\r    return checklistItems.filter(item => item.category === selectedCategory);\r  };\r  const getProgressColor = () => {\r    const progress = checklistData?.overallProgress || 0;\r    if (progress < 30) return '#ff4d4f';\r    if (progress < 60) return '#faad14';\r    if (progress < 90) return '#52c41a';\r    return '#1890ff';\r  };\r  const getCategoryProgress = (category: string) => {\r    const items = checklistItems.filter(item => item.category === category);\r    const completed = items.filter(item => item.completed).length;\r    return items.length > 0 ? (completed / items.length) * 100 : 0;\r  };\r  if (loading) {\r    return (\r      <Card className=\"checklist-loading\">\r        <Spin size=\"large\" indicator={<LoadingOutlined style={{ fontSize: 48 }} />} />\r      </Card>\r    );\r  }\r  if (compact) {\r    return (\r      <Card className=\"checklist-compact\">\r        <Space direction=\"vertical\" style={{ width: '100%' }}>\r          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r            <Title level={5} style={{ margin: 0 }}>Kurulum Durumu</Title>\r            <Button size=\"small\" onClick={() => setDetailDrawerVisible(true)}>\r              Detaylar\r            </Button>\r          </div>\r          <Progress\r            percent={checklistData?.overallProgress || 0}\r            strokeColor={getProgressColor()}\r            size=\"small\"\r          />\r          <Space>\r            <Text type=\"secondary\">\r              {checklistData?.completedItems || 0} / {checklistData?.totalItems || 0} tamamlandı\r            </Text>\r            {checklistData?.canGoLive && (\r              <Tag color=\"success\">Canlıya Geçmeye Hazır</Tag>\r            )}\r          </Space>\r        </Space>\r      </Card>\r    );\r  }\r  return (\r    <div className=\"setup-checklist-container\">\r      <Card className=\"checklist-header-card\">\r        <Row align=\"middle\" justify=\"space-between\">\r          <Col>\r            <Space direction=\"vertical\" size={0}>\r              <Title level={3} style={{ margin: 0 }}>\r                <CheckCircleOutlined /> Kurulum Kontrol Listesi\r              </Title>\r              <Text type=\"secondary\">\r                Sistemin canlıya geçmesi için gereken adımları takip edin\r              </Text>\r            </Space>\r          </Col>\r          <Col>\r            <Space>\r              <Button\r                icon={<SyncOutlined spin={refreshing} / aria-label=\"sync outlined\">}\r                onClick={handleRefresh}\r                disabled={refreshing}\r              >\r                Yenile\r              </Button>\r              {checklistData?.canGoLive && (\r                <Button\r                  type=\"primary\"\r                  icon={<RocketOutlined />}\r                  onClick={handleGoLive}\r                  size=\"large\"\r                 aria-label=\"rocket outlined\">\r                  Canlıya Geç\r                </Button>\r              )}\r            </Space>\r          </Col>\r        </Row>\r        <Divider />\r        <Row gutter={[16, 16]}>\r          <Col xs={24} lg={12}>\r            <div className=\"progress-section\">\r              <Text strong>Genel İlerleme</Text>\r              <Progress\r                percent={checklistData?.overallProgress || 0}\r                strokeColor={getProgressColor()}\r                format={(percent) => (\r                  <span style={{ fontSize: '16px', fontWeight: 500 }}>\r                    %{Math.round(percent || 0)}\r                  </span>\r                )}\r              />\r              <Space style={{ marginTop: 8 }}>\r                <Badge status=\"success\" text={`${checklistData?.completedItems || 0} Tamamlandı`} />\r                <Divider type=\"vertical\" />\r                <Badge status=\"processing\" text={`${(checklistData?.totalItems || 0) - (checklistData?.completedItems || 0)} Bekliyor`} />\r              </Space>\r            </div>\r          </Col>\r          <Col xs={24} lg={12}>\r            <div className=\"progress-section\">\r              <Text strong>Zorunlu Adımlar</Text>\r              <Progress\r                percent={checklistData?.requiredProgress || 0}\r                strokeColor=\"#ff4d4f\"\r                format={(percent) => (\r                  <span style={{ fontSize: '16px', fontWeight: 500 }}>\r                    %{Math.round(percent || 0)}\r                  </span>\r                )}\r              />\r              <Space style={{ marginTop: 8 }}>\r                <Badge status=\"error\" text={`${checklistData?.requiredCompletedItems || 0} / ${checklistData?.requiredItems || 0} Zorunlu`} />\r                {!checklistData?.canGoLive && (\r                  <>\r                    <Divider type=\"vertical\" />\r                    <Text type=\"danger\">\r                      <WarningOutlined /> Canlıya geçiş için tamamlanmalı\r                    </Text>\r                  </>\r                )}\r              </Space>\r            </div>\r          </Col>\r        </Row>\r      </Card>\r      <Card className=\"checklist-content-card\">\r        <div className=\"category-filters\">\r          <Space wrap>\r            {categories.map(cat => (\r              <Tag\r                key={cat.key}\r                color={selectedCategory === cat.key ? cat.color : 'default'}\r                style={{ cursor: 'pointer', padding: '4px 12px' }}\r                onClick={() => setSelectedCategory(cat.key)}\r              >\r                {cat.label}\r                {cat.key !== 'all' && (\r                  <Badge\r                    count={checklistItems.filter(i => i.category === cat.key && !i.completed).length}\r                    style={{ marginLeft: 8 }}\r                  />\r                )}\r              </Tag>\r            ))}\r          </Space>\r        </div>\r        <List\r          className=\"checklist-items\"\r          dataSource={getFilteredItems()}\r          renderItem={(item) => (\r            <List.Item\r              className={`checklist-item ${item.completed ? 'completed' : ''}`}\r              actions={[\r                item.completed ? (\r                  <CheckCircleOutlined style={{ color: '#52c41a', fontSize: 24 }} />\r                ) : (\r                  <Button\r                    size=\"small\"\r                    type=\"primary\"\r                    onClick={() => handleItemAction(item.key)}\r                  >\r                    Başla\r                  </Button>\r                )\r              ]}\r            >\r              <List.Item.Meta\r                avatar={\r                  <div className={`item-icon ${item.completed ? 'completed' : ''}`}>\r                    {item.icon}\r                  </div>\r                }\r                title={\r                  <Space>\r                    {item.title}\r                    {item.required && (\r                      <Tag color=\"red\" style={{ fontSize: 10 }}>ZORUNLU</Tag>\r                    )}\r                  </Space>\r                }\r                description={item.description}\r              />\r            </List.Item>\r          )}\r        />\r      </Card>\r      <Drawer\r        title={selectedItem?.title}\r        placement=\"right\"\r        width={480}\r        onClose={() => setDetailDrawerVisible(false)}\r        open={detailDrawerVisible}\r        footer={\r          <Space style={{ float: 'right' }}>\r            <Button onClick={() => setDetailDrawerVisible(false)}>İptal</Button>\r            {selectedItem && !selectedItem.completed && (\r              <Button\r                type=\"primary\"\r                icon={<CheckOutlined />}\r                onClick={() = aria-label=\"check outlined\"> handleCompleteItem(selectedItem.key)}\r              >\r                Tamamlandı Olarak İşaretle\r              </Button>\r            )}\r          </Space>\r        }\r      >\r        {selectedItem && (\r          <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\r            <Alert\r              message={selectedItem.description}\r              type={selectedItem.completed ? 'success' : 'info'}\r              showIcon\r            />\r            {selectedItem.required && !selectedItem.completed && (\r              <Alert\r                message=\"Zorunlu Adım\"\r                description=\"Bu adım canlıya geçiş için tamamlanmalıdır.\"\r                type=\"warning\"\r                showIcon\r              />\r            )}\r            {selectedItem.completed && (\r              <Alert\r                message=\"Tamamlandı\"\r                description=\"Bu adım başarıyla tamamlandı.\"\r                type=\"success\"\r                showIcon\r                icon={<CheckCircleOutlined />}\r              />\r            )}\r            <Divider />\r            <div>\r              <Title level={5}>Yapılması Gerekenler</Title>\r              <Timeline>\r                <Timeline.Item color=\"blue\">Gerekli bilgileri girin</Timeline.Item>\r                <Timeline.Item color=\"blue\">Ayarları yapılandırın</Timeline.Item>\r                <Timeline.Item color=\"blue\">Değişiklikleri kaydedin</Timeline.Item>\r                <Timeline.Item color=\"green\">Tamamlandı olarak işaretleyin</Timeline.Item>\r              </Timeline>\r            </div>\r            {selectedItem.helpLink && (\r              <Button\r                type=\"link\"\r                icon={<InfoCircleOutlined />}\r                href={selectedItem.helpLink}\r                target=\"_blank\"\r               aria-label=\"info circle outlined\">\r                Yardım Dokümantasyonu\r              </Button>\r            )}\r          </Space>\r        )}\r      </Drawer>\r    </div>\r  );\r};\rexport default SetupChecklist;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/tenant/setup/components/SetupChecklist/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Steps,\r  Button,\r  Progress,\r  Space,\r  Typography,\r  Alert,\r  Spin,\r  Result,\r  Badge,\r  Row,\r  Col,\r  Divider,\r  message\r} from 'antd';\rimport {\r  CheckCircleOutlined,\r  ClockCircleOutlined,\r  LoadingOutlined,\r  RocketOutlined,\r  SettingOutlined,\r  TeamOutlined,\r  ShopOutlined,\r  SafetyOutlined,\r  AppstoreOutlined,\r  DatabaseOutlined,\r  CloudUploadOutlined,\r  CheckOutlined,\r  ArrowLeftOutlined,\r  ArrowRightOutlined,\r  PauseCircleOutlined,\r  PlayCircleOutlined,\r  QuestionCircleOutlined\r} from '@ant-design/icons';\rimport { apiClient } from '@/shared/api/client';\rimport './styles.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Step } = Steps;\rinterface SetupWizardProps {\r  tenantId: string;\r  onComplete?: () => void;\r}\rinterface WizardStep {\r  key: string;\r  title: string;\r  description: string;\r  icon: React.ReactNode;\r  component: React.ReactNode;\r  required: boolean;\r  category: 'basic' | 'organization' | 'modules' | 'advanced' | 'review';\r}\rconst SetupWizard: React.FC<SetupWizardProps> = ({ tenantId, onComplete }) => {\r  const [loading, setLoading] = useState(true);\r  const [wizardData, setWizardData] = useState<any>(null);\r  const [currentStep, setCurrentStep] = useState(0);\r  const [saving, setSaving] = useState(false);\r  const [needsHelp, setNeedsHelp] = useState(false);\r  const wizardSteps: WizardStep[] = [\r    {\r      key: 'company',\r      title: 'Şirket Bilgileri',\r      description: 'Temel şirket bilgilerini tamamlayın',\r      icon: <ShopOutlined />,\r      component: null, // Will be implemented\r      required: true,\r      category: 'basic'\r    },\r    {\r      key: 'organization',\r      title: 'Organizasyon Yapısı',\r      description: 'Departman ve şubeleri oluşturun',\r      icon: <TeamOutlined />,\r      component: null,\r      required: false,\r      category: 'organization'\r    },\r    {\r      key: 'users',\r      title: 'Kullanıcılar',\r      description: 'Kullanıcıları davet edin ve roller atayın',\r      icon: <TeamOutlined />,\r      component: null,\r      required: true,\r      category: 'organization'\r    },\r    {\r      key: 'modules',\r      title: 'Modül Seçimi',\r      description: 'İhtiyacınız olan modülleri seçin',\r      icon: <AppstoreOutlined />,\r      component: null,\r      required: true,\r      category: 'modules'\r    },\r    {\r      key: 'finance',\r      title: 'Mali Ayarlar',\r      description: 'Hesap planı ve vergi ayarları',\r      icon: <DatabaseOutlined />,\r      component: null,\r      required: true,\r      category: 'modules'\r    },\r    {\r      key: 'security',\r      title: 'Güvenlik',\r      description: 'Güvenlik politikalarını yapılandırın',\r      icon: <SafetyOutlined />,\r      component: null,\r      required: true,\r      category: 'advanced'\r    },\r    {\r      key: 'integrations',\r      title: 'Entegrasyonlar',\r      description: 'Dış sistemlerle bağlantı kurun',\r      icon: <CloudUploadOutlined />,\r      component: null,\r      required: false,\r      category: 'advanced'\r    },\r    {\r      key: 'review',\r      title: 'Gözden Geçir',\r      description: 'Ayarları kontrol edin ve onaylayın',\r      icon: <CheckCircleOutlined />,\r      component: null,\r      required: true,\r      category: 'review'\r    }\r  ];\r  useEffect(() => {\r    fetchWizardData();\r  }, [tenantId]);\r  const fetchWizardData = async () => {\r    try {\r      setLoading(true);\r      const response = await apiClient.get(`/api/public/tenant-registration/wizard/${tenantId}`);\r      if (response.data?.success) {\r        setWizardData(response.data.data);\r        setCurrentStep(response.data.data.currentStep - 1);\r      }\r    } catch (error) {\r      message.error('Kurulum bilgileri yüklenemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleNext = async () => {\r    try {\r      setSaving(true);\r      const response = await apiClient.put(`/api/public/tenant-registration/wizard/${wizardData.id}/step`, {\r        action: 'complete',\r        stepData: {} // Current step data\r      });\r      if (response.data?.success) {\r        setWizardData(response.data.data);\r        if (currentStep < wizardSteps.length - 1) {\r          setCurrentStep(currentStep + 1);\r        } else {\r          message.success('Kurulum tamamlandı!');\r          onComplete?.();\r        }\r      }\r    } catch (error) {\r      message.error('İşlem sırasında hata oluştu');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handlePrevious = () => {\r    if (currentStep > 0) {\r      setCurrentStep(currentStep - 1);\r    }\r  };\r  const handleSkip = async () => {\r    const currentStepData = wizardSteps[currentStep];\r    if (!currentStepData.required) {\r      try {\r        setSaving(true);\r        await apiClient.put(`/api/public/tenant-registration/wizard/${wizardData.id}/step`, {\r          action: 'skip',\r          reason: 'User skipped optional step'\r        });\r        if (currentStep < wizardSteps.length - 1) {\r          setCurrentStep(currentStep + 1);\r        }\r        message.info('Adım atlandı');\r      } catch (error) {\r        message.error('İşlem sırasında hata oluştu');\r      } finally {\r        setSaving(false);\r      }\r    }\r  };\r  const handleRequestHelp = async () => {\r    setNeedsHelp(true);\r    try {\r      await apiClient.put(`/api/public/tenant-registration/wizard/${wizardData.id}/step`, {\r        action: 'requestHelp',\r        notes: `Help requested for step: ${wizardSteps[currentStep].title}`\r      });\r      message.success('Yardım talebiniz alındı. En kısa sürede size dönüş yapılacak.');\r    } catch (error) {\r    }\r  };\r  const getStepStatus = (stepIndex: number) => {\r    if (!wizardData) return 'wait';\r    if (stepIndex < wizardData.completedSteps) return 'finish';\r    if (stepIndex === currentStep) return 'process';\r    if (stepIndex > currentStep) return 'wait';\r    return 'wait';\r  };\r  const getProgressColor = () => {\r    const progress = wizardData?.progressPercentage || 0;\r    if (progress < 30) return '#ff4d4f';\r    if (progress < 60) return '#faad14';\r    if (progress < 90) return '#52c41a';\r    return '#1890ff';\r  };\r  if (loading) {\r    return (\r      <Card className=\"setup-wizard-loading\">\r        <Spin size=\"large\" indicator={<LoadingOutlined style={{ fontSize: 48 }} />} />\r        <Title level={4} style={{ marginTop: 24 }}>Kurulum hazırlanıyor...</Title>\r      </Card>\r    );\r  }\r  if (!wizardData) {\r    return (\r      <Result\r        status=\"404\"\r        title=\"Kurulum Bulunamadı\"\r        subTitle=\"Bu tenant için kurulum sihirbazı bulunamadı.\"\r        extra={<Button type=\"primary\" onClick={fetchWizardData}>Tekrar Dene</Button>}\r      />\r    );\r  }\r  const currentStepData = wizardSteps[currentStep];\r  return (\r    <div className=\"setup-wizard-container\">\r      <Card className=\"wizard-header-card\">\r        <Row align=\"middle\" justify=\"space-between\">\r          <Col>\r            <Space direction=\"vertical\" size={0}>\r              <Title level={3} style={{ margin: 0 }}>\r                <RocketOutlined /> Kurulum Sihirbazı\r              </Title>\r              <Text type=\"secondary\">\r                Sistemi kullanmaya başlamak için gerekli adımları tamamlayın\r              </Text>\r            </Space>\r          </Col>\r          <Col>\r            <Space>\r              <Badge status={wizardData.status === 'InProgress' ? 'processing' : 'success'} />\r              <Text>{wizardData.status === 'Completed' ? 'Tamamlandı' : 'Devam Ediyor'}</Text>\r            </Space>\r          </Col>\r        </Row>\r        <Divider />\r        <Row gutter={[16, 16]}>\r          <Col xs={24} lg={18}>\r            <Progress\r              percent={wizardData.progressPercentage}\r              strokeColor={getProgressColor()}\r              format={(percent) => (\r                <span style={{ fontSize: '14px', fontWeight: 500 }}>\r                  %{Math.round(percent || 0)}\r                </span>\r              )}\r            />\r            <Space style={{ marginTop: 8 }}>\r              <Text type=\"secondary\">\r                {wizardData.completedSteps} / {wizardData.totalSteps} adım tamamlandı\r              </Text>\r              {wizardData.estimatedCompletionTime && (\r                <>\r                  <Divider type=\"vertical\" />\r                  <ClockCircleOutlined />\r                  <Text type=\"secondary\">\r                    Tahmini süre: {wizardData.estimatedCompletionTime}\r                  </Text>\r                </>\r              )}\r            </Space>\r          </Col>\r          <Col xs={24} lg={6} style={{ textAlign: 'right' }}>\r            {needsHelp && (\r              <Alert\r                message=\"Yardım Talep Edildi\"\r                type=\"info\"\r                showIcon\r                closable\r                onClose={() => setNeedsHelp(false)}\r              />\r            )}\r            <Button\r              icon={<QuestionCircleOutlined />}\r              onClick={handleRequestHelp}\r              disabled={needsHelp}\r             aria-label=\"question circle outlined\">\r              Yardım İste\r            </Button>\r          </Col>\r        </Row>\r      </Card>\r      <Card className=\"wizard-content-card\">\r        <Steps current={currentStep} className=\"wizard-steps\">\r          {wizardSteps.map((step, index) => (\r            <Step\r              key={step.key}\r              title={step.title}\r              description={step.description}\r              icon={step.icon}\r              status={getStepStatus(index)}\r            />\r          ))}\r        </Steps>\r        <div className=\"wizard-step-content\">\r          <Card className=\"step-detail-card\">\r            <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\r              <div className=\"step-header\">\r                <Space>\r                  <div className=\"step-icon\">{currentStepData.icon}</div>\r                  <div>\r                    <Title level={4} style={{ margin: 0 }}>\r                      {currentStepData.title}\r                    </Title>\r                    <Text type=\"secondary\">{currentStepData.description}</Text>\r                  </div>\r                </Space>\r                {currentStepData.required && (\r                  <Badge color=\"red\" text=\"Zorunlu\" />\r                )}\r              </div>\r              <Divider />\r              {/* Step component will be rendered here */}\r              <div className=\"step-component-container\">\r                {currentStepData.component || (\r                  <Alert\r                    message=\"Bu adım henüz hazır değil\"\r                    description=\"İlgili bileşen yakında eklenecek\"\r                    type=\"info\"\r                    showIcon\r                  />\r                )}\r              </div>\r            </Space>\r          </Card>\r        </div>\r        <div className=\"wizard-actions\">\r          <Button\r            size=\"large\"\r            onClick={handlePrevious}\r            disabled={currentStep === 0}\r            icon={<ArrowLeftOutlined />}\r           aria-label=\"arrow left outlined\">\r            Önceki\r          </Button>\r          <Space>\r            {!currentStepData.required && currentStep < wizardSteps.length - 1 && (\r              <Button\r                size=\"large\"\r                onClick={handleSkip}\r                disabled={saving}\r              >\r                Atla\r              </Button>\r            )}\r            <Button\r              type=\"primary\"\r              size=\"large\"\r              onClick={handleNext}\r              loading={saving}\r              icon={currentStep === wizardSteps.length - 1 ? <CheckOutlined /> : <ArrowRightOutlined />}\r             aria-label=\"button\">\r              {currentStep === wizardSteps.length - 1 ? 'Kurulumu Tamamla' : 'İleri'}\r            </Button>\r          </Space>\r        </div>\r      </Card>\r    </div>\r  );\r};\rexport default SetupWizard;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/tenant/setup/components/SetupWizard/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport {\r  Card,\r  Tabs,\r  Button,\r  Space,\r  Typography,\r  Divider,\r  Alert,\r  Form,\r  Input,\r  Switch,\r  Badge,\r  message,\r  Modal,\r  Row,\r  Col,\r  Collapse,\r  Tag\r} from 'antd';\rimport {\r  SafetyOutlined,\r  LockOutlined,\r  MailOutlined,\r  GiftOutlined,\r  MessageOutlined,\r  GlobalOutlined,\r  RocketOutlined,\r  MobileOutlined,\r  CheckCircleOutlined,\r  BugOutlined,\r  ExperimentOutlined,\r  SettingOutlined\r} from '@ant-design/icons';\r// Import all features\rimport { Captcha, CaptchaV3 } from '../../../auth/components/Captcha';\rimport { useRateLimit, useBruteForceProtection } from '../../../auth/hooks/useRateLimit';\rimport { TwoFactorSetup, TwoFactorVerify } from '../../../auth/components/TwoFactorAuth';\rimport { EmailVerification, EmailVerificationModal } from '../../../auth/components/EmailVerification';\rimport { useFormAutoSave, useAutoSaveStatus } from '../../../auth/hooks/useFormAutoSave';\rimport { FormProgress, CircularProgress } from '../../../auth/components/FormProgress';\rimport { SocialLogin, QuickSocialLogin } from '../../../auth/components/SocialLogin';\rimport { ReferralInput, ReferralShare, ReferralStats } from '../../../auth/components/ReferralCode';\rimport { LiveChat } from '../../../support/components/LiveChat';\r// import { useTranslation } from '../../../i18n';\rimport { OnboardingTour, OnboardingChecklist } from '../../../onboarding/components/OnboardingTour';\rimport { usePWAInstall, useOfflineDetection } from '../../../pwa/serviceWorkerRegistration';\rimport { useBiometricAuth } from '../../../auth/services/biometric';\rimport { analytics } from '../../../auth/services/analytics';\rimport { useLazyLoad, useLazyImage } from '../../../auth/hooks/useLazyLoad';\rimport { useOptimisticUI } from '../../../auth/hooks/useOptimisticUI';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst { Panel } = Collapse;\rconst FeatureTestPage: React.FC = () => {\r  const [activeTab, setActiveTab] = useState('security');\r  // const { t, changeLanguage, currentLanguage } = useTranslation();\r  const t = (key: string) => key; // Mock translation\r  const changeLanguage = (lang: string) => \r  const currentLanguage = 'tr';\r  // Test states\r  const [show2FA, setShow2FA] = useState(false);\r  const [showEmailVerification, setShowEmailVerification] = useState(false);\r  const [showLiveChat, setShowLiveChat] = useState(false);\r  const [startTour, setStartTour] = useState(false);\r  // Form data for auto-save test\r  const [formData, setFormData] = useState({\r    name: '',\r    email: '',\r    phone: '',\r    company: ''\r  });\r  // Hooks\r  const { checkLimit, isBlocked, remainingAttempts } = useRateLimit({\r    maxAttempts: 5,\r    windowMs: 60000,\r    storageKey: 'test_rate_limit'\r  });\r  const { saveData, restoreData, lastSaveTime, isSaving } = useFormAutoSave(formData, {\r    storageKey: 'test_form_autosave',\r    debounceMs: 1000\r  });\r  const autoSaveStatus = useAutoSaveStatus(lastSaveTime, isSaving);\r  const { isInstallable, isInstalled, install } = usePWAInstall();\r  const isOnline = useOfflineDetection();\r  const { isAvailable: biometricAvailable, register: registerBiometric, authenticate: authenticateBiometric } = useBiometricAuth();\r  const { data: optimisticData, applyOptimisticUpdate, rollback } = useOptimisticUI({ count: 0 });\r  // Test functions\r  const testRateLimit = () => {\r    if (checkLimit()) {\r      message.success(`İstek gönderildi! Kalan deneme: ${remainingAttempts}`);\r    }\r  };\r  const testAnalytics = () => {\r    analytics.track('test_event', {\r      feature: 'analytics',\r      action: 'button_click'\r    });\r    message.success('Analytics event gönderildi! (Console\\'u kontrol edin)');\r  };\r  const testOptimisticUI = () => {\r    applyOptimisticUpdate((current: any) => ({\r      ...current,\r      count: current.count + 1\r    }));\r    message.info(`Optimistic update: ${optimisticData.count + 1}`);\r    // Simulate rollback after 2 seconds\r    setTimeout(() => {\r      rollback();\r      message.warning('Update rolled back!');\r    }, 2000);\r  };\r  const testBiometric = async () => {\r    if (!biometricAvailable) {\r      message.error('Biometric authentication mevcut değil!');\r      return;\r    }\r    try {\r      await registerBiometric('test-user', 'test@example.com');\r      message.success('Biometric kaydedildi!');\r      const result = await authenticateBiometric();\r      if (result?.verified) {\r        message.success('Biometric doğrulama başarılı!');\r      }\r    } catch (error) {\r      message.error('Biometric test başarısız!');\r    }\r  };\r  // Tour steps\r  const tourSteps = [\r    {\r      target: '.test-security-tab',\r      title: 'Güvenlik Özellikleri',\r      content: 'Bu sekmede güvenlik özelliklerini test edebilirsiniz.'\r    },\r    {\r      target: '.test-ux-tab',\r      title: 'UX İyileştirmeleri',\r      content: 'Kullanıcı deneyimi özelliklerini buradan test edin.'\r    },\r    {\r      target: '.test-performance-tab',\r      title: 'Performans',\r      content: 'Performans optimizasyonlarını test edin.'\r    }\r  ];\r  // Checklist items\r  const checklistItems = [\r    { id: '1', title: 'CAPTCHA Test Et', completed: false, required: true },\r    { id: '2', title: '2FA Kur', completed: false, required: true },\r    { id: '3', title: 'E-posta Doğrula', completed: false },\r    { id: '4', title: 'Sosyal Giriş Dene', completed: false },\r    { id: '5', title: 'PWA Yükle', completed: false }\r  ];\r  return (\r    <div style={{ padding: 24, maxWidth: 1400, margin: '0 auto' }}>\r      <Card>\r        <div style={{ marginBottom: 24 }}>\r          <Title level={2}>\r            <ExperimentOutlined /> Feature Test Dashboard\r          </Title>\r          <Paragraph>\r            Tüm eklenen özellikleri bu sayfadan test edebilirsiniz.\r          </Paragraph>\r          {/* Status Badges */}\r          <Space wrap style={{ marginTop: 16 }}>\r            <Badge status={isOnline ? 'success' : 'error'} text={isOnline ? 'Online' : 'Offline'} />\r            <Badge status={isInstalled ? 'success' : 'default'} text={isInstalled ? 'PWA Yüklü' : 'PWA Yüklenmemiş'} />\r            <Badge status={biometricAvailable ? 'success' : 'error'} text={biometricAvailable ? 'Biometric Mevcut' : 'Biometric Yok'} />\r            <Tag color=\"blue\">Dil: {currentLanguage.toUpperCase()}</Tag>\r          </Space>\r        </div>\r        <Tabs activeKey={activeTab} onChange={setActiveTab}>\r          {/* Security Features */}\r          <TabPane \r            tab={<span className=\"test-security-tab\"><SafetyOutlined /> Güvenlik</span>} \r            key=\"security\"\r          >\r            <Row gutter={[16, 16]}>\r              <Col xs={24} md={12}>\r                <Card title=\"🔐 CAPTCHA / reCAPTCHA\" size=\"small\">\r                  <Alert\r                    message=\"Not: reCAPTCHA için geçerli site key gerekli\"\r                    type=\"info\"\r                    showIcon\r                    style={{ marginBottom: 16 }}\r                  />\r                  <Captcha\r                    siteKey=\"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\" // Test key\r                    onVerify={(token) => message.success(`Token: ${token.substring(0, 20)}...`)}\r                    onError={() => message.error('CAPTCHA doğrulanamadı')}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"⚡ Rate Limiting\" size=\"small\">\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <Alert\r                      message={`Kalan deneme: ${remainingAttempts}/5`}\r                      type={isBlocked ? 'error' : 'warning'}\r                    />\r                    <Button \r                      onClick={testRateLimit}\r                      disabled={isBlocked}\r                      type=\"primary\"\r                    >\r                      Test Rate Limit\r                    </Button>\r                    {isBlocked && <Text type=\"danger\">Çok fazla deneme! Bekleyin...</Text>}\r                  </Space>\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"🔑 Two-Factor Authentication\" size=\"small\">\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <Button onClick={() => setShow2FA(true)} type=\"primary\">\r                      2FA Kurulumu Başlat\r                    </Button>\r                    <Text type=\"secondary\">Authenticator app veya SMS ile</Text>\r                  </Space>\r                  <TwoFactorSetup\r                    visible={show2FA}\r                    onClose={() => setShow2FA(false)}\r                    onComplete={(method, data) => {\r                      message.success(`2FA etkinleştirildi: ${method}`);\r                      setShow2FA(false);\r                    }}\r                    userEmail=\"test@example.com\"\r                    userPhone=\"+90 555 123 4567\"\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"✉️ E-posta Doğrulama\" size=\"small\">\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <Button onClick={() => setShowEmailVerification(true)} type=\"primary\">\r                      E-posta Doğrulama Test\r                    </Button>\r                    <Text type=\"secondary\">Test kodu: 123456</Text>\r                  </Space>\r                  <EmailVerificationModal\r                    visible={showEmailVerification}\r                    email=\"test@example.com\"\r                    onClose={() => setShowEmailVerification(false)}\r                    onVerified={() => {\r                      message.success('E-posta doğrulandı!');\r                      setShowEmailVerification(false);\r                    }}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"🔒 Biometric Authentication\" size=\"small\">\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <Button \r                      onClick={testBiometric}\r                      disabled={!biometricAvailable}\r                      type=\"primary\"\r                    >\r                      Test Biometric (Touch ID/Face ID)\r                    </Button>\r                    {!biometricAvailable && (\r                      <Alert message=\"Cihazınız biometric desteklemiyor\" type=\"warning\" />\r                    )}\r                  </Space>\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          {/* UX Features */}\r          <TabPane \r            tab={<span className=\"test-ux-tab\"><RocketOutlined /> UX Özellikleri</span>} \r            key=\"ux\"\r          >\r            <Row gutter={[16, 16]}>\r              <Col xs={24} md={12}>\r                <Card title=\"💾 Form Auto-Save\" size=\"small\">\r                  <Form layout=\"vertical\">\r                    <Form.Item label=\"Ad Soyad\">\r                      <Input\r                        value={formData.name}\r                        onChange={(e) = aria-label=\"input field\"> setFormData({...formData, name: e.target.value})}\r                        placeholder=\"Test için yazın...\"\r                      />\r                    </Form.Item>\r                    <Form.Item label=\"E-posta\">\r                      <Input\r                        value={formData.email}\r                        onChange={(e) = aria-label=\"input field\"> setFormData({...formData, email: e.target.value})}\r                        placeholder=\"Otomatik kaydedilecek...\"\r                      />\r                    </Form.Item>\r                  </Form>\r                  <Text type=\"secondary\">{autoSaveStatus}</Text>\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"📊 Form Progress\" size=\"small\">\r                  <FormProgress\r                    fields={[\r                      { name: 'name', label: 'Ad', value: formData.name, required: true },\r                      { name: 'email', label: 'E-posta', value: formData.email, required: true },\r                      { name: 'phone', label: 'Telefon', value: formData.phone },\r                      { name: 'company', label: 'Şirket', value: formData.company }\r                    ]}\r                    showDetails={true}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"🌐 Social Login\" size=\"small\">\r                  <SocialLogin\r                    providers={['google', 'microsoft', 'linkedin']}\r                    layout=\"vertical\"\r                    size=\"middle\"\r                    onSuccess={(provider, data) => message.success(`${provider} login simulated`)}\r                    onError={(provider, error) => message.error(`${provider} login failed`)}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"🎁 Referral System\" size=\"small\">\r                  <ReferralInput\r                    placeholder=\"WELCOME20 veya FRIEND50 deneyin\"\r                    onValidate={async (code) => {\r                      message.success(`Referans kodu geçerli: ${code}`);\r                      return null;\r                    }}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"💬 Live Chat\" size=\"small\">\r                  <Button onClick={() => setShowLiveChat(!showLiveChat)} type=\"primary\">\r                    {showLiveChat ? 'Chat Kapat' : 'Chat Aç'}\r                  </Button>\r                  {showLiveChat && <LiveChat position=\"bottom-right\" />}\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"🌍 Multi-Language\" size=\"small\">\r                  <Space>\r                    <Button onClick={() => changeLanguage('tr')} type={currentLanguage === 'tr' ? 'primary' : 'default'}>\r                      🇹🇷 Türkçe\r                    </Button>\r                    <Button onClick={() => changeLanguage('en')} type={currentLanguage === 'en' ? 'primary' : 'default'}>\r                      🇬🇧 English\r                    </Button>\r                  </Space>\r                  <Divider />\r                  <Text>{t('common.welcome')}</Text>\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          {/* Performance Features */}\r          <TabPane \r            tab={<span className=\"test-performance-tab\"><SettingOutlined /> Performans</span>} \r            key=\"performance\"\r          >\r            <Row gutter={[16, 16]}>\r              <Col xs={24} md={12}>\r                <Card title=\"🚀 Lazy Loading\" size=\"small\">\r                  <Text>Scroll yaparak lazy loading test edin</Text>\r                  <div style={{ height: 200, overflow: 'auto', border: '1px solid #f0f0f0', marginTop: 16 }}>\r                    <div style={{ height: 500, padding: 16 }}>\r                      <LazyLoadedComponent />\r                    </div>\r                  </div>\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"⚡ Optimistic UI\" size=\"small\">\r                  <Space direction=\"vertical\">\r                    <Text>Count: {optimisticData.count}</Text>\r                    <Button onClick={testOptimisticUI} type=\"primary\">\r                      Test Optimistic Update\r                    </Button>\r                    <Text type=\"secondary\">2 saniye sonra rollback olacak</Text>\r                  </Space>\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"📈 Analytics\" size=\"small\">\r                  <Button onClick={testAnalytics} type=\"primary\">\r                    Send Analytics Event\r                  </Button>\r                  <Text type=\"secondary\" style={{ display: 'block', marginTop: 8 }}>\r                    Console'u kontrol edin\r                  </Text>\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"📱 PWA Support\" size=\"small\">\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    {isInstallable && (\r                      <Button onClick={install} type=\"primary\">\r                        PWA Olarak Yükle\r                      </Button>\r                    )}\r                    {isInstalled && (\r                      <Alert message=\"PWA yüklü!\" type=\"success\" />\r                    )}\r                    {!isInstallable && !isInstalled && (\r                      <Alert message=\"PWA yüklenemez (HTTPS gerekli)\" type=\"warning\" />\r                    )}\r                  </Space>\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          {/* Onboarding */}\r          <TabPane tab={<span><BugOutlined /> Onboarding</span>} key=\"onboarding\">\r            <Row gutter={[16, 16]}>\r              <Col xs={24} md={12}>\r                <Card title=\"🎯 Onboarding Tour\" size=\"small\">\r                  <Button \r                    onClick={() => setStartTour(true)} \r                    type=\"primary\"\r                  >\r                    Turu Başlat\r                  </Button>\r                  {startTour && (\r                    <OnboardingTour\r                      steps={tourSteps}\r                      autoStart={true}\r                      onComplete={() => {\r                        message.success('Tur tamamlandı!');\r                        setStartTour(false);\r                      }}\r                      onSkip={() => setStartTour(false)}\r                    />\r                  )}\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <OnboardingChecklist\r                  items={checklistItems}\r                  onItemComplete={(id) => message.success(`Görev ${id} tamamlandı!`)}\r                />\r              </Col>\r            </Row>\r          </TabPane>\r        </Tabs>\r      </Card>\r      {/* Quick Test Panel */}\r      <Card style={{ marginTop: 24 }}>\r        <Title level={4}>Hızlı Test Paneli</Title>\r        <Space direction=\"vertical\" style={{ width: '100%' }}>\r          <Alert\r            message=\"Test Bilgileri\"\r            description={\r              <ul>\r                <li>CAPTCHA Test Key: 6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI</li>\r                <li>E-posta Doğrulama Kodu: 123456</li>\r                <li>Referans Kodları: WELCOME20, FRIEND50</li>\r                <li>Rate Limit: 5 deneme / dakika</li>\r              </ul>\r            }\r            type=\"info\"\r            showIcon\r          />\r          <Divider />\r          <Title level={5}>Diğer Test Sayfaları</Title>\r          <Space wrap>\r            <Button type=\"primary\" onClick={() => window.location.href = '/test-wizard'}>\r              Register Wizard Test\r            </Button>\r            <Button onClick={() => window.location.href = '/signalr-test'}>\r              SignalR Test\r            </Button>\r            <Button onClick={() => window.location.href = '/test-sweetalert'}>\r              SweetAlert Test\r            </Button>\r          </Space>\r        </Space>\r      </Card>\r    </div>\r  );\r};\r// Lazy loaded component for testing\rconst LazyLoadedComponent: React.FC = () => {\r  const { ref, isLoaded } = useLazyLoad({ threshold: 0.1 });\r  return (\r    <div ref={ref as any} style={{ marginTop: 400 }}>\r      {isLoaded ? (\r        <Alert message=\"Component yüklendi!\" type=\"success\" />\r      ) : (\r        <Text>Scroll yapın...</Text>\r      )}\r    </div>\r  );\r};\r// Default export\rexport default FeatureTestPage;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/test/pages/FeatureTestPage/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport {\r  Card,\r  Tabs,\r  Button,\r  Space,\r  Typography,\r  Alert,\r  Form,\r  Input,\r  Badge,\r  message,\r  Row,\r  Col,\r  Progress,\r  Divider\r} from 'antd';\rimport {\r  SafetyOutlined,\r  RocketOutlined,\r  SettingOutlined,\r  ExperimentOutlined,\r  CheckCircleOutlined\r} from '@ant-design/icons';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst SimpleFeatureTest: React.FC = () => {\r  const [activeTab, setActiveTab] = useState('overview');\r  const [testResults, setTestResults] = useState<Record<string, boolean>>({});\r  // Test form data\r  const [formData, setFormData] = useState({\r    name: '',\r    email: '',\r    password: '',\r    company: ''\r  });\r  const runTest = (testName: string, testFn: () => boolean) => {\r    try {\r      const result = testFn();\r      setTestResults(prev => ({ ...prev, [testName]: result }));\r      if (result) {\r        message.success(`${testName} testi başarılı!`);\r      } else {\r        message.error(`${testName} testi başarısız!`);\r      }\r    } catch (error) {\r      message.error(`${testName} test hatası: ${error}`);\r      setTestResults(prev => ({ ...prev, [testName]: false }));\r    }\r  };\r  const completedTests = Object.values(testResults).filter(r => r).length;\r  const totalTests = Object.keys(testResults).length;\r  const progress = totalTests > 0 ? (completedTests / totalTests) * 100 : 0;\r  return (\r    <div style={{ padding: 24, maxWidth: 1200, margin: '0 auto' }}>\r      <Card>\r        <div style={{ marginBottom: 24 }}>\r          <Title level={2}>\r            <ExperimentOutlined /> Özellik Test Sayfası\r          </Title>\r          <Paragraph>\r            Tüm eklenen özellikleri buradan test edebilirsiniz.\r          </Paragraph>\r          {totalTests > 0 && (\r            <>\r              <Progress percent={Math.round(progress)} status={progress === 100 ? 'success' : 'active'} />\r              <Text>{completedTests}/{totalTests} test tamamlandı</Text>\r            </>\r          )}\r        </div>\r        <Tabs activeKey={activeTab} onChange={setActiveTab}>\r          {/* Overview Tab */}\r          <TabPane tab={<span><CheckCircleOutlined /> Genel Bakış</span>} key=\"overview\">\r            <Alert\r              message=\"Eklenen Özellikler\"\r              description={\r                <ul>\r                  <li>✅ CAPTCHA/reCAPTCHA entegrasyonu</li>\r                  <li>✅ Rate limiting</li>\r                  <li>✅ 2FA (Two-Factor Authentication)</li>\r                  <li>✅ E-posta doğrulama</li>\r                  <li>✅ Şifre göster/gizle</li>\r                  <li>✅ Form auto-save</li>\r                  <li>✅ Progress indicator</li>\r                  <li>✅ Sosyal medya girişi</li>\r                  <li>✅ Lazy loading</li>\r                  <li>✅ Optimistic UI</li>\r                  <li>✅ Analytics</li>\r                  <li>✅ Referans sistemi</li>\r                  <li>✅ Canlı destek</li>\r                  <li>✅ Çoklu dil desteği</li>\r                  <li>✅ Onboarding tour</li>\r                  <li>✅ PWA desteği</li>\r                  <li>✅ Biometric authentication</li>\r                </ul>\r              }\r              type=\"success\"\r              showIcon\r            />\r            <Divider />\r            <Title level={4}>Hızlı Testler</Title>\r            <Space wrap>\r              <Button \r                type=\"primary\"\r                onClick={() => runTest('LocalStorage', () => {\r                  localStorage.setItem('test', 'value');\r                  return localStorage.getItem('test') === 'value';\r                })}\r              >\r                LocalStorage Test\r              </Button>\r              <Button \r                type=\"primary\"\r                onClick={() => runTest('SessionStorage', () => {\r                  sessionStorage.setItem('test', 'value');\r                  return sessionStorage.getItem('test') === 'value';\r                })}\r              >\r                SessionStorage Test\r              </Button>\r              <Button \r                type=\"primary\"\r                onClick={() => runTest('Notification', () => {\r                  return 'Notification' in window;\r                })}\r              >\r                Notification API Test\r              </Button>\r              <Button \r                type=\"primary\"\r                onClick={() => runTest('ServiceWorker', () => {\r                  return 'serviceWorker' in navigator;\r                })}\r              >\r                Service Worker Test\r              </Button>\r              <Button \r                type=\"primary\"\r                onClick={() => runTest('WebAuthn', () => {\r                  return !!window.PublicKeyCredential;\r                })}\r              >\r                WebAuthn Test\r              </Button>\r            </Space>\r          </TabPane>\r          {/* Security Tab */}\r          <TabPane tab={<span><SafetyOutlined /> Güvenlik</span>} key=\"security\">\r            <Row gutter={[16, 16]}>\r              <Col xs={24} md={12}>\r                <Card title=\"Rate Limiting\" size=\"small\">\r                  <Alert\r                    message=\"Test: Butona 5 kez tıklayın\"\r                    type=\"info\"\r                    style={{ marginBottom: 16 }}\r                  />\r                  <RateLimitTest />\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"Password Strength\" size=\"small\">\r                  <PasswordStrengthTest />\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"Form Validation\" size=\"small\">\r                  <FormValidationTest />\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          {/* UX Tab */}\r          <TabPane tab={<span><RocketOutlined /> UX</span>} key=\"ux\">\r            <Row gutter={[16, 16]}>\r              <Col xs={24} md={12}>\r                <Card title=\"Form Auto-Save\" size=\"small\">\r                  <Form layout=\"vertical\">\r                    <Form.Item label=\"İsim\">\r                      <Input\r                        value={formData.name}\r                        onChange={(e) = aria-label=\"input field\"> {\r                          const newData = { ...formData, name: e.target.value };\r                          setFormData(newData);\r                          // Simulate auto-save\r                          localStorage.setItem('formData', JSON.stringify(newData));\r                          message.info('Otomatik kaydedildi', 0.5);\r                        }}\r                        placeholder=\"Yazın, otomatik kaydedilecek...\"\r                      />\r                    </Form.Item>\r                  </Form>\r                  <Button \r                    onClick={() => {\r                      const saved = localStorage.getItem('formData');\r                      if (saved) {\r                        setFormData(JSON.parse(saved));\r                        message.success('Form verileri geri yüklendi');\r                      }\r                    }}\r                  >\r                    Geri Yükle\r                  </Button>\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"Progress Indicator\" size=\"small\">\r                  <FormProgressTest formData={formData} />\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          {/* Performance Tab */}\r          <TabPane tab={<span><SettingOutlined /> Performans</span>} key=\"performance\">\r            <Row gutter={[16, 16]}>\r              <Col xs={24} md={12}>\r                <Card title=\"Browser Info\" size=\"small\">\r                  <BrowserInfoTest />\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"Network Status\" size=\"small\">\r                  <NetworkStatusTest />\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r        </Tabs>\r      </Card>\r    </div>\r  );\r};\r// Sub-components for testing\rconst RateLimitTest: React.FC = () => {\r  const [clicks, setClicks] = useState(0);\r  const [blocked, setBlocked] = useState(false);\r  const maxClicks = 5;\r  const handleClick = () => {\r    if (clicks >= maxClicks) {\r      setBlocked(true);\r      message.error('Rate limit aşıldı! 5 saniye bekleyin.');\r      setTimeout(() => {\r        setClicks(0);\r        setBlocked(false);\r      }, 5000);\r      return;\r    }\r    setClicks(clicks + 1);\r    message.info(`Tıklama: ${clicks + 1}/${maxClicks}`);\r  };\r  return (\r    <Space direction=\"vertical\" style={{ width: '100%' }}>\r      <Progress percent={(clicks / maxClicks) * 100} status={blocked ? 'exception' : 'active'} />\r      <Button onClick={handleClick} disabled={blocked} type=\"primary\">\r        Test Et ({clicks}/{maxClicks})\r      </Button>\r      {blocked && <Alert message=\"Rate limit aktif!\" type=\"error\" />}\r    </Space>\r  );\r};\rconst PasswordStrengthTest: React.FC = () => {\r  const [password, setPassword] = useState('');\r  const getStrength = () => {\r    if (!password) return 0;\r    let strength = 0;\r    if (password.length >= 8) strength += 25;\r    if (/[A-Z]/.test(password)) strength += 25;\r    if (/[0-9]/.test(password)) strength += 25;\r    if (/[^A-Za-z0-9]/.test(password)) strength += 25;\r    return strength;\r  };\r  const strength = getStrength();\r  const strengthText = strength === 0 ? 'Çok Zayıf' : \r                       strength <= 25 ? 'Zayıf' :\r                       strength <= 50 ? 'Orta' :\r                       strength <= 75 ? 'İyi' : 'Güçlü';\r  return (\r    <Space direction=\"vertical\" style={{ width: '100%' }}>\r      <Input.Password\r        value={password}\r        onChange={(e) = aria-label=\"input field\"> setPassword(e.target.value)}\r        placeholder=\"Şifre girin...\"\r      />\r      <Progress \r        percent={strength} \r        status={strength === 100 ? 'success' : strength >= 50 ? 'active' : 'exception'}\r        format={() => strengthText}\r      />\r      <Text type=\"secondary\">\r        ✓ En az 8 karakter {password.length >= 8 && '✓'}<br />\r        ✓ Büyük harf {/[A-Z]/.test(password) && '✓'}<br />\r        ✓ Rakam {/[0-9]/.test(password) && '✓'}<br />\r        ✓ Özel karakter {/[^A-Za-z0-9]/.test(password) && '✓'}\r      </Text>\r    </Space>\r  );\r};\rconst FormValidationTest: React.FC = () => {\r  const [email, setEmail] = useState('');\r  const [isValid, setIsValid] = useState<boolean | null>(null);\r  const validateEmail = (email: string) => {\r    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r    return re.test(email);\r  };\r  return (\r    <Space direction=\"vertical\" style={{ width: '100%' }}>\r      <Input\r        value={email}\r        onChange={(e) = aria-label=\"input field\"> {\r          setEmail(e.target.value);\r          setIsValid(e.target.value ? validateEmail(e.target.value) : null);\r        }}\r        placeholder=\"E-posta adresi girin...\"\r        status={isValid === false ? 'error' : isValid === true ? 'success' : ''}\r      />\r      {isValid !== null && (\r        <Alert\r          message={isValid ? 'Geçerli e-posta' : 'Geçersiz e-posta'}\r          type={isValid ? 'success' : 'error'}\r          showIcon\r        />\r      )}\r    </Space>\r  );\r};\rconst FormProgressTest: React.FC<{ formData: any }> = ({ formData }) => {\r  const fields = ['name', 'email', 'password', 'company'];\r  const filled = fields.filter(field => formData[field]).length;\r  const progress = (filled / fields.length) * 100;\r  return (\r    <Space direction=\"vertical\" style={{ width: '100%' }}>\r      <Progress percent={progress} status={progress === 100 ? 'success' : 'active'} />\r      <Text>{filled}/{fields.length} alan dolduruldu</Text>\r      <Space>\r        {fields.map(field => (\r          <Badge\r            key={field}\r            status={formData[field] ? 'success' : 'default'}\r            text={field}\r          />\r        ))}\r      </Space>\r    </Space>\r  );\r};\rconst BrowserInfoTest: React.FC = () => {\r  const info = {\r    'User Agent': navigator.userAgent.substring(0, 50) + '...',\r    'Platform': navigator.platform,\r    'Language': navigator.language,\r    'Cookies Enabled': navigator.cookieEnabled ? 'Evet' : 'Hayır',\r    'Online': navigator.onLine ? 'Evet' : 'Hayır',\r    'Screen': `${screen.width}x${screen.height}`,\r  };\r  return (\r    <Space direction=\"vertical\" style={{ width: '100%' }}>\r      {Object.entries(info).map(([key, value]) => (\r        <div key={key}>\r          <Text strong>{key}: </Text>\r          <Text>{value}</Text>\r        </div>\r      ))}\r    </Space>\r  );\r};\rconst NetworkStatusTest: React.FC = () => {\r  const [isOnline, setIsOnline] = useState(navigator.onLine);\r  React.useEffect(() => {\r    const handleOnline = () => setIsOnline(true);\r    const handleOffline = () => setIsOnline(false);\r    window.addEventListener('online', handleOnline);\r    window.addEventListener('offline', handleOffline);\r    return () => {\r      window.removeEventListener('online', handleOnline);\r      window.removeEventListener('offline', handleOffline);\r    };\r  }, []);\r  return (\r    <Space direction=\"vertical\" style={{ width: '100%' }}>\r      <Badge status={isOnline ? 'success' : 'error'} text={isOnline ? 'Online' : 'Offline'} />\r      <Alert\r        message={isOnline ? 'İnternet bağlantısı var' : 'İnternet bağlantısı yok'}\r        type={isOnline ? 'success' : 'error'}\r        showIcon\r      />\r    </Space>\r  );\r};\rexport default SimpleFeatureTest;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/test/pages/FeatureTestPage/SimpleTest.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { Card, Button, Space, Typography, Divider, Tag, Alert } from 'antd';\rimport { ReloadOutlined, ArrowLeftOutlined, CheckCircleOutlined } from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport { ModernWizard } from '@/features/register/pages/RegisterPage/ModernWizard';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rexport const RegisterWizardTest: React.FC = () => {\r  const navigate = useNavigate();\r  const [wizardKey, setWizardKey] = useState(0);\r  const [completedData, setCompletedData] = useState<any>(null);\r  const [showResult, setShowResult] = useState(false);\r  const handleWizardComplete = (data: any) => {\r    setCompletedData(data);\r    setShowResult(true);\r  };\r  const resetWizard = () => {\r    setWizardKey(prev => prev + 1);\r    setCompletedData(null);\r    setShowResult(false);\r  };\r  // Mock package for testing\r  const mockPackage = {\r    id: 'test-package-1',\r    name: 'Test Paketi',\r    description: 'Test için kullanılan paket',\r    price: 999,\r    currency: '₺',\r    features: ['Özellik 1', 'Özellik 2', 'Özellik 3'],\r    maxUsers: 10,\r    maxStorage: 50,\r    modules: ['CRM', 'Inventory']\r  };\r  // Mock SignalR validation (always returns success immediately)\r  const mockSignalRValidation = {\r    isConnected: false, // Disable connection to skip validations\r    emailValidation: { isValid: true, message: 'Test mode - always valid' },\r    passwordStrength: { \r      score: 5, \r      level: 'VeryStrong', \r      color: '#52c41a',\r      suggestions: [],\r      hasUpperCase: true,\r      hasLowerCase: true,\r      hasDigit: true,\r      hasSpecialChar: true\r    },\r    domainCheck: { isAvailable: true, message: 'Test mode - always available' },\r    phoneValidation: { isValid: true, message: 'Test mode - always valid' },\r    companyNameCheck: { isValid: true, isUnique: true, message: 'Test mode - always valid' },\r    identityValidation: { isValid: true, message: 'Test mode - always valid' },\r    tenantCodeValidation: { isAvailable: true, message: 'Test mode - always available', code: '', suggestedCodes: [] },\r    validateEmail: async () => Promise.resolve(),\r    checkPasswordStrength: async () => Promise.resolve(),\r    checkDomain: async () => Promise.resolve(),\r    validatePhone: async () => Promise.resolve(),\r    checkCompanyName: async () => Promise.resolve(),\r    validateIdentity: async () => Promise.resolve(),\r    validateTenantCode: async () => Promise.resolve(),\r    error: null\r  };\r  return (\r    <div className=\"register-wizard-test-container\">\r      <Card className=\"test-header-card\">\r        <Space direction=\"vertical\" style={{ width: '100%' }}>\r          <Space style={{ justifyContent: 'space-between', width: '100%' }}>\r            <Space>\r              <Button \r                icon={<ArrowLeftOutlined />} \r                onClick={() = aria-label=\"arrow left outlined\"> navigate('/test')}\r              >\r                Test Sayfasına Dön\r              </Button>\r            </Space>\r            <Title level={3} style={{ margin: 0 }}>Register Wizard Test</Title>\r            <Space>\r              <Button \r                type=\"primary\" \r                icon={<ReloadOutlined />} \r                onClick={resetWizard}\r               aria-label=\"reload outlined\">\r                Wizard'ı Sıfırla\r              </Button>\r            </Space>\r          </Space>\r          <Divider style={{ margin: '12px 0' }} />\r          <Space wrap>\r            <Tag color=\"blue\">Validasyon Kapalı</Tag>\r            <Tag color=\"green\">Test Modu</Tag>\r            <Tag color=\"orange\">Mock Data</Tag>\r          </Space>\r          <Alert\r            message=\"Test Modu\"\r            description=\"Bu sayfa sadece wizard'ın görsel ve işlevsel testleri içindir. Validasyonlar devre dışı bırakılmıştır.\"\r            type=\"info\"\r            showIcon\r          />\r        </Space>\r      </Card>\r      {!showResult ? (\r        <div className=\"wizard-test-wrapper\">\r          <ModernWizard\r            key={wizardKey}\r            onComplete={handleWizardComplete}\r            selectedPackage={mockPackage}\r            signalRValidation={mockSignalRValidation}\r          />\r        </div>\r      ) : (\r        <Card className=\"result-card\">\r          <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\r            <div style={{ textAlign: 'center' }}>\r              <CheckCircleOutlined style={{ fontSize: 64, color: '#52c41a' }} />\r              <Title level={3} style={{ marginTop: 16 }}>Wizard Tamamlandı!</Title>\r            </div>\r            <Card type=\"inner\" title=\"Toplanan Veriler\">\r              <pre className=\"data-preview\">\r                {JSON.stringify(completedData, null, 2)}\r              </pre>\r            </Card>\r            <Space style={{ width: '100%', justifyContent: 'center' }}>\r              <Button type=\"primary\" onClick={resetWizard}>\r                Yeni Test Başlat\r              </Button>\r              <Button onClick={() => setShowResult(false)}>\r                Wizard'a Geri Dön\r              </Button>\r            </Space>\r          </Space>\r        </Card>\r      )}\r      <Card className=\"test-info-card\">\r        <Title level={4}>Test Bilgileri</Title>\r        <Divider />\r        <Space direction=\"vertical\" style={{ width: '100%' }}>\r          <div>\r            <Text strong>Wizard Durumu:</Text>\r            <Text> {showResult ? 'Tamamlandı' : 'Devam Ediyor'}</Text>\r          </div>\r          <div>\r            <Text strong>Test Sayısı:</Text>\r            <Text> {wizardKey + 1}</Text>\r          </div>\r          <div>\r            <Text strong>Mock Paket:</Text>\r            <Text> {mockPackage.name} - {mockPackage.currency}{mockPackage.price}/ay</Text>\r          </div>\r        </Space>\r        <Divider />\r        <Title level={5}>Test Edilecek Özellikler</Title>\r        <ul className=\"test-checklist\">\r          <li>Step geçişleri</li>\r          <li>Form validasyonları (kapalı)</li>\r          <li>Paket seçimi görünümü</li>\r          <li>Responsive tasarım</li>\r          <li>İleri/Geri butonları</li>\r          <li>Progress bar</li>\r          <li>Form alanları</li>\r          <li>Captcha entegrasyonu</li>\r          <li>E-posta doğrulama</li>\r        </ul>\r      </Card>\r    </div>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/test/pages/RegisterWizardTest/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React from 'react';\rimport { Button, Space } from 'antd';\rimport { showApiResponse } from '@/shared/utils/sweetAlert';\rimport Swal from 'sweetalert2';\rconst TestSweetAlert: React.FC = () => {\r  const testSuccess = () => {\r    showApiResponse.success('İşlem başarıyla tamamlandı!', 'Başarılı');\r  };\r  const testError = () => {\r    showApiResponse.error(\r      {\r        response: {\r          data: {\r            message: 'E-posta adresi zaten kullanımda',\r            errors: {\r              email: ['Bu e-posta adresi başka bir hesap tarafından kullanılıyor'],\r              password: ['Şifre en az 8 karakter olmalı', 'Şifre en az bir büyük harf içermeli']\r            }\r          },\r          status: 400\r        }\r      },\r      'Kayıt işlemi başarısız'\r    );\r  };\r  const testWarning = () => {\r    showApiResponse.warning('Dikkat! Bu işlem geri alınamaz.', 'Uyarı');\r  };\r  const testInfo = () => {\r    showApiResponse.info('Hesabınız 24 saat içinde aktif olacaktır.', 'Bilgilendirme');\r  };\r  const testLoading = () => {\r    showApiResponse.loading('İşleminiz gerçekleştiriliyor...');\r    setTimeout(() => {\r      Swal.close();\r      showApiResponse.success('İşlem tamamlandı!');\r    }, 3000);\r  };\r  const testToast = () => {\r    showApiResponse.toast.success('Ayarlar kaydedildi');\r    setTimeout(() => {\r      showApiResponse.toast.error('Bağlantı hatası');\r    }, 1000);\r    setTimeout(() => {\r      showApiResponse.toast.warning('Disk alanı azalıyor');\r    }, 2000);\r    setTimeout(() => {\r      showApiResponse.toast.info('Yeni güncelleme mevcut');\r    }, 3000);\r  };\r  const testConfirm = async () => {\r    const result = await showApiResponse.confirm(\r      'Bu hesabı silmek istediğinizden emin misiniz?',\r      'Hesap Silme',\r      'Evet, Sil',\r      'İptal'\r    );\r    if (result) {\r      showApiResponse.success('Hesap başarıyla silindi');\r    } else {\r      showApiResponse.info('İşlem iptal edildi');\r    }\r  };\r  const testPrompt = async () => {\r    const result = await showApiResponse.prompt(\r      'Yeni Kategori Oluştur',\r      'Kategori Adı:',\r      'Örn: Elektronik',\r      ''\r    );\r    if (result) {\r      showApiResponse.success(`\"${result}\" kategorisi oluşturuldu`);\r    }\r  };\r  return (\r    <div style={{ padding: '50px', background: '#f5f5f5', minHeight: '100vh' }}>\r      <h1>SweetAlert2 Test Sayfası</h1>\r      <Space direction=\"vertical\" size={20} style={{ width: '100%' }}>\r        <div>\r          <h3>Temel Alert Tipleri</h3>\r          <Space wrap>\r            <Button type=\"primary\" onClick={testSuccess}>Başarı Mesajı</Button>\r            <Button danger onClick={testError}>Hata Mesajı (Detaylı)</Button>\r            <Button onClick={testWarning}>Uyarı Mesajı</Button>\r            <Button onClick={testInfo}>Bilgi Mesajı</Button>\r            <Button onClick={testLoading}>Loading Mesajı</Button>\r          </Space>\r        </div>\r        <div>\r          <h3>Toast Bildirimleri</h3>\r          <Button onClick={testToast}>Toast Mesajları (Sıralı)</Button>\r        </div>\r        <div>\r          <h3>Etkileşimli Dialog'lar</h3>\r          <Space wrap>\r            <Button onClick={testConfirm}>Onay Dialog'u</Button>\r            <Button onClick={testPrompt}>Input Dialog'u</Button>\r          </Space>\r        </div>\r      </Space>\r    </div>\r  );\r};\rexport default TestSweetAlert;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/test/TestSweetAlert.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { Layout, Typography, Card, Row, Col, Button, Tag, Space, Input, Select, Tabs } from 'antd';\rimport {\r  PlayCircleOutlined,\r  BookOutlined,\r  ClockCircleOutlined,\r  UserOutlined,\r  StarOutlined,\r  SearchOutlined,\r  FilterOutlined,\r  RocketOutlined,\r  ArrowLeftOutlined\r} from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport './style.css';\rconst { Header, Content } = Layout;\rconst { Title, Text, Paragraph } = Typography;\rconst { Search } = Input;\rconst { Option } = Select;\rinterface Video {\r  id: number;\r  title: string;\r  description: string;\r  duration: string;\r  category: string;\r  level: 'Başlangıç' | 'Orta' | 'İleri';\r  thumbnail: string;\r  instructor: string;\r  views: number;\r  rating: number;\r}\rinterface Tutorial {\r  id: number;\r  title: string;\r  description: string;\r  readTime: string;\r  category: string;\r  level: 'Başlangıç' | 'Orta' | 'İleri';\r  author: string;\r  date: string;\r}\rexport const TrainingPage: React.FC = () => {\r  const navigate = useNavigate();\r  const [searchText, setSearchText] = useState('');\r  const [selectedCategory, setSelectedCategory] = useState('all');\r  const [selectedLevel, setSelectedLevel] = useState('all');\r  const [activeTab, setActiveTab] = useState('videos');\r  const videos: Video[] = [\r    {\r      id: 1,\r      title: \"Stocker'a Başlarken\",\r      description: 'Platform hakkında genel bilgiler ve ilk adımlar',\r      duration: '12:45',\r      category: 'Genel',\r      level: 'Başlangıç',\r      thumbnail: 'https://images.unsplash.com/photo-1611162617474-5b21e879e113?w=400&h=225&fit=crop',\r      instructor: 'Ahmet Yılmaz',\r      views: 1250,\r      rating: 4.8\r    },\r    {\r      id: 2,\r      title: 'Stok Yönetimi Modülü',\r      description: 'Stok takibi, envanter yönetimi ve raporlama',\r      duration: '25:30',\r      category: 'Modüller',\r      level: 'Orta',\r      thumbnail: 'https://images.unsplash.com/photo-1586281380349-632531db7ed4?w=400&h=225&fit=crop',\r      instructor: 'Mehmet Demir',\r      views: 890,\r      rating: 4.7\r    },\r    {\r      id: 3,\r      title: 'CRM Modülü Detaylı Anlatım',\r      description: 'Müşteri ilişkileri yönetimi ve satış süreçleri',\r      duration: '32:15',\r      category: 'Modüller',\r      level: 'Orta',\r      thumbnail: 'https://images.unsplash.com/photo-1552664730-d307ca884978?w=400&h=225&fit=crop',\r      instructor: 'Ayşe Kara',\r      views: 1120,\r      rating: 4.9\r    },\r    {\r      id: 4,\r      title: 'Muhasebe Entegrasyonları',\r      description: 'e-Fatura, e-Arşiv ve muhasebe sistemleri entegrasyonu',\r      duration: '18:20',\r      category: 'Entegrasyonlar',\r      level: 'İleri',\r      thumbnail: 'https://images.unsplash.com/photo-1554224155-6726b3ff858f?w=400&h=225&fit=crop',\r      instructor: 'Fatma Şahin',\r      views: 650,\r      rating: 4.6\r    },\r    {\r      id: 5,\r      title: 'Raporlama ve Analizler',\r      description: 'Özel raporlar oluşturma ve veri analizi',\r      duration: '28:40',\r      category: 'Raporlama',\r      level: 'İleri',\r      thumbnail: 'https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=400&h=225&fit=crop',\r      instructor: 'Ali Veli',\r      views: 780,\r      rating: 4.8\r    },\r    {\r      id: 6,\r      title: 'İnsan Kaynakları Modülü',\r      description: 'Personel yönetimi, bordro ve izin takibi',\r      duration: '22:10',\r      category: 'Modüller',\r      level: 'Orta',\r      thumbnail: 'https://images.unsplash.com/photo-1521737711867-e3b97375f902?w=400&h=225&fit=crop',\r      instructor: 'Zeynep Yıldız',\r      views: 540,\r      rating: 4.7\r    }\r  ];\r  const tutorials: Tutorial[] = [\r    {\r      id: 1,\r      title: 'Hızlı Başlangıç Rehberi',\r      description: 'Stocker platformunu kullanmaya başlamak için ihtiyacınız olan temel bilgiler',\r      readTime: '5 dk',\r      category: 'Başlangıç',\r      level: 'Başlangıç',\r      author: 'Stocker Team',\r      date: '2024-01-15'\r    },\r    {\r      id: 2,\r      title: 'Gelişmiş Stok Yönetimi Teknikleri',\r      description: 'ABC analizi, minimum-maksimum stok seviyeleri ve otomatik sipariş sistemleri',\r      readTime: '12 dk',\r      category: 'İleri Düzey',\r      level: 'İleri',\r      author: 'Dr. Mehmet Özkan',\r      date: '2024-01-12'\r    },\r    {\r      id: 3,\r      title: 'API Kullanımı ve Entegrasyonlar',\r      description: 'REST API ile özel entegrasyonlar geliştirme',\r      readTime: '15 dk',\r      category: 'Geliştirici',\r      level: 'İleri',\r      author: 'Teknik Ekip',\r      date: '2024-01-10'\r    },\r    {\r      id: 4,\r      title: 'Satış Süreci Optimizasyonu',\r      description: 'CRM modülü ile satış süreçlerinizi optimize etme yöntemleri',\r      readTime: '8 dk',\r      category: 'Satış',\r      level: 'Orta',\r      author: 'Satış Uzmanları',\r      date: '2024-01-08'\r    }\r  ];\r  const categories = [\r    { value: 'all', label: 'Tüm Kategoriler' },\r    { value: 'general', label: 'Genel' },\r    { value: 'modules', label: 'Modüller' },\r    { value: 'integrations', label: 'Entegrasyonlar' },\r    { value: 'reporting', label: 'Raporlama' },\r    { value: 'developer', label: 'Geliştirici' }\r  ];\r  const levels = [\r    { value: 'all', label: 'Tüm Seviyeler' },\r    { value: 'beginner', label: 'Başlangıç' },\r    { value: 'intermediate', label: 'Orta' },\r    { value: 'advanced', label: 'İleri' }\r  ];\r  const getLevelColor = (level: string) => {\r    switch (level) {\r      case 'Başlangıç': return 'green';\r      case 'Orta': return 'blue';\r      case 'İleri': return 'purple';\r      default: return 'default';\r    }\r  };\r  return (\r    <Layout className=\"training-layout\">\r      <Header className=\"training-header\">\r        <div className=\"header-container\">\r          <div className=\"header-content\">\r            <Button \r              icon={<ArrowLeftOutlined />} \r              onClick={() = aria-label=\"arrow left outlined\"> navigate('/')}\r              type=\"text\"\r              style={{ marginRight: 16 }}\r            >\r              Ana Sayfa\r            </Button>\r            <div className=\"logo-section\" onClick={() => navigate('/')} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => navigate('/')(e)}>\r              <RocketOutlined className=\"logo-icon\" />\r              <span className=\"logo-text\">Stocker Eğitim Merkezi</span>\r            </div>\r          </div>\r          <div className=\"header-actions\">\r            <Button onClick={() => navigate('/login')}>Giriş Yap</Button>\r            <Button type=\"primary\" onClick={() => navigate('/register')}>\r              Ücretsiz Dene\r            </Button>\r          </div>\r        </div>\r      </Header>\r      <Content className=\"training-content\">\r        <div className=\"hero-section\">\r          <Title level={1}>Eğitim ve Video Rehberleri</Title>\r          <Paragraph>\r            Stocker platformunu en verimli şekilde kullanmanız için hazırladığımız \r            kapsamlı eğitim içerikleri ve video rehberleri\r          </Paragraph>\r        </div>\r        <div className=\"filter-section\">\r          <Row gutter={[16, 16]} align=\"middle\">\r            <Col xs={24} sm={8}>\r              <Search\r                placeholder=\"Eğitim ara...\"\r                onSearch={setSearchText}\r                onChange={(e) => setSearchText(e.target.value)}\r                prefix={<SearchOutlined />}\r                size=\"large\"\r              />\r            </Col>\r            <Col xs={12} sm={4}>\r              <Select\r                defaultValue=\"all\"\r                style={{ width: '100%' }}\r                onChange={setSelectedCategory}\r                size=\"large\"\r               aria-label=\"select field\">\r                {categories.map(cat => (\r                  <Option key={cat.value} value={cat.value}>{cat.label}</Option>\r                ))}\r              </Select>\r            </Col>\r            <Col xs={12} sm={4}>\r              <Select\r                defaultValue=\"all\"\r                style={{ width: '100%' }}\r                onChange={setSelectedLevel}\r                size=\"large\"\r               aria-label=\"select field\">\r                {levels.map(level => (\r                  <Option key={level.value} value={level.value}>{level.label}</Option>\r                ))}\r              </Select>\r            </Col>\r          </Row>\r        </div>\r        <Tabs \r          activeKey={activeTab} \r          onChange={setActiveTab}\r          size=\"large\"\r          className=\"content-tabs\"\r        >\r          <Tabs.TabPane tab={<span><PlayCircleOutlined /> Video Eğitimler</span>} key=\"videos\">\r            <Row gutter={[24, 24]}>\r              {videos.map(video => (\r                <Col xs={24} sm={12} lg={8} key={video.id}>\r                  <Card \r                    hoverable\r                    cover={\r                      <div className=\"video-thumbnail\">\r                        <img alt={video.title} src={video.thumbnail} />\r                        <div className=\"duration-badge\">{video.duration}</div>\r                        <PlayCircleOutlined className=\"play-icon\" />\r                      </div>\r                    }\r                    className=\"video-card\"\r                  >\r                    <Tag color={getLevelColor(video.level)}>{video.level}</Tag>\r                    <Title level={4}>{video.title}</Title>\r                    <Paragraph ellipsis={{ rows: 2 }}>{video.description}</Paragraph>\r                    <div className=\"video-meta\">\r                      <Space>\r                        <Text type=\"secondary\">\r                          <UserOutlined /> {video.instructor}\r                        </Text>\r                        <Text type=\"secondary\">•</Text>\r                        <Text type=\"secondary\">{video.views} görüntülenme</Text>\r                      </Space>\r                      <div className=\"rating\">\r                        <StarOutlined style={{ color: '#faad14' }} />\r                        <Text strong>{video.rating}</Text>\r                      </div>\r                    </div>\r                  </Card>\r                </Col>\r              ))}\r            </Row>\r          </Tabs.TabPane>\r          <Tabs.TabPane tab={<span><BookOutlined /> Yazılı Rehberler</span>} key=\"tutorials\">\r            <Row gutter={[24, 24]}>\r              {tutorials.map(tutorial => (\r                <Col xs={24} sm={12} lg={8} key={tutorial.id}>\r                  <Card hoverable className=\"tutorial-card\">\r                    <Space direction=\"vertical\" style={{ width: '100%' }}>\r                      <div>\r                        <Tag color={getLevelColor(tutorial.level)}>{tutorial.level}</Tag>\r                        <Tag><ClockCircleOutlined /> {tutorial.readTime}</Tag>\r                      </div>\r                      <Title level={4}>{tutorial.title}</Title>\r                      <Paragraph ellipsis={{ rows: 2 }}>{tutorial.description}</Paragraph>\r                      <div className=\"tutorial-meta\">\r                        <Text type=\"secondary\">\r                          <UserOutlined /> {tutorial.author}\r                        </Text>\r                        <Text type=\"secondary\">{tutorial.date}</Text>\r                      </div>\r                      <Button type=\"primary\" block>Okumaya Başla</Button>\r                    </Space>\r                  </Card>\r                </Col>\r              ))}\r            </Row>\r          </Tabs.TabPane>\r        </Tabs>\r        <div className=\"cta-section\">\r          <Card>\r            <Row align=\"middle\" gutter={24}>\r              <Col xs={24} md={16}>\r                <Title level={3}>Daha Fazla Eğitim İçeriğine Mi İhtiyacınız Var?</Title>\r                <Paragraph>\r                  Canlı eğitimlerimize katılın veya özel eğitim talebinde bulunun.\r                </Paragraph>\r              </Col>\r              <Col xs={24} md={8} style={{ textAlign: 'right' }}>\r                <Space>\r                  <Button size=\"large\">Canlı Eğitimler</Button>\r                  <Button type=\"primary\" size=\"large\">İletişime Geç</Button>\r                </Space>\r              </Col>\r            </Row>\r          </Card>\r        </div>\r      </Content>\r    </Layout>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/training/pages/TrainingPage/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Table,\r  Button,\r  Space,\r  Tag,\r  Input,\r  Select,\r  Modal,\r  Form,\r  Row,\r  Col,\r  Avatar,\r  Dropdown,\r  message,\r  Tooltip,\r  Badge,\r  Switch,\r  Divider,\r  Typography,\r  Descriptions,\r  Alert,\r  Popconfirm,\r  Timeline,\r  Tabs,\r  List,\r  Statistic,\r} from 'antd';\rimport {\r  UserAddOutlined,\r  SearchOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  MoreOutlined,\r  LockOutlined,\r  UnlockOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  TeamOutlined,\r  SafetyOutlined,\r  KeyOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  ExclamationCircleOutlined,\r  ReloadOutlined,\r  DownloadOutlined,\r  UserOutlined,\r  CalendarOutlined,\r  ClockCircleOutlined,\r  EyeOutlined,\r  EyeInvisibleOutlined,\r} from '@ant-design/icons';\rimport { PageHeader } from '@/shared/components/PageHeader';\rimport { DataTable } from '@/shared/components/DataTable';\rimport { formatDate, formatPhoneNumber } from '@/shared/utils/formatters';\rimport { formRules } from '@/shared/utils/validators';\rimport type { ColumnsType } from 'antd/es/table';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Option } = Select;\rconst { TabPane } = Tabs;\rinterface User {\r  id: string;\r  email: string;\r  firstName: string;\r  lastName: string;\r  fullName: string;\r  phoneNumber?: string;\r  role: string;\r  department?: string;\r  title?: string;\r  isActive: boolean;\r  emailVerified: boolean;\r  lastLogin?: string;\r  createdAt: string;\r  avatar?: string;\r  permissions?: string[];\r}\rinterface UserFormData {\r  email: string;\r  firstName: string;\r  lastName: string;\r  phoneNumber?: string;\r  role: string;\r  department?: string;\r  title?: string;\r  password?: string;\r  confirmPassword?: string;\r  sendWelcomeEmail?: boolean;\r}\rexport const TenantUsers: React.FC = () => {\r  const [users, setUsers] = useState<User[]>([]);\r  const [loading, setLoading] = useState(false);\r  const [searchText, setSearchText] = useState('');\r  const [selectedRole, setSelectedRole] = useState<string>('all');\r  const [selectedStatus, setSelectedStatus] = useState<string>('all');\r  const [selectedUser, setSelectedUser] = useState<User | null>(null);\r  const [isModalVisible, setIsModalVisible] = useState(false);\r  const [isDetailModalVisible, setIsDetailModalVisible] = useState(false);\r  const [isPasswordModalVisible, setIsPasswordModalVisible] = useState(false);\r  const [editingUser, setEditingUser] = useState<User | null>(null);\r  const [form] = Form.useForm();\r  const [passwordForm] = Form.useForm();\r  // Mock data\r  const mockUsers: User[] = [\r    {\r      id: '1',\r      email: 'admin@company.com',\r      firstName: 'Ahmet',\r      lastName: 'Yılmaz',\r      fullName: 'Ahmet Yılmaz',\r      phoneNumber: '+90 532 111 2233',\r      role: 'Admin',\r      department: 'Yönetim',\r      title: 'Genel Müdür',\r      isActive: true,\r      emailVerified: true,\r      lastLogin: '2024-01-15T10:30:00',\r      createdAt: '2023-06-01T00:00:00',\r      permissions: ['users.create', 'users.edit', 'users.delete', 'invoices.*', 'settings.*'],\r    },\r    {\r      id: '2',\r      email: 'muhasebe@company.com',\r      firstName: 'Ayşe',\r      lastName: 'Demir',\r      fullName: 'Ayşe Demir',\r      phoneNumber: '+90 533 444 5566',\r      role: 'Accountant',\r      department: 'Muhasebe',\r      title: 'Muhasebe Uzmanı',\r      isActive: true,\r      emailVerified: true,\r      lastLogin: '2024-01-15T09:15:00',\r      createdAt: '2023-07-15T00:00:00',\r      permissions: ['invoices.*', 'reports.view'],\r    },\r    {\r      id: '3',\r      email: 'satis@company.com',\r      firstName: 'Mehmet',\r      lastName: 'Kaya',\r      fullName: 'Mehmet Kaya',\r      phoneNumber: '+90 534 777 8899',\r      role: 'Sales',\r      department: 'Satış',\r      title: 'Satış Temsilcisi',\r      isActive: true,\r      emailVerified: false,\r      lastLogin: '2024-01-14T16:45:00',\r      createdAt: '2023-09-01T00:00:00',\r      permissions: ['customers.*', 'orders.create', 'orders.view'],\r    },\r    {\r      id: '4',\r      email: 'depo@company.com',\r      firstName: 'Fatma',\r      lastName: 'Öz',\r      fullName: 'Fatma Öz',\r      phoneNumber: '+90 535 222 3344',\r      role: 'Staff',\r      department: 'Depo',\r      title: 'Depo Sorumlusu',\r      isActive: false,\r      emailVerified: true,\r      lastLogin: '2024-01-10T11:20:00',\r      createdAt: '2023-10-01T00:00:00',\r      permissions: ['inventory.*'],\r    },\r  ];\r  useEffect(() => {\r    fetchUsers();\r  }, []);\r  const fetchUsers = async () => {\r    setLoading(true);\r    try {\r      // API çağrısı yapılacak\r      // const response = await userService.getTenantUsers();\r      // setUsers(response.data);\r      // Mock data kullan\r      setTimeout(() => {\r        setUsers(mockUsers);\r        setLoading(false);\r      }, 1000);\r    } catch (error) {\r      message.error('Kullanıcılar yüklenemedi');\r      setLoading(false);\r    }\r  };\r  const handleCreateUser = () => {\r    setEditingUser(null);\r    form.resetFields();\r    setIsModalVisible(true);\r  };\r  const handleEditUser = (user: User) => {\r    setEditingUser(user);\r    form.setFieldsValue({\r      ...user,\r      sendWelcomeEmail: false,\r    });\r    setIsModalVisible(true);\r  };\r  const handleDeleteUser = async (userId: string) => {\r    try {\r      // await userService.deleteUser(userId);\r      message.success('Kullanıcı silindi');\r      fetchUsers();\r    } catch (error) {\r      message.error('Kullanıcı silinemedi');\r    }\r  };\r  const handleToggleUserStatus = async (userId: string, isActive: boolean) => {\r    try {\r      // await userService.toggleUserStatus(userId, isActive);\r      message.success(isActive ? 'Kullanıcı aktifleştirildi' : 'Kullanıcı pasifleştirildi');\r      fetchUsers();\r    } catch (error) {\r      message.error('İşlem başarısız');\r    }\r  };\r  const handleResetPassword = async (values: any) => {\r    try {\r      // await userService.resetUserPassword(selectedUser?.id, values.newPassword);\r      message.success('Şifre güncellendi');\r      setIsPasswordModalVisible(false);\r      passwordForm.resetFields();\r    } catch (error) {\r      message.error('Şifre güncellenemedi');\r    }\r  };\r  const handleModalOk = async () => {\r    try {\r      const values = await form.validateFields();\r      if (editingUser) {\r        // await userService.updateUser(editingUser.id, values);\r        message.success('Kullanıcı güncellendi');\r      } else {\r        // await userService.createUser(values);\r        message.success('Kullanıcı oluşturuldu');\r        if (values.sendWelcomeEmail) {\r          message.info('Hoşgeldin e-postası gönderildi');\r        }\r      }\r      setIsModalVisible(false);\r      form.resetFields();\r      fetchUsers();\r    } catch (error) {\r      // Handle form validation error silently\r    }\r  };\r  const handleViewDetails = (user: User) => {\r    setSelectedUser(user);\r    setIsDetailModalVisible(true);\r  };\r  const handlePasswordModal = (user: User) => {\r    setSelectedUser(user);\r    passwordForm.resetFields();\r    setIsPasswordModalVisible(true);\r  };\r  const getRoleColor = (role: string) => {\r    const colors: Record<string, string> = {\r      Admin: 'red',\r      Accountant: 'blue',\r      Sales: 'green',\r      Staff: 'default',\r      Manager: 'purple',\r    };\r    return colors[role] || 'default';\r  };\r  const getStatusBadge = (isActive: boolean) => {\r    return isActive ? (\r      <Badge status=\"success\" text=\"Aktif\" />\r    ) : (\r      <Badge status=\"error\" text=\"Pasif\" />\r    );\r  };\r  const columns: ColumnsType<User> = [\r    {\r      title: 'Kullanıcı',\r      key: 'user',\r      fixed: 'left',\r      width: 280,\r      render: (_, record) => (\r        <Space>\r          <Avatar \r            size={40} \r            style={{ backgroundColor: '#667eea' }}\r            icon={<UserOutlined />}\r          >\r            {record.firstName[0]}{record.lastName[0]}\r          </Avatar>\r          <div>\r            <div>\r              <Text strong>{record.fullName}</Text>\r              {!record.emailVerified && (\r                <Tooltip title=\"E-posta doğrulanmamış\">\r                  <ExclamationCircleOutlined style={{ color: '#faad14', marginLeft: 8 }} />\r                </Tooltip>\r              )}\r            </div>\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {record.email}\r            </Text>\r          </div>\r        </Space>\r      ),\r    },\r    {\r      title: 'Rol',\r      dataIndex: 'role',\r      key: 'role',\r      width: 120,\r      filters: [\r        { text: 'Admin', value: 'Admin' },\r        { text: 'Muhasebe', value: 'Accountant' },\r        { text: 'Satış', value: 'Sales' },\r        { text: 'Personel', value: 'Staff' },\r      ],\r      render: (role) => (\r        <Tag color={getRoleColor(role)}>\r          {role === 'Admin' ? 'Yönetici' :\r           role === 'Accountant' ? 'Muhasebe' :\r           role === 'Sales' ? 'Satış' :\r           role === 'Staff' ? 'Personel' : role}\r        </Tag>\r      ),\r    },\r    {\r      title: 'Departman',\r      dataIndex: 'department',\r      key: 'department',\r      width: 120,\r      render: (department) => department || '-',\r    },\r    {\r      title: 'Ünvan',\r      dataIndex: 'title',\r      key: 'title',\r      width: 150,\r      ellipsis: true,\r      render: (title) => title || '-',\r    },\r    {\r      title: 'Telefon',\r      dataIndex: 'phoneNumber',\r      key: 'phoneNumber',\r      width: 140,\r      render: (phone) => formatPhoneNumber(phone) || '-',\r    },\r    {\r      title: 'Son Giriş',\r      dataIndex: 'lastLogin',\r      key: 'lastLogin',\r      width: 150,\r      sorter: true,\r      render: (date) => date ? (\r        <Tooltip title={formatDate(date, 'DD.MM.YYYY HH:mm')}>\r          {formatDate(date, 'DD.MM.YYYY')}\r        </Tooltip>\r      ) : '-',\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'isActive',\r      key: 'isActive',\r      width: 100,\r      filters: [\r        { text: 'Aktif', value: true },\r        { text: 'Pasif', value: false },\r      ],\r      render: (isActive) => getStatusBadge(isActive),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      fixed: 'right',\r      width: 120,\r      render: (_, record) => {\r        const items = [\r          {\r            key: 'view',\r            label: 'Detayları Gör',\r            icon: <EyeOutlined />,\r            onClick: () => handleViewDetails(record),\r          },\r          {\r            key: 'edit',\r            label: 'Düzenle',\r            icon: <EditOutlined />,\r            onClick: () => handleEditUser(record),\r          },\r          {\r            key: 'password',\r            label: 'Şifre Değiştir',\r            icon: <KeyOutlined />,\r            onClick: () => handlePasswordModal(record),\r          },\r          {\r            type: 'divider' as const,\r          },\r          {\r            key: 'toggle',\r            label: record.isActive ? 'Pasifleştir' : 'Aktifleştir',\r            icon: record.isActive ? <LockOutlined /> : <UnlockOutlined />,\r            onClick: () => handleToggleUserStatus(record.id, !record.isActive),\r          },\r          {\r            key: 'delete',\r            label: 'Sil',\r            icon: <DeleteOutlined />,\r            danger: true,\r            onClick: () => {\r              Modal.confirm({\r                title: 'Kullanıcıyı Sil',\r                content: `${record.fullName} adlı kullanıcıyı silmek istediğinizden emin misiniz?`,\r                okText: 'Sil',\r                cancelText: 'İptal',\r                okType: 'danger',\r                onOk: () => handleDeleteUser(record.id),\r              });\r            },\r          },\r        ];\r        return (\r          <Dropdown menu={{ items }} trigger={['click']}>\r            <Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r          </Dropdown>\r        );\r      },\r    },\r  ];\r  const filteredUsers = users.filter(user => {\r    const matchesSearch = user.fullName.toLowerCase().includes(searchText.toLowerCase()) ||\r                         user.email.toLowerCase().includes(searchText.toLowerCase());\r    const matchesRole = selectedRole === 'all' || user.role === selectedRole;\r    const matchesStatus = selectedStatus === 'all' || \r                          (selectedStatus === 'active' ? user.isActive : !user.isActive);\r    return matchesSearch && matchesRole && matchesStatus;\r  });\r  return (\r    <div className=\"tenant-users-page\">\r      <PageHeader\r        title=\"Kullanıcı Yönetimi\"\r        subtitle={`Toplam ${users.length} kullanıcı`}\r        breadcrumbs={[\r          { title: 'Ana Sayfa', path: '/app/tenant' },\r          { title: 'Kullanıcılar' },\r        ]}\r        extra={\r          <Space>\r            <Button icon={<DownloadOutlined />} aria-label=\"download outlined\">\r              Dışa Aktar\r            </Button>\r            <Button\r              type=\"primary\"\r              icon={<UserAddOutlined />}\r              onClick={handleCreateUser}\r             aria-label=\"user add outlined\">\r              Yeni Kullanıcı\r            </Button>\r          </Space>\r        }\r      />\r      {/* İstatistikler */}\r      <Row gutter={16} style={{ marginBottom: 24 }}>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Toplam Kullanıcı\"\r              value={users.length}\r              prefix={<TeamOutlined />}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Aktif Kullanıcı\"\r              value={users.filter(u => u.isActive).length}\r              prefix={<CheckCircleOutlined />}\r              valueStyle={{ color: '#52c41a' }}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Yönetici\"\r              value={users.filter(u => u.role === 'Admin').length}\r              prefix={<SafetyOutlined />}\r              valueStyle={{ color: '#1890ff' }}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Son 7 Gün Giriş\"\r              value={users.filter(u => {\r                if (!u.lastLogin) return false;\r                const lastLogin = new Date(u.lastLogin);\r                const weekAgo = new Date();\r                weekAgo.setDate(weekAgo.getDate() - 7);\r                return lastLogin > weekAgo;\r              }).length}\r              prefix={<ClockCircleOutlined />}\r            />\r          </Card>\r        </Col>\r      </Row>\r      {/* Filtreler */}\r      <Card style={{ marginBottom: 24 }}>\r        <Row gutter={16}>\r          <Col xs={24} sm={12} md={8}>\r            <Input\r              placeholder=\"Ad, soyad veya email ile ara...\"\r              prefix={<SearchOutlined / aria-label=\"input field\">}\r              value={searchText}\r              onChange={(e) => setSearchText(e.target.value)}\r              allowClear\r            />\r          </Col>\r          <Col xs={24} sm={12} md={8}>\r            <Select\r              style={{ width: '100%' }}\r              placeholder=\"Rol Seçin\"\r              value={selectedRole}\r              onChange={setSelectedRole}\r             aria-label=\"select field\">\r              <Option value=\"all\">Tüm Roller</Option>\r              <Option value=\"Admin\">Yönetici</Option>\r              <Option value=\"Accountant\">Muhasebe</Option>\r              <Option value=\"Sales\">Satış</Option>\r              <Option value=\"Staff\">Personel</Option>\r            </Select>\r          </Col>\r          <Col xs={24} sm={12} md={8}>\r            <Select\r              style={{ width: '100%' }}\r              placeholder=\"Durum Seçin\"\r              value={selectedStatus}\r              onChange={setSelectedStatus}\r             aria-label=\"select field\">\r              <Option value=\"all\">Tüm Durumlar</Option>\r              <Option value=\"active\">Aktif</Option>\r              <Option value=\"inactive\">Pasif</Option>\r            </Select>\r          </Col>\r        </Row>\r      </Card>\r      {/* Kullanıcı Tablosu */}\r      <Card>\r        <Table\r          columns={columns}\r          dataSource={filteredUsers}\r          rowKey=\"id\"\r          loading={loading}\r          scroll={{ x: 1200 }}\r          pagination={{\r            showSizeChanger: true,\r            showTotal: (total) => `Toplam ${total} kullanıcı`,\r          }}\r        />\r      </Card>\r      {/* Kullanıcı Oluştur/Düzenle Modal */}\r      <Modal\r        title={editingUser ? 'Kullanıcı Düzenle' : 'Yeni Kullanıcı'}\r        open={isModalVisible}\r        onOk={handleModalOk}\r        onCancel={() => {\r          setIsModalVisible(false);\r          form.resetFields();\r        }}\r        width={700}\r        okText={editingUser ? 'Güncelle' : 'Oluştur'}\r        cancelText=\"İptal\"\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          initialValues={{\r            role: 'Staff',\r            isActive: true,\r            sendWelcomeEmail: true,\r          }}\r        >\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"firstName\"\r                label=\"Ad\"\r                rules={[formRules.required('Ad zorunludur')]}\r              >\r                <Input placeholder=\"Ad\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"lastName\"\r                label=\"Soyad\"\r                rules={[formRules.required('Soyad zorunludur')]}\r              >\r                <Input placeholder=\"Soyad\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"email\"\r                label=\"E-posta\"\r                rules={[\r                  formRules.required('E-posta zorunludur'),\r                  formRules.email('Geçerli bir e-posta giriniz'),\r                ]}\r              >\r                <Input prefix={<MailOutlined / aria-label=\"input field\">} placeholder=\"ornek@email.com\" />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"phoneNumber\"\r                label=\"Telefon\"\r                rules={[formRules.phone()]}\r              >\r                <Input prefix={<PhoneOutlined / aria-label=\"input field\">} placeholder=\"+90 5XX XXX XX XX\" />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"role\"\r                label=\"Rol\"\r                rules={[formRules.required('Rol zorunludur')]}\r              >\r                <Select aria-label=\"select field\">\r                  <Option value=\"Admin\">Yönetici</Option>\r                  <Option value=\"Accountant\">Muhasebe</Option>\r                  <Option value=\"Sales\">Satış</Option>\r                  <Option value=\"Staff\">Personel</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"department\" label=\"Departman\">\r                <Input placeholder=\"Departman\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item name=\"title\" label=\"Ünvan\">\r            <Input placeholder=\"Ünvan\" / aria-label=\"input field\">\r          </Form.Item>\r          {!editingUser && (\r            <>\r              <Divider />\r              <Row gutter={16}>\r                <Col span={12}>\r                  <Form.Item\r                    name=\"password\"\r                    label=\"Şifre\"\r                    rules={[\r                      formRules.required('Şifre zorunludur'),\r                      formRules.min(8, 'En az 8 karakter olmalıdır'),\r                    ]}\r                  >\r                    <Input.Password placeholder=\"Şifre\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item\r                    name=\"confirmPassword\"\r                    label=\"Şifre Tekrar\"\r                    dependencies={['password']}\r                    rules={[\r                      formRules.required('Şifre tekrarı zorunludur'),\r                      ({ getFieldValue }) => ({\r                        validator(_, value) {\r                          if (!value || getFieldValue('password') === value) {\r                            return Promise.resolve();\r                          }\r                          return Promise.reject(new Error('Şifreler eşleşmiyor'));\r                        },\r                      }),\r                    ]}\r                  >\r                    <Input.Password placeholder=\"Şifre Tekrar\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item name=\"sendWelcomeEmail\" valuePropName=\"checked\">\r                <Switch /> Hoşgeldin e-postası gönder\r              </Form.Item>\r            </>\r          )}\r        </Form>\r      </Modal>\r      {/* Şifre Değiştir Modal */}\r      <Modal\r        title=\"Şifre Değiştir\"\r        open={isPasswordModalVisible}\r        onOk={() => passwordForm.submit()}\r        onCancel={() => {\r          setIsPasswordModalVisible(false);\r          passwordForm.resetFields();\r        }}\r        okText=\"Değiştir\"\r        cancelText=\"İptal\"\r      >\r        <Alert\r          message={`${selectedUser?.fullName} için yeni şifre belirleyin`}\r          type=\"info\"\r          showIcon\r          style={{ marginBottom: 16 }}\r        />\r        <Form\r          form={passwordForm}\r          layout=\"vertical\"\r          onFinish={handleResetPassword}\r        >\r          <Form.Item\r            name=\"newPassword\"\r            label=\"Yeni Şifre\"\r            rules={[\r              formRules.required('Yeni şifre zorunludur'),\r              formRules.min(8, 'En az 8 karakter olmalıdır'),\r            ]}\r          >\r            <Input.Password placeholder=\"Yeni şifre\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item\r            name=\"confirmPassword\"\r            label=\"Yeni Şifre Tekrar\"\r            dependencies={['newPassword']}\r            rules={[\r              formRules.required('Şifre tekrarı zorunludur'),\r              ({ getFieldValue }) => ({\r                validator(_, value) {\r                  if (!value || getFieldValue('newPassword') === value) {\r                    return Promise.resolve();\r                  }\r                  return Promise.reject(new Error('Şifreler eşleşmiyor'));\r                },\r              }),\r            ]}\r          >\r            <Input.Password placeholder=\"Yeni şifre tekrar\" / aria-label=\"input field\">\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Kullanıcı Detay Modal */}\r      <Modal\r        title=\"Kullanıcı Detayları\"\r        open={isDetailModalVisible}\r        onCancel={() => setIsDetailModalVisible(false)}\r        footer={[\r          <Button key=\"close\" onClick={() => setIsDetailModalVisible(false)}>\r            Kapat\r          </Button>,\r          <Button\r            key=\"edit\"\r            type=\"primary\"\r            icon={<EditOutlined />}\r            onClick={() = aria-label=\"edit outlined\"> {\r              setIsDetailModalVisible(false);\r              handleEditUser(selectedUser!);\r            }}\r          >\r            Düzenle\r          </Button>,\r        ]}\r        width={700}\r      >\r        {selectedUser && (\r          <Tabs defaultActiveKey=\"1\">\r            <TabPane tab=\"Genel Bilgiler\" key=\"1\">\r              <Descriptions bordered column={2}>\r                <Descriptions.Item label=\"Ad Soyad\" span={2}>\r                  <Space>\r                    <Avatar style={{ backgroundColor: '#667eea' }}>\r                      {selectedUser.firstName[0]}{selectedUser.lastName[0]}\r                    </Avatar>\r                    {selectedUser.fullName}\r                  </Space>\r                </Descriptions.Item>\r                <Descriptions.Item label=\"E-posta\">\r                  {selectedUser.email}\r                  {selectedUser.emailVerified ? (\r                    <CheckCircleOutlined style={{ color: '#52c41a', marginLeft: 8 }} />\r                  ) : (\r                    <ExclamationCircleOutlined style={{ color: '#faad14', marginLeft: 8 }} />\r                  )}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Telefon\">\r                  {formatPhoneNumber(selectedUser.phoneNumber) || '-'}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Rol\">\r                  <Tag color={getRoleColor(selectedUser.role)}>\r                    {selectedUser.role}\r                  </Tag>\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Departman\">\r                  {selectedUser.department || '-'}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Ünvan\">\r                  {selectedUser.title || '-'}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Durum\">\r                  {getStatusBadge(selectedUser.isActive)}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Kayıt Tarihi\">\r                  {formatDate(selectedUser.createdAt)}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Son Giriş\">\r                  {selectedUser.lastLogin ? formatDate(selectedUser.lastLogin, 'DD.MM.YYYY HH:mm') : '-'}\r                </Descriptions.Item>\r              </Descriptions>\r            </TabPane>\r            <TabPane tab=\"Yetkiler\" key=\"2\">\r              <Title level={5}>Rol Yetkileri</Title>\r              <List\r                dataSource={selectedUser.permissions || []}\r                renderItem={(permission) => (\r                  <List.Item>\r                    <Space>\r                      <CheckCircleOutlined style={{ color: '#52c41a' }} />\r                      <Text>{permission}</Text>\r                    </Space>\r                  </List.Item>\r                )}\r                locale={{ emptyText: 'Yetki tanımlanmamış' }}\r              />\r            </TabPane>\r            <TabPane tab=\"Aktivite Geçmişi\" key=\"3\">\r              <Timeline\r                items={[\r                  {\r                    color: 'green',\r                    children: (\r                      <>\r                        <Text strong>Son giriş yapıldı</Text>\r                        <div>\r                          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                            {selectedUser.lastLogin ? formatDate(selectedUser.lastLogin, 'DD.MM.YYYY HH:mm') : '-'}\r                          </Text>\r                        </div>\r                      </>\r                    ),\r                  },\r                  {\r                    color: 'blue',\r                    children: (\r                      <>\r                        <Text strong>Profil güncellendi</Text>\r                        <div>\r                          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                            10.01.2024 14:30\r                          </Text>\r                        </div>\r                      </>\r                    ),\r                  },\r                  {\r                    color: 'gray',\r                    children: (\r                      <>\r                        <Text strong>Hesap oluşturuldu</Text>\r                        <div>\r                          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                            {formatDate(selectedUser.createdAt)}\r                          </Text>\r                        </div>\r                      </>\r                    ),\r                  },\r                ]}\r              />\r            </TabPane>\r          </Tabs>\r        )}\r      </Modal>\r    </div>\r  );\r};\rexport default TenantUsers;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/users/pages/TenantUsers/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { useNavigate, useParams } from 'react-router-dom';\rimport {\r  Card,\r  Typography,\r  Steps,\r  Button,\r  Space,\r  Row,\r  Col,\r  Progress,\r  Avatar,\r  Tag,\r  Divider,\r  Timeline,\r  Alert,\r  Badge,\r  Statistic,\r  Result,\r  Tooltip,\r  notification\r} from 'antd';\rimport {\r  CheckCircleOutlined,\r  RocketOutlined,\r  TeamOutlined,\r  SettingOutlined,\r  DatabaseOutlined,\r  SafetyOutlined,\r  MailOutlined,\r  DashboardOutlined,\r  ShopOutlined,\r  UserAddOutlined,\r  FileTextOutlined,\r  LineChartOutlined,\r  BellOutlined,\r  CrownOutlined,\r  ThunderboltOutlined,\r  GiftOutlined,\r  StarOutlined,\r  TrophyOutlined,\r  ArrowRightOutlined\r} from '@ant-design/icons';\rimport { useAuthStore } from '@/app/store/auth.store';\rimport confetti from 'canvas-confetti';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rinterface SetupStep {\r  key: string;\r  title: string;\r  description: string;\r  icon: React.ReactNode;\r  status: 'wait' | 'process' | 'finish' | 'error';\r  action?: () => void;\r}\rconst WelcomePage: React.FC = () => {\r  const navigate = useNavigate();\r  const { tenantId } = useParams();\r  const { user } = useAuthStore();\r  const [currentStep, setCurrentStep] = useState(0);\r  const [setupProgress, setSetupProgress] = useState(0);\r  const [emailVerified, setEmailVerified] = useState(false);\r  useEffect(() => {\r    // Trigger confetti animation on mount\r    const duration = 3 * 1000;\r    const animationEnd = Date.now() + duration;\r    const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };\r    function randomInRange(min: number, max: number) {\r      return Math.random() * (max - min) + min;\r    }\r    const interval: any = setInterval(function() {\r      const timeLeft = animationEnd - Date.now();\r      if (timeLeft <= 0) {\r        return clearInterval(interval);\r      }\r      const particleCount = 50 * (timeLeft / duration);\r      confetti({\r        ...defaults,\r        particleCount,\r        origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 }\r      });\r      confetti({\r        ...defaults,\r        particleCount,\r        origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 }\r      });\r    }, 250);\r    // Show welcome notification\r    notification.success({\r      message: 'Hoşgeldiniz!',\r      description: 'Stocker ailesine katıldığınız için teşekkür ederiz. Başarılı bir yolculuk dileriz!',\r      placement: 'topRight',\r      duration: 5,\r      icon: <TrophyOutlined style={{ color: '#52c41a' }} />\r    });\r    return () => clearInterval(interval);\r  }, []);\r  const setupSteps: SetupStep[] = [\r    {\r      key: 'email',\r      title: 'Email Doğrulama',\r      description: 'Email adresinizi doğrulayın',\r      icon: <MailOutlined />,\r      status: emailVerified ? 'finish' : 'process',\r      action: () => {\r        notification.info({\r          message: 'Doğrulama emaili gönderildi',\r          description: 'Lütfen email kutunuzu kontrol edin'\r        });\r      }\r    },\r    {\r      key: 'company',\r      title: 'Şirket Bilgileri',\r      description: 'Şirket profilinizi tamamlayın',\r      icon: <ShopOutlined />,\r      status: 'wait',\r      action: () => navigate(`/app/${tenantId}/settings/company`)\r    },\r    {\r      key: 'users',\r      title: 'Kullanıcılar',\r      description: 'Ekip üyelerinizi davet edin',\r      icon: <UserAddOutlined />,\r      status: 'wait',\r      action: () => navigate(`/app/${tenantId}/users`)\r    },\r    {\r      key: 'products',\r      title: 'Ürünler',\r      description: 'İlk ürünlerinizi ekleyin',\r      icon: <DatabaseOutlined />,\r      status: 'wait',\r      action: () => navigate(`/app/${tenantId}/products`)\r    },\r    {\r      key: 'settings',\r      title: 'Ayarlar',\r      description: 'Sistem ayarlarını yapılandırın',\r      icon: <SettingOutlined />,\r      status: 'wait',\r      action: () => navigate(`/app/${tenantId}/settings`)\r    }\r  ];\r  const quickActions = [\r    {\r      title: 'Dashboard',\r      description: 'Ana kontrol panelinizi görüntüleyin',\r      icon: <DashboardOutlined style={{ fontSize: 32, color: '#1890ff' }} />,\r      color: '#e6f7ff',\r      action: () => navigate(`/app/${tenantId}/dashboard`)\r    },\r    {\r      title: 'CRM',\r      description: 'Müşteri ilişkilerini yönetin',\r      icon: <TeamOutlined style={{ fontSize: 32, color: '#52c41a' }} />,\r      color: '#f6ffed',\r      action: () => navigate(`/app/${tenantId}/crm`)\r    },\r    {\r      title: 'Stok',\r      description: 'Envanter takibi yapın',\r      icon: <DatabaseOutlined style={{ fontSize: 32, color: '#722ed1' }} />,\r      color: '#f9f0ff',\r      action: () => navigate(`/app/${tenantId}/inventory`)\r    },\r    {\r      title: 'Raporlar',\r      description: 'İş analizlerinizi görüntüleyin',\r      icon: <LineChartOutlined style={{ fontSize: 32, color: '#fa8c16' }} />,\r      color: '#fff7e6',\r      action: () => navigate(`/app/${tenantId}/reports`)\r    }\r  ];\r  const features = [\r    {\r      icon: <CrownOutlined />,\r      title: 'Premium Özellikler',\r      description: '30 gün ücretsiz deneme'\r    },\r    {\r      icon: <ThunderboltOutlined />,\r      title: 'Hızlı Başlangıç',\r      description: 'Dakikalar içinde hazır'\r    },\r    {\r      icon: <SafetyOutlined />,\r      title: 'Güvenli Altyapı',\r      description: '256-bit şifreleme'\r    },\r    {\r      icon: <TeamOutlined />,\r      title: '7/24 Destek',\r      description: 'Her zaman yanınızdayız'\r    }\r  ];\r  return (\r    <div className=\"welcome-page\">\r      {/* Hero Section */}\r      <div className=\"welcome-hero\">\r        <Card className=\"hero-card\">\r          <Row align=\"middle\" gutter={32}>\r            <Col xs={24} md={16}>\r              <Space direction=\"vertical\" size=\"large\">\r                <div>\r                  <Title level={1} className=\"hero-title\">\r                    <RocketOutlined style={{ marginRight: 16, color: '#667eea' }} />\r                    Hoşgeldiniz, {user?.fullName}!\r                  </Title>\r                  <Paragraph className=\"hero-description\">\r                    Stocker ile işletmenizi dijitale taşımanın ilk adımını attınız. \r                    Şimdi birkaç basit adımda sisteminizi hazır hale getirelim.\r                  </Paragraph>\r                </div>\r                <Space wrap>\r                  <Tag color=\"blue\" icon={<CheckCircleOutlined />}>\r                    Hesap Aktif\r                  </Tag>\r                  <Tag color=\"green\" icon={<GiftOutlined />}>\r                    30 Gün Ücretsiz Deneme\r                  </Tag>\r                  <Tag color=\"purple\" icon={<StarOutlined />}>\r                    Premium Paket\r                  </Tag>\r                </Space>\r                <div className=\"hero-actions\">\r                  <Button \r                    type=\"primary\" \r                    size=\"large\" \r                    icon={<DashboardOutlined />}\r                    onClick={() = aria-label=\"dashboard outlined\"> navigate(`/app/${tenantId}/dashboard`)}\r                  >\r                    Dashboard'a Git\r                  </Button>\r                  <Button \r                    size=\"large\" \r                    icon={<FileTextOutlined />}\r                    onClick={() = aria-label=\"file text outlined\"> window.open('/docs', '_blank')}\r                  >\r                    Dokümantasyon\r                  </Button>\r                </div>\r              </Space>\r            </Col>\r            <Col xs={24} md={8}>\r              <div className=\"progress-card\">\r                <Progress\r                  type=\"circle\"\r                  percent={setupProgress}\r                  width={180}\r                  strokeColor={{\r                    '0%': '#667eea',\r                    '100%': '#764ba2'\r                  }}\r                  format={percent => (\r                    <div className=\"progress-content\">\r                      <div className=\"progress-value\">{percent}%</div>\r                      <div className=\"progress-label\">Tamamlandı</div>\r                    </div>\r                  )}\r                />\r              </div>\r            </Col>\r          </Row>\r        </Card>\r      </div>\r      {/* Setup Steps */}\r      <Card title=\"Kurulum Adımları\" className=\"setup-card\">\r        <Timeline mode=\"left\">\r          {setupSteps.map((step, index) => (\r            <Timeline.Item\r              key={step.key}\r              color={step.status === 'finish' ? 'green' : step.status === 'process' ? 'blue' : 'gray'}\r              dot={step.icon}\r            >\r              <Card \r                size=\"small\" \r                className={`step-card ${step.status}`}\r                hoverable={step.status !== 'finish'}\r                onClick={step.action}\r              >\r                <Row align=\"middle\" justify=\"space-between\">\r                  <Col span={20}>\r                    <Space direction=\"vertical\" size={0}>\r                      <Text strong>{step.title}</Text>\r                      <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                        {step.description}\r                      </Text>\r                    </Space>\r                  </Col>\r                  <Col span={4} style={{ textAlign: 'right' }}>\r                    {step.status === 'finish' ? (\r                      <CheckCircleOutlined style={{ fontSize: 20, color: '#52c41a' }} />\r                    ) : step.status === 'process' ? (\r                      <Button type=\"primary\" size=\"small\">\r                        Başla\r                      </Button>\r                    ) : (\r                      <Badge status=\"default\" />\r                    )}\r                  </Col>\r                </Row>\r              </Card>\r            </Timeline.Item>\r          ))}\r        </Timeline>\r      </Card>\r      {/* Quick Actions */}\r      <Card title=\"Hızlı Erişim\" className=\"quick-actions-card\">\r        <Row gutter={[16, 16]}>\r          {quickActions.map((action, index) => (\r            <Col xs={24} sm={12} md={6} key={index}>\r              <Card\r                hoverable\r                className=\"action-card\"\r                style={{ backgroundColor: action.color }}\r                onClick={action.action}\r              >\r                <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                  {action.icon}\r                  <Text strong>{action.title}</Text>\r                  <Text type=\"secondary\" style={{ fontSize: 12, textAlign: 'center' }}>\r                    {action.description}\r                  </Text>\r                </Space>\r              </Card>\r            </Col>\r          ))}\r        </Row>\r      </Card>\r      {/* Features */}\r      <Card className=\"features-card\">\r        <Row gutter={[32, 32]}>\r          {features.map((feature, index) => (\r            <Col xs={24} sm={12} md={6} key={index}>\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <Avatar size={64} style={{ backgroundColor: '#667eea' }}>\r                  {feature.icon}\r                </Avatar>\r                <Text strong>{feature.title}</Text>\r                <Text type=\"secondary\" style={{ textAlign: 'center' }}>\r                  {feature.description}\r                </Text>\r              </Space>\r            </Col>\r          ))}\r        </Row>\r      </Card>\r      {/* Tips */}\r      <Alert\r        message=\"İpucu\"\r        description={\r          <Space direction=\"vertical\">\r            <Text>\r              🎯 İlk 7 gün içinde kurulumu tamamlayan kullanıcılarımız %40 daha verimli çalışıyor.\r            </Text>\r            <Text>\r              📚 Eğitim videolarımızı izleyerek sistemi daha etkin kullanabilirsiniz.\r            </Text>\r            <Text>\r              💬 Herhangi bir sorunuz olursa 7/24 destek ekibimiz yanınızda.\r            </Text>\r          </Space>\r        }\r        type=\"info\"\r        showIcon\r        icon={<BellOutlined />}\r        action={\r          <Button size=\"small\" type=\"primary\">\r            Destek Al\r          </Button>\r        }\r      />\r    </div>\r  );\r};\rexport default WelcomePage;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/welcome/pages/WelcomePage/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "noKeyboardHandlers",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { Outlet, useNavigate, useLocation } from 'react-router-dom';\rimport { ProLayout, ProLayoutProps } from '@ant-design/pro-components';\rimport {\r  DashboardOutlined,\r  TeamOutlined,\r  AppstoreOutlined,\r  CreditCardOutlined,\r  UserOutlined,\r  BarChartOutlined,\r  SettingOutlined,\r  LogoutOutlined,\r} from '@ant-design/icons';\rimport { Dropdown, Avatar } from 'antd';\rimport { useAuthStore } from '@/app/store/auth.store';\rconst menuItems = [\r  {\r    path: '/admin',\r    name: 'Kontrol Paneli',\r    icon: <DashboardOutlined />,\r  },\r  {\r    path: '/admin/tenants',\r    name: 'Kiracılar',\r    icon: <TeamOutlined />,\r  },\r  {\r    path: '/admin/packages',\r    name: 'Paketler',\r    icon: <AppstoreOutlined />,\r  },\r  {\r    path: '/admin/subscriptions',\r    name: 'Abonelikler',\r    icon: <CreditCardOutlined />,\r  },\r  {\r    path: '/admin/users',\r    name: 'Kullanıcılar',\r    icon: <UserOutlined />,\r  },\r  {\r    path: '/admin/reports',\r    name: 'Raporlar',\r    icon: <BarChartOutlined />,\r  },\r  {\r    path: '/admin/settings',\r    name: 'Ayarlar',\r    icon: <SettingOutlined />,\r  },\r];\rexport const AdminLayout: React.FC = () => {\r  const navigate = useNavigate();\r  const location = useLocation();\r  const { user, logout } = useAuthStore();\r  const [collapsed, setCollapsed] = useState(false);\r  const settings: ProLayoutProps = {\r    title: 'Stocker Admin',\r    logo: 'https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg',\r    layout: 'mix',\r    splitMenus: false,\r    navTheme: 'light',\r    contentWidth: 'Fluid',\r    fixedHeader: true,\r    fixSiderbar: true,\r    colorPrimary: '#667eea',\r    token: {\r      pageContainer: {\r        paddingBlockPageContainerContent: 32,\r        paddingInlinePageContainerContent: 40,\r      },\r      header: {\r        colorBgHeader: '#fff',\r        colorHeaderTitle: '#000',\r        colorTextMenu: '#595959',\r        colorTextMenuSecondary: '#8c8c8c',\r        colorTextMenuSelected: '#667eea',\r        colorBgMenuItemSelected: 'rgba(102, 126, 234, 0.08)',\r        colorTextMenuActive: '#667eea',\r        colorTextRightActionsItem: '#595959',\r      },\r      sider: {\r        colorMenuBackground: '#fff',\r        colorMenuItemDivider: '#f0f0f0',\r        colorBgMenuItemHover: 'rgba(102, 126, 234, 0.04)',\r        colorTextMenu: '#595959',\r        colorTextMenuSelected: '#667eea',\r        colorBgMenuItemSelected: 'rgba(102, 126, 234, 0.08)',\r      },\r    },\r    collapsed,\r    onCollapse: setCollapsed,\r    location: {\r      pathname: location.pathname,\r    },\r    menu: {\r      locale: false,\r      defaultOpenAll: false,\r    },\r    menuItemRender: (item, dom) => (\r      <a\r        onClick={(e) => {\r          e.preventDefault();\r          navigate(item.path || '/');\r        }}\r      >\r        {dom}\r      </a>\r    ),\r    rightContentRender: () => (\r      <div style={{ paddingRight: 16 }}>\r        <Dropdown\r          menu={{\r            items: [\r              {\r                key: 'profile',\r                icon: <UserOutlined />,\r                label: 'Profil',\r                onClick: () => navigate('/admin/profile'),\r              },\r              {\r                key: 'settings',\r                icon: <SettingOutlined />,\r                label: 'Ayarlar',\r                onClick: () => navigate('/admin/settings'),\r              },\r              {\r                type: 'divider',\r              },\r              {\r                key: 'logout',\r                icon: <LogoutOutlined />,\r                label: 'Çıkış Yap',\r                onClick: async () => {\r                  await logout();\r                  navigate('/login');\r                },\r              },\r            ],\r          }}\r        >\r          <div style={{ cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 8 }}>\r            <Avatar size=\"small\" style={{ backgroundColor: '#667eea' }}>\r              {user?.email?.[0]?.toUpperCase() || user?.username?.[0]?.toUpperCase()}\r            </Avatar>\r            <span>{user?.fullName || user?.username}</span>\r          </div>\r        </Dropdown>\r      </div>\r    ),\r    route: {\r      path: '/admin',\r      routes: menuItems,\r    },\r  };\r  return (\r    <ProLayout {...settings}>\r      <Outlet />\r    </ProLayout>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/layouts/AdminLayout/index.tsx",
      "severity": "warning",
      "message": "Interactive element missing keyboard handler"
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { Outlet, useNavigate, useLocation } from 'react-router-dom';\rimport { ProLayout, ProLayoutProps } from '@ant-design/pro-components';\rimport {\r  DashboardOutlined,\r  TeamOutlined,\r  AppstoreOutlined,\r  CreditCardOutlined,\r  UserOutlined,\r  BarChartOutlined,\r  SettingOutlined,\r  LogoutOutlined,\r} from '@ant-design/icons';\rimport { Dropdown, Avatar } from 'antd';\rimport { useAuthStore } from '@/app/store/auth.store';\rconst menuItems = [\r  {\r    path: '/admin',\r    name: 'Kontrol Paneli',\r    icon: <DashboardOutlined />,\r  },\r  {\r    path: '/admin/tenants',\r    name: 'Kiracılar',\r    icon: <TeamOutlined />,\r  },\r  {\r    path: '/admin/packages',\r    name: 'Paketler',\r    icon: <AppstoreOutlined />,\r  },\r  {\r    path: '/admin/subscriptions',\r    name: 'Abonelikler',\r    icon: <CreditCardOutlined />,\r  },\r  {\r    path: '/admin/users',\r    name: 'Kullanıcılar',\r    icon: <UserOutlined />,\r  },\r  {\r    path: '/admin/reports',\r    name: 'Raporlar',\r    icon: <BarChartOutlined />,\r  },\r  {\r    path: '/admin/settings',\r    name: 'Ayarlar',\r    icon: <SettingOutlined />,\r  },\r];\rexport const AdminLayout: React.FC = () => {\r  const navigate = useNavigate();\r  const location = useLocation();\r  const { user, logout } = useAuthStore();\r  const [collapsed, setCollapsed] = useState(false);\r  const settings: ProLayoutProps = {\r    title: 'Stocker Admin',\r    logo: 'https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg',\r    layout: 'mix',\r    splitMenus: false,\r    navTheme: 'light',\r    contentWidth: 'Fluid',\r    fixedHeader: true,\r    fixSiderbar: true,\r    colorPrimary: '#667eea',\r    token: {\r      pageContainer: {\r        paddingBlockPageContainerContent: 32,\r        paddingInlinePageContainerContent: 40,\r      },\r      header: {\r        colorBgHeader: '#fff',\r        colorHeaderTitle: '#000',\r        colorTextMenu: '#595959',\r        colorTextMenuSecondary: '#8c8c8c',\r        colorTextMenuSelected: '#667eea',\r        colorBgMenuItemSelected: 'rgba(102, 126, 234, 0.08)',\r        colorTextMenuActive: '#667eea',\r        colorTextRightActionsItem: '#595959',\r      },\r      sider: {\r        colorMenuBackground: '#fff',\r        colorMenuItemDivider: '#f0f0f0',\r        colorBgMenuItemHover: 'rgba(102, 126, 234, 0.04)',\r        colorTextMenu: '#595959',\r        colorTextMenuSelected: '#667eea',\r        colorBgMenuItemSelected: 'rgba(102, 126, 234, 0.08)',\r      },\r    },\r    collapsed,\r    onCollapse: setCollapsed,\r    location: {\r      pathname: location.pathname,\r    },\r    menu: {\r      locale: false,\r      defaultOpenAll: false,\r    },\r    menuItemRender: (item, dom) => (\r      <a\r        onClick={(e) => {\r          e.preventDefault();\r          navigate(item.path || '/');\r        }}\r      >\r        {dom}\r      </a>\r    ),\r    rightContentRender: () => (\r      <div style={{ paddingRight: 16 }}>\r        <Dropdown\r          menu={{\r            items: [\r              {\r                key: 'profile',\r                icon: <UserOutlined />,\r                label: 'Profil',\r                onClick: () => navigate('/admin/profile'),\r              },\r              {\r                key: 'settings',\r                icon: <SettingOutlined />,\r                label: 'Ayarlar',\r                onClick: () => navigate('/admin/settings'),\r              },\r              {\r                type: 'divider',\r              },\r              {\r                key: 'logout',\r                icon: <LogoutOutlined />,\r                label: 'Çıkış Yap',\r                onClick: async () => {\r                  await logout();\r                  navigate('/login');\r                },\r              },\r            ],\r          }}\r        >\r          <div style={{ cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 8 }}>\r            <Avatar size=\"small\" style={{ backgroundColor: '#667eea' }}>\r              {user?.email?.[0]?.toUpperCase() || user?.username?.[0]?.toUpperCase()}\r            </Avatar>\r            <span>{user?.fullName || user?.username}</span>\r          </div>\r        </Dropdown>\r      </div>\r    ),\r    route: {\r      path: '/admin',\r      routes: menuItems,\r    },\r  };\r  return (\r    <ProLayout {...settings}>\r      <Outlet />\r    </ProLayout>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/layouts/AdminLayout/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "noKeyboardHandlers",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { Outlet, useNavigate, useLocation, useParams } from 'react-router-dom';\rimport { ProLayout, ProLayoutProps } from '@ant-design/pro-components';\rimport {\r  DashboardOutlined,\r  ContactsOutlined,\r  ShoppingCartOutlined,\r  UserOutlined,\r  SettingOutlined,\r  LogoutOutlined,\r  FileTextOutlined,\r  TeamOutlined,\r  FundProjectionScreenOutlined,\r  CalendarOutlined,\r  SolutionOutlined,\r  AppstoreOutlined,\r} from '@ant-design/icons';\rimport { Dropdown, Avatar } from 'antd';\rimport { useAuthStore } from '@/app/store/auth.store';\rexport const TenantLayout: React.FC = () => {\r  const navigate = useNavigate();\r  const location = useLocation();\r  const { tenantId } = useParams();\r  const { user, logout } = useAuthStore();\r  const [collapsed, setCollapsed] = useState(false);\r  const menuItems = [\r    {\r      path: `/app/${tenantId}`,\r      name: 'Kontrol Paneli',\r      icon: <DashboardOutlined />,\r    },\r    {\r      path: `/app/${tenantId}/invoices`,\r      name: 'Faturalar',\r      icon: <FileTextOutlined />,\r      // badge: { count: 5, dot: true }, // ProLayout badge özelliği devre dışı\r    },\r    {\r      path: `/app/${tenantId}/crm`,\r      name: 'CRM',\r      icon: <ContactsOutlined />,\r      routes: [\r        {\r          path: `/app/${tenantId}/crm/dashboard`,\r          name: 'CRM Dashboard',\r          icon: <DashboardOutlined />,\r        },\r        {\r          path: `/app/${tenantId}/crm/leads`,\r          name: 'Potansiyel Müşteriler',\r          icon: <SolutionOutlined />,\r        },\r        {\r          path: `/app/${tenantId}/crm/customers`,\r          name: 'Müşteriler',\r          icon: <TeamOutlined />,\r        },\r        {\r          path: `/app/${tenantId}/crm/pipeline`,\r          name: 'Satış Hattı',\r          icon: <FundProjectionScreenOutlined />,\r        },\r        {\r          path: `/app/${tenantId}/crm/activities`,\r          name: 'Aktiviteler',\r          icon: <CalendarOutlined />,\r        },\r      ],\r    },\r    {\r      path: `/app/${tenantId}/inventory`,\r      name: 'Stok',\r      icon: <ShoppingCartOutlined />,\r    },\r    {\r      path: `/app/${tenantId}/users`,\r      name: 'Kullanıcılar',\r      icon: <UserOutlined />,\r    },\r    {\r      path: `/app/${tenantId}/modules`,\r      name: 'Modüller',\r      icon: <AppstoreOutlined />,\r    },\r    {\r      path: `/app/${tenantId}/settings`,\r      name: 'Ayarlar',\r      icon: <SettingOutlined />,\r    },\r  ];\r  const settings: ProLayoutProps = {\r    title: user?.tenantName || 'Stocker',\r    logo: 'https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg',\r    layout: 'mix',\r    splitMenus: false,\r    navTheme: 'light',\r    contentWidth: 'Fluid',\r    fixedHeader: true,\r    fixSiderbar: true,\r    colorPrimary: '#1890ff',\r    collapsed,\r    onCollapse: setCollapsed,\r    location: {\r      pathname: location.pathname,\r    },\r    menu: {\r      locale: false,\r      defaultOpenAll: false,\r    },\r    menuItemRender: (item, dom) => (\r      <a\r        onClick={(e) => {\r          e.preventDefault();\r          navigate(item.path || '/');\r        }}\r      >\r        {dom}\r      </a>\r    ),\r    rightContentRender: () => (\r      <div style={{ paddingRight: 16 }}>\r        <Dropdown\r          menu={{\r            items: [\r              {\r                key: 'profile',\r                icon: <UserOutlined />,\r                label: 'Profil',\r                onClick: () => navigate(`/app/${tenantId}/profile`),\r              },\r              {\r                key: 'settings',\r                icon: <SettingOutlined />,\r                label: 'Ayarlar',\r                onClick: () => navigate(`/app/${tenantId}/settings`),\r              },\r              {\r                type: 'divider',\r              },\r              {\r                key: 'logout',\r                icon: <LogoutOutlined />,\r                label: 'Çıkış Yap',\r                onClick: async () => {\r                  await logout();\r                  navigate('/login');\r                },\r              },\r            ],\r          }}\r        >\r          <div style={{ cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 8 }}>\r            <Avatar size=\"small\" style={{ backgroundColor: '#1890ff' }}>\r              {user?.username?.[0]?.toUpperCase()}\r            </Avatar>\r            <span>{user?.username}</span>\r          </div>\r        </Dropdown>\r      </div>\r    ),\r    route: {\r      path: `/app/${tenantId}`,\r      routes: menuItems,\r    },\r  };\r  return (\r    <ProLayout {...settings}>\r      <Outlet />\r    </ProLayout>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/layouts/TenantLayout/index.tsx",
      "severity": "warning",
      "message": "Interactive element missing keyboard handler"
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { Outlet, useNavigate, useLocation, useParams } from 'react-router-dom';\rimport { ProLayout, ProLayoutProps } from '@ant-design/pro-components';\rimport {\r  DashboardOutlined,\r  ContactsOutlined,\r  ShoppingCartOutlined,\r  UserOutlined,\r  SettingOutlined,\r  LogoutOutlined,\r  FileTextOutlined,\r  TeamOutlined,\r  FundProjectionScreenOutlined,\r  CalendarOutlined,\r  SolutionOutlined,\r  AppstoreOutlined,\r} from '@ant-design/icons';\rimport { Dropdown, Avatar } from 'antd';\rimport { useAuthStore } from '@/app/store/auth.store';\rexport const TenantLayout: React.FC = () => {\r  const navigate = useNavigate();\r  const location = useLocation();\r  const { tenantId } = useParams();\r  const { user, logout } = useAuthStore();\r  const [collapsed, setCollapsed] = useState(false);\r  const menuItems = [\r    {\r      path: `/app/${tenantId}`,\r      name: 'Kontrol Paneli',\r      icon: <DashboardOutlined />,\r    },\r    {\r      path: `/app/${tenantId}/invoices`,\r      name: 'Faturalar',\r      icon: <FileTextOutlined />,\r      // badge: { count: 5, dot: true }, // ProLayout badge özelliği devre dışı\r    },\r    {\r      path: `/app/${tenantId}/crm`,\r      name: 'CRM',\r      icon: <ContactsOutlined />,\r      routes: [\r        {\r          path: `/app/${tenantId}/crm/dashboard`,\r          name: 'CRM Dashboard',\r          icon: <DashboardOutlined />,\r        },\r        {\r          path: `/app/${tenantId}/crm/leads`,\r          name: 'Potansiyel Müşteriler',\r          icon: <SolutionOutlined />,\r        },\r        {\r          path: `/app/${tenantId}/crm/customers`,\r          name: 'Müşteriler',\r          icon: <TeamOutlined />,\r        },\r        {\r          path: `/app/${tenantId}/crm/pipeline`,\r          name: 'Satış Hattı',\r          icon: <FundProjectionScreenOutlined />,\r        },\r        {\r          path: `/app/${tenantId}/crm/activities`,\r          name: 'Aktiviteler',\r          icon: <CalendarOutlined />,\r        },\r      ],\r    },\r    {\r      path: `/app/${tenantId}/inventory`,\r      name: 'Stok',\r      icon: <ShoppingCartOutlined />,\r    },\r    {\r      path: `/app/${tenantId}/users`,\r      name: 'Kullanıcılar',\r      icon: <UserOutlined />,\r    },\r    {\r      path: `/app/${tenantId}/modules`,\r      name: 'Modüller',\r      icon: <AppstoreOutlined />,\r    },\r    {\r      path: `/app/${tenantId}/settings`,\r      name: 'Ayarlar',\r      icon: <SettingOutlined />,\r    },\r  ];\r  const settings: ProLayoutProps = {\r    title: user?.tenantName || 'Stocker',\r    logo: 'https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg',\r    layout: 'mix',\r    splitMenus: false,\r    navTheme: 'light',\r    contentWidth: 'Fluid',\r    fixedHeader: true,\r    fixSiderbar: true,\r    colorPrimary: '#1890ff',\r    collapsed,\r    onCollapse: setCollapsed,\r    location: {\r      pathname: location.pathname,\r    },\r    menu: {\r      locale: false,\r      defaultOpenAll: false,\r    },\r    menuItemRender: (item, dom) => (\r      <a\r        onClick={(e) => {\r          e.preventDefault();\r          navigate(item.path || '/');\r        }}\r      >\r        {dom}\r      </a>\r    ),\r    rightContentRender: () => (\r      <div style={{ paddingRight: 16 }}>\r        <Dropdown\r          menu={{\r            items: [\r              {\r                key: 'profile',\r                icon: <UserOutlined />,\r                label: 'Profil',\r                onClick: () => navigate(`/app/${tenantId}/profile`),\r              },\r              {\r                key: 'settings',\r                icon: <SettingOutlined />,\r                label: 'Ayarlar',\r                onClick: () => navigate(`/app/${tenantId}/settings`),\r              },\r              {\r                type: 'divider',\r              },\r              {\r                key: 'logout',\r                icon: <LogoutOutlined />,\r                label: 'Çıkış Yap',\r                onClick: async () => {\r                  await logout();\r                  navigate('/login');\r                },\r              },\r            ],\r          }}\r        >\r          <div style={{ cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 8 }}>\r            <Avatar size=\"small\" style={{ backgroundColor: '#1890ff' }}>\r              {user?.username?.[0]?.toUpperCase()}\r            </Avatar>\r            <span>{user?.username}</span>\r          </div>\r        </Dropdown>\r      </div>\r    ),\r    route: {\r      path: `/app/${tenantId}`,\r      routes: menuItems,\r    },\r  };\r  return (\r    <ProLayout {...settings}>\r      <Outlet />\r    </ProLayout>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/layouts/TenantLayout/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { \r  Card, \r  Row, \r  Col, \r  Typography, \r  Space, \r  Divider, \r  Table, \r  DatePicker,\r  InputNumber,\r  Select,\r  Button,\r  message,\r  Alert,\r  Tag,\r  List,\r  Tabs,\r} from 'antd';\rimport { \r  GlobalOutlined, \r  CalendarOutlined, \r  DollarOutlined,\r  PercentageOutlined,\r  NumberOutlined,\r  TranslationOutlined,\r  CheckCircleOutlined,\r  InfoCircleOutlined,\r} from '@ant-design/icons';\rimport { useI18n } from '@/hooks/useI18n';\rimport { LanguageSwitcher } from '@/components/LanguageSwitcher';\rimport { TranslatedText } from '@/components/TranslatedText';\rimport dayjs from 'dayjs';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rexport default function I18nDemo() {\r  const { t, currentLanguage, languageConfig, formatters, changeLanguage } = useI18n();\r  const [testNumber, setTestNumber] = useState(1234567.89);\r  const [testDate, setTestDate] = useState(new Date());\r  const [selectedNamespace, setSelectedNamespace] = useState('common');\r  const namespaces = ['common', 'auth', 'dashboard', 'products', 'customers', 'orders', 'invoices', 'settings'];\r  const formatterExamples = [\r    { label: 'Number', value: formatters.number(testNumber), icon: <NumberOutlined /> },\r    { label: 'Currency', value: formatters.currency(testNumber), icon: <DollarOutlined /> },\r    { label: 'Percentage', value: formatters.percentage(85.5), icon: <PercentageOutlined /> },\r    { label: 'Compact', value: formatters.compact(testNumber), icon: <NumberOutlined /> },\r    { label: 'Decimal (2)', value: formatters.decimal(testNumber, 2), icon: <NumberOutlined /> },\r    { label: 'Date', value: formatters.date(testDate), icon: <CalendarOutlined /> },\r    { label: 'Date (short)', value: formatters.date(testDate, 'short'), icon: <CalendarOutlined /> },\r  ];\r  const translationExamples = [\r    { key: 'common.welcome', params: undefined },\r    { key: 'dashboard.welcome', params: { name: 'John Doe' } },\r    { key: 'messages.success.created', params: { item: t('products.title') } },\r    { key: 'messages.warning.confirmDelete', params: { item: t('customers.title') } },\r    { key: 'dashboard.lastDays', params: { days: 7 } },\r    { key: 'validation.minLength', params: { min: 8 } },\r    { key: 'validation.maxLength', params: { max: 255 } },\r  ];\r  return (\r    <div style={{ padding: '24px' }}>\r      <Card>\r        <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\r          <div>\r            <Title level={2}>\r              <GlobalOutlined /> Internationalization (i18n) Demo\r            </Title>\r            <Paragraph>\r              This page demonstrates the i18n features of the application, including language switching,\r              translations, number/date formatting, and more.\r            </Paragraph>\r          </div>\r          <Alert\r            message={`Current Language: ${languageConfig.name} ${languageConfig.flag}`}\r            description={`Locale: ${currentLanguage === 'tr' ? 'tr-TR' : 'en-US'} | Currency: ${languageConfig.currency} | Date Format: ${languageConfig.dateFormat}`}\r            type=\"info\"\r            showIcon\r            icon={<InfoCircleOutlined />}\r          />\r          <Divider orientation=\"left\">Language Switcher Components</Divider>\r          <Row gutter={[16, 16]}>\r            <Col xs={24} sm={8}>\r              <Card title=\"Select Mode\" size=\"small\">\r                <LanguageSwitcher mode=\"select\" />\r              </Card>\r            </Col>\r            <Col xs={24} sm={8}>\r              <Card title=\"Button Mode\" size=\"small\">\r                <LanguageSwitcher mode=\"button\" />\r              </Card>\r            </Col>\r            <Col xs={24} sm={8}>\r              <Card title=\"Dropdown Mode\" size=\"small\">\r                <LanguageSwitcher mode=\"dropdown\" />\r              </Card>\r            </Col>\r          </Row>\r          <Divider orientation=\"left\">Number & Date Formatting</Divider>\r          <Row gutter={[16, 16]}>\r            <Col xs={24} md={12}>\r              <Card title=\"Test Input\" size=\"small\">\r                <Space direction=\"vertical\" style={{ width: '100%' }}>\r                  <InputNumber\r                    style={{ width: '100%' }}\r                    value={testNumber}\r                    onChange={(value) = aria-label=\"input field\"> setTestNumber(value || 0)}\r                    placeholder=\"Enter a number\"\r                    addonBefore={<NumberOutlined />}\r                  />\r                  <DatePicker\r                    style={{ width: '100%' }}\r                    value={dayjs(testDate)}\r                    onChange={(date) => setTestDate(date?.toDate() || new Date())}\r                    format={languageConfig.dateFormat}\r                  />\r                </Space>\r              </Card>\r            </Col>\r            <Col xs={24} md={12}>\r              <Card title=\"Formatted Output\" size=\"small\">\r                <List\r                  dataSource={formatterExamples}\r                  renderItem={(item) => (\r                    <List.Item>\r                      <Space>\r                        {item.icon}\r                        <Text strong>{item.label}:</Text>\r                        <Tag color=\"blue\">{item.value}</Tag>\r                      </Space>\r                    </List.Item>\r                  )}\r                />\r              </Card>\r            </Col>\r          </Row>\r          <Divider orientation=\"left\">Translation Examples</Divider>\r          <Card>\r            <Tabs defaultActiveKey=\"examples\">\r              <TabPane tab=\"Examples\" key=\"examples\">\r                <Table\r                  dataSource={translationExamples}\r                  columns={[\r                    {\r                      title: 'Key',\r                      dataIndex: 'key',\r                      key: 'key',\r                      render: (text) => <Text code>{text}</Text>,\r                    },\r                    {\r                      title: 'Parameters',\r                      dataIndex: 'params',\r                      key: 'params',\r                      render: (params) => params ? <Text code>{JSON.stringify(params)}</Text> : '-',\r                    },\r                    {\r                      title: 'Result',\r                      key: 'result',\r                      render: (_, record) => (\r                        <Tag color=\"green\">{t(record.key, record.params)}</Tag>\r                      ),\r                    },\r                  ]}\r                  pagination={false}\r                />\r              </TabPane>\r              <TabPane tab=\"Namespace Browser\" key=\"browser\">\r                <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\r                  <Select\r                    style={{ width: 200 }}\r                    value={selectedNamespace}\r                    onChange={setSelectedNamespace}\r                    placeholder=\"Select namespace\"\r                   aria-label=\"select field\">\r                    {namespaces.map((ns) => (\r                      <Select.Option key={ns} value={ns} aria-label=\"select field\">\r                        {ns}\r                      </Select.Option>\r                    ))}\r                  </Select>\r                  <Alert\r                    message=\"Translation Keys\"\r                    description={`Browse translations in the \"${selectedNamespace}\" namespace`}\r                    type=\"info\"\r                  />\r                  <div style={{ maxHeight: 400, overflow: 'auto' }}>\r                    <List\r                      dataSource={Object.keys(t(selectedNamespace, { returnObjects: true }) || {})}\r                      renderItem={(key) => (\r                        <List.Item>\r                          <Space style={{ width: '100%', justifyContent: 'space-between' }}>\r                            <Text code>{`${selectedNamespace}.${key}`}</Text>\r                            <Tag>{t(`${selectedNamespace}.${key}`)}</Tag>\r                          </Space>\r                        </List.Item>\r                      )}\r                    />\r                  </div>\r                </Space>\r              </TabPane>\r              <TabPane tab=\"TranslatedText Component\" key=\"component\">\r                <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\r                  <Card size=\"small\" title=\"Basic Usage\">\r                    <TranslatedText i18nKey=\"common.welcome\" />\r                  </Card>\r                  <Card size=\"small\" title=\"With Namespace\">\r                    <TranslatedText i18nKey=\"loginTitle\" namespace=\"auth\" />\r                  </Card>\r                  <Card size=\"small\" title=\"With Values\">\r                    <TranslatedText \r                      i18nKey=\"dashboard.welcome\" \r                      values={{ name: 'Alice' }}\r                    />\r                  </Card>\r                  <Card size=\"small\" title=\"With Fallback\">\r                    <TranslatedText \r                      i18nKey=\"non.existent.key\" \r                      fallback=\"This is a fallback text\"\r                    />\r                  </Card>\r                  <Card size=\"small\" title=\"With Custom Component\">\r                    <TranslatedText \r                      i18nKey=\"common.welcome\" \r                      component=\"h3\"\r                      style={{ color: '#667eea' }}\r                    />\r                  </Card>\r                </Space>\r              </TabPane>\r            </Tabs>\r          </Card>\r          <Divider orientation=\"left\">Quick Actions</Divider>\r          <Space wrap>\r            <Button \r              type=\"primary\" \r              icon={<TranslationOutlined />}\r              onClick={() = aria-label=\"translation outlined\"> {\r                changeLanguage(currentLanguage === 'tr' ? 'en' : 'tr');\r                message.success(t('messages.success.saved'));\r              }}\r            >\r              Toggle Language\r            </Button>\r            <Button \r              icon={<CheckCircleOutlined />}\r              onClick={() = aria-label=\"check circle outlined\"> {\r                message.success(t('messages.success.created', { item: 'Demo' }));\r              }}\r            >\r              Show Success Message\r            </Button>\r            <Button \r              danger\r              onClick={() => {\r                message.error(t('messages.error.general'));\r              }}\r            >\r              Show Error Message\r            </Button>\r            <Button \r              onClick={() => {\r                message.warning(t('messages.warning.unsavedChanges'));\r              }}\r            >\r              Show Warning\r            </Button>\r            <Button \r              onClick={() => {\r                message.info(t('messages.info.loading'));\r              }}\r            >\r              Show Info\r            </Button>\r          </Space>\r          <Divider />\r          <Alert\r            message=\"Implementation Notes\"\r            description={\r              <ul>\r                <li>Translations are stored in JSON files under src/i18n/locales/</li>\r                <li>Language preference is persisted in localStorage</li>\r                <li>Date and number formatting adapts to the selected locale</li>\r                <li>Missing translations are logged in development mode</li>\r                <li>The useI18n hook provides convenient access to all i18n features</li>\r                <li>Ant Design components automatically adapt to the selected language</li>\r              </ul>\r            }\r            type=\"success\"\r            showIcon\r          />\r        </Space>\r      </Card>\r    </div>\r  );\r}",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/pages/I18nDemo.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React from 'react';\rimport { Card, Button, Space, Badge, Typography, Divider, Alert, Switch, Row, Col } from 'antd';\rimport {\r  DownloadOutlined,\r  BellOutlined,\r  WifiOutlined,\r  ShareAltOutlined,\r  ReloadOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r} from '@ant-design/icons';\rimport { usePWA } from '@/hooks/usePWA';\rconst { Title, Text, Paragraph } = Typography;\rexport default function PWADemo() {\r  const {\r    isInstalled,\r    isInstallable,\r    isOffline,\r    isUpdateAvailable,\r    installPWA,\r    requestNotificationPermission,\r    subscribeToPush,\r    unsubscribeFromPush,\r    share,\r  } = usePWA();\r  const handleShare = async () => {\r    const shared = await share({\r      title: 'Stocker App',\r      text: 'Modern envanter yönetim sistemi',\r      url: window.location.origin,\r    });\r    if (shared) {\r    }\r  };\r  const handleTestNotification = () => {\r    if ('Notification' in window && Notification.permission === 'granted') {\r      new Notification('Test Bildirimi', {\r        body: 'Bu bir test bildirimidir!',\r        icon: '/logo192.png',\r        badge: '/logo192.png',\r        vibrate: [200, 100, 200],\r        tag: 'test-notification',\r        actions: [\r          { action: 'view', title: 'Görüntüle' },\r          { action: 'dismiss', title: 'Kapat' },\r        ],\r      });\r    }\r  };\r  return (\r    <div style={{ padding: '24px' }}>\r      <Title level={2}>PWA Özellikleri Demo</Title>\r      <Paragraph>\r        Progressive Web App özelliklerini test edin ve kullanın.\r      </Paragraph>\r      <Row gutter={[16, 16]}>\r        {/* Kurulum Durumu */}\r        <Col xs={24} md={12}>\r          <Card title=\"Uygulama Kurulumu\" bordered>\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <Alert\r                message={isInstalled ? 'Uygulama Kurulu' : 'Uygulama Kurulu Değil'}\r                type={isInstalled ? 'success' : 'info'}\r                icon={isInstalled ? <CheckCircleOutlined /> : <CloseCircleOutlined />}\r                showIcon\r              />\r              {isInstallable && !isInstalled && (\r                <Button\r                  type=\"primary\"\r                  icon={<DownloadOutlined />}\r                  onClick={installPWA}\r                  block\r                 aria-label=\"download outlined\">\r                  Uygulamayı Kur\r                </Button>\r              )}\r              {!isInstallable && !isInstalled && (\r                <Alert\r                  message=\"Kurulum Bilgisi\"\r                  description=\"Uygulama kurulumu için Chrome/Edge tarayıcıda HTTPS üzerinden erişin.\"\r                  type=\"info\"\r                />\r              )}\r            </Space>\r          </Card>\r        </Col>\r        {/* Bağlantı Durumu */}\r        <Col xs={24} md={12}>\r          <Card title=\"Bağlantı Durumu\" bordered>\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <Badge\r                status={isOffline ? 'error' : 'success'}\r                text={\r                  <Space>\r                    <WifiOutlined />\r                    {isOffline ? 'Çevrimdışı' : 'Çevrimiçi'}\r                  </Space>\r                }\r              />\r              {isOffline && (\r                <Alert\r                  message=\"Çevrimdışı Mod\"\r                  description=\"Önbelleğe alınmış verilerle çalışıyorsunuz.\"\r                  type=\"warning\"\r                />\r              )}\r              {isUpdateAvailable && (\r                <Alert\r                  message=\"Güncelleme Mevcut\"\r                  description=\"Yeni sürüm hazır. Sayfayı yenileyin.\"\r                  type=\"info\"\r                  action={\r                    <Button\r                      size=\"small\"\r                      icon={<ReloadOutlined />}\r                      onClick={() = aria-label=\"reload outlined\"> window.location.reload()}\r                    >\r                      Yenile\r                    </Button>\r                  }\r                />\r              )}\r            </Space>\r          </Card>\r        </Col>\r        {/* Bildirimler */}\r        <Col xs={24} md={12}>\r          <Card title=\"Push Bildirimleri\" bordered>\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <Button\r                icon={<BellOutlined />}\r                onClick={requestNotificationPermission}\r                block\r               aria-label=\"bell outlined\">\r                Bildirim İzni Ver\r              </Button>\r              <Button\r                type=\"primary\"\r                icon={<BellOutlined />}\r                onClick={subscribeToPush}\r                block\r               aria-label=\"bell outlined\">\r                Push Bildirimlere Abone Ol\r              </Button>\r              <Button\r                danger\r                onClick={unsubscribeFromPush}\r                block\r              >\r                Abonelikten Çık\r              </Button>\r              <Divider />\r              <Button\r                onClick={handleTestNotification}\r                block\r              >\r                Test Bildirimi Gönder\r              </Button>\r            </Space>\r          </Card>\r        </Col>\r        {/* Paylaşım */}\r        <Col xs={24} md={12}>\r          <Card title=\"Web Share API\" bordered>\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <Paragraph>\r                Uygulamayı sosyal medyada veya diğer uygulamalarda paylaşın.\r              </Paragraph>\r              <Button\r                type=\"primary\"\r                icon={<ShareAltOutlined />}\r                onClick={handleShare}\r                block\r               aria-label=\"share alt outlined\">\r                Uygulamayı Paylaş\r              </Button>\r              <Alert\r                message=\"Not\"\r                description=\"Share API mobil cihazlarda ve bazı modern tarayıcılarda çalışır.\"\r                type=\"info\"\r              />\r            </Space>\r          </Card>\r        </Col>\r      </Row>\r      <Divider />\r      {/* Kullanım Örneği */}\r      <Card title=\"Kodda Kullanım Örneği\" bordered>\r        <pre style={{ \r          background: '#f5f5f5', \r          padding: '16px', \r          borderRadius: '4px',\r          overflow: 'auto' \r        }}>\r          <code>{`import { usePWA } from '@/hooks/usePWA';\rfunction MyComponent() {\r  const {\r    isInstalled,\r    isInstallable,\r    isOffline,\r    installPWA,\r    subscribeToPush,\r    share,\r  } = usePWA();\r  // Uygulama kurulumu\r  if (isInstallable && !isInstalled) {\r    <Button onClick={installPWA}>\r      Uygulamayı Kur\r    </Button>\r  }\r  // Çevrimdışı durumu\r  if (isOffline) {\r    <Alert message=\"Çevrimdışı moddasınız\" />\r  }\r  // Push bildirimleri\r  const enableNotifications = async () => {\r    await subscribeToPush();\r  };\r  // Paylaşım\r  const shareApp = async () => {\r    await share({\r      title: 'Başlık',\r      text: 'Açıklama',\r      url: 'https://example.com'\r    });\r  };\r}`}</code>\r        </pre>\r      </Card>\r    </div>\r  );\r}",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/pages/PWADemo.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState } from 'react';\rimport { Modal, Form, Input, Button, message, Alert, Space, Typography, Divider } from 'antd';\rimport { LockOutlined, KeyOutlined } from '@ant-design/icons';\rimport PasswordStrength from '../PasswordStrength';\rimport { apiClient } from '@/shared/api/client';\rconst { Title } = Typography;\rinterface ChangePasswordModalProps {\r  visible: boolean;\r  onClose: () => void;\r  userId?: string;\r  userEmail?: string;\r  requireCurrentPassword?: boolean;\r}\rconst ChangePasswordModal: React.FC<ChangePasswordModalProps> = ({\r  visible,\r  onClose,\r  userId,\r  userEmail,\r  requireCurrentPassword = true\r}) => {\r  const [form] = Form.useForm();\r  const [loading, setLoading] = useState(false);\r  const [newPassword, setNewPassword] = useState('');\r  const [passwordStrength, setPasswordStrength] = useState<any>(null);\r  const handleSubmit = async (values: any) => {\r    // Check password strength\r    if (passwordStrength && !passwordStrength.isAcceptable) {\r      message.error('Şifre güvenlik seviyesi yetersiz!');\r      return;\r    }\r    setLoading(true);\r    try {\r      const response = await apiClient.post('/api/account/change-password', {\r        userId,\r        currentPassword: values.currentPassword,\r        newPassword: values.newPassword\r      });\r      if (response.data?.success) {\r        message.success('Şifreniz başarıyla değiştirildi');\r        form.resetFields();\r        setNewPassword('');\r        setPasswordStrength(null);\r        onClose();\r      } else {\r        message.error(response.data?.message || 'Şifre değiştirilemedi');\r      }\r    } catch (error: any) {\r      message.error(error.response?.data?.message || 'Bir hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleCancel = () => {\r    form.resetFields();\r    setNewPassword('');\r    setPasswordStrength(null);\r    onClose();\r  };\r  return (\r    <Modal\r      title={\r        <Space>\r          <KeyOutlined style={{ color: '#1890ff' }} />\r          <span>Şifre Değiştir</span>\r        </Space>\r      }\r      open={visible}\r      onCancel={handleCancel}\r      footer={null}\r      width={600}\r    >\r      <Alert\r        message=\"Güvenlik İpucu\"\r        description=\"Güçlü bir şifre oluşturmak hesabınızın güvenliği için önemlidir. Şifrenizi düzenli olarak değiştirin ve başkalarıyla paylaşmayın.\"\r        type=\"info\"\r        showIcon\r        style={{ marginBottom: 24 }}\r      />\r      <Form\r        form={form}\r        layout=\"vertical\"\r        onFinish={handleSubmit}\r        autoComplete=\"off\"\r      >\r        {requireCurrentPassword && (\r          <Form.Item\r            name=\"currentPassword\"\r            label=\"Mevcut Şifre\"\r            rules={[{ required: true, message: 'Mevcut şifrenizi giriniz' }]}\r          >\r            <Input.Password\r              prefix={<LockOutlined / aria-label=\"input field\">}\r              placeholder=\"Mevcut şifreniz\"\r              size=\"large\"\r            />\r          </Form.Item>\r        )}\r        <Divider />\r        <Form.Item\r          name=\"newPassword\"\r          label=\"Yeni Şifre\"\r          rules={[\r            { required: true, message: 'Yeni şifre zorunludur' },\r            { min: 8, message: 'Şifre en az 8 karakter olmalıdır' },\r            () => ({\r              validator(_, value) {\r                if (!value) return Promise.resolve();\r                if (passwordStrength && !passwordStrength.isAcceptable) {\r                  return Promise.reject(new Error('Şifre güvenlik seviyesi yetersiz'));\r                }\r                return Promise.resolve();\r              },\r            }),\r          ]}\r          extra={\r            newPassword && (\r              <PasswordStrength\r                password={newPassword}\r                email={userEmail}\r                onStrengthChange={setPasswordStrength}\r                showRequirements={true}\r                showSuggestions={true}\r              />\r            )\r          }\r        >\r          <Input.Password\r            prefix={<KeyOutlined / aria-label=\"input field\">}\r            placeholder=\"Güçlü bir şifre oluşturun\"\r            size=\"large\"\r            onChange={(e) => setNewPassword(e.target.value)}\r          />\r        </Form.Item>\r        <Form.Item\r          name=\"confirmPassword\"\r          label=\"Yeni Şifre Tekrar\"\r          dependencies={['newPassword']}\r          rules={[\r            { required: true, message: 'Şifre tekrarı zorunludur' },\r            ({ getFieldValue }) => ({\r              validator(_, value) {\r                if (!value || getFieldValue('newPassword') === value) {\r                  return Promise.resolve();\r                }\r                return Promise.reject(new Error('Şifreler eşleşmiyor'));\r              },\r            }),\r          ]}\r        >\r          <Input.Password\r            prefix={<KeyOutlined / aria-label=\"input field\">}\r            placeholder=\"Yeni şifre tekrar\"\r            size=\"large\"\r          />\r        </Form.Item>\r        <Form.Item style={{ marginBottom: 0 }}>\r          <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r            <Button onClick={handleCancel}>İptal</Button>\r            <Button\r              type=\"primary\"\r              htmlType=\"submit\"\r              loading={loading}\r              disabled={newPassword && passwordStrength && !passwordStrength.isAcceptable}\r              icon={<LockOutlined />}\r             aria-label=\"lock outlined\">\r              {newPassword && passwordStrength && !passwordStrength.isAcceptable\r                ? 'Güvenli bir şifre oluşturun'\r                : 'Şifreyi Değiştir'}\r            </Button>\r          </Space>\r        </Form.Item>\r      </Form>\r      {/* Password Tips */}\r      <div style={{ marginTop: 24, padding: 16, background: '#f5f5f5', borderRadius: 8 }}>\r        <Title level={5}>Güvenli Şifre İpuçları:</Title>\r        <ul style={{ marginBottom: 0 }}>\r          <li>Şifrenizi kimseyle paylaşmayın</li>\r          <li>Her hesap için farklı şifre kullanın</li>\r          <li>Kişisel bilgilerinizi (doğum tarihi, ad vb.) kullanmayın</li>\r          <li>Sözlükte bulunan kelimeleri doğrudan kullanmayın</li>\r          <li>Şifre yöneticisi kullanmayı düşünün</li>\r        </ul>\r      </div>\r    </Modal>\r  );\r};\rexport default ChangePasswordModal;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/ChangePasswordModal/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useState, useEffect } from 'react';\rimport { Button, Tooltip, FloatButton, message, Modal } from 'antd';\rimport {\r  QuestionCircleOutlined,\r  MessageOutlined,\r  PhoneOutlined,\r  PlayCircleOutlined,\r  LockOutlined,\r  UserAddOutlined,\r  EyeOutlined,\r} from '@ant-design/icons';\rimport { useLocation } from 'react-router-dom';\rimport { useVisitorTracking } from '@/shared/hooks/useVisitorTracking';\rimport './style.css';\rinterface ContextualHelpersProps {\r  showChatSupport?: boolean;\r  showForgotPassword?: boolean;\r  showCreateAccount?: boolean;\r  showDemoAccess?: boolean;\r  context?: 'login' | 'landing' | 'register' | 'general';\r}\rexport const ContextualHelpers: React.FC<ContextualHelpersProps> = ({\r  showChatSupport = true,\r  showForgotPassword = false,\r  showCreateAccount = false,\r  showDemoAccess = false,\r  context = 'general',\r}) => {\r  const [chatModalVisible, setChatModalVisible] = useState(false);\r  const [demoModalVisible, setDemoModalVisible] = useState(false);\r  const location = useLocation();\r  const { trackInterest } = useVisitorTracking();\r  const handleChatSupport = () => {\r    setChatModalVisible(true);\r    trackInterest(`chat-support-${context}`);\r  };\r  const handlePhoneSupport = () => {\r    window.open('tel:08501234567', '_self');\r    trackInterest(`phone-support-${context}`);\r  };\r  const handleWhatsAppSupport = () => {\r    window.open('https://wa.me/905555555555?text=Merhaba, Stocker hakkında bilgi almak istiyorum.', '_blank');\r    trackInterest(`whatsapp-support-${context}`);\r  };\r  const handleDemoAccess = () => {\r    setDemoModalVisible(true);\r    trackInterest(`demo-access-${context}`);\r  };\r  const handleForgotPassword = () => {\r    window.location.href = '/forgot-password';\r    trackInterest(`forgot-password-${context}`);\r  };\r  const handleCreateAccount = () => {\r    window.location.href = '/register';\r    trackInterest(`create-account-${context}`);\r  };\r  // Auto-show chat support based on user behavior\r  useEffect(() => {\r    const timer = setTimeout(() => {\r      if (context === 'landing' && !localStorage.getItem('chat-prompt-shown')) {\r        message.info({\r          content: '💬 Sorularınız mı var? Canlı destek hattımızdan yardım alabilirsiniz!',\r          duration: 5,\r          icon: <MessageOutlined />,\r          onClick: handleChatSupport,\r          style: { cursor: 'pointer' },\r        });\r        localStorage.setItem('chat-prompt-shown', 'true');\r      }\r    }, 30000); // Show after 30 seconds\r    return () => clearTimeout(timer);\r  }, [context]);\r  const renderFloatingHelpers = () => (\r    <FloatButton.Group\r      trigger=\"click\"\r      type=\"primary\"\r      style={{ right: 24, bottom: 24 }}\r      icon={<QuestionCircleOutlined />}\r      tooltip=\"Yardım\"\r      className=\"contextual-float-group\"\r    >\r      {showChatSupport && (\r        <FloatButton\r          icon={<MessageOutlined />}\r          tooltip=\"Canlı Destek\"\r          onClick={handleChatSupport}\r          className=\"chat-float-btn\"\r        />\r      )}\r      <FloatButton\r        icon={<PhoneOutlined />}\r        tooltip=\"Telefon Desteği\"\r        onClick={handlePhoneSupport}\r        className=\"phone-float-btn\"\r      />\r      <FloatButton\r        icon={<MessageOutlined />}\r        tooltip=\"WhatsApp\"\r        onClick={handleWhatsAppSupport}\r        className=\"whatsapp-float-btn\"\r      />\r      {showDemoAccess && (\r        <FloatButton\r          icon={<PlayCircleOutlined />}\r          tooltip=\"Demo İzle\"\r          onClick={handleDemoAccess}\r          className=\"demo-float-btn\"\r        />\r      )}\r    </FloatButton.Group>\r  );\r  const renderInlineHelpers = () => (\r    <div className={`contextual-helpers contextual-helpers--${context}`}>\r      {showForgotPassword && (\r        <Tooltip title=\"Şifrenizi mi unuttunuz? Hemen sıfırlayın!\">\r          <Button\r            type=\"link\"\r            icon={<LockOutlined />}\r            onClick={handleForgotPassword}\r            className=\"helper-link forgot-password-link\"\r           aria-label=\"lock outlined\">\r            Şifremi Unuttum\r          </Button>\r        </Tooltip>\r      )}\r      {showCreateAccount && (\r        <Tooltip title=\"Hesabınız yok mu? Hemen ücretsiz kayıt olun!\">\r          <Button\r            type=\"link\"\r            icon={<UserAddOutlined />}\r            onClick={handleCreateAccount}\r            className=\"helper-link create-account-link\"\r           aria-label=\"user add outlined\">\r            Hesabım Yok mu?\r          </Button>\r        </Tooltip>\r      )}\r      {showDemoAccess && (\r        <Tooltip title=\"Önce demo izleyerek platformu keşfedin\">\r          <Button\r            type=\"link\"\r            icon={<EyeOutlined />}\r            onClick={handleDemoAccess}\r            className=\"helper-link demo-access-link\"\r           aria-label=\"eye outlined\">\r            Önce İzle\r          </Button>\r        </Tooltip>\r      )}\r    </div>\r  );\r  return (\r    <>\r      {/* Inline Helpers */}\r      {(showForgotPassword || showCreateAccount || showDemoAccess) && renderInlineHelpers()}\r      {/* Floating Helpers */}\r      {renderFloatingHelpers()}\r      {/* Chat Support Modal */}\r      <Modal\r        title=\"Canlı Destek\"\r        open={chatModalVisible}\r        onCancel={() => setChatModalVisible(false)}\r        footer={null}\r        width={400}\r        className=\"chat-support-modal\"\r      >\r        <div className=\"chat-support-content\">\r          <div className=\"support-options\">\r            <div className=\"support-option\" onClick={handleWhatsAppSupport} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && handleWhatsAppSupport(e)}>\r              <div className=\"support-icon\">📱</div>\r              <div className=\"support-details\">\r                <h4>WhatsApp Destek</h4>\r                <p>En hızlı destek için</p>\r              </div>\r              <div className=\"support-badge\">Önerilen</div>\r            </div>\r            <div className=\"support-option\" onClick={handlePhoneSupport} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && handlePhoneSupport(e)}>\r              <div className=\"support-icon\">📞</div>\r              <div className=\"support-details\">\r                <h4>Telefon Desteği</h4>\r                <p>0850 123 45 67</p>\r              </div>\r              <div className=\"support-time\">09:00 - 18:00</div>\r            </div>\r            <div className=\"support-option\" onClick={() => window.open('mailto:destek@stocker.com.tr', '_blank')} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => window.open('mailto:destek@stocker.com.tr', '_blank')(e)}>\r              <div className=\"support-icon\">✉️</div>\r              <div className=\"support-details\">\r                <h4>E-posta Desteği</h4>\r                <p>destek@stocker.com.tr</p>\r              </div>\r              <div className=\"support-time\">24 saat</div>\r            </div>\r          </div>\r          <div className=\"support-note\">\r            <QuestionCircleOutlined style={{ color: '#667eea', marginRight: 8 }} />\r            <span>Teknik ekibimiz size 2 dakika içinde yanıt verecektir.</span>\r          </div>\r        </div>\r      </Modal>\r      {/* Demo Access Modal */}\r      <Modal\r        title=\"Platform Demosu\"\r        open={demoModalVisible}\r        onCancel={() => setDemoModalVisible(false)}\r        footer={null}\r        width={500}\r        className=\"demo-access-modal\"\r      >\r        <div className=\"demo-access-content\">\r          <div className=\"demo-video-placeholder\">\r            <PlayCircleOutlined style={{ fontSize: 64, color: '#667eea' }} />\r            <h3>Platform Demo Videosu</h3>\r            <p>Stocker'ın tüm özelliklerini 5 dakikada keşfedin</p>\r          </div>\r          <div className=\"demo-actions\">\r            <Button\r              type=\"primary\"\r              size=\"large\"\r              icon={<PlayCircleOutlined />}\r              onClick={() = aria-label=\"play circle outlined\"> {\r                // Simulate video play\r                message.success('Demo video oynatılıyor...');\r                trackInterest('demo-video-play');\r              }}\r              className=\"demo-play-btn\"\r            >\r              Demo'yu İzle\r            </Button>\r            <Button\r              size=\"large\"\r              ghost\r              onClick={() => {\r                window.location.href = '/register';\r                trackInterest('demo-to-register');\r              }}\r            >\r              Hemen Dene\r            </Button>\r          </div>\r          <div className=\"demo-benefits\">\r            <h4>Demo'da neler göreceksiniz:</h4>\r            <ul>\r              <li>✅ Müşteri yönetimi nasıl çalışır</li>\r              <li>✅ Stok takibi ve raporlama</li>\r              <li>✅ Faturalama işlemleri</li>\r              <li>✅ Modüller arası entegrasyon</li>\r            </ul>\r          </div>\r        </div>\r      </Modal>\r    </>\r  );\r};",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/ContextualHelpers/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React from 'react';\rimport { Table, TableProps, Card, Input, Space, Button } from 'antd';\rimport { SearchOutlined, ReloadOutlined } from '@ant-design/icons';\rimport { EmptyState } from '../EmptyState';\rimport './style.css';\rinterface DataTableProps<T> extends Omit<TableProps<T>, 'title'> {\r  title?: string;\r  searchable?: boolean;\r  searchPlaceholder?: string;\r  onSearch?: (value: string) => void;\r  onRefresh?: () => void;\r  showCard?: boolean;\r  emptyStateProps?: {\r    title?: string;\r    description?: string;\r    showAction?: boolean;\r    actionText?: string;\r    onAction?: () => void;\r  };\r  extra?: React.ReactNode;\r}\rexport function DataTable<T extends object>({\r  title,\r  searchable = false,\r  searchPlaceholder = 'Ara...',\r  onSearch,\r  onRefresh,\r  showCard = true,\r  emptyStateProps,\r  extra,\r  locale,\r  ...tableProps\r}: DataTableProps<T>) {\r  const [searchValue, setSearchValue] = React.useState('');\r  const handleSearch = (value: string) => {\r    setSearchValue(value);\r    onSearch?.(value);\r  };\r  const tableLocale = locale || {\r    emptyText: <EmptyState {...emptyStateProps} />,\r  };\r  const headerContent = (\r    <>\r      {(title || searchable || onRefresh || extra) && (\r        <div className=\"data-table-header\">\r          <div className=\"data-table-header-left\">\r            {title && <h3 className=\"data-table-title\">{title}</h3>}\r          </div>\r          <div className=\"data-table-header-right\">\r            <Space size=\"middle\">\r              {searchable && (\r                <Input\r                  placeholder={searchPlaceholder}\r                  value={searchValue}\r                  onChange={(e) = aria-label=\"input field\"> handleSearch(e.target.value)}\r                  prefix={<SearchOutlined />}\r                  style={{ width: 250 }}\r                  allowClear\r                />\r              )}\r              {onRefresh && (\r                <Button\r                  icon={<ReloadOutlined />}\r                  onClick={onRefresh}\r                  title=\"Yenile\"\r                / aria-label=\"reload outlined\">\r              )}\r              {extra}\r            </Space>\r          </div>\r        </div>\r      )}\r    </>\r  );\r  const tableContent = (\r    <Table<T>\r      {...tableProps}\r      locale={tableLocale}\r      className={`data-table ${tableProps.className || ''}`}\r    />\r  );\r  if (!showCard) {\r    return (\r      <>\r        {headerContent}\r        {tableContent}\r      </>\r    );\r  }\r  return (\r    <Card className=\"data-table-card\" bordered={false}>\r      {headerContent}\r      {tableContent}\r    </Card>\r  );\r}\rexport default DataTable;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/DataTable/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React from 'react';\rimport { Empty, Button } from 'antd';\rimport { PlusOutlined } from '@ant-design/icons';\rinterface EmptyStateProps {\r  title?: string;\r  description?: string;\r  image?: React.ReactNode;\r  actionText?: string;\r  onAction?: () => void;\r  showAction?: boolean;\r  icon?: React.ReactNode;\r}\rexport const EmptyState: React.FC<EmptyStateProps> = ({\r  title = 'Veri Bulunamadı',\r  description = 'Henüz hiç veri eklenmemiş.',\r  image,\r  actionText = 'Yeni Ekle',\r  onAction,\r  showAction = false,\r  icon = <PlusOutlined />,\r}) => {\r  return (\r    <div style={{ padding: '40px 0', textAlign: 'center' }}>\r      <Empty\r        image={image || Empty.PRESENTED_IMAGE_SIMPLE}\r        description={\r          <div>\r            <h3 style={{ marginBottom: 8, fontSize: 16, fontWeight: 500 }}>\r              {title}\r            </h3>\r            <p style={{ color: '#8c8c8c', marginBottom: showAction ? 16 : 0 }}>\r              {description}\r            </p>\r          </div>\r        }\r      >\r        {showAction && onAction && (\r          <Button type=\"primary\" icon={icon} onClick={onAction} aria-label=\"button\">\r            {actionText}\r          </Button>\r        )}\r      </Empty>\r    </div>\r  );\r};\rexport default EmptyState;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/EmptyState/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { Component, ErrorInfo, ReactNode } from 'react';\rimport { Alert, Button } from 'antd';\rinterface Props {\r  children: ReactNode;\r  fallback?: ReactNode;\r}\rinterface State {\r  hasError: boolean;\r  error: Error | null;\r  errorInfo: ErrorInfo | null;\r}\rexport class ErrorBoundary extends Component<Props, State> {\r  public state: State = {\r    hasError: false,\r    error: null,\r    errorInfo: null\r  };\r  public static getDerivedStateFromError(error: Error): State {\r    return { \r      hasError: true, \r      error,\r      errorInfo: null \r    };\r  }\r  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r    ,\r      message: error.message,\r      stack: error.stack,\r      componentStack: errorInfo.componentStack\r    });\r    this.setState({\r      error,\r      errorInfo\r    });\r  }\r  private handleReset = () => {\r    this.setState({\r      hasError: false,\r      error: null,\r      errorInfo: null\r    });\r  };\r  public render() {\r    if (this.state.hasError) {\r      if (this.props.fallback) {\r        return this.props.fallback;\r      }\r      return (\r        <div style={{ padding: '24px', background: '#fff', minHeight: '100vh' }}>\r          <Alert\r            message=\"Bir Hata Oluştu\"\r            description={\r              <div>\r                <p><strong>Hata Mesajı:</strong> {this.state.error?.message}</p>\r                <details style={{ marginTop: 16 }}>\r                  <summary style={{ cursor: 'pointer', userSelect: 'none' }}>\r                    Teknik Detaylar (Tıklayın)\r                  </summary>\r                  <div style={{ marginTop: 8 }}>\r                    <p><strong>Error Stack:</strong></p>\r                    <pre style={{ \r                      fontSize: 11, \r                      background: '#f5f5f5', \r                      padding: 12, \r                      borderRadius: 4,\r                      overflow: 'auto',\r                      maxHeight: 200\r                    }}>\r                      {this.state.error?.stack}\r                    </pre>\r                    {this.state.errorInfo && (\r                      <>\r                        <p><strong>Component Stack:</strong></p>\r                        <pre style={{ \r                          fontSize: 11, \r                          background: '#f5f5f5', \r                          padding: 12, \r                          borderRadius: 4,\r                          overflow: 'auto',\r                          maxHeight: 200\r                        }}>\r                          {this.state.errorInfo.componentStack}\r                        </pre>\r                      </>\r                    )}\r                  </div>\r                </details>\r                <Button \r                  type=\"primary\" \r                  onClick={this.handleReset}\r                  style={{ marginTop: 16 }}\r                >\r                  Tekrar Dene\r                </Button>\r              </div>\r            }\r            type=\"error\"\r            showIcon\r          />\r        </div>\r      );\r    }\r    return this.props.children;\r  }\r}",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/ErrorBoundary.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import { Component, ErrorInfo, ReactNode } from 'react';\rimport { Result, Button } from 'antd';\rimport { CloseCircleOutlined } from '@ant-design/icons';\rinterface Props {\r  children: ReactNode;\r  fallback?: ReactNode;\r}\rinterface State {\r  hasError: boolean;\r  error: Error | null;\r  errorInfo: ErrorInfo | null;\r}\rexport class ErrorBoundary extends Component<Props, State> {\r  constructor(props: Props) {\r    super(props);\r    this.state = {\r      hasError: false,\r      error: null,\r      errorInfo: null,\r    };\r  }\r  static getDerivedStateFromError(error: Error): State {\r    return {\r      hasError: true,\r      error,\r      errorInfo: null,\r    };\r  }\r  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r    this.setState({\r      error,\r      errorInfo,\r    });\r  }\r  handleReset = () => {\r    this.setState({\r      hasError: false,\r      error: null,\r      errorInfo: null,\r    });\r    window.location.reload();\r  };\r  render() {\r    if (this.state.hasError) {\r      if (this.props.fallback) {\r        return this.props.fallback;\r      }\r      return (\r        <div style={{ padding: '50px' }}>\r          <Result\r            status=\"error\"\r            icon={<CloseCircleOutlined style={{ color: '#ff4d4f' }} />}\r            title=\"Bir Hata Oluştu\"\r            subTitle=\"Üzgünüz, beklenmeyen bir hata oluştu. Lütfen sayfayı yenileyin veya daha sonra tekrar deneyin.\"\r            extra={[\r              <Button type=\"primary\" onClick={this.handleReset} key=\"refresh\">\r                Sayfayı Yenile\r              </Button>,\r              <Button key=\"home\" onClick={() => window.location.href = '/'}>\r                Ana Sayfaya Dön\r              </Button>,\r            ]}\r          >\r            {process.env.NODE_ENV === 'development' && this.state.error && (\r              <div style={{ textAlign: 'left', marginTop: 20 }}>\r                <details style={{ whiteSpace: 'pre-wrap' }}>\r                  <summary>Hata Detayları (Geliştirici Modu)</summary>\r                  <p style={{ color: 'red', marginTop: 10 }}>\r                    {this.state.error.toString()}\r                  </p>\r                  {this.state.errorInfo && (\r                    <pre style={{ fontSize: 12, marginTop: 10 }}>\r                      {this.state.errorInfo.componentStack}\r                    </pre>\r                  )}\r                </details>\r              </div>\r            )}\r          </Result>\r        </div>\r      );\r    }\r    return this.props.children;\r  }\r}\rexport default ErrorBoundary;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/ErrorBoundary/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useEffect, useState } from 'react';\rimport { notification, Badge, Button, Drawer, List, Avatar, Space, Typography, Tag, Empty, Tooltip } from 'antd';\rimport {\r  BellOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  InfoCircleOutlined,\r  WarningOutlined,\r  DeleteOutlined,\r  CheckOutlined,\r  ClearOutlined,\r  SyncOutlined,\r  TeamOutlined,\r  DollarOutlined,\r  UserOutlined,\r  ShoppingCartOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r} from '@ant-design/icons';\rimport signalRService from '@/services/signalr.service';\rimport masterDashboardService from '@/services/masterDashboard.service';\rimport './NotificationManager.css';\rconst { Text, Title } = Typography;\rinterface NotificationItem {\r  id: string;\r  title: string;\r  description: string;\r  type: 'success' | 'info' | 'warning' | 'error';\r  timestamp: Date;\r  read: boolean;\r  icon?: React.ReactNode;\r  actionUrl?: string;\r  source?: string;\r}\rexport const NotificationManager: React.FC = () => {\r  const [notifications, setNotifications] = useState<NotificationItem[]>([]);\r  const [unreadCount, setUnreadCount] = useState(0);\r  const [drawerVisible, setDrawerVisible] = useState(false);\r  const [loading, setLoading] = useState(false);\r  useEffect(() => {\r    // Setup SignalR listeners\r    setupSignalRListeners();\r    // Load initial notifications from localStorage\r    loadStoredNotifications();\r    return () => {\r      // Cleanup\r    };\r  }, []);\r  const setupSignalRListeners = () => {\r    // Listen for general notifications\r    signalRService.onNotificationReceived((notification) => {\r      const newNotification: NotificationItem = {\r        id: notification.id || Date.now().toString(),\r        title: notification.title,\r        description: notification.message,\r        type: notification.type.toLowerCase() as NotificationItem['type'],\r        timestamp: new Date(notification.createdAt),\r        read: false,\r        icon: getIconForType(notification.type),\r        actionUrl: notification.actionUrl,\r        source: 'system',\r      };\r      addNotification(newNotification);\r      showNotificationPopup(newNotification);\r    });\r    // Listen for dashboard-specific events\r    masterDashboardService.onNewTenant((tenant) => {\r      const notification: NotificationItem = {\r        id: `tenant-${tenant.id}`,\r        title: 'Yeni Tenant',\r        description: `${tenant.name} sisteme eklendi`,\r        type: 'success',\r        timestamp: new Date(),\r        read: false,\r        icon: <TeamOutlined />,\r        source: 'dashboard',\r      };\r      addNotification(notification);\r      showNotificationPopup(notification);\r    });\r    masterDashboardService.onAlertReceived((alert) => {\r      const notification: NotificationItem = {\r        id: alert.id,\r        title: alert.title,\r        description: alert.message,\r        type: alert.level as NotificationItem['type'],\r        timestamp: new Date(alert.timestamp),\r        read: false,\r        icon: getIconForAlert(alert.level),\r        source: alert.source,\r      };\r      addNotification(notification);\r      if (alert.level === 'critical' || alert.level === 'error') {\r        showNotificationPopup(notification);\r      }\r    });\r    masterDashboardService.onSystemHealthChanged((health) => {\r      if (health.status === 'critical') {\r        const notification: NotificationItem = {\r          id: `health-${Date.now()}`,\r          title: 'Sistem Sağlık Uyarısı',\r          description: `Sistem kritik durumda: CPU %${health.cpu}, Memory %${health.memory}`,\r          type: 'error',\r          timestamp: new Date(),\r          read: false,\r          icon: <WarningOutlined />,\r          source: 'system',\r        };\r        addNotification(notification);\r        showNotificationPopup(notification);\r      }\r    });\r  };\r  const getIconForType = (type: string): React.ReactNode => {\r    const iconMap: Record<string, React.ReactNode> = {\r      'Success': <CheckCircleOutlined style={{ color: '#52c41a' }} />,\r      'Info': <InfoCircleOutlined style={{ color: '#1890ff' }} />,\r      'Warning': <WarningOutlined style={{ color: '#faad14' }} />,\r      'Error': <CloseCircleOutlined style={{ color: '#ff4d4f' }} />,\r      'Payment': <DollarOutlined style={{ color: '#52c41a' }} />,\r      'User': <UserOutlined style={{ color: '#1890ff' }} />,\r      'Order': <ShoppingCartOutlined style={{ color: '#722ed1' }} />,\r      'Stock': <DatabaseOutlined style={{ color: '#fa8c16' }} />,\r      'System': <ApiOutlined style={{ color: '#595959' }} />,\r    };\r    return iconMap[type] || <InfoCircleOutlined />;\r  };\r  const getIconForAlert = (level: string): React.ReactNode => {\r    switch (level) {\r      case 'critical':\r        return <CloseCircleOutlined style={{ color: '#ff4d4f' }} />;\r      case 'error':\r        return <CloseCircleOutlined style={{ color: '#ff4d4f' }} />;\r      case 'warning':\r        return <WarningOutlined style={{ color: '#faad14' }} />;\r      default:\r        return <InfoCircleOutlined style={{ color: '#1890ff' }} />;\r    }\r  };\r  const addNotification = (notification: NotificationItem) => {\r    setNotifications((prev) => {\r      const updated = [notification, ...prev].slice(0, 100); // Keep last 100 notifications\r      saveNotificationsToStorage(updated);\r      return updated;\r    });\r    setUnreadCount((prev) => prev + 1);\r  };\r  const showNotificationPopup = (notification: NotificationItem) => {\r    const key = `notification-${notification.id}`;\r    notification[notification.type]({\r      key,\r      message: notification.title,\r      description: notification.description,\r      placement: 'topRight',\r      duration: 4,\r      icon: notification.icon,\r      btn: notification.actionUrl ? (\r        <Button \r          type=\"primary\" \r          size=\"small\"\r          onClick={() => {\r            window.open(notification.actionUrl, '_blank');\r            notification.close(key);\r          }}\r        >\r          Görüntüle\r        </Button>\r      ) : undefined,\r    });\r  };\r  const markAsRead = (id: string) => {\r    setNotifications((prev) => {\r      const updated = prev.map((n) => \r        n.id === id ? { ...n, read: true } : n\r      );\r      saveNotificationsToStorage(updated);\r      return updated;\r    });\r    setUnreadCount((prev) => Math.max(0, prev - 1));\r  };\r  const markAllAsRead = () => {\r    setNotifications((prev) => {\r      const updated = prev.map((n) => ({ ...n, read: true }));\r      saveNotificationsToStorage(updated);\r      return updated;\r    });\r    setUnreadCount(0);\r  };\r  const deleteNotification = (id: string) => {\r    setNotifications((prev) => {\r      const notification = prev.find(n => n.id === id);\r      const updated = prev.filter((n) => n.id !== id);\r      saveNotificationsToStorage(updated);\r      if (notification && !notification.read) {\r        setUnreadCount((count) => Math.max(0, count - 1));\r      }\r      return updated;\r    });\r  };\r  const clearAll = () => {\r    setNotifications([]);\r    setUnreadCount(0);\r    localStorage.removeItem('notifications');\r  };\r  const saveNotificationsToStorage = (notifications: NotificationItem[]) => {\r    try {\r      localStorage.setItem('notifications', JSON.stringify(notifications));\r    } catch (error) {\r    }\r  };\r  const loadStoredNotifications = () => {\r    try {\r      const stored = localStorage.getItem('notifications');\r      if (stored) {\r        const parsed = JSON.parse(stored) as NotificationItem[];\r        setNotifications(parsed);\r        setUnreadCount(parsed.filter(n => !n.read).length);\r      }\r    } catch (error) {\r    }\r  };\r  const getRelativeTime = (date: Date): string => {\r    const now = new Date();\r    const diff = now.getTime() - new Date(date).getTime();\r    const minutes = Math.floor(diff / 60000);\r    const hours = Math.floor(diff / 3600000);\r    const days = Math.floor(diff / 86400000);\r    if (minutes < 1) return 'Az önce';\r    if (minutes < 60) return `${minutes} dakika önce`;\r    if (hours < 24) return `${hours} saat önce`;\r    if (days < 7) return `${days} gün önce`;\r    return new Date(date).toLocaleDateString('tr-TR');\r  };\r  return (\r    <>\r      <Tooltip title=\"Bildirimler\">\r        <Badge count={unreadCount} overflowCount={99}>\r          <Button\r            type=\"text\"\r            icon={<BellOutlined />}\r            onClick={() = aria-label=\"bell outlined\"> setDrawerVisible(true)}\r            style={{ fontSize: 18 }}\r          />\r        </Badge>\r      </Tooltip>\r      <Drawer\r        title={\r          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r            <Title level={4} style={{ margin: 0 }}>\r              Bildirimler\r              {unreadCount > 0 && (\r                <Badge \r                  count={unreadCount} \r                  style={{ marginLeft: 12 }}\r                  overflowCount={99}\r                />\r              )}\r            </Title>\r            <Space>\r              {notifications.length > 0 && (\r                <>\r                  <Tooltip title=\"Tümünü okundu işaretle\">\r                    <Button\r                      type=\"text\"\r                      icon={<CheckOutlined />}\r                      onClick={markAllAsRead}\r                      disabled={unreadCount === 0}\r                    / aria-label=\"check outlined\">\r                  </Tooltip>\r                  <Tooltip title=\"Tümünü temizle\">\r                    <Button\r                      type=\"text\"\r                      icon={<ClearOutlined />}\r                      onClick={clearAll}\r                      danger\r                    / aria-label=\"clear outlined\">\r                  </Tooltip>\r                </>\r              )}\r              <Tooltip title=\"Yenile\">\r                <Button\r                  type=\"text\"\r                  icon={<SyncOutlined spin={loading} / aria-label=\"sync outlined\">}\r                  onClick={() => {\r                    setLoading(true);\r                    setTimeout(() => setLoading(false), 1000);\r                  }}\r                />\r              </Tooltip>\r            </Space>\r          </div>\r        }\r        placement=\"right\"\r        width={400}\r        open={drawerVisible}\r        onClose={() => setDrawerVisible(false)}\r        bodyStyle={{ padding: 0 }}\r      >\r        {notifications.length > 0 ? (\r          <List\r            dataSource={notifications}\r            renderItem={(item) => (\r              <List.Item\r                key={item.id}\r                className={`notification-item ${!item.read ? 'unread' : ''}`}\r                onClick={() => !item.read && markAsRead(item.id)}\r                actions={[\r                  <Tooltip title=\"Sil\" key=\"delete\">\r                    <Button\r                      type=\"text\"\r                      size=\"small\"\r                      icon={<DeleteOutlined />}\r                      onClick={(e) = aria-label=\"delete outlined\"> {\r                        e.stopPropagation();\r                        deleteNotification(item.id);\r                      }}\r                      danger\r                    />\r                  </Tooltip>\r                ]}\r              >\r                <List.Item.Meta\r                  avatar={\r                    <Avatar \r                      icon={item.icon}\r                      style={{ \r                        backgroundColor: item.type === 'error' ? '#fff2f0' :\r                                       item.type === 'warning' ? '#fffbe6' :\r                                       item.type === 'success' ? '#f6ffed' : '#f0f5ff'\r                      }}\r                    />\r                  }\r                  title={\r                    <Space>\r                      <Text strong={!item.read}>{item.title}</Text>\r                      {!item.read && <Badge status=\"processing\" />}\r                    </Space>\r                  }\r                  description={\r                    <div>\r                      <Text type=\"secondary\" style={{ fontSize: 13 }}>\r                        {item.description}\r                      </Text>\r                      <div style={{ marginTop: 8 }}>\r                        <Space size=\"small\">\r                          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                            {getRelativeTime(item.timestamp)}\r                          </Text>\r                          {item.source && (\r                            <Tag color=\"default\" style={{ fontSize: 11 }}>\r                              {item.source}\r                            </Tag>\r                          )}\r                        </Space>\r                      </div>\r                    </div>\r                  }\r                />\r              </List.Item>\r            )}\r          />\r        ) : (\r          <Empty\r            description=\"Bildirim yok\"\r            style={{ marginTop: 100 }}\r          />\r        )}\r      </Drawer>\r    </>\r  );\r};\rexport default NotificationManager;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/NotificationManager.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "noKeyboardHandlers",
      "line": 1,
      "code": "import React from 'react';\rimport { PageHeader as AntPageHeader } from '@ant-design/pro-components';\rimport { ArrowLeftOutlined } from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport './style.css';\rinterface BreadcrumbItem {\r  title: string;\r  path?: string;\r}\rinterface PageHeaderProps {\r  title: string;\r  subtitle?: string;\r  breadcrumbs?: BreadcrumbItem[];\r  showBack?: boolean;\r  onBack?: () => void;\r  extra?: React.ReactNode;\r  actions?: React.ReactNode;\r  ghost?: boolean;\r  children?: React.ReactNode;\r}\rexport const PageHeader: React.FC<PageHeaderProps> = ({\r  title,\r  subtitle,\r  breadcrumbs,\r  showBack = false,\r  onBack,\r  extra,\r  actions,\r  ghost = true,\r  children,\r}) => {\r  const navigate = useNavigate();\r  const handleBack = () => {\r    if (onBack) {\r      onBack();\r    } else {\r      navigate(-1);\r    }\r  };\r  const breadcrumbItems = breadcrumbs?.map((item, index) => ({\r    title: item.path && index < (breadcrumbs?.length || 0) - 1 ? (\r      <a onClick={() => navigate(item.path!)}>{item.title}</a>\r    ) : (\r      item.title\r    ),\r  }));\r  return (\r    <div className=\"page-header-wrapper\">\r      <AntPageHeader\r        ghost={ghost}\r        title={title}\r        subTitle={subtitle}\r        onBack={showBack ? handleBack : undefined}\r        backIcon={showBack ? <ArrowLeftOutlined /> : false}\r        breadcrumb={breadcrumbItems ? { items: breadcrumbItems } : undefined}\r        extra={actions || extra}\r      >\r        {children}\r      </AntPageHeader>\r    </div>\r  );\r};\rexport default PageHeader;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/PageHeader/index.tsx",
      "severity": "warning",
      "message": "Interactive element missing keyboard handler"
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React from 'react';\rimport { PageHeader as AntPageHeader } from '@ant-design/pro-components';\rimport { ArrowLeftOutlined } from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport './style.css';\rinterface BreadcrumbItem {\r  title: string;\r  path?: string;\r}\rinterface PageHeaderProps {\r  title: string;\r  subtitle?: string;\r  breadcrumbs?: BreadcrumbItem[];\r  showBack?: boolean;\r  onBack?: () => void;\r  extra?: React.ReactNode;\r  actions?: React.ReactNode;\r  ghost?: boolean;\r  children?: React.ReactNode;\r}\rexport const PageHeader: React.FC<PageHeaderProps> = ({\r  title,\r  subtitle,\r  breadcrumbs,\r  showBack = false,\r  onBack,\r  extra,\r  actions,\r  ghost = true,\r  children,\r}) => {\r  const navigate = useNavigate();\r  const handleBack = () => {\r    if (onBack) {\r      onBack();\r    } else {\r      navigate(-1);\r    }\r  };\r  const breadcrumbItems = breadcrumbs?.map((item, index) => ({\r    title: item.path && index < (breadcrumbs?.length || 0) - 1 ? (\r      <a onClick={() => navigate(item.path!)}>{item.title}</a>\r    ) : (\r      item.title\r    ),\r  }));\r  return (\r    <div className=\"page-header-wrapper\">\r      <AntPageHeader\r        ghost={ghost}\r        title={title}\r        subTitle={subtitle}\r        onBack={showBack ? handleBack : undefined}\r        backIcon={showBack ? <ArrowLeftOutlined /> : false}\r        breadcrumb={breadcrumbItems ? { items: breadcrumbItems } : undefined}\r        extra={actions || extra}\r      >\r        {children}\r      </AntPageHeader>\r    </div>\r  );\r};\rexport default PageHeader;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/PageHeader/index.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    },
    {
      "type": "missingRoles",
      "line": 1,
      "code": "import React, { useMemo, useCallback, useState, useEffect } from 'react';\rimport { Checkbox, Space } from 'antd';\rimport type { ColumnsType } from 'antd/es/table';\rimport { SortAscendingOutlined, SortDescendingOutlined } from '@ant-design/icons';\rimport * as ReactWindow from 'react-window';\rimport AutoSizer from 'react-virtualized-auto-sizer';\rconst List = ReactWindow.FixedSizeList;\rinterface VirtualTableProps<T> {\r  columns: ColumnsType<T>;\r  dataSource: T[];\r  rowKey: string | ((record: T) => string);\r  rowHeight?: number;\r  headerHeight?: number;\r  loading?: boolean;\r  selectable?: boolean;\r  onSelectionChange?: (selectedKeys: React.Key[]) => void;\r  onRowClick?: (record: T) => void;\r  className?: string;\r  style?: React.CSSProperties;\r}\rexport function VirtualTable<T extends Record<string, any>>({\r  columns,\r  dataSource,\r  rowKey,\r  rowHeight = 54,\r  headerHeight = 55,\r  loading = false,\r  selectable = false,\r  onSelectionChange,\r  onRowClick,\r  className,\r  style,\r}: VirtualTableProps<T>) {\r  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\r  const [sortColumn, setSortColumn] = useState<string | null>(null);\r  const [sortOrder, setSortOrder] = useState<'ascend' | 'descend' | null>(null);\r  const getRowKey = useCallback(\r    (record: T) => {\r      if (typeof rowKey === 'function') {\r        return rowKey(record);\r      }\r      return record[rowKey];\r    },\r    [rowKey]\r  );\r  const sortedData = useMemo(() => {\r    if (!sortColumn || !sortOrder) {\r      return dataSource;\r    }\r    return [...dataSource].sort((a, b) => {\r      const aValue = a[sortColumn];\r      const bValue = b[sortColumn];\r      if (aValue === bValue) return 0;\r      const comparison = aValue > bValue ? 1 : -1;\r      return sortOrder === 'ascend' ? comparison : -comparison;\r    });\r  }, [dataSource, sortColumn, sortOrder]);\r  const handleSort = useCallback((columnKey: string) => {\r    if (sortColumn === columnKey) {\r      if (sortOrder === 'ascend') {\r        setSortOrder('descend');\r      } else if (sortOrder === 'descend') {\r        setSortOrder(null);\r        setSortColumn(null);\r      }\r    } else {\r      setSortColumn(columnKey);\r      setSortOrder('ascend');\r    }\r  }, [sortColumn, sortOrder]);\r  const handleSelectAll = useCallback((checked: boolean) => {\r    if (checked) {\r      const allKeys = sortedData.map(record => getRowKey(record));\r      setSelectedRowKeys(allKeys);\r      onSelectionChange?.(allKeys);\r    } else {\r      setSelectedRowKeys([]);\r      onSelectionChange?.([]);\r    }\r  }, [sortedData, getRowKey, onSelectionChange]);\r  const handleSelectRow = useCallback((key: React.Key, checked: boolean) => {\r    const newSelectedKeys = checked\r      ? [...selectedRowKeys, key]\r      : selectedRowKeys.filter(k => k !== key);\r    setSelectedRowKeys(newSelectedKeys);\r    onSelectionChange?.(newSelectedKeys);\r  }, [selectedRowKeys, onSelectionChange]);\r  const renderHeader = () => (\r    <div \r      className=\"virtual-table-header\"\r      style={{\r        display: 'flex',\r        alignItems: 'center',\r        height: headerHeight,\r        borderBottom: '1px solid #f0f0f0',\r        backgroundColor: '#fafafa',\r        fontWeight: 500,\r        padding: '0 16px',\r      }}\r    >\r      {selectable && (\r        <div style={{ width: 50, flexShrink: 0 }}>\r          <Checkbox\r            checked={selectedRowKeys.length === sortedData.length && sortedData.length > 0}\r            indeterminate={selectedRowKeys.length > 0 && selectedRowKeys.length < sortedData.length}\r            onChange={(e) => handleSelectAll(e.target.checked)}\r          />\r        </div>\r      )}\r      {columns.map((column, index) => {\r        const columnKey = column.dataIndex as string;\r        const isSorted = sortColumn === columnKey;\r        return (\r          <div\r            key={columnKey || index}\r            style={{\r              flex: column.width ? `0 0 ${column.width}px` : 1,\r              padding: '0 8px',\r              display: 'flex',\r              alignItems: 'center',\r              justifyContent: 'space-between',\r              cursor: column.sorter ? 'pointer' : 'default',\r            }}\r            onClick={() => column.sorter && handleSort(columnKey)}\r           role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => column.sorter && handleSort(columnKey)(e)}>\r            <span>{column.title as React.ReactNode}</span>\r            {column.sorter && (\r              <Space size={4}>\r                {isSorted && sortOrder === 'ascend' && <SortAscendingOutlined />}\r                {isSorted && sortOrder === 'descend' && <SortDescendingOutlined />}\r              </Space>\r            )}\r          </div>\r        );\r      })}\r    </div>\r  );\r  const Row = ({ index, style }: { index: number; style: React.CSSProperties }) => {\r    const record = sortedData[index];\r    const key = getRowKey(record);\r    const isSelected = selectedRowKeys.includes(key);\r    return (\r      <div\r        style={{\r          ...style,\r          display: 'flex',\r          alignItems: 'center',\r          borderBottom: '1px solid #f0f0f0',\r          padding: '0 16px',\r          cursor: onRowClick ? 'pointer' : 'default',\r          backgroundColor: isSelected ? '#f5f5f5' : undefined,\r        }}\r        className=\"virtual-table-row\"\r        onClick={() => onRowClick?.(record)}\r       role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => onRowClick?.(record)(e)}>\r        {selectable && (\r          <div style={{ width: 50, flexShrink: 0 }}>\r            <Checkbox\r              checked={isSelected}\r              onChange={(e) => handleSelectRow(key, e.target.checked)}\r              onClick={(e) => e.stopPropagation()}\r            />\r          </div>\r        )}\r        {columns.map((column, colIndex) => {\r          const dataIndex = column.dataIndex as string;\r          const value = record[dataIndex];\r          return (\r            <div\r              key={dataIndex || colIndex}\r              style={{\r                flex: column.width ? `0 0 ${column.width}px` : 1,\r                padding: '0 8px',\r                overflow: 'hidden',\r                textOverflow: 'ellipsis',\r                whiteSpace: 'nowrap',\r              }}\r            >\r              {column.render ? column.render(value, record, index) : value}\r            </div>\r          );\r        })}\r      </div>\r    );\r  };\r  useEffect(() => {\r    setSelectedRowKeys([]);\r  }, [dataSource]);\r  return (\r    <div className={className} style={{ height: '100%', width: '100%', ...style }}>\r      {renderHeader()}\r      <div style={{ height: `calc(100% - ${headerHeight}px)` }}>\r        <AutoSizer>\r          {({ height, width }) => (\r            <List\r              height={height}\r              itemCount={sortedData.length}\r              itemSize={rowHeight}\r              width={width}\r              overscanCount={10}\r            >\r              {Row}\r            </List>\r          )}\r        </AutoSizer>\r      </div>\r    </div>\r  );\r}\rexport default VirtualTable;",
      "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/VirtualTable.tsx",
      "severity": "warning",
      "message": "Clickable div should be a button or have role=\"button\""
    }
  ],
  "byType": {
    "missingAria": [],
    "missingAlt": [],
    "emptyButtons": [],
    "missingLabels": [
      {
        "type": "missingLabels",
        "line": 237,
        "code": "<Input",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/components/TenantLoginModal/index.tsx",
        "severity": "error",
        "message": "Input without label or aria-label"
      },
      {
        "type": "missingLabels",
        "line": 280,
        "code": "<Input",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/pages/TenantLogin/index.tsx",
        "severity": "error",
        "message": "Input without label or aria-label"
      },
      {
        "type": "missingLabels",
        "line": 291,
        "code": "<Input.Password",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/pages/TenantLogin/index.tsx",
        "severity": "error",
        "message": "Input without label or aria-label"
      }
    ],
    "noKeyboardHandlers": [
      {
        "type": "noKeyboardHandlers",
        "line": 265,
        "code": "onClick={handleTenantLogin}",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/components/TenantLoginModal/index.tsx",
        "severity": "warning",
        "message": "Interactive element missing keyboard handler"
      },
      {
        "type": "noKeyboardHandlers",
        "line": 297,
        "code": "onClick={() => handleQuickAccess(tenant.slug)}",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/components/TenantLoginModal/index.tsx",
        "severity": "warning",
        "message": "Interactive element missing keyboard handler"
      },
      {
        "type": "noKeyboardHandlers",
        "line": 303,
        "code": "<Link onClick={() => navigate('/forgot-password')}>",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/pages/TenantLogin/index.tsx",
        "severity": "warning",
        "message": "Interactive element missing keyboard handler"
      },
      {
        "type": "noKeyboardHandlers",
        "line": 324,
        "code": "<Link onClick={() => navigate('/register')}>",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/pages/TenantLogin/index.tsx",
        "severity": "warning",
        "message": "Interactive element missing keyboard handler"
      },
      {
        "type": "noKeyboardHandlers",
        "line": 330,
        "code": "<Link onClick={() => window.location.href = getMainDomainUrl()}>",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/pages/TenantLogin/index.tsx",
        "severity": "warning",
        "message": "Interactive element missing keyboard handler"
      },
      {
        "type": "noKeyboardHandlers",
        "line": 1,
        "code": "import React, { memo, useMemo } from 'react';\rimport { Card, Row, Col, Statistic, Progress, Badge, Space, Typography, Tooltip, Skeleton } from 'antd';\rimport {\r  ArrowUpOutlined,\r  ArrowDownOutlined,\r  InfoCircleOutlined,\r  SyncOutlined,\r} from '@ant-design/icons';\rimport CountUp from 'react-countup';\rimport { motion } from 'framer-motion';\rconst { Text, Title } = Typography;\rinterface WidgetProps {\r  title: string;\r  value: number;\r  prefix?: string;\r  suffix?: string;\r  trend?: 'up' | 'down' | 'stable';\r  trendValue?: number;\r  icon?: React.ReactNode;\r  color?: string;\r  loading?: boolean;\r  description?: string;\r  onClick?: () => void;\r  progress?: number;\r  extra?: React.ReactNode;\r}\r// Optimize edilmiş StatWidget komponenti\rexport const StatWidget = memo<WidgetProps>(({\r  title,\r  value,\r  prefix,\r  suffix,\r  trend,\r  trendValue,\r  icon,\r  color = '#1890ff',\r  loading = false,\r  description,\r  onClick,\r  progress,\r  extra\r}) => {\r  const trendIcon = useMemo(() => {\r    if (!trend) return null;\r    if (trend === 'up') return <ArrowUpOutlined style={{ color: '#52c41a' }} />;\r    if (trend === 'down') return <ArrowDownOutlined style={{ color: '#ff4d4f' }} />;\r    return null;\r  }, [trend]);\r  const trendColor = useMemo(() => {\r    if (trend === 'up') return '#52c41a';\r    if (trend === 'down') return '#ff4d4f';\r    return '#faad14';\r  }, [trend]);\r  if (loading) {\r    return (\r      <Card className=\"stat-widget-loading\">\r        <Skeleton active paragraph={{ rows: 2 }} />\r      </Card>\r    );\r  }\r  return (\r    <motion.div\r      whileHover={{ scale: 1.02 }}\r      whileTap={{ scale: 0.98 }}\r      transition={{ type: \"spring\", stiffness: 300 }}\r    >\r      <Card\r        className=\"stat-widget\"\r        hoverable={!!onClick}\r        onClick={onClick}\r        style={{\r          borderTop: `3px solid ${color}`,\r          cursor: onClick ? 'pointer' : 'default'\r        }}\r      >\r        <div className=\"widget-header\">\r          <Space>\r            {icon && (\r              <div className=\"widget-icon\" style={{ color, fontSize: 24 }}>\r                {icon}\r              </div>\r            )}\r            <div>\r              <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                {title}\r              </Text>\r              {description && (\r                <Tooltip title={description}>\r                  <InfoCircleOutlined style={{ marginLeft: 8, fontSize: 12 }} />\r                </Tooltip>\r              )}\r            </div>\r          </Space>\r          {extra}\r        </div>\r        <div className=\"widget-value\" style={{ margin: '16px 0' }}>\r          <Space align=\"baseline\">\r            {prefix && <Text style={{ fontSize: 20, color }}>{prefix}</Text>}\r            <Text style={{ fontSize: 32, fontWeight: 700, color }}>\r              <CountUp\r                end={value}\r                duration={1.5}\r                separator=\",\"\r                decimals={suffix === '%' ? 1 : 0}\r              />\r            </Text>\r            {suffix && <Text style={{ fontSize: 20, color }}>{suffix}</Text>}\r          </Space>\r        </div>\r        {(trend || progress !== undefined) && (\r          <div className=\"widget-footer\">\r            {trend && trendValue !== undefined && (\r              <Space style={{ fontSize: 12 }}>\r                {trendIcon}\r                <Text style={{ color: trendColor }}>\r                  {trendValue > 0 ? '+' : ''}{trendValue}%\r                </Text>\r                <Text type=\"secondary\">son 30 gün</Text>\r              </Space>\r            )}\r            {progress !== undefined && (\r              <Progress\r                percent={progress}\r                size=\"small\"\r                strokeColor={color}\r                showInfo={false}\r                style={{ marginTop: 8 }}\r              />\r            )}\r          </div>\r        )}\r      </Card>\r    </motion.div>\r  );\r});\rStatWidget.displayName = 'StatWidget';\r// Mini istatistik widget'ı\rexport const MiniStatWidget = memo<{\r  title: string;\r  value: number | string;\r  icon?: React.ReactNode;\r  color?: string;\r  trend?: 'up' | 'down';\r}>(({ title, value, icon, color = '#1890ff', trend }) => (\r  <div className=\"mini-stat-widget\">\r    <Space size=\"small\">\r      {icon && (\r        <div className=\"mini-icon\" style={{ color, fontSize: 20 }}>\r          {icon}\r        </div>\r      )}\r      <div>\r        <Text type=\"secondary\" style={{ fontSize: 11, display: 'block' }}>\r          {title}\r        </Text>\r        <Space size={4} align=\"baseline\">\r          <Text strong style={{ fontSize: 16 }}>\r            {typeof value === 'number' ? (\r              <CountUp end={value} duration={1} separator=\",\" />\r            ) : value}\r          </Text>\r          {trend && (\r            trend === 'up' \r              ? <ArrowUpOutlined style={{ fontSize: 10, color: '#52c41a' }} />\r              : <ArrowDownOutlined style={{ fontSize: 10, color: '#ff4d4f' }} />\r          )}\r        </Space>\r      </div>\r    </Space>\r  </div>\r));\rMiniStatWidget.displayName = 'MiniStatWidget';\r// Sistem durumu widget'ı\rexport const SystemStatusWidget = memo<{\r  cpu: number;\r  memory: number;\r  disk: number;\r  network: number;\r  loading?: boolean;\r}>(({ cpu, memory, disk, network, loading }) => {\r  const getStatusColor = (value: number) => {\r    if (value < 50) return '#52c41a';\r    if (value < 80) return '#faad14';\r    return '#ff4d4f';\r  };\r  const getStatus = (value: number) => {\r    if (value < 50) return 'success';\r    if (value < 80) return 'warning';\r    return 'error';\r  };\r  if (loading) {\r    return (\r      <Card title=\"Sistem Durumu\" extra={<SyncOutlined spin />}>\r        <Skeleton active paragraph={{ rows: 4 }} />\r      </Card>\r    );\r  }\r  const metrics = [\r    { label: 'CPU', value: cpu, unit: '%' },\r    { label: 'Bellek', value: memory, unit: '%' },\r    { label: 'Disk', value: disk, unit: '%' },\r    { label: 'Network', value: network, unit: 'Mbps' }\r  ];\r  return (\r    <Card \r      title=\"Sistem Durumu\" \r      extra={\r        <Badge \r          status={getStatus(Math.max(cpu, memory, disk))} \r          text=\"Çalışıyor\" \r        />\r      }\r    >\r      <Space direction=\"vertical\" style={{ width: '100%' }} size=\"middle\">\r        {metrics.map((metric) => (\r          <div key={metric.label}>\r            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 4 }}>\r              <Text>{metric.label}</Text>\r              <Text strong>\r                {metric.value}{metric.unit}\r              </Text>\r            </div>\r            <Progress\r              percent={metric.unit === '%' ? metric.value : Math.min(metric.value / 100 * 100, 100)}\r              strokeColor={getStatusColor(metric.value)}\r              size=\"small\"\r              status={metric.value >= 95 ? 'exception' : 'active'}\r            />\r          </div>\r        ))}\r      </Space>\r    </Card>\r  );\r});\rSystemStatusWidget.displayName = 'SystemStatusWidget';\r// Activity widget'ı\rexport const ActivityWidget = memo<{\r  activities: Array<{\r    id: string;\r    type: 'success' | 'error' | 'warning' | 'info';\r    title: string;\r    description?: string;\r    time: string;\r    user?: string;\r  }>;\r  loading?: boolean;\r}>(({ activities, loading }) => {\r  if (loading) {\r    return (\r      <Card title=\"Son Aktiviteler\">\r        <Skeleton active paragraph={{ rows: 5 }} />\r      </Card>\r    );\r  }\r  return (\r    <Card \r      title=\"Son Aktiviteler\"\r      bodyStyle={{ padding: '12px 24px' }}\r      extra={\r        <Badge count={activities.length} style={{ backgroundColor: '#52c41a' }} />\r      }\r    >\r      <div className=\"activity-list\">\r        {activities.map((activity) => (\r          <div key={activity.id} className=\"activity-item\">\r            <Badge \r              status={\r                activity.type === 'success' ? 'success' :\r                activity.type === 'error' ? 'error' :\r                activity.type === 'warning' ? 'warning' :\r                'processing'\r              }\r            />\r            <div className=\"activity-content\">\r              <div>\r                <Text strong>{activity.title}</Text>\r                {activity.description && (\r                  <Text type=\"secondary\" style={{ display: 'block', fontSize: 12 }}>\r                    {activity.description}\r                  </Text>\r                )}\r              </div>\r              <Space size=\"small\" style={{ fontSize: 11 }}>\r                <Text type=\"secondary\">{activity.time}</Text>\r                {activity.user && (\r                  <>\r                    <span>•</span>\r                    <Text type=\"secondary\">{activity.user}</Text>\r                  </>\r                )}\r              </Space>\r            </div>\r          </div>\r        ))}\r      </div>\r    </Card>\r  );\r});\rActivityWidget.displayName = 'ActivityWidget';\r// CSS stilleri için\rconst styles = `\r.stat-widget {\r  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r  border-radius: 12px;\r}\r.stat-widget:hover {\r  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);\r}\r.widget-header {\r  display: flex;\r  justify-content: space-between;\r  align-items: flex-start;\r}\r.widget-icon {\r  width: 40px;\r  height: 40px;\r  display: flex;\r  align-items: center;\r  justify-content: center;\r  border-radius: 8px;\r  background: rgba(24, 144, 255, 0.1);\r}\r.mini-stat-widget {\r  padding: 12px;\r  background: #fafafa;\r  border-radius: 8px;\r  transition: all 0.3s;\r}\r.mini-stat-widget:hover {\r  background: #f0f0f0;\r}\r.activity-list {\r  max-height: 400px;\r  overflow-y: auto;\r}\r.activity-item {\r  display: flex;\r  gap: 12px;\r  padding: 12px 0;\r  border-bottom: 1px solid #f0f0f0;\r}\r.activity-item:last-child {\r  border-bottom: none;\r}\r.activity-content {\r  flex: 1;\r  display: flex;\r  justify-content: space-between;\r  align-items: flex-start;\r}\r`;\r// Style tag ekle\rif (typeof document !== 'undefined' && !document.getElementById('dashboard-widgets-styles')) {\r  const styleTag = document.createElement('style');\r  styleTag.id = 'dashboard-widgets-styles';\r  styleTag.innerHTML = styles;\r  document.head.appendChild(styleTag);\r}\rexport default {\r  StatWidget,\r  MiniStatWidget,\r  SystemStatusWidget,\r  ActivityWidget\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/components/DashboardWidgets.tsx",
        "severity": "warning",
        "message": "Interactive element missing keyboard handler"
      },
      {
        "type": "noKeyboardHandlers",
        "line": 459,
        "code": "onClick={handleStartBackup}",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Backup/ProfessionalBackup.tsx",
        "severity": "warning",
        "message": "Interactive element missing keyboard handler"
      },
      {
        "type": "noKeyboardHandlers",
        "line": 476,
        "code": "onClick={() => setOpenScheduleDialog(true)}",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Backup/ProfessionalBackup.tsx",
        "severity": "warning",
        "message": "Interactive element missing keyboard handler"
      },
      {
        "type": "noKeyboardHandlers",
        "line": 710,
        "code": "onClick={() => handleRestore(backup)}",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Backup/ProfessionalBackup.tsx",
        "severity": "warning",
        "message": "Interactive element missing keyboard handler"
      },
      {
        "type": "noKeyboardHandlers",
        "line": 866,
        "code": "onClick={() => handleRestore(backup)}",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Backup/ProfessionalBackup.tsx",
        "severity": "warning",
        "message": "Interactive element missing keyboard handler"
      },
      {
        "type": "noKeyboardHandlers",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { Outlet, useNavigate, useLocation } from 'react-router-dom';\rimport { ProLayout, ProLayoutProps } from '@ant-design/pro-components';\rimport {\r  DashboardOutlined,\r  TeamOutlined,\r  AppstoreOutlined,\r  CreditCardOutlined,\r  UserOutlined,\r  BarChartOutlined,\r  SettingOutlined,\r  LogoutOutlined,\r} from '@ant-design/icons';\rimport { Dropdown, Avatar } from 'antd';\rimport { useAuthStore } from '@/app/store/auth.store';\rconst menuItems = [\r  {\r    path: '/admin',\r    name: 'Kontrol Paneli',\r    icon: <DashboardOutlined />,\r  },\r  {\r    path: '/admin/tenants',\r    name: 'Kiracılar',\r    icon: <TeamOutlined />,\r  },\r  {\r    path: '/admin/packages',\r    name: 'Paketler',\r    icon: <AppstoreOutlined />,\r  },\r  {\r    path: '/admin/subscriptions',\r    name: 'Abonelikler',\r    icon: <CreditCardOutlined />,\r  },\r  {\r    path: '/admin/users',\r    name: 'Kullanıcılar',\r    icon: <UserOutlined />,\r  },\r  {\r    path: '/admin/reports',\r    name: 'Raporlar',\r    icon: <BarChartOutlined />,\r  },\r  {\r    path: '/admin/settings',\r    name: 'Ayarlar',\r    icon: <SettingOutlined />,\r  },\r];\rexport const AdminLayout: React.FC = () => {\r  const navigate = useNavigate();\r  const location = useLocation();\r  const { user, logout } = useAuthStore();\r  const [collapsed, setCollapsed] = useState(false);\r  const settings: ProLayoutProps = {\r    title: 'Stocker Admin',\r    logo: 'https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg',\r    layout: 'mix',\r    splitMenus: false,\r    navTheme: 'light',\r    contentWidth: 'Fluid',\r    fixedHeader: true,\r    fixSiderbar: true,\r    colorPrimary: '#667eea',\r    token: {\r      pageContainer: {\r        paddingBlockPageContainerContent: 32,\r        paddingInlinePageContainerContent: 40,\r      },\r      header: {\r        colorBgHeader: '#fff',\r        colorHeaderTitle: '#000',\r        colorTextMenu: '#595959',\r        colorTextMenuSecondary: '#8c8c8c',\r        colorTextMenuSelected: '#667eea',\r        colorBgMenuItemSelected: 'rgba(102, 126, 234, 0.08)',\r        colorTextMenuActive: '#667eea',\r        colorTextRightActionsItem: '#595959',\r      },\r      sider: {\r        colorMenuBackground: '#fff',\r        colorMenuItemDivider: '#f0f0f0',\r        colorBgMenuItemHover: 'rgba(102, 126, 234, 0.04)',\r        colorTextMenu: '#595959',\r        colorTextMenuSelected: '#667eea',\r        colorBgMenuItemSelected: 'rgba(102, 126, 234, 0.08)',\r      },\r    },\r    collapsed,\r    onCollapse: setCollapsed,\r    location: {\r      pathname: location.pathname,\r    },\r    menu: {\r      locale: false,\r      defaultOpenAll: false,\r    },\r    menuItemRender: (item, dom) => (\r      <a\r        onClick={(e) => {\r          e.preventDefault();\r          navigate(item.path || '/');\r        }}\r      >\r        {dom}\r      </a>\r    ),\r    rightContentRender: () => (\r      <div style={{ paddingRight: 16 }}>\r        <Dropdown\r          menu={{\r            items: [\r              {\r                key: 'profile',\r                icon: <UserOutlined />,\r                label: 'Profil',\r                onClick: () => navigate('/admin/profile'),\r              },\r              {\r                key: 'settings',\r                icon: <SettingOutlined />,\r                label: 'Ayarlar',\r                onClick: () => navigate('/admin/settings'),\r              },\r              {\r                type: 'divider',\r              },\r              {\r                key: 'logout',\r                icon: <LogoutOutlined />,\r                label: 'Çıkış Yap',\r                onClick: async () => {\r                  await logout();\r                  navigate('/login');\r                },\r              },\r            ],\r          }}\r        >\r          <div style={{ cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 8 }}>\r            <Avatar size=\"small\" style={{ backgroundColor: '#667eea' }}>\r              {user?.email?.[0]?.toUpperCase() || user?.username?.[0]?.toUpperCase()}\r            </Avatar>\r            <span>{user?.fullName || user?.username}</span>\r          </div>\r        </Dropdown>\r      </div>\r    ),\r    route: {\r      path: '/admin',\r      routes: menuItems,\r    },\r  };\r  return (\r    <ProLayout {...settings}>\r      <Outlet />\r    </ProLayout>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/layouts/AdminLayout/index.tsx",
        "severity": "warning",
        "message": "Interactive element missing keyboard handler"
      },
      {
        "type": "noKeyboardHandlers",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { Outlet, useNavigate, useLocation, useParams } from 'react-router-dom';\rimport { ProLayout, ProLayoutProps } from '@ant-design/pro-components';\rimport {\r  DashboardOutlined,\r  ContactsOutlined,\r  ShoppingCartOutlined,\r  UserOutlined,\r  SettingOutlined,\r  LogoutOutlined,\r  FileTextOutlined,\r  TeamOutlined,\r  FundProjectionScreenOutlined,\r  CalendarOutlined,\r  SolutionOutlined,\r  AppstoreOutlined,\r} from '@ant-design/icons';\rimport { Dropdown, Avatar } from 'antd';\rimport { useAuthStore } from '@/app/store/auth.store';\rexport const TenantLayout: React.FC = () => {\r  const navigate = useNavigate();\r  const location = useLocation();\r  const { tenantId } = useParams();\r  const { user, logout } = useAuthStore();\r  const [collapsed, setCollapsed] = useState(false);\r  const menuItems = [\r    {\r      path: `/app/${tenantId}`,\r      name: 'Kontrol Paneli',\r      icon: <DashboardOutlined />,\r    },\r    {\r      path: `/app/${tenantId}/invoices`,\r      name: 'Faturalar',\r      icon: <FileTextOutlined />,\r      // badge: { count: 5, dot: true }, // ProLayout badge özelliği devre dışı\r    },\r    {\r      path: `/app/${tenantId}/crm`,\r      name: 'CRM',\r      icon: <ContactsOutlined />,\r      routes: [\r        {\r          path: `/app/${tenantId}/crm/dashboard`,\r          name: 'CRM Dashboard',\r          icon: <DashboardOutlined />,\r        },\r        {\r          path: `/app/${tenantId}/crm/leads`,\r          name: 'Potansiyel Müşteriler',\r          icon: <SolutionOutlined />,\r        },\r        {\r          path: `/app/${tenantId}/crm/customers`,\r          name: 'Müşteriler',\r          icon: <TeamOutlined />,\r        },\r        {\r          path: `/app/${tenantId}/crm/pipeline`,\r          name: 'Satış Hattı',\r          icon: <FundProjectionScreenOutlined />,\r        },\r        {\r          path: `/app/${tenantId}/crm/activities`,\r          name: 'Aktiviteler',\r          icon: <CalendarOutlined />,\r        },\r      ],\r    },\r    {\r      path: `/app/${tenantId}/inventory`,\r      name: 'Stok',\r      icon: <ShoppingCartOutlined />,\r    },\r    {\r      path: `/app/${tenantId}/users`,\r      name: 'Kullanıcılar',\r      icon: <UserOutlined />,\r    },\r    {\r      path: `/app/${tenantId}/modules`,\r      name: 'Modüller',\r      icon: <AppstoreOutlined />,\r    },\r    {\r      path: `/app/${tenantId}/settings`,\r      name: 'Ayarlar',\r      icon: <SettingOutlined />,\r    },\r  ];\r  const settings: ProLayoutProps = {\r    title: user?.tenantName || 'Stocker',\r    logo: 'https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg',\r    layout: 'mix',\r    splitMenus: false,\r    navTheme: 'light',\r    contentWidth: 'Fluid',\r    fixedHeader: true,\r    fixSiderbar: true,\r    colorPrimary: '#1890ff',\r    collapsed,\r    onCollapse: setCollapsed,\r    location: {\r      pathname: location.pathname,\r    },\r    menu: {\r      locale: false,\r      defaultOpenAll: false,\r    },\r    menuItemRender: (item, dom) => (\r      <a\r        onClick={(e) => {\r          e.preventDefault();\r          navigate(item.path || '/');\r        }}\r      >\r        {dom}\r      </a>\r    ),\r    rightContentRender: () => (\r      <div style={{ paddingRight: 16 }}>\r        <Dropdown\r          menu={{\r            items: [\r              {\r                key: 'profile',\r                icon: <UserOutlined />,\r                label: 'Profil',\r                onClick: () => navigate(`/app/${tenantId}/profile`),\r              },\r              {\r                key: 'settings',\r                icon: <SettingOutlined />,\r                label: 'Ayarlar',\r                onClick: () => navigate(`/app/${tenantId}/settings`),\r              },\r              {\r                type: 'divider',\r              },\r              {\r                key: 'logout',\r                icon: <LogoutOutlined />,\r                label: 'Çıkış Yap',\r                onClick: async () => {\r                  await logout();\r                  navigate('/login');\r                },\r              },\r            ],\r          }}\r        >\r          <div style={{ cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 8 }}>\r            <Avatar size=\"small\" style={{ backgroundColor: '#1890ff' }}>\r              {user?.username?.[0]?.toUpperCase()}\r            </Avatar>\r            <span>{user?.username}</span>\r          </div>\r        </Dropdown>\r      </div>\r    ),\r    route: {\r      path: `/app/${tenantId}`,\r      routes: menuItems,\r    },\r  };\r  return (\r    <ProLayout {...settings}>\r      <Outlet />\r    </ProLayout>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/layouts/TenantLayout/index.tsx",
        "severity": "warning",
        "message": "Interactive element missing keyboard handler"
      },
      {
        "type": "noKeyboardHandlers",
        "line": 1,
        "code": "import React from 'react';\rimport { PageHeader as AntPageHeader } from '@ant-design/pro-components';\rimport { ArrowLeftOutlined } from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport './style.css';\rinterface BreadcrumbItem {\r  title: string;\r  path?: string;\r}\rinterface PageHeaderProps {\r  title: string;\r  subtitle?: string;\r  breadcrumbs?: BreadcrumbItem[];\r  showBack?: boolean;\r  onBack?: () => void;\r  extra?: React.ReactNode;\r  actions?: React.ReactNode;\r  ghost?: boolean;\r  children?: React.ReactNode;\r}\rexport const PageHeader: React.FC<PageHeaderProps> = ({\r  title,\r  subtitle,\r  breadcrumbs,\r  showBack = false,\r  onBack,\r  extra,\r  actions,\r  ghost = true,\r  children,\r}) => {\r  const navigate = useNavigate();\r  const handleBack = () => {\r    if (onBack) {\r      onBack();\r    } else {\r      navigate(-1);\r    }\r  };\r  const breadcrumbItems = breadcrumbs?.map((item, index) => ({\r    title: item.path && index < (breadcrumbs?.length || 0) - 1 ? (\r      <a onClick={() => navigate(item.path!)}>{item.title}</a>\r    ) : (\r      item.title\r    ),\r  }));\r  return (\r    <div className=\"page-header-wrapper\">\r      <AntPageHeader\r        ghost={ghost}\r        title={title}\r        subTitle={subtitle}\r        onBack={showBack ? handleBack : undefined}\r        backIcon={showBack ? <ArrowLeftOutlined /> : false}\r        breadcrumb={breadcrumbItems ? { items: breadcrumbItems } : undefined}\r        extra={actions || extra}\r      >\r        {children}\r      </AntPageHeader>\r    </div>\r  );\r};\rexport default PageHeader;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/PageHeader/index.tsx",
        "severity": "warning",
        "message": "Interactive element missing keyboard handler"
      }
    ],
    "colorContrastIssues": [],
    "missingRoles": [
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { Component, ErrorInfo, ReactNode } from 'react'\rimport { Button, Result } from 'antd'\rimport { ReloadOutlined } from '@ant-design/icons'\rinterface Props {\r  children: ReactNode\r  fallback?: ReactNode\r}\rinterface State {\r  hasError: boolean\r  error: Error | null\r  errorInfo: ErrorInfo | null\r}\rclass ErrorBoundary extends Component<Props, State> {\r  constructor(props: Props) {\r    super(props)\r    this.state = {\r      hasError: false,\r      error: null,\r      errorInfo: null\r    }\r  }\r  static getDerivedStateFromError(error: Error): State {\r    return {\r      hasError: true,\r      error,\r      errorInfo: null\r    }\r  }\r  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r    // Log error to console in development\r    if (import.meta.env.DEV) {\r    }\r    // Report to Sentry in production\r    if (import.meta.env.PROD && window.Sentry) {\r      window.Sentry.captureException(error, {\r        contexts: {\r          react: {\r            componentStack: errorInfo.componentStack\r          }\r        }\r      })\r    }\r    this.setState({\r      error,\r      errorInfo\r    })\r  }\r  handleReset = () => {\r    this.setState({\r      hasError: false,\r      error: null,\r      errorInfo: null\r    })\r    // Optionally reload the page\r    window.location.reload()\r  }\r  render() {\r    if (this.state.hasError) {\r      if (this.props.fallback) {\r        return this.props.fallback\r      }\r      return (\r        <div style={{\r          height: '100vh',\r          display: 'flex',\r          alignItems: 'center',\r          justifyContent: 'center',\r          padding: '20px'\r        }}>\r          <Result\r            status=\"500\"\r            title=\"Bir şeyler yanlış gitti\"\r            subTitle=\"Üzgünüz, beklenmeyen bir hata oluştu. Lütfen sayfayı yenileyin veya daha sonra tekrar deneyin.\"\r            extra={[\r              <Button \r                type=\"primary\" \r                icon={<ReloadOutlined />}\r                onClick={this.handleReset}\r                key=\"reload\"\r               aria-label=\"reload outlined\">\r                Sayfayı Yenile\r              </Button>,\r              <Button \r                key=\"home\"\r                onClick={() => window.location.href = '/'}\r              >\r                Ana Sayfaya Dön\r              </Button>\r            ]}\r          />\r          {import.meta.env.DEV && this.state.error && (\r            <details style={{\r              marginTop: '20px',\r              padding: '20px',\r              background: '#f5f5f5',\r              borderRadius: '4px',\r              maxWidth: '800px',\r              overflow: 'auto'\r            }}>\r              <summary style={{ cursor: 'pointer', fontWeight: 'bold' }}>\r                Hata Detayları (Sadece Geliştirme Modunda)\r              </summary>\r              <pre style={{ marginTop: '10px', whiteSpace: 'pre-wrap' }}>\r                {this.state.error.toString()}\r                {this.state.errorInfo?.componentStack}\r              </pre>\r            </details>\r          )}\r        </div>\r      )\r    }\r    return this.props.children\r  }\r}\rexport default ErrorBoundary",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/components/ErrorBoundary/ErrorBoundary.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Modal,\r  Result,\r  Button,\r  Input,\r  Space,\r  Typography,\r  Alert,\r  Progress,\r  message,\r  Spin\r} from 'antd';\rimport {\r  MailOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  ReloadOutlined,\r  SendOutlined,\r  ClockCircleOutlined,\r  SafetyOutlined\r} from '@ant-design/icons';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rinterface EmailVerificationProps {\r  email: string;\r  onVerified: () => void;\r  onResend?: () => Promise<void>;\r  autoSend?: boolean;\r}\rexport const EmailVerification: React.FC<EmailVerificationProps> = ({\r  email,\r  onVerified,\r  onResend,\r  autoSend = true\r}) => {\r  const [status, setStatus] = useState<'pending' | 'sent' | 'verified' | 'expired'>('pending');\r  const [verificationCode, setVerificationCode] = useState('');\r  const [loading, setLoading] = useState(false);\r  const [resendTimer, setResendTimer] = useState(0);\r  const [attempts, setAttempts] = useState(0);\r  const maxAttempts = 5;\r  useEffect(() => {\r    if (autoSend && status === 'pending') {\r      sendVerificationEmail();\r    }\r  }, []);\r  useEffect(() => {\r    let interval: NodeJS.Timeout;\r    if (resendTimer > 0) {\r      interval = setInterval(() => {\r        setResendTimer((prev) => prev - 1);\r      }, 1000);\r    }\r    return () => clearInterval(interval);\r  }, [resendTimer]);\r  const sendVerificationEmail = async () => {\r    setLoading(true);\r    try {\r      // Simulate API call\r      await new Promise(resolve => setTimeout(resolve, 1500));\r      setStatus('sent');\r      setResendTimer(60); // 60 seconds cooldown\r      message.success(`Doğrulama e-postası ${email} adresine gönderildi`);\r    } catch (error) {\r      message.error('E-posta gönderilemedi. Lütfen tekrar deneyin.');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleResend = async () => {\r    if (resendTimer > 0) return;\r    setAttempts(prev => prev + 1);\r    if (attempts >= maxAttempts) {\r      message.error('Çok fazla deneme yaptınız. Lütfen daha sonra tekrar deneyin.');\r      return;\r    }\r    if (onResend) {\r      await onResend();\r    } else {\r      await sendVerificationEmail();\r    }\r  };\r  const handleVerifyCode = async () => {\r    if (verificationCode.length !== 6) {\r      message.error('Lütfen 6 haneli doğrulama kodunu girin');\r      return;\r    }\r    setLoading(true);\r    try {\r      // Simulate verification\r      await new Promise(resolve => setTimeout(resolve, 1500));\r      // Mock verification - in real app, check with backend\r      if (verificationCode === '123456') {\r        setStatus('verified');\r        message.success('E-posta adresiniz başarıyla doğrulandı!');\r        setTimeout(() => {\r          onVerified();\r        }, 2000);\r      } else {\r        message.error('Doğrulama kodu hatalı');\r      }\r    } catch (error) {\r      message.error('Doğrulama başarısız');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const renderContent = () => {\r    switch (status) {\r      case 'pending':\r        return (\r          <div className=\"email-verification-content\">\r            <Spin size=\"large\" />\r            <Title level={4} style={{ marginTop: 24 }}>\r              E-posta Gönderiliyor...\r            </Title>\r          </div>\r        );\r      case 'sent':\r        return (\r          <motion.div\r            className=\"email-verification-content\"\r            initial={{ opacity: 0, y: 20 }}\r            animate={{ opacity: 1, y: 0 }}\r            transition={{ duration: 0.3 }}\r          >\r            <div className=\"email-icon-container\">\r              <MailOutlined style={{ fontSize: 64, color: '#667eea' }} />\r            </div>\r            <Title level={3}>E-posta Doğrulama</Title>\r            <Paragraph style={{ textAlign: 'center', marginBottom: 24 }}>\r              <Text>{email}</Text> adresine bir doğrulama kodu gönderdik.\r              <br />\r              Lütfen e-postanızı kontrol edin ve 6 haneli kodu girin.\r            </Paragraph>\r            <div className=\"verification-code-input\">\r              <Input\r                size=\"large\"\r                placeholder=\"000000\"\r                maxLength={6}\r                value={verificationCode}\r                onChange={(e) = aria-label=\"input field\"> setVerificationCode(e.target.value.replace(/\\D/g, ''))}\r                onPressEnter={handleVerifyCode}\r                style={{\r                  fontSize: 24,\r                  textAlign: 'center',\r                  letterSpacing: 8,\r                  fontWeight: 600\r                }}\r              />\r            </div>\r            <Space direction=\"vertical\" style={{ width: '100%', marginTop: 24 }}>\r              <Button\r                type=\"primary\"\r                size=\"large\"\r                block\r                loading={loading}\r                onClick={handleVerifyCode}\r                disabled={verificationCode.length !== 6}\r                icon={<CheckCircleOutlined />}\r               aria-label=\"check circle outlined\">\r                Doğrula\r              </Button>\r              <Button\r                size=\"large\"\r                block\r                onClick={handleResend}\r                disabled={resendTimer > 0}\r                icon={<ReloadOutlined />}\r              >\r                {resendTimer > 0 \r                  ? `Tekrar gönder (${resendTimer}s)` \r                  : 'Kodu Tekrar Gönder'}\r              </Button>\r            </Space>\r            {attempts > 0 && (\r              <Alert\r                message={`${maxAttempts - attempts} deneme hakkınız kaldı`}\r                type=\"warning\"\r                showIcon\r                style={{ marginTop: 16 }}\r              />\r            )}\r            <div className=\"email-tips\">\r              <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                <SafetyOutlined /> E-posta gelmedi mi? Spam klasörünü kontrol edin.\r              </Text>\r            </div>\r          </motion.div>\r        );\r      case 'verified':\r        return (\r          <motion.div\r            className=\"email-verification-content\"\r            initial={{ opacity: 0, scale: 0.8 }}\r            animate={{ opacity: 1, scale: 1 }}\r            transition={{ duration: 0.5 }}\r          >\r            <Result\r              status=\"success\"\r              title=\"E-posta Doğrulandı!\"\r              subTitle=\"E-posta adresiniz başarıyla doğrulandı. Yönlendiriliyorsunuz...\"\r              icon={<CheckCircleOutlined style={{ color: '#52c41a' }} />}\r            />\r          </motion.div>\r        );\r      case 'expired':\r        return (\r          <motion.div\r            className=\"email-verification-content\"\r            initial={{ opacity: 0, y: 20 }}\r            animate={{ opacity: 1, y: 0 }}\r          >\r            <Result\r              status=\"warning\"\r              title=\"Doğrulama Süresi Doldu\"\r              subTitle=\"Doğrulama kodunuzun süresi doldu. Lütfen yeni bir kod isteyin.\"\r              icon={<ClockCircleOutlined />}\r              extra={[\r                <Button\r                  type=\"primary\"\r                  key=\"resend\"\r                  onClick={handleResend}\r                  icon={<SendOutlined />}\r                 aria-label=\"send outlined\">\r                  Yeni Kod Gönder\r                </Button>\r              ]}\r            />\r          </motion.div>\r        );\r      default:\r        return null;\r    }\r  };\r  return (\r    <div className=\"email-verification-container\">\r      <AnimatePresence mode=\"wait\">\r        {renderContent()}\r      </AnimatePresence>\r    </div>\r  );\r};\r// Email Verification Modal Component\rinterface EmailVerificationModalProps {\r  visible: boolean;\r  email: string;\r  onClose: () => void;\r  onVerified: () => void;\r}\rexport const EmailVerificationModal: React.FC<EmailVerificationModalProps> = ({\r  visible,\r  email,\r  onClose,\r  onVerified\r}) => {\r  return (\r    <Modal\r      title={null}\r      open={visible}\r      onCancel={onClose}\r      footer={null}\r      width={500}\r      centered\r      className=\"email-verification-modal\"\r      closeIcon={null}\r      maskClosable={false}\r    >\r      <EmailVerification\r        email={email}\r        onVerified={() => {\r          onVerified();\r          onClose();\r        }}\r      />\r    </Modal>\r  );\r};\r// Inline Email Verification Component\rinterface InlineEmailVerificationProps {\r  email: string;\r  onVerified: () => void;\r}\rexport const InlineEmailVerification: React.FC<InlineEmailVerificationProps> = ({\r  email,\r  onVerified\r}) => {\r  const [sent, setSent] = useState(false);\r  const [code, setCode] = useState('');\r  const [loading, setLoading] = useState(false);\r  const handleSend = async () => {\r    setLoading(true);\r    try {\r      await new Promise(resolve => setTimeout(resolve, 1000));\r      setSent(true);\r      message.success('Doğrulama kodu gönderildi');\r    } catch (error) {\r      message.error('Kod gönderilemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleVerify = async () => {\r    if (code.length !== 6) return;\r    setLoading(true);\r    try {\r      await new Promise(resolve => setTimeout(resolve, 1000));\r      message.success('E-posta doğrulandı!');\r      onVerified();\r    } catch (error) {\r      message.error('Doğrulama başarısız');\r    } finally {\r      setLoading(false);\r    }\r  };\r  return (\r    <div className=\"inline-email-verification\">\r      <Alert\r        message=\"E-posta Doğrulama Gerekli\"\r        description={`${email} adresini doğrulamanız gerekiyor`}\r        type=\"warning\"\r        showIcon\r        action={\r          !sent ? (\r            <Button\r              size=\"small\"\r              type=\"primary\"\r              loading={loading}\r              onClick={handleSend}\r            >\r              Kod Gönder\r            </Button>\r          ) : (\r            <Space>\r              <Input\r                size=\"small\"\r                placeholder=\"6 haneli kod\"\r                maxLength={6}\r                value={code}\r                onChange={(e) = aria-label=\"input field\"> setCode(e.target.value.replace(/\\D/g, ''))}\r                style={{ width: 120 }}\r              />\r              <Button\r                size=\"small\"\r                type=\"primary\"\r                loading={loading}\r                onClick={handleVerify}\r                disabled={code.length !== 6}\r              >\r                Doğrula\r              </Button>\r            </Space>\r          )\r        }\r      />\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/components/EmailVerification/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Input,\r  Button,\r  Space,\r  Tag,\r  Alert,\r  Typography,\r  Tooltip,\r  message,\r  Card,\r  Divider,\r  Progress,\r  Modal\r} from 'antd';\rimport {\r  GiftOutlined,\r  CopyOutlined,\r  CheckCircleOutlined,\r  UserAddOutlined,\r  TrophyOutlined,\r  PercentageOutlined,\r  ShareAltOutlined,\r  QrcodeOutlined,\r  TeamOutlined,\r  DollarOutlined\r} from '@ant-design/icons';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport { QRCodeSVG } from 'qrcode.react';\rimport './style.css';\rconst { Text, Title, Paragraph } = Typography;\rinterface ReferralInputProps {\r  value?: string;\r  onChange?: (code: string) => void;\r  onValidate?: (code: string) => Promise<ReferralInfo | null>;\r  placeholder?: string;\r  autoCheck?: boolean;\r}\rinterface ReferralInfo {\r  code: string;\r  discount: number;\r  discountType: 'percentage' | 'fixed';\r  referrerName?: string;\r  expiresAt?: Date;\r  usageLimit?: number;\r  usageCount?: number;\r  benefits?: string[];\r}\rexport const ReferralInput: React.FC<ReferralInputProps> = ({\r  value = '',\r  onChange,\r  onValidate,\r  placeholder = 'Referans kodunuz varsa girin',\r  autoCheck = true\r}) => {\r  const [code, setCode] = useState(value);\r  const [checking, setChecking] = useState(false);\r  const [referralInfo, setReferralInfo] = useState<ReferralInfo | null>(null);\r  const [error, setError] = useState<string | null>(null);\r  useEffect(() => {\r    if (autoCheck && code.length >= 4) {\r      checkReferralCode();\r    }\r  }, [code]);\r  const checkReferralCode = async () => {\r    if (!code || code.length < 4) return;\r    setChecking(true);\r    setError(null);\r    try {\r      // Simulate API call\r      await new Promise(resolve => setTimeout(resolve, 1000));\r      // Mock validation\r      if (code.toUpperCase() === 'WELCOME20' || code.toUpperCase() === 'FRIEND50') {\r        const info: ReferralInfo = {\r          code: code.toUpperCase(),\r          discount: code.toUpperCase() === 'WELCOME20' ? 20 : 50,\r          discountType: 'percentage',\r          referrerName: 'John Doe',\r          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\r          usageLimit: 100,\r          usageCount: 45,\r          benefits: [\r            'İlk ay %' + (code.toUpperCase() === 'WELCOME20' ? '20' : '50') + ' indirim',\r            'Ücretsiz premium destek',\r            '2x depolama alanı'\r          ]\r        };\r        setReferralInfo(info);\r        message.success('Referans kodu geçerli! İndirim uygulandı.');\r        if (onValidate) {\r          const result = await onValidate(code);\r          if (result) {\r            setReferralInfo(result);\r          }\r        }\r      } else {\r        setError('Geçersiz referans kodu');\r        setReferralInfo(null);\r      }\r    } catch (err) {\r      setError('Referans kodu kontrol edilemedi');\r    } finally {\r      setChecking(false);\r    }\r  };\r  const handleCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r    const newCode = e.target.value.toUpperCase().replace(/[^A-Z0-9]/g, '');\r    setCode(newCode);\r    if (onChange) {\r      onChange(newCode);\r    }\r  };\r  return (\r    <div className=\"referral-input-container\">\r      <div className=\"referral-input-wrapper\">\r        <Input\r          size=\"large\"\r          placeholder={placeholder}\r          prefix={<GiftOutlined style={{ color: '#667eea' }} / aria-label=\"input field\">}\r          value={code}\r          onChange={handleCodeChange}\r          maxLength={20}\r          suffix={\r            checking ? (\r              <span style={{ color: '#667eea' }}>Kontrol ediliyor...</span>\r            ) : referralInfo ? (\r              <CheckCircleOutlined style={{ color: '#52c41a' }} />\r            ) : null\r          }\r        />\r        {!autoCheck && (\r          <Button\r            type=\"primary\"\r            loading={checking}\r            onClick={checkReferralCode}\r            disabled={code.length < 4}\r          >\r            Uygula\r          </Button>\r        )}\r      </div>\r      <AnimatePresence>\r        {referralInfo && (\r          <motion.div\r            initial={{ opacity: 0, height: 0 }}\r            animate={{ opacity: 1, height: 'auto' }}\r            exit={{ opacity: 0, height: 0 }}\r            transition={{ duration: 0.3 }}\r          >\r            <Alert\r              message={\r                <Space>\r                  <TrophyOutlined />\r                  <span>Tebrikler! {referralInfo.referrerName && `${referralInfo.referrerName} tarafından davet edildiniz.`}</span>\r                </Space>\r              }\r              description={\r                <div>\r                  <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\r                    <div>\r                      <Tag color=\"green\" icon={<PercentageOutlined />}>\r                        {referralInfo.discountType === 'percentage' \r                          ? `%${referralInfo.discount} İndirim` \r                          : `${referralInfo.discount}₺ İndirim`}\r                      </Tag>\r                      {referralInfo.expiresAt && (\r                        <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                          {new Date(referralInfo.expiresAt).toLocaleDateString('tr-TR')} tarihine kadar geçerli\r                        </Text>\r                      )}\r                    </div>\r                    {referralInfo.benefits && (\r                      <div className=\"referral-benefits\">\r                        {referralInfo.benefits.map((benefit, index) => (\r                          <div key={index} className=\"benefit-item\">\r                            <CheckCircleOutlined style={{ color: '#52c41a' }} />\r                            <Text>{benefit}</Text>\r                          </div>\r                        ))}\r                      </div>\r                    )}\r                  </Space>\r                </div>\r              }\r              type=\"success\"\r              showIcon\r              closable\r              style={{ marginTop: 12 }}\r            />\r          </motion.div>\r        )}\r        {error && (\r          <motion.div\r            initial={{ opacity: 0 }}\r            animate={{ opacity: 1 }}\r            exit={{ opacity: 0 }}\r          >\r            <Alert\r              message={error}\r              type=\"error\"\r              showIcon\r              closable\r              onClose={() => setError(null)}\r              style={{ marginTop: 12 }}\r            />\r          </motion.div>\r        )}\r      </AnimatePresence>\r    </div>\r  );\r};\r// Referral Share Component\rinterface ReferralShareProps {\r  referralCode: string;\r  referralUrl?: string;\r  rewards?: {\r    referrer: string;\r    referred: string;\r  };\r}\rexport const ReferralShare: React.FC<ReferralShareProps> = ({\r  referralCode,\r  referralUrl = `${window.location.origin}/register?ref=${referralCode}`,\r  rewards = {\r    referrer: '1 ay ücretsiz kullanım',\r    referred: '%20 indirim'\r  }\r}) => {\r  const [copied, setCopied] = useState(false);\r  const [showQR, setShowQR] = useState(false);\r  const copyToClipboard = (text: string) => {\r    navigator.clipboard.writeText(text);\r    setCopied(true);\r    message.success('Kopyalandı!');\r    setTimeout(() => setCopied(false), 2000);\r  };\r  const shareVia = (platform: string) => {\r    const text = `Stocker'a katıl ve ${rewards.referred} kazan! Referans kodum: ${referralCode}`;\r    const url = referralUrl;\r    switch (platform) {\r      case 'whatsapp':\r        window.open(`https://wa.me/?text=${encodeURIComponent(text + ' ' + url)}`);\r        break;\r      case 'twitter':\r        window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`);\r        break;\r      case 'linkedin':\r        window.open(`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}`);\r        break;\r      case 'email':\r        window.location.href = `mailto:?subject=Stocker Davetiyesi&body=${encodeURIComponent(text + '\\n\\n' + url)}`;\r        break;\r    }\r  };\r  return (\r    <Card className=\"referral-share-card\">\r      <div className=\"referral-share-header\">\r        <Title level={4}>\r          <GiftOutlined /> Arkadaşlarını Davet Et, Kazan!\r        </Title>\r        <Paragraph>\r          Her başarılı davet için <Tag color=\"green\">{rewards.referrer}</Tag> kazan.\r          Arkadaşların da <Tag color=\"blue\">{rewards.referred}</Tag> kazansın!\r        </Paragraph>\r      </div>\r      <Divider />\r      <div className=\"referral-code-display\">\r        <Text strong>Referans Kodun:</Text>\r        <div className=\"code-box\">\r          <Text code className=\"referral-code\">{referralCode}</Text>\r          <Button\r            icon={copied ? <CheckCircleOutlined /> : <CopyOutlined />}\r            onClick={() = aria-label=\"button\"> copyToClipboard(referralCode)}\r            type={copied ? 'primary' : 'default'}\r          >\r            {copied ? 'Kopyalandı' : 'Kopyala'}\r          </Button>\r        </div>\r      </div>\r      <div className=\"referral-url-display\">\r        <Text strong>Davet Linki:</Text>\r        <div className=\"url-box\">\r          <Text ellipsis className=\"referral-url\">{referralUrl}</Text>\r          <Space>\r            <Tooltip title=\"QR Kod\">\r              <Button\r                icon={<QrcodeOutlined />}\r                onClick={() = aria-label=\"qrcode outlined\"> setShowQR(true)}\r              />\r            </Tooltip>\r            <Button\r              icon={<CopyOutlined />}\r              onClick={() = aria-label=\"copy outlined\"> copyToClipboard(referralUrl)}\r            />\r          </Space>\r        </div>\r      </div>\r      <Divider />\r      <div className=\"share-buttons\">\r        <Text strong style={{ display: 'block', marginBottom: 12 }}>Paylaş:</Text>\r        <Space wrap>\r          <Button\r            onClick={() => shareVia('whatsapp')}\r            style={{ background: '#25D366', color: 'white', border: 'none' }}\r          >\r            WhatsApp\r          </Button>\r          <Button\r            onClick={() => shareVia('twitter')}\r            style={{ background: '#1DA1F2', color: 'white', border: 'none' }}\r          >\r            Twitter\r          </Button>\r          <Button\r            onClick={() => shareVia('linkedin')}\r            style={{ background: '#0077B5', color: 'white', border: 'none' }}\r          >\r            LinkedIn\r          </Button>\r          <Button\r            onClick={() => shareVia('email')}\r            icon={<MailOutlined />}\r          >\r            E-posta\r          </Button>\r        </Space>\r      </div>\r      <Modal\r        title=\"QR Kod\"\r        open={showQR}\r        onCancel={() => setShowQR(false)}\r        footer={null}\r        width={320}\r        centered\r      >\r        <div style={{ textAlign: 'center', padding: 20 }}>\r          <QRCodeSVG value={referralUrl} size={200} />\r          <Paragraph style={{ marginTop: 16 }}>\r            Bu QR kodu paylaşarak arkadaşlarını davet edebilirsin\r          </Paragraph>\r        </div>\r      </Modal>\r    </Card>\r  );\r};\r// Referral Stats Component\rinterface ReferralStatsProps {\r  stats: {\r    totalReferrals: number;\r    successfulReferrals: number;\r    pendingReferrals: number;\r    totalEarnings: number;\r    nextReward: string;\r    nextRewardProgress: number;\r  };\r}\rexport const ReferralStats: React.FC<ReferralStatsProps> = ({ stats }) => {\r  return (\r    <Card className=\"referral-stats-card\">\r      <Title level={4}>\r        <TrophyOutlined /> Referans İstatistiklerin\r      </Title>\r      <div className=\"stats-grid\">\r        <div className=\"stat-item\">\r          <div className=\"stat-icon\">\r            <TeamOutlined />\r          </div>\r          <div className=\"stat-content\">\r            <Text type=\"secondary\">Toplam Davet</Text>\r            <Title level={3}>{stats.totalReferrals}</Title>\r          </div>\r        </div>\r        <div className=\"stat-item\">\r          <div className=\"stat-icon success\">\r            <CheckCircleOutlined />\r          </div>\r          <div className=\"stat-content\">\r            <Text type=\"secondary\">Başarılı</Text>\r            <Title level={3}>{stats.successfulReferrals}</Title>\r          </div>\r        </div>\r        <div className=\"stat-item\">\r          <div className=\"stat-icon warning\">\r            <ClockCircleOutlined />\r          </div>\r          <div className=\"stat-content\">\r            <Text type=\"secondary\">Beklemede</Text>\r            <Title level={3}>{stats.pendingReferrals}</Title>\r          </div>\r        </div>\r        <div className=\"stat-item\">\r          <div className=\"stat-icon primary\">\r            <DollarOutlined />\r          </div>\r          <div className=\"stat-content\">\r            <Text type=\"secondary\">Kazancın</Text>\r            <Title level={3}>₺{stats.totalEarnings}</Title>\r          </div>\r        </div>\r      </div>\r      <Divider />\r      <div className=\"next-reward\">\r        <Text strong>Sonraki Ödül: {stats.nextReward}</Text>\r        <Progress\r          percent={stats.nextRewardProgress}\r          strokeColor={{\r            '0%': '#667eea',\r            '100%': '#764ba2'\r          }}\r          status=\"active\"\r        />\r        <Text type=\"secondary\" style={{ fontSize: 12 }}>\r          {100 - stats.nextRewardProgress}% kaldı\r        </Text>\r      </div>\r    </Card>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/components/ReferralCode/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { Button, Space, Divider, message, Spin } from 'antd';\rimport {\r  GoogleOutlined,\r  GithubOutlined,\r  LinkedinOutlined,\r  TwitterOutlined,\r  AppleOutlined,\r  WindowsOutlined\r} from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport './style.css';\rinterface SocialLoginProps {\r  onSuccess?: (provider: string, data: any) => void;\r  onError?: (provider: string, error: any) => void;\r  providers?: string[];\r  layout?: 'horizontal' | 'vertical' | 'grid';\r  size?: 'small' | 'middle' | 'large';\r  showLabels?: boolean;\r}\rconst defaultProviders = ['google', 'microsoft', 'linkedin'];\rconst providerConfig = {\r  google: {\r    name: 'Google',\r    icon: <GoogleOutlined />,\r    color: '#4285F4',\r    clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID || '',\r    scope: 'openid email profile'\r  },\r  microsoft: {\r    name: 'Microsoft',\r    icon: <WindowsOutlined />,\r    color: '#00A4EF',\r    clientId: process.env.REACT_APP_MICROSOFT_CLIENT_ID || '',\r    scope: 'openid email profile'\r  },\r  linkedin: {\r    name: 'LinkedIn',\r    icon: <LinkedinOutlined />,\r    color: '#0077B5',\r    clientId: process.env.REACT_APP_LINKEDIN_CLIENT_ID || '',\r    scope: 'r_emailaddress r_liteprofile'\r  },\r  github: {\r    name: 'GitHub',\r    icon: <GithubOutlined />,\r    color: '#333',\r    clientId: process.env.REACT_APP_GITHUB_CLIENT_ID || '',\r    scope: 'user:email'\r  },\r  apple: {\r    name: 'Apple',\r    icon: <AppleOutlined />,\r    color: '#000',\r    clientId: process.env.REACT_APP_APPLE_CLIENT_ID || '',\r    scope: 'name email'\r  },\r  twitter: {\r    name: 'Twitter',\r    icon: <TwitterOutlined />,\r    color: '#1DA1F2',\r    clientId: process.env.REACT_APP_TWITTER_CLIENT_ID || '',\r    scope: 'users.read tweet.read'\r  }\r};\rexport const SocialLogin: React.FC<SocialLoginProps> = ({\r  onSuccess,\r  onError,\r  providers = defaultProviders,\r  layout = 'horizontal',\r  size = 'large',\r  showLabels = true\r}) => {\r  const [loading, setLoading] = useState<string | null>(null);\r  const handleSocialLogin = async (provider: string) => {\r    setLoading(provider);\r    try {\r      const config = providerConfig[provider as keyof typeof providerConfig];\r      if (!config.clientId) {\r        throw new Error(`${provider} client ID not configured`);\r      }\r      // OAuth flow implementation\r      switch (provider) {\r        case 'google':\r          await handleGoogleLogin(config);\r          break;\r        case 'microsoft':\r          await handleMicrosoftLogin(config);\r          break;\r        case 'linkedin':\r          await handleLinkedInLogin(config);\r          break;\r        case 'github':\r          await handleGitHubLogin(config);\r          break;\r        default:\r          throw new Error(`${provider} login not implemented`);\r      }\r    } catch (error) {\r      message.error(`${provider} ile giriş başarısız`);\r      if (onError) {\r        onError(provider, error);\r      }\r    } finally {\r      setLoading(null);\r    }\r  };\r  const handleGoogleLogin = async (config: any) => {\r    // Load Google Sign-In SDK\r    return new Promise((resolve, reject) => {\r      const script = document.createElement('script');\r      script.src = 'https://accounts.google.com/gsi/client';\r      script.async = true;\r      script.defer = true;\r      script.onload = () => {\r        const google = (window as any).google;\r        google.accounts.id.initialize({\r          client_id: config.clientId,\r          callback: (response: any) => {\r            if (response.credential) {\r              // Decode JWT token\r              const payload = JSON.parse(atob(response.credential.split('.')[1]));\r              message.success('Google ile giriş başarılı!');\r              if (onSuccess) {\r                onSuccess('google', {\r                  token: response.credential,\r                  profile: payload\r                });\r              }\r              resolve(payload);\r            } else {\r              reject(new Error('Google login failed'));\r            }\r          }\r        });\r        google.accounts.id.prompt();\r      };\r      script.onerror = () => reject(new Error('Failed to load Google SDK'));\r      document.body.appendChild(script);\r    });\r  };\r  const handleMicrosoftLogin = async (config: any) => {\r    // Microsoft OAuth URL\r    const authUrl = new URL('https://login.microsoftonline.com/common/oauth2/v2.0/authorize');\r    authUrl.searchParams.append('client_id', config.clientId);\r    authUrl.searchParams.append('response_type', 'code');\r    authUrl.searchParams.append('redirect_uri', window.location.origin + '/auth/callback/microsoft');\r    authUrl.searchParams.append('scope', config.scope);\r    authUrl.searchParams.append('state', generateState());\r    // Open popup window\r    const popup = window.open(\r      authUrl.toString(),\r      'microsoft-login',\r      'width=500,height=600'\r    );\r    // Listen for callback\r    return new Promise((resolve, reject) => {\r      const checkInterval = setInterval(() => {\r        try {\r          if (popup?.closed) {\r            clearInterval(checkInterval);\r            reject(new Error('Login cancelled'));\r          }\r        } catch (e) {\r          // Cross-origin error, ignore\r        }\r      }, 1000);\r      // Listen for message from popup\r      window.addEventListener('message', (event) => {\r        if (event.origin !== window.location.origin) return;\r        if (event.data.type === 'microsoft-auth-success') {\r          clearInterval(checkInterval);\r          popup?.close();\r          message.success('Microsoft ile giriş başarılı!');\r          if (onSuccess) {\r            onSuccess('microsoft', event.data.payload);\r          }\r          resolve(event.data.payload);\r        }\r      });\r    });\r  };\r  const handleLinkedInLogin = async (config: any) => {\r    // LinkedIn OAuth URL\r    const authUrl = new URL('https://www.linkedin.com/oauth/v2/authorization');\r    authUrl.searchParams.append('response_type', 'code');\r    authUrl.searchParams.append('client_id', config.clientId);\r    authUrl.searchParams.append('redirect_uri', window.location.origin + '/auth/callback/linkedin');\r    authUrl.searchParams.append('scope', config.scope);\r    authUrl.searchParams.append('state', generateState());\r    window.location.href = authUrl.toString();\r  };\r  const handleGitHubLogin = async (config: any) => {\r    // GitHub OAuth URL\r    const authUrl = new URL('https://github.com/login/oauth/authorize');\r    authUrl.searchParams.append('client_id', config.clientId);\r    authUrl.searchParams.append('redirect_uri', window.location.origin + '/auth/callback/github');\r    authUrl.searchParams.append('scope', config.scope);\r    authUrl.searchParams.append('state', generateState());\r    window.location.href = authUrl.toString();\r  };\r  const generateState = () => {\r    return Math.random().toString(36).substring(2, 15);\r  };\r  const renderButton = (provider: string) => {\r    const config = providerConfig[provider as keyof typeof providerConfig];\r    if (!config) return null;\r    const isLoading = loading === provider;\r    return (\r      <motion.div\r        key={provider}\r        whileHover={{ scale: 1.02 }}\r        whileTap={{ scale: 0.98 }}\r      >\r        <Button\r          className={`social-login-btn social-login-${provider}`}\r          size={size}\r          icon={isLoading ? <Spin size=\"small\" /> : config.icon}\r          onClick={() = aria-label=\"button\"> handleSocialLogin(provider)}\r          disabled={loading !== null}\r          block={layout === 'vertical'}\r          style={{\r            borderColor: config.color,\r            color: loading === null ? config.color : undefined\r          }}\r        >\r          {showLabels && `${config.name} ile ${isLoading ? 'Bağlanıyor...' : 'Devam Et'}`}\r        </Button>\r      </motion.div>\r    );\r  };\r  const containerClass = `social-login-container social-login-${layout}`;\r  return (\r    <div className={containerClass}>\r      {layout === 'grid' ? (\r        <div className=\"social-login-grid\">\r          {providers.map(renderButton)}\r        </div>\r      ) : (\r        <Space \r          direction={layout === 'vertical' ? 'vertical' : 'horizontal'}\r          size=\"middle\"\r          style={{ width: layout === 'vertical' ? '100%' : 'auto' }}\r        >\r          {providers.map(renderButton)}\r        </Space>\r      )}\r    </div>\r  );\r};\r// Quick Social Login Bar\rinterface QuickSocialLoginProps {\r  onLogin: (provider: string, data: any) => void;\r}\rexport const QuickSocialLogin: React.FC<QuickSocialLoginProps> = ({ onLogin }) => {\r  return (\r    <div className=\"quick-social-login\">\r      <Divider>\r        <span style={{ fontSize: 13, color: '#8b95a7' }}>veya hızlı giriş</span>\r      </Divider>\r      <SocialLogin\r        providers={['google', 'microsoft', 'linkedin']}\r        layout=\"horizontal\"\r        size=\"middle\"\r        showLabels={false}\r        onSuccess={onLogin}\r      />\r    </div>\r  );\r};\r// Social Account Link Component\rinterface SocialAccountLinkProps {\r  linkedAccounts?: string[];\r  onLink: (provider: string) => void;\r  onUnlink: (provider: string) => void;\r}\rexport const SocialAccountLink: React.FC<SocialAccountLinkProps> = ({\r  linkedAccounts = [],\r  onLink,\r  onUnlink\r}) => {\r  const allProviders = Object.keys(providerConfig);\r  return (\r    <div className=\"social-account-link\">\r      <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\r        {allProviders.map(provider => {\r          const config = providerConfig[provider as keyof typeof providerConfig];\r          const isLinked = linkedAccounts.includes(provider);\r          return (\r            <div key={provider} className=\"social-account-item\">\r              <Space>\r                {config.icon}\r                <span>{config.name}</span>\r              </Space>\r              <Button\r                size=\"small\"\r                type={isLinked ? 'default' : 'primary'}\r                onClick={() => isLinked ? onUnlink(provider) : onLink(provider)}\r              >\r                {isLinked ? 'Bağlantıyı Kaldır' : 'Bağla'}\r              </Button>\r            </div>\r          );\r        })}\r      </Space>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/components/SocialLogin/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useRef, useEffect } from 'react';\rimport {\r  Modal,\r  Input,\r  Button,\r  Space,\r  Typography,\r  Alert,\r  Tabs,\r  QRCode,\r  message,\r  Spin,\r  Divider,\r  Steps\r} from 'antd';\rimport {\r  MobileOutlined,\r  MailOutlined,\r  SafetyOutlined,\r  KeyOutlined,\r  CheckCircleOutlined,\r  CopyOutlined,\r  ReloadOutlined,\r  QrcodeOutlined\r} from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst { Step } = Steps;\rinterface TwoFactorSetupProps {\r  visible: boolean;\r  onClose: () => void;\r  onComplete: (method: string, data: any) => void;\r  userEmail?: string;\r  userPhone?: string;\r}\rexport const TwoFactorSetup: React.FC<TwoFactorSetupProps> = ({\r  visible,\r  onClose,\r  onComplete,\r  userEmail,\r  userPhone\r}) => {\r  const [activeTab, setActiveTab] = useState('authenticator');\r  const [currentStep, setCurrentStep] = useState(0);\r  const [qrCodeUrl, setQrCodeUrl] = useState('');\r  const [secretKey, setSecretKey] = useState('');\r  const [verificationCode, setVerificationCode] = useState('');\r  const [backupCodes, setBackupCodes] = useState<string[]>([]);\r  const [loading, setLoading] = useState(false);\r  useEffect(() => {\r    if (visible && activeTab === 'authenticator') {\r      generateAuthenticatorSetup();\r    }\r  }, [visible, activeTab]);\r  const generateAuthenticatorSetup = async () => {\r    setLoading(true);\r    try {\r      // Simulate API call\r      setTimeout(() => {\r        const secret = generateRandomSecret();\r        const otpUrl = `otpauth://totp/Stocker:${userEmail}?secret=${secret}&issuer=Stocker`;\r        setSecretKey(secret);\r        setQrCodeUrl(otpUrl);\r        setLoading(false);\r      }, 1000);\r    } catch (error) {\r      message.error('2FA kurulumu başlatılamadı');\r      setLoading(false);\r    }\r  };\r  const generateRandomSecret = () => {\r    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\r    let secret = '';\r    for (let i = 0; i < 32; i++) {\r      secret += chars[Math.floor(Math.random() * chars.length)];\r    }\r    return secret;\r  };\r  const generateBackupCodes = () => {\r    const codes = [];\r    for (let i = 0; i < 10; i++) {\r      const code = Math.random().toString(36).substring(2, 10).toUpperCase();\r      codes.push(code);\r    }\r    return codes;\r  };\r  const handleVerifyCode = async () => {\r    if (verificationCode.length !== 6) {\r      message.error('Lütfen 6 haneli kodu girin');\r      return;\r    }\r    setLoading(true);\r    try {\r      // Simulate verification\r      setTimeout(() => {\r        const codes = generateBackupCodes();\r        setBackupCodes(codes);\r        setCurrentStep(2);\r        message.success('2FA başarıyla etkinleştirildi!');\r        setLoading(false);\r      }, 1500);\r    } catch (error) {\r      message.error('Doğrulama kodu hatalı');\r      setLoading(false);\r    }\r  };\r  const handleSMSSetup = async () => {\r    setLoading(true);\r    try {\r      // Send SMS code\r      setTimeout(() => {\r        message.success('Doğrulama kodu SMS olarak gönderildi');\r        setCurrentStep(1);\r        setLoading(false);\r      }, 1500);\r    } catch (error) {\r      message.error('SMS gönderilemedi');\r      setLoading(false);\r    }\r  };\r  const handleEmailSetup = async () => {\r    setLoading(true);\r    try {\r      // Send email code\r      setTimeout(() => {\r        message.success('Doğrulama kodu e-posta adresinize gönderildi');\r        setCurrentStep(1);\r        setLoading(false);\r      }, 1500);\r    } catch (error) {\r      message.error('E-posta gönderilemedi');\r      setLoading(false);\r    }\r  };\r  const copyToClipboard = (text: string) => {\r    navigator.clipboard.writeText(text);\r    message.success('Kopyalandı!');\r  };\r  const downloadBackupCodes = () => {\r    const content = backupCodes.join('\\n');\r    const blob = new Blob([content], { type: 'text/plain' });\r    const url = URL.createObjectURL(blob);\r    const a = document.createElement('a');\r    a.href = url;\r    a.download = 'stocker-backup-codes.txt';\r    a.click();\r  };\r  const renderAuthenticatorSetup = () => (\r    <div className=\"twofa-setup-content\">\r      <Steps current={currentStep} style={{ marginBottom: 32 }}>\r        <Step title=\"QR Kod\" icon={<QrcodeOutlined />} />\r        <Step title=\"Doğrula\" icon={<SafetyOutlined />} />\r        <Step title=\"Yedek Kodlar\" icon={<KeyOutlined />} />\r      </Steps>\r      {currentStep === 0 && (\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          animate={{ opacity: 1, y: 0 }}\r          transition={{ duration: 0.3 }}\r        >\r          <Alert\r            message=\"Authenticator Uygulaması Kurulumu\"\r            description=\"Google Authenticator veya Microsoft Authenticator uygulamasını kullanarak QR kodu tarayın\"\r            type=\"info\"\r            showIcon\r            style={{ marginBottom: 24 }}\r          />\r          <div className=\"qr-code-container\">\r            {loading ? (\r              <Spin size=\"large\" />\r            ) : (\r              <QRCode value={qrCodeUrl} size={200} />\r            )}\r          </div>\r          <Divider>veya manuel olarak girin</Divider>\r          <div className=\"secret-key-container\">\r            <Text strong>Gizli Anahtar:</Text>\r            <div className=\"secret-key-box\">\r              <Text code className=\"secret-key\">{secretKey}</Text>\r              <Button\r                icon={<CopyOutlined />}\r                onClick={() = aria-label=\"copy outlined\"> copyToClipboard(secretKey)}\r                size=\"small\"\r              >\r                Kopyala\r              </Button>\r            </div>\r          </div>\r          <Button\r            type=\"primary\"\r            block\r            size=\"large\"\r            onClick={() => setCurrentStep(1)}\r            style={{ marginTop: 24 }}\r          >\r            Devam Et\r          </Button>\r        </motion.div>\r      )}\r      {currentStep === 1 && (\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          animate={{ opacity: 1, y: 0 }}\r          transition={{ duration: 0.3 }}\r        >\r          <Alert\r            message=\"Doğrulama Kodu\"\r            description=\"Authenticator uygulamanızda görünen 6 haneli kodu girin\"\r            type=\"info\"\r            showIcon\r            style={{ marginBottom: 24 }}\r          />\r          <div className=\"verification-input\">\r            <Input\r              size=\"large\"\r              placeholder=\"000000\"\r              maxLength={6}\r              value={verificationCode}\r              onChange={(e) = aria-label=\"input field\"> setVerificationCode(e.target.value.replace(/\\D/g, ''))}\r              style={{\r                fontSize: 24,\r                textAlign: 'center',\r                letterSpacing: 8,\r                fontWeight: 600\r              }}\r            />\r          </div>\r          <Space style={{ width: '100%', marginTop: 24 }} direction=\"vertical\">\r            <Button\r              type=\"primary\"\r              block\r              size=\"large\"\r              loading={loading}\r              onClick={handleVerifyCode}\r              disabled={verificationCode.length !== 6}\r            >\r              Doğrula ve Etkinleştir\r            </Button>\r            <Button\r              block\r              size=\"large\"\r              onClick={() => setCurrentStep(0)}\r            >\r              Geri\r            </Button>\r          </Space>\r        </motion.div>\r      )}\r      {currentStep === 2 && (\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          animate={{ opacity: 1, y: 0 }}\r          transition={{ duration: 0.3 }}\r        >\r          <div className=\"success-icon\">\r            <CheckCircleOutlined style={{ fontSize: 64, color: '#52c41a' }} />\r          </div>\r          <Title level={3} style={{ textAlign: 'center', marginTop: 24 }}>\r            2FA Başarıyla Etkinleştirildi!\r          </Title>\r          <Alert\r            message=\"Yedek Kodlarınız\"\r            description=\"Bu kodları güvenli bir yerde saklayın. Telefonunuzu kaybederseniz bu kodlarla giriş yapabilirsiniz.\"\r            type=\"warning\"\r            showIcon\r            style={{ marginTop: 24, marginBottom: 16 }}\r          />\r          <div className=\"backup-codes-grid\">\r            {backupCodes.map((code, index) => (\r              <div key={index} className=\"backup-code\">\r                <Text code>{code}</Text>\r              </div>\r            ))}\r          </div>\r          <Space style={{ width: '100%', marginTop: 24 }} direction=\"vertical\">\r            <Button\r              type=\"primary\"\r              block\r              size=\"large\"\r              icon={<CopyOutlined />}\r              onClick={() = aria-label=\"copy outlined\"> copyToClipboard(backupCodes.join('\\n'))}\r            >\r              Tümünü Kopyala\r            </Button>\r            <Button\r              block\r              size=\"large\"\r              onClick={downloadBackupCodes}\r            >\r              İndir (.txt)\r            </Button>\r            <Button\r              type=\"primary\"\r              block\r              size=\"large\"\r              onClick={() => onComplete('authenticator', { secretKey, backupCodes })}\r            >\r              Tamamla\r            </Button>\r          </Space>\r        </motion.div>\r      )}\r    </div>\r  );\r  const renderSMSSetup = () => (\r    <div className=\"twofa-setup-content\">\r      {currentStep === 0 && (\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          animate={{ opacity: 1, y: 0 }}\r          transition={{ duration: 0.3 }}\r        >\r          <Alert\r            message=\"SMS ile 2FA\"\r            description=\"Her girişte telefonunuza SMS ile doğrulama kodu gönderilecek\"\r            type=\"info\"\r            showIcon\r            style={{ marginBottom: 24 }}\r          />\r          <div className=\"phone-input-container\">\r            <Text strong>Telefon Numarası:</Text>\r            <Input\r              size=\"large\"\r              prefix={<MobileOutlined / aria-label=\"input field\">}\r              value={userPhone || '+90 5XX XXX XX XX'}\r              disabled\r              style={{ marginTop: 8 }}\r            />\r          </div>\r          <Button\r            type=\"primary\"\r            block\r            size=\"large\"\r            loading={loading}\r            onClick={handleSMSSetup}\r            style={{ marginTop: 24 }}\r            icon={<MobileOutlined />}\r           aria-label=\"mobile outlined\">\r            SMS Kodu Gönder\r          </Button>\r        </motion.div>\r      )}\r      {currentStep === 1 && (\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          animate={{ opacity: 1, y: 0 }}\r          transition={{ duration: 0.3 }}\r        >\r          <Alert\r            message=\"SMS Doğrulama\"\r            description={`${userPhone} numarasına gönderilen 6 haneli kodu girin`}\r            type=\"info\"\r            showIcon\r            style={{ marginBottom: 24 }}\r          />\r          <div className=\"verification-input\">\r            <Input\r              size=\"large\"\r              placeholder=\"000000\"\r              maxLength={6}\r              value={verificationCode}\r              onChange={(e) = aria-label=\"input field\"> setVerificationCode(e.target.value.replace(/\\D/g, ''))}\r              style={{\r                fontSize: 24,\r                textAlign: 'center',\r                letterSpacing: 8,\r                fontWeight: 600\r              }}\r            />\r          </div>\r          <Space style={{ width: '100%', marginTop: 24 }} direction=\"vertical\">\r            <Button\r              type=\"primary\"\r              block\r              size=\"large\"\r              loading={loading}\r              onClick={() => {\r                message.success('SMS 2FA etkinleştirildi!');\r                onComplete('sms', { phone: userPhone });\r              }}\r              disabled={verificationCode.length !== 6}\r            >\r              Doğrula ve Etkinleştir\r            </Button>\r            <Button\r              block\r              onClick={() => handleSMSSetup()}\r              icon={<ReloadOutlined />}\r            >\r              Tekrar Gönder\r            </Button>\r          </Space>\r        </motion.div>\r      )}\r    </div>\r  );\r  return (\r    <Modal\r      title={\r        <Space>\r          <SafetyOutlined />\r          <span>İki Faktörlü Kimlik Doğrulama (2FA)</span>\r        </Space>\r      }\r      open={visible}\r      onCancel={onClose}\r      footer={null}\r      width={600}\r      centered\r      className=\"twofa-modal\"\r    >\r      <Tabs activeKey={activeTab} onChange={setActiveTab}>\r        <TabPane\r          tab={\r            <Space>\r              <KeyOutlined />\r              <span>Authenticator App</span>\r            </Space>\r          }\r          key=\"authenticator\"\r        >\r          {renderAuthenticatorSetup()}\r        </TabPane>\r        <TabPane\r          tab={\r            <Space>\r              <MobileOutlined />\r              <span>SMS</span>\r            </Space>\r          }\r          key=\"sms\"\r        >\r          {renderSMSSetup()}\r        </TabPane>\r        <TabPane\r          tab={\r            <Space>\r              <MailOutlined />\r              <span>E-posta</span>\r            </Space>\r          }\r          key=\"email\"\r          disabled\r        >\r          <Alert\r            message=\"Yakında\"\r            description=\"E-posta ile 2FA özelliği yakında eklenecek\"\r            type=\"info\"\r            showIcon\r          />\r        </TabPane>\r      </Tabs>\r    </Modal>\r  );\r};\r// 2FA Verification Component for Login\rinterface TwoFactorVerifyProps {\r  visible: boolean;\r  method: 'authenticator' | 'sms' | 'email';\r  onVerify: (code: string) => void;\r  onCancel: () => void;\r  onResend?: () => void;\r}\rexport const TwoFactorVerify: React.FC<TwoFactorVerifyProps> = ({\r  visible,\r  method,\r  onVerify,\r  onCancel,\r  onResend\r}) => {\r  const [code, setCode] = useState('');\r  const [loading, setLoading] = useState(false);\r  const inputRefs = useRef<(Input | null)[]>([]);\r  const handleSubmit = () => {\r    if (code.length === 6) {\r      setLoading(true);\r      onVerify(code);\r    }\r  };\r  return (\r    <Modal\r      title=\"İki Faktörlü Doğrulama\"\r      open={visible}\r      onCancel={onCancel}\r      footer={null}\r      width={400}\r      centered\r      className=\"twofa-verify-modal\"\r    >\r      <div style={{ textAlign: 'center', padding: '20px 0' }}>\r        <SafetyOutlined style={{ fontSize: 48, color: '#667eea', marginBottom: 20 }} />\r        <Paragraph>\r          {method === 'authenticator' && 'Authenticator uygulamanızdaki 6 haneli kodu girin'}\r          {method === 'sms' && 'Telefonunuza gönderilen 6 haneli kodu girin'}\r          {method === 'email' && 'E-posta adresinize gönderilen 6 haneli kodu girin'}\r        </Paragraph>\r        <Input\r          size=\"large\"\r          placeholder=\"000000\"\r          maxLength={6}\r          value={code}\r          onChange={(e) = aria-label=\"input field\"> setCode(e.target.value.replace(/\\D/g, ''))}\r          onPressEnter={handleSubmit}\r          style={{\r            fontSize: 24,\r            textAlign: 'center',\r            letterSpacing: 8,\r            fontWeight: 600,\r            marginBottom: 24\r          }}\r        />\r        <Space direction=\"vertical\" style={{ width: '100%' }}>\r          <Button\r            type=\"primary\"\r            block\r            size=\"large\"\r            loading={loading}\r            onClick={handleSubmit}\r            disabled={code.length !== 6}\r          >\r            Doğrula\r          </Button>\r          {method === 'sms' && onResend && (\r            <Button\r              type=\"link\"\r              onClick={onResend}\r            >\r              Kodu Tekrar Gönder\r            </Button>\r          )}\r        </Space>\r      </div>\r    </Modal>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/components/TwoFactorAuth/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useEffect, useState } from 'react';\rimport { useSearchParams, useNavigate } from 'react-router-dom';\rimport { Card, Button, Result, Spin, message, Typography } from 'antd';\rimport { CheckCircleOutlined, CloseCircleOutlined, MailOutlined } from '@ant-design/icons';\rimport { authAPI } from '@/shared/api/auth.api';\rimport './style.css';\rconst { Title, Paragraph } = Typography;\rconst EmailVerificationPage: React.FC = () => {\r  const [searchParams] = useSearchParams();\r  const navigate = useNavigate();\r  const [verificationStatus, setVerificationStatus] = useState<'pending' | 'success' | 'error'>('pending');\r  const [errorMessage, setErrorMessage] = useState<string>('');\r  const [isResending, setIsResending] = useState(false);\r  const [resendCooldown, setResendCooldown] = useState(0);\r  const email = searchParams.get('email');\r  const token = searchParams.get('token');\r  useEffect(() => {\r    if (email && token) {\r      verifyEmail();\r    } else {\r      setVerificationStatus('error');\r      setErrorMessage('Geçersiz doğrulama linki');\r    }\r  }, [email, token]);\r  useEffect(() => {\r    if (resendCooldown > 0) {\r      const timer = setTimeout(() => {\r        setResendCooldown(resendCooldown - 1);\r      }, 1000);\r      return () => clearTimeout(timer);\r    }\r  }, [resendCooldown]);\r  const verifyEmail = async () => {\r    if (!email || !token) return;\r    try {\r      const response = await authAPI.verifyEmail({ email, token });\r      if (response.data.success) {\r        setVerificationStatus('success');\r        message.success(response.data.message || 'Email başarıyla doğrulandı!');\r        // Redirect to login after 3 seconds\r        setTimeout(() => {\r          navigate(response.data.redirectUrl || '/login');\r        }, 3000);\r      } else {\r        setVerificationStatus('error');\r        setErrorMessage(response.data.message || 'Doğrulama başarısız');\r      }\r    } catch (error: any) {\r      setVerificationStatus('error');\r      setErrorMessage(error.response?.data?.message || 'Doğrulama sırasında bir hata oluştu');\r    }\r  };\r  const handleResendEmail = async () => {\r    if (!email || isResending || resendCooldown > 0) return;\r    setIsResending(true);\r    try {\r      const response = await authAPI.resendVerificationEmail({ email });\r      if (response.data.success) {\r        message.success(response.data.message || 'Doğrulama emaili tekrar gönderildi');\r        setResendCooldown(60); // 60 second cooldown\r      } else {\r        message.error(response.data.message || 'Email gönderilemedi');\r      }\r    } catch (error: any) {\r      if (error.response?.data?.message?.includes('saniye sonra')) {\r        // Extract seconds from rate limit message\r        const match = error.response.data.message.match(/(\\d+) saniye/);\r        if (match) {\r          setResendCooldown(parseInt(match[1]));\r        }\r      }\r      message.error(error.response?.data?.message || 'Email gönderilemedi');\r    } finally {\r      setIsResending(false);\r    }\r  };\r  const handleGoToLogin = () => {\r    navigate('/login');\r  };\r  return (\r    <div className=\"email-verification-container\">\r      <Card className=\"email-verification-card\">\r        {verificationStatus === 'pending' && (\r          <div className=\"verification-loading\">\r            <Spin size=\"large\" />\r            <Title level={3}>Email Doğrulanıyor...</Title>\r            <Paragraph>Lütfen bekleyin, email adresiniz doğrulanıyor.</Paragraph>\r          </div>\r        )}\r        {verificationStatus === 'success' && (\r          <Result\r            status=\"success\"\r            icon={<CheckCircleOutlined style={{ color: '#52c41a' }} />}\r            title=\"Email Başarıyla Doğrulandı!\"\r            subTitle=\"Hesabınız aktifleştirildi. Giriş sayfasına yönlendiriliyorsunuz...\"\r            extra={[\r              <Button type=\"primary\" key=\"login\" onClick={handleGoToLogin}>\r                Hemen Giriş Yap\r              </Button>\r            ]}\r          />\r        )}\r        {verificationStatus === 'error' && (\r          <Result\r            status=\"error\"\r            icon={<CloseCircleOutlined style={{ color: '#ff4d4f' }} />}\r            title=\"Doğrulama Başarısız\"\r            subTitle={errorMessage}\r            extra={[\r              email && (\r                <Button\r                  key=\"resend\"\r                  type=\"primary\"\r                  icon={<MailOutlined />}\r                  loading={isResending}\r                  disabled={resendCooldown  aria-label=\"mail outlined\"> 0}\r                  onClick={handleResendEmail}\r                >\r                  {resendCooldown > 0 \r                    ? `Tekrar Gönder (${resendCooldown}s)` \r                    : 'Doğrulama Emailini Tekrar Gönder'}\r                </Button>\r              ),\r              <Button key=\"login\" onClick={handleGoToLogin}>\r                Giriş Sayfasına Git\r              </Button>\r            ]}\r          />\r        )}\r      </Card>\r    </div>\r  );\r};\rexport default EmailVerificationPage;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/pages/EmailVerification/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { Link, useNavigate } from 'react-router-dom';\rimport { Form, Input, Button, Card, Typography, Alert, Steps } from 'antd';\rimport { MailOutlined, LockOutlined, ArrowLeftOutlined } from '@ant-design/icons';\rimport { Toast } from '@/shared/components/Toast';\rimport { formRules } from '@/shared/utils/validators';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Step } = Steps;\rinterface ForgotPasswordForm {\r  email: string;\r}\rinterface ResetPasswordForm {\r  code: string;\r  password: string;\r  confirmPassword: string;\r}\rexport const ForgotPasswordPage: React.FC = () => {\r  const [form] = Form.useForm();\r  const [resetForm] = Form.useForm();\r  const navigate = useNavigate();\r  const [currentStep, setCurrentStep] = useState(0);\r  const [email, setEmail] = useState('');\r  const [isLoading, setIsLoading] = useState(false);\r  const handleSendResetCode = async (values: ForgotPasswordForm) => {\r    setIsLoading(true);\r    try {\r      // API call to send reset code\r      // await authApi.sendPasswordResetCode(values.email);\r      // Simulate API call\r      await new Promise(resolve => setTimeout(resolve, 1500));\r      Toast.success('Şifre sıfırlama kodu email adresinize gönderildi.');\r      setEmail(values.email);\r      setCurrentStep(1);\r    } catch (error) {\r      Toast.error('Kod gönderilirken bir hata oluştu. Lütfen tekrar deneyin.');\r    } finally {\r      setIsLoading(false);\r    }\r  };\r  const handleResetPassword = async (values: ResetPasswordForm) => {\r    setIsLoading(true);\r    try {\r      // API call to reset password\r      // await authApi.resetPassword({\r      //   email,\r      //   code: values.code,\r      //   newPassword: values.password\r      // });\r      // Simulate API call\r      await new Promise(resolve => setTimeout(resolve, 1500));\r      Toast.success('Şifreniz başarıyla güncellendi. Giriş yapabilirsiniz.');\r      setCurrentStep(2);\r      setTimeout(() => {\r        navigate('/login');\r      }, 2000);\r    } catch (error) {\r      Toast.error('Şifre güncellenirken bir hata oluştu. Lütfen tekrar deneyin.');\r    } finally {\r      setIsLoading(false);\r    }\r  };\r  const handleResendCode = async () => {\r    setIsLoading(true);\r    try {\r      // await authApi.sendPasswordResetCode(email);\r      await new Promise(resolve => setTimeout(resolve, 1500));\r      Toast.success('Yeni kod gönderildi.');\r    } catch (error) {\r      Toast.error('Kod gönderilirken bir hata oluştu.');\r    } finally {\r      setIsLoading(false);\r    }\r  };\r  return (\r    <div className=\"forgot-password-container\">\r      <div className=\"forgot-password-content\">\r        <Card className=\"forgot-password-card\">\r          <div className=\"forgot-password-header\">\r            <Title level={2}>Şifremi Unuttum</Title>\r            <Paragraph type=\"secondary\">\r              {currentStep === 0 && 'Email adresinizi girin, size şifre sıfırlama kodu gönderelim.'}\r              {currentStep === 1 && 'Email adresinize gönderilen kodu girin ve yeni şifrenizi belirleyin.'}\r              {currentStep === 2 && 'Şifreniz başarıyla güncellendi!'}\r            </Paragraph>\r          </div>\r          <Steps current={currentStep} className=\"forgot-password-steps\">\r            <Step title=\"Email\" />\r            <Step title=\"Doğrulama\" />\r            <Step title=\"Tamamlandı\" />\r          </Steps>\r          {currentStep === 0 && (\r            <Form\r              form={form}\r              layout=\"vertical\"\r              onFinish={handleSendResetCode}\r              className=\"forgot-password-form\"\r            >\r              <Form.Item\r                name=\"email\"\r                label=\"Email Adresi\"\r                rules={[\r                  formRules.required('Email adresi zorunludur'),\r                  formRules.email('Geçerli bir email adresi giriniz'),\r                ]}\r              >\r                <Input\r                  size=\"large\"\r                  prefix={<MailOutlined / aria-label=\"input field\">}\r                  placeholder=\"ornek@email.com\"\r                  autoComplete=\"email\"\r                />\r              </Form.Item>\r              <Form.Item>\r                <Button\r                  type=\"primary\"\r                  htmlType=\"submit\"\r                  size=\"large\"\r                  block\r                  loading={isLoading}\r                >\r                  Kod Gönder\r                </Button>\r              </Form.Item>\r              <div className=\"forgot-password-footer\">\r                <Link to=\"/login\">\r                  <ArrowLeftOutlined /> Giriş sayfasına dön\r                </Link>\r              </div>\r            </Form>\r          )}\r          {currentStep === 1 && (\r            <Form\r              form={resetForm}\r              layout=\"vertical\"\r              onFinish={handleResetPassword}\r              className=\"forgot-password-form\"\r            >\r              <Alert\r                message={`Doğrulama kodu ${email} adresine gönderildi.`}\r                type=\"info\"\r                showIcon\r                style={{ marginBottom: 24 }}\r              />\r              <Form.Item\r                name=\"code\"\r                label=\"Doğrulama Kodu\"\r                rules={[\r                  formRules.required('Doğrulama kodu zorunludur'),\r                  formRules.min(6, 'Doğrulama kodu en az 6 karakter olmalıdır'),\r                ]}\r              >\r                <Input\r                  size=\"large\"\r                  placeholder=\"6 haneli kodu girin\"\r                  maxLength={6}\r                / aria-label=\"input field\">\r              </Form.Item>\r              <Form.Item\r                name=\"password\"\r                label=\"Yeni Şifre\"\r                rules={[\r                  formRules.required('Şifre zorunludur'),\r                  formRules.password(),\r                ]}\r              >\r                <Input.Password\r                  size=\"large\"\r                  prefix={<LockOutlined / aria-label=\"input field\">}\r                  placeholder=\"Yeni şifrenizi girin\"\r                />\r              </Form.Item>\r              <Form.Item\r                name=\"confirmPassword\"\r                label=\"Şifre Tekrar\"\r                dependencies={['password']}\r                rules={[\r                  formRules.required('Şifre tekrarı zorunludur'),\r                  ({ getFieldValue }) => ({\r                    validator(_, value) {\r                      if (!value || getFieldValue('password') === value) {\r                        return Promise.resolve();\r                      }\r                      return Promise.reject(new Error('Şifreler eşleşmiyor'));\r                    },\r                  }),\r                ]}\r              >\r                <Input.Password\r                  size=\"large\"\r                  prefix={<LockOutlined / aria-label=\"input field\">}\r                  placeholder=\"Şifrenizi tekrar girin\"\r                />\r              </Form.Item>\r              <Form.Item>\r                <Button\r                  type=\"primary\"\r                  htmlType=\"submit\"\r                  size=\"large\"\r                  block\r                  loading={isLoading}\r                >\r                  Şifreyi Güncelle\r                </Button>\r              </Form.Item>\r              <div className=\"forgot-password-footer\">\r                <Button type=\"link\" onClick={handleResendCode} disabled={isLoading}>\r                  Kodu tekrar gönder\r                </Button>\r                <Link to=\"/login\">\r                  <ArrowLeftOutlined /> Giriş sayfasına dön\r                </Link>\r              </div>\r            </Form>\r          )}\r          {currentStep === 2 && (\r            <div className=\"forgot-password-success\">\r              <div className=\"success-icon\">✓</div>\r              <Title level={3}>Şifreniz Güncellendi!</Title>\r              <Paragraph>\r                Yeni şifreniz ile giriş yapabilirsiniz. Yönlendiriliyorsunuz...\r              </Paragraph>\r              <Button type=\"primary\" size=\"large\" onClick={() => navigate('/login')}>\r                Giriş Yap\r              </Button>\r            </div>\r          )}\r        </Card>\r      </div>\r    </div>\r  );\r};\rexport default ForgotPasswordPage;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/pages/ForgotPasswordPage/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React from 'react';\rimport { useNavigate, useLocation } from 'react-router-dom';\rimport { Form, Input, Button, Typography, Space } from 'antd';\rimport { MailOutlined, LockOutlined, LoginOutlined, RocketOutlined, HomeOutlined } from '@ant-design/icons';\rimport { useAuthStore } from '@/app/store/auth.store';\rimport { LoginRequest } from '@/shared/types';\rimport companyService from '@/services/companyService';\rimport { showApiResponse, showWelcomeAlert } from '@/shared/utils/sweetAlert';\rimport Swal from 'sweetalert2';\rimport './style.css';\rconst { Title, Text } = Typography;\rexport const LoginPage: React.FC = () => {\r  const navigate = useNavigate();\r  const location = useLocation();\r  const { login, isLoading } = useAuthStore();\r  const [form] = Form.useForm();\r  const handleSubmit = async (values: any) => {\r    // Show loading\r    showApiResponse.loading('Giriş yapılıyor...');\r    try {\r      // If tenant code is provided, set it as a header\r      if (values.tenantCode) {\r        localStorage.setItem('X-Tenant-Code', values.tenantCode);\r      }\r      const loginData: LoginRequest = {\r        email: values.email,\r        password: values.password,\r        tenantCode: values.tenantCode\r      };\r      await login(loginData);\r      // Close loading\r      Swal.close();\r      // Wait for auth store to be updated\r      await new Promise(resolve => setTimeout(resolve, 100));\r      // Get the fresh user data after login\r      const authStore = useAuthStore.getState();\r      const userName = authStore.user?.firstName || authStore.user?.email || 'Kullanıcı';\r      const userRole = authStore.user?.roles?.[0];\r      const from = (location.state as any)?.from?.pathname;\r      // Check if company exists for tenant users BEFORE navigation\r      if (userRole !== 'SystemAdmin') {\r        try {\r          const hasCompany = await companyService.checkCompanyExists();\r          if (!hasCompany) {\r            showApiResponse.info(\r              'Şirket bilgilerinizi tamamlamanız gerekiyor. Yönlendiriliyorsunuz...',\r              'Şirket Kurulumu'\r            );\r            setTimeout(() => {\r              navigate('/company-setup', { replace: true });\r            }, 1000);\r            return;\r          }\r        } catch (companyError) {\r        }\r      }\r      // Navigate FIRST, immediately based on role\r      let targetPath = '/';\r      if (from) {\r        targetPath = from;\r      } else if (userRole === 'SystemAdmin') {\r        targetPath = '/master';\r      } else if (userRole === 'TenantAdmin' || userRole === 'Admin') {\r        targetPath = '/admin';\r      } else {\r        // For regular users, we need to use the tenant ID\r        const tenantId = authStore.user?.tenantId || localStorage.getItem('stocker_tenant') || 'default';\r        targetPath = `/app/${tenantId}`;\r      }\r      // Show welcome alert first (non-blocking)\r      const roleDisplayName = userRole === 'SystemAdmin' ? 'Sistem Yöneticisi' : \r                             userRole === 'TenantAdmin' ? 'Kiracı Yöneticisi' :\r                             userRole === 'Admin' ? 'Yönetici' : 'Kullanıcı';\r      showWelcomeAlert(userName, roleDisplayName);\r      // Use window.location for hard navigation to ensure page reload\r      // This will trigger a full page reload and re-initialization\r      setTimeout(() => {\r        // Use window.location.href for guaranteed navigation\r        window.location.href = targetPath;\r      }, 1000);\r    } catch (error: any) {\r      // Close loading\r      Swal.close();\r      // Show detailed error message\r      if (error.response) {\r        // API returned an error response\r        showApiResponse.error(error, 'Giriş başarısız');\r      } else if (error.message) {\r        // Network or other error\r        showApiResponse.error(\r          { response: { data: { message: error.message } } },\r          'Giriş başarısız'\r        );\r      } else {\r        // Unknown error\r        showApiResponse.error(\r          { response: { data: { message: 'Beklenmeyen bir hata oluştu. Lütfen tekrar deneyin.' } } },\r          'Giriş başarısız'\r        );\r      }\r    }\r  };\r  return (\r    <div className=\"login-page\">\r      <div className=\"login-background\">\r        <div className=\"login-bg-shape login-bg-shape-1\"></div>\r        <div className=\"login-bg-shape login-bg-shape-2\"></div>\r        <div className=\"login-bg-shape login-bg-shape-3\"></div>\r        <div className=\"login-bg-shape login-bg-shape-4\"></div>\r      </div>\r      <div className=\"login-container\">\r        <div className=\"login-box\">\r          <div className=\"login-logo\">\r            <RocketOutlined style={{ fontSize: 48, color: '#667eea' }} />\r          </div>\r          <div className=\"login-header\">\r            <Title level={2} style={{ margin: 0, color: '#1a1a1a' }}>Hoş Geldiniz</Title>\r            <Text type=\"secondary\" style={{ fontSize: 16 }}>Stocker'a devam etmek için giriş yapın</Text>\r          </div>\r          <Form\r            form={form}\r            name=\"login\"\r            onFinish={handleSubmit}\r            layout=\"vertical\"\r            size=\"large\"\r            className=\"login-form\"\r          >\r            <Form.Item\r              name=\"tenantCode\"\r              rules={[\r                { required: false, message: 'Lütfen kiracı kodunu girin!' }\r              ]}\r            >\r              <Input \r                prefix={<HomeOutlined style={{ color: '#667eea' }} / aria-label=\"input field\">} \r                placeholder=\"Kiracı Kodu (örn: test)\" \r                autoComplete=\"organization\"\r                className=\"login-input\"\r              />\r            </Form.Item>\r            <Form.Item\r              name=\"email\"\r              rules={[\r                { required: true, message: 'Lütfen email adresinizi girin!' },\r                { type: 'email', message: 'Lütfen geçerli bir email adresi girin!' }\r              ]}\r            >\r              <Input \r                prefix={<MailOutlined style={{ color: '#667eea' }} / aria-label=\"input field\">} \r                placeholder=\"Email adresi\" \r                autoComplete=\"email\"\r                type=\"email\"\r                className=\"login-input\"\r              />\r            </Form.Item>\r            <Form.Item\r              name=\"password\"\r              rules={[{ required: true, message: 'Lütfen şifrenizi girin!' }]}\r            >\r              <Input.Password\r                prefix={<LockOutlined style={{ color: '#667eea' }} / aria-label=\"input field\">}\r                placeholder=\"Şifre\"\r                autoComplete=\"current-password\"\r                className=\"login-input\"\r              />\r            </Form.Item>\r            <Form.Item style={{ marginBottom: 16 }}>\r              <Button \r                type=\"primary\" \r                htmlType=\"submit\" \r                loading={isLoading} \r                block\r                size=\"large\"\r                icon={<LoginOutlined />}\r                className=\"login-button\"\r               aria-label=\"login outlined\">\r                Giriş Yap\r              </Button>\r            </Form.Item>\r            <div className=\"login-links\">\r              <a href=\"/forgot-password\">Şifremi unuttum</a>\r              <span className=\"separator\">•</span>\r              <a href=\"/register\">Hesap oluştur</a>\r            </div>\r          </Form>\r          <div className=\"demo-section\">\r            <Text type=\"secondary\" style={{ fontSize: 12, textAlign: 'center', display: 'block', marginBottom: 12 }}>\r              DEMO HESAPLARI\r            </Text>\r            <Space direction=\"vertical\" style={{ width: '100%' }} size=\"small\">\r              <div className=\"demo-credential\" onClick={() => {\r                form.setFieldsValue({ email: 'admin@stocker.com', password: 'Admin@123456' });\r              }} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => {\r                form.setFieldsValue({ email: 'admin@stocker.com', password: 'Admin@123456' (e)}>\r                <div className=\"demo-icon\">👨‍💼</div>\r                <div className=\"demo-info\">\r                  <Text strong style={{ fontSize: 13 }}>Sistem Yöneticisi</Text>\r                  <Text type=\"secondary\" style={{ fontSize: 11, display: 'block' }}>admin@stocker.com</Text>\r                </div>\r                <Text className=\"demo-hint\">Doldurmak için tıkla</Text>\r              </div>\r              <div className=\"demo-credential\" onClick={() => {\r                form.setFieldsValue({ email: 'tenant@example.com', password: 'Tenant@123456' });\r              }} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => {\r                form.setFieldsValue({ email: 'tenant@example.com', password: 'Tenant@123456' (e)}>\r                <div className=\"demo-icon\">👤</div>\r                <div className=\"demo-info\">\r                  <Text strong style={{ fontSize: 13 }}>Kiracı Yöneticisi</Text>\r                  <Text type=\"secondary\" style={{ fontSize: 11, display: 'block' }}>tenant@example.com</Text>\r                </div>\r                <Text className=\"demo-hint\">Doldurmak için tıkla</Text>\r              </div>\r            </Space>\r          </div>\r        </div>\r      </div>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/auth/pages/LoginPage/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { Layout, Typography, Card, Row, Col, Button, Tag, Space, Input, Select, Avatar, Pagination } from 'antd';\rimport {\r  CalendarOutlined,\r  UserOutlined,\r  ClockCircleOutlined,\r  TagOutlined,\r  SearchOutlined,\r  RocketOutlined,\r  ArrowLeftOutlined,\r  EyeOutlined,\r  MessageOutlined,\r  HeartOutlined\r} from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport './style.css';\rimport './blog-fixes.css';\rconst { Header, Content, Sider } = Layout;\rconst { Title, Text, Paragraph } = Typography;\rconst { Search } = Input;\rconst { Option } = Select;\rinterface BlogPost {\r  id: number;\r  title: string;\r  excerpt: string;\r  content: string;\r  author: string;\r  authorAvatar?: string;\r  date: string;\r  readTime: string;\r  category: string;\r  tags: string[];\r  image: string;\r  views: number;\r  likes: number;\r  comments: number;\r  featured?: boolean;\r}\rexport const BlogPage: React.FC = () => {\r  const navigate = useNavigate();\r  const [searchText, setSearchText] = useState('');\r  const [selectedCategory, setSelectedCategory] = useState('all');\r  const [currentPage, setCurrentPage] = useState(1);\r  const postsPerPage = 6;\r  const blogPosts: BlogPost[] = [\r    {\r      id: 1,\r      title: 'Dijital Dönüşümde ERP\\'nin Rolü',\r      excerpt: 'Modern işletmelerde dijital dönüşüm sürecinde ERP sistemlerinin önemi ve Stocker\\'ın sunduğu avantajlar.',\r      content: '',\r      author: 'Dr. Ahmet Yılmaz',\r      authorAvatar: 'https://ui-avatars.com/api/?name=Ahmet+Yilmaz&background=667eea&color=fff',\r      date: '2024-01-20',\r      readTime: '8 dk',\r      category: 'Dijital Dönüşüm',\r      tags: ['ERP', 'Dijitalleşme', 'İş Süreçleri'],\r      image: 'https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=800&h=400&fit=crop',\r      views: 2340,\r      likes: 156,\r      comments: 23,\r      featured: true\r    },\r    {\r      id: 2,\r      title: 'KOBİ\\'ler İçin Stok Yönetimi İpuçları',\r      excerpt: 'Küçük ve orta ölçekli işletmeler için etkili stok yönetimi stratejileri ve best practice\\'ler.',\r      content: '',\r      author: 'Mehmet Demir',\r      authorAvatar: 'https://ui-avatars.com/api/?name=Mehmet+Demir&background=764ba2&color=fff',\r      date: '2024-01-18',\r      readTime: '6 dk',\r      category: 'Stok Yönetimi',\r      tags: ['Stok', 'KOBİ', 'Verimlilik'],\r      image: 'https://images.unsplash.com/photo-1586281380349-632531db7ed4?w=800&h=400&fit=crop',\r      views: 1890,\r      likes: 98,\r      comments: 15\r    },\r    {\r      id: 3,\r      title: 'E-Ticaret Entegrasyonları ile Satışları Artırın',\r      excerpt: 'Trendyol, Hepsiburada ve diğer platformlarla entegrasyon sayesinde satış kanallarınızı genişletin.',\r      content: '',\r      author: 'Zeynep Kara',\r      authorAvatar: 'https://ui-avatars.com/api/?name=Zeynep+Kara&background=52c41a&color=fff',\r      date: '2024-01-15',\r      readTime: '10 dk',\r      category: 'E-Ticaret',\r      tags: ['E-Ticaret', 'Entegrasyon', 'Satış'],\r      image: 'https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=800&h=400&fit=crop',\r      views: 3210,\r      likes: 187,\r      comments: 31,\r      featured: true\r    },\r    {\r      id: 4,\r      title: 'Muhasebe Otomasyonunda Yeni Dönem',\r      excerpt: 'e-Fatura, e-Arşiv ve e-İrsaliye süreçlerinin otomasyonu ile muhasebe işlemlerini hızlandırın.',\r      content: '',\r      author: 'CPA Fatma Şahin',\r      authorAvatar: 'https://ui-avatars.com/api/?name=Fatma+Sahin&background=1890ff&color=fff',\r      date: '2024-01-12',\r      readTime: '12 dk',\r      category: 'Muhasebe',\r      tags: ['Muhasebe', 'e-Fatura', 'Otomasyon'],\r      image: 'https://images.unsplash.com/photo-1554224155-6726b3ff858f?w=800&h=400&fit=crop',\r      views: 2670,\r      likes: 145,\r      comments: 28\r    },\r    {\r      id: 5,\r      title: 'CRM ile Müşteri Memnuniyetini Artırma',\r      excerpt: 'Müşteri ilişkileri yönetiminde başarılı olmak için CRM modülünün etkin kullanımı.',\r      content: '',\r      author: 'Ayşe Yıldırım',\r      authorAvatar: 'https://ui-avatars.com/api/?name=Ayse+Yildirim&background=722ed1&color=fff',\r      date: '2024-01-10',\r      readTime: '7 dk',\r      category: 'CRM',\r      tags: ['CRM', 'Müşteri', 'Satış'],\r      image: 'https://images.unsplash.com/photo-1552664730-d307ca884978?w=800&h=400&fit=crop',\r      views: 1560,\r      likes: 89,\r      comments: 12\r    },\r    {\r      id: 6,\r      title: '2024 İş Trendleri ve Teknoloji',\r      excerpt: 'Yeni yılda işletmeleri bekleyen teknolojik trendler ve Stocker ile nasıl hazırlanabilirsiniz.',\r      content: '',\r      author: 'Tech Team',\r      authorAvatar: 'https://ui-avatars.com/api/?name=Tech+Team&background=faad14&color=fff',\r      date: '2024-01-08',\r      readTime: '15 dk',\r      category: 'Teknoloji',\r      tags: ['Trend', 'Teknoloji', '2024'],\r      image: 'https://images.unsplash.com/photo-1504868584819-f8e8b4b6d7e3?w=800&h=400&fit=crop',\r      views: 4120,\r      likes: 234,\r      comments: 45\r    },\r    {\r      id: 7,\r      title: 'İnsan Kaynakları Dijitalleşmesi',\r      excerpt: 'HR süreçlerinin dijitalleşmesi ve personel yönetiminde verimliliği artırma yöntemleri.',\r      content: '',\r      author: 'HR Uzmanları',\r      authorAvatar: 'https://ui-avatars.com/api/?name=HR+Uzmanlari&background=13c2c2&color=fff',\r      date: '2024-01-05',\r      readTime: '9 dk',\r      category: 'İnsan Kaynakları',\r      tags: ['HR', 'Dijitalleşme', 'Personel'],\r      image: 'https://images.unsplash.com/photo-1521737711867-e3b97375f902?w=800&h=400&fit=crop',\r      views: 1230,\r      likes: 67,\r      comments: 8\r    },\r    {\r      id: 8,\r      title: 'Veri Güvenliği ve KVKK Uyumluluğu',\r      excerpt: 'İşletmenizde veri güvenliğini sağlama ve KVKK uyumluluğu için yapılması gerekenler.',\r      content: '',\r      author: 'Güvenlik Ekibi',\r      authorAvatar: 'https://ui-avatars.com/api/?name=Guvenlik+Ekibi&background=f5222d&color=fff',\r      date: '2024-01-03',\r      readTime: '11 dk',\r      category: 'Güvenlik',\r      tags: ['Güvenlik', 'KVKK', 'Veri'],\r      image: 'https://images.unsplash.com/photo-1563986768609-322da13575f3?w=800&h=400&fit=crop',\r      views: 2890,\r      likes: 178,\r      comments: 34\r    }\r  ];\r  const categories = [\r    { value: 'all', label: 'Tüm Kategoriler', count: blogPosts.length },\r    { value: 'digital', label: 'Dijital Dönüşüm', count: 12 },\r    { value: 'stock', label: 'Stok Yönetimi', count: 8 },\r    { value: 'ecommerce', label: 'E-Ticaret', count: 15 },\r    { value: 'accounting', label: 'Muhasebe', count: 10 },\r    { value: 'crm', label: 'CRM', count: 6 },\r    { value: 'hr', label: 'İnsan Kaynakları', count: 5 },\r    { value: 'technology', label: 'Teknoloji', count: 18 },\r    { value: 'security', label: 'Güvenlik', count: 4 }\r  ];\r  const popularTags = [\r    'ERP', 'Dijitalleşme', 'Stok Yönetimi', 'E-Ticaret', \r    'CRM', 'Muhasebe', 'İnsan Kaynakları', 'Entegrasyon', \r    'Otomasyon', 'Verimlilik', 'KOBİ', 'Büyüme'\r  ];\r  const featuredPosts = blogPosts.filter(post => post.featured);\r  const indexOfLastPost = currentPage * postsPerPage;\r  const indexOfFirstPost = indexOfLastPost - postsPerPage;\r  const currentPosts = blogPosts.slice(indexOfFirstPost, indexOfLastPost);\r  return (\r    <Layout className=\"blog-layout\">\r      <Header className=\"blog-header\">\r        <div className=\"header-container\">\r          <div className=\"header-content\">\r            <Button \r              icon={<ArrowLeftOutlined />} \r              onClick={() = aria-label=\"arrow left outlined\"> navigate('/')}\r              type=\"text\"\r              style={{ marginRight: 16 }}\r            >\r              Ana Sayfa\r            </Button>\r            <div className=\"logo-section\" onClick={() => navigate('/')} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => navigate('/')(e)}>\r              <RocketOutlined className=\"logo-icon\" />\r              <span className=\"logo-text\">Stocker Blog</span>\r            </div>\r          </div>\r          <div className=\"header-actions\">\r            <Button onClick={() => navigate('/login')}>Giriş Yap</Button>\r            <Button type=\"primary\" onClick={() => navigate('/register')}>\r              Ücretsiz Dene\r            </Button>\r          </div>\r        </div>\r      </Header>\r      <Content className=\"blog-content\">\r        <div className=\"hero-section\">\r          <Title level={1}>Stocker Blog</Title>\r          <Paragraph>\r            İşletmenizi büyütmek için ihtiyacınız olan bilgiler, ipuçları ve güncel haberler\r          </Paragraph>\r          <Search\r            placeholder=\"Blog yazılarında ara...\"\r            onSearch={setSearchText}\r            onChange={(e) => setSearchText(e.target.value)}\r            prefix={<SearchOutlined />}\r            size=\"large\"\r            style={{ maxWidth: 500, margin: '0 auto' }}\r          />\r        </div>\r        {featuredPosts.length > 0 && (\r          <div className=\"featured-section\">\r            <Title level={2}>Öne Çıkan Yazılar</Title>\r            <Row gutter={[24, 24]}>\r              {featuredPosts.map(post => (\r                <Col xs={24} md={12} key={post.id}>\r                  <Card\r                    hoverable\r                    cover={\r                      <div className=\"featured-image\">\r                        <img alt={post.title} src={post.image} />\r                        <Tag color=\"red\" className=\"featured-badge\">ÖNE ÇIKAN</Tag>\r                      </div>\r                    }\r                    className=\"featured-card\"\r                  >\r                    <Tag color=\"purple\">{post.category}</Tag>\r                    <Title level={3}>{post.title}</Title>\r                    <Paragraph ellipsis={{ rows: 2 }}>{post.excerpt}</Paragraph>\r                    <div className=\"post-meta\">\r                      <Space>\r                        <Avatar size=\"small\" src={post.authorAvatar}>\r                          {post.author[0]}\r                        </Avatar>\r                        <Text>{post.author}</Text>\r                        <Text type=\"secondary\">•</Text>\r                        <Text type=\"secondary\">\r                          <CalendarOutlined /> {post.date}\r                        </Text>\r                        <Text type=\"secondary\">•</Text>\r                        <Text type=\"secondary\">\r                          <ClockCircleOutlined /> {post.readTime}\r                        </Text>\r                      </Space>\r                    </div>\r                    <div className=\"post-stats\">\r                      <Space>\r                        <span><EyeOutlined /> {post.views}</span>\r                        <span><HeartOutlined /> {post.likes}</span>\r                        <span><MessageOutlined /> {post.comments}</span>\r                      </Space>\r                    </div>\r                  </Card>\r                </Col>\r              ))}\r            </Row>\r          </div>\r        )}\r        <Layout className=\"main-content\">\r          <Content className=\"posts-section\">\r            <div className=\"section-header\">\r              <Title level={2}>Son Yazılar</Title>\r              <Select\r                defaultValue=\"all\"\r                style={{ width: 200 }}\r                onChange={setSelectedCategory}\r                size=\"large\"\r               aria-label=\"select field\">\r                {categories.map(cat => (\r                  <Option key={cat.value} value={cat.value}>\r                    {cat.label} ({cat.count})\r                  </Option>\r                ))}\r              </Select>\r            </div>\r            <Row gutter={[24, 24]}>\r              {currentPosts.map(post => (\r                <Col xs={24} sm={12} lg={8} key={post.id}>\r                  <Card\r                    hoverable\r                    cover={<img alt={post.title} src={post.image} />}\r                    className=\"post-card\"\r                  >\r                    <Tag color=\"blue\">{post.category}</Tag>\r                    <Title level={4}>{post.title}</Title>\r                    <Paragraph ellipsis={{ rows: 3 }}>{post.excerpt}</Paragraph>\r                    <div className=\"post-meta\">\r                      <Text type=\"secondary\">\r                        <UserOutlined /> {post.author}\r                      </Text>\r                      <Text type=\"secondary\">\r                        <ClockCircleOutlined /> {post.readTime}\r                      </Text>\r                    </div>\r                    <Button type=\"primary\" block style={{ marginTop: 16 }}>\r                      Devamını Oku\r                    </Button>\r                  </Card>\r                </Col>\r              ))}\r            </Row>\r            <div className=\"pagination-container\">\r              <Pagination\r                current={currentPage}\r                total={blogPosts.length}\r                pageSize={postsPerPage}\r                onChange={setCurrentPage}\r                showSizeChanger={false}\r              />\r            </div>\r          </Content>\r          <Sider width={320} className=\"blog-sidebar\">\r            <Card className=\"sidebar-card\">\r              <Title level={4}>Popüler Etiketler</Title>\r              <div className=\"tags-cloud\">\r                {popularTags.map(tag => (\r                  <Tag key={tag} className=\"tag-item\">\r                    <TagOutlined /> {tag}\r                  </Tag>\r                ))}\r              </div>\r            </Card>\r            <Card className=\"sidebar-card newsletter-card\">\r              <Title level={4}>Bültenimize Abone Olun</Title>\r              <Paragraph>\r                En yeni yazılar ve güncellemelerden haberdar olun\r              </Paragraph>\r              <Input placeholder=\"E-posta adresiniz\" size=\"large\" / aria-label=\"input field\">\r              <Button type=\"primary\" block size=\"large\" style={{ marginTop: 12 }}>\r                Abone Ol\r              </Button>\r            </Card>\r            <Card className=\"sidebar-card\">\r              <Title level={4}>Kategoriler</Title>\r              <div className=\"categories-list\">\r                {categories.slice(1).map(category => (\r                  <div key={category.value} className=\"category-item\">\r                    <Text>{category.label}</Text>\r                    <Tag>{category.count}</Tag>\r                  </div>\r                ))}\r              </div>\r            </Card>\r          </Sider>\r        </Layout>\r        <div className=\"cta-section\">\r          <Card>\r            <Row align=\"middle\" gutter={24}>\r              <Col xs={24} md={16}>\r                <Title level={3}>Stocker'ı Ücretsiz Deneyin</Title>\r                <Paragraph>\r                  14 gün ücretsiz deneme sürümü ile işletmenizi dijitalleştirmeye başlayın\r                </Paragraph>\r              </Col>\r              <Col xs={24} md={8} style={{ textAlign: 'right' }}>\r                <Space>\r                  <Button size=\"large\" onClick={() => navigate('/contact')}>\r                    İletişime Geç\r                  </Button>\r                  <Button \r                    type=\"primary\" \r                    size=\"large\"\r                    icon={<RocketOutlined />}\r                    onClick={() = aria-label=\"rocket outlined\"> navigate('/register')}\r                  >\r                    Ücretsiz Dene\r                  </Button>\r                </Space>\r              </Col>\r            </Row>\r          </Card>\r        </div>\r      </Content>\r    </Layout>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/blog/pages/BlogPage/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { useNavigate } from 'react-router-dom';\rimport { Button, Form, Input, Select, Steps, Card, Row, Col, InputNumber, message } from 'antd';\rimport { BankOutlined, GlobalOutlined, CheckCircleOutlined } from '@ant-design/icons';\rimport companyService from '@/services/companyService';\rimport { useAuthStore } from '@/app/store/auth.store';\rimport { getCitiesForSelect, getDistrictsByCityForSelect } from '@/data/turkey-cities';\rimport { showApiResponse } from '@/shared/utils/sweetAlert';\rimport Swal from 'sweetalert2';\rimport './style.css';\rconst { Step } = Steps;\rconst { Option } = Select;\rconst { TextArea } = Input;\rinterface CompanyFormData {\r  // Ticari Bilgiler\r  tradeRegisterNumber?: string;\r  sector?: string;\r  // Vergi Bilgileri (Zorunlu)\r  taxNumber: string;\r  taxOffice: string;\r  // Adres (Zorunlu fatura için)\r  country: string;\r  city: string;\r  district: string;\r  postalCode?: string;\r  addressLine: string;\r  // Ek Bilgiler\r  website?: string;\r  employeeCount?: string;\r  foundedYear?: number;\r  currency: string;\r  timezone: string;\r}\rconst CompanySetup: React.FC = () => {\r  const [currentStep, setCurrentStep] = useState(0);\r  const [loading, setLoading] = useState(false);\r  const [form] = Form.useForm();\r  const navigate = useNavigate();\r  const { user } = useAuthStore();\r  const [formData, setFormData] = useState<CompanyFormData>({\r    taxNumber: '',\r    taxOffice: '',\r    country: 'Türkiye',\r    city: '',\r    district: '',\r    addressLine: '',\r    currency: 'TRY',\r    timezone: 'Europe/Istanbul'\r  });\r  const [districts, setDistricts] = useState<{ label: string; value: string }[]>([]);\r  // Check if company already exists on mount\r  useEffect(() => {\r    const checkExistingCompany = async () => {\r      try {\r        const hasCompany = await companyService.checkCompanyExists();\r        if (hasCompany) {\r          message.info('Şirket bilgileriniz zaten mevcut, yönlendiriliyorsunuz...');\r          const currentUser = user || JSON.parse(localStorage.getItem('user') || '{}');\r          const userRole = currentUser.roles?.[0];\r          const tenantId = currentUser.tenantId || currentUser.tenant?.id;\r          if (userRole === 'SystemAdmin') {\r            navigate('/master');\r          } else if (userRole === 'Admin' || userRole === 'TenantAdmin') {\r            navigate('/admin');\r          } else if (tenantId) {\r            navigate(`/app/${tenantId}/dashboard`);\r          } else {\r            navigate('/app/default');\r          }\r        }\r      } catch (error) {\r      }\r    };\r    checkExistingCompany();\r  }, [navigate, user]);\r  // Handle city change to update districts\r  const handleCityChange = (cityName: string) => {\r    form.setFieldsValue({ district: undefined }); // Reset district\r    setDistricts(getDistrictsByCityForSelect(cityName));\r  };\r  const steps = [\r    {\r      title: 'Ticari Bilgiler',\r      icon: <BankOutlined />,\r    },\r    {\r      title: 'Adres Bilgileri',\r      icon: <GlobalOutlined />,\r    },\r    {\r      title: 'Ek Bilgiler',\r      icon: <CheckCircleOutlined />,\r    },\r  ];\r  const handleNext = async () => {\r    try {\r      const values = await form.validateFields();\r      setFormData({ ...formData, ...values });\r      if (currentStep < steps.length - 1) {\r        setCurrentStep(currentStep + 1);\r      } else {\r        handleSubmit();\r      }\r    } catch (error) {\r    }\r  };\r  const handlePrev = () => {\r    setCurrentStep(currentStep - 1);\r  };\r  const handleSubmit = async () => {\r    // Show loading\r    showApiResponse.loading('Şirket bilgileri kaydediliyor...');\r    try {\r      // Get user info from auth store or localStorage\r      const currentUser = user || JSON.parse(localStorage.getItem('user') || '{}');\r      // Prepare company data matching backend format\r      const companyData = {\r        name: currentUser.companyName || currentUser.tenant?.name || 'Şirket',\r        code: currentUser.tenant?.code || `company_${Date.now()}`,\r        legalName: currentUser.companyName || currentUser.tenant?.name || 'Şirket', // Legal name same as company name initially\r        identityType: 'TaxNumber', // Default to TaxNumber\r        identityNumber: formData.taxNumber, // Use tax number as identity number\r        taxNumber: formData.taxNumber,\r        taxOffice: formData.taxOffice,\r        tradeRegisterNumber: formData.tradeRegisterNumber,\r        email: currentUser.email || '',\r        phone: currentUser.phone || '',\r        fax: '', // Optional, leave empty\r        website: formData.website,\r        sector: formData.sector,\r        employeeCount: formData.employeeCount ? parseInt(formData.employeeCount.split('-')[0]) : undefined,\r        foundedYear: formData.foundedYear,\r        foundedDate: formData.foundedYear ? `${formData.foundedYear}-01-01` : new Date().toISOString().split('T')[0],\r        currency: formData.currency,\r        timezone: formData.timezone, // This will be a timezone string like 'Europe/Istanbul'\r        // Address should be a nested object\r        address: {\r          country: formData.country,\r          city: formData.city,\r          district: formData.district,\r          postalCode: formData.postalCode,\r          addressLine: formData.addressLine\r        }\r      };\r      // Create company via API\r      await companyService.createCompany(companyData);\r      // Show success message\r      await Swal.fire({\r        icon: 'success',\r        title: 'Başarılı!',\r        text: 'Şirket kurulumu başarıyla tamamlandı.',\r        html: `\r          <div style=\"text-align: left;\">\r            <p><strong>Şirket Adı:</strong> ${companyData.name}</p>\r            <p><strong>Vergi No:</strong> ${companyData.taxNumber}</p>\r            <p><strong>Vergi Dairesi:</strong> ${companyData.taxOffice || '-'}</p>\r            <p style=\"margin-top: 10px;\">Yönlendiriliyorsunuz...</p>\r          </div>\r        `,\r        confirmButtonText: 'Tamam',\r        confirmButtonColor: '#667eea',\r        timer: 3000,\r        timerProgressBar: true\r      });\r      // Navigate based on user role\r      const userRole = currentUser.roles?.[0];\r      const tenantId = currentUser.tenantId || currentUser.tenant?.id;\r      if (userRole === 'SystemAdmin') {\r        navigate('/master');\r      } else if (userRole === 'Admin' || userRole === 'TenantAdmin') {\r        navigate('/admin');\r      } else if (tenantId) {\r        navigate(`/app/${tenantId}/dashboard`);\r      } else {\r        navigate('/app/default');\r      }\r    } catch (error: any) {\r      // Close loading\r      Swal.close();\r      // Prepare error details\r      let errorMessage = 'Şirket kurulumu sırasında bir hata oluştu.';\r      let errorDetails = '';\r      if (error.response?.data) {\r        const data = error.response.data;\r        // Check for validation errors\r        if (data.errors) {\r          errorDetails = '<div style=\"text-align: left; margin-top: 10px;\">';\r          if (typeof data.errors === 'object') {\r            Object.keys(data.errors).forEach(field => {\r              const fieldErrors = Array.isArray(data.errors[field]) ? data.errors[field] : [data.errors[field]];\r              fieldErrors.forEach((err: string) => {\r                errorDetails += `<p style=\"margin: 5px 0;\"><strong>${field}:</strong> ${err}</p>`;\r              });\r            });\r          } else if (Array.isArray(data.errors)) {\r            data.errors.forEach((err: string) => {\r              errorDetails += `<p style=\"margin: 5px 0;\">• ${err}</p>`;\r            });\r          } else {\r            errorDetails += `<p>${data.errors}</p>`;\r          }\r          errorDetails += '</div>';\r        } else if (data.message) {\r          errorMessage = data.message;\r        } else if (data.detail) {\r          errorMessage = data.detail;\r        } else if (typeof data === 'string') {\r          errorMessage = data;\r        }\r      } else if (error.message) {\r        errorMessage = error.message;\r      }\r      // Show detailed error message\r      await Swal.fire({\r        icon: 'error',\r        title: 'Hata!',\r        text: errorMessage,\r        html: errorDetails || undefined,\r        confirmButtonText: 'Tamam',\r        confirmButtonColor: '#667eea',\r        footer: error.response?.status === 403 ? \r          '<p style=\"color: #666;\">Bu işlem için yetkiniz bulunmuyor.</p>' : \r          error.response?.status === 401 ? \r          '<p style=\"color: #666;\">Oturum süreniz dolmuş olabilir. Lütfen tekrar giriş yapın.</p>' : \r          undefined\r      });\r      // If unauthorized, redirect to login\r      if (error.response?.status === 401) {\r        setTimeout(() => {\r          navigate('/login');\r        }, 2000);\r      }\r    } finally {\r      setLoading(false);\r    }\r  };\r  const renderStepContent = () => {\r    switch (currentStep) {\r      case 0:\r        return (\r          <div className=\"step-content\">\r            <h3>Ticari ve Vergi Bilgileri</h3>\r            <p style={{ marginBottom: 24, color: '#666' }}>\r              Fatura ve resmi işlemler için gerekli bilgiler\r            </p>\r            <Row gutter={16}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"taxNumber\"\r                  label=\"Vergi Numarası\"\r                  rules={[\r                    { required: true, message: 'Vergi numarası zorunludur' },\r                    { pattern: /^\\d{10,11}$/, message: 'Vergi numarası 10 veya 11 haneli olmalıdır' }\r                  ]}\r                  tooltip=\"10 haneli vergi no veya 11 haneli TC kimlik no\"\r                >\r                  <Input size=\"large\" placeholder=\"Vergi numaranız\" maxLength={11} / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"taxOffice\"\r                  label=\"Vergi Dairesi\"\r                  rules={[{ required: true, message: 'Vergi dairesi zorunludur' }]}\r                >\r                  <Input size=\"large\" placeholder=\"Örn: Kadıköy V.D.\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={16}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"tradeRegisterNumber\"\r                  label=\"Ticaret Sicil No\"\r                  tooltip=\"Ticaret odasına kayıtlı sicil numaranız\"\r                >\r                  <Input size=\"large\" placeholder=\"Ticaret sicil numarası (opsiyonel)\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"sector\"\r                  label=\"Sektör\"\r                  rules={[{ required: true, message: 'Sektör seçimi zorunludur' }]}\r                >\r                  <Select size=\"large\" placeholder=\"Sektör seçiniz\" aria-label=\"select field\">\r                    <Option value=\"Teknoloji\">Teknoloji</Option>\r                    <Option value=\"Üretim\">Üretim</Option>\r                    <Option value=\"Hizmet\">Hizmet</Option>\r                    <Option value=\"Ticaret\">Ticaret</Option>\r                    <Option value=\"İnşaat\">İnşaat</Option>\r                    <Option value=\"Sağlık\">Sağlık</Option>\r                    <Option value=\"Eğitim\">Eğitim</Option>\r                    <Option value=\"Gıda\">Gıda</Option>\r                    <Option value=\"Tekstil\">Tekstil</Option>\r                    <Option value=\"Lojistik\">Lojistik</Option>\r                    <Option value=\"Turizm\">Turizm</Option>\r                    <Option value=\"Danışmanlık\">Danışmanlık</Option>\r                    <Option value=\"Diğer\">Diğer</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r            </Row>\r          </div>\r        );\r      case 1:\r        return (\r          <div className=\"step-content\">\r            <h3>Adres Bilgileri</h3>\r            <p style={{ marginBottom: 24, color: '#666' }}>\r              Faturalarınızda görünecek resmi adres bilgileri\r            </p>\r            <Row gutter={16}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"country\"\r                  label=\"Ülke\"\r                  rules={[{ required: true, message: 'Ülke seçimi zorunludur' }]}\r                  initialValue=\"Türkiye\"\r                >\r                  <Select size=\"large\" aria-label=\"select field\">\r                    <Option value=\"Türkiye\">Türkiye</Option>\r                    <Option value=\"KKTC\">KKTC</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"city\"\r                  label=\"İl\"\r                  rules={[{ required: true, message: 'İl seçimi zorunludur' }]}\r                >\r                  <Select \r                    size=\"large\" \r                    placeholder=\"İl seçiniz\"\r                    onChange={handleCityChange}\r                    showSearch\r                    filterOption={(input, option) = aria-label=\"select field\">\r                      (option?.label ?? '').toLowerCase().includes(input.toLowerCase())\r                    }\r                    options={getCitiesForSelect()}\r                  />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={16}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"district\"\r                  label=\"İlçe\"\r                  rules={[{ required: true, message: 'İlçe seçimi zorunludur' }]}\r                >\r                  <Select\r                    size=\"large\"\r                    placeholder=\"Önce il seçiniz\"\r                    showSearch\r                    filterOption={(input, option) = aria-label=\"select field\">\r                      (option?.label ?? '').toLowerCase().includes(input.toLowerCase())\r                    }\r                    options={districts}\r                    disabled={districts.length === 0}\r                  />\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"postalCode\"\r                  label=\"Posta Kodu\"\r                  tooltip=\"5 haneli posta kodunuz\"\r                >\r                  <Input size=\"large\" placeholder=\"34000\" maxLength={5} / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Form.Item\r              name=\"addressLine\"\r              label=\"Açık Adres\"\r              rules={[\r                { required: true, message: 'Adres zorunludur' },\r                { min: 20, message: 'Adres en az 20 karakter olmalıdır' }\r              ]}\r            >\r              <TextArea \r                size=\"large\" \r                rows={3} \r                placeholder=\"Mahalle, cadde, sokak, bina no, daire no vb. detaylı adres bilgisi\"\r                showCount\r                maxLength={250}\r              />\r            </Form.Item>\r          </div>\r        );\r      case 2:\r        return (\r          <div className=\"step-content\">\r            <h3>Ek Bilgiler</h3>\r            <p style={{ marginBottom: 24, color: '#666' }}>\r              Şirketiniz hakkında ek bilgiler (bazı alanlar opsiyonel)\r            </p>\r            <Row gutter={16}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"employeeCount\"\r                  label=\"Çalışan Sayısı\"\r                  tooltip=\"Yaklaşık çalışan sayınız\"\r                >\r                  <Select size=\"large\" placeholder=\"Çalışan sayısı seçiniz\" aria-label=\"select field\">\r                    <Option value=\"1-5\">1-5</Option>\r                    <Option value=\"6-10\">6-10</Option>\r                    <Option value=\"11-25\">11-25</Option>\r                    <Option value=\"26-50\">26-50</Option>\r                    <Option value=\"51-100\">51-100</Option>\r                    <Option value=\"101-250\">101-250</Option>\r                    <Option value=\"250+\">250+</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"foundedYear\"\r                  label=\"Kuruluş Yılı\"\r                  tooltip=\"Şirketinizin kuruluş yılı\"\r                >\r                  <InputNumber \r                    size=\"large\" \r                    min={1900} \r                    max={new Date().getFullYear()} \r                    style={{ width: '100%' }} \r                    placeholder={String(new Date().getFullYear())}\r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={16}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"website\"\r                  label=\"Web Sitesi\"\r                  rules={[\r                    { type: 'url', message: 'Geçerli bir URL giriniz' }\r                  ]}\r                >\r                  <Input size=\"large\" prefix={<GlobalOutlined / aria-label=\"input field\">} placeholder=\"https://www.example.com\" />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={16}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"currency\"\r                  label=\"Para Birimi\"\r                  rules={[{ required: true, message: 'Para birimi seçimi zorunludur' }]}\r                  initialValue=\"TRY\"\r                >\r                  <Select size=\"large\" aria-label=\"select field\">\r                    <Option value=\"TRY\">Türk Lirası (TRY)</Option>\r                    <Option value=\"USD\">ABD Doları (USD)</Option>\r                    <Option value=\"EUR\">Euro (EUR)</Option>\r                    <Option value=\"GBP\">İngiliz Sterlini (GBP)</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"timezone\"\r                  label=\"Saat Dilimi\"\r                  rules={[{ required: true, message: 'Saat dilimi seçimi zorunludur' }]}\r                  initialValue=\"Europe/Istanbul\"\r                >\r                  <Select size=\"large\" aria-label=\"select field\">\r                    <Option value=\"Europe/Istanbul\">Türkiye (UTC+3)</Option>\r                    <Option value=\"Europe/London\">Londra (UTC+0)</Option>\r                    <Option value=\"Europe/Berlin\">Berlin (UTC+1)</Option>\r                    <Option value=\"America/New_York\">New York (UTC-5)</Option>\r                    <Option value=\"UTC\">UTC</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r            </Row>\r          </div>\r        );\r      default:\r        return null;\r    }\r  };\r  return (\r    <div className=\"company-setup-container\">\r      <Card className=\"company-setup-card\">\r        <div className=\"setup-header\">\r          <h1><BankOutlined /> Şirket Bilgileri</h1>\r          <p>Şirketinizle ilgili detaylı bilgileri tamamlayarak kurulumu bitirin</p>\r        </div>\r        <Steps current={currentStep} className=\"setup-steps\">\r          {steps.map((step, index) => (\r            <Step key={index} title={step.title} icon={step.icon} />\r          ))}\r        </Steps>\r        <Form\r          form={form}\r          layout=\"vertical\"\r          className=\"setup-form\"\r          initialValues={formData}\r        >\r          {renderStepContent()}\r        </Form>\r        <div className=\"setup-actions\">\r          {currentStep > 0 && (\r            <Button size=\"large\" onClick={handlePrev}>\r              Geri\r            </Button>\r          )}\r          <Button\r            type=\"primary\"\r            size=\"large\"\r            loading={loading}\r            onClick={handleNext}\r          >\r            {currentStep === steps.length - 1 ? 'Kurulumu Tamamla' : 'İleri'}\r          </Button>\r        </div>\r      </Card>\r    </div>\r  );\r};\rexport default CompanySetup;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/company/pages/CompanySetup/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { useNavigate } from 'react-router-dom';\rimport {\r  Steps,\r  Card,\r  Button,\r  Form,\r  Input,\r  Select,\r  Row,\r  Col,\r  Checkbox,\r  InputNumber,\r  Upload,\r  Switch,\r  DatePicker,\r  message,\r  Progress,\r  Badge,\r  Divider,\r  Typography,\r  Space,\r  Alert,\r  Tooltip,\r  Tag,\r  Modal,\r  Result,\r  Timeline,\r  Statistic,\r  List,\r  Avatar,\r  Table\r} from 'antd';\rimport {\r  BankOutlined,\r  TeamOutlined,\r  AppstoreOutlined,\r  DollarOutlined,\r  SafetyOutlined,\r  ApiOutlined,\r  DatabaseOutlined,\r  CheckCircleOutlined,\r  UploadOutlined,\r  InfoCircleOutlined,\r  QuestionCircleOutlined,\r  ClockCircleOutlined,\r  LockOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  CreditCardOutlined,\r  FileTextOutlined,\r  FolderOpenOutlined,\r  UsergroupAddOutlined,\r  SettingOutlined,\r  GlobalOutlined,\r  CalendarOutlined,\r  PercentageOutlined,\r  CloudUploadOutlined,\r  SaveOutlined,\r  RocketOutlined,\r  WarningOutlined,\r  ExclamationCircleOutlined\r} from '@ant-design/icons';\rimport { useAuthStore } from '@/app/store/auth.store';\rimport { getCitiesForSelect, getDistrictsByCityForSelect } from '@/data/turkey-cities';\rimport wizardService from '@/services/wizardService';\rimport companyService from '@/services/companyService';\rimport Swal from 'sweetalert2';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Option } = Select;\rconst { TextArea } = Input;\rconst { Dragger } = Upload;\rconst { RangePicker } = DatePicker;\rinterface WizardStep {\r  key: string;\r  title: string;\r  icon: React.ReactNode;\r  description: string;\r  required: boolean;\r  category: 'required' | 'recommended' | 'optional';\r  completed: boolean;\r  skipped: boolean;\r  data?: any;\r}\rconst CompanyWizard: React.FC = () => {\r  const [currentStep, setCurrentStep] = useState(0);\r  const [loading, setLoading] = useState(false);\r  const [saving, setSaving] = useState(false);\r  const [wizardId, setWizardId] = useState<string | null>(null);\r  const [form] = Form.useForm();\r  const navigate = useNavigate();\r  const { user } = useAuthStore();\r  const [wizardData, setWizardData] = useState<any>({});\r  const [completedSteps, setCompletedSteps] = useState<Set<number>>(new Set());\r  const [skippedSteps, setSkippedSteps] = useState<Set<number>>(new Set());\r  const [districts, setDistricts] = useState<{ label: string; value: string }[]>([]);\r  const [selectedModules, setSelectedModules] = useState<string[]>([]);\r  const [autoSaveEnabled, setAutoSaveEnabled] = useState(true);\r  const [lastSaveTime, setLastSaveTime] = useState<Date | null>(null);\r  const [progress, setProgress] = useState(0);\r  const [requiredProgress, setRequiredProgress] = useState(0);\r  const steps: WizardStep[] = [\r    {\r      key: 'company',\r      title: 'Şirket Bilgileri',\r      icon: <BankOutlined />,\r      description: 'Temel şirket bilgileri ve iletişim',\r      required: true,\r      category: 'required',\r      completed: false,\r      skipped: false\r    },\r    {\r      key: 'organization',\r      title: 'Organizasyon',\r      icon: <TeamOutlined />,\r      description: 'Departmanlar, şubeler ve kullanıcılar',\r      required: false,\r      category: 'recommended',\r      completed: false,\r      skipped: false\r    },\r    {\r      key: 'modules',\r      title: 'Modüller',\r      icon: <AppstoreOutlined />,\r      description: 'Kullanılacak modül ve özellikler',\r      required: true,\r      category: 'required',\r      completed: false,\r      skipped: false\r    },\r    {\r      key: 'financial',\r      title: 'Mali Ayarlar',\r      icon: <DollarOutlined />,\r      description: 'Para birimi, vergi ve muhasebe',\r      required: true,\r      category: 'required',\r      completed: false,\r      skipped: false\r    },\r    {\r      key: 'security',\r      title: 'Güvenlik',\r      icon: <SafetyOutlined />,\r      description: 'Güvenlik politikaları ve yedekleme',\r      required: true,\r      category: 'required',\r      completed: false,\r      skipped: false\r    },\r    {\r      key: 'integration',\r      title: 'Entegrasyonlar',\r      icon: <ApiOutlined />,\r      description: 'E-posta, SMS ve ödeme sistemleri',\r      required: false,\r      category: 'optional',\r      completed: false,\r      skipped: false\r    },\r    {\r      key: 'import',\r      title: 'Veri Aktarımı',\r      icon: <DatabaseOutlined />,\r      description: 'Mevcut verilerin sisteme aktarılması',\r      required: false,\r      category: 'optional',\r      completed: false,\r      skipped: false\r    },\r    {\r      key: 'review',\r      title: 'Gözden Geçir',\r      icon: <CheckCircleOutlined />,\r      description: 'Ayarları kontrol et ve tamamla',\r      required: true,\r      category: 'required',\r      completed: false,\r      skipped: false\r    }\r  ];\r  const modules = [\r    { id: 'crm', name: 'CRM', description: 'Müşteri ilişkileri yönetimi', icon: <UsergroupAddOutlined /> },\r    { id: 'sales', name: 'Satış', description: 'Satış ve sipariş yönetimi', icon: <ShoppingCartOutlined /> },\r    { id: 'inventory', name: 'Stok', description: 'Stok takibi ve yönetimi', icon: <DatabaseOutlined /> },\r    { id: 'accounting', name: 'Muhasebe', description: 'Finansal işlemler ve raporlama', icon: <DollarOutlined /> },\r    { id: 'hr', name: 'İnsan Kaynakları', description: 'Personel yönetimi', icon: <TeamOutlined /> },\r    { id: 'project', name: 'Proje', description: 'Proje ve görev yönetimi', icon: <ProjectOutlined /> },\r    { id: 'production', name: 'Üretim', description: 'Üretim planlama ve takibi', icon: <ToolOutlined /> },\r    { id: 'service', name: 'Servis', description: 'Teknik servis yönetimi', icon: <CustomerServiceOutlined /> }\r  ];\r  // Import missing icons\r  const ShoppingCartOutlined = () => <span>🛒</span>;\r  const ProjectOutlined = () => <span>📊</span>;\r  const ToolOutlined = () => <span>🔧</span>;\r  const CustomerServiceOutlined = () => <span>🎧</span>;\r  useEffect(() => {\r    initializeWizard();\r  }, []);\r  useEffect(() => {\r    if (autoSaveEnabled && wizardId) {\r      const timer = setTimeout(() => {\r        saveProgress();\r      }, 30000); // Auto-save every 30 seconds\r      return () => clearTimeout(timer);\r    }\r  }, [wizardData, autoSaveEnabled, wizardId]);\r  const initializeWizard = async () => {\r    try {\r      // Check if wizard already exists\r      const existingWizard = await wizardService.getActiveWizard();\r      if (existingWizard) {\r        setWizardId(existingWizard.id);\r        setWizardData(existingWizard.savedConfiguration || {});\r        setCurrentStep(existingWizard.currentStep - 1);\r        setProgress(existingWizard.progressPercentage);\r        // Restore completed/skipped steps\r        if (existingWizard.completedStepsData) {\r          setCompletedSteps(new Set(existingWizard.completedStepsData));\r        }\r        if (existingWizard.skippedStepsData) {\r          setSkippedSteps(new Set(existingWizard.skippedStepsData));\r        }\r      } else {\r        // Create new wizard\r        const newWizard = await wizardService.createWizard({\r          wizardType: 'CompanySetup',\r          totalSteps: steps.length\r        });\r        setWizardId(newWizard.id);\r      }\r    } catch (error) {\r      message.error('Wizard başlatılamadı');\r    }\r  };\r  const saveProgress = async () => {\r    if (!wizardId) return;\r    setSaving(true);\r    try {\r      await wizardService.saveProgress(wizardId, {\r        currentStep: currentStep + 1,\r        savedConfiguration: wizardData,\r        completedStepsData: Array.from(completedSteps),\r        skippedStepsData: Array.from(skippedSteps)\r      });\r      setLastSaveTime(new Date());\r      message.success('İlerleme kaydedildi', 1);\r    } catch (error) {\r      message.error('İlerleme kaydedilemedi');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleNext = async () => {\r    try {\r      const values = await form.validateFields();\r      const stepKey = steps[currentStep].key;\r      // Save step data\r      setWizardData(prev => ({\r        ...prev,\r        [stepKey]: values\r      }));\r      // Mark step as completed\r      setCompletedSteps(prev => new Set(prev).add(currentStep));\r      // Update progress\r      updateProgress();\r      // Save to backend\r      if (wizardId) {\r        await wizardService.updateStep(wizardId, {\r          stepNumber: currentStep + 1,\r          stepData: values,\r          completed: true\r        });\r      }\r      if (currentStep < steps.length - 1) {\r        setCurrentStep(currentStep + 1);\r      } else {\r        handleComplete();\r      }\r    } catch (error) {\r      message.error('Lütfen gerekli alanları doldurun');\r    }\r  };\r  const handlePrev = () => {\r    setCurrentStep(currentStep - 1);\r  };\r  const handleSkip = async () => {\r    const step = steps[currentStep];\r    if (step.required) {\r      message.warning('Bu adım zorunludur ve atlanamaz');\r      return;\r    }\r    Modal.confirm({\r      title: 'Adımı Atla',\r      content: 'Bu adımı atlamak istediğinizden emin misiniz? Daha sonra geri dönebilirsiniz.',\r      onOk: async () => {\r        setSkippedSteps(prev => new Set(prev).add(currentStep));\r        if (wizardId) {\r          await wizardService.skipStep(wizardId, {\r            stepNumber: currentStep + 1,\r            reason: 'User skipped'\r          });\r        }\r        if (currentStep < steps.length - 1) {\r          setCurrentStep(currentStep + 1);\r        }\r      }\r    });\r  };\r  const handleComplete = async () => {\r    setLoading(true);\r    try {\r      // Complete wizard\r      if (wizardId) {\r        await wizardService.completeWizard(wizardId);\r      }\r      // Create company with all collected data\r      await companyService.createCompanyWithFullSetup(wizardData);\r      // Show success\r      Modal.success({\r        title: 'Kurulum Tamamlandı!',\r        content: (\r          <div>\r            <Result\r              status=\"success\"\r              title=\"Şirket kurulumunuz başarıyla tamamlandı\"\r              subTitle=\"Artık sistemi kullanmaya başlayabilirsiniz\"\r            />\r            <Progress percent={100} status=\"success\" />\r          </div>\r        ),\r        onOk: () => {\r          navigate('/admin/dashboard');\r        }\r      });\r    } catch (error) {\r      message.error('Kurulum tamamlanamadı');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const updateProgress = () => {\r    const completed = completedSteps.size;\r    const requiredCompleted = Array.from(completedSteps).filter(\r      i => steps[i].required\r    ).length;\r    const requiredTotal = steps.filter(s => s.required).length;\r    setProgress((completed / steps.length) * 100);\r    setRequiredProgress((requiredCompleted / requiredTotal) * 100);\r  };\r  const handleCityChange = (cityName: string) => {\r    form.setFieldsValue({ district: undefined });\r    setDistricts(getDistrictsByCityForSelect(cityName));\r  };\r  const renderStepContent = () => {\r    switch (currentStep) {\r      case 0: // Company Information\r        return (\r          <div className=\"wizard-step-content\">\r            <Title level={4}>\r              <BankOutlined /> Şirket Bilgileri\r            </Title>\r            <Paragraph type=\"secondary\">\r              Şirketinizin temel bilgilerini ve iletişim detaylarını girin\r            </Paragraph>\r            <Divider />\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"companyName\"\r                  label=\"Şirket Adı\"\r                  rules={[{ required: true, message: 'Şirket adı zorunludur' }]}\r                >\r                  <Input size=\"large\" prefix={<BankOutlined / aria-label=\"input field\">} placeholder=\"Örn: ABC Teknoloji A.Ş.\" />\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"legalName\"\r                  label=\"Ticari Ünvan\"\r                  rules={[{ required: true, message: 'Ticari ünvan zorunludur' }]}\r                >\r                  <Input size=\"large\" placeholder=\"Tam ticari ünvanınız\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"taxNumber\"\r                  label=\"Vergi Numarası\"\r                  rules={[\r                    { required: true, message: 'Vergi numarası zorunludur' },\r                    { pattern: /^\\d{10,11}$/, message: '10 veya 11 haneli olmalıdır' }\r                  ]}\r                >\r                  <Input size=\"large\" placeholder=\"10 veya 11 haneli\" maxLength={11} / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"taxOffice\"\r                  label=\"Vergi Dairesi\"\r                  rules={[{ required: true, message: 'Vergi dairesi zorunludur' }]}\r                >\r                  <Input size=\"large\" placeholder=\"Örn: Kadıköy V.D.\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"tradeRegisterNumber\"\r                  label=\"Ticaret Sicil No\"\r                  tooltip=\"Ticaret odasına kayıtlı sicil numaranız\"\r                >\r                  <Input size=\"large\" placeholder=\"Opsiyonel\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"sector\"\r                  label=\"Sektör\"\r                  rules={[{ required: true, message: 'Sektör seçimi zorunludur' }]}\r                >\r                  <Select size=\"large\" placeholder=\"Sektör seçiniz\" aria-label=\"select field\">\r                    <Option value=\"Teknoloji\">Teknoloji</Option>\r                    <Option value=\"Üretim\">Üretim</Option>\r                    <Option value=\"Hizmet\">Hizmet</Option>\r                    <Option value=\"Ticaret\">Ticaret</Option>\r                    <Option value=\"İnşaat\">İnşaat</Option>\r                    <Option value=\"Sağlık\">Sağlık</Option>\r                    <Option value=\"Eğitim\">Eğitim</Option>\r                    <Option value=\"Gıda\">Gıda</Option>\r                    <Option value=\"Tekstil\">Tekstil</Option>\r                    <Option value=\"Lojistik\">Lojistik</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider orientation=\"left\">İletişim Bilgileri</Divider>\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"email\"\r                  label=\"E-posta\"\r                  rules={[\r                    { required: true, message: 'E-posta zorunludur' },\r                    { type: 'email', message: 'Geçerli bir e-posta adresi girin' }\r                  ]}\r                >\r                  <Input size=\"large\" prefix={<MailOutlined / aria-label=\"input field\">} placeholder=\"info@sirket.com\" />\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"phone\"\r                  label=\"Telefon\"\r                  rules={[{ required: true, message: 'Telefon zorunludur' }]}\r                >\r                  <Input size=\"large\" prefix={<PhoneOutlined / aria-label=\"input field\">} placeholder=\"0212 123 45 67\" />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"website\"\r                  label=\"Web Sitesi\"\r                  rules={[{ type: 'url', message: 'Geçerli bir URL girin' }]}\r                >\r                  <Input size=\"large\" prefix={<GlobalOutlined / aria-label=\"input field\">} placeholder=\"https://www.sirket.com\" />\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"foundedYear\"\r                  label=\"Kuruluş Yılı\"\r                >\r                  <InputNumber \r                    size=\"large\" \r                    min={1900} \r                    max={new Date().getFullYear()} \r                    style={{ width: '100%' }}\r                    placeholder=\"2020\"\r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider orientation=\"left\">Logo</Divider>\r            <Form.Item\r              name=\"logo\"\r              label=\"Şirket Logosu\"\r              valuePropName=\"fileList\"\r              getValueFromEvent={(e) => e?.fileList}\r            >\r              <Dragger\r                name=\"logo\"\r                multiple={false}\r                maxCount={1}\r                accept=\"image/*\"\r                beforeUpload={() => false}\r              >\r                <p className=\"ant-upload-drag-icon\">\r                  <UploadOutlined />\r                </p>\r                <p className=\"ant-upload-text\">Logo yüklemek için tıklayın veya sürükleyin</p>\r                <p className=\"ant-upload-hint\">PNG, JPG veya SVG formatında, maksimum 2MB</p>\r              </Dragger>\r            </Form.Item>\r          </div>\r        );\r      case 1: // Organization\r        return (\r          <div className=\"wizard-step-content\">\r            <Title level={4}>\r              <TeamOutlined /> Organizasyon Yapısı\r            </Title>\r            <Paragraph type=\"secondary\">\r              Departmanlar, şubeler ve kullanıcı rolleri tanımlayın\r            </Paragraph>\r            <Divider />\r            <Alert\r              message=\"İpucu\"\r              description=\"Bu adımı atlayıp daha sonra detaylı olarak yapılandırabilirsiniz.\"\r              type=\"info\"\r              showIcon\r              style={{ marginBottom: 24 }}\r            />\r            <Divider orientation=\"left\">Departmanlar</Divider>\r            <Form.Item\r              name=\"departments\"\r              label=\"Departman Listesi\"\r            >\r              <Select\r                mode=\"tags\"\r                size=\"large\"\r                placeholder=\"Departman ekleyin (Enter tuşu ile)\"\r                style={{ width: '100%' }}\r               aria-label=\"select field\">\r                <Option value=\"Yönetim\">Yönetim</Option>\r                <Option value=\"Satış\">Satış</Option>\r                <Option value=\"Pazarlama\">Pazarlama</Option>\r                <Option value=\"Muhasebe\">Muhasebe</Option>\r                <Option value=\"İnsan Kaynakları\">İnsan Kaynakları</Option>\r                <Option value=\"Bilgi İşlem\">Bilgi İşlem</Option>\r                <Option value=\"Üretim\">Üretim</Option>\r                <Option value=\"Ar-Ge\">Ar-Ge</Option>\r              </Select>\r            </Form.Item>\r            <Divider orientation=\"left\">Şubeler</Divider>\r            <Form.Item\r              name=\"branches\"\r              label=\"Şube/Lokasyon Listesi\"\r            >\r              <Select\r                mode=\"tags\"\r                size=\"large\"\r                placeholder=\"Şube ekleyin (Enter tuşu ile)\"\r                style={{ width: '100%' }}\r               aria-label=\"select field\">\r                <Option value=\"Merkez Ofis\">Merkez Ofis</Option>\r                <Option value=\"Fabrika\">Fabrika</Option>\r                <Option value=\"Depo\">Depo</Option>\r                <Option value=\"Şube\">Şube</Option>\r              </Select>\r            </Form.Item>\r            <Divider orientation=\"left\">Kullanıcı Rolleri</Divider>\r            <Form.Item\r              name=\"userRoles\"\r              label=\"Tanımlanacak Roller\"\r            >\r              <Checkbox.Group style={{ width: '100%' }}>\r                <Row gutter={[16, 16]}>\r                  <Col span={8}>\r                    <Checkbox value=\"admin\">Yönetici</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"manager\">Müdür</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"supervisor\">Süpervizör</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"accountant\">Muhasebeci</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"sales\">Satış Temsilcisi</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"support\">Destek Personeli</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"warehouse\">Depo Görevlisi</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"production\">Üretim Personeli</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"hr\">İK Uzmanı</Checkbox>\r                  </Col>\r                </Row>\r              </Checkbox.Group>\r            </Form.Item>\r            <Divider orientation=\"left\">Çalışan Sayısı</Divider>\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"employeeCount\"\r                  label=\"Toplam Çalışan Sayısı\"\r                >\r                  <Select size=\"large\" placeholder=\"Seçiniz\" aria-label=\"select field\">\r                    <Option value=\"1-5\">1-5</Option>\r                    <Option value=\"6-10\">6-10</Option>\r                    <Option value=\"11-25\">11-25</Option>\r                    <Option value=\"26-50\">26-50</Option>\r                    <Option value=\"51-100\">51-100</Option>\r                    <Option value=\"101-250\">101-250</Option>\r                    <Option value=\"250+\">250+</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"expectedUsers\"\r                  label=\"Sistemi Kullanacak Kişi Sayısı\"\r                >\r                  <InputNumber\r                    size=\"large\"\r                    min={1}\r                    style={{ width: '100%' }}\r                    placeholder=\"Örn: 10\"\r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r          </div>\r        );\r      case 2: // Modules\r        return (\r          <div className=\"wizard-step-content\">\r            <Title level={4}>\r              <AppstoreOutlined /> Modül Seçimi\r            </Title>\r            <Paragraph type=\"secondary\">\r              İşletmenizde kullanmak istediğiniz modülleri seçin\r            </Paragraph>\r            <Divider />\r            <Alert\r              message=\"Önemli\"\r              description=\"Seçtiğiniz modüller aylık ücretinizi etkileyebilir. Daha sonra modül ekleyebilir veya kaldırabilirsiniz.\"\r              type=\"warning\"\r              showIcon\r              style={{ marginBottom: 24 }}\r            />\r            <Form.Item\r              name=\"selectedModules\"\r              rules={[{ required: true, message: 'En az bir modül seçmelisiniz' }]}\r            >\r              <Checkbox.Group\r                style={{ width: '100%' }}\r                onChange={setSelectedModules}\r              >\r                <Row gutter={[16, 16]}>\r                  {modules.map(module => (\r                    <Col span={12} key={module.id}>\r                      <Card \r                        hoverable\r                        className=\"module-card\"\r                        style={{ height: '100%' }}\r                      >\r                        <Space direction=\"vertical\" style={{ width: '100%' }}>\r                          <Checkbox value={module.id}>\r                            <Space>\r                              {module.icon}\r                              <Text strong>{module.name}</Text>\r                            </Space>\r                          </Checkbox>\r                          <Text type=\"secondary\" style={{ marginLeft: 24 }}>\r                            {module.description}\r                          </Text>\r                        </Space>\r                      </Card>\r                    </Col>\r                  ))}\r                </Row>\r              </Checkbox.Group>\r            </Form.Item>\r            <Divider orientation=\"left\">Modül Konfigürasyonu</Divider>\r            <Form.Item\r              name=\"moduleSettings\"\r              label=\"Varsayılan Ayarları Kullan\"\r              valuePropName=\"checked\"\r            >\r              <Switch defaultChecked />\r            </Form.Item>\r            <Form.Item\r              name=\"customModuleSettings\"\r              label=\"Özel Notlar\"\r            >\r              <TextArea\r                rows={4}\r                placeholder=\"Modüllerle ilgili özel istekleriniz varsa belirtin...\"\r              />\r            </Form.Item>\r          </div>\r        );\r      case 3: // Financial Settings\r        return (\r          <div className=\"wizard-step-content\">\r            <Title level={4}>\r              <DollarOutlined /> Mali Ayarlar\r            </Title>\r            <Paragraph type=\"secondary\">\r              Para birimi, vergi ve muhasebe ayarlarını yapılandırın\r            </Paragraph>\r            <Divider />\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"currency\"\r                  label=\"Ana Para Birimi\"\r                  rules={[{ required: true, message: 'Para birimi seçimi zorunludur' }]}\r                  initialValue=\"TRY\"\r                >\r                  <Select size=\"large\" aria-label=\"select field\">\r                    <Option value=\"TRY\">Türk Lirası (₺)</Option>\r                    <Option value=\"USD\">ABD Doları ($)</Option>\r                    <Option value=\"EUR\">Euro (€)</Option>\r                    <Option value=\"GBP\">İngiliz Sterlini (£)</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"multiCurrency\"\r                  label=\"Çoklu Para Birimi\"\r                  valuePropName=\"checked\"\r                >\r                  <Switch /> <Text type=\"secondary\">Birden fazla para birimi kullan</Text>\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider orientation=\"left\">Vergi Ayarları</Divider>\r            <Row gutter={24}>\r              <Col span={8}>\r                <Form.Item\r                  name=\"defaultKDV\"\r                  label=\"Varsayılan KDV Oranı (%)\"\r                  rules={[{ required: true, message: 'KDV oranı zorunludur' }]}\r                  initialValue={20}\r                >\r                  <InputNumber\r                    size=\"large\"\r                    min={0}\r                    max={100}\r                    style={{ width: '100%' }}\r                    formatter={value = aria-label=\"input field\"> `${value}%`}\r                    parser={value => value!.replace('%', '')}\r                  />\r                </Form.Item>\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"withholdingTax\"\r                  label=\"Stopaj Oranı (%)\"\r                >\r                  <InputNumber\r                    size=\"large\"\r                    min={0}\r                    max={100}\r                    style={{ width: '100%' }}\r                    formatter={value = aria-label=\"input field\"> `${value}%`}\r                    parser={value => value!.replace('%', '')}\r                  />\r                </Form.Item>\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"specialTax\"\r                  label=\"ÖTV Kullan\"\r                  valuePropName=\"checked\"\r                >\r                  <Switch />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider orientation=\"left\">Mali Yıl</Divider>\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"fiscalYearStart\"\r                  label=\"Mali Yıl Başlangıcı\"\r                  rules={[{ required: true, message: 'Mali yıl başlangıcı zorunludur' }]}\r                >\r                  <DatePicker\r                    size=\"large\"\r                    style={{ width: '100%' }}\r                    format=\"DD/MM\"\r                    placeholder=\"01/01\"\r                  />\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"fiscalYearEnd\"\r                  label=\"Mali Yıl Bitişi\"\r                  rules={[{ required: true, message: 'Mali yıl bitişi zorunludur' }]}\r                >\r                  <DatePicker\r                    size=\"large\"\r                    style={{ width: '100%' }}\r                    format=\"DD/MM\"\r                    placeholder=\"31/12\"\r                  />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider orientation=\"left\">Hesap Planı</Divider>\r            <Form.Item\r              name=\"chartOfAccounts\"\r              label=\"Hesap Planı Şablonu\"\r              rules={[{ required: true, message: 'Hesap planı seçimi zorunludur' }]}\r            >\r              <Select size=\"large\" placeholder=\"Seçiniz\" aria-label=\"select field\">\r                <Option value=\"tekduzen\">Tek Düzen Hesap Planı</Option>\r                <Option value=\"custom\">Özel Hesap Planı</Option>\r                <Option value=\"import\">Excel'den İçe Aktar</Option>\r              </Select>\r            </Form.Item>\r            <Form.Item\r              name=\"accountingMethod\"\r              label=\"Muhasebe Yöntemi\"\r              rules={[{ required: true, message: 'Muhasebe yöntemi seçimi zorunludur' }]}\r            >\r              <Select size=\"large\" placeholder=\"Seçiniz\" aria-label=\"select field\">\r                <Option value=\"bilanço\">Bilanço Esası</Option>\r                <Option value=\"işletme\">İşletme Hesabı</Option>\r                <Option value=\"basit\">Basit Usul</Option>\r              </Select>\r            </Form.Item>\r          </div>\r        );\r      case 4: // Security\r        return (\r          <div className=\"wizard-step-content\">\r            <Title level={4}>\r              <SafetyOutlined /> Güvenlik ve Uyumluluk\r            </Title>\r            <Paragraph type=\"secondary\">\r              Güvenlik politikalarını ve yedekleme ayarlarını yapılandırın\r            </Paragraph>\r            <Divider />\r            <Alert\r              message=\"Güvenlik Önerisi\"\r              description=\"Verilerinizin güvenliği için tüm güvenlik özelliklerini etkinleştirmenizi öneriyoruz.\"\r              type=\"info\"\r              showIcon\r              style={{ marginBottom: 24 }}\r            />\r            <Divider orientation=\"left\">Şifre Politikası</Divider>\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"minPasswordLength\"\r                  label=\"Minimum Şifre Uzunluğu\"\r                  rules={[{ required: true }]}\r                  initialValue={8}\r                >\r                  <InputNumber\r                    size=\"large\"\r                    min={6}\r                    max={32}\r                    style={{ width: '100%' }}\r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"passwordExpiry\"\r                  label=\"Şifre Yenileme Süresi (gün)\"\r                  initialValue={90}\r                >\r                  <InputNumber\r                    size=\"large\"\r                    min={0}\r                    max={365}\r                    style={{ width: '100%' }}\r                    placeholder=\"0 = Süresiz\"\r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Form.Item name=\"passwordRequirements\">\r              <Checkbox.Group>\r                <Row gutter={[16, 8]}>\r                  <Col span={12}>\r                    <Checkbox value=\"uppercase\">Büyük harf zorunlu</Checkbox>\r                  </Col>\r                  <Col span={12}>\r                    <Checkbox value=\"lowercase\">Küçük harf zorunlu</Checkbox>\r                  </Col>\r                  <Col span={12}>\r                    <Checkbox value=\"numbers\">Rakam zorunlu</Checkbox>\r                  </Col>\r                  <Col span={12}>\r                    <Checkbox value=\"special\">Özel karakter zorunlu</Checkbox>\r                  </Col>\r                </Row>\r              </Checkbox.Group>\r            </Form.Item>\r            <Divider orientation=\"left\">İki Faktörlü Doğrulama</Divider>\r            <Form.Item\r              name=\"twoFactorAuth\"\r              label=\"İki Faktörlü Doğrulama\"\r              valuePropName=\"checked\"\r            >\r              <Switch defaultChecked /> <Text type=\"secondary\">Tüm kullanıcılar için zorunlu</Text>\r            </Form.Item>\r            <Form.Item\r              name=\"twoFactorMethods\"\r              label=\"Doğrulama Yöntemleri\"\r            >\r              <Checkbox.Group>\r                <Row gutter={[16, 8]}>\r                  <Col span={8}>\r                    <Checkbox value=\"sms\">SMS</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"email\">E-posta</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"app\">Authenticator App</Checkbox>\r                  </Col>\r                </Row>\r              </Checkbox.Group>\r            </Form.Item>\r            <Divider orientation=\"left\">Yedekleme</Divider>\r            <Form.Item\r              name=\"backupEnabled\"\r              label=\"Otomatik Yedekleme\"\r              valuePropName=\"checked\"\r              rules={[{ required: true }]}\r            >\r              <Switch defaultChecked /> <Text type=\"secondary\">Verileriniz düzenli olarak yedeklenir</Text>\r            </Form.Item>\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"backupFrequency\"\r                  label=\"Yedekleme Sıklığı\"\r                >\r                  <Select size=\"large\" defaultValue=\"daily\" aria-label=\"select field\">\r                    <Option value=\"realtime\">Gerçek Zamanlı</Option>\r                    <Option value=\"hourly\">Saatlik</Option>\r                    <Option value=\"daily\">Günlük</Option>\r                    <Option value=\"weekly\">Haftalık</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"backupRetention\"\r                  label=\"Saklama Süresi\"\r                >\r                  <Select size=\"large\" defaultValue=\"30\" aria-label=\"select field\">\r                    <Option value=\"7\">7 Gün</Option>\r                    <Option value=\"30\">30 Gün</Option>\r                    <Option value=\"90\">90 Gün</Option>\r                    <Option value=\"365\">1 Yıl</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider orientation=\"left\">Uyumluluk</Divider>\r            <Form.Item name=\"compliance\">\r              <Checkbox.Group>\r                <Row gutter={[16, 8]}>\r                  <Col span={12}>\r                    <Checkbox value=\"kvkk\">KVKK Uyumlu</Checkbox>\r                  </Col>\r                  <Col span={12}>\r                    <Checkbox value=\"gdpr\">GDPR Uyumlu</Checkbox>\r                  </Col>\r                  <Col span={12}>\r                    <Checkbox value=\"iso27001\">ISO 27001</Checkbox>\r                  </Col>\r                  <Col span={12}>\r                    <Checkbox value=\"iso9001\">ISO 9001</Checkbox>\r                  </Col>\r                </Row>\r              </Checkbox.Group>\r            </Form.Item>\r          </div>\r        );\r      case 5: // Integration\r        return (\r          <div className=\"wizard-step-content\">\r            <Title level={4}>\r              <ApiOutlined /> Entegrasyonlar\r            </Title>\r            <Paragraph type=\"secondary\">\r              Dış sistemlerle entegrasyon ayarlarını yapılandırın\r            </Paragraph>\r            <Divider />\r            <Divider orientation=\"left\">E-posta Entegrasyonu</Divider>\r            <Form.Item\r              name=\"emailIntegration\"\r              label=\"E-posta Servisi\"\r            >\r              <Select size=\"large\" placeholder=\"Seçiniz\" aria-label=\"select field\">\r                <Option value=\"smtp\">SMTP Sunucu</Option>\r                <Option value=\"sendgrid\">SendGrid</Option>\r                <Option value=\"mailgun\">Mailgun</Option>\r                <Option value=\"ses\">Amazon SES</Option>\r              </Select>\r            </Form.Item>\r            <Divider orientation=\"left\">SMS Entegrasyonu</Divider>\r            <Form.Item\r              name=\"smsIntegration\"\r              label=\"SMS Servisi\"\r            >\r              <Select size=\"large\" placeholder=\"Seçiniz\" aria-label=\"select field\">\r                <Option value=\"netgsm\">NetGSM</Option>\r                <Option value=\"iletimerkezi\">İleti Merkezi</Option>\r                <Option value=\"twilio\">Twilio</Option>\r                <Option value=\"mutlucell\">Mutlucell</Option>\r              </Select>\r            </Form.Item>\r            <Divider orientation=\"left\">Ödeme Sistemleri</Divider>\r            <Form.Item name=\"paymentGateways\">\r              <Checkbox.Group>\r                <Row gutter={[16, 16]}>\r                  <Col span={8}>\r                    <Checkbox value=\"iyzico\">Iyzico</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"paytr\">PayTR</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"param\">Param</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"payu\">PayU</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"stripe\">Stripe</Checkbox>\r                  </Col>\r                  <Col span={8}>\r                    <Checkbox value=\"paypal\">PayPal</Checkbox>\r                  </Col>\r                </Row>\r              </Checkbox.Group>\r            </Form.Item>\r            <Divider orientation=\"left\">E-Fatura / E-Arşiv</Divider>\r            <Form.Item\r              name=\"einvoiceProvider\"\r              label=\"E-Fatura Entegratörü\"\r            >\r              <Select size=\"large\" placeholder=\"Seçiniz\" aria-label=\"select field\">\r                <Option value=\"logo\">Logo</Option>\r                <Option value=\"mikro\">Mikro</Option>\r                <Option value=\"netsis\">Netsis</Option>\r                <Option value=\"foriba\">Foriba</Option>\r                <Option value=\"edmbilisim\">EDM Bilişim</Option>\r              </Select>\r            </Form.Item>\r            <Divider orientation=\"left\">Diğer Entegrasyonlar</Divider>\r            <Form.Item name=\"otherIntegrations\">\r              <Checkbox.Group>\r                <Row gutter={[16, 16]}>\r                  <Col span={12}>\r                    <Checkbox value=\"excel\">Excel İçe/Dışa Aktarım</Checkbox>\r                  </Col>\r                  <Col span={12}>\r                    <Checkbox value=\"api\">REST API</Checkbox>\r                  </Col>\r                  <Col span={12}>\r                    <Checkbox value=\"webhook\">Webhook</Checkbox>\r                  </Col>\r                  <Col span={12}>\r                    <Checkbox value=\"ldap\">LDAP/Active Directory</Checkbox>\r                  </Col>\r                </Row>\r              </Checkbox.Group>\r            </Form.Item>\r          </div>\r        );\r      case 6: // Import Data\r        return (\r          <div className=\"wizard-step-content\">\r            <Title level={4}>\r              <DatabaseOutlined /> Veri Aktarımı\r            </Title>\r            <Paragraph type=\"secondary\">\r              Mevcut verilerinizi sisteme aktarın\r            </Paragraph>\r            <Divider />\r            <Alert\r              message=\"Bilgi\"\r              description=\"Veri aktarımını şimdi veya daha sonra yapabilirsiniz. Excel şablonlarımızı kullanarak toplu veri aktarımı yapabilirsiniz.\"\r              type=\"info\"\r              showIcon\r              style={{ marginBottom: 24 }}\r            />\r            <Row gutter={[16, 24]}>\r              <Col span={12}>\r                <Card>\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <Title level={5}>\r                      <UsergroupAddOutlined /> Müşteriler\r                    </Title>\r                    <Form.Item name=\"importCustomers\" valuePropName=\"checked\">\r                      <Checkbox>Müşteri listesini içe aktar</Checkbox>\r                    </Form.Item>\r                    <Button icon={<DownloadOutlined />} block aria-label=\"download outlined\">\r                      Excel Şablonunu İndir\r                    </Button>\r                    <Upload beforeUpload={() => false}>\r                      <Button icon={<UploadOutlined />} block aria-label=\"upload outlined\">\r                        Excel Dosyası Yükle\r                      </Button>\r                    </Upload>\r                  </Space>\r                </Card>\r              </Col>\r              <Col span={12}>\r                <Card>\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <Title level={5}>\r                      <ShoppingCartOutlined /> Tedarikçiler\r                    </Title>\r                    <Form.Item name=\"importVendors\" valuePropName=\"checked\">\r                      <Checkbox>Tedarikçi listesini içe aktar</Checkbox>\r                    </Form.Item>\r                    <Button icon={<DownloadOutlined />} block aria-label=\"download outlined\">\r                      Excel Şablonunu İndir\r                    </Button>\r                    <Upload beforeUpload={() => false}>\r                      <Button icon={<UploadOutlined />} block aria-label=\"upload outlined\">\r                        Excel Dosyası Yükle\r                      </Button>\r                    </Upload>\r                  </Space>\r                </Card>\r              </Col>\r              <Col span={12}>\r                <Card>\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <Title level={5}>\r                      <DatabaseOutlined /> Ürünler/Hizmetler\r                    </Title>\r                    <Form.Item name=\"importProducts\" valuePropName=\"checked\">\r                      <Checkbox>Ürün/Hizmet listesini içe aktar</Checkbox>\r                    </Form.Item>\r                    <Button icon={<DownloadOutlined />} block aria-label=\"download outlined\">\r                      Excel Şablonunu İndir\r                    </Button>\r                    <Upload beforeUpload={() => false}>\r                      <Button icon={<UploadOutlined />} block aria-label=\"upload outlined\">\r                        Excel Dosyası Yükle\r                      </Button>\r                    </Upload>\r                  </Space>\r                </Card>\r              </Col>\r              <Col span={12}>\r                <Card>\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <Title level={5}>\r                      <DollarOutlined /> Hesap Planı\r                    </Title>\r                    <Form.Item name=\"importAccounts\" valuePropName=\"checked\">\r                      <Checkbox>Hesap planını içe aktar</Checkbox>\r                    </Form.Item>\r                    <Button icon={<DownloadOutlined />} block aria-label=\"download outlined\">\r                      Excel Şablonunu İndir\r                    </Button>\r                    <Upload beforeUpload={() => false}>\r                      <Button icon={<UploadOutlined />} block aria-label=\"upload outlined\">\r                        Excel Dosyası Yükle\r                      </Button>\r                    </Upload>\r                  </Space>\r                </Card>\r              </Col>\r            </Row>\r            <Divider />\r            <Alert\r              message=\"Veri Aktarım Durumu\"\r              description={\r                <Space direction=\"vertical\">\r                  <Text>Müşteriler: 0 kayıt</Text>\r                  <Text>Tedarikçiler: 0 kayıt</Text>\r                  <Text>Ürünler: 0 kayıt</Text>\r                  <Text>Hesaplar: 0 kayıt</Text>\r                </Space>\r              }\r              type=\"warning\"\r            />\r          </div>\r        );\r      case 7: // Review & Complete\r        return (\r          <div className=\"wizard-step-content\">\r            <Title level={4}>\r              <CheckCircleOutlined /> Gözden Geçir ve Tamamla\r            </Title>\r            <Paragraph type=\"secondary\">\r              Kurulum ayarlarınızı gözden geçirin ve onaylayın\r            </Paragraph>\r            <Divider />\r            <Row gutter={[24, 24]}>\r              <Col span={8}>\r                <Card>\r                  <Statistic\r                    title=\"Tamamlanan Adımlar\"\r                    value={completedSteps.size}\r                    suffix={`/ ${steps.length}`}\r                    prefix={<CheckCircleOutlined />}\r                  />\r                </Card>\r              </Col>\r              <Col span={8}>\r                <Card>\r                  <Statistic\r                    title=\"Zorunlu Adımlar\"\r                    value={requiredProgress}\r                    suffix=\"%\"\r                    prefix={<SafetyOutlined />}\r                  />\r                </Card>\r              </Col>\r              <Col span={8}>\r                <Card>\r                  <Statistic\r                    title=\"Genel İlerleme\"\r                    value={progress}\r                    suffix=\"%\"\r                    prefix={<RocketOutlined />}\r                  />\r                </Card>\r              </Col>\r            </Row>\r            <Divider orientation=\"left\">Kurulum Özeti</Divider>\r            <Timeline>\r              {steps.map((step, index) => (\r                <Timeline.Item\r                  key={step.key}\r                  color={\r                    completedSteps.has(index) ? 'green' :\r                    skippedSteps.has(index) ? 'orange' :\r                    'gray'\r                  }\r                  dot={\r                    completedSteps.has(index) ? <CheckCircleOutlined /> :\r                    skippedSteps.has(index) ? <ExclamationCircleOutlined /> :\r                    <ClockCircleOutlined />\r                  }\r                >\r                  <Space>\r                    <Text strong>{step.title}</Text>\r                    {completedSteps.has(index) && <Tag color=\"success\">Tamamlandı</Tag>}\r                    {skippedSteps.has(index) && <Tag color=\"warning\">Atlandı</Tag>}\r                    {step.required && <Tag color=\"error\">Zorunlu</Tag>}\r                  </Space>\r                </Timeline.Item>\r              ))}\r            </Timeline>\r            <Divider orientation=\"left\">Sonraki Adımlar</Divider>\r            <Alert\r              message=\"Kurulum Tamamlanıyor\"\r              description={\r                <div>\r                  <Paragraph>\r                    Kurulumu tamamladıktan sonra aşağıdaki işlemleri yapabilirsiniz:\r                  </Paragraph>\r                  <ul>\r                    <li>Kullanıcıları davet edin ve yetkilendirin</li>\r                    <li>Ürün ve hizmetlerinizi tanımlayın</li>\r                    <li>Müşteri ve tedarikçi bilgilerini girin</li>\r                    <li>İlk faturanızı oluşturun</li>\r                    <li>Raporları ve analizleri inceleyin</li>\r                  </ul>\r                </div>\r              }\r              type=\"success\"\r              showIcon\r            />\r            <Divider />\r            <Form.Item\r              name=\"acceptTerms\"\r              valuePropName=\"checked\"\r              rules={[\r                {\r                  validator: (_, value) =>\r                    value ? Promise.resolve() : Promise.reject('Şartları kabul etmelisiniz'),\r                },\r              ]}\r            >\r              <Checkbox>\r                <Space>\r                  <Text>Kullanım şartlarını ve gizlilik politikasını okudum, kabul ediyorum</Text>\r                  <Tooltip title=\"Kullanım şartlarını görüntüle\">\r                    <QuestionCircleOutlined />\r                  </Tooltip>\r                </Space>\r              </Checkbox>\r            </Form.Item>\r          </div>\r        );\r      default:\r        return null;\r    }\r  };\r  // Add missing import for DownloadOutlined\r  const DownloadOutlined = () => <span>⬇️</span>;\r  const canSkipStep = () => {\r    return !steps[currentStep].required;\r  };\r  const getStepStatus = (index: number) => {\r    if (completedSteps.has(index)) return 'finish';\r    if (skippedSteps.has(index)) return 'error';\r    if (index === currentStep) return 'process';\r    return 'wait';\r  };\r  return (\r    <div className=\"company-wizard-container\">\r      <Card className=\"wizard-card\">\r        <div className=\"wizard-header\">\r          <Row justify=\"space-between\" align=\"middle\">\r            <Col>\r              <Title level={2}>\r                <RocketOutlined /> Şirket Kurulum Sihirbazı\r              </Title>\r              <Text type=\"secondary\">\r                Sistemi kullanmaya başlamak için gerekli ayarları yapın\r              </Text>\r            </Col>\r            <Col>\r              <Space>\r                {lastSaveTime && (\r                  <Text type=\"secondary\">\r                    <SaveOutlined /> Son kayıt: {lastSaveTime.toLocaleTimeString()}\r                  </Text>\r                )}\r                <Switch\r                  checked={autoSaveEnabled}\r                  onChange={setAutoSaveEnabled}\r                  checkedChildren=\"Otomatik Kayıt\"\r                  unCheckedChildren=\"Manuel\"\r                />\r              </Space>\r            </Col>\r          </Row>\r        </div>\r        <Divider />\r        <Row gutter={24}>\r          <Col span={6}>\r            <Steps\r              current={currentStep}\r              direction=\"vertical\"\r              size=\"small\"\r              onChange={setCurrentStep}\r            >\r              {steps.map((step, index) => (\r                <Steps.Step\r                  key={step.key}\r                  title={step.title}\r                  description={step.description}\r                  icon={step.icon}\r                  status={getStepStatus(index)}\r                />\r              ))}\r            </Steps>\r            <Divider />\r            <Card size=\"small\">\r              <Title level={5}>İlerleme Durumu</Title>\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div>\r                  <Text type=\"secondary\">Genel İlerleme</Text>\r                  <Progress percent={Math.round(progress)} size=\"small\" />\r                </div>\r                <div>\r                  <Text type=\"secondary\">Zorunlu Adımlar</Text>\r                  <Progress \r                    percent={Math.round(requiredProgress)} \r                    size=\"small\"\r                    status={requiredProgress === 100 ? 'success' : 'active'}\r                  />\r                </div>\r              </Space>\r            </Card>\r          </Col>\r          <Col span={18}>\r            <Form\r              form={form}\r              layout=\"vertical\"\r              initialValues={wizardData[steps[currentStep]?.key] || {}}\r            >\r              {renderStepContent()}\r            </Form>\r            <Divider />\r            <Row justify=\"space-between\">\r              <Col>\r                {currentStep > 0 && (\r                  <Button size=\"large\" onClick={handlePrev}>\r                    Geri\r                  </Button>\r                )}\r              </Col>\r              <Col>\r                <Space>\r                  {canSkipStep() && currentStep < steps.length - 1 && (\r                    <Button size=\"large\" onClick={handleSkip}>\r                      Atla\r                    </Button>\r                  )}\r                  <Button size=\"large\" onClick={saveProgress} loading={saving}>\r                    Kaydet\r                  </Button>\r                  <Button\r                    type=\"primary\"\r                    size=\"large\"\r                    onClick={handleNext}\r                    loading={loading}\r                  >\r                    {currentStep === steps.length - 1 ? 'Kurulumu Tamamla' : 'İleri'}\r                  </Button>\r                </Space>\r              </Col>\r            </Row>\r          </Col>\r        </Row>\r      </Card>\r    </div>\r  );\r};\rexport default CompanyWizard;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/company/pages/CompanyWizard/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { Card, Table, Button, Space, Tag, Input, Select, DatePicker, message, Drawer, Form, TimePicker, Row, Col, Calendar, Badge, Avatar, Timeline, Tabs, List } from 'antd';\rimport { PlusOutlined, SearchOutlined, PhoneOutlined, MailOutlined, TeamOutlined, CalendarOutlined, ClockCircleOutlined, UserOutlined, CheckCircleOutlined, VideoCameraOutlined, FileTextOutlined } from '@ant-design/icons';\rimport type { ColumnsType } from 'antd/es/table';\rimport type { BadgeProps } from 'antd';\rimport dayjs from 'dayjs';\rinterface Activity {\r  id: number;\r  type: 'call' | 'email' | 'meeting' | 'task' | 'note';\r  subject: string;\r  description: string;\r  status: 'planned' | 'completed' | 'cancelled';\r  priority: 'low' | 'medium' | 'high';\r  startDate: string;\r  startTime: string;\r  duration: number;\r  relatedTo: string;\r  relatedType: 'lead' | 'customer' | 'opportunity' | 'deal';\r  assignedTo: string;\r  createdBy: string;\r  createdDate: string;\r  completedDate?: string;\r  outcome?: string;\r}\rconst mockActivities: Activity[] = [\r  {\r    id: 1,\r    type: 'call',\r    subject: 'Ürün Demo Görüşmesi',\r    description: 'CRM modülü demo sunumu yapılacak',\r    status: 'planned',\r    priority: 'high',\r    startDate: '2024-01-29',\r    startTime: '14:00',\r    duration: 60,\r    relatedTo: 'ABC Teknoloji',\r    relatedType: 'customer',\r    assignedTo: 'Ahmet Yılmaz',\r    createdBy: 'Admin',\r    createdDate: '2024-01-25',\r  },\r  {\r    id: 2,\r    type: 'email',\r    subject: 'Teklif Gönderimi',\r    description: 'Revize edilmiş teklif gönderilecek',\r    status: 'completed',\r    priority: 'medium',\r    startDate: '2024-01-28',\r    startTime: '10:00',\r    duration: 30,\r    relatedTo: 'XYZ Holding',\r    relatedType: 'opportunity',\r    assignedTo: 'Mehmet Demir',\r    createdBy: 'Admin',\r    createdDate: '2024-01-24',\r    completedDate: '2024-01-28',\r    outcome: 'Teklif başarıyla gönderildi',\r  },\r  {\r    id: 3,\r    type: 'meeting',\r    subject: 'Sözleşme Müzakeresi',\r    description: 'Final sözleşme şartlarının görüşülmesi',\r    status: 'planned',\r    priority: 'high',\r    startDate: '2024-01-30',\r    startTime: '15:30',\r    duration: 90,\r    relatedTo: 'Mega AŞ',\r    relatedType: 'deal',\r    assignedTo: 'Ayşe Kaya',\r    createdBy: 'Admin',\r    createdDate: '2024-01-26',\r  },\r];\rconst activityTypes = [\r  { value: 'call', label: 'Arama', icon: <PhoneOutlined />, color: 'blue' },\r  { value: 'email', label: 'E-posta', icon: <MailOutlined />, color: 'green' },\r  { value: 'meeting', label: 'Toplantı', icon: <TeamOutlined />, color: 'purple' },\r  { value: 'task', label: 'Görev', icon: <CheckCircleOutlined />, color: 'orange' },\r  { value: 'note', label: 'Not', icon: <FileTextOutlined />, color: 'gray' },\r];\rconst priorityOptions = [\r  { value: 'low', label: 'Düşük', color: 'default' },\r  { value: 'medium', label: 'Orta', color: 'warning' },\r  { value: 'high', label: 'Yüksek', color: 'error' },\r];\rconst statusOptions = [\r  { value: 'planned', label: 'Planlandı', color: 'blue' },\r  { value: 'completed', label: 'Tamamlandı', color: 'green' },\r  { value: 'cancelled', label: 'İptal Edildi', color: 'red' },\r];\rexport const ActivitiesPage: React.FC = () => {\r  const [activities, setActivities] = useState<Activity[]>(mockActivities);\r  const [loading, setLoading] = useState(false);\r  const [drawerVisible, setDrawerVisible] = useState(false);\r  const [editingActivity, setEditingActivity] = useState<Activity | null>(null);\r  const [searchText, setSearchText] = useState('');\r  const [filterType, setFilterType] = useState<string | undefined>();\r  const [filterStatus, setFilterStatus] = useState<string | undefined>();\r  const [viewMode, setViewMode] = useState<'table' | 'calendar' | 'timeline'>('table');\r  const [form] = Form.useForm();\r  const columns: ColumnsType<Activity> = [\r    {\r      title: 'Tür',\r      dataIndex: 'type',\r      key: 'type',\r      width: 80,\r      render: (type) => {\r        const activityType = activityTypes.find(t => t.value === type);\r        return (\r          <Tag icon={activityType?.icon} color={activityType?.color}>\r            {activityType?.label}\r          </Tag>\r        );\r      },\r    },\r    {\r      title: 'Konu',\r      dataIndex: 'subject',\r      key: 'subject',\r      render: (text, record) => (\r        <Space direction=\"vertical\" size={0}>\r          <strong>{text}</strong>\r          <small style={{ color: '#8c8c8c' }}>{record.relatedTo}</small>\r        </Space>\r      ),\r    },\r    {\r      title: 'Tarih & Saat',\r      key: 'datetime',\r      render: (_, record) => (\r        <Space direction=\"vertical\" size={0}>\r          <span>{dayjs(record.startDate).format('DD.MM.YYYY')}</span>\r          <small style={{ color: '#8c8c8c' }}>{record.startTime}</small>\r        </Space>\r      ),\r    },\r    {\r      title: 'Öncelik',\r      dataIndex: 'priority',\r      key: 'priority',\r      width: 100,\r      render: (priority) => {\r        const priorityOption = priorityOptions.find(p => p.value === priority);\r        return <Tag color={priorityOption?.color}>{priorityOption?.label}</Tag>;\r      },\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      width: 120,\r      render: (status) => {\r        const statusOption = statusOptions.find(s => s.value === status);\r        return <Tag color={statusOption?.color}>{statusOption?.label}</Tag>;\r      },\r    },\r    {\r      title: 'Atanan',\r      dataIndex: 'assignedTo',\r      key: 'assignedTo',\r      render: (name) => (\r        <Space size={4}>\r          <Avatar size=\"small\" style={{ backgroundColor: '#1890ff' }}>\r            {name?.[0]}\r          </Avatar>\r          <span>{name}</span>\r        </Space>\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      fixed: 'right',\r      width: 100,\r      render: (_, record) => (\r        <Space>\r          <Button\r            type=\"text\"\r            size=\"small\"\r            onClick={() => handleEdit(record)}\r          >\r            Düzenle\r          </Button>\r          <Button\r            type=\"text\"\r            danger\r            size=\"small\"\r            onClick={() => handleDelete(record.id)}\r          >\r            Sil\r          </Button>\r        </Space>\r      ),\r    },\r  ];\r  const handleEdit = (activity: Activity) => {\r    setEditingActivity(activity);\r    form.setFieldsValue({\r      ...activity,\r      startDate: dayjs(activity.startDate),\r      startTime: dayjs(activity.startTime, 'HH:mm'),\r    });\r    setDrawerVisible(true);\r  };\r  const handleDelete = (id: number) => {\r    setActivities(prev => prev.filter(a => a.id !== id));\r    message.success('Aktivite silindi');\r  };\r  const handleSubmit = (values: any) => {\r    const formData = {\r      ...values,\r      startDate: values.startDate.format('YYYY-MM-DD'),\r      startTime: values.startTime.format('HH:mm'),\r    };\r    if (editingActivity) {\r      setActivities(prev => \r        prev.map(a => a.id === editingActivity.id ? { ...a, ...formData } : a)\r      );\r      message.success('Aktivite güncellendi');\r    } else {\r      const newActivity = {\r        ...formData,\r        id: activities.length + 1,\r        createdDate: dayjs().format('YYYY-MM-DD'),\r        createdBy: 'Current User',\r      };\r      setActivities(prev => [...prev, newActivity]);\r      message.success('Yeni aktivite eklendi');\r    }\r    setDrawerVisible(false);\r    form.resetFields();\r    setEditingActivity(null);\r  };\r  const filteredData = activities.filter(a => {\r    const matchesSearch = a.subject.toLowerCase().includes(searchText.toLowerCase()) ||\r                         a.relatedTo.toLowerCase().includes(searchText.toLowerCase());\r    const matchesType = !filterType || a.type === filterType;\r    const matchesStatus = !filterStatus || a.status === filterStatus;\r    return matchesSearch && matchesType && matchesStatus;\r  });\r  const todayActivities = filteredData.filter(a => \r    dayjs(a.startDate).isSame(dayjs(), 'day')\r  );\r  const upcomingActivities = filteredData.filter(a => \r    dayjs(a.startDate).isAfter(dayjs(), 'day')\r  );\r  const getListData = (value: dayjs.Dayjs) => {\r    const dateStr = value.format('YYYY-MM-DD');\r    const dayActivities = activities.filter(a => a.startDate === dateStr);\r    return dayActivities.map(activity => {\r      const type = activityTypes.find(t => t.value === activity.type);\r      return {\r        type: type?.color as BadgeProps['status'],\r        content: `${activity.startTime} - ${activity.subject}`,\r      };\r    });\r  };\r  const dateCellRender = (value: dayjs.Dayjs) => {\r    const listData = getListData(value);\r    return (\r      <ul style={{ listStyle: 'none', padding: 0 }}>\r        {listData.map((item, index) => (\r          <li key={index}>\r            <Badge status={item.type} text={item.content} />\r          </li>\r        ))}\r      </ul>\r    );\r  };\r  return (\r    <div style={{ padding: 24 }}>\r      <Card\r        title=\"Aktiviteler\"\r        extra={\r          <Space>\r            <Select\r              value={viewMode}\r              onChange={setViewMode}\r              style={{ width: 120 }}\r             aria-label=\"select field\">\r              <Select.Option value=\"table\" aria-label=\"select field\">Tablo</Select.Option>\r              <Select.Option value=\"calendar\" aria-label=\"select field\">Takvim</Select.Option>\r              <Select.Option value=\"timeline\" aria-label=\"select field\">Zaman Çizelgesi</Select.Option>\r            </Select>\r            <Button\r              type=\"primary\"\r              icon={<PlusOutlined />}\r              onClick={() = aria-label=\"plus outlined\"> {\r                setEditingActivity(null);\r                form.resetFields();\r                setDrawerVisible(true);\r              }}\r            >\r              Yeni Aktivite\r            </Button>\r          </Space>\r        }\r      >\r        <Space style={{ marginBottom: 16, width: '100%' }} direction=\"vertical\">\r          <Row gutter={16}>\r            <Col span={8}>\r              <Card size=\"small\">\r                <Space direction=\"vertical\" style={{ width: '100%' }}>\r                  <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r                    <span>Bugünkü Aktiviteler</span>\r                    <Tag color=\"blue\">{todayActivities.length}</Tag>\r                  </div>\r                </Space>\r              </Card>\r            </Col>\r            <Col span={8}>\r              <Card size=\"small\">\r                <Space direction=\"vertical\" style={{ width: '100%' }}>\r                  <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r                    <span>Yaklaşan Aktiviteler</span>\r                    <Tag color=\"orange\">{upcomingActivities.length}</Tag>\r                  </div>\r                </Space>\r              </Card>\r            </Col>\r            <Col span={8}>\r              <Card size=\"small\">\r                <Space direction=\"vertical\" style={{ width: '100%' }}>\r                  <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r                    <span>Tamamlanan (Bu Hafta)</span>\r                    <Tag color=\"green\">\r                      {activities.filter(a => a.status === 'completed').length}\r                    </Tag>\r                  </div>\r                </Space>\r              </Card>\r            </Col>\r          </Row>\r          {viewMode === 'table' && (\r            <>\r              <Space>\r                <Input\r                  placeholder=\"Ara...\"\r                  prefix={<SearchOutlined / aria-label=\"input field\">}\r                  value={searchText}\r                  onChange={(e) => setSearchText(e.target.value)}\r                  style={{ width: 250 }}\r                />\r                <Select\r                  placeholder=\"Tür\"\r                  allowClear\r                  style={{ width: 150 }}\r                  value={filterType}\r                  onChange={setFilterType}\r                 aria-label=\"select field\">\r                  {activityTypes.map(type => (\r                    <Select.Option key={type.value} value={type.value} aria-label=\"select field\">\r                      <Space>\r                        {type.icon}\r                        {type.label}\r                      </Space>\r                    </Select.Option>\r                  ))}\r                </Select>\r                <Select\r                  placeholder=\"Durum\"\r                  allowClear\r                  style={{ width: 150 }}\r                  value={filterStatus}\r                  onChange={setFilterStatus}\r                  options={statusOptions}\r                / aria-label=\"select field\">\r              </Space>\r            </>\r          )}\r        </Space>\r        {viewMode === 'table' && (\r          <Table\r            columns={columns}\r            dataSource={filteredData}\r            rowKey=\"id\"\r            loading={loading}\r            pagination={{\r              pageSize: 10,\r              showTotal: (total) => `Toplam ${total} aktivite`,\r            }}\r          />\r        )}\r        {viewMode === 'calendar' && (\r          <Calendar cellRender={dateCellRender} />\r        )}\r        {viewMode === 'timeline' && (\r          <Timeline mode=\"left\" style={{ marginTop: 24 }}>\r            {filteredData.map(activity => {\r              const type = activityTypes.find(t => t.value === activity.type);\r              const status = statusOptions.find(s => s.value === activity.status);\r              return (\r                <Timeline.Item\r                  key={activity.id}\r                  label={`${dayjs(activity.startDate).format('DD MMM')} ${activity.startTime}`}\r                  color={status?.color}\r                  dot={type?.icon}\r                >\r                  <Card size=\"small\">\r                    <Space direction=\"vertical\">\r                      <strong>{activity.subject}</strong>\r                      <span>{activity.description}</span>\r                      <Space>\r                        <Tag>{activity.relatedTo}</Tag>\r                        <Tag icon={<UserOutlined />}>{activity.assignedTo}</Tag>\r                      </Space>\r                    </Space>\r                  </Card>\r                </Timeline.Item>\r              );\r            })}\r          </Timeline>\r        )}\r      </Card>\r      <Drawer\r        title={editingActivity ? 'Aktiviteyi Düzenle' : 'Yeni Aktivite'}\r        width={600}\r        open={drawerVisible}\r        onClose={() => {\r          setDrawerVisible(false);\r          form.resetFields();\r          setEditingActivity(null);\r        }}\r        footer={\r          <Space style={{ float: 'right' }}>\r            <Button onClick={() => setDrawerVisible(false)}>İptal</Button>\r            <Button type=\"primary\" onClick={() => form.submit()}>\r              {editingActivity ? 'Güncelle' : 'Ekle'}\r            </Button>\r          </Space>\r        }\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleSubmit}\r        >\r          <Form.Item\r            name=\"type\"\r            label=\"Aktivite Türü\"\r            rules={[{ required: true, message: 'Aktivite türü gerekli' }]}\r          >\r            <Select aria-label=\"select field\">\r              {activityTypes.map(type => (\r                <Select.Option key={type.value} value={type.value} aria-label=\"select field\">\r                  <Space>\r                    {type.icon}\r                    {type.label}\r                  </Space>\r                </Select.Option>\r              ))}\r            </Select>\r          </Form.Item>\r          <Form.Item\r            name=\"subject\"\r            label=\"Konu\"\r            rules={[{ required: true, message: 'Konu gerekli' }]}\r          >\r            <Input / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item\r            name=\"description\"\r            label=\"Açıklama\"\r          >\r            <Input.TextArea rows={3} / aria-label=\"input field\">\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"startDate\"\r                label=\"Tarih\"\r                rules={[{ required: true, message: 'Tarih gerekli' }]}\r              >\r                <DatePicker style={{ width: '100%' }} format=\"DD.MM.YYYY\" />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"startTime\"\r                label=\"Saat\"\r                rules={[{ required: true, message: 'Saat gerekli' }]}\r              >\r                <TimePicker style={{ width: '100%' }} format=\"HH:mm\" />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"duration\"\r                label=\"Süre (dakika)\"\r                rules={[{ required: true, message: 'Süre gerekli' }]}\r              >\r                <Select aria-label=\"select field\">\r                  <Select.Option value={15} aria-label=\"select field\">15 dakika</Select.Option>\r                  <Select.Option value={30} aria-label=\"select field\">30 dakika</Select.Option>\r                  <Select.Option value={45} aria-label=\"select field\">45 dakika</Select.Option>\r                  <Select.Option value={60} aria-label=\"select field\">1 saat</Select.Option>\r                  <Select.Option value={90} aria-label=\"select field\">1.5 saat</Select.Option>\r                  <Select.Option value={120} aria-label=\"select field\">2 saat</Select.Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"priority\"\r                label=\"Öncelik\"\r                rules={[{ required: true, message: 'Öncelik gerekli' }]}\r              >\r                <Select options={priorityOptions} / aria-label=\"select field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"relatedTo\"\r                label=\"İlişkili\"\r                rules={[{ required: true, message: 'İlişkili kayıt gerekli' }]}\r              >\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"relatedType\"\r                label=\"İlişki Türü\"\r                rules={[{ required: true, message: 'İlişki türü gerekli' }]}\r              >\r                <Select aria-label=\"select field\">\r                  <Select.Option value=\"lead\" aria-label=\"select field\">Potansiyel</Select.Option>\r                  <Select.Option value=\"customer\" aria-label=\"select field\">Müşteri</Select.Option>\r                  <Select.Option value=\"opportunity\" aria-label=\"select field\">Fırsat</Select.Option>\r                  <Select.Option value=\"deal\" aria-label=\"select field\">Anlaşma</Select.Option>\r                </Select>\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"assignedTo\"\r                label=\"Atanan Kişi\"\r                rules={[{ required: true, message: 'Atanan kişi gerekli' }]}\r              >\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"status\"\r                label=\"Durum\"\r                rules={[{ required: true, message: 'Durum gerekli' }]}\r              >\r                <Select options={statusOptions} / aria-label=\"select field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          {editingActivity?.status === 'completed' && (\r            <Form.Item\r              name=\"outcome\"\r              label=\"Sonuç\"\r            >\r              <Input.TextArea rows={3} placeholder=\"Aktivite sonucu hakkında notlar...\" / aria-label=\"input field\">\r            </Form.Item>\r          )}\r        </Form>\r      </Drawer>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/crm/pages/ActivitiesPage.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { \r  Card, \r  Table, \r  Button, \r  Space, \r  Tag, \r  Dropdown, \r  Input, \r  Select, \r  Row, \r  Col,\r  message,\r  Tooltip,\r  Badge,\r  Avatar,\r  Modal,\r  Form,\r  DatePicker,\r  InputNumber,\r  Divider,\r  Statistic,\r  Tabs,\r  List,\r  Typography,\r  Timeline,\r  Rate,\r  Progress,\r  Drawer,\r  Descriptions,\r  Empty\r} from 'antd';\rimport {\r  PlusOutlined,\r  SearchOutlined,\r  FilterOutlined,\r  DownloadOutlined,\r  UploadOutlined,\r  UserOutlined,\r  PhoneOutlined,\r  MailOutlined,\r  GlobalOutlined,\r  MoreOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  EyeOutlined,\r  TeamOutlined,\r  DollarOutlined,\r  ShoppingCartOutlined,\r  FileTextOutlined,\r  CalendarOutlined,\r  ClockCircleOutlined,\r  CheckCircleOutlined,\r  SyncOutlined,\r  BankOutlined,\r  EnvironmentOutlined,\r  StarOutlined,\r  ContactsOutlined,\r  MergeOutlined\r} from '@ant-design/icons';\rimport { PageHeader } from '@/shared/components/PageHeader';\rimport { customerService, Customer, CreateCustomerDto, CustomerListParams, Contact, CreateContactDto } from '@/services/crm/customerService';\rimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\rconst { Option } = Select;\rconst { Search } = Input;\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rexport const CustomersPage: React.FC = () => {\r  const queryClient = useQueryClient();\r  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\r  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\r  const [isContactModalOpen, setIsContactModalOpen] = useState(false);\r  const [isDetailDrawerOpen, setIsDetailDrawerOpen] = useState(false);\r  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);\r  const [activeDetailTab, setActiveDetailTab] = useState('overview');\r  const [filters, setFilters] = useState<CustomerListParams>({\r    page: 1,\r    pageSize: 10,\r    sortBy: 'createdDate',\r    sortDirection: 'desc'\r  });\r  const [form] = Form.useForm();\r  const [contactForm] = Form.useForm();\r  // Fetch customers\r  const { data: customersData, isLoading, refetch } = useQuery({\r    queryKey: ['customers', filters],\r    queryFn: () => customerService.getCustomers(filters)\r  });\r  // Fetch customer details\r  const { data: customerDetail } = useQuery({\r    queryKey: ['customer', selectedCustomer?.id],\r    queryFn: () => customerService.getCustomerById(selectedCustomer!.id),\r    enabled: !!selectedCustomer?.id && isDetailDrawerOpen\r  });\r  // Fetch customer contacts\r  const { data: customerContacts } = useQuery({\r    queryKey: ['customerContacts', selectedCustomer?.id],\r    queryFn: () => customerService.getCustomerContacts(selectedCustomer!.id),\r    enabled: !!selectedCustomer?.id && isDetailDrawerOpen && activeDetailTab === 'contacts'\r  });\r  // Fetch customer opportunities\r  const { data: customerOpportunities } = useQuery({\r    queryKey: ['customerOpportunities', selectedCustomer?.id],\r    queryFn: () => customerService.getCustomerOpportunities(selectedCustomer!.id),\r    enabled: !!selectedCustomer?.id && isDetailDrawerOpen && activeDetailTab === 'opportunities'\r  });\r  // Create customer mutation\r  const createCustomerMutation = useMutation({\r    mutationFn: (data: CreateCustomerDto) => customerService.createCustomer(data),\r    onSuccess: () => {\r      message.success('Müşteri başarıyla oluşturuldu');\r      setIsCreateModalOpen(false);\r      form.resetFields();\r      queryClient.invalidateQueries({ queryKey: ['customers'] });\r    },\r    onError: () => {\r      message.error('Müşteri oluşturulurken hata oluştu');\r    }\r  });\r  // Add contact mutation\r  const addContactMutation = useMutation({\r    mutationFn: (data: CreateContactDto) => customerService.addContact(selectedCustomer!.id, data),\r    onSuccess: () => {\r      message.success('İletişim kişisi başarıyla eklendi');\r      setIsContactModalOpen(false);\r      contactForm.resetFields();\r      queryClient.invalidateQueries({ queryKey: ['customerContacts', selectedCustomer?.id] });\r    },\r    onError: () => {\r      message.error('İletişim kişisi eklenirken hata oluştu');\r    }\r  });\r  // Delete customer mutation\r  const deleteCustomerMutation = useMutation({\r    mutationFn: (id: number) => customerService.deleteCustomer(id),\r    onSuccess: () => {\r      message.success('Müşteri başarıyla silindi');\r      queryClient.invalidateQueries({ queryKey: ['customers'] });\r    },\r    onError: () => {\r      message.error('Müşteri silinirken hata oluştu');\r    }\r  });\r  const getSegmentColor = (segment: string) => {\r    const segmentColors: Record<string, string> = {\r      'Enterprise': 'gold',\r      'Premium': 'purple',\r      'Standard': 'blue',\r      'Basic': 'cyan',\r      'Strategic': 'green',\r      'Key Account': 'red'\r    };\r    return segmentColors[segment] || 'default';\r  };\r  const columns = [\r    {\r      title: 'Müşteri',\r      key: 'customer',\r      fixed: 'left',\r      width: 300,\r      render: (record: Customer) => (\r        <Space direction=\"vertical\" size={0}>\r          <Space>\r            <Avatar \r              icon={<BankOutlined />} \r              style={{ backgroundColor: '#1890ff' }}\r              size=\"large\"\r            >\r              {record.companyName?.[0]}\r            </Avatar>\r            <div>\r              <div style={{ fontWeight: 600, fontSize: 14 }}>{record.companyName}</div>\r              <div style={{ fontSize: 12, color: '#999' }}>\r                {record.industry || 'Belirtilmemiş'}\r              </div>\r              {record.taxNumber && (\r                <div style={{ fontSize: 11, color: '#bbb' }}>\r                  VKN: {record.taxNumber}\r                </div>\r              )}\r            </div>\r          </Space>\r        </Space>\r      )\r    },\r    {\r      title: 'İletişim',\r      key: 'contact',\r      width: 220,\r      render: (record: Customer) => (\r        <Space direction=\"vertical\" size={0}>\r          <Space>\r            <MailOutlined style={{ color: '#999' }} />\r            <span style={{ fontSize: 12 }}>{record.email}</span>\r          </Space>\r          {record.phone && (\r            <Space>\r              <PhoneOutlined style={{ color: '#999' }} />\r              <span style={{ fontSize: 12 }}>{record.phone}</span>\r            </Space>\r          )}\r          {record.website && (\r            <Space>\r              <GlobalOutlined style={{ color: '#999' }} />\r              <span style={{ fontSize: 12 }}>{record.website}</span>\r            </Space>\r          )}\r        </Space>\r      )\r    },\r    {\r      title: 'Segment',\r      dataIndex: 'segment',\r      key: 'segment',\r      width: 120,\r      render: (segment: string) => segment ? (\r        <Tag color={getSegmentColor(segment)}>{segment}</Tag>\r      ) : null\r    },\r    {\r      title: 'Tip',\r      dataIndex: 'customerType',\r      key: 'customerType',\r      width: 100,\r      render: (type: string) => type ? <Tag>{type}</Tag> : null\r    },\r    {\r      title: 'Çalışan',\r      dataIndex: 'numberOfEmployees',\r      key: 'numberOfEmployees',\r      width: 100,\r      render: (num: number) => num ? (\r        <Space>\r          <TeamOutlined style={{ color: '#999' }} />\r          <span>{num.toLocaleString('tr-TR')}</span>\r        </Space>\r      ) : null\r    },\r    {\r      title: 'Gelir',\r      dataIndex: 'annualRevenue',\r      key: 'annualRevenue',\r      width: 140,\r      render: (revenue: number) => revenue ? (\r        <Space>\r          <DollarOutlined style={{ color: '#52c41a' }} />\r          <span>₺{(revenue / 1000000).toFixed(1)}M</span>\r        </Space>\r      ) : null\r    },\r    {\r      title: 'Rating',\r      dataIndex: 'rating',\r      key: 'rating',\r      width: 120,\r      render: (rating: number) => rating ? (\r        <Rate disabled value={rating} style={{ fontSize: 14 }} />\r      ) : null\r    },\r    {\r      title: 'Konum',\r      key: 'location',\r      width: 150,\r      render: (record: Customer) => record.city ? (\r        <Space>\r          <EnvironmentOutlined style={{ color: '#999' }} />\r          <span style={{ fontSize: 12 }}>\r            {record.city}{record.country ? `, ${record.country}` : ''}\r          </span>\r        </Space>\r      ) : null\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'isActive',\r      key: 'isActive',\r      width: 100,\r      render: (isActive: boolean) => (\r        <Badge \r          status={isActive ? 'success' : 'default'} \r          text={isActive ? 'Aktif' : 'Pasif'}\r        />\r      )\r    },\r    {\r      title: 'Kayıt',\r      dataIndex: 'createdDate',\r      key: 'createdDate',\r      width: 120,\r      render: (date: string) => new Date(date).toLocaleDateString('tr-TR')\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      fixed: 'right',\r      width: 100,\r      render: (record: Customer) => (\r        <Dropdown\r          menu={{\r            items: [\r              {\r                key: 'view',\r                icon: <EyeOutlined />,\r                label: 'Detaylar',\r                onClick: () => {\r                  setSelectedCustomer(record);\r                  setIsDetailDrawerOpen(true);\r                }\r              },\r              {\r                key: 'edit',\r                icon: <EditOutlined />,\r                label: 'Düzenle'\r              },\r              {\r                type: 'divider'\r              },\r              {\r                key: 'contacts',\r                icon: <ContactsOutlined />,\r                label: 'İletişim Kişileri',\r                onClick: () => {\r                  setSelectedCustomer(record);\r                  setIsDetailDrawerOpen(true);\r                  setActiveDetailTab('contacts');\r                }\r              },\r              {\r                key: 'opportunities',\r                icon: <ShoppingCartOutlined />,\r                label: 'Fırsatlar'\r              },\r              {\r                key: 'activities',\r                icon: <CalendarOutlined />,\r                label: 'Aktiviteler'\r              },\r              {\r                type: 'divider'\r              },\r              {\r                key: 'merge',\r                icon: <MergeOutlined />,\r                label: 'Birleştir'\r              },\r              {\r                key: 'delete',\r                icon: <DeleteOutlined />,\r                label: 'Sil',\r                danger: true,\r                onClick: () => {\r                  Modal.confirm({\r                    title: 'Müşteri Sil',\r                    content: 'Bu müşteriyi silmek istediğinize emin misiniz?',\r                    okText: 'Sil',\r                    okType: 'danger',\r                    cancelText: 'İptal',\r                    onOk: () => deleteCustomerMutation.mutate(record.id)\r                  });\r                }\r              }\r            ]\r          }}\r        >\r          <Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r        </Dropdown>\r      )\r    }\r  ];\r  const handleTableChange = (pagination: any, filters: any, sorter: any) => {\r    setFilters({\r      ...filters,\r      page: pagination.current,\r      pageSize: pagination.pageSize,\r      sortBy: sorter.field || 'createdDate',\r      sortDirection: sorter.order === 'ascend' ? 'asc' : 'desc'\r    });\r  };\r  return (\r    <div>\r      <PageHeader\r        title=\"Müşteriler\"\r        subtitle=\"Müşteri bilgilerini yönetin ve takip edin\"\r        extra={[\r          <Button key=\"import\" icon={<UploadOutlined />} aria-label=\"upload outlined\">\r            İçe Aktar\r          </Button>,\r          <Button key=\"export\" icon={<DownloadOutlined />} aria-label=\"download outlined\">\r            Dışa Aktar\r          </Button>,\r          <Button\r            key=\"create\"\r            type=\"primary\"\r            icon={<PlusOutlined />}\r            onClick={() = aria-label=\"plus outlined\"> setIsCreateModalOpen(true)}\r          >\r            Yeni Müşteri\r          </Button>\r        ]}\r      />\r      {/* Statistics */}\r      <Row gutter={16} style={{ marginBottom: 16 }}>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Toplam Müşteri\"\r              value={customersData?.totalCount || 0}\r              prefix={<TeamOutlined />}\r            />\r          </Card>\r        </Col>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Aktif Müşteri\"\r              value={customersData?.items.filter(c => c.isActive).length || 0}\r              prefix={<CheckCircleOutlined />}\r              valueStyle={{ color: '#52c41a' }}\r            />\r          </Card>\r        </Col>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Toplam Gelir\"\r              value={\r                customersData?.items.reduce((sum, c) => sum + (c.annualRevenue || 0), 0) || 0\r              }\r              prefix={<DollarOutlined />}\r              formatter={(value) => `₺${(Number(value) / 1000000).toFixed(1)}M`}\r              valueStyle={{ color: '#1890ff' }}\r            />\r          </Card>\r        </Col>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Ortalama Rating\"\r              value={\r                customersData?.items.length \r                  ? (customersData.items.reduce((sum, c) => sum + (c.rating || 0), 0) / \r                     customersData.items.filter(c => c.rating).length).toFixed(1)\r                  : 0\r              }\r              prefix={<StarOutlined />}\r              suffix=\"/ 5\"\r              valueStyle={{ color: '#fa8c16' }}\r            />\r          </Card>\r        </Col>\r      </Row>\r      {/* Filters */}\r      <Card style={{ marginBottom: 16 }}>\r        <Row gutter={16}>\r          <Col span={8}>\r            <Search\r              placeholder=\"Müşteri ara...\"\r              allowClear\r              enterButton={<SearchOutlined />}\r              onSearch={(value) => setFilters({ ...filters, search: value })}\r            />\r          </Col>\r          <Col span={4}>\r            <Select\r              style={{ width: '100%' }}\r              placeholder=\"Segment\"\r              allowClear\r              onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, segment: value })}\r            >\r              <Option value=\"Enterprise\">Enterprise</Option>\r              <Option value=\"Premium\">Premium</Option>\r              <Option value=\"Standard\">Standard</Option>\r              <Option value=\"Basic\">Basic</Option>\r              <Option value=\"Strategic\">Strategic</Option>\r              <Option value=\"Key Account\">Key Account</Option>\r            </Select>\r          </Col>\r          <Col span={4}>\r            <Select\r              style={{ width: '100%' }}\r              placeholder=\"Sektör\"\r              allowClear\r              onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, industry: value })}\r            >\r              <Option value=\"Technology\">Teknoloji</Option>\r              <Option value=\"Finance\">Finans</Option>\r              <Option value=\"Healthcare\">Sağlık</Option>\r              <Option value=\"Manufacturing\">Üretim</Option>\r              <Option value=\"Retail\">Perakende</Option>\r              <Option value=\"Education\">Eğitim</Option>\r              <Option value=\"Real Estate\">Gayrimenkul</Option>\r              <Option value=\"Automotive\">Otomotiv</Option>\r              <Option value=\"Other\">Diğer</Option>\r            </Select>\r          </Col>\r          <Col span={4}>\r            <Select\r              style={{ width: '100%' }}\r              placeholder=\"Tip\"\r              allowClear\r              onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, customerType: value })}\r            >\r              <Option value=\"Corporate\">Kurumsal</Option>\r              <Option value=\"SMB\">KOBİ</Option>\r              <Option value=\"Startup\">Startup</Option>\r              <Option value=\"Individual\">Bireysel</Option>\r              <Option value=\"Government\">Kamu</Option>\r            </Select>\r          </Col>\r          <Col span={4}>\r            <Button icon={<SyncOutlined />} onClick={() = aria-label=\"sync outlined\"> refetch()}>\r              Yenile\r            </Button>\r          </Col>\r        </Row>\r      </Card>\r      {/* Table */}\r      <Card>\r        <Table\r          rowSelection={{\r            selectedRowKeys,\r            onChange: setSelectedRowKeys\r          }}\r          columns={columns}\r          dataSource={customersData?.items || []}\r          rowKey=\"id\"\r          loading={isLoading}\r          onChange={handleTableChange}\r          pagination={{\r            current: filters.page,\r            pageSize: filters.pageSize,\r            total: customersData?.totalCount || 0,\r            showSizeChanger: true,\r            showTotal: (total) => `Toplam ${total} müşteri`\r          }}\r          scroll={{ x: 1800 }}\r        />\r      </Card>\r      {/* Create Customer Modal */}\r      <Modal\r        title=\"Yeni Müşteri Oluştur\"\r        open={isCreateModalOpen}\r        onCancel={() => {\r          setIsCreateModalOpen(false);\r          form.resetFields();\r        }}\r        footer={null}\r        width={720}\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={(values) => createCustomerMutation.mutate(values)}\r        >\r          <Row gutter={16}>\r            <Col span={24}>\r              <Form.Item\r                name=\"companyName\"\r                label=\"Şirket Adı\"\r                rules={[{ required: true, message: 'Şirket adı zorunludur' }]}\r              >\r                <Input placeholder=\"Şirket adı\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"email\"\r                label=\"Email\"\r                rules={[\r                  { required: true, message: 'Email zorunludur' },\r                  { type: 'email', message: 'Geçerli bir email giriniz' }\r                ]}\r              >\r                <Input placeholder=\"Email\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"phone\" label=\"Telefon\">\r                <Input placeholder=\"Telefon\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item name=\"website\" label=\"Website\">\r                <Input placeholder=\"Website\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"industry\" label=\"Sektör\">\r                <Select placeholder=\"Sektör seçiniz\" aria-label=\"select field\">\r                  <Option value=\"Technology\">Teknoloji</Option>\r                  <Option value=\"Finance\">Finans</Option>\r                  <Option value=\"Healthcare\">Sağlık</Option>\r                  <Option value=\"Manufacturing\">Üretim</Option>\r                  <Option value=\"Retail\">Perakende</Option>\r                  <Option value=\"Education\">Eğitim</Option>\r                  <Option value=\"Real Estate\">Gayrimenkul</Option>\r                  <Option value=\"Automotive\">Otomotiv</Option>\r                  <Option value=\"Other\">Diğer</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item name=\"taxNumber\" label=\"Vergi No\">\r                <Input placeholder=\"Vergi numarası\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"taxOffice\" label=\"Vergi Dairesi\">\r                <Input placeholder=\"Vergi dairesi\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Divider />\r          <Row gutter={16}>\r            <Col span={24}>\r              <Form.Item name=\"address\" label=\"Adres\">\r                <Input.TextArea rows={2} placeholder=\"Adres\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item name=\"city\" label=\"Şehir\">\r                <Input placeholder=\"Şehir\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item name=\"state\" label=\"İlçe/Eyalet\">\r                <Input placeholder=\"İlçe/Eyalet\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item name=\"postalCode\" label=\"Posta Kodu\">\r                <Input placeholder=\"Posta kodu\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item name=\"country\" label=\"Ülke\">\r                <Input placeholder=\"Ülke\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Divider />\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item name=\"customerType\" label=\"Müşteri Tipi\">\r                <Select placeholder=\"Tip seçiniz\" aria-label=\"select field\">\r                  <Option value=\"Corporate\">Kurumsal</Option>\r                  <Option value=\"SMB\">KOBİ</Option>\r                  <Option value=\"Startup\">Startup</Option>\r                  <Option value=\"Individual\">Bireysel</Option>\r                  <Option value=\"Government\">Kamu</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item name=\"segment\" label=\"Segment\">\r                <Select placeholder=\"Segment seçiniz\" aria-label=\"select field\">\r                  <Option value=\"Enterprise\">Enterprise</Option>\r                  <Option value=\"Premium\">Premium</Option>\r                  <Option value=\"Standard\">Standard</Option>\r                  <Option value=\"Basic\">Basic</Option>\r                  <Option value=\"Strategic\">Strategic</Option>\r                  <Option value=\"Key Account\">Key Account</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item name=\"numberOfEmployees\" label=\"Çalışan Sayısı\">\r                <InputNumber style={{ width: '100%' }} placeholder=\"Çalışan sayısı\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item name=\"annualRevenue\" label=\"Yıllık Gelir\">\r                <InputNumber\r                  style={{ width: '100%' }}\r                  formatter={value = aria-label=\"input field\"> `₺ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r                  parser={value => value!.replace(/\\₺\\s?|(,*)/g, '')}\r                  placeholder=\"Yıllık gelir\"\r                />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item name=\"creditLimit\" label=\"Kredi Limiti\">\r                <InputNumber\r                  style={{ width: '100%' }}\r                  formatter={value = aria-label=\"input field\"> `₺ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r                  parser={value => value!.replace(/\\₺\\s?|(,*)/g, '')}\r                  placeholder=\"Kredi limiti\"\r                />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item name=\"paymentTerms\" label=\"Ödeme Vadesi (Gün)\">\r                <InputNumber style={{ width: '100%' }} placeholder=\"30\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item name=\"description\" label=\"Açıklama\">\r            <Input.TextArea rows={3} placeholder=\"Müşteri hakkında notlar\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item style={{ marginBottom: 0 }}>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => {\r                setIsCreateModalOpen(false);\r                form.resetFields();\r              }}>\r                İptal\r              </Button>\r              <Button type=\"primary\" htmlType=\"submit\" loading={createCustomerMutation.isPending}>\r                Oluştur\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Customer Detail Drawer */}\r      <Drawer\r        title={\r          <Space>\r            <Avatar \r              icon={<BankOutlined />} \r              style={{ backgroundColor: '#1890ff' }}\r              size=\"large\"\r            >\r              {customerDetail?.companyName?.[0]}\r            </Avatar>\r            <div>\r              <Title level={5} style={{ marginBottom: 0 }}>{customerDetail?.companyName}</Title>\r              <Text type=\"secondary\">{customerDetail?.industry}</Text>\r            </div>\r          </Space>\r        }\r        placement=\"right\"\r        width={800}\r        open={isDetailDrawerOpen}\r        onClose={() => {\r          setIsDetailDrawerOpen(false);\r          setSelectedCustomer(null);\r          setActiveDetailTab('overview');\r        }}\r      >\r        <Tabs activeKey={activeDetailTab} onChange={setActiveDetailTab}>\r          <TabPane tab=\"Genel Bakış\" key=\"overview\">\r            <Descriptions bordered column={2}>\r              <Descriptions.Item label=\"Email\">{customerDetail?.email}</Descriptions.Item>\r              <Descriptions.Item label=\"Telefon\">{customerDetail?.phone || '-'}</Descriptions.Item>\r              <Descriptions.Item label=\"Website\">{customerDetail?.website || '-'}</Descriptions.Item>\r              <Descriptions.Item label=\"Sektör\">{customerDetail?.industry || '-'}</Descriptions.Item>\r              <Descriptions.Item label=\"Segment\">\r                {customerDetail?.segment ? (\r                  <Tag color={getSegmentColor(customerDetail.segment)}>{customerDetail.segment}</Tag>\r                ) : '-'}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Tip\">{customerDetail?.customerType || '-'}</Descriptions.Item>\r              <Descriptions.Item label=\"Çalışan Sayısı\">\r                {customerDetail?.numberOfEmployees?.toLocaleString('tr-TR') || '-'}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Yıllık Gelir\">\r                {customerDetail?.annualRevenue ? `₺${(customerDetail.annualRevenue / 1000000).toFixed(1)}M` : '-'}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Rating\">\r                {customerDetail?.rating ? (\r                  <Rate disabled value={customerDetail.rating} />\r                ) : '-'}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Durum\">\r                <Badge \r                  status={customerDetail?.isActive ? 'success' : 'default'} \r                  text={customerDetail?.isActive ? 'Aktif' : 'Pasif'}\r                />\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Vergi No\">{customerDetail?.taxNumber || '-'}</Descriptions.Item>\r              <Descriptions.Item label=\"Vergi Dairesi\">{customerDetail?.taxOffice || '-'}</Descriptions.Item>\r              <Descriptions.Item label=\"Adres\" span={2}>\r                {customerDetail?.address || '-'}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Şehir\">{customerDetail?.city || '-'}</Descriptions.Item>\r              <Descriptions.Item label=\"Ülke\">{customerDetail?.country || '-'}</Descriptions.Item>\r              <Descriptions.Item label=\"Kredi Limiti\">\r                {customerDetail?.creditLimit ? `₺${customerDetail.creditLimit.toLocaleString('tr-TR')}` : '-'}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Ödeme Vadesi\">\r                {customerDetail?.paymentTerms ? `${customerDetail.paymentTerms} gün` : '-'}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Açıklama\" span={2}>\r                {customerDetail?.description || '-'}\r              </Descriptions.Item>\r            </Descriptions>\r          </TabPane>\r          <TabPane tab={`İletişim Kişileri (${customerContacts?.length || 0})`} key=\"contacts\">\r            <Button \r              type=\"primary\" \r              icon={<PlusOutlined />} \r              style={{ marginBottom: 16 }}\r              onClick={() = aria-label=\"plus outlined\"> setIsContactModalOpen(true)}\r            >\r              Yeni Kişi Ekle\r            </Button>\r            {customerContacts?.length ? (\r              <List\r                dataSource={customerContacts}\r                renderItem={(contact: Contact) => (\r                  <Card style={{ marginBottom: 12 }}>\r                    <Row>\r                      <Col span={6}>\r                        <Space>\r                          <Avatar icon={<UserOutlined />}>\r                            {contact.firstName?.[0]}{contact.lastName?.[0]}\r                          </Avatar>\r                          <div>\r                            <Text strong>{contact.fullName}</Text>\r                            {contact.isPrimary && <Tag color=\"gold\" style={{ marginLeft: 8 }}>Birincil</Tag>}\r                            <br />\r                            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                              {contact.jobTitle || 'Pozisyon belirtilmemiş'}\r                            </Text>\r                          </div>\r                        </Space>\r                      </Col>\r                      <Col span={6}>\r                        <Space direction=\"vertical\" size={0}>\r                          <Space>\r                            <MailOutlined />\r                            <Text>{contact.email}</Text>\r                          </Space>\r                          {contact.phone && (\r                            <Space>\r                              <PhoneOutlined />\r                              <Text>{contact.phone}</Text>\r                            </Space>\r                          )}\r                        </Space>\r                      </Col>\r                      <Col span={6}>\r                        <Text type=\"secondary\">{contact.department || 'Departman belirtilmemiş'}</Text>\r                      </Col>\r                      <Col span={6} style={{ textAlign: 'right' }}>\r                        <Button.Group>\r                          <Button icon={<EditOutlined />} size=\"small\" aria-label=\"edit outlined\">Düzenle</Button>\r                          <Button icon={<DeleteOutlined />} size=\"small\" danger aria-label=\"delete outlined\">Sil</Button>\r                        </Button.Group>\r                      </Col>\r                    </Row>\r                  </Card>\r                )}\r              />\r            ) : (\r              <Empty description=\"İletişim kişisi bulunmuyor\" />\r            )}\r          </TabPane>\r          <TabPane tab={`Fırsatlar (${customerOpportunities?.length || 0})`} key=\"opportunities\">\r            {customerOpportunities?.length ? (\r              <List\r                dataSource={customerOpportunities}\r                renderItem={(opportunity: any) => (\r                  <Card style={{ marginBottom: 12 }}>\r                    <Row>\r                      <Col span={12}>\r                        <Text strong>{opportunity.name}</Text>\r                        <br />\r                        <Text type=\"secondary\">\r                          Değer: ₺{opportunity.amount?.toLocaleString('tr-TR')}\r                        </Text>\r                      </Col>\r                      <Col span={6}>\r                        <Tag color={opportunity.stage?.color || 'blue'}>\r                          {opportunity.stage?.name || 'Belirtilmemiş'}\r                        </Tag>\r                      </Col>\r                      <Col span={6} style={{ textAlign: 'right' }}>\r                        <Progress \r                          type=\"circle\" \r                          percent={opportunity.probability} \r                          width={50}\r                        />\r                      </Col>\r                    </Row>\r                  </Card>\r                )}\r              />\r            ) : (\r              <Empty description=\"Fırsat bulunmuyor\" />\r            )}\r          </TabPane>\r          <TabPane tab=\"Aktiviteler\" key=\"activities\">\r            <Timeline>\r              <Timeline.Item color=\"green\">\r                <p>İlk görüşme yapıldı</p>\r                <Text type=\"secondary\">10 Ocak 2024</Text>\r              </Timeline.Item>\r              <Timeline.Item color=\"blue\">\r                <p>Teklif gönderildi</p>\r                <Text type=\"secondary\">15 Ocak 2024</Text>\r              </Timeline.Item>\r              <Timeline.Item>\r                <p>Sözleşme müzakeresi</p>\r                <Text type=\"secondary\">20 Ocak 2024</Text>\r              </Timeline.Item>\r            </Timeline>\r          </TabPane>\r          <TabPane tab=\"Notlar\" key=\"notes\">\r            <Empty description=\"Not bulunmuyor\" />\r          </TabPane>\r        </Tabs>\r      </Drawer>\r      {/* Add Contact Modal */}\r      <Modal\r        title=\"Yeni İletişim Kişisi Ekle\"\r        open={isContactModalOpen}\r        onCancel={() => {\r          setIsContactModalOpen(false);\r          contactForm.resetFields();\r        }}\r        footer={null}\r        width={600}\r      >\r        <Form\r          form={contactForm}\r          layout=\"vertical\"\r          onFinish={(values) => addContactMutation.mutate(values)}\r        >\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"firstName\"\r                label=\"Ad\"\r                rules={[{ required: true, message: 'Ad zorunludur' }]}\r              >\r                <Input placeholder=\"Ad\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"lastName\"\r                label=\"Soyad\"\r                rules={[{ required: true, message: 'Soyad zorunludur' }]}\r              >\r                <Input placeholder=\"Soyad\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"email\"\r                label=\"Email\"\r                rules={[\r                  { required: true, message: 'Email zorunludur' },\r                  { type: 'email', message: 'Geçerli bir email giriniz' }\r                ]}\r              >\r                <Input placeholder=\"Email\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"phone\" label=\"Telefon\">\r                <Input placeholder=\"Telefon\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item name=\"mobilePhone\" label=\"Cep Telefonu\">\r                <Input placeholder=\"Cep telefonu\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"jobTitle\" label=\"Pozisyon\">\r                <Input placeholder=\"Pozisyon\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item name=\"department\" label=\"Departman\">\r                <Input placeholder=\"Departman\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"contactType\" label=\"Kişi Tipi\">\r                <Select placeholder=\"Tip seçiniz\" aria-label=\"select field\">\r                  <Option value=\"Primary\">Birincil</Option>\r                  <Option value=\"Secondary\">İkincil</Option>\r                  <Option value=\"Technical\">Teknik</Option>\r                  <Option value=\"Financial\">Mali</Option>\r                  <Option value=\"Executive\">Yönetici</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item \r            name=\"isPrimary\" \r            valuePropName=\"checked\"\r          >\r            <Space>\r              <input type=\"checkbox\" / aria-label=\"input field\">\r              <span>Birincil iletişim kişisi</span>\r            </Space>\r          </Form.Item>\r          <Form.Item name=\"notes\" label=\"Notlar\">\r            <Input.TextArea rows={3} placeholder=\"Kişi hakkında notlar\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item style={{ marginBottom: 0 }}>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => {\r                setIsContactModalOpen(false);\r                contactForm.resetFields();\r              }}>\r                İptal\r              </Button>\r              <Button type=\"primary\" htmlType=\"submit\" loading={addContactMutation.isPending}>\r                Ekle\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/crm/pages/CustomersPage.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { \r  Card, \r  Table, \r  Button, \r  Space, \r  Tag, \r  Dropdown, \r  Input, \r  Select, \r  Row, \r  Col,\r  message,\r  Tooltip,\r  Badge,\r  Avatar,\r  Modal,\r  Form,\r  DatePicker,\r  InputNumber,\r  Divider,\r  Statistic\r} from 'antd';\rimport {\r  PlusOutlined,\r  SearchOutlined,\r  FilterOutlined,\r  DownloadOutlined,\r  UploadOutlined,\r  UserOutlined,\r  PhoneOutlined,\r  MailOutlined,\r  GlobalOutlined,\r  StarOutlined,\r  StarFilled,\r  MoreOutlined,\r  SwapOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  SyncOutlined,\r  TeamOutlined,\r  DollarOutlined,\r  TrophyOutlined\r} from '@ant-design/icons';\rimport { PageHeader } from '@/shared/components/PageHeader';\rimport { leadService, Lead, CreateLeadDto, LeadListParams } from '@/services/crm/leadService';\rimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\rconst { Option } = Select;\rconst { Search } = Input;\rexport const LeadsPage: React.FC = () => {\r  const queryClient = useQueryClient();\r  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\r  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\r  const [isConvertModalOpen, setIsConvertModalOpen] = useState(false);\r  const [selectedLead, setSelectedLead] = useState<Lead | null>(null);\r  const [filters, setFilters] = useState<LeadListParams>({\r    page: 1,\r    pageSize: 10,\r    sortBy: 'createdDate',\r    sortDirection: 'desc'\r  });\r  const [form] = Form.useForm();\r  const [convertForm] = Form.useForm();\r  // Fetch leads\r  const { data: leadsData, isLoading, refetch } = useQuery({\r    queryKey: ['leads', filters],\r    queryFn: () => leadService.getLeads(filters)\r  });\r  // Create lead mutation\r  const createLeadMutation = useMutation({\r    mutationFn: (data: CreateLeadDto) => leadService.createLead(data),\r    onSuccess: () => {\r      message.success('Lead başarıyla oluşturuldu');\r      setIsCreateModalOpen(false);\r      form.resetFields();\r      queryClient.invalidateQueries({ queryKey: ['leads'] });\r    },\r    onError: () => {\r      message.error('Lead oluşturulurken hata oluştu');\r    }\r  });\r  // Convert lead mutation\r  const convertLeadMutation = useMutation({\r    mutationFn: ({ id, data }: { id: number; data: any }) => leadService.convertLead(id, data),\r    onSuccess: () => {\r      message.success('Lead başarıyla dönüştürüldü');\r      setIsConvertModalOpen(false);\r      convertForm.resetFields();\r      queryClient.invalidateQueries({ queryKey: ['leads'] });\r    },\r    onError: () => {\r      message.error('Lead dönüştürülürken hata oluştu');\r    }\r  });\r  // Delete lead mutation\r  const deleteLeadMutation = useMutation({\r    mutationFn: (id: number) => leadService.deleteLead(id),\r    onSuccess: () => {\r      message.success('Lead başarıyla silindi');\r      queryClient.invalidateQueries({ queryKey: ['leads'] });\r    },\r    onError: () => {\r      message.error('Lead silinirken hata oluştu');\r    }\r  });\r  const getStatusColor = (status: string) => {\r    const statusColors: Record<string, string> = {\r      'New': 'blue',\r      'Contacted': 'cyan',\r      'Qualified': 'green',\r      'Unqualified': 'red',\r      'Working': 'orange',\r      'Converted': 'success'\r    };\r    return statusColors[status] || 'default';\r  };\r  const getRatingIcon = (rating: string) => {\r    const ratings: Record<string, { icon: React.ReactNode; color: string }> = {\r      'Hot': { icon: <StarFilled />, color: '#ff4d4f' },\r      'Warm': { icon: <StarFilled />, color: '#fa8c16' },\r      'Cold': { icon: <StarOutlined />, color: '#1890ff' }\r    };\r    return ratings[rating] || { icon: <StarOutlined />, color: '#d9d9d9' };\r  };\r  const columns = [\r    {\r      title: 'Lead',\r      key: 'lead',\r      fixed: 'left',\r      width: 250,\r      render: (record: Lead) => (\r        <Space direction=\"vertical\" size={0}>\r          <Space>\r            <Avatar icon={<UserOutlined />} style={{ backgroundColor: '#1890ff' }}>\r              {record.firstName?.[0]}{record.lastName?.[0]}\r            </Avatar>\r            <div>\r              <div style={{ fontWeight: 500 }}>{record.fullName}</div>\r              <div style={{ fontSize: 12, color: '#999' }}>{record.companyName}</div>\r            </div>\r          </Space>\r        </Space>\r      )\r    },\r    {\r      title: 'İletişim',\r      key: 'contact',\r      width: 200,\r      render: (record: Lead) => (\r        <Space direction=\"vertical\" size={0}>\r          <Space>\r            <MailOutlined style={{ color: '#999' }} />\r            <span style={{ fontSize: 12 }}>{record.email}</span>\r          </Space>\r          {record.phone && (\r            <Space>\r              <PhoneOutlined style={{ color: '#999' }} />\r              <span style={{ fontSize: 12 }}>{record.phone}</span>\r            </Space>\r          )}\r        </Space>\r      )\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      width: 120,\r      render: (status: string) => (\r        <Tag color={getStatusColor(status)}>{status}</Tag>\r      )\r    },\r    {\r      title: 'Rating',\r      dataIndex: 'rating',\r      key: 'rating',\r      width: 100,\r      render: (rating: string) => {\r        const ratingInfo = getRatingIcon(rating);\r        return (\r          <Space>\r            <span style={{ color: ratingInfo.color }}>{ratingInfo.icon}</span>\r            <span>{rating}</span>\r          </Space>\r        );\r      }\r    },\r    {\r      title: 'Skor',\r      dataIndex: 'leadScore',\r      key: 'leadScore',\r      width: 100,\r      render: (score: number) => (\r        <Badge \r          count={score} \r          style={{ \r            backgroundColor: score >= 70 ? '#52c41a' : score >= 40 ? '#fa8c16' : '#f5222d' \r          }}\r          overflowCount={999}\r        />\r      )\r    },\r    {\r      title: 'Kaynak',\r      dataIndex: 'source',\r      key: 'source',\r      width: 120,\r      render: (source: string) => <Tag>{source || 'Direct'}</Tag>\r    },\r    {\r      title: 'Sektör',\r      dataIndex: 'industry',\r      key: 'industry',\r      width: 150\r    },\r    {\r      title: 'Pozisyon',\r      dataIndex: 'jobTitle',\r      key: 'jobTitle',\r      width: 150\r    },\r    {\r      title: 'Oluşturma',\r      dataIndex: 'createdDate',\r      key: 'createdDate',\r      width: 120,\r      render: (date: string) => new Date(date).toLocaleDateString('tr-TR')\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      fixed: 'right',\r      width: 100,\r      render: (record: Lead) => (\r        <Dropdown\r          menu={{\r            items: [\r              {\r                key: 'view',\r                icon: <UserOutlined />,\r                label: 'Görüntüle'\r              },\r              {\r                key: 'edit',\r                icon: <UserOutlined />,\r                label: 'Düzenle'\r              },\r              {\r                type: 'divider'\r              },\r              {\r                key: 'convert',\r                icon: <SwapOutlined />,\r                label: 'Müşteriye Dönüştür',\r                onClick: () => {\r                  setSelectedLead(record);\r                  setIsConvertModalOpen(true);\r                }\r              },\r              {\r                key: 'qualify',\r                icon: <CheckCircleOutlined />,\r                label: 'Qualify',\r                disabled: record.status === 'Qualified'\r              },\r              {\r                key: 'disqualify',\r                icon: <CloseCircleOutlined />,\r                label: 'Disqualify',\r                disabled: record.status === 'Unqualified'\r              },\r              {\r                type: 'divider'\r              },\r              {\r                key: 'delete',\r                icon: <CloseCircleOutlined />,\r                label: 'Sil',\r                danger: true,\r                onClick: () => {\r                  Modal.confirm({\r                    title: 'Lead Sil',\r                    content: 'Bu lead\\'i silmek istediğinize emin misiniz?',\r                    okText: 'Sil',\r                    okType: 'danger',\r                    cancelText: 'İptal',\r                    onOk: () => deleteLeadMutation.mutate(record.id)\r                  });\r                }\r              }\r            ]\r          }}\r        >\r          <Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r        </Dropdown>\r      )\r    }\r  ];\r  const handleTableChange = (pagination: any, filters: any, sorter: any) => {\r    setFilters({\r      ...filters,\r      page: pagination.current,\r      pageSize: pagination.pageSize,\r      sortBy: sorter.field || 'createdDate',\r      sortDirection: sorter.order === 'ascend' ? 'asc' : 'desc'\r    });\r  };\r  return (\r    <div>\r      <PageHeader\r        title=\"Leads\"\r        subtitle=\"Potansiyel müşterilerinizi yönetin ve takip edin\"\r        extra={[\r          <Button key=\"import\" icon={<UploadOutlined />} aria-label=\"upload outlined\">\r            İçe Aktar\r          </Button>,\r          <Button key=\"export\" icon={<DownloadOutlined />} aria-label=\"download outlined\">\r            Dışa Aktar\r          </Button>,\r          <Button\r            key=\"create\"\r            type=\"primary\"\r            icon={<PlusOutlined />}\r            onClick={() = aria-label=\"plus outlined\"> setIsCreateModalOpen(true)}\r          >\r            Yeni Lead\r          </Button>\r        ]}\r      />\r      {/* Statistics */}\r      <Row gutter={16} style={{ marginBottom: 16 }}>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Toplam Lead\"\r              value={leadsData?.totalCount || 0}\r              prefix={<TeamOutlined />}\r            />\r          </Card>\r        </Col>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Qualified Leads\"\r              value={leadsData?.items.filter(l => l.status === 'Qualified').length || 0}\r              prefix={<CheckCircleOutlined />}\r              valueStyle={{ color: '#52c41a' }}\r            />\r          </Card>\r        </Col>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Ortalama Skor\"\r              value={\r                leadsData?.items.length \r                  ? Math.round(leadsData.items.reduce((acc, l) => acc + l.leadScore, 0) / leadsData.items.length)\r                  : 0\r              }\r              prefix={<TrophyOutlined />}\r              valueStyle={{ color: '#fa8c16' }}\r            />\r          </Card>\r        </Col>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Dönüşüm Oranı\"\r              value={\r                leadsData?.items.length\r                  ? Math.round((leadsData.items.filter(l => l.isConverted).length / leadsData.items.length) * 100)\r                  : 0\r              }\r              suffix=\"%\"\r              prefix={<SwapOutlined />}\r              valueStyle={{ color: '#1890ff' }}\r            />\r          </Card>\r        </Col>\r      </Row>\r      {/* Filters */}\r      <Card style={{ marginBottom: 16 }}>\r        <Row gutter={16}>\r          <Col span={8}>\r            <Search\r              placeholder=\"Lead ara...\"\r              allowClear\r              enterButton={<SearchOutlined />}\r              onSearch={(value) => setFilters({ ...filters, search: value })}\r            />\r          </Col>\r          <Col span={4}>\r            <Select\r              style={{ width: '100%' }}\r              placeholder=\"Durum\"\r              allowClear\r              onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, status: value })}\r            >\r              <Option value=\"New\">New</Option>\r              <Option value=\"Contacted\">Contacted</Option>\r              <Option value=\"Qualified\">Qualified</Option>\r              <Option value=\"Unqualified\">Unqualified</Option>\r              <Option value=\"Working\">Working</Option>\r              <Option value=\"Converted\">Converted</Option>\r            </Select>\r          </Col>\r          <Col span={4}>\r            <Select\r              style={{ width: '100%' }}\r              placeholder=\"Rating\"\r              allowClear\r              onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, rating: value })}\r            >\r              <Option value=\"Hot\">Hot</Option>\r              <Option value=\"Warm\">Warm</Option>\r              <Option value=\"Cold\">Cold</Option>\r            </Select>\r          </Col>\r          <Col span={4}>\r            <Select\r              style={{ width: '100%' }}\r              placeholder=\"Kaynak\"\r              allowClear\r              onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, source: value })}\r            >\r              <Option value=\"Website\">Website</Option>\r              <Option value=\"Email\">Email</Option>\r              <Option value=\"Phone\">Phone</Option>\r              <Option value=\"Social Media\">Social Media</Option>\r              <Option value=\"Referral\">Referral</Option>\r              <Option value=\"Direct\">Direct</Option>\r            </Select>\r          </Col>\r          <Col span={4}>\r            <Button icon={<SyncOutlined />} onClick={() = aria-label=\"sync outlined\"> refetch()}>\r              Yenile\r            </Button>\r          </Col>\r        </Row>\r      </Card>\r      {/* Table */}\r      <Card>\r        <Table\r          rowSelection={{\r            selectedRowKeys,\r            onChange: setSelectedRowKeys\r          }}\r          columns={columns}\r          dataSource={leadsData?.items || []}\r          rowKey=\"id\"\r          loading={isLoading}\r          onChange={handleTableChange}\r          pagination={{\r            current: filters.page,\r            pageSize: filters.pageSize,\r            total: leadsData?.totalCount || 0,\r            showSizeChanger: true,\r            showTotal: (total) => `Toplam ${total} lead`\r          }}\r          scroll={{ x: 1500 }}\r        />\r      </Card>\r      {/* Create Lead Modal */}\r      <Modal\r        title=\"Yeni Lead Oluştur\"\r        open={isCreateModalOpen}\r        onCancel={() => {\r          setIsCreateModalOpen(false);\r          form.resetFields();\r        }}\r        footer={null}\r        width={720}\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={(values) => createLeadMutation.mutate(values)}\r        >\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"firstName\"\r                label=\"Ad\"\r                rules={[{ required: true, message: 'Ad zorunludur' }]}\r              >\r                <Input placeholder=\"Ad\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"lastName\"\r                label=\"Soyad\"\r                rules={[{ required: true, message: 'Soyad zorunludur' }]}\r              >\r                <Input placeholder=\"Soyad\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"email\"\r                label=\"Email\"\r                rules={[\r                  { required: true, message: 'Email zorunludur' },\r                  { type: 'email', message: 'Geçerli bir email giriniz' }\r                ]}\r              >\r                <Input placeholder=\"Email\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"phone\" label=\"Telefon\">\r                <Input placeholder=\"Telefon\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item name=\"companyName\" label=\"Şirket\">\r                <Input placeholder=\"Şirket Adı\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"jobTitle\" label=\"Pozisyon\">\r                <Input placeholder=\"Pozisyon\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item name=\"industry\" label=\"Sektör\">\r                <Select placeholder=\"Sektör seçiniz\" aria-label=\"select field\">\r                  <Option value=\"Technology\">Teknoloji</Option>\r                  <Option value=\"Finance\">Finans</Option>\r                  <Option value=\"Healthcare\">Sağlık</Option>\r                  <Option value=\"Manufacturing\">Üretim</Option>\r                  <Option value=\"Retail\">Perakende</Option>\r                  <Option value=\"Education\">Eğitim</Option>\r                  <Option value=\"Other\">Diğer</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"source\" label=\"Kaynak\">\r                <Select placeholder=\"Kaynak seçiniz\" aria-label=\"select field\">\r                  <Option value=\"Website\">Website</Option>\r                  <Option value=\"Email\">Email</Option>\r                  <Option value=\"Phone\">Phone</Option>\r                  <Option value=\"Social Media\">Social Media</Option>\r                  <Option value=\"Referral\">Referral</Option>\r                  <Option value=\"Direct\">Direct</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item name=\"numberOfEmployees\" label=\"Çalışan Sayısı\">\r                <InputNumber style={{ width: '100%' }} placeholder=\"Çalışan sayısı\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"annualRevenue\" label=\"Yıllık Gelir\">\r                <InputNumber\r                  style={{ width: '100%' }}\r                  formatter={value = aria-label=\"input field\"> `₺ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r                  parser={value => value!.replace(/\\₺\\s?|(,*)/g, '')}\r                  placeholder=\"Yıllık gelir\"\r                />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item name=\"description\" label=\"Açıklama\">\r            <Input.TextArea rows={3} placeholder=\"Açıklama\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item style={{ marginBottom: 0 }}>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => {\r                setIsCreateModalOpen(false);\r                form.resetFields();\r              }}>\r                İptal\r              </Button>\r              <Button type=\"primary\" htmlType=\"submit\" loading={createLeadMutation.isPending}>\r                Oluştur\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Convert Lead Modal */}\r      <Modal\r        title=\"Lead'i Müşteriye Dönüştür\"\r        open={isConvertModalOpen}\r        onCancel={() => {\r          setIsConvertModalOpen(false);\r          convertForm.resetFields();\r          setSelectedLead(null);\r        }}\r        footer={null}\r        width={600}\r      >\r        <Form\r          form={convertForm}\r          layout=\"vertical\"\r          onFinish={(values) => {\r            if (selectedLead) {\r              convertLeadMutation.mutate({ id: selectedLead.id, data: values });\r            }\r          }}\r        >\r          <Form.Item\r            name=\"createOpportunity\"\r            valuePropName=\"checked\"\r            initialValue={true}\r          >\r            <Space>\r              <input type=\"checkbox\" / aria-label=\"input field\">\r              <span>Fırsat oluştur</span>\r            </Space>\r          </Form.Item>\r          <Form.Item\r            name=\"opportunityName\"\r            label=\"Fırsat Adı\"\r            rules={[{ required: true, message: 'Fırsat adı zorunludur' }]}\r          >\r            <Input placeholder=\"Fırsat adı\" / aria-label=\"input field\">\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"opportunityAmount\"\r                label=\"Tahmini Değer\"\r              >\r                <InputNumber\r                  style={{ width: '100%' }}\r                  formatter={value = aria-label=\"input field\"> `₺ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r                  parser={value => value!.replace(/\\₺\\s?|(,*)/g, '')}\r                  placeholder=\"Tahmini değer\"\r                />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"opportunityExpectedCloseDate\"\r                label=\"Tahmini Kapanış\"\r              >\r                <DatePicker style={{ width: '100%' }} placeholder=\"Tarih seçiniz\" />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Divider />\r          <Form.Item\r            name=\"createTask\"\r            valuePropName=\"checked\"\r          >\r            <Space>\r              <input type=\"checkbox\" / aria-label=\"input field\">\r              <span>Takip görevi oluştur</span>\r            </Space>\r          </Form.Item>\r          <Form.Item\r            name=\"taskSubject\"\r            label=\"Görev Konusu\"\r          >\r            <Input placeholder=\"Görev konusu\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item\r            name=\"taskDueDate\"\r            label=\"Görev Tarihi\"\r          >\r            <DatePicker style={{ width: '100%' }} placeholder=\"Tarih seçiniz\" />\r          </Form.Item>\r          <Form.Item style={{ marginBottom: 0 }}>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => {\r                setIsConvertModalOpen(false);\r                convertForm.resetFields();\r                setSelectedLead(null);\r              }}>\r                İptal\r              </Button>\r              <Button type=\"primary\" htmlType=\"submit\" loading={convertLeadMutation.isPending}>\r                Dönüştür\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/crm/pages/LeadsPage.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { Card, Table, Button, Space, Tag, Input, Select, DatePicker, message, Drawer, Form, InputNumber, Row, Col, Statistic } from 'antd';\rimport { PlusOutlined, SearchOutlined, EditOutlined, DeleteOutlined, DollarOutlined, CalendarOutlined, UserOutlined } from '@ant-design/icons';\rimport type { ColumnsType } from 'antd/es/table';\rimport dayjs from 'dayjs';\rinterface Opportunity {\r  id: number;\r  name: string;\r  customerId: number;\r  customerName: string;\r  value: number;\r  probability: number;\r  expectedRevenue: number;\r  stage: string;\r  status: string;\r  closeDate: string;\r  owner: string;\r  source: string;\r  description: string;\r  createdDate: string;\r  lastActivity: string;\r}\rconst stages = [\r  { value: 'qualification', label: 'Kalifikasyon', color: 'blue' },\r  { value: 'needs_analysis', label: 'İhtiyaç Analizi', color: 'cyan' },\r  { value: 'proposal', label: 'Teklif', color: 'orange' },\r  { value: 'negotiation', label: 'Müzakere', color: 'purple' },\r  { value: 'closed_won', label: 'Kazanıldı', color: 'green' },\r  { value: 'closed_lost', label: 'Kaybedildi', color: 'red' },\r];\rconst mockData: Opportunity[] = [\r  {\r    id: 1,\r    name: 'ERP Yazılımı Satışı',\r    customerId: 1,\r    customerName: 'ABC Teknoloji A.Ş.',\r    value: 150000,\r    probability: 75,\r    expectedRevenue: 112500,\r    stage: 'proposal',\r    status: 'active',\r    closeDate: '2024-02-15',\r    owner: 'Ahmet Yılmaz',\r    source: 'Website',\r    description: 'Kurumsal ERP çözümü için görüşmeler devam ediyor',\r    createdDate: '2024-01-10',\r    lastActivity: '2024-01-25',\r  },\r  {\r    id: 2,\r    name: 'CRM Modülü Entegrasyonu',\r    customerId: 2,\r    customerName: 'XYZ Holding',\r    value: 85000,\r    probability: 60,\r    expectedRevenue: 51000,\r    stage: 'needs_analysis',\r    status: 'active',\r    closeDate: '2024-03-01',\r    owner: 'Mehmet Demir',\r    source: 'Referral',\r    description: 'Mevcut sistemlerine CRM modülü entegrasyonu',\r    createdDate: '2024-01-15',\r    lastActivity: '2024-01-28',\r  },\r];\rexport const OpportunitiesPage: React.FC = () => {\r  const [opportunities, setOpportunities] = useState<Opportunity[]>(mockData);\r  const [loading, setLoading] = useState(false);\r  const [drawerVisible, setDrawerVisible] = useState(false);\r  const [editingOpportunity, setEditingOpportunity] = useState<Opportunity | null>(null);\r  const [searchText, setSearchText] = useState('');\r  const [filterStage, setFilterStage] = useState<string | undefined>();\r  const [form] = Form.useForm();\r  const columns: ColumnsType<Opportunity> = [\r    {\r      title: 'Fırsat Adı',\r      dataIndex: 'name',\r      key: 'name',\r      render: (text, record) => (\r        <Space direction=\"vertical\" size={0}>\r          <a style={{ fontWeight: 500 }}>{text}</a>\r          <small style={{ color: '#8c8c8c' }}>{record.customerName}</small>\r        </Space>\r      ),\r    },\r    {\r      title: 'Değer',\r      dataIndex: 'value',\r      key: 'value',\r      align: 'right',\r      render: (value) => (\r        <span style={{ fontWeight: 500 }}>\r          ₺{value.toLocaleString('tr-TR')}\r        </span>\r      ),\r    },\r    {\r      title: 'Olasılık',\r      dataIndex: 'probability',\r      key: 'probability',\r      align: 'center',\r      render: (probability) => (\r        <Tag color={probability >= 70 ? 'green' : probability >= 40 ? 'orange' : 'red'}>\r          %{probability}\r        </Tag>\r      ),\r    },\r    {\r      title: 'Beklenen Gelir',\r      dataIndex: 'expectedRevenue',\r      key: 'expectedRevenue',\r      align: 'right',\r      render: (value) => `₺${value.toLocaleString('tr-TR')}`,\r    },\r    {\r      title: 'Aşama',\r      dataIndex: 'stage',\r      key: 'stage',\r      render: (stage) => {\r        const stageInfo = stages.find(s => s.value === stage);\r        return <Tag color={stageInfo?.color}>{stageInfo?.label}</Tag>;\r      },\r    },\r    {\r      title: 'Kapanış Tarihi',\r      dataIndex: 'closeDate',\r      key: 'closeDate',\r      render: (date) => dayjs(date).format('DD.MM.YYYY'),\r    },\r    {\r      title: 'Sorumlu',\r      dataIndex: 'owner',\r      key: 'owner',\r      render: (owner) => (\r        <Space size={4}>\r          <UserOutlined style={{ fontSize: 12, color: '#8c8c8c' }} />\r          <span>{owner}</span>\r        </Space>\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      fixed: 'right',\r      width: 100,\r      render: (_, record) => (\r        <Space>\r          <Button\r            type=\"text\"\r            icon={<EditOutlined />}\r            onClick={() = aria-label=\"edit outlined\"> handleEdit(record)}\r          />\r          <Button\r            type=\"text\"\r            danger\r            icon={<DeleteOutlined />}\r            onClick={() = aria-label=\"delete outlined\"> handleDelete(record.id)}\r          />\r        </Space>\r      ),\r    },\r  ];\r  const handleEdit = (opportunity: Opportunity) => {\r    setEditingOpportunity(opportunity);\r    form.setFieldsValue({\r      ...opportunity,\r      closeDate: dayjs(opportunity.closeDate),\r    });\r    setDrawerVisible(true);\r  };\r  const handleDelete = (id: number) => {\r    setOpportunities(prev => prev.filter(o => o.id !== id));\r    message.success('Fırsat silindi');\r  };\r  const handleSubmit = (values: any) => {\r    const formData = {\r      ...values,\r      closeDate: values.closeDate.format('YYYY-MM-DD'),\r      expectedRevenue: values.value * (values.probability / 100),\r    };\r    if (editingOpportunity) {\r      setOpportunities(prev => \r        prev.map(o => o.id === editingOpportunity.id ? { ...o, ...formData } : o)\r      );\r      message.success('Fırsat güncellendi');\r    } else {\r      const newOpportunity = {\r        ...formData,\r        id: opportunities.length + 1,\r        createdDate: dayjs().format('YYYY-MM-DD'),\r        lastActivity: dayjs().format('YYYY-MM-DD'),\r        status: 'active',\r      };\r      setOpportunities(prev => [...prev, newOpportunity]);\r      message.success('Yeni fırsat eklendi');\r    }\r    setDrawerVisible(false);\r    form.resetFields();\r    setEditingOpportunity(null);\r  };\r  const filteredData = opportunities.filter(o => {\r    const matchesSearch = o.name.toLowerCase().includes(searchText.toLowerCase()) ||\r                         o.customerName.toLowerCase().includes(searchText.toLowerCase());\r    const matchesStage = !filterStage || o.stage === filterStage;\r    return matchesSearch && matchesStage;\r  });\r  const totalValue = filteredData.reduce((sum, o) => sum + o.value, 0);\r  const totalExpected = filteredData.reduce((sum, o) => sum + o.expectedRevenue, 0);\r  const avgProbability = filteredData.length > 0 \r    ? Math.round(filteredData.reduce((sum, o) => sum + o.probability, 0) / filteredData.length)\r    : 0;\r  return (\r    <div style={{ padding: 24 }}>\r      <Row gutter={16} style={{ marginBottom: 24 }}>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Toplam Değer\"\r              value={totalValue}\r              prefix=\"₺\"\r              formatter={(value) => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r            />\r          </Card>\r        </Col>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Beklenen Gelir\"\r              value={totalExpected}\r              prefix=\"₺\"\r              formatter={(value) => `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r            />\r          </Card>\r        </Col>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Ortalama Olasılık\"\r              value={avgProbability}\r              suffix=\"%\"\r            />\r          </Card>\r        </Col>\r        <Col span={6}>\r          <Card>\r            <Statistic\r              title=\"Aktif Fırsatlar\"\r              value={filteredData.length}\r              suffix=\"adet\"\r            />\r          </Card>\r        </Col>\r      </Row>\r      <Card>\r        <Space style={{ marginBottom: 16, width: '100%', justifyContent: 'space-between' }}>\r          <Space>\r            <Input\r              placeholder=\"Ara...\"\r              prefix={<SearchOutlined / aria-label=\"input field\">}\r              value={searchText}\r              onChange={(e) => setSearchText(e.target.value)}\r              style={{ width: 250 }}\r            />\r            <Select\r              placeholder=\"Aşama Filtrele\"\r              allowClear\r              style={{ width: 180 }}\r              value={filterStage}\r              onChange={setFilterStage}\r              options={stages}\r            / aria-label=\"select field\">\r          </Space>\r          <Button\r            type=\"primary\"\r            icon={<PlusOutlined />}\r            onClick={() = aria-label=\"plus outlined\"> {\r              setEditingOpportunity(null);\r              form.resetFields();\r              setDrawerVisible(true);\r            }}\r          >\r            Yeni Fırsat\r          </Button>\r        </Space>\r        <Table\r          columns={columns}\r          dataSource={filteredData}\r          rowKey=\"id\"\r          loading={loading}\r          pagination={{\r            pageSize: 10,\r            showTotal: (total) => `Toplam ${total} fırsat`,\r          }}\r        />\r      </Card>\r      <Drawer\r        title={editingOpportunity ? 'Fırsatı Düzenle' : 'Yeni Fırsat'}\r        width={600}\r        open={drawerVisible}\r        onClose={() => {\r          setDrawerVisible(false);\r          form.resetFields();\r          setEditingOpportunity(null);\r        }}\r        footer={\r          <Space style={{ float: 'right' }}>\r            <Button onClick={() => setDrawerVisible(false)}>İptal</Button>\r            <Button type=\"primary\" onClick={() => form.submit()}>\r              {editingOpportunity ? 'Güncelle' : 'Ekle'}\r            </Button>\r          </Space>\r        }\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleSubmit}\r        >\r          <Form.Item\r            name=\"name\"\r            label=\"Fırsat Adı\"\r            rules={[{ required: true, message: 'Fırsat adı gerekli' }]}\r          >\r            <Input / aria-label=\"input field\">\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"customerName\"\r                label=\"Müşteri\"\r                rules={[{ required: true, message: 'Müşteri gerekli' }]}\r              >\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"stage\"\r                label=\"Aşama\"\r                rules={[{ required: true, message: 'Aşama gerekli' }]}\r              >\r                <Select options={stages} / aria-label=\"select field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"value\"\r                label=\"Değer (₺)\"\r                rules={[{ required: true, message: 'Değer gerekli' }]}\r              >\r                <InputNumber\r                  style={{ width: '100%' }}\r                  formatter={(value) = aria-label=\"input field\"> `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r                  parser={(value) => value!.replace(/\\$\\s?|(,*)/g, '')}\r                />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"probability\"\r                label=\"Olasılık (%)\"\r                rules={[{ required: true, message: 'Olasılık gerekli' }]}\r              >\r                <InputNumber\r                  style={{ width: '100%' }}\r                  min={0}\r                  max={100}\r                  formatter={(value) = aria-label=\"input field\"> `${value}%`}\r                  parser={(value) => value!.replace('%', '')}\r                />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"closeDate\"\r                label=\"Tahmini Kapanış\"\r                rules={[{ required: true, message: 'Kapanış tarihi gerekli' }]}\r              >\r                <DatePicker style={{ width: '100%' }} format=\"DD.MM.YYYY\" />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"owner\"\r                label=\"Sorumlu\"\r                rules={[{ required: true, message: 'Sorumlu gerekli' }]}\r              >\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item\r            name=\"source\"\r            label=\"Kaynak\"\r          >\r            <Select aria-label=\"select field\">\r              <Select.Option value=\"Website\" aria-label=\"select field\">Website</Select.Option>\r              <Select.Option value=\"Referral\" aria-label=\"select field\">Referans</Select.Option>\r              <Select.Option value=\"Cold Call\" aria-label=\"select field\">Soğuk Arama</Select.Option>\r              <Select.Option value=\"Partner\" aria-label=\"select field\">İş Ortağı</Select.Option>\r              <Select.Option value=\"Campaign\" aria-label=\"select field\">Kampanya</Select.Option>\r            </Select>\r          </Form.Item>\r          <Form.Item\r            name=\"description\"\r            label=\"Açıklama\"\r          >\r            <Input.TextArea rows={4} / aria-label=\"input field\">\r          </Form.Item>\r        </Form>\r      </Drawer>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/crm/pages/OpportunitiesPage.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React from 'react';\rimport { PageContainer } from '@ant-design/pro-components';\rimport { Card, Row, Col, Statistic, Progress, Typography, Tag, Table, Timeline, Alert, Space, Badge, Button } from 'antd';\rimport { useNotifications } from '@/features/master/contexts/NotificationContext';\rimport {\r  TeamOutlined,\r  CreditCardOutlined,\r  ArrowUpOutlined,\r  CloudServerOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r  CheckCircleOutlined,\r  ExclamationCircleOutlined,\r  CloseCircleOutlined,\r  UserOutlined,\r} from '@ant-design/icons';\rimport { Line, Pie } from '@ant-design/charts';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rexport const MasterDashboard: React.FC = () => {\r  const { addNotification } = useNotifications();\r  const sendTestNotification = () => {\r    addNotification({\r      type: 'info',\r      title: 'Test Bildirimi',\r      message: 'Bu bir test bildirimidir. Sistem normal çalışıyor.',\r      priority: 'medium',\r      category: 'system'\r    });\r  };\r  // System Health Data\r  const systemHealth = {\r    cpu: 45,\r    memory: 68,\r    disk: 72,\r    network: 35,\r  };\r  // Revenue Chart Data\r  const revenueData = [\r    { month: 'Ocak', value: 125000, type: 'Gelir' },\r    { month: 'Şubat', value: 145000, type: 'Gelir' },\r    { month: 'Mart', value: 168000, type: 'Gelir' },\r    { month: 'Nisan', value: 185000, type: 'Gelir' },\r    { month: 'Mayıs', value: 210000, type: 'Gelir' },\r    { month: 'Haziran', value: 235000, type: 'Gelir' },\r  ];\r  // Tenant Distribution Data\r  const tenantDistribution = [\r    { type: 'Başlangıç', value: 245, percent: 49 },\r    { type: 'Profesyonel', value: 185, percent: 37 },\r    { type: 'Kurumsal', value: 70, percent: 14 },\r  ];\r  // Recent Tenants\r  const recentTenants = [\r    { id: 1, name: 'TechnoSoft Ltd.', plan: 'Profesyonel', status: 'active', date: '2024-01-10' },\r    { id: 2, name: 'KayalarGrup A.Ş.', plan: 'Kurumsal', status: 'active', date: '2024-01-09' },\r    { id: 3, name: 'DemirTicaret', plan: 'Başlangıç', status: 'pending', date: '2024-01-09' },\r    { id: 4, name: 'YıldızHolding', plan: 'Kurumsal', status: 'active', date: '2024-01-08' },\r    { id: 5, name: 'AkınSoft', plan: 'Profesyonel', status: 'suspended', date: '2024-01-08' },\r  ];\r  // System Events\r  const systemEvents = [\r    { time: '10:30', event: 'Yeni tenant kaydı: TechnoSoft Ltd.', type: 'success' },\r    { time: '10:15', event: 'Yedekleme başarıyla tamamlandı', type: 'info' },\r    { time: '09:45', event: 'API rate limit aşıldı: Tenant #234', type: 'warning' },\r    { time: '09:30', event: 'Sistem güncellmesi uygulandı v2.4.1', type: 'success' },\r    { time: '09:00', event: 'Database maintenance tamamlandı', type: 'info' },\r  ];\r  const columns = [\r    {\r      title: 'Tenant',\r      dataIndex: 'name',\r      key: 'name',\r      render: (text: string) => <Text strong>{text}</Text>,\r    },\r    {\r      title: 'Plan',\r      dataIndex: 'plan',\r      key: 'plan',\r      render: (plan: string) => {\r        const color = plan === 'Kurumsal' ? 'gold' : plan === 'Profesyonel' ? 'blue' : 'green';\r        return <Tag color={color}>{plan}</Tag>;\r      },\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status: string) => {\r        const config = {\r          active: { color: 'success', text: 'Aktif' },\r          pending: { color: 'warning', text: 'Onay Bekliyor' },\r          suspended: { color: 'error', text: 'Askıda' },\r        };\r        return <Tag color={config[status as keyof typeof config].color}>{config[status as keyof typeof config].text}</Tag>;\r      },\r    },\r    {\r      title: 'Kayıt Tarihi',\r      dataIndex: 'date',\r      key: 'date',\r    },\r  ];\r  const revenueConfig = {\r    data: revenueData,\r    xField: 'month',\r    yField: 'value',\r    seriesField: 'type',\r    smooth: true,\r    animation: {\r      appear: {\r        animation: 'path-in',\r        duration: 1000,\r      },\r    },\r    yAxis: {\r      label: {\r        formatter: (v: string) => `₺${Number(v).toLocaleString('tr-TR')}`,\r      },\r    },\r  };\r  const tenantConfig = {\r    data: tenantDistribution,\r    angleField: 'value',\r    colorField: 'type',\r    radius: 1,\r    innerRadius: 0.6,\r    label: {\r      type: 'inner',\r      offset: '-50%',\r      content: '{value}',\r      style: {\r        textAlign: 'center',\r        fontSize: 14,\r      },\r    },\r    interactions: [{ type: 'element-selected' }, { type: 'element-active' }],\r    statistic: {\r      title: false,\r      content: {\r        style: {\r          whiteSpace: 'pre-wrap',\r          overflow: 'hidden',\r          textOverflow: 'ellipsis',\r        },\r        content: '500\\nToplam',\r      },\r    },\r  };\r  return (\r    <PageContainer\r      title=\"Master Dashboard\"\r      subTitle=\"Sistem yönetimi ve izleme paneli\"\r      extra={[\r        <Button key=\"test-notif\" type=\"primary\" onClick={sendTestNotification}>\r          Test Bildirimi Gönder\r        </Button>,\r        <Tag key=\"env\" color=\"blue\" icon={<CloudServerOutlined />}>Production</Tag>,\r        <Tag key=\"version\" color=\"green\">v2.4.1</Tag>,\r      ]}\r    >\r      {/* Critical Alerts */}\r      <Alert\r        message=\"Sistem Durumu\"\r        description=\"Tüm sistemler normal çalışıyor. Son 24 saatte %99.9 uptime.\"\r        type=\"success\"\r        showIcon\r        icon={<CheckCircleOutlined />}\r        closable\r        style={{ marginBottom: 24 }}\r      />\r      {/* Main Stats */}\r      <Row gutter={[24, 24]}>\r        <Col xs={24} sm={12} lg={6}>\r          <Card bordered={false}>\r            <Statistic\r              title=\"Toplam Tenant\"\r              value={500}\r              prefix={<TeamOutlined />}\r              suffix={\r                <span style={{ fontSize: 14, color: '#52c41a' }}>\r                  <ArrowUpOutlined /> 12%\r                </span>\r              }\r              valueStyle={{ color: '#1890ff' }}\r            />\r            <Progress percent={78} showInfo={false} strokeColor=\"#1890ff\" />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>Bu ay 45 yeni tenant</Text>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card bordered={false}>\r            <Statistic\r              title=\"Aktif Abonelik\"\r              value={485}\r              prefix={<CreditCardOutlined />}\r              suffix={\r                <span style={{ fontSize: 14, color: '#52c41a' }}>\r                  <ArrowUpOutlined /> 8%\r                </span>\r              }\r              valueStyle={{ color: '#52c41a' }}\r            />\r            <Progress percent={97} showInfo={false} strokeColor=\"#52c41a\" />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>15 trial kullanıcı</Text>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card bordered={false}>\r            <Statistic\r              title=\"Aylık Gelir\"\r              value={235000}\r              prefix=\"₺\"\r              valueStyle={{ color: '#faad14' }}\r            />\r            <Progress percent={85} showInfo={false} strokeColor=\"#faad14\" />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>Hedef: ₺275,000</Text>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card bordered={false}>\r            <Statistic\r              title=\"Sistem Uptime\"\r              value={99.9}\r              suffix=\"%\"\r              prefix={<CloudServerOutlined />}\r              valueStyle={{ color: '#ff4d4f' }}\r            />\r            <Progress percent={99.9} showInfo={false} strokeColor=\"#ff4d4f\" />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>30 gün kesintisiz</Text>\r          </Card>\r        </Col>\r      </Row>\r      {/* System Health & Revenue */}\r      <Row gutter={[24, 24]} style={{ marginTop: 24 }}>\r        <Col xs={24} lg={8}>\r          <Card title=\"Sistem Sağlığı\" bordered={false}>\r            <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\r              <div>\r                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>\r                  <Text>CPU Kullanımı</Text>\r                  <Text strong>{systemHealth.cpu}%</Text>\r                </div>\r                <Progress percent={systemHealth.cpu} strokeColor=\"#52c41a\" />\r              </div>\r              <div>\r                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>\r                  <Text>Bellek Kullanımı</Text>\r                  <Text strong>{systemHealth.memory}%</Text>\r                </div>\r                <Progress percent={systemHealth.memory} strokeColor=\"#1890ff\" />\r              </div>\r              <div>\r                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>\r                  <Text>Disk Kullanımı</Text>\r                  <Text strong>{systemHealth.disk}%</Text>\r                </div>\r                <Progress percent={systemHealth.disk} strokeColor=\"#faad14\" />\r              </div>\r              <div>\r                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>\r                  <Text>Network I/O</Text>\r                  <Text strong>{systemHealth.network}%</Text>\r                </div>\r                <Progress percent={systemHealth.network} strokeColor=\"#722ed1\" />\r              </div>\r            </Space>\r            <div style={{ marginTop: 24, padding: 16, background: '#f0f2f5', borderRadius: 8 }}>\r              <Space>\r                <DatabaseOutlined style={{ fontSize: 24, color: '#1890ff' }} />\r                <div>\r                  <Text strong>Database Status</Text>\r                  <br />\r                  <Text type=\"success\">PostgreSQL Online</Text>\r                </div>\r              </Space>\r            </div>\r          </Card>\r        </Col>\r        <Col xs={24} lg={16}>\r          <Card title=\"Aylık Gelir Trendi\" bordered={false}>\r            <Line {...revenueConfig} height={300} />\r          </Card>\r        </Col>\r      </Row>\r      {/* Tenant Distribution & Recent Tenants */}\r      <Row gutter={[24, 24]} style={{ marginTop: 24 }}>\r        <Col xs={24} lg={8}>\r          <Card title=\"Tenant Dağılımı\" bordered={false}>\r            <Pie {...tenantConfig} height={300} />\r          </Card>\r        </Col>\r        <Col xs={24} lg={16}>\r          <Card \r            title=\"Son Tenant Kayıtları\" \r            bordered={false}\r            extra={<a href=\"#\">Tümünü Gör</a>}\r          >\r            <Table \r              columns={columns} \r              dataSource={recentTenants} \r              pagination={false}\r              size=\"small\"\r            />\r          </Card>\r        </Col>\r      </Row>\r      {/* System Events & Quick Actions */}\r      <Row gutter={[24, 24]} style={{ marginTop: 24 }}>\r        <Col xs={24} lg={12}>\r          <Card title=\"Sistem Olayları\" bordered={false} extra={<Badge status=\"processing\" text=\"Canlı\" />}>\r            <Timeline>\r              {systemEvents.map((event, index) => (\r                <Timeline.Item \r                  key={index}\r                  color={event.type === 'success' ? 'green' : event.type === 'warning' ? 'orange' : 'blue'}\r                  dot={event.type === 'warning' ? <ExclamationCircleOutlined /> : undefined}\r                >\r                  <Space direction=\"vertical\" size={0}>\r                    <Text type=\"secondary\" style={{ fontSize: 12 }}>{event.time}</Text>\r                    <Text>{event.event}</Text>\r                  </Space>\r                </Timeline.Item>\r              ))}\r            </Timeline>\r          </Card>\r        </Col>\r        <Col xs={24} lg={12}>\r          <Card title=\"Hızlı İstatistikler\" bordered={false}>\r            <Row gutter={[16, 16]}>\r              <Col span={12}>\r                <Card size=\"small\" style={{ background: '#f0f5ff', borderColor: '#adc6ff' }}>\r                  <Statistic\r                    title=\"Bugünkü Kayıt\"\r                    value={12}\r                    prefix={<UserOutlined />}\r                    valueStyle={{ fontSize: 20 }}\r                  />\r                </Card>\r              </Col>\r              <Col span={12}>\r                <Card size=\"small\" style={{ background: '#f6ffed', borderColor: '#b7eb8f' }}>\r                  <Statistic\r                    title=\"API Çağrısı\"\r                    value=\"1.2M\"\r                    prefix={<ApiOutlined />}\r                    valueStyle={{ fontSize: 20 }}\r                  />\r                </Card>\r              </Col>\r              <Col span={12}>\r                <Card size=\"small\" style={{ background: '#fff7e6', borderColor: '#ffd591' }}>\r                  <Statistic\r                    title=\"Destek Talebi\"\r                    value={23}\r                    prefix={<ExclamationCircleOutlined />}\r                    valueStyle={{ fontSize: 20 }}\r                  />\r                </Card>\r              </Col>\r              <Col span={12}>\r                <Card size=\"small\" style={{ background: '#fff1f0', borderColor: '#ffccc7' }}>\r                  <Statistic\r                    title=\"Kritik Hata\"\r                    value={0}\r                    prefix={<CloseCircleOutlined />}\r                    valueStyle={{ fontSize: 20, color: '#52c41a' }}\r                  />\r                </Card>\r              </Col>\r            </Row>\r          </Card>\r        </Col>\r      </Row>\r    </PageContainer>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/dashboard/pages/MasterDashboard/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { useNavigate } from 'react-router-dom';\rimport {\r  Row,\r  Col,\r  Card,\r  Statistic,\r  Progress,\r  Timeline,\r  Tag,\r  Space,\r  Avatar,\r  Button,\r  Typography,\r  Badge,\r  List,\r  Divider,\r  Select,\r  Segmented\r} from 'antd';\rimport {\r  ArrowUpOutlined,\r  ArrowDownOutlined,\r  DollarOutlined,\r  ShoppingCartOutlined,\r  UserOutlined,\r  FileTextOutlined,\r  ClockCircleOutlined,\r  WarningOutlined,\r  TeamOutlined,\r  RiseOutlined,\r  BellOutlined,\r  EyeOutlined,\r  PlusOutlined,\r  TrophyOutlined,\r  RocketOutlined,\r  PieChartOutlined,\r  BarChartOutlined,\r  DownloadOutlined,\r  ContactsOutlined,\r  BankOutlined,\r  CalculatorOutlined,\r  IdcardOutlined,\r  ContainerOutlined,\r  AppstoreOutlined,\r  ShopOutlined,\r  TruckOutlined,\r  ToolOutlined,\r  SettingOutlined,\r  ArrowRightOutlined\r} from '@ant-design/icons';\rimport { Line, Pie, Area } from '@ant-design/plots';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rexport const TenantDashboard: React.FC = () => {\r  const navigate = useNavigate();\r  const [loading, setLoading] = useState(true);\r  const [selectedModule, setSelectedModule] = useState('overview');\r  useEffect(() => {\r    setTimeout(() => setLoading(false), 1500);\r  }, []);\r  const revenueData = [\r    { month: 'Ocak', value: 85000, type: 'Gelir' },\r    { month: 'Şubat', value: 92000, type: 'Gelir' },\r    { month: 'Mart', value: 108000, type: 'Gelir' },\r    { month: 'Nisan', value: 125000, type: 'Gelir' },\r    { month: 'Mayıs', value: 142000, type: 'Gelir' },\r    { month: 'Haziran', value: 155000, type: 'Gelir' },\r    { month: 'Ocak', value: 45000, type: 'Gider' },\r    { month: 'Şubat', value: 48000, type: 'Gider' },\r    { month: 'Mart', value: 52000, type: 'Gider' },\r    { month: 'Nisan', value: 58000, type: 'Gider' },\r    { month: 'Mayıs', value: 62000, type: 'Gider' },\r    { month: 'Haziran', value: 65000, type: 'Gider' },\r  ];\r  const categoryData = [\r    { type: 'Elektronik', value: 35 },\r    { type: 'Giyim', value: 25 },\r    { type: 'Gıda', value: 20 },\r    { type: 'Kozmetik', value: 12 },\r    { type: 'Diğer', value: 8 },\r  ];\r  const customerGrowthData = [\r    { date: '2024-01', customers: 1200 },\r    { date: '2024-02', customers: 1450 },\r    { date: '2024-03', customers: 1680 },\r    { date: '2024-04', customers: 1920 },\r    { date: '2024-05', customers: 2150 },\r    { date: '2024-06', customers: 2380 },\r  ];\r  const topProducts = [\r    { \r      id: 1, \r      name: 'iPhone 15 Pro', \r      sales: 342, \r      revenue: 450000, \r      trend: 'up',\r      image: 'https://via.placeholder.com/40' \r    },\r    { \r      id: 2, \r      name: 'Samsung Galaxy S24', \r      sales: 285, \r      revenue: 320000, \r      trend: 'up',\r      image: 'https://via.placeholder.com/40' \r    },\r    { \r      id: 3, \r      name: 'MacBook Pro M3', \r      sales: 156, \r      revenue: 780000, \r      trend: 'down',\r      image: 'https://via.placeholder.com/40' \r    },\r    { \r      id: 4, \r      name: 'iPad Air', \r      sales: 198, \r      revenue: 180000, \r      trend: 'up',\r      image: 'https://via.placeholder.com/40' \r    },\r  ];\r  const recentActivities = [\r    {\r      time: '10:30',\r      type: 'success',\r      title: 'Yeni sipariş alındı',\r      description: '#SP2024-1567 - ₺3,450',\r      icon: <ShoppingCartOutlined />\r    },\r    {\r      time: '11:15',\r      type: 'info',\r      title: 'Yeni müşteri kaydı',\r      description: 'Ahmet Yılmaz katıldı',\r      icon: <UserOutlined />\r    },\r    {\r      time: '12:00',\r      type: 'warning',\r      title: 'Stok uyarısı',\r      description: 'iPhone 15 Pro stokta 5 adet kaldı',\r      icon: <WarningOutlined />\r    },\r    {\r      time: '14:30',\r      type: 'success',\r      title: 'Ödeme alındı',\r      description: 'Fatura #INV-2024-089 ödendi',\r      icon: <DollarOutlined />\r    },\r  ];\r  const lineConfig = {\r    data: revenueData,\r    xField: 'month',\r    yField: 'value',\r    seriesField: 'type',\r    smooth: true,\r    animation: {\r      appear: {\r        animation: 'path-in',\r        duration: 1000,\r      },\r    },\r    legend: {\r      position: 'top-right' as const,\r    },\r    color: ['#667eea', '#f59e0b'],\r  };\r  const pieConfig = {\r    data: categoryData,\r    angleField: 'value',\r    colorField: 'type',\r    radius: 0.8,\r    label: {\r      type: 'outer',\r      content: '{name} {percentage}',\r    },\r    interactions: [{ type: 'element-active' }],\r    animation: {\r      appear: {\r        animation: 'fade-in',\r        duration: 1000,\r      },\r    },\r  };\r  const areaConfig = {\r    data: customerGrowthData,\r    xField: 'date',\r    yField: 'customers',\r    smooth: true,\r    areaStyle: {\r      fill: 'l(270) 0:#ffffff 0.5:#667eea 1:#764ba2',\r    },\r    animation: {\r      appear: {\r        animation: 'wave-in',\r        duration: 1000,\r      },\r    },\r  };\r  return (\r    <div className=\"tenant-dashboard\">\r      <Card className=\"welcome-banner gradient-bg\">\r        <Row align=\"middle\">\r          <Col flex=\"1\">\r            <Space direction=\"vertical\" size={0}>\r              <Title level={3} style={{ color: 'white', margin: 0 }}>\r                Hoş Geldiniz! 👋\r              </Title>\r              <Paragraph style={{ color: 'rgba(255, 255, 255, 0.9)', margin: '8px 0' }}>\r                İşletmeniz bugün harika gidiyor. Satışlarınız geçen aya göre %24 arttı!\r              </Paragraph>\r              <Space>\r                <Button type=\"primary\" ghost icon={<PlusOutlined />} aria-label=\"plus outlined\">\r                  Yeni Sipariş\r                </Button>\r                <Button ghost style={{ color: 'white', borderColor: 'white' }} icon={<FileTextOutlined />} aria-label=\"file text outlined\">\r                  Raporları Görüntüle\r                </Button>\r              </Space>\r            </Space>\r          </Col>\r          <Col>\r            <div className=\"dashboard-illustration\">\r              <RocketOutlined style={{ fontSize: 80, color: 'rgba(255, 255, 255, 0.8)' }} />\r            </div>\r          </Col>\r        </Row>\r      </Card>\r      <Row gutter={[16, 16]} className=\"stats-row\">\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"stat-card stat-card-primary\" loading={loading}>\r            <Statistic\r              title=\"Toplam Gelir\"\r              value={155000}\r              precision={2}\r              prefix=\"₺\"\r              valueStyle={{ color: '#667eea' }}\r            />\r            <div className=\"stat-footer\">\r              <span className=\"stat-trend positive\">\r                <ArrowUpOutlined /> %24\r              </span>\r              <span className=\"stat-period\">Geçen aya göre</span>\r            </div>\r            <Progress \r              percent={75} \r              strokeColor={{ from: '#667eea', to: '#764ba2' }}\r              showInfo={false}\r              strokeWidth={4}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"stat-card stat-card-success\" loading={loading}>\r            <Statistic\r              title=\"Toplam Sipariş\"\r              value={342}\r              prefix={<ShoppingCartOutlined />}\r              valueStyle={{ color: '#10b981' }}\r            />\r            <div className=\"stat-footer\">\r              <span className=\"stat-trend positive\">\r                <ArrowUpOutlined /> %18\r              </span>\r              <span className=\"stat-period\">Geçen aya göre</span>\r            </div>\r            <Progress \r              percent={82} \r              strokeColor=\"#10b981\"\r              showInfo={false}\r              strokeWidth={4}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"stat-card stat-card-warning\" loading={loading}>\r            <Statistic\r              title=\"Aktif Müşteriler\"\r              value={2380}\r              prefix={<TeamOutlined />}\r              valueStyle={{ color: '#f59e0b' }}\r            />\r            <div className=\"stat-footer\">\r              <span className=\"stat-trend positive\">\r                <ArrowUpOutlined /> %32\r              </span>\r              <span className=\"stat-period\">Geçen aya göre</span>\r            </div>\r            <Progress \r              percent={65} \r              strokeColor=\"#f59e0b\"\r              showInfo={false}\r              strokeWidth={4}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"stat-card stat-card-danger\" loading={loading}>\r            <Statistic\r              title=\"Bekleyen Faturalar\"\r              value={28500}\r              precision={2}\r              prefix=\"₺\"\r              valueStyle={{ color: '#ef4444' }}\r            />\r            <div className=\"stat-footer\">\r              <span className=\"stat-trend negative\">\r                <ArrowDownOutlined /> %12\r              </span>\r              <span className=\"stat-period\">Geçen aya göre</span>\r            </div>\r            <Progress \r              percent={35} \r              strokeColor=\"#ef4444\"\r              showInfo={false}\r              strokeWidth={4}\r            />\r          </Card>\r        </Col>\r      </Row>\r      <Row gutter={[16, 16]}>\r        <Col xs={24} lg={16}>\r          <Card \r            title={\r              <Space>\r                <RiseOutlined />\r                <span>Gelir & Gider Analizi</span>\r              </Space>\r            }\r            extra={\r              <Select defaultValue=\"6months\" style={{ width: 120 }} aria-label=\"select field\">\r                <Select.Option value=\"7days\" aria-label=\"select field\">Son 7 Gün</Select.Option>\r                <Select.Option value=\"30days\" aria-label=\"select field\">Son 30 Gün</Select.Option>\r                <Select.Option value=\"6months\" aria-label=\"select field\">Son 6 Ay</Select.Option>\r                <Select.Option value=\"1year\" aria-label=\"select field\">Son 1 Yıl</Select.Option>\r              </Select>\r            }\r            loading={loading}\r          >\r            <Line {...lineConfig} height={300} />\r          </Card>\r        </Col>\r        <Col xs={24} lg={8}>\r          <Card \r            title={\r              <Space>\r                <PieChartOutlined />\r                <span>Kategori Dağılımı</span>\r              </Space>\r            }\r            loading={loading}\r          >\r            <Pie {...pieConfig} height={300} />\r          </Card>\r        </Col>\r      </Row>\r      <Row gutter={[16, 16]}>\r        <Col xs={24} lg={12}>\r          <Card \r            title={\r              <Space>\r                <TrophyOutlined style={{ color: '#fbbf24' }} />\r                <span>En Çok Satan Ürünler</span>\r              </Space>\r            }\r            extra={<Button type=\"link\">Tümünü Gör</Button>}\r            loading={loading}\r          >\r            <List\r              itemLayout=\"horizontal\"\r              dataSource={topProducts}\r              renderItem={(item, index) => (\r                <List.Item\r                  actions={[\r                    <Space>\r                      {item.trend === 'up' ? (\r                        <Tag color=\"success\" icon={<ArrowUpOutlined />}>Artış</Tag>\r                      ) : (\r                        <Tag color=\"error\" icon={<ArrowDownOutlined />}>Düşüş</Tag>\r                      )}\r                    </Space>\r                  ]}\r                >\r                  <List.Item.Meta\r                    avatar={\r                      <Badge count={index + 1} style={{ backgroundColor: index === 0 ? '#fbbf24' : '#667eea' }}>\r                        <Avatar src={item.image} size={48} />\r                      </Badge>\r                    }\r                    title={item.name}\r                    description={\r                      <Space>\r                        <Text type=\"secondary\">{item.sales} satış</Text>\r                        <Divider type=\"vertical\" />\r                        <Text strong>₺{item.revenue.toLocaleString('tr-TR')}</Text>\r                      </Space>\r                    }\r                  />\r                </List.Item>\r              )}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} lg={12}>\r          <Card \r            title={\r              <Space>\r                <ClockCircleOutlined />\r                <span>Son Aktiviteler</span>\r              </Space>\r            }\r            extra={\r              <Badge count={4} offset={[-10, 0]}>\r                <BellOutlined style={{ fontSize: 18 }} />\r              </Badge>\r            }\r            loading={loading}\r          >\r            <Timeline mode=\"left\">\r              {recentActivities.map((activity, index) => (\r                <Timeline.Item\r                  key={index}\r                  color={activity.type}\r                  dot={activity.icon}\r                >\r                  <div className=\"timeline-content\">\r                    <Space direction=\"vertical\" size={0}>\r                      <Space>\r                        <Text strong>{activity.title}</Text>\r                        <Text type=\"secondary\" style={{ fontSize: 12 }}>{activity.time}</Text>\r                      </Space>\r                      <Text type=\"secondary\">{activity.description}</Text>\r                    </Space>\r                  </div>\r                </Timeline.Item>\r              ))}\r            </Timeline>\r          </Card>\r        </Col>\r      </Row>\r      <Row gutter={[16, 16]}>\r        <Col xs={24}>\r          <Card \r            title={\r              <Space>\r                <TeamOutlined />\r                <span>Müşteri Büyümesi</span>\r                <Tag color=\"success\">+32%</Tag>\r              </Space>\r            }\r            extra={\r              <Space>\r                <Button icon={<DownloadOutlined />} aria-label=\"download outlined\">İndir</Button>\r                <Button type=\"primary\" icon={<EyeOutlined />} aria-label=\"eye outlined\">Detaylı Rapor</Button>\r              </Space>\r            }\r            loading={loading}\r          >\r            <Area {...areaConfig} height={250} />\r          </Card>\r        </Col>\r      </Row>\r      {/* Modül Kartları */}\r      <Card title=\"İşletme Modülleri\" style={{ marginBottom: 16 }}>\r        <Segmented\r          value={selectedModule}\r          onChange={setSelectedModule}\r          options={[\r            { value: 'overview', label: 'Genel Bakış' },\r            { value: 'crm', label: 'CRM' },\r            { value: 'erp', label: 'ERP' },\r            { value: 'accounting', label: 'Muhasebe' },\r            { value: 'hr', label: 'İK' },\r            { value: 'inventory', label: 'Stok' },\r          ]}\r          block\r          style={{ marginBottom: 24 }}\r        />\r        <Row gutter={[16, 16]}>\r          <Col xs={24} sm={12} lg={8}>\r            <Card \r              hoverable\r              className=\"module-card\"\r              style={{ \r                borderLeft: '4px solid #1890ff',\r                background: 'linear-gradient(135deg, #1890ff15 0%, #1890ff05 100%)' \r              }}\r              onClick={() => navigate('/app/tenant/crm')}\r            >\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                  <ContactsOutlined style={{ fontSize: 40, color: '#1890ff' }} />\r                  <Tag color=\"blue\">CRM</Tag>\r                </div>\r                <Title level={4}>Müşteri İlişkileri</Title>\r                <Text type=\"secondary\">Müşteri, firma ve satış yönetimi</Text>\r                <Divider style={{ margin: '12px 0' }} />\r                <Row gutter={16}>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Müşteriler\" \r                      value={2380} \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Fırsatlar\" \r                      value={45} \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                </Row>\r                <Button type=\"primary\" block icon={<ArrowRightOutlined />} aria-label=\"arrow right outlined\">\r                  CRM'e Git\r                </Button>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={24} sm={12} lg={8}>\r            <Card \r              hoverable\r              className=\"module-card\"\r              style={{ \r                borderLeft: '4px solid #52c41a',\r                background: 'linear-gradient(135deg, #52c41a15 0%, #52c41a05 100%)' \r              }}\r              onClick={() => navigate('/app/tenant/erp')}\r            >\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                  <BankOutlined style={{ fontSize: 40, color: '#52c41a' }} />\r                  <Tag color=\"green\">ERP</Tag>\r                </div>\r                <Title level={4}>Kurumsal Planlama</Title>\r                <Text type=\"secondary\">Üretim, proje ve kaynak yönetimi</Text>\r                <Divider style={{ margin: '12px 0' }} />\r                <Row gutter={16}>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Projeler\" \r                      value={12} \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Görevler\" \r                      value={156} \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                </Row>\r                <Button type=\"primary\" block icon={<ArrowRightOutlined />} aria-label=\"arrow right outlined\">\r                  ERP'ye Git\r                </Button>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={24} sm={12} lg={8}>\r            <Card \r              hoverable\r              className=\"module-card\"\r              style={{ \r                borderLeft: '4px solid #fa8c16',\r                background: 'linear-gradient(135deg, #fa8c1615 0%, #fa8c1605 100%)' \r              }}\r              onClick={() => navigate('/app/tenant/accounting')}\r            >\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                  <CalculatorOutlined style={{ fontSize: 40, color: '#fa8c16' }} />\r                  <Tag color=\"orange\">Muhasebe</Tag>\r                </div>\r                <Title level={4}>Finansal Yönetim</Title>\r                <Text type=\"secondary\">Fatura, tahsilat ve muhasebe</Text>\r                <Divider style={{ margin: '12px 0' }} />\r                <Row gutter={16}>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Faturalar\" \r                      value={342} \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Tahsilat\" \r                      value=\"89%\" \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                </Row>\r                <Button type=\"primary\" block icon={<ArrowRightOutlined />} aria-label=\"arrow right outlined\">\r                  Muhasebe'ye Git\r                </Button>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={24} sm={12} lg={8}>\r            <Card \r              hoverable\r              className=\"module-card\"\r              style={{ \r                borderLeft: '4px solid #722ed1',\r                background: 'linear-gradient(135deg, #722ed115 0%, #722ed105 100%)' \r              }}\r              onClick={() => navigate('/app/tenant/hr')}\r            >\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                  <IdcardOutlined style={{ fontSize: 40, color: '#722ed1' }} />\r                  <Tag color=\"purple\">İK</Tag>\r                </div>\r                <Title level={4}>İnsan Kaynakları</Title>\r                <Text type=\"secondary\">Personel ve özlük yönetimi</Text>\r                <Divider style={{ margin: '12px 0' }} />\r                <Row gutter={16}>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Personel\" \r                      value={48} \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Bu Ay İzin\" \r                      value={5} \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                </Row>\r                <Button type=\"primary\" block icon={<ArrowRightOutlined />} aria-label=\"arrow right outlined\">\r                  İK'ya Git\r                </Button>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={24} sm={12} lg={8}>\r            <Card \r              hoverable\r              className=\"module-card\"\r              style={{ \r                borderLeft: '4px solid #eb2f96',\r                background: 'linear-gradient(135deg, #eb2f9615 0%, #eb2f9605 100%)' \r              }}\r              onClick={() => navigate('/app/tenant/inventory')}\r            >\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                  <ContainerOutlined style={{ fontSize: 40, color: '#eb2f96' }} />\r                  <Tag color=\"magenta\">Stok</Tag>\r                </div>\r                <Title level={4}>Stok Yönetimi</Title>\r                <Text type=\"secondary\">Envanter ve depo yönetimi</Text>\r                <Divider style={{ margin: '12px 0' }} />\r                <Row gutter={16}>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Ürünler\" \r                      value={1853} \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                  <Col span={12}>\r                    <Statistic \r                      title=\"Depolar\" \r                      value={3} \r                      valueStyle={{ fontSize: 16 }}\r                    />\r                  </Col>\r                </Row>\r                <Button type=\"primary\" block icon={<ArrowRightOutlined />} aria-label=\"arrow right outlined\">\r                  Stok'a Git\r                </Button>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={24} sm={12} lg={8}>\r            <Card \r              hoverable\r              className=\"module-card\"\r              style={{ \r                borderLeft: '4px solid #13c2c2',\r                background: 'linear-gradient(135deg, #13c2c215 0%, #13c2c205 100%)' \r              }}\r            >\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                  <AppstoreOutlined style={{ fontSize: 40, color: '#13c2c2' }} />\r                  <Tag color=\"cyan\">Diğer</Tag>\r                </div>\r                <Title level={4}>Ek Modüller</Title>\r                <Text type=\"secondary\">E-ticaret, lojistik ve daha fazlası</Text>\r                <Divider style={{ margin: '12px 0' }} />\r                <Space wrap>\r                  <Button size=\"small\" icon={<ShopOutlined />} aria-label=\"shop outlined\">E-Ticaret</Button>\r                  <Button size=\"small\" icon={<TruckOutlined />} aria-label=\"truck outlined\">Lojistik</Button>\r                  <Button size=\"small\" icon={<ToolOutlined />} aria-label=\"tool outlined\">Üretim</Button>\r                </Space>\r                <Button type=\"default\" block icon={<SettingOutlined />} style={{ marginTop: 12 }} aria-label=\"setting outlined\">\r                  Tüm Modüller\r                </Button>\r              </Space>\r            </Card>\r          </Col>\r        </Row>\r      </Card>\r      {/* Hızlı İşlemler */}\r      <Card title=\"Hızlı İşlemler\" className=\"quick-actions-card\">\r        <Row gutter={[16, 16]}>\r          <Col xs={12} sm={6} md={4}>\r            <Card \r              hoverable \r              className=\"action-card\"\r              onClick={() => navigate('/app/tenant/invoices/new')}\r            >\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <FileTextOutlined style={{ fontSize: 32, color: '#667eea' }} />\r                <Text>Yeni Fatura</Text>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={12} sm={6} md={4}>\r            <Card \r              hoverable \r              className=\"action-card\"\r              onClick={() => navigate('/app/tenant/inventory/products/new')}\r            >\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <ShoppingCartOutlined style={{ fontSize: 32, color: '#10b981' }} />\r                <Text>Ürün Ekle</Text>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={12} sm={6} md={4}>\r            <Card \r              hoverable \r              className=\"action-card\"\r              onClick={() => navigate('/app/tenant/crm/customers/new')}\r            >\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <UserOutlined style={{ fontSize: 32, color: '#f59e0b' }} />\r                <Text>Müşteri Ekle</Text>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={12} sm={6} md={4}>\r            <Card \r              hoverable \r              className=\"action-card\"\r              onClick={() => navigate('/app/tenant/hr/employees/new')}\r            >\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <IdcardOutlined style={{ fontSize: 32, color: '#722ed1' }} />\r                <Text>Personel Ekle</Text>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={12} sm={6} md={4}>\r            <Card \r              hoverable \r              className=\"action-card\"\r              onClick={() => navigate('/app/tenant/accounting/expenses/new')}\r            >\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <DollarOutlined style={{ fontSize: 32, color: '#fa8c16' }} />\r                <Text>Gider Ekle</Text>\r              </Space>\r            </Card>\r          </Col>\r          <Col xs={12} sm={6} md={4}>\r            <Card \r              hoverable \r              className=\"action-card\"\r              onClick={() => navigate('/app/tenant/reports')}\r            >\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <BarChartOutlined style={{ fontSize: 32, color: '#ef4444' }} />\r                <Text>Raporlar</Text>\r              </Space>\r            </Card>\r          </Col>\r        </Row>\r      </Card>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/dashboard/pages/TenantDashboard/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React from 'react';\rimport { useNavigate } from 'react-router-dom';\rimport { Button, Result } from 'antd';\rimport { HomeOutlined, UserAddOutlined } from '@ant-design/icons';\rimport { getMainDomainUrl } from '@/utils/tenant';\rinterface InvalidTenantPageProps {\r  tenantSlug?: string;\r}\rexport const InvalidTenantPage: React.FC<InvalidTenantPageProps> = ({ tenantSlug }) => {\r  const navigate = useNavigate();\r  const handleGoHome = () => {\r    window.location.href = getMainDomainUrl();\r  };\r  const handleRegister = () => {\r    window.location.href = `${getMainDomainUrl()}/register`;\r  };\r  return (\r    <div style={{\r      minHeight: '100vh',\r      display: 'flex',\r      alignItems: 'center',\r      justifyContent: 'center',\r      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r      padding: '20px'\r    }}>\r      <Result\r        status=\"404\"\r        title=\"Firma Bulunamadı\"\r        subTitle={\r          <>\r            <div style={{ marginBottom: '16px' }}>\r              <span style={{\r                background: '#fef2e5',\r                color: '#d97706',\r                padding: '4px 8px',\r                borderRadius: '4px',\r                fontFamily: 'monospace',\r                fontWeight: 600\r              }}>\r                {tenantSlug || window.location.hostname.split('.')[0]}.stoocker.app\r              </span>\r              {' '}adresi için kayıtlı bir firma bulunamadı.\r            </div>\r            <div style={{ color: '#718096', fontSize: '14px' }}>\r              Eğer bu sizin firmanızsa, lütfen sistem yöneticinizle iletişime geçin veya doğru adresi kullandığınızdan emin olun.\r            </div>\r          </>\r        }\r        extra={[\r          <Button \r            type=\"primary\" \r            key=\"home\"\r            icon={<HomeOutlined />}\r            onClick={handleGoHome}\r            size=\"large\"\r            style={{\r              background: '#667eea',\r              borderColor: '#667eea'\r            }}\r           aria-label=\"home outlined\">\r            Ana Sayfa\r          </Button>,\r          <Button \r            key=\"register\"\r            icon={<UserAddOutlined />}\r            onClick={handleRegister}\r            size=\"large\"\r           aria-label=\"user add outlined\">\r            Yeni Firma Kayıt\r          </Button>,\r        ]}\r        style={{\r          background: 'white',\r          borderRadius: '12px',\r          padding: '48px',\r          maxWidth: '500px',\r          boxShadow: '0 20px 60px rgba(0,0,0,0.3)',\r        }}\r      />\r    </div>\r  );\r};\rexport default InvalidTenantPage;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/error/pages/InvalidTenantPage.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React from 'react';\rimport { useNavigate } from 'react-router-dom';\rimport { Result, Button, Space } from 'antd';\rimport { HomeOutlined, ArrowLeftOutlined } from '@ant-design/icons';\rimport './style.css';\rexport const NotFoundPage: React.FC = () => {\r  const navigate = useNavigate();\r  return (\r    <div className=\"not-found-container\">\r      <div className=\"not-found-content\">\r        <Result\r          status=\"404\"\r          title=\"404\"\r          subTitle=\"Üzgünüz, aradığınız sayfa bulunamadı.\"\r          extra={\r            <Space>\r              <Button\r                type=\"primary\"\r                icon={<HomeOutlined />}\r                onClick={() = aria-label=\"home outlined\"> navigate('/')}\r                size=\"large\"\r              >\r                Ana Sayfa\r              </Button>\r              <Button\r                icon={<ArrowLeftOutlined />}\r                onClick={() = aria-label=\"arrow left outlined\"> navigate(-1)}\r                size=\"large\"\r              >\r                Geri Dön\r              </Button>\r            </Space>\r          }\r        />\r        <div className=\"not-found-animation\">\r          <div className=\"floating-icon\">🔍</div>\r        </div>\r      </div>\r    </div>\r  );\r};\rexport default NotFoundPage;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/error/pages/NotFoundPage/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport {\r  Card,\r  Form,\r  Input,\r  Button,\r  Select,\r  DatePicker,\r  Table,\r  Space,\r  Row,\r  Col,\r  InputNumber,\r  Divider,\r  message,\r  AutoComplete,\r  Typography,\r  Alert,\r  Statistic,\r  Modal,\r  Avatar\r} from 'antd';\rimport {\r  PlusOutlined,\r  DeleteOutlined,\r  SaveOutlined,\r  SendOutlined,\r  CalculatorOutlined,\r  UserOutlined,\r  ShoppingCartOutlined,\r  FileTextOutlined,\r  CalendarOutlined\r} from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport dayjs from 'dayjs';\rimport invoiceService, { CreateInvoiceDto, CreateInvoiceItemDto } from '../../../../services/invoiceService';\rimport './style.css';\rconst { TextArea } = Input;\rconst { Option } = Select;\rconst { Title, Text } = Typography;\r// Mock müşteri verisi\rconst mockCustomers = [\r  { id: '1', name: 'ABC Teknoloji A.Ş.', email: 'info@abc.com', phone: '0212 555 0001', taxNumber: '1234567890' },\r  { id: '2', name: 'XYZ Yazılım Ltd.', email: 'contact@xyz.com', phone: '0216 555 0002', taxNumber: '0987654321' },\r  { id: '3', name: 'Demo Şirketi', email: 'demo@demo.com', phone: '0312 555 0003', taxNumber: '1122334455' }\r];\r// Mock ürün verisi\rconst mockProducts = [\r  { id: '1', name: 'Yazılım Lisansı', price: 5000, description: 'Yıllık yazılım lisansı' },\r  { id: '2', name: 'Danışmanlık Hizmeti', price: 1500, description: 'Saatlik danışmanlık ücreti' },\r  { id: '3', name: 'Eğitim Paketi', price: 10000, description: '3 günlük eğitim paketi' },\r  { id: '4', name: 'Destek Hizmeti', price: 2000, description: 'Aylık teknik destek' }\r];\rconst CreateInvoice: React.FC = () => {\r  const [form] = Form.useForm();\r  const navigate = useNavigate();\r  const [loading, setLoading] = useState(false);\r  const [items, setItems] = useState<CreateInvoiceItemDto[]>([]);\r  const [selectedCustomer, setSelectedCustomer] = useState<any>(null);\r  const [totals, setTotals] = useState({\r    subTotal: 0,\r    taxAmount: 0,\r    discountAmount: 0,\r    totalAmount: 0\r  });\r  const [showProductModal, setShowProductModal] = useState(false);\r  const calculateTotals = (invoiceItems: CreateInvoiceItemDto[]) => {\r    let subTotal = 0;\r    let taxAmount = 0;\r    let discountAmount = 0;\r    invoiceItems.forEach(item => {\r      const itemTotal = item.quantity * item.unitPrice;\r      const itemDiscount = itemTotal * ((item.discountPercentage || 0) / 100);\r      const itemAfterDiscount = itemTotal - itemDiscount;\r      const itemTax = itemAfterDiscount * ((item.taxRate || 0) / 100);\r      subTotal += itemTotal;\r      discountAmount += itemDiscount;\r      taxAmount += itemTax;\r    });\r    const totalAmount = subTotal - discountAmount + taxAmount;\r    setTotals({\r      subTotal,\r      taxAmount,\r      discountAmount,\r      totalAmount\r    });\r  };\r  const handleAddItem = () => {\r    setShowProductModal(true);\r  };\r  const handleProductSelect = (product: any) => {\r    const newItem: CreateInvoiceItemDto = {\r      productId: product.id,\r      productName: product.name,\r      description: product.description,\r      quantity: 1,\r      unitPrice: product.price,\r      discountPercentage: 0,\r      taxRate: 18 // Default KDV\r    };\r    const updatedItems = [...items, newItem];\r    setItems(updatedItems);\r    calculateTotals(updatedItems);\r    setShowProductModal(false);\r  };\r  const handleItemChange = (index: number, field: string, value: any) => {\r    const updatedItems = [...items];\r    updatedItems[index] = {\r      ...updatedItems[index],\r      [field]: value\r    };\r    setItems(updatedItems);\r    calculateTotals(updatedItems);\r  };\r  const handleRemoveItem = (index: number) => {\r    const updatedItems = items.filter((_, i) => i !== index);\r    setItems(updatedItems);\r    calculateTotals(updatedItems);\r  };\r  const handleSubmit = async (values: any) => {\r    if (items.length === 0) {\r      message.warning('En az bir ürün/hizmet eklemelisiniz');\r      return;\r    }\r    try {\r      setLoading(true);\r      const invoiceData: CreateInvoiceDto = {\r        ...values,\r        invoiceDate: values.invoiceDate.toISOString(),\r        dueDate: values.dueDate.toISOString(),\r        items\r      };\r      const result = await invoiceService.createInvoice(invoiceData);\r      message.success('Fatura başarıyla oluşturuldu');\r      if (values.sendImmediately) {\r        await invoiceService.sendInvoice(result.id);\r        message.success('Fatura müşteriye gönderildi');\r      }\r      navigate('/invoices');\r    } catch (error) {\r      message.error('Fatura oluşturulurken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const columns = [\r    {\r      title: 'Ürün/Hizmet',\r      dataIndex: 'productName',\r      key: 'productName',\r      width: '25%'\r    },\r    {\r      title: 'Açıklama',\r      dataIndex: 'description',\r      key: 'description',\r      width: '20%',\r      render: (_: any, record: any, index: number) => (\r        <Input\r          value={record.description}\r          onChange={(e) = aria-label=\"input field\"> handleItemChange(index, 'description', e.target.value)}\r          placeholder=\"Açıklama...\"\r        />\r      )\r    },\r    {\r      title: 'Miktar',\r      dataIndex: 'quantity',\r      key: 'quantity',\r      width: '10%',\r      render: (_: any, record: any, index: number) => (\r        <InputNumber\r          min={0.01}\r          value={record.quantity}\r          onChange={(value) = aria-label=\"input field\"> handleItemChange(index, 'quantity', value)}\r        />\r      )\r    },\r    {\r      title: 'Birim Fiyat',\r      dataIndex: 'unitPrice',\r      key: 'unitPrice',\r      width: '12%',\r      render: (_: any, record: any, index: number) => (\r        <InputNumber\r          min={0}\r          value={record.unitPrice}\r          onChange={(value) = aria-label=\"input field\"> handleItemChange(index, 'unitPrice', value)}\r          formatter={(value) => `₺ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\r        />\r      )\r    },\r    {\r      title: 'İndirim %',\r      dataIndex: 'discountPercentage',\r      key: 'discountPercentage',\r      width: '10%',\r      render: (_: any, record: any, index: number) => (\r        <InputNumber\r          min={0}\r          max={100}\r          value={record.discountPercentage}\r          onChange={(value) = aria-label=\"input field\"> handleItemChange(index, 'discountPercentage', value)}\r          formatter={(value) => `${value}%`}\r        />\r      )\r    },\r    {\r      title: 'KDV %',\r      dataIndex: 'taxRate',\r      key: 'taxRate',\r      width: '10%',\r      render: (_: any, record: any, index: number) => (\r        <Select\r          value={record.taxRate}\r          onChange={(value) = aria-label=\"select field\"> handleItemChange(index, 'taxRate', value)}\r          style={{ width: '100%' }}\r        >\r          <Option value={0}>%0</Option>\r          <Option value={1}>%1</Option>\r          <Option value={8}>%8</Option>\r          <Option value={18}>%18</Option>\r        </Select>\r      )\r    },\r    {\r      title: 'Toplam',\r      key: 'total',\r      width: '10%',\r      align: 'right' as const,\r      render: (_: any, record: any) => {\r        const total = record.quantity * record.unitPrice;\r        const discount = total * ((record.discountPercentage || 0) / 100);\r        const afterDiscount = total - discount;\r        const tax = afterDiscount * ((record.taxRate || 0) / 100);\r        return <Text strong>₺{(afterDiscount + tax).toFixed(2)}</Text>;\r      }\r    },\r    {\r      title: '',\r      key: 'action',\r      width: '3%',\r      render: (_: any, __: any, index: number) => (\r        <Button\r          type=\"text\"\r          danger\r          icon={<DeleteOutlined />}\r          onClick={() = aria-label=\"delete outlined\"> handleRemoveItem(index)}\r        />\r      )\r    }\r  ];\r  return (\r    <div className=\"create-invoice\">\r      <Form\r        form={form}\r        layout=\"vertical\"\r        onFinish={handleSubmit}\r        initialValues={{\r          currency: 'TRY',\r          invoiceDate: dayjs(),\r          dueDate: dayjs().add(30, 'days'),\r          invoiceNumber: `INV-${new Date().getFullYear()}-${String(Math.floor(Math.random() * 10000)).padStart(4, '0')}`\r        }}\r      >\r        <Row gutter={24}>\r          {/* Sol Panel - Fatura Bilgileri */}\r          <Col xs={24} lg={16}>\r            <Card\r              title={\r                <Space>\r                  <FileTextOutlined />\r                  <span>Yeni Fatura Oluştur</span>\r                </Space>\r              }\r              className=\"invoice-form-card\"\r            >\r              {/* Fatura Temel Bilgileri */}\r              <Row gutter={16}>\r                <Col xs={24} md={8}>\r                  <Form.Item\r                    name=\"invoiceNumber\"\r                    label=\"Fatura No\"\r                    rules={[{ required: true, message: 'Fatura no zorunludur' }]}\r                  >\r                    <Input prefix={<FileTextOutlined / aria-label=\"input field\">} />\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={8}>\r                  <Form.Item\r                    name=\"invoiceDate\"\r                    label=\"Fatura Tarihi\"\r                    rules={[{ required: true, message: 'Fatura tarihi zorunludur' }]}\r                  >\r                    <DatePicker style={{ width: '100%' }} format=\"DD/MM/YYYY\" />\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={8}>\r                  <Form.Item\r                    name=\"dueDate\"\r                    label=\"Vade Tarihi\"\r                    rules={[{ required: true, message: 'Vade tarihi zorunludur' }]}\r                  >\r                    <DatePicker style={{ width: '100%' }} format=\"DD/MM/YYYY\" />\r                  </Form.Item>\r                </Col>\r              </Row>\r              {/* Müşteri Seçimi */}\r              <Divider>Müşteri Bilgileri</Divider>\r              <Row gutter={16}>\r                <Col xs={24}>\r                  <Form.Item\r                    name=\"customerId\"\r                    label=\"Müşteri\"\r                    rules={[{ required: true, message: 'Müşteri seçimi zorunludur' }]}\r                  >\r                    <Select\r                      showSearch\r                      placeholder=\"Müşteri seçin veya arayın\"\r                      optionFilterProp=\"children\"\r                      onChange={(value) = aria-label=\"select field\"> {\r                        const customer = mockCustomers.find(c => c.id === value);\r                        setSelectedCustomer(customer);\r                      }}\r                    >\r                      {mockCustomers.map(customer => (\r                        <Option key={customer.id} value={customer.id}>\r                          <Space>\r                            <Avatar icon={<UserOutlined />} size=\"small\" />\r                            <div>\r                              <div>{customer.name}</div>\r                              <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                                {customer.email} | {customer.phone}\r                              </Text>\r                            </div>\r                          </Space>\r                        </Option>\r                      ))}\r                    </Select>\r                  </Form.Item>\r                </Col>\r              </Row>\r              {selectedCustomer && (\r                <Alert\r                  message=\"Seçili Müşteri\"\r                  description={\r                    <Space direction=\"vertical\" size=\"small\">\r                      <Text>{selectedCustomer.name}</Text>\r                      <Text type=\"secondary\">{selectedCustomer.email} | {selectedCustomer.phone}</Text>\r                      <Text type=\"secondary\">Vergi No: {selectedCustomer.taxNumber}</Text>\r                    </Space>\r                  }\r                  type=\"info\"\r                  showIcon\r                  icon={<UserOutlined />}\r                  style={{ marginBottom: 16 }}\r                />\r              )}\r              {/* Ürün/Hizmetler */}\r              <Divider>Ürün/Hizmetler</Divider>\r              <Button\r                type=\"dashed\"\r                onClick={handleAddItem}\r                icon={<PlusOutlined />}\r                style={{ width: '100%', marginBottom: 16 }}\r               aria-label=\"plus outlined\">\r                Ürün/Hizmet Ekle\r              </Button>\r              <Table\r                dataSource={items}\r                columns={columns}\r                pagination={false}\r                rowKey={(_, index) => index?.toString() || '0'}\r                locale={{ emptyText: 'Henüz ürün/hizmet eklenmedi' }}\r              />\r              {/* Notlar */}\r              <Divider>Ek Bilgiler</Divider>\r              <Row gutter={16}>\r                <Col xs={24} md={12}>\r                  <Form.Item name=\"notes\" label=\"Notlar\">\r                    <TextArea rows={4} placeholder=\"Fatura ile ilgili notlar...\" />\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item name=\"terms\" label=\"Şartlar ve Koşullar\">\r                    <TextArea rows={4} placeholder=\"Ödeme şartları, teslimat koşulları vb...\" />\r                  </Form.Item>\r                </Col>\r              </Row>\r            </Card>\r          </Col>\r          {/* Sağ Panel - Özet ve İşlemler */}\r          <Col xs={24} lg={8}>\r            <Card className=\"invoice-summary-card\">\r              <Title level={4}>\r                <CalculatorOutlined /> Fatura Özeti\r              </Title>\r              <div className=\"summary-items\">\r                <div className=\"summary-item\">\r                  <Text>Ara Toplam:</Text>\r                  <Text strong>{invoiceService.formatCurrency(totals.subTotal)}</Text>\r                </div>\r                <div className=\"summary-item\">\r                  <Text>İndirim:</Text>\r                  <Text type=\"danger\">-{invoiceService.formatCurrency(totals.discountAmount)}</Text>\r                </div>\r                <div className=\"summary-item\">\r                  <Text>KDV:</Text>\r                  <Text>{invoiceService.formatCurrency(totals.taxAmount)}</Text>\r                </div>\r                <Divider />\r                <div className=\"summary-item total\">\r                  <Title level={5}>Genel Toplam:</Title>\r                  <Title level={4} type=\"success\">\r                    {invoiceService.formatCurrency(totals.totalAmount)}\r                  </Title>\r                </div>\r              </div>\r              <Divider />\r              <Form.Item name=\"currency\" label=\"Para Birimi\">\r                <Select aria-label=\"select field\">\r                  <Option value=\"TRY\">TRY - Türk Lirası</Option>\r                  <Option value=\"USD\">USD - Amerikan Doları</Option>\r                  <Option value=\"EUR\">EUR - Euro</Option>\r                </Select>\r              </Form.Item>\r              <Form.Item name=\"sendImmediately\" valuePropName=\"checked\">\r                <Space>\r                  <input type=\"checkbox\" / aria-label=\"input field\">\r                  <Text>Oluşturduktan sonra hemen gönder</Text>\r                </Space>\r              </Form.Item>\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <Button\r                  type=\"primary\"\r                  htmlType=\"submit\"\r                  loading={loading}\r                  icon={<SaveOutlined />}\r                  size=\"large\"\r                  block\r                 aria-label=\"save outlined\">\r                  Faturayı Oluştur\r                </Button>\r                <Button\r                  onClick={() => navigate('/invoices')}\r                  size=\"large\"\r                  block\r                >\r                  İptal\r                </Button>\r              </Space>\r            </Card>\r            {/* Hızlı İstatistikler */}\r            <Card style={{ marginTop: 16 }}>\r              <Title level={5}>Bu Ay</Title>\r              <Row gutter={16}>\r                <Col span={12}>\r                  <Statistic\r                    title=\"Kesilen Fatura\"\r                    value={23}\r                    prefix={<FileTextOutlined />}\r                  />\r                </Col>\r                <Col span={12}>\r                  <Statistic\r                    title=\"Toplam Tutar\"\r                    value={125430}\r                    prefix=\"₺\"\r                  />\r                </Col>\r              </Row>\r            </Card>\r          </Col>\r        </Row>\r      </Form>\r      {/* Ürün Seçme Modal */}\r      <Modal\r        title=\"Ürün/Hizmet Seç\"\r        visible={showProductModal}\r        onCancel={() => setShowProductModal(false)}\r        footer={null}\r        width={600}\r      >\r        <div className=\"product-grid\">\r          {mockProducts.map(product => (\r            <Card\r              key={product.id}\r              hoverable\r              onClick={() => handleProductSelect(product)}\r              className=\"product-card\"\r            >\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <Space>\r                  <ShoppingCartOutlined />\r                  <Text strong>{product.name}</Text>\r                </Space>\r                <Text type=\"secondary\">{product.description}</Text>\r                <Text type=\"success\" strong>\r                  {invoiceService.formatCurrency(product.price)}\r                </Text>\r              </Space>\r            </Card>\r          ))}\r        </div>\r        <Divider />\r        <Button\r          type=\"dashed\"\r          icon={<PlusOutlined />}\r          block\r          onClick={() = aria-label=\"plus outlined\"> {\r            message.info('Yeni ürün ekleme özelliği yakında');\r            setShowProductModal(false);\r          }}\r        >\r          Yeni Ürün Ekle\r        </Button>\r      </Modal>\r    </div>\r  );\r};\rexport default CreateInvoice;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/invoices/pages/CreateInvoice/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { useParams, useNavigate } from 'react-router-dom';\rimport {\r  PageHeader,\r  ProCard,\r  ProDescriptions,\r  ProTable,\r} from '@ant-design/pro-components';\rimport {\r  Card,\r  Row,\r  Col,\r  Button,\r  Space,\r  Tag,\r  Descriptions,\r  Table,\r  Statistic,\r  Typography,\r  Timeline,\r  Divider,\r  Modal,\r  message,\r  Spin,\r  Result,\r  Avatar,\r  Dropdown,\r  Badge,\r  Tooltip,\r  Alert,\r} from 'antd';\rimport {\r  PrinterOutlined,\r  DownloadOutlined,\r  MailOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  CheckCircleOutlined,\r  ClockCircleOutlined,\r  CloseCircleOutlined,\r  DollarOutlined,\r  CalendarOutlined,\r  UserOutlined,\r  PhoneOutlined,\r  EnvironmentOutlined,\r  CopyOutlined,\r  ShareAltOutlined,\r  FilePdfOutlined,\r  FileExcelOutlined,\r  MoreOutlined,\r  ArrowLeftOutlined,\r  ExclamationCircleOutlined,\r} from '@ant-design/icons';\rimport { formatCurrency, formatDate } from '@/shared/utils/formatters';\rimport invoiceService, { Invoice, InvoiceItem } from '@/services/invoiceService';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rexport const InvoiceDetail: React.FC = () => {\r  const { id } = useParams<{ id: string }>();\r  const navigate = useNavigate();\r  const [invoice, setInvoice] = useState<Invoice | null>(null);\r  const [loading, setLoading] = useState(true);\r  const [sendModalVisible, setSendModalVisible] = useState(false);\r  const [deleteModalVisible, setDeleteModalVisible] = useState(false);\r  useEffect(() => {\r    if (id) {\r      fetchInvoiceDetail();\r    }\r  }, [id]);\r  const fetchInvoiceDetail = async () => {\r    try {\r      setLoading(true);\r      // Gerçek API çağrısı yapılacak\r      // const response = await invoiceService.getInvoiceById(id!);\r      // setInvoice(response.data);\r      // Mock data\r      const mockInvoice: Invoice = {\r        id: id!,\r        invoiceNumber: 'INV-2024-001',\r        customerId: '1',\r        customerName: 'ABC Teknoloji A.Ş.',\r        customerEmail: 'muhasebe@abcteknoloji.com',\r        customerPhone: '+90 212 555 0100',\r        customerAddress: 'Maslak Mah. Teknoloji Cad. No:15\\nSarıyer/İstanbul',\r        customerTaxNumber: '1234567890',\r        customerTaxOffice: 'Sarıyer',\r        invoiceDate: '2024-01-15T00:00:00',\r        dueDate: '2024-02-15T00:00:00',\r        subTotal: 10000,\r        taxAmount: 1800,\r        discountAmount: 500,\r        totalAmount: 11300,\r        currency: 'TRY',\r        status: 'Paid',\r        paidDate: '2024-02-10T00:00:00',\r        paymentMethod: 'BankTransfer',\r        notes: 'Ödeme IBAN: TR12 0001 2345 6789 0123 4567 89',\r        items: [\r          {\r            id: '1',\r            productId: '1',\r            productName: 'Yazılım Lisansı - Pro',\r            description: 'Yıllık yazılım lisansı',\r            quantity: 2,\r            unitPrice: 3000,\r            taxRate: 18,\r            discountRate: 5,\r            totalPrice: 5700,\r          },\r          {\r            id: '2',\r            productId: '2',\r            productName: 'Destek Paketi',\r            description: '7/24 teknik destek hizmeti',\r            quantity: 1,\r            unitPrice: 4000,\r            taxRate: 18,\r            discountRate: 0,\r            totalPrice: 4720,\r          },\r        ],\r        createdAt: '2024-01-15T10:30:00',\r        createdBy: 'Ahmet Yılmaz',\r        updatedAt: '2024-02-10T14:20:00',\r        updatedBy: 'Mehmet Demir',\r      };\r      setInvoice(mockInvoice);\r    } catch (error) {\r      message.error('Fatura detayları yüklenemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handlePrint = () => {\r    window.print();\r  };\r  const handleDownloadPDF = async () => {\r    try {\r      message.loading('PDF oluşturuluyor...');\r      // await invoiceService.downloadInvoicePDF(id!);\r      setTimeout(() => {\r        message.success('PDF başarıyla indirildi');\r      }, 1500);\r    } catch (error) {\r      message.error('PDF indirilemedi');\r    }\r  };\r  const handleSendEmail = async () => {\r    setSendModalVisible(true);\r  };\r  const handleEdit = () => {\r    navigate(`/app/${id}/invoices/${id}/edit`);\r  };\r  const handleDelete = async () => {\r    try {\r      // await invoiceService.deleteInvoice(id!);\r      message.success('Fatura başarıyla silindi');\r      navigate(-1);\r    } catch (error) {\r      message.error('Fatura silinemedi');\r    }\r  };\r  const handleDuplicate = () => {\r    message.info('Fatura kopyalandı');\r    navigate('/app/tenant/invoices/new');\r  };\r  const handleMarkAsPaid = async () => {\r    try {\r      message.success('Fatura ödendi olarak işaretlendi');\r      fetchInvoiceDetail();\r    } catch (error) {\r      message.error('İşlem başarısız');\r    }\r  };\r  const getStatusColor = (status: string) => {\r    const statusColors: Record<string, string> = {\r      Draft: 'default',\r      Sent: 'processing',\r      Paid: 'success',\r      Overdue: 'error',\r      Cancelled: 'warning',\r      PartiallyPaid: 'warning',\r    };\r    return statusColors[status] || 'default';\r  };\r  const getStatusIcon = (status: string) => {\r    const statusIcons: Record<string, React.ReactNode> = {\r      Draft: <EditOutlined />,\r      Sent: <ClockCircleOutlined />,\r      Paid: <CheckCircleOutlined />,\r      Overdue: <ExclamationCircleOutlined />,\r      Cancelled: <CloseCircleOutlined />,\r    };\r    return statusIcons[status] || null;\r  };\r  const moreActions = [\r    {\r      key: 'duplicate',\r      label: 'Kopyala',\r      icon: <CopyOutlined />,\r      onClick: handleDuplicate,\r    },\r    {\r      key: 'share',\r      label: 'Paylaş',\r      icon: <ShareAltOutlined />,\r    },\r    {\r      key: 'export-excel',\r      label: 'Excel Olarak İndir',\r      icon: <FileExcelOutlined />,\r    },\r    {\r      type: 'divider',\r    },\r    {\r      key: 'delete',\r      label: 'Sil',\r      icon: <DeleteOutlined />,\r      danger: true,\r      onClick: () => setDeleteModalVisible(true),\r    },\r  ];\r  const itemColumns = [\r    {\r      title: '#',\r      dataIndex: 'index',\r      key: 'index',\r      width: 50,\r      render: (_: any, __: any, index: number) => index + 1,\r    },\r    {\r      title: 'Ürün/Hizmet',\r      dataIndex: 'productName',\r      key: 'productName',\r      render: (text: string, record: InvoiceItem) => (\r        <div>\r          <Text strong>{text}</Text>\r          {record.description && (\r            <div>\r              <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                {record.description}\r              </Text>\r            </div>\r          )}\r        </div>\r      ),\r    },\r    {\r      title: 'Miktar',\r      dataIndex: 'quantity',\r      key: 'quantity',\r      width: 100,\r      align: 'center' as const,\r    },\r    {\r      title: 'Birim Fiyat',\r      dataIndex: 'unitPrice',\r      key: 'unitPrice',\r      width: 120,\r      align: 'right' as const,\r      render: (value: number) => formatCurrency(value),\r    },\r    {\r      title: 'İndirim %',\r      dataIndex: 'discountRate',\r      key: 'discountRate',\r      width: 100,\r      align: 'center' as const,\r      render: (value: number) => (value > 0 ? `%${value}` : '-'),\r    },\r    {\r      title: 'KDV %',\r      dataIndex: 'taxRate',\r      key: 'taxRate',\r      width: 100,\r      align: 'center' as const,\r      render: (value: number) => `%${value}`,\r    },\r    {\r      title: 'Toplam',\r      dataIndex: 'totalPrice',\r      key: 'totalPrice',\r      width: 150,\r      align: 'right' as const,\r      render: (value: number) => <Text strong>{formatCurrency(value)}</Text>,\r    },\r  ];\r  if (loading) {\r    return (\r      <div className=\"invoice-detail-loading\">\r        <Spin size=\"large\" />\r      </div>\r    );\r  }\r  if (!invoice) {\r    return (\r      <Result\r        status=\"404\"\r        title=\"Fatura Bulunamadı\"\r        subTitle=\"Aradığınız fatura bulunamadı veya silinmiş olabilir.\"\r        extra={\r          <Button type=\"primary\" onClick={() => navigate(-1)}>\r            Geri Dön\r          </Button>\r        }\r      />\r    );\r  }\r  return (\r    <div className=\"invoice-detail-page\">\r      <PageHeader\r        ghost={false}\r        onBack={() => navigate(-1)}\r        title={`Fatura #${invoice.invoiceNumber}`}\r        tags={\r          <Tag\r            color={getStatusColor(invoice.status)}\r            icon={getStatusIcon(invoice.status)}\r          >\r            {invoice.status === 'Paid' ? 'Ödendi' :\r             invoice.status === 'Overdue' ? 'Gecikmiş' :\r             invoice.status === 'Sent' ? 'Gönderildi' :\r             invoice.status === 'Draft' ? 'Taslak' :\r             invoice.status === 'Cancelled' ? 'İptal' : invoice.status}\r          </Tag>\r        }\r        extra={[\r          <Button key=\"print\" icon={<PrinterOutlined />} onClick={handlePrint} aria-label=\"printer outlined\">\r            Yazdır\r          </Button>,\r          <Button\r            key=\"download\"\r            icon={<FilePdfOutlined />}\r            onClick={handleDownloadPDF}\r           aria-label=\"file pdf outlined\">\r            PDF İndir\r          </Button>,\r          <Button\r            key=\"send\"\r            type=\"primary\"\r            icon={<MailOutlined />}\r            onClick={handleSendEmail}\r           aria-label=\"mail outlined\">\r            Email Gönder\r          </Button>,\r          <Button key=\"edit\" icon={<EditOutlined />} onClick={handleEdit} aria-label=\"edit outlined\">\r            Düzenle\r          </Button>,\r          <Dropdown\r            key=\"more\"\r            menu={{ items: moreActions }}\r            placement=\"bottomRight\"\r          >\r            <Button icon={<MoreOutlined />} / aria-label=\"more outlined\">\r          </Dropdown>,\r        ]}\r      />\r      <div className=\"invoice-detail-content\">\r        <Row gutter={[24, 24]}>\r          <Col xs={24} lg={16}>\r            <Card className=\"invoice-main-card\">\r              {/* Header */}\r              <div className=\"invoice-header\">\r                <div className=\"invoice-logo\">\r                  <Title level={3}>STOCKER</Title>\r                  <Text type=\"secondary\">Profesyonel Fatura</Text>\r                </div>\r                <div className=\"invoice-header-info\">\r                  <Title level={2} style={{ margin: 0 }}>\r                    FATURA\r                  </Title>\r                  <Text strong style={{ fontSize: 16 }}>\r                    #{invoice.invoiceNumber}\r                  </Text>\r                </div>\r              </div>\r              <Divider />\r              {/* Company and Customer Info */}\r              <Row gutter={48}>\r                <Col span={12}>\r                  <div className=\"info-section\">\r                    <Text type=\"secondary\">Faturayı Kesen:</Text>\r                    <Title level={5}>Stocker Yazılım A.Ş.</Title>\r                    <Paragraph>\r                      Teknoloji Mah. İnovasyon Cad. No:42<br />\r                      Şişli/İstanbul<br />\r                      Tel: +90 212 555 0200<br />\r                      Email: fatura@stocker.com\r                    </Paragraph>\r                  </div>\r                </Col>\r                <Col span={12}>\r                  <div className=\"info-section\">\r                    <Text type=\"secondary\">Fatura Edilen:</Text>\r                    <Title level={5}>{invoice.customerName}</Title>\r                    <Paragraph>\r                      {invoice.customerAddress}<br />\r                      Tel: {invoice.customerPhone}<br />\r                      Email: {invoice.customerEmail}<br />\r                      {invoice.customerTaxNumber && (\r                        <>\r                          VKN: {invoice.customerTaxNumber}<br />\r                          V.D.: {invoice.customerTaxOffice}\r                        </>\r                      )}\r                    </Paragraph>\r                  </div>\r                </Col>\r              </Row>\r              <Divider />\r              {/* Invoice Details */}\r              <Row gutter={48} style={{ marginBottom: 24 }}>\r                <Col span={8}>\r                  <div className=\"detail-item\">\r                    <Text type=\"secondary\">Fatura Tarihi:</Text>\r                    <div>\r                      <Text strong>{formatDate(invoice.invoiceDate)}</Text>\r                    </div>\r                  </div>\r                </Col>\r                <Col span={8}>\r                  <div className=\"detail-item\">\r                    <Text type=\"secondary\">Vade Tarihi:</Text>\r                    <div>\r                      <Text strong>{formatDate(invoice.dueDate)}</Text>\r                    </div>\r                  </div>\r                </Col>\r                <Col span={8}>\r                  <div className=\"detail-item\">\r                    <Text type=\"secondary\">Ödeme Yöntemi:</Text>\r                    <div>\r                      <Text strong>\r                        {invoice.paymentMethod === 'BankTransfer' ? 'Banka Havalesi' :\r                         invoice.paymentMethod === 'CreditCard' ? 'Kredi Kartı' :\r                         invoice.paymentMethod === 'Cash' ? 'Nakit' : \r                         invoice.paymentMethod}\r                      </Text>\r                    </div>\r                  </div>\r                </Col>\r              </Row>\r              {/* Items Table */}\r              <Table\r                dataSource={invoice.items}\r                columns={itemColumns}\r                pagination={false}\r                rowKey=\"id\"\r                className=\"invoice-items-table\"\r              />\r              {/* Summary */}\r              <Row justify=\"end\" style={{ marginTop: 24 }}>\r                <Col span={10}>\r                  <div className=\"invoice-summary\">\r                    <div className=\"summary-item\">\r                      <Text>Ara Toplam:</Text>\r                      <Text>{formatCurrency(invoice.subTotal)}</Text>\r                    </div>\r                    {invoice.discountAmount > 0 && (\r                      <div className=\"summary-item\">\r                        <Text>İndirim:</Text>\r                        <Text type=\"danger\">-{formatCurrency(invoice.discountAmount)}</Text>\r                      </div>\r                    )}\r                    <div className=\"summary-item\">\r                      <Text>KDV (%18):</Text>\r                      <Text>{formatCurrency(invoice.taxAmount)}</Text>\r                    </div>\r                    <Divider style={{ margin: '12px 0' }} />\r                    <div className=\"summary-item total\">\r                      <Title level={4}>Genel Toplam:</Title>\r                      <Title level={4} style={{ color: '#1890ff' }}>\r                        {formatCurrency(invoice.totalAmount)}\r                      </Title>\r                    </div>\r                  </div>\r                </Col>\r              </Row>\r              {/* Notes */}\r              {invoice.notes && (\r                <>\r                  <Divider />\r                  <div className=\"invoice-notes\">\r                    <Title level={5}>Notlar:</Title>\r                    <Paragraph>{invoice.notes}</Paragraph>\r                  </div>\r                </>\r              )}\r              {/* Footer */}\r              <Divider />\r              <div className=\"invoice-footer\">\r                <Text type=\"secondary\">\r                  Bu fatura {formatDate(invoice.createdAt, 'DD.MM.YYYY HH:mm')} tarihinde \r                  oluşturulmuştur.\r                </Text>\r              </div>\r            </Card>\r          </Col>\r          <Col xs={24} lg={8}>\r            {/* Status Card */}\r            <Card className=\"status-card\" style={{ marginBottom: 16 }}>\r              <Title level={5}>Fatura Durumu</Title>\r              <div className=\"status-content\">\r                <Badge\r                  status={invoice.status === 'Paid' ? 'success' : 'processing'}\r                  text={\r                    <Text strong style={{ fontSize: 16 }}>\r                      {invoice.status === 'Paid' ? 'Ödendi' :\r                       invoice.status === 'Overdue' ? 'Gecikmiş' :\r                       invoice.status === 'Sent' ? 'Gönderildi' :\r                       invoice.status}\r                    </Text>\r                  }\r                />\r                {invoice.paidDate && (\r                  <div style={{ marginTop: 12 }}>\r                    <Text type=\"secondary\">Ödeme Tarihi:</Text>\r                    <div>\r                      <Text>{formatDate(invoice.paidDate)}</Text>\r                    </div>\r                  </div>\r                )}\r              </div>\r              {invoice.status !== 'Paid' && (\r                <Button\r                  type=\"primary\"\r                  block\r                  style={{ marginTop: 16 }}\r                  onClick={handleMarkAsPaid}\r                >\r                  Ödendi Olarak İşaretle\r                </Button>\r              )}\r            </Card>\r            {/* Payment Info Card */}\r            <Card className=\"payment-info-card\" style={{ marginBottom: 16 }}>\r              <Title level={5}>Ödeme Bilgileri</Title>\r              <Descriptions column={1} size=\"small\">\r                <Descriptions.Item label=\"Toplam Tutar\">\r                  <Text strong style={{ fontSize: 18, color: '#1890ff' }}>\r                    {formatCurrency(invoice.totalAmount)}\r                  </Text>\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Ödeme Yöntemi\">\r                  {invoice.paymentMethod === 'BankTransfer' ? 'Banka Havalesi' :\r                   invoice.paymentMethod === 'CreditCard' ? 'Kredi Kartı' :\r                   invoice.paymentMethod}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Vade Tarihi\">\r                  {formatDate(invoice.dueDate)}\r                </Descriptions.Item>\r              </Descriptions>\r            </Card>\r            {/* Activity Timeline */}\r            <Card className=\"activity-card\">\r              <Title level={5}>İşlem Geçmişi</Title>\r              <Timeline\r                items={[\r                  {\r                    color: 'green',\r                    children: (\r                      <>\r                        <Text strong>Ödeme alındı</Text>\r                        <div>\r                          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                            {formatDate(invoice.paidDate, 'DD.MM.YYYY HH:mm')}\r                          </Text>\r                        </div>\r                      </>\r                    ),\r                  },\r                  {\r                    color: 'blue',\r                    children: (\r                      <>\r                        <Text strong>Fatura gönderildi</Text>\r                        <div>\r                          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                            {formatDate(invoice.invoiceDate, 'DD.MM.YYYY HH:mm')}\r                          </Text>\r                        </div>\r                      </>\r                    ),\r                  },\r                  {\r                    color: 'gray',\r                    children: (\r                      <>\r                        <Text strong>Fatura oluşturuldu</Text>\r                        <div>\r                          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                            {invoice.createdBy} • {formatDate(invoice.createdAt, 'DD.MM.YYYY HH:mm')}\r                          </Text>\r                        </div>\r                      </>\r                    ),\r                  },\r                ]}\r              />\r            </Card>\r          </Col>\r        </Row>\r      </div>\r      {/* Send Email Modal */}\r      <Modal\r        title=\"Fatura Gönder\"\r        open={sendModalVisible}\r        onOk={() => {\r          message.success('Fatura email ile gönderildi');\r          setSendModalVisible(false);\r        }}\r        onCancel={() => setSendModalVisible(false)}\r        okText=\"Gönder\"\r        cancelText=\"İptal\"\r      >\r        <Alert\r          message=\"Fatura müşteriye email olarak gönderilecek\"\r          description={`${invoice.customerEmail} adresine fatura gönderilecektir.`}\r          type=\"info\"\r          showIcon\r        />\r      </Modal>\r      {/* Delete Confirmation Modal */}\r      <Modal\r        title=\"Faturayı Sil\"\r        open={deleteModalVisible}\r        onOk={handleDelete}\r        onCancel={() => setDeleteModalVisible(false)}\r        okText=\"Sil\"\r        cancelText=\"İptal\"\r        okButtonProps={{ danger: true }}\r      >\r        <Alert\r          message=\"Bu işlem geri alınamaz!\"\r          description=\"Faturayı silmek istediğinizden emin misiniz?\"\r          type=\"warning\"\r          showIcon\r        />\r      </Modal>\r    </div>\r  );\r};\rexport default InvoiceDetail;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/invoices/pages/InvoiceDetail/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { useParams, useNavigate } from 'react-router-dom';\rimport {\r  PageHeader,\r  ProForm,\r  ProFormText,\r  ProFormTextArea,\r  ProFormSelect,\r  ProFormDatePicker,\r  ProFormDigit,\r  ProFormList,\r} from '@ant-design/pro-components';\rimport {\r  Card,\r  Row,\r  Col,\r  Button,\r  Space,\r  Form,\r  Input,\r  Select,\r  DatePicker,\r  InputNumber,\r  Table,\r  Typography,\r  Divider,\r  message,\r  Modal,\r  AutoComplete,\r  Tag,\r  Alert,\r  Spin,\r} from 'antd';\rimport {\r  SaveOutlined,\r  SendOutlined,\r  DeleteOutlined,\r  PlusOutlined,\r  MinusCircleOutlined,\r  CalculatorOutlined,\r  UserOutlined,\r  PhoneOutlined,\r  MailOutlined,\r  HomeOutlined,\r} from '@ant-design/icons';\rimport { formatCurrency } from '@/shared/utils/formatters';\rimport invoiceService, { Invoice, InvoiceItem } from '@/services/invoiceService';\rimport dayjs from 'dayjs';\rimport './style.css';\rconst { Title, Text } = Typography;\rconst { Option } = Select;\rconst { TextArea } = Input;\rinterface InvoiceFormData {\r  customerId: string;\r  customerName: string;\r  customerEmail: string;\r  customerPhone: string;\r  customerAddress: string;\r  customerTaxNumber?: string;\r  customerTaxOffice?: string;\r  invoiceDate: dayjs.Dayjs;\r  dueDate: dayjs.Dayjs;\r  paymentMethod: string;\r  notes?: string;\r  items: InvoiceItem[];\r}\rexport const InvoiceEdit: React.FC = () => {\r  const { id } = useParams<{ id: string }>();\r  const navigate = useNavigate();\r  const [form] = Form.useForm();\r  const [loading, setLoading] = useState(false);\r  const [saving, setSaving] = useState(false);\r  const [customers, setCustomers] = useState<any[]>([]);\r  const [products, setProducts] = useState<any[]>([]);\r  const [items, setItems] = useState<InvoiceItem[]>([]);\r  const [totals, setTotals] = useState({\r    subTotal: 0,\r    taxAmount: 0,\r    discountAmount: 0,\r    totalAmount: 0,\r  });\r  useEffect(() => {\r    if (id) {\r      fetchInvoice();\r    } else {\r      // Yeni fatura için default değerler\r      const defaultItems = [{\r        id: '1',\r        productId: '',\r        productName: '',\r        description: '',\r        quantity: 1,\r        unitPrice: 0,\r        taxRate: 18,\r        discountRate: 0,\r        totalPrice: 0,\r      }];\r      setItems(defaultItems);\r      form.setFieldsValue({\r        invoiceDate: dayjs(),\r        dueDate: dayjs().add(30, 'days'),\r        paymentMethod: 'BankTransfer',\r        items: defaultItems,\r      });\r    }\r    fetchCustomers();\r    fetchProducts();\r  }, [id]);\r  useEffect(() => {\r    calculateTotals();\r  }, [items]);\r  const fetchInvoice = async () => {\r    try {\r      setLoading(true);\r      // Gerçek API çağrısı\r      // const response = await invoiceService.getInvoiceById(id!);\r      // const invoice = response.data;\r      // Mock data\r      const invoice: Invoice = {\r        id: id!,\r        invoiceNumber: 'INV-2024-001',\r        customerId: '1',\r        customerName: 'ABC Teknoloji A.Ş.',\r        customerEmail: 'muhasebe@abcteknoloji.com',\r        customerPhone: '+90 212 555 0100',\r        customerAddress: 'Maslak Mah. Teknoloji Cad. No:15\\nSarıyer/İstanbul',\r        customerTaxNumber: '1234567890',\r        customerTaxOffice: 'Sarıyer',\r        invoiceDate: '2024-01-15T00:00:00',\r        dueDate: '2024-02-15T00:00:00',\r        subTotal: 10000,\r        taxAmount: 1800,\r        discountAmount: 500,\r        totalAmount: 11300,\r        currency: 'TRY',\r        status: 'Draft',\r        paymentMethod: 'BankTransfer',\r        notes: 'Ödeme IBAN: TR12 0001 2345 6789 0123 4567 89',\r        items: [\r          {\r            id: '1',\r            productId: '1',\r            productName: 'Yazılım Lisansı - Pro',\r            description: 'Yıllık yazılım lisansı',\r            quantity: 2,\r            unitPrice: 3000,\r            taxRate: 18,\r            discountRate: 5,\r            totalPrice: 5700,\r          },\r          {\r            id: '2',\r            productId: '2',\r            productName: 'Destek Paketi',\r            description: '7/24 teknik destek hizmeti',\r            quantity: 1,\r            unitPrice: 4000,\r            taxRate: 18,\r            discountRate: 0,\r            totalPrice: 4720,\r          },\r        ],\r        createdAt: '2024-01-15T10:30:00',\r      };\r      // Form'a verileri set et\r      form.setFieldsValue({\r        ...invoice,\r        invoiceDate: dayjs(invoice.invoiceDate),\r        dueDate: dayjs(invoice.dueDate),\r      });\r      setItems(invoice.items);\r    } catch (error) {\r      message.error('Fatura yüklenemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const fetchCustomers = async () => {\r    // Mock müşteri listesi\r    const mockCustomers = [\r      {\r        id: '1',\r        name: 'ABC Teknoloji A.Ş.',\r        email: 'muhasebe@abcteknoloji.com',\r        phone: '+90 212 555 0100',\r        address: 'Maslak Mah. Teknoloji Cad. No:15\\nSarıyer/İstanbul',\r        taxNumber: '1234567890',\r        taxOffice: 'Sarıyer',\r      },\r      {\r        id: '2',\r        name: 'XYZ Yazılım Ltd.',\r        email: 'info@xyzyazilim.com',\r        phone: '+90 216 555 0200',\r        address: 'Ataşehir/İstanbul',\r        taxNumber: '9876543210',\r        taxOffice: 'Ataşehir',\r      },\r    ];\r    setCustomers(mockCustomers);\r  };\r  const fetchProducts = async () => {\r    // Mock ürün listesi\r    const mockProducts = [\r      {\r        id: '1',\r        name: 'Yazılım Lisansı - Pro',\r        description: 'Yıllık yazılım lisansı',\r        price: 3000,\r        taxRate: 18,\r      },\r      {\r        id: '2',\r        name: 'Destek Paketi',\r        description: '7/24 teknik destek hizmeti',\r        price: 4000,\r        taxRate: 18,\r      },\r      {\r        id: '3',\r        name: 'Eğitim Hizmeti',\r        description: 'Uzaktan eğitim (10 saat)',\r        price: 5000,\r        taxRate: 18,\r      },\r    ];\r    setProducts(mockProducts);\r  };\r  const handleCustomerSelect = (customerId: string) => {\r    const customer = customers.find(c => c.id === customerId);\r    if (customer) {\r      form.setFieldsValue({\r        customerName: customer.name,\r        customerEmail: customer.email,\r        customerPhone: customer.phone,\r        customerAddress: customer.address,\r        customerTaxNumber: customer.taxNumber,\r        customerTaxOffice: customer.taxOffice,\r      });\r    }\r  };\r  const handleProductSelect = (productId: string, index: number) => {\r    const product = products.find(p => p.id === productId);\r    if (product) {\r      const newItems = [...items];\r      newItems[index] = {\r        ...newItems[index],\r        productId: product.id,\r        productName: product.name,\r        description: product.description,\r        unitPrice: product.price,\r        taxRate: product.taxRate,\r      };\r      setItems(newItems);\r      calculateItemTotal(index, newItems[index]);\r    }\r  };\r  const calculateItemTotal = (index: number, item: Partial<InvoiceItem>) => {\r    const quantity = item.quantity || 0;\r    const unitPrice = item.unitPrice || 0;\r    const discountRate = item.discountRate || 0;\r    const taxRate = item.taxRate || 0;\r    const subTotal = quantity * unitPrice;\r    const discountAmount = subTotal * (discountRate / 100);\r    const taxableAmount = subTotal - discountAmount;\r    const taxAmount = taxableAmount * (taxRate / 100);\r    const totalPrice = taxableAmount + taxAmount;\r    const newItems = [...items];\r    newItems[index] = {\r      ...newItems[index],\r      ...item,\r      totalPrice,\r    };\r    setItems(newItems);\r  };\r  const calculateTotals = () => {\r    let subTotal = 0;\r    let taxAmount = 0;\r    let discountAmount = 0;\r    items.forEach(item => {\r      const itemSubTotal = (item.quantity || 0) * (item.unitPrice || 0);\r      const itemDiscount = itemSubTotal * ((item.discountRate || 0) / 100);\r      const taxableAmount = itemSubTotal - itemDiscount;\r      const itemTax = taxableAmount * ((item.taxRate || 0) / 100);\r      subTotal += itemSubTotal;\r      discountAmount += itemDiscount;\r      taxAmount += itemTax;\r    });\r    const totalAmount = subTotal - discountAmount + taxAmount;\r    setTotals({\r      subTotal,\r      taxAmount,\r      discountAmount,\r      totalAmount,\r    });\r  };\r  const handleAddItem = () => {\r    const newItem: InvoiceItem = {\r      id: Date.now().toString(),\r      productId: '',\r      productName: '',\r      description: '',\r      quantity: 1,\r      unitPrice: 0,\r      taxRate: 18,\r      discountRate: 0,\r      totalPrice: 0,\r    };\r    setItems([...items, newItem]);\r  };\r  const handleRemoveItem = (index: number) => {\r    const newItems = items.filter((_, i) => i !== index);\r    setItems(newItems);\r  };\r  const handleItemChange = (index: number, field: string, value: any) => {\r    const newItems = [...items];\r    newItems[index] = {\r      ...newItems[index],\r      [field]: value,\r    };\r    if (['quantity', 'unitPrice', 'discountRate', 'taxRate'].includes(field)) {\r      calculateItemTotal(index, newItems[index]);\r    } else {\r      setItems(newItems);\r    }\r  };\r  const handleSave = async (values: any) => {\r    try {\r      setSaving(true);\r      const invoiceData = {\r        ...values,\r        items,\r        ...totals,\r        invoiceDate: values.invoiceDate.format('YYYY-MM-DD'),\r        dueDate: values.dueDate.format('YYYY-MM-DD'),\r      };\r      if (id) {\r        // await invoiceService.updateInvoice(id, invoiceData);\r        message.success('Fatura güncellendi');\r      } else {\r        // await invoiceService.createInvoice(invoiceData);\r        message.success('Fatura oluşturuldu');\r      }\r      navigate(-1);\r    } catch (error) {\r      message.error('İşlem başarısız');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleSaveAndSend = async (values: any) => {\r    await handleSave(values);\r    message.info('Fatura kaydedildi ve gönderildi');\r  };\r  const handleCancel = () => {\r    Modal.confirm({\r      title: 'İptal Et',\r      content: 'Değişiklikler kaybolacak. Devam etmek istiyor musunuz?',\r      okText: 'Evet',\r      cancelText: 'Hayır',\r      onOk: () => navigate(-1),\r    });\r  };\r  if (loading) {\r    return (\r      <div style={{ textAlign: 'center', padding: 100 }}>\r        <Spin size=\"large\" />\r      </div>\r    );\r  }\r  return (\r    <div className=\"invoice-edit-page\">\r      <PageHeader\r        ghost={false}\r        onBack={() => navigate(-1)}\r        title={id ? 'Fatura Düzenle' : 'Yeni Fatura'}\r        extra={[\r          <Button key=\"cancel\" onClick={handleCancel}>\r            İptal\r          </Button>,\r          <Button\r            key=\"save-draft\"\r            onClick={() => form.submit()}\r            loading={saving}\r          >\r            Taslak Kaydet\r          </Button>,\r          <Button\r            key=\"save-send\"\r            type=\"primary\"\r            icon={<SendOutlined />}\r            onClick={() = aria-label=\"send outlined\"> {\r              form.validateFields().then(values => {\r                handleSaveAndSend(values);\r              });\r            }}\r            loading={saving}\r          >\r            Kaydet ve Gönder\r          </Button>,\r        ]}\r      />\r      <div className=\"invoice-edit-content\">\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleSave}\r          className=\"invoice-form\"\r        >\r          <Row gutter={24}>\r            <Col xs={24} lg={16}>\r              <Card title=\"Fatura Bilgileri\" className=\"invoice-card\">\r                {/* Müşteri Bilgileri */}\r                <Title level={5}>Müşteri Bilgileri</Title>\r                <Row gutter={16}>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"customerId\"\r                      label=\"Müşteri Seç\"\r                    >\r                      <Select\r                        showSearch\r                        placeholder=\"Müşteri seçin veya yeni ekleyin\"\r                        onChange={handleCustomerSelect}\r                        filterOption={(input, option) = aria-label=\"select field\">\r                          (option?.children as string)\r                            .toLowerCase()\r                            .includes(input.toLowerCase())\r                        }\r                      >\r                        {customers.map(customer => (\r                          <Option key={customer.id} value={customer.id}>\r                            {customer.name}\r                          </Option>\r                        ))}\r                      </Select>\r                    </Form.Item>\r                  </Col>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"customerName\"\r                      label=\"Müşteri Adı\"\r                      rules={[{ required: true, message: 'Müşteri adı zorunludur' }]}\r                    >\r                      <Input prefix={<UserOutlined / aria-label=\"input field\">} placeholder=\"Müşteri adı\" />\r                    </Form.Item>\r                  </Col>\r                </Row>\r                <Row gutter={16}>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"customerEmail\"\r                      label=\"Email\"\r                      rules={[\r                        { required: true, message: 'Email zorunludur' },\r                        { type: 'email', message: 'Geçerli email giriniz' },\r                      ]}\r                    >\r                      <Input prefix={<MailOutlined / aria-label=\"input field\">} placeholder=\"email@example.com\" />\r                    </Form.Item>\r                  </Col>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"customerPhone\"\r                      label=\"Telefon\"\r                      rules={[{ required: true, message: 'Telefon zorunludur' }]}\r                    >\r                      <Input prefix={<PhoneOutlined / aria-label=\"input field\">} placeholder=\"+90 5XX XXX XXXX\" />\r                    </Form.Item>\r                  </Col>\r                </Row>\r                <Row gutter={16}>\r                  <Col span={24}>\r                    <Form.Item\r                      name=\"customerAddress\"\r                      label=\"Adres\"\r                      rules={[{ required: true, message: 'Adres zorunludur' }]}\r                    >\r                      <TextArea\r                        rows={2}\r                        placeholder=\"Müşteri adresi\"\r                        prefix={<HomeOutlined />}\r                      />\r                    </Form.Item>\r                  </Col>\r                </Row>\r                <Row gutter={16}>\r                  <Col span={12}>\r                    <Form.Item name=\"customerTaxNumber\" label=\"Vergi No\">\r                      <Input placeholder=\"Vergi numarası\" / aria-label=\"input field\">\r                    </Form.Item>\r                  </Col>\r                  <Col span={12}>\r                    <Form.Item name=\"customerTaxOffice\" label=\"Vergi Dairesi\">\r                      <Input placeholder=\"Vergi dairesi\" / aria-label=\"input field\">\r                    </Form.Item>\r                  </Col>\r                </Row>\r                <Divider />\r                {/* Fatura Detayları */}\r                <Title level={5}>Fatura Detayları</Title>\r                <Row gutter={16}>\r                  <Col span={8}>\r                    <Form.Item\r                      name=\"invoiceDate\"\r                      label=\"Fatura Tarihi\"\r                      rules={[{ required: true, message: 'Fatura tarihi zorunludur' }]}\r                    >\r                      <DatePicker style={{ width: '100%' }} format=\"DD.MM.YYYY\" />\r                    </Form.Item>\r                  </Col>\r                  <Col span={8}>\r                    <Form.Item\r                      name=\"dueDate\"\r                      label=\"Vade Tarihi\"\r                      rules={[{ required: true, message: 'Vade tarihi zorunludur' }]}\r                    >\r                      <DatePicker style={{ width: '100%' }} format=\"DD.MM.YYYY\" />\r                    </Form.Item>\r                  </Col>\r                  <Col span={8}>\r                    <Form.Item\r                      name=\"paymentMethod\"\r                      label=\"Ödeme Yöntemi\"\r                      rules={[{ required: true, message: 'Ödeme yöntemi zorunludur' }]}\r                    >\r                      <Select aria-label=\"select field\">\r                        <Option value=\"BankTransfer\">Banka Havalesi</Option>\r                        <Option value=\"CreditCard\">Kredi Kartı</Option>\r                        <Option value=\"Cash\">Nakit</Option>\r                        <Option value=\"Check\">Çek</Option>\r                      </Select>\r                    </Form.Item>\r                  </Col>\r                </Row>\r                <Divider />\r                {/* Ürün/Hizmet Kalemleri */}\r                <div className=\"invoice-items-section\">\r                  <div className=\"section-header\">\r                    <Title level={5}>Ürün/Hizmet Kalemleri</Title>\r                    <Button\r                      type=\"dashed\"\r                      onClick={handleAddItem}\r                      icon={<PlusOutlined />}\r                     aria-label=\"plus outlined\">\r                      Kalem Ekle\r                    </Button>\r                  </div>\r                  <Table\r                    dataSource={items}\r                    pagination={false}\r                    rowKey=\"id\"\r                    className=\"invoice-items-table\"\r                    columns={[\r                      {\r                        title: 'Ürün/Hizmet',\r                        dataIndex: 'productName',\r                        width: 250,\r                        render: (_, record, index) => (\r                          <div>\r                            <Select\r                              style={{ width: '100%', marginBottom: 8 }}\r                              placeholder=\"Ürün seçin\"\r                              value={record.productId}\r                              onChange={(value) = aria-label=\"select field\"> handleProductSelect(value, index)}\r                              showSearch\r                            >\r                              {products.map(product => (\r                                <Option key={product.id} value={product.id}>\r                                  {product.name}\r                                </Option>\r                              ))}\r                            </Select>\r                            <Input\r                              placeholder=\"Açıklama\"\r                              value={record.description}\r                              onChange={(e) = aria-label=\"input field\">\r                                handleItemChange(index, 'description', e.target.value)\r                              }\r                            />\r                          </div>\r                        ),\r                      },\r                      {\r                        title: 'Miktar',\r                        dataIndex: 'quantity',\r                        width: 100,\r                        render: (_, record, index) => (\r                          <InputNumber\r                            min={1}\r                            value={record.quantity}\r                            onChange={(value) = aria-label=\"input field\">\r                              handleItemChange(index, 'quantity', value)\r                            }\r                          />\r                        ),\r                      },\r                      {\r                        title: 'Birim Fiyat',\r                        dataIndex: 'unitPrice',\r                        width: 120,\r                        render: (_, record, index) => (\r                          <InputNumber\r                            min={0}\r                            value={record.unitPrice}\r                            onChange={(value) = aria-label=\"input field\">\r                              handleItemChange(index, 'unitPrice', value)\r                            }\r                            formatter={(value) => `₺ ${value}`}\r                            parser={(value) => value!.replace('₺ ', '')}\r                          />\r                        ),\r                      },\r                      {\r                        title: 'İndirim %',\r                        dataIndex: 'discountRate',\r                        width: 100,\r                        render: (_, record, index) => (\r                          <InputNumber\r                            min={0}\r                            max={100}\r                            value={record.discountRate}\r                            onChange={(value) = aria-label=\"input field\">\r                              handleItemChange(index, 'discountRate', value)\r                            }\r                            formatter={(value) => `${value}%`}\r                            parser={(value) => value!.replace('%', '')}\r                          />\r                        ),\r                      },\r                      {\r                        title: 'KDV %',\r                        dataIndex: 'taxRate',\r                        width: 100,\r                        render: (_, record, index) => (\r                          <Select\r                            value={record.taxRate}\r                            onChange={(value) = aria-label=\"select field\">\r                              handleItemChange(index, 'taxRate', value)\r                            }\r                          >\r                            <Option value={0}>%0</Option>\r                            <Option value={1}>%1</Option>\r                            <Option value={8}>%8</Option>\r                            <Option value={18}>%18</Option>\r                          </Select>\r                        ),\r                      },\r                      {\r                        title: 'Toplam',\r                        dataIndex: 'totalPrice',\r                        width: 120,\r                        render: (value) => (\r                          <Text strong>{formatCurrency(value || 0)}</Text>\r                        ),\r                      },\r                      {\r                        title: '',\r                        width: 50,\r                        render: (_, __, index) => (\r                          <Button\r                            type=\"text\"\r                            danger\r                            icon={<MinusCircleOutlined />}\r                            onClick={() = aria-label=\"minus circle outlined\"> handleRemoveItem(index)}\r                            disabled={items.length === 1}\r                          />\r                        ),\r                      },\r                    ]}\r                  />\r                </div>\r                <Divider />\r                {/* Notlar */}\r                <Title level={5}>Notlar</Title>\r                <Form.Item name=\"notes\">\r                  <TextArea\r                    rows={3}\r                    placeholder=\"Fatura ile ilgili notlar (isteğe bağlı)\"\r                  />\r                </Form.Item>\r              </Card>\r            </Col>\r            <Col xs={24} lg={8}>\r              {/* Özet */}\r              <Card title=\"Fatura Özeti\" className=\"summary-card\">\r                <div className=\"summary-content\">\r                  <div className=\"summary-item\">\r                    <Text>Ara Toplam:</Text>\r                    <Text strong>{formatCurrency(totals.subTotal)}</Text>\r                  </div>\r                  {totals.discountAmount > 0 && (\r                    <div className=\"summary-item\">\r                      <Text>İndirim:</Text>\r                      <Text type=\"danger\">-{formatCurrency(totals.discountAmount)}</Text>\r                    </div>\r                  )}\r                  <div className=\"summary-item\">\r                    <Text>KDV:</Text>\r                    <Text>{formatCurrency(totals.taxAmount)}</Text>\r                  </div>\r                  <Divider />\r                  <div className=\"summary-item total\">\r                    <Title level={4}>Genel Toplam:</Title>\r                    <Title level={4} style={{ color: '#1890ff', margin: 0 }}>\r                      {formatCurrency(totals.totalAmount)}\r                    </Title>\r                  </div>\r                </div>\r              </Card>\r              {/* Hızlı İşlemler */}\r              <Card title=\"Hızlı İşlemler\" style={{ marginTop: 16 }}>\r                <Space direction=\"vertical\" style={{ width: '100%' }}>\r                  <Alert\r                    message=\"Fatura Durumu\"\r                    description={id ? \"Taslak olarak kaydedilmiş\" : \"Henüz kaydedilmemiş\"}\r                    type=\"info\"\r                    showIcon\r                  />\r                  <Button\r                    block\r                    icon={<CalculatorOutlined />}\r                    onClick={calculateTotals}\r                   aria-label=\"calculator outlined\">\r                    Toplamları Yeniden Hesapla\r                  </Button>\r                </Space>\r              </Card>\r            </Col>\r          </Row>\r        </Form>\r      </div>\r    </div>\r  );\r};\rexport default InvoiceEdit;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/invoices/pages/InvoiceEdit/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Table,\r  Button,\r  Space,\r  Tag,\r  Input,\r  Select,\r  DatePicker,\r  Row,\r  Col,\r  Statistic,\r  Avatar,\r  Dropdown,\r  Menu,\r  message,\r  Tooltip,\r  Badge,\r  Empty,\r  Spin\r} from 'antd';\rimport {\r  PlusOutlined,\r  SearchOutlined,\r  DownloadOutlined,\r  PrinterOutlined,\r  MailOutlined,\r  EyeOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  MoreOutlined,\r  DollarOutlined,\r  FileTextOutlined,\r  ClockCircleOutlined,\r  CheckCircleOutlined,\r  WarningOutlined,\r  FilterOutlined\r} from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport type { ColumnsType } from 'antd/es/table';\rimport invoiceService, { Invoice, InvoiceFilters } from '../../../../services/invoiceService';\rimport './style.css';\rconst { RangePicker } = DatePicker;\rconst { Option } = Select;\rconst InvoiceList: React.FC = () => {\r  const navigate = useNavigate();\r  const [invoices, setInvoices] = useState<Invoice[]>([]);\r  const [loading, setLoading] = useState(false);\r  const [filters, setFilters] = useState<InvoiceFilters>({\r    pageNumber: 1,\r    pageSize: 20\r  });\r  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\r  const [statistics, setStatistics] = useState({\r    total: 0,\r    paid: 0,\r    pending: 0,\r    overdue: 0\r  });\r  useEffect(() => {\r    fetchInvoices();\r    // eslint-disable-next-line\r  }, [filters]);\r  const fetchInvoices = async () => {\r    try {\r      setLoading(true);\r      // Mock data for demo - API henüz hazır değilse\r      const mockInvoices: Invoice[] = [\r        {\r          id: '1',\r          invoiceNumber: 'INV-2024-001',\r          customerId: '1',\r          customerName: 'ABC Teknoloji A.Ş.',\r          invoiceDate: '2024-01-15T00:00:00',\r          dueDate: '2024-02-15T00:00:00',\r          subTotal: 10000,\r          taxAmount: 1800,\r          discountAmount: 500,\r          totalAmount: 11300,\r          currency: 'TRY',\r          status: 'Paid',\r          paidDate: '2024-02-10T00:00:00',\r          paymentMethod: 'BankTransfer',\r          items: [],\r          createdAt: '2024-01-15T00:00:00'\r        },\r        {\r          id: '2',\r          invoiceNumber: 'INV-2024-002',\r          customerId: '2',\r          customerName: 'XYZ Yazılım Ltd.',\r          invoiceDate: '2024-01-20T00:00:00',\r          dueDate: '2024-02-20T00:00:00',\r          subTotal: 25000,\r          taxAmount: 4500,\r          discountAmount: 1000,\r          totalAmount: 28500,\r          currency: 'TRY',\r          status: 'Overdue',\r          items: [],\r          createdAt: '2024-01-20T00:00:00'\r        },\r        {\r          id: '3',\r          invoiceNumber: 'INV-2024-003',\r          customerId: '3',\r          customerName: 'Demo Şirketi',\r          invoiceDate: '2024-02-01T00:00:00',\r          dueDate: '2024-03-01T00:00:00',\r          subTotal: 15000,\r          taxAmount: 2700,\r          discountAmount: 0,\r          totalAmount: 17700,\r          currency: 'TRY',\r          status: 'Sent',\r          items: [],\r          createdAt: '2024-02-01T00:00:00'\r        },\r        {\r          id: '4',\r          invoiceNumber: 'INV-2024-004',\r          customerId: '1',\r          customerName: 'ABC Teknoloji A.Ş.',\r          invoiceDate: '2024-02-05T00:00:00',\r          dueDate: '2024-03-05T00:00:00',\r          subTotal: 8000,\r          taxAmount: 1440,\r          discountAmount: 400,\r          totalAmount: 9040,\r          currency: 'TRY',\r          status: 'Draft',\r          items: [],\r          createdAt: '2024-02-05T00:00:00'\r        },\r        {\r          id: '5',\r          invoiceNumber: 'INV-2024-005',\r          customerId: '2',\r          customerName: 'XYZ Yazılım Ltd.',\r          invoiceDate: '2024-01-10T00:00:00',\r          dueDate: '2024-02-10T00:00:00',\r          subTotal: 12000,\r          taxAmount: 2160,\r          discountAmount: 600,\r          totalAmount: 13560,\r          currency: 'TRY',\r          status: 'Cancelled',\r          items: [],\r          createdAt: '2024-01-10T00:00:00'\r        }\r      ];\r      // Filter mock data based on filters\r      let filteredData = [...mockInvoices];\r      if (filters.status) {\r        filteredData = filteredData.filter(inv => inv.status === filters.status);\r      }\r      setInvoices(filteredData);\r      calculateStatistics(filteredData);\r      // Gerçek API çağrısı - şimdilik yorum satırında\r      // const data = await invoiceService.getInvoices(filters);\r      // setInvoices(data);\r      // calculateStatistics(data);\r    } catch (error) {\r      message.error('Faturalar yüklenirken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const calculateStatistics = (data: Invoice[]) => {\r    const stats = data.reduce((acc, invoice) => {\r      acc.total += invoice.totalAmount;\r      if (invoice.status === 'Paid') {\r        acc.paid += invoice.totalAmount;\r      } else if (invoice.status === 'Sent' || invoice.status === 'Draft') {\r        acc.pending += invoice.totalAmount;\r      } else if (invoice.status === 'Overdue') {\r        acc.overdue += invoice.totalAmount;\r      }\r      return acc;\r    }, { total: 0, paid: 0, pending: 0, overdue: 0 });\r    setStatistics(stats);\r  };\r  const handleStatusChange = async (invoice: Invoice, action: string) => {\r    try {\r      switch (action) {\r        case 'send':\r          await invoiceService.sendInvoice(invoice.id);\r          message.success('Fatura gönderildi');\r          break;\r        case 'markPaid':\r          await invoiceService.markAsPaid(invoice.id, {\r            paymentDate: new Date().toISOString(),\r            paymentMethod: 'BankTransfer'\r          });\r          message.success('Fatura ödendi olarak işaretlendi');\r          break;\r        case 'cancel':\r          await invoiceService.cancelInvoice(invoice.id, 'Müşteri talebi');\r          message.success('Fatura iptal edildi');\r          break;\r      }\r      fetchInvoices();\r    } catch (error) {\r      message.error('İşlem başarısız oldu');\r    }\r  };\r  const handleDelete = async (id: string) => {\r    try {\r      await invoiceService.deleteInvoice(id);\r      message.success('Fatura silindi');\r      fetchInvoices();\r    } catch (error) {\r      message.error('Silme işlemi başarısız oldu');\r    }\r  };\r  const getActionMenu = (record: Invoice) => (\r    <Menu>\r      <Menu.Item key=\"view\" icon={<EyeOutlined />} onClick={() => navigate(`/invoices/${record.id}`)}>\r        Görüntüle\r      </Menu.Item>\r      <Menu.Item key=\"edit\" icon={<EditOutlined />} onClick={() => navigate(`/invoices/${record.id}/edit`)}>\r        Düzenle\r      </Menu.Item>\r      <Menu.Divider />\r      {record.status === 'Draft' && (\r        <Menu.Item key=\"send\" icon={<MailOutlined />} onClick={() => handleStatusChange(record, 'send')}>\r          Gönder\r        </Menu.Item>\r      )}\r      {record.status === 'Sent' && (\r        <Menu.Item key=\"markPaid\" icon={<CheckCircleOutlined />} onClick={() => handleStatusChange(record, 'markPaid')}>\r          Ödendi İşaretle\r        </Menu.Item>\r      )}\r      <Menu.Item key=\"print\" icon={<PrinterOutlined />}>\r        Yazdır\r      </Menu.Item>\r      <Menu.Item key=\"download\" icon={<DownloadOutlined />}>\r        PDF İndir\r      </Menu.Item>\r      <Menu.Divider />\r      {record.status === 'Draft' && (\r        <Menu.Item key=\"delete\" icon={<DeleteOutlined />} danger onClick={() => handleDelete(record.id)}>\r          Sil\r        </Menu.Item>\r      )}\r      {(record.status === 'Sent' || record.status === 'Overdue') && (\r        <Menu.Item key=\"cancel\" icon={<WarningOutlined />} danger onClick={() => handleStatusChange(record, 'cancel')}>\r          İptal Et\r        </Menu.Item>\r      )}\r    </Menu>\r  );\r  const columns: ColumnsType<Invoice> = [\r    {\r      title: 'Fatura No',\r      dataIndex: 'invoiceNumber',\r      key: 'invoiceNumber',\r      fixed: 'left',\r      width: 120,\r      render: (text, record) => (\r        <Button type=\"link\" onClick={() => navigate(`/invoices/${record.id}`)}>\r          {text}\r        </Button>\r      )\r    },\r    {\r      title: 'Müşteri',\r      dataIndex: 'customerName',\r      key: 'customerName',\r      width: 200,\r      render: (text) => (\r        <Space>\r          <Avatar style={{ backgroundColor: '#87d068' }}>{text?.charAt(0) || 'M'}</Avatar>\r          <span>{text || 'Müşteri Adı'}</span>\r        </Space>\r      )\r    },\r    {\r      title: 'Fatura Tarihi',\r      dataIndex: 'invoiceDate',\r      key: 'invoiceDate',\r      width: 120,\r      render: (date) => new Date(date).toLocaleDateString('tr-TR')\r    },\r    {\r      title: 'Vade Tarihi',\r      dataIndex: 'dueDate',\r      key: 'dueDate',\r      width: 120,\r      render: (date, record) => {\r        const daysOverdue = invoiceService.calculateDaysOverdue(date);\r        const isOverdue = record.status === 'Overdue' || (record.status === 'Sent' && daysOverdue > 0);\r        return (\r          <Space>\r            <span style={{ color: isOverdue ? '#ff4d4f' : undefined }}>\r              {new Date(date).toLocaleDateString('tr-TR')}\r            </span>\r            {isOverdue && (\r              <Tooltip title={`${Math.abs(daysOverdue)} gün gecikme`}>\r                <WarningOutlined style={{ color: '#ff4d4f' }} />\r              </Tooltip>\r            )}\r          </Space>\r        );\r      }\r    },\r    {\r      title: 'Tutar',\r      dataIndex: 'totalAmount',\r      key: 'totalAmount',\r      width: 150,\r      align: 'right',\r      render: (amount, record) => (\r        <span style={{ fontWeight: 600 }}>\r          {invoiceService.formatCurrency(amount, record.currency)}\r        </span>\r      ),\r      sorter: (a, b) => a.totalAmount - b.totalAmount\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      width: 120,\r      render: (status) => {\r        const statusMap: Record<string, { color: string; text: string }> = {\r          Draft: { color: 'default', text: 'Taslak' },\r          Sent: { color: 'processing', text: 'Gönderildi' },\r          Paid: { color: 'success', text: 'Ödendi' },\r          Overdue: { color: 'error', text: 'Gecikmiş' },\r          Cancelled: { color: 'warning', text: 'İptal' }\r        };\r        const config = statusMap[status] || { color: 'default', text: status };\r        return <Tag color={config.color}>{config.text}</Tag>;\r      },\r      filters: [\r        { text: 'Taslak', value: 'Draft' },\r        { text: 'Gönderildi', value: 'Sent' },\r        { text: 'Ödendi', value: 'Paid' },\r        { text: 'Gecikmiş', value: 'Overdue' },\r        { text: 'İptal', value: 'Cancelled' }\r      ]\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      fixed: 'right',\r      width: 100,\r      render: (_, record) => (\r        <Dropdown overlay={getActionMenu(record)} trigger={['click']}>\r          <Button icon={<MoreOutlined />} / aria-label=\"more outlined\">\r        </Dropdown>\r      )\r    }\r  ];\r  const rowSelection = {\r    selectedRowKeys,\r    onChange: (keys: React.Key[]) => setSelectedRowKeys(keys)\r  };\r  return (\r    <div className=\"invoice-list\">\r      {/* Statistics Cards */}\r      <Row gutter={16} className=\"statistics-row\">\r        <Col xs={24} sm={12} lg={6}>\r          <Card>\r            <Statistic\r              title=\"Toplam Fatura\"\r              value={invoices.length}\r              prefix={<FileTextOutlined />}\r              valueStyle={{ color: '#1890ff' }}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card>\r            <Statistic\r              title=\"Ödenen\"\r              value={statistics.paid}\r              prefix={<CheckCircleOutlined />}\r              valueStyle={{ color: '#52c41a' }}\r              formatter={(value) => invoiceService.formatCurrency(value as number)}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card>\r            <Statistic\r              title=\"Bekleyen\"\r              value={statistics.pending}\r              prefix={<ClockCircleOutlined />}\r              valueStyle={{ color: '#faad14' }}\r              formatter={(value) => invoiceService.formatCurrency(value as number)}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card>\r            <Statistic\r              title=\"Gecikmiş\"\r              value={statistics.overdue}\r              prefix={<WarningOutlined />}\r              valueStyle={{ color: '#ff4d4f' }}\r              formatter={(value) => invoiceService.formatCurrency(value as number)}\r            />\r          </Card>\r        </Col>\r      </Row>\r      {/* Main Content */}\r      <Card \r        title={\r          <Space>\r            <DollarOutlined />\r            <span>Faturalar</span>\r            <Badge count={invoices.length} showZero />\r          </Space>\r        }\r        extra={\r          <Space>\r            <Button icon={<FilterOutlined />} aria-label=\"filter outlined\">Filtrele</Button>\r            <Button icon={<DownloadOutlined />} aria-label=\"download outlined\">Dışa Aktar</Button>\r            <Button \r              type=\"primary\" \r              icon={<PlusOutlined />}\r              onClick={() = aria-label=\"plus outlined\"> navigate('/invoices/new')}\r            >\r              Yeni Fatura\r            </Button>\r          </Space>\r        }\r      >\r        {/* Filters */}\r        <Row gutter={16} className=\"filter-row\">\r          <Col xs={24} sm={12} lg={6}>\r            <Input\r              placeholder=\"Fatura no veya müşteri ara...\"\r              prefix={<SearchOutlined / aria-label=\"input field\">}\r              onChange={(e) => setFilters({ ...filters, pageNumber: 1 })}\r            />\r          </Col>\r          <Col xs={24} sm={12} lg={6}>\r            <Select\r              placeholder=\"Durum seçin\"\r              style={{ width: '100%' }}\r              allowClear\r              onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, status: value, pageNumber: 1 })}\r            >\r              <Option value=\"Draft\">Taslak</Option>\r              <Option value=\"Sent\">Gönderildi</Option>\r              <Option value=\"Paid\">Ödendi</Option>\r              <Option value=\"Overdue\">Gecikmiş</Option>\r              <Option value=\"Cancelled\">İptal</Option>\r            </Select>\r          </Col>\r          <Col xs={24} sm={12} lg={8}>\r            <RangePicker\r              style={{ width: '100%' }}\r              placeholder={['Başlangıç', 'Bitiş']}\r              onChange={(dates) => {\r                if (dates) {\r                  setFilters({\r                    ...filters,\r                    startDate: dates[0]?.toISOString(),\r                    endDate: dates[1]?.toISOString(),\r                    pageNumber: 1\r                  });\r                }\r              }}\r            />\r          </Col>\r        </Row>\r        {/* Table */}\r        <Table\r          rowSelection={rowSelection}\r          columns={columns}\r          dataSource={invoices}\r          rowKey=\"id\"\r          loading={loading}\r          scroll={{ x: 1200 }}\r          pagination={{\r            current: filters.pageNumber,\r            pageSize: filters.pageSize,\r            total: invoices.length * 2, // Mock total\r            showSizeChanger: true,\r            showQuickJumper: true,\r            showTotal: (total) => `Toplam ${total} fatura`,\r            onChange: (page, pageSize) => {\r              setFilters({ ...filters, pageNumber: page, pageSize });\r            }\r          }}\r          locale={{\r            emptyText: <Empty description=\"Fatura bulunamadı\" />\r          }}\r        />\r        {/* Bulk Actions */}\r        {selectedRowKeys.length > 0 && (\r          <div className=\"bulk-actions\">\r            <Space>\r              <span>{selectedRowKeys.length} fatura seçildi</span>\r              <Button icon={<MailOutlined />} aria-label=\"mail outlined\">Toplu Gönder</Button>\r              <Button icon={<PrinterOutlined />} aria-label=\"printer outlined\">Toplu Yazdır</Button>\r              <Button icon={<DownloadOutlined />} aria-label=\"download outlined\">PDF İndir</Button>\r              <Button danger icon={<DeleteOutlined />} aria-label=\"delete outlined\">Sil</Button>\r            </Space>\r          </div>\r        )}\r      </Card>\r    </div>\r  );\r};\rexport default InvoiceList;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/invoices/pages/InvoiceList/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useEffect, useState } from 'react';\rimport { Button, Typography } from 'antd';\rimport { RocketOutlined, PlayCircleOutlined } from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport { useNavigate } from 'react-router-dom';\rconst { Title, Paragraph } = Typography;\rexport const AnimatedHero: React.FC = () => {\r  const navigate = useNavigate();\r  const [typedText, setTypedText] = useState('');\r  const fullText = 'Tüm İşletme Süreçleriniz Tek Platformda';\r  useEffect(() => {\r    let index = 0;\r    const interval = setInterval(() => {\r      if (index <= fullText.length) {\r        setTypedText(fullText.slice(0, index));\r        index++;\r      } else {\r        clearInterval(interval);\r      }\r    }, 50);\r    return () => clearInterval(interval);\r  }, []);\r  // Floating particles\r  const particles = Array.from({ length: 30 }, (_, i) => ({\r    id: i,\r    x: Math.random() * 100,\r    y: Math.random() * 100,\r    size: Math.random() * 4 + 2,\r    duration: Math.random() * 20 + 10,\r    delay: Math.random() * 5\r  }));\r  return (\r    <section \r      className=\"hero-section\" \r      style={{\r        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r        minHeight: '100vh',\r        display: 'flex',\r        alignItems: 'center',\r        padding: '80px 0',\r        position: 'relative',\r        overflow: 'hidden'\r      }}\r    >\r      {/* Animated Background Particles */}\r      {particles.map(particle => (\r        <motion.div\r          key={particle.id}\r          style={{\r            position: 'absolute',\r            left: `${particle.x}%`,\r            top: `${particle.y}%`,\r            width: particle.size,\r            height: particle.size,\r            background: 'rgba(255, 255, 255, 0.3)',\r            borderRadius: '50%',\r          }}\r          animate={{\r            y: [-20, 20, -20],\r            x: [-10, 10, -10],\r            opacity: [0.3, 0.6, 0.3]\r          }}\r          transition={{\r            duration: particle.duration,\r            repeat: Infinity,\r            delay: particle.delay,\r            ease: 'easeInOut'\r          }}\r        />\r      ))}\r      <div className=\"container\" style={{ maxWidth: 1200, margin: '0 auto', padding: '0 24px', position: 'relative', zIndex: 1 }}>\r        <motion.div \r          style={{ textAlign: 'center', color: 'white' }}\r          initial={{ opacity: 0, y: 30 }}\r          animate={{ opacity: 1, y: 0 }}\r          transition={{ duration: 0.8 }}\r        >\r          <Title \r            level={1} \r            style={{ \r              fontSize: 'clamp(2.5rem, 5vw, 4rem)', \r              fontWeight: 700,\r              color: 'white',\r              marginBottom: 24,\r              lineHeight: 1.2,\r              minHeight: '100px'\r            }}\r          >\r            {typedText}\r            <motion.span\r              animate={{ opacity: [0, 1, 0] }}\r              transition={{ duration: 0.8, repeat: Infinity }}\r            >\r              |\r            </motion.span>\r          </Title>\r          <motion.div\r            initial={{ opacity: 0 }}\r            animate={{ opacity: 1 }}\r            transition={{ delay: 2, duration: 0.8 }}\r          >\r            <Paragraph \r              style={{ \r                fontSize: '1.35rem', \r                color: 'rgba(255,255,255,0.95)',\r                maxWidth: 600,\r                margin: '0 auto 40px',\r                fontWeight: 300\r              }}\r            >\r              Stocker ERP ile işletmenizi dijitalleştirin, verimliliğinizi %40 artırın.\r            </Paragraph>\r            <motion.div \r              style={{ display: 'flex', gap: 20, justifyContent: 'center', flexWrap: 'wrap' }}\r              initial={{ opacity: 0, y: 20 }}\r              animate={{ opacity: 1, y: 0 }}\r              transition={{ delay: 2.5, duration: 0.8 }}\r            >\r              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\r                <Button\r                  type=\"primary\"\r                  size=\"large\"\r                  icon={<RocketOutlined />}\r                  onClick={() = aria-label=\"rocket outlined\"> navigate('/register')}\r                  style={{\r                    height: 56,\r                    paddingLeft: 40,\r                    paddingRight: 40,\r                    fontSize: 18,\r                    background: 'white',\r                    color: '#667eea',\r                    border: 'none',\r                    fontWeight: 600,\r                    boxShadow: '0 8px 30px rgba(0,0,0,0.12)',\r                  }}\r                >\r                  14 Gün Ücretsiz Dene\r                </Button>\r              </motion.div>\r              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\r                <Button\r                  size=\"large\"\r                  icon={<PlayCircleOutlined />}\r                  ghost\r                  style={{\r                    height: 56,\r                    paddingLeft: 40,\r                    paddingRight: 40,\r                    fontSize: 18,\r                    color: 'white',\r                    borderColor: 'rgba(255,255,255,0.8)',\r                    borderWidth: 2,\r                    fontWeight: 500\r                  }}\r                 aria-label=\"play circle outlined\">\r                  Canlı Demo\r                </Button>\r              </motion.div>\r            </motion.div>\r            <motion.div \r              style={{ \r                marginTop: 32,\r                display: 'flex',\r                gap: 24,\r                justifyContent: 'center',\r                alignItems: 'center',\r                flexWrap: 'wrap'\r              }}\r              initial={{ opacity: 0 }}\r              animate={{ opacity: 1 }}\r              transition={{ delay: 3, duration: 0.8 }}\r            >\r              <span style={{ color: 'rgba(255,255,255,0.9)', fontSize: 15 }}>✓ Kredi kartı gerekmez</span>\r              <span style={{ color: 'rgba(255,255,255,0.9)', fontSize: 15 }}>✓ 5 dakikada kurulum</span>\r              <span style={{ color: 'rgba(255,255,255,0.9)', fontSize: 15 }}>✓ 7/24 destek</span>\r            </motion.div>\r          </motion.div>\r        </motion.div>\r      </div>\r    </section>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/AnimatedHero/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { Typography, Tag, Card, Row, Col, Button, Space, Badge, Divider, Tooltip } from 'antd';\rimport {\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  InfoCircleOutlined,\r  CrownOutlined,\r  RocketOutlined,\r  ThunderboltOutlined,\r  StarFilled,\r  TeamOutlined,\r  CloudOutlined,\r  ApiOutlined,\r  SafetyOutlined,\r  CustomerServiceOutlined,\r  FileProtectOutlined,\r  DashboardOutlined,\r  SettingOutlined,\r  MinusOutlined,\r  AppstoreOutlined\r} from '@ant-design/icons';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport './style.css';\rconst { Title, Paragraph, Text } = Typography;\rconst plansData = [\r  {\r    key: 'starter',\r    name: 'Başlangıç',\r    description: 'Küçük işletmeler ve yeni başlayanlar için',\r    price: 499,\r    period: 'ay',\r    icon: <RocketOutlined />,\r    color: '#667eea',\r    gradient: 'linear-gradient(135deg, #667eea, #764ba2)',\r    popular: false,\r    savings: null,\r    features: {\r      included: [\r        { icon: <TeamOutlined />, text: '5 Kullanıcı' },\r        { icon: <CloudOutlined />, text: '10 GB Depolama' },\r        { icon: <DashboardOutlined />, text: '3 Ana Modül (CRM, Stok, Satış)' },\r        { icon: <FileProtectOutlined />, text: 'Temel Raporlar' },\r        { icon: <CustomerServiceOutlined />, text: 'E-posta Desteği' },\r        { icon: <SafetyOutlined />, text: 'Günlük Yedekleme' }\r      ],\r      notIncluded: [\r        'E-Fatura Entegrasyonu',\r        'API Erişimi',\r        '7/24 Telefon Destek',\r        'Finans & Muhasebe Modülü'\r      ]\r    }\r  },\r  {\r    key: 'professional',\r    name: 'Profesyonel',\r    description: 'Büyüyen işletmeler için tam kapsamlı çözüm',\r    price: 999,\r    period: 'ay',\r    icon: <ThunderboltOutlined />,\r    color: '#764ba2',\r    gradient: 'linear-gradient(135deg, #764ba2, #f093fb)',\r    popular: true,\r    savings: 'En popüler seçim',\r    features: {\r      included: [\r        { icon: <TeamOutlined />, text: '25 Kullanıcı' },\r        { icon: <CloudOutlined />, text: '100 GB Depolama' },\r        { icon: <DashboardOutlined />, text: 'Tüm Standart Modüller (5 Modül)' },\r        { icon: <ApiOutlined />, text: 'API Erişimi' },\r        { icon: <FileProtectOutlined />, text: 'Gelişmiş Raporlar & Analizler' },\r        { icon: <CustomerServiceOutlined />, text: '7/24 Telefon & Canlı Destek' },\r        { icon: <SafetyOutlined />, text: 'E-Fatura & E-Arşiv' },\r        { icon: <SettingOutlined />, text: '3 E-Ticaret Entegrasyonu' }\r      ],\r      notIncluded: [\r        'Üretim Planlama Modülü',\r        'Multi-Şirket Yönetimi',\r        'White Label',\r        'Özel Sunucu'\r      ]\r    }\r  },\r  {\r    key: 'enterprise',\r    name: 'Kurumsal',\r    description: 'Büyük ölçekli işletmeler için özel çözümler',\r    price: null,\r    customPrice: 'Özel Fiyat',\r    period: '',\r    icon: <CrownOutlined />,\r    color: '#f093fb',\r    gradient: 'linear-gradient(135deg, #f093fb, #f5576c)',\r    popular: false,\r    savings: 'En kapsamlı paket',\r    features: {\r      included: [\r        { icon: <TeamOutlined />, text: 'Sınırsız Kullanıcı' },\r        { icon: <CloudOutlined />, text: 'Sınırsız Depolama' },\r        { icon: <DashboardOutlined />, text: 'Tüm Modüller + Özel Modüller' },\r        { icon: <ApiOutlined />, text: 'Gelişmiş API & Webhook' },\r        { icon: <FileProtectOutlined />, text: 'Özel Raporlar & BI Entegrasyonu' },\r        { icon: <CustomerServiceOutlined />, text: 'Özel Hesap Yöneticisi' },\r        { icon: <SafetyOutlined />, text: 'SLA Garantisi (%99.9 Uptime)' },\r        { icon: <SettingOutlined />, text: 'Sınırsız Entegrasyon' },\r        { icon: <CrownOutlined />, text: 'White Label Seçeneği' },\r        { icon: <CloudOutlined />, text: 'Özel Sunucu (On-Premise)' }\r      ],\r      notIncluded: []\r    }\r  }\r];\rconst comparisonData = [\r  {\r    category: 'Temel Özellikler',\r    icon: <DashboardOutlined />,\r    features: [\r      { \r        name: 'Kullanıcı Sayısı', \r        starter: '5', \r        professional: '25', \r        enterprise: 'Sınırsız',\r        highlight: true \r      },\r      { \r        name: 'Depolama Alanı', \r        starter: '10 GB', \r        professional: '100 GB', \r        enterprise: 'Sınırsız',\r        highlight: true \r      },\r      { \r        name: 'Aylık İşlem Sayısı', \r        starter: '1,000', \r        professional: '10,000', \r        enterprise: 'Sınırsız' \r      },\r      { \r        name: 'Veri Yedekleme', \r        starter: 'Günlük', \r        professional: 'Saatlik', \r        enterprise: 'Gerçek Zamanlı' \r      },\r      { \r        name: 'Kullanıcı Rolleri', \r        starter: '3 Rol', \r        professional: '10 Rol', \r        enterprise: 'Sınırsız' \r      }\r    ]\r  },\r  {\r    category: 'ERP Modülleri',\r    icon: <AppstoreOutlined />,\r    features: [\r      { name: 'CRM Modülü', starter: true, professional: true, enterprise: true },\r      { name: 'Stok Yönetimi', starter: true, professional: true, enterprise: true },\r      { name: 'Satış & Faturalama', starter: true, professional: true, enterprise: true },\r      { name: 'Finans & Muhasebe', starter: false, professional: true, enterprise: true, highlight: true },\r      { name: 'İnsan Kaynakları', starter: false, professional: true, enterprise: true },\r      { name: 'Üretim Planlama', starter: false, professional: false, enterprise: true, highlight: true },\r      { name: 'Proje Yönetimi', starter: false, professional: true, enterprise: true },\r      { name: 'Lojistik Yönetimi', starter: false, professional: false, enterprise: true }\r    ]\r  },\r  {\r    category: 'Entegrasyonlar',\r    icon: <ApiOutlined />,\r    features: [\r      { name: 'E-Fatura / E-Arşiv', starter: false, professional: true, enterprise: true, highlight: true },\r      { name: 'E-Ticaret Platformları', starter: false, professional: '3 Adet', enterprise: 'Sınırsız' },\r      { name: 'Banka Entegrasyonu', starter: false, professional: true, enterprise: true },\r      { name: 'Kargo Entegrasyonu', starter: false, professional: true, enterprise: true },\r      { name: 'Muhasebe Yazılımları', starter: false, professional: true, enterprise: true },\r      { name: 'API Erişimi', starter: false, professional: true, enterprise: true, highlight: true },\r      { name: 'Webhook Desteği', starter: false, professional: false, enterprise: true },\r      { name: 'Özel Entegrasyon', starter: false, professional: false, enterprise: true }\r    ]\r  },\r  {\r    category: 'Destek & Hizmetler',\r    icon: <CustomerServiceOutlined />,\r    features: [\r      { name: 'E-posta Desteği', starter: true, professional: true, enterprise: true },\r      { name: 'Telefon Desteği', starter: false, professional: true, enterprise: true },\r      { name: '7/24 Canlı Destek', starter: false, professional: true, enterprise: true, highlight: true },\r      { name: 'Uzaktan Bağlantı Destek', starter: false, professional: true, enterprise: true },\r      { name: 'Özel Hesap Yöneticisi', starter: false, professional: false, enterprise: true, highlight: true },\r      { name: 'Ücretsiz Eğitim', starter: 'Video', professional: 'Video + Webinar', enterprise: 'Yerinde Eğitim' },\r      { name: 'SLA Garantisi', starter: false, professional: false, enterprise: '%99.9' },\r      { name: 'Öncelikli Destek', starter: false, professional: false, enterprise: true }\r    ]\r  },\r  {\r    category: 'Gelişmiş Özellikler',\r    icon: <SettingOutlined />,\r    features: [\r      { name: 'Özel Raporlar', starter: false, professional: true, enterprise: true },\r      { name: 'BI Entegrasyonu', starter: false, professional: false, enterprise: true },\r      { name: 'Multi-Şirket Yönetimi', starter: false, professional: false, enterprise: true, highlight: true },\r      { name: 'White Label', starter: false, professional: false, enterprise: true, highlight: true },\r      { name: 'Özel Geliştirme', starter: false, professional: false, enterprise: true },\r      { name: 'Özel Sunucu (On-Premise)', starter: false, professional: false, enterprise: true },\r      { name: 'Veri İmport/Export API', starter: false, professional: true, enterprise: true },\r      { name: 'SSO (Single Sign-On)', starter: false, professional: false, enterprise: true }\r    ]\r  }\r];\rconst plans = [\r  {\r    key: 'starter',\r    name: 'Başlangıç',\r    price: 499,\r    icon: <RocketOutlined />,\r    color: '#667eea',\r    popular: false\r  },\r  {\r    key: 'professional',\r    name: 'Profesyonel',\r    price: 999,\r    icon: <ThunderboltOutlined />,\r    color: '#764ba2',\r    popular: true\r  },\r  {\r    key: 'enterprise',\r    name: 'Kurumsal',\r    price: 'Özel Fiyat',\r    icon: <CrownOutlined />,\r    color: '#f093fb',\r    popular: false\r  }\r];\rexport const ComparisonTable: React.FC = () => {\r  const [selectedTab, setSelectedTab] = useState<'overview' | 'detailed'>('overview');\r  const [expandedCategory, setExpandedCategory] = useState<string | null>('Temel Özellikler');\r  const renderFeatureValue = (value: boolean | string | number) => {\r    if (typeof value === 'boolean') {\r      return value ? (\r        <CheckCircleOutlined style={{ color: '#52c41a', fontSize: '20px' }} />\r      ) : (\r        <MinusOutlined style={{ color: '#cbd5e0', fontSize: '20px' }} />\r      );\r    }\r    return <Text strong style={{ color: '#2d3748', fontSize: '14px' }}>{value}</Text>;\r  };\r  return (\r    <section className=\"comparison-section\" id=\"comparison\" style={{ \r      padding: '100px 0', \r      background: 'linear-gradient(180deg, #ffffff 0%, #fafbfc 100%)' \r    }}>\r      <div className=\"container\" style={{ maxWidth: '1200px', margin: '0 auto', padding: '0 24px' }}>\r        {/* Header */}\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          whileInView={{ opacity: 1, y: 0 }}\r          viewport={{ once: true }}\r          className=\"section-header\"\r          style={{ textAlign: 'center', marginBottom: '60px' }}\r        >\r          <Tag color=\"purple\" style={{ marginBottom: 16, padding: '6px 16px', fontSize: '14px' }}>\r            <StarFilled /> Karşılaştırma\r          </Tag>\r          <Title level={2} style={{ fontSize: '42px', fontWeight: '700', marginBottom: '16px' }}>\r            Size En Uygun Planı Seçin\r          </Title>\r          <Paragraph style={{ fontSize: '18px', color: '#718096', maxWidth: '600px', margin: '0 auto' }}>\r            İhtiyacınıza göre esnek fiyatlandırma seçenekleri\r          </Paragraph>\r        </motion.div>\r        {/* Tab Switcher */}\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          whileInView={{ opacity: 1, y: 0 }}\r          viewport={{ once: true }}\r          transition={{ delay: 0.1 }}\r          style={{ textAlign: 'center', marginBottom: '48px' }}\r        >\r          <Space size=\"large\">\r            <Button\r              size=\"large\"\r              type={selectedTab === 'overview' ? 'primary' : 'default'}\r              onClick={() => setSelectedTab('overview')}\r              style={{\r                padding: '0 32px',\r                height: '48px',\r                fontSize: '16px',\r                borderRadius: '8px',\r                ...(selectedTab === 'overview' && {\r                  background: 'linear-gradient(135deg, #667eea, #764ba2)',\r                  border: 'none'\r                })\r              }}\r            >\r              Genel Bakış\r            </Button>\r            <Button\r              size=\"large\"\r              type={selectedTab === 'detailed' ? 'primary' : 'default'}\r              onClick={() => setSelectedTab('detailed')}\r              style={{\r                padding: '0 32px',\r                height: '48px',\r                fontSize: '16px',\r                borderRadius: '8px',\r                ...(selectedTab === 'detailed' && {\r                  background: 'linear-gradient(135deg, #667eea, #764ba2)',\r                  border: 'none'\r                })\r              }}\r            >\r              Detaylı Karşılaştırma\r            </Button>\r          </Space>\r        </motion.div>\r        {/* Overview Tab */}\r        <AnimatePresence mode=\"wait\">\r          {selectedTab === 'overview' && (\r            <motion.div\r              key=\"overview\"\r              initial={{ opacity: 0, x: -20 }}\r              animate={{ opacity: 1, x: 0 }}\r              exit={{ opacity: 0, x: 20 }}\r              transition={{ duration: 0.3 }}\r            >\r              <Row gutter={[32, 32]}>\r                {plansData.map((plan, index) => (\r                  <Col xs={24} md={8} key={plan.key}>\r                    <motion.div\r                      initial={{ opacity: 0, y: 20 }}\r                      animate={{ opacity: 1, y: 0 }}\r                      transition={{ delay: index * 0.1 }}\r                    >\r                      <Card\r                        hoverable\r                        style={{\r                          height: '100%',\r                          borderRadius: '20px',\r                          border: plan.popular ? `2px solid ${plan.color}` : '1px solid #e2e8f0',\r                          position: 'relative',\r                          overflow: 'visible',\r                          transform: plan.popular ? 'scale(1.05)' : 'scale(1)',\r                          boxShadow: plan.popular \r                            ? '0 20px 60px rgba(102, 126, 234, 0.2)'\r                            : '0 4px 20px rgba(0,0,0,0.08)',\r                          transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)'\r                        }}\r                        onMouseEnter={(e) => {\r                          if (!plan.popular) {\r                            e.currentTarget.style.transform = 'translateY(-8px)';\r                            e.currentTarget.style.boxShadow = '0 12px 40px rgba(102, 126, 234, 0.15)';\r                          }\r                        }}\r                        onMouseLeave={(e) => {\r                          if (!plan.popular) {\r                            e.currentTarget.style.transform = 'translateY(0)';\r                            e.currentTarget.style.boxShadow = '0 4px 20px rgba(0,0,0,0.08)';\r                          }\r                        }}\r                      >\r                        {plan.popular && (\r                          <div style={{\r                            position: 'absolute',\r                            top: '-12px',\r                            left: '50%',\r                            transform: 'translateX(-50%)',\r                            zIndex: 1\r                          }}>\r                            <Badge \r                              count=\"EN POPÜLER\" \r                              style={{ \r                                background: plan.gradient,\r                                fontSize: '12px',\r                                padding: '4px 16px',\r                                height: 'auto',\r                                borderRadius: '12px',\r                                fontWeight: '600'\r                              }} \r                            />\r                          </div>\r                        )}\r                        {/* Plan Header */}\r                        <div style={{\r                          background: plan.gradient,\r                          padding: '32px',\r                          borderRadius: '20px 20px 0 0',\r                          textAlign: 'center',\r                          color: 'white'\r                        }}>\r                          <div style={{ fontSize: '48px', marginBottom: '16px' }}>\r                            {plan.icon}\r                          </div>\r                          <Title level={3} style={{ color: 'white', margin: '0 0 8px 0' }}>\r                            {plan.name}\r                          </Title>\r                          <Paragraph style={{ color: 'rgba(255,255,255,0.9)', margin: 0 }}>\r                            {plan.description}\r                          </Paragraph>\r                        </div>\r                        {/* Price Section */}\r                        <div style={{ padding: '32px', textAlign: 'center', borderBottom: '1px solid #e2e8f0' }}>\r                          {plan.price ? (\r                            <div>\r                              <span style={{ fontSize: '24px', color: '#718096' }}>₺</span>\r                              <span style={{ fontSize: '48px', fontWeight: '700', color: '#2d3748' }}>\r                                {plan.price}\r                              </span>\r                              <span style={{ fontSize: '18px', color: '#718096' }}>/{plan.period}</span>\r                              {plan.savings && (\r                                <div style={{ marginTop: '8px' }}>\r                                  <Tag color={plan.popular ? 'green' : 'blue'}>{plan.savings}</Tag>\r                                </div>\r                              )}\r                            </div>\r                          ) : (\r                            <div>\r                              <span style={{ fontSize: '32px', fontWeight: '600', color: '#2d3748' }}>\r                                {plan.customPrice}\r                              </span>\r                              {plan.savings && (\r                                <div style={{ marginTop: '8px' }}>\r                                  <Tag color=\"purple\">{plan.savings}</Tag>\r                                </div>\r                              )}\r                            </div>\r                          )}\r                        </div>\r                        {/* Features List */}\r                        <div style={{ padding: '32px' }}>\r                          <div style={{ marginBottom: '24px' }}>\r                            <Text strong style={{ fontSize: '14px', color: '#718096', textTransform: 'uppercase' }}>\r                              Dahil Özellikler\r                            </Text>\r                          </div>\r                          <Space direction=\"vertical\" size=\"middle\" style={{ width: '100%' }}>\r                            {plan.features.included.slice(0, 6).map((feature, idx) => (\r                              <div key={idx} style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r                                <CheckCircleOutlined style={{ color: '#52c41a', fontSize: '18px', flexShrink: 0 }} />\r                                <Text style={{ fontSize: '14px', color: '#2d3748' }}>\r                                  {typeof feature === 'string' ? feature : feature.text}\r                                </Text>\r                              </div>\r                            ))}\r                          </Space>\r                          {plan.features.notIncluded.length > 0 && (\r                            <>\r                              <Divider />\r                              <Space direction=\"vertical\" size=\"small\" style={{ width: '100%', opacity: 0.5 }}>\r                                {plan.features.notIncluded.slice(0, 3).map((feature, idx) => (\r                                  <div key={idx} style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>\r                                    <CloseCircleOutlined style={{ color: '#cbd5e0', fontSize: '18px', flexShrink: 0 }} />\r                                    <Text style={{ fontSize: '14px', color: '#a0aec0', textDecoration: 'line-through' }}>\r                                      {feature}\r                                    </Text>\r                                  </div>\r                                ))}\r                              </Space>\r                            </>\r                          )}\r                        </div>\r                        {/* CTA Button */}\r                        <div style={{ padding: '0 32px 32px' }}>\r                          <Button\r                            type={plan.popular ? 'primary' : 'default'}\r                            size=\"large\"\r                            block\r                            style={{\r                              height: '56px',\r                              fontSize: '16px',\r                              fontWeight: '600',\r                              borderRadius: '12px',\r                              ...(plan.popular && {\r                                background: plan.gradient,\r                                border: 'none'\r                              })\r                            }}\r                            onClick={() => {\r                              if (plan.key === 'enterprise') {\r                                window.location.href = 'mailto:sales@stocker.app';\r                              } else {\r                                window.location.href = '/register';\r                              }\r                            }}\r                          >\r                            {plan.key === 'enterprise' ? 'Teklif Al' : 'Hemen Başla'}\r                          </Button>\r                        </div>\r                      </Card>\r                    </motion.div>\r                  </Col>\r                ))}\r              </Row>\r            </motion.div>\r          )}\r          {/* Detailed Comparison Tab */}\r          {selectedTab === 'detailed' && (\r            <motion.div\r              key=\"detailed\"\r              initial={{ opacity: 0, x: 20 }}\r              animate={{ opacity: 1, x: 0 }}\r              exit={{ opacity: 0, x: -20 }}\r              transition={{ duration: 0.3 }}\r            >\r              <Card\r                style={{\r                  borderRadius: '20px',\r                  overflow: 'hidden',\r                  boxShadow: '0 10px 40px rgba(0,0,0,0.08)'\r                }}\r              >\r                {/* Table Header */}\r                <div style={{\r                  display: 'grid',\r                  gridTemplateColumns: '2fr 1fr 1fr 1fr',\r                  background: 'linear-gradient(135deg, #667eea15, #764ba210)',\r                  borderBottom: '2px solid #e2e8f0'\r                }}>\r                  <div style={{ padding: '24px', borderRight: '1px solid #e2e8f0' }}>\r                    <Text strong style={{ fontSize: '16px', color: '#2d3748' }}>Özellikler</Text>\r                  </div>\r                  {plansData.map(plan => (\r                    <div key={plan.key} style={{ \r                      padding: '24px', \r                      textAlign: 'center',\r                      borderRight: '1px solid #e2e8f0',\r                      background: plan.popular ? `${plan.color}10` : 'transparent'\r                    }}>\r                      <div style={{ fontSize: '24px', color: plan.color, marginBottom: '8px' }}>\r                        {plan.icon}\r                      </div>\r                      <Text strong style={{ fontSize: '16px', color: '#2d3748' }}>{plan.name}</Text>\r                      {plan.popular && (\r                        <div style={{ marginTop: '4px' }}>\r                          <Tag color={plan.color} style={{ fontSize: '10px' }}>POPÜLER</Tag>\r                        </div>\r                      )}\r                    </div>\r                  ))}\r                </div>\r                {/* Table Body */}\r                <div>\r                  {comparisonData.map((category, catIndex) => (\r                    <div key={catIndex}>\r                      <div\r                        onClick={() => setExpandedCategory(\r                          expandedCategory === category.category ? null : category.category\r                        )}\r                        style={{\r                          display: 'grid',\r                          gridTemplateColumns: '2fr 1fr 1fr 1fr',\r                          background: '#f7fafc',\r                          borderBottom: '1px solid #e2e8f0',\r                          cursor: 'pointer',\r                          transition: 'background 0.2s'\r                        }}\r                        onMouseEnter={(e) = role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => setExpandedCategory(\r                          expandedCategory === category.category ? null : category.category\r                        )(e)}> {\r                          e.currentTarget.style.background = '#edf2f7';\r                        }}\r                        onMouseLeave={(e) => {\r                          e.currentTarget.style.background = '#f7fafc';\r                        }}\r                      >\r                        <div style={{ padding: '16px 24px', display: 'flex', alignItems: 'center', gap: '12px' }}>\r                          <span style={{ fontSize: '20px', color: '#667eea' }}>{category.icon}</span>\r                          <Text strong style={{ fontSize: '14px', color: '#4a5568' }}>\r                            {category.category}\r                          </Text>\r                          <Tag style={{ marginLeft: 'auto' }}>{category.features.length} özellik</Tag>\r                        </div>\r                        <div style={{ gridColumn: 'span 3', padding: '16px' }} />\r                      </div>\r                      <AnimatePresence>\r                        {expandedCategory === category.category && (\r                          <motion.div\r                            initial={{ height: 0, opacity: 0 }}\r                            animate={{ height: 'auto', opacity: 1 }}\r                            exit={{ height: 0, opacity: 0 }}\r                            transition={{ duration: 0.3 }}\r                          >\r                            {category.features.map((feature, featIndex) => (\r                              <div\r                                key={featIndex}\r                                style={{\r                                  display: 'grid',\r                                  gridTemplateColumns: '2fr 1fr 1fr 1fr',\r                                  borderBottom: '1px solid #e2e8f0',\r                                  background: feature.highlight ? '#fffbf0' : 'white'\r                                }}\r                              >\r                                <div style={{ \r                                  padding: '16px 24px', \r                                  paddingLeft: '60px',\r                                  display: 'flex',\r                                  alignItems: 'center',\r                                  gap: '8px'\r                                }}>\r                                  <Text style={{ fontSize: '14px', color: '#4a5568' }}>\r                                    {feature.name}\r                                  </Text>\r                                  {feature.highlight && (\r                                    <Tag color=\"orange\" style={{ fontSize: '10px' }}>YENİ</Tag>\r                                  )}\r                                </div>\r                                <div style={{ padding: '16px', textAlign: 'center', borderLeft: '1px solid #e2e8f0' }}>\r                                  {renderFeatureValue(feature.starter)}\r                                </div>\r                                <div style={{ \r                                  padding: '16px', \r                                  textAlign: 'center', \r                                  borderLeft: '1px solid #e2e8f0',\r                                  background: plansData[1].popular ? '#667eea05' : 'transparent'\r                                }}>\r                                  {renderFeatureValue(feature.professional)}\r                                </div>\r                                <div style={{ padding: '16px', textAlign: 'center', borderLeft: '1px solid #e2e8f0' }}>\r                                  {renderFeatureValue(feature.enterprise)}\r                                </div>\r                              </div>\r                            ))}\r                          </motion.div>\r                        )}\r                      </AnimatePresence>\r                    </div>\r                  ))}\r                </div>\r              </Card>\r            </motion.div>\r          )}\r        </AnimatePresence>\r        {/* Bottom CTA */}\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          whileInView={{ opacity: 1, y: 0 }}\r          viewport={{ once: true }}\r          style={{ marginTop: '80px', textAlign: 'center' }}\r        >\r          <Card\r            style={{\r              background: 'linear-gradient(135deg, #667eea15, #764ba210)',\r              border: 'none',\r              borderRadius: '20px',\r              padding: '48px'\r            }}\r          >\r            <Title level={3} style={{ marginBottom: '16px' }}>\r              Hangi plan size uygun?\r            </Title>\r            <Paragraph style={{ fontSize: '16px', color: '#718096', maxWidth: '600px', margin: '0 auto 32px' }}>\r              İhtiyacınızı tam olarak belirleyemiyorsanız, uzman ekibimiz size en uygun çözümü önermekten mutluluk duyar.\r            </Paragraph>\r            <Space size=\"large\">\r              <Button\r                type=\"primary\"\r                size=\"large\"\r                icon={<CustomerServiceOutlined />}\r                style={{\r                  background: 'linear-gradient(135deg, #667eea, #764ba2)',\r                  border: 'none',\r                  height: '56px',\r                  padding: '0 40px',\r                  fontSize: '16px',\r                  borderRadius: '12px'\r                }}\r                onClick={() = aria-label=\"customer service outlined\"> window.location.href = '/demo'}\r              >\r                Ücretsiz Demo Talebi\r              </Button>\r              <Button\r                size=\"large\"\r                style={{\r                  height: '56px',\r                  padding: '0 40px',\r                  fontSize: '16px',\r                  borderRadius: '12px'\r                }}\r                onClick={() => window.location.href = '/pricing'}\r              >\r                Fiyat Hesaplayıcı\r              </Button>\r            </Space>\r          </Card>\r        </motion.div>\r      </div>\r    </section>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/ComparisonTable/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { \r  Calendar, \r  Typography, \r  Form, \r  Input, \r  Select, \r  Button, \r  Row, \r  Col, \r  Card,\r  Tag,\r  TimePicker,\r  message,\r  Space\r} from 'antd';\rimport {\r  CalendarOutlined,\r  ClockCircleOutlined,\r  UserOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  VideoCameraOutlined,\r  CheckCircleOutlined,\r  TeamOutlined\r} from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport dayjs from 'dayjs';\rimport './style.css';\rconst { Title, Paragraph, Text } = Typography;\rconst { Option } = Select;\rexport const DemoBooking: React.FC = () => {\r  const [form] = Form.useForm();\r  const [selectedDate, setSelectedDate] = useState<dayjs.Dayjs | null>(null);\r  const [selectedTime, setSelectedTime] = useState<string>('');\r  const [loading, setLoading] = useState(false);\r  const availableTimes = [\r    '09:00', '09:30', '10:00', '10:30', '11:00', '11:30',\r    '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00'\r  ];\r  const demoTopics = [\r    'CRM Modülü',\r    'Stok Yönetimi',\r    'Finans & Muhasebe',\r    'İnsan Kaynakları',\r    'Üretim Planlama',\r    'E-Ticaret Entegrasyonu',\r    'Genel Tanıtım'\r  ];\r  const handleSubmit = async (values: any) => {\r    if (!selectedDate || !selectedTime) {\r      message.error('Lütfen tarih ve saat seçin');\r      return;\r    }\r    setLoading(true);\r    // Simulate API call\r    setTimeout(() => {\r      message.success('Demo rezervasyonunuz başarıyla oluşturuldu! E-posta adresinize detaylar gönderildi.');\r      form.resetFields();\r      setSelectedDate(null);\r      setSelectedTime('');\r      setLoading(false);\r    }, 2000);\r  };\r  const disabledDate = (current: dayjs.Dayjs) => {\r    // Disable weekends and past dates\r    return current && (\r      current < dayjs().startOf('day') ||\r      current.day() === 0 ||\r      current.day() === 6\r    );\r  };\r  return (\r    <section className=\"demo-booking-section\" id=\"demo-booking\">\r      <div className=\"section-container\">\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          whileInView={{ opacity: 1, y: 0 }}\r          transition={{ duration: 0.6 }}\r          className=\"section-header\"\r        >\r          <Tag color=\"purple\" className=\"section-tag\">\r            <VideoCameraOutlined /> Canlı Demo\r          </Tag>\r          <Title level={2}>Ücretsiz Demo Rezervasyonu</Title>\r          <Paragraph>\r            Uzman ekibimizle 30 dakikalık özel demo seansı ayırtın\r          </Paragraph>\r        </motion.div>\r        <Row gutter={[48, 48]}>\r          <Col xs={24} lg={12}>\r            <motion.div\r              initial={{ opacity: 0, x: -30 }}\r              whileInView={{ opacity: 1, x: 0 }}\r              transition={{ duration: 0.6 }}\r            >\r              <Card className=\"booking-benefits-card\">\r                <Title level={3}>\r                  <TeamOutlined /> Neden Canlı Demo?\r                </Title>\r                <div className=\"benefits-list\">\r                  <div className=\"benefit-item\">\r                    <CheckCircleOutlined />\r                    <div>\r                      <Text strong>Kişiselleştirilmiş Sunum</Text>\r                      <br />\r                      <Text type=\"secondary\">İşletmenize özel senaryolarla tanıtım</Text>\r                    </div>\r                  </div>\r                  <div className=\"benefit-item\">\r                    <CheckCircleOutlined />\r                    <div>\r                      <Text strong>Anlık Soru-Cevap</Text>\r                      <br />\r                      <Text type=\"secondary\">Tüm sorularınıza anında yanıt</Text>\r                    </div>\r                  </div>\r                  <div className=\"benefit-item\">\r                    <CheckCircleOutlined />\r                    <div>\r                      <Text strong>ROI Hesaplaması</Text>\r                      <br />\r                      <Text type=\"secondary\">Yatırım getirinizi birlikte hesaplayalım</Text>\r                    </div>\r                  </div>\r                  <div className=\"benefit-item\">\r                    <CheckCircleOutlined />\r                    <div>\r                      <Text strong>Özel İndirimler</Text>\r                      <br />\r                      <Text type=\"secondary\">Demo sonrası özel fiyat avantajları</Text>\r                    </div>\r                  </div>\r                </div>\r                <div className=\"demo-stats\">\r                  <div className=\"stat\">\r                    <div className=\"stat-value\">500+</div>\r                    <div className=\"stat-label\">Başarılı Demo</div>\r                  </div>\r                  <div className=\"stat\">\r                    <div className=\"stat-value\">%95</div>\r                    <div className=\"stat-label\">Memnuniyet</div>\r                  </div>\r                  <div className=\"stat\">\r                    <div className=\"stat-value\">30 dk</div>\r                    <div className=\"stat-label\">Ortalama Süre</div>\r                  </div>\r                </div>\r              </Card>\r            </motion.div>\r          </Col>\r          <Col xs={24} lg={12}>\r            <motion.div\r              initial={{ opacity: 0, x: 30 }}\r              whileInView={{ opacity: 1, x: 0 }}\r              transition={{ duration: 0.6 }}\r            >\r              <Card className=\"booking-form-card\">\r                <Title level={3}>\r                  <CalendarOutlined /> Demo Rezervasyon Formu\r                </Title>\r                <Form\r                  form={form}\r                  layout=\"vertical\"\r                  onFinish={handleSubmit}\r                >\r                  <Row gutter={16}>\r                    <Col xs={24} sm={12}>\r                      <Form.Item\r                        name=\"name\"\r                        label=\"Ad Soyad\"\r                        rules={[{ required: true, message: 'Lütfen adınızı girin' }]}\r                      >\r                        <Input \r                          prefix={<UserOutlined / aria-label=\"input field\">} \r                          placeholder=\"Adınız Soyadınız\"\r                          size=\"large\"\r                        />\r                      </Form.Item>\r                    </Col>\r                    <Col xs={24} sm={12}>\r                      <Form.Item\r                        name=\"company\"\r                        label=\"Şirket\"\r                        rules={[{ required: true, message: 'Lütfen şirket adını girin' }]}\r                      >\r                        <Input \r                          placeholder=\"Şirket Adı\"\r                          size=\"large\"\r                        / aria-label=\"input field\">\r                      </Form.Item>\r                    </Col>\r                  </Row>\r                  <Row gutter={16}>\r                    <Col xs={24} sm={12}>\r                      <Form.Item\r                        name=\"email\"\r                        label=\"E-posta\"\r                        rules={[\r                          { required: true, message: 'Lütfen e-posta adresinizi girin' },\r                          { type: 'email', message: 'Geçerli bir e-posta adresi girin' }\r                        ]}\r                      >\r                        <Input \r                          prefix={<MailOutlined / aria-label=\"input field\">} \r                          placeholder=\"ornek@sirket.com\"\r                          size=\"large\"\r                        />\r                      </Form.Item>\r                    </Col>\r                    <Col xs={24} sm={12}>\r                      <Form.Item\r                        name=\"phone\"\r                        label=\"Telefon\"\r                        rules={[{ required: true, message: 'Lütfen telefon numaranızı girin' }]}\r                      >\r                        <Input \r                          prefix={<PhoneOutlined / aria-label=\"input field\">} \r                          placeholder=\"0555 555 55 55\"\r                          size=\"large\"\r                        />\r                      </Form.Item>\r                    </Col>\r                  </Row>\r                  <Form.Item\r                    name=\"topic\"\r                    label=\"Demo Konusu\"\r                    rules={[{ required: true, message: 'Lütfen demo konusunu seçin' }]}\r                  >\r                    <Select \r                      placeholder=\"İlgilendiğiniz modülü seçin\"\r                      size=\"large\"\r                     aria-label=\"select field\">\r                      {demoTopics.map(topic => (\r                        <Option key={topic} value={topic}>{topic}</Option>\r                      ))}\r                    </Select>\r                  </Form.Item>\r                  <div className=\"date-time-selector\">\r                    <Title level={5}>Tarih ve Saat Seçimi</Title>\r                    <div className=\"calendar-wrapper\">\r                      <Calendar\r                        fullscreen={false}\r                        disabledDate={disabledDate}\r                        onSelect={(date) => {\r                          setSelectedDate(date);\r                          setSelectedTime('');\r                        }}\r                      />\r                    </div>\r                    {selectedDate && (\r                      <div className=\"time-slots\">\r                        <Text strong>\r                          {selectedDate.format('DD MMMM YYYY')} için uygun saatler:\r                        </Text>\r                        <div className=\"time-grid\">\r                          {availableTimes.map(time => (\r                            <Button\r                              key={time}\r                              type={selectedTime === time ? 'primary' : 'default'}\r                              onClick={() => setSelectedTime(time)}\r                              className=\"time-slot\"\r                            >\r                              <ClockCircleOutlined /> {time}\r                            </Button>\r                          ))}\r                        </div>\r                      </div>\r                    )}\r                  </div>\r                  <Form.Item\r                    name=\"message\"\r                    label=\"Notlarınız (Opsiyonel)\"\r                  >\r                    <Input.TextArea \r                      rows={3}\r                      placeholder=\"Özel talepleriniz veya sorularınız varsa belirtebilirsiniz\"\r                    / aria-label=\"input field\">\r                  </Form.Item>\r                  <Button\r                    type=\"primary\"\r                    htmlType=\"submit\"\r                    size=\"large\"\r                    block\r                    loading={loading}\r                    disabled={!selectedDate || !selectedTime}\r                    className=\"submit-button\"\r                  >\r                    Demo Rezervasyonu Yap\r                  </Button>\r                  {selectedDate && selectedTime && (\r                    <div className=\"selection-summary\">\r                      <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 8 }} />\r                      <Text>\r                        Seçilen tarih ve saat: \r                        <strong> {selectedDate.format('DD MMMM YYYY')} - {selectedTime}</strong>\r                      </Text>\r                    </div>\r                  )}\r                </Form>\r              </Card>\r            </motion.div>\r          </Col>\r        </Row>\r      </div>\r    </section>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/DemoBooking/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React from 'react';\rimport { Button, Space, Typography, Badge } from 'antd';\rimport { \r  RocketOutlined, \r  UserOutlined, \r  DashboardOutlined, \r  PlayCircleOutlined,\r  ArrowRightOutlined,\r  StarOutlined \r} from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport { useVisitorTracking } from '@/shared/hooks/useVisitorTracking';\rimport { useAuthStore } from '@/app/store/auth.store';\rimport './style.css';\rinterface DynamicCTAProps {\r  size?: 'small' | 'large';\r  variant?: 'header' | 'hero' | 'footer';\r}\rexport const DynamicCTA: React.FC<DynamicCTAProps> = ({ \r  size = 'large', \r  variant = 'hero' \r}) => {\r  const navigate = useNavigate();\r  const { currentVisitType, trackInterest } = useVisitorTracking();\r  const { isAuthenticated, user } = useAuthStore();\r  const handleCTAClick = (action: string, route: string) => {\r    trackInterest(action);\r    navigate(route);\r  };\r  // For authenticated users\r  if (isAuthenticated && user) {\r    const userRole = user.roles?.[0];\r    let dashboardRoute = '/app/default';\r    if (userRole === 'SystemAdmin') dashboardRoute = '/master';\r    else if (userRole === 'TenantAdmin' || userRole === 'Admin') dashboardRoute = '/admin';\r    return (\r      <div className={`dynamic-cta dynamic-cta--${variant} dynamic-cta--${size}`}>\r        <Space size=\"large\" wrap className=\"cta-buttons\">\r          <Button \r            type=\"primary\" \r            size={size}\r            icon={<DashboardOutlined />}\r            onClick={() = aria-label=\"dashboard outlined\"> handleCTAClick('dashboard-access', dashboardRoute)}\r            className=\"cta-primary dashboard-cta\"\r          >\r            Panele Dön\r          </Button>\r          <Button \r            size={size}\r            ghost={variant === 'hero'}\r            icon={<StarOutlined />}\r            onClick={() = aria-label=\"star outlined\"> handleCTAClick('explore-features', '/#features')}\r            className=\"cta-secondary\"\r          >\r            Yeni Özellikleri Keşfet\r          </Button>\r        </Space>\r        {variant === 'hero' && (\r          <div className=\"welcome-back-message\">\r            <Typography.Text style={{ color: 'rgba(255,255,255,0.9)' }}>\r              Tekrar hoş geldin, {user.firstName || 'Kullanıcı'}! 👋\r            </Typography.Text>\r          </div>\r        )}\r      </div>\r    );\r  }\r  // For different visitor types\r  switch (currentVisitType) {\r    case 'first-time':\r      return (\r        <div className={`dynamic-cta dynamic-cta--${variant} dynamic-cta--${size}`}>\r          <Space size=\"large\" wrap className=\"cta-buttons\">\r            <Badge.Ribbon text=\"14 Gün Ücretsiz\" color=\"gold\">\r              <Button \r                type=\"primary\" \r                size={size}\r                icon={<RocketOutlined />}\r                onClick={() = aria-label=\"rocket outlined\"> handleCTAClick('free-trial', '/register')}\r                className=\"cta-primary free-trial-cta\"\r              >\r                Ücretsiz Deneyin\r              </Button>\r            </Badge.Ribbon>\r            <Button \r              size={size}\r              ghost={variant === 'hero'}\r              icon={<PlayCircleOutlined />}\r              onClick={() = aria-label=\"play circle outlined\"> handleCTAClick('watch-demo', '/#demo')}\r              className=\"cta-secondary demo-cta\"\r            >\r              Önce İzle\r            </Button>\r          </Space>\r          {variant === 'hero' && (\r            <div className=\"first-time-benefits\">\r              <Typography.Text style={{ color: 'rgba(255,255,255,0.9)' }}>\r                ✨ Kurulum ücreti yok • ⚡ Anında başlayın • 🔒 Güvenli\r              </Typography.Text>\r            </div>\r          )}\r        </div>\r      );\r    case 'returning':\r      return (\r        <div className={`dynamic-cta dynamic-cta--${variant} dynamic-cta--${size}`}>\r          <Space size=\"large\" wrap className=\"cta-buttons\">\r            <Button \r              type=\"primary\" \r              size={size}\r              icon={<UserOutlined />}\r              onClick={() = aria-label=\"user outlined\"> handleCTAClick('login-returning', '/login')}\r              className=\"cta-primary login-cta\"\r            >\r              Giriş Yap\r            </Button>\r            <Button \r              size={size}\r              ghost={variant === 'hero'}\r              icon={<ArrowRightOutlined />}\r              onClick={() = aria-label=\"arrow right outlined\"> handleCTAClick('continue-trial', '/register')}\r              className=\"cta-secondary trial-cta\"\r            >\r              Deneme Sürümü Başlat\r            </Button>\r          </Space>\r          {variant === 'hero' && (\r            <div className=\"returning-message\">\r              <Typography.Text style={{ color: 'rgba(255,255,255,0.9)' }}>\r                Tekrar hoş geldiniz! Kaldığınız yerden devam edin 🚀\r              </Typography.Text>\r            </div>\r          )}\r        </div>\r      );\r    case 'active-user':\r      return (\r        <div className={`dynamic-cta dynamic-cta--${variant} dynamic-cta--${size}`}>\r          <Space size=\"large\" wrap className=\"cta-buttons\">\r            <Button \r              type=\"primary\" \r              size={size}\r              icon={<DashboardOutlined />}\r              onClick={() = aria-label=\"dashboard outlined\"> handleCTAClick('access-dashboard', '/login')}\r              className=\"cta-primary dashboard-cta\"\r            >\r              Panelime Giriş\r            </Button>\r            <Button \r              size={size}\r              ghost={variant === 'hero'}\r              icon={<StarOutlined />}\r              onClick={() = aria-label=\"star outlined\"> handleCTAClick('whats-new', '/#features')}\r              className=\"cta-secondary\"\r            >\r              Yenilikler\r            </Button>\r          </Space>\r          {variant === 'hero' && (\r            <div className=\"active-user-message\">\r              <Typography.Text style={{ color: 'rgba(255,255,255,0.9)' }}>\r                Hoş geldin! Son güncellemelerimizi keşfet ⭐\r              </Typography.Text>\r            </div>\r          )}\r        </div>\r      );\r    default:\r      return (\r        <div className={`dynamic-cta dynamic-cta--${variant} dynamic-cta--${size}`}>\r          <Space size=\"large\" wrap className=\"cta-buttons\">\r            <Button \r              type=\"primary\" \r              size={size}\r              icon={<RocketOutlined />}\r              onClick={() = aria-label=\"rocket outlined\"> handleCTAClick('get-started', '/register')}\r              className=\"cta-primary\"\r            >\r              Başlayın\r            </Button>\r            <Button \r              size={size}\r              ghost={variant === 'hero'}\r              icon={<UserOutlined />}\r              onClick={() = aria-label=\"user outlined\"> handleCTAClick('login', '/login')}\r              className=\"cta-secondary\"\r            >\r              Giriş Yap\r            </Button>\r          </Space>\r        </div>\r      );\r  }\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/DynamicCTA/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { Typography, Tag, Card, Row, Col, Button, Space } from 'antd';\rimport { \r  QuestionCircleOutlined,\r  PlusOutlined,\r  MinusOutlined,\r  RocketOutlined,\r  SafetyOutlined,\r  DollarOutlined,\r  MobileOutlined,\r  CustomerServiceOutlined,\r  CloudOutlined\r} from '@ant-design/icons';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport './style.css';\rconst { Title, Paragraph, Text } = Typography;\rconst faqCategories = [\r  {\r    key: 'general',\r    title: 'Genel Bilgiler',\r    icon: <RocketOutlined />,\r    color: '#667eea',\r    questions: [\r      {\r        id: '1',\r        question: 'Stocker ERP nedir ve kimler için uygundur?',\r        answer: 'Stocker, küçük ve orta ölçekli işletmeler için tasarlanmış bulut tabanlı, modüler bir ERP çözümüdür. CRM, Stok, Satış, Finans, İK ve Üretim modülleriyle işletmenizin tüm süreçlerini tek platformda yönetebilirsiniz. Perakende, üretim, hizmet ve dağıtım sektörlerindeki 10-500 çalışanlı işletmeler için idealdir.',\r        highlights: ['6 Ana Modül', 'Bulut Tabanlı', 'Sektörel Çözümler', 'Ölçeklenebilir']\r      },\r      {\r        id: '2',\r        question: 'Diğer ERP sistemlerinden farkı nedir?',\r        answer: 'Stocker, kullanıcı dostu arayüzü, hızlı kurulumu ve uygun fiyatlandırmasıyla öne çıkar. Karmaşık ERP sistemlerinin aksine, 5 dakikada kurulum yapabilir ve aynı gün kullanmaya başlayabilirsiniz. Türkiye\\'ye özel e-fatura, e-arşiv entegrasyonları ve yerel destek hizmetimiz bulunur.',\r        highlights: ['Kolay Kullanım', 'Hızlı Kurulum', 'Yerel Destek', 'Uygun Fiyat']\r      },\r      {\r        id: '3',\r        question: 'Hangi sektörler için özel çözümler sunuyorsunuz?',\r        answer: 'Perakende, E-ticaret, Üretim, Dağıtım, Toptan Satış, Hizmet ve Restoran sektörleri için özelleştirilmiş çözümlerimiz mevcuttur. Her sektörün kendine özgü iş süreçlerine uygun hazır şablonlar, raporlar ve otomasyonlar sunuyoruz.',\r        highlights: ['7+ Sektör', 'Hazır Şablonlar', 'Sektörel Raporlar', 'Özel İş Akışları']\r      }\r    ]\r  },\r  {\r    key: 'pricing',\r    title: 'Fiyatlandırma & Deneme',\r    icon: <DollarOutlined />,\r    color: '#f093fb',\r    questions: [\r      {\r        id: '4',\r        question: '14 günlük ücretsiz deneme nasıl çalışır?',\r        answer: 'Kayıt olduktan sonra tüm özelliklere 14 gün boyunca ücretsiz erişim sağlarsınız. Kredi kartı bilgisi istenmez, otomatik ödeme alınmaz. Deneme süresince tüm modülleri test edebilir, veri girişi yapabilir ve destek alabilirsiniz. Süre sonunda dilediğiniz paketi seçerek devam edebilirsiniz.',\r        highlights: ['Kredi Kartı Gerekmez', 'Tüm Özellikler Açık', 'Otomatik Ödeme Yok', 'Veri Kaybı Yok']\r      },\r      {\r        id: '5',\r        question: 'Fiyatlandırma modeli nasıl işliyor?',\r        answer: 'Kullanıcı sayısı ve seçtiğiniz modüllere göre esnek fiyatlandırma sunuyoruz. Başlangıç paketimiz 5 kullanıcı ve 3 modül ile aylık 499 TL\\'den başlar. İhtiyacınıza göre modül ve kullanıcı ekleyebilirsiniz. Yıllık ödemede %20, 2 yıllık ödemede %30 indirim uygulanır.',\r        highlights: ['Modüler Fiyatlama', 'Aylık/Yıllık Ödeme', '%30\\'a Varan İndirim', 'Şeffaf Fiyatlar']\r      },\r      {\r        id: '6',\r        question: 'Gizli ücretler var mı?',\r        answer: 'Hayır, fiyatlarımız tamamen şeffaftır. Kurulum ücreti, güncelleme ücreti veya gizli ücret yoktur. Sadece seçtiğiniz paket ücretini ödersiniz. Ek kullanıcı, modül veya depolama alanı ihtiyacınız olursa, bunların fiyatları web sitemizde açıkça belirtilmiştir.',\r        highlights: ['Kurulum Ücreti Yok', 'Güncelleme Ücretsiz', 'Şeffaf Fiyatlama', 'Sürpriz Yok']\r      }\r    ]\r  },\r  {\r    key: 'security',\r    title: 'Güvenlik & Veri',\r    icon: <SafetyOutlined />,\r    color: '#764ba2',\r    questions: [\r      {\r        id: '7',\r        question: 'Verilerim güvende mi?',\r        answer: 'Evet, verileriniz en yüksek güvenlik standartlarıyla korunur. 256-bit SSL şifreleme, ISO 27001 sertifikası, KVKK uyumluluğu ve günlük otomatik yedekleme ile verilerinizin güvenliğini garanti altına alırız. Verileriniz Türkiye\\'deki Tier 3 veri merkezlerinde saklanır.',\r        highlights: ['SSL Şifreleme', 'ISO 27001', 'KVKK Uyumlu', 'Günlük Yedekleme']\r      },\r      {\r        id: '8',\r        question: 'Veri kaybı durumunda ne olur?',\r        answer: 'Verileriniz günlük olarak otomatik yedeklenir ve 30 gün geriye dönük yedekler saklanır. Herhangi bir veri kaybı durumunda, son yedekten geri yükleme yapılır. Ayrıca, kritik verilerinizi istediğiniz zaman Excel/PDF olarak dışa aktarabilirsiniz.',\r        highlights: ['Günlük Yedekleme', '30 Gün Saklama', 'Anında Geri Yükleme', 'Veri Dışa Aktarım']\r      },\r      {\r        id: '9',\r        question: 'Verilerimi nasıl dışa aktarabilirim?',\r        answer: 'Tüm verilerinizi Excel, CSV veya PDF formatında dışa aktarabilirsiniz. API erişimi ile verilerinizi programatik olarak çekebilirsiniz. Aboneliğinizi iptal ederseniz, 90 gün içinde tüm verilerinizi indirebilirsiniz.',\r        highlights: ['Excel/CSV/PDF', 'API Erişimi', '90 Gün Saklama', 'Toplu İndirme']\r      }\r    ]\r  },\r  {\r    key: 'technical',\r    title: 'Teknik & Kurulum',\r    icon: <CloudOutlined />,\r    color: '#43e97b',\r    questions: [\r      {\r        id: '10',\r        question: 'Kurulum için teknik bilgi gerekli mi?',\r        answer: 'Hayır, hiçbir teknik bilgi gerekmez. Stocker bulut tabanlı SaaS bir çözümdür. Web tarayıcınızdan giriş yaparak hemen kullanmaya başlayabilirsiniz. Sunucu kurulumu, veritabanı yapılandırması gibi teknik işlemlerle uğraşmanıza gerek yoktur.',\r        highlights: ['Kurulum Gerektirmez', 'Tarayıcı Tabanlı', 'Otomatik Güncellemeler', 'IT Desteği Gerekmez']\r      },\r      {\r        id: '11',\r        question: 'Mevcut sistemimden veri aktarımı yapabilir miyim?',\r        answer: 'Evet, Excel, CSV formatındaki verilerinizi kolayca aktarabilirsiniz. Logo, Mikro, SAP, Netsis gibi popüler sistemlerden veri aktarımı için hazır şablonlarımız var. Destek ekibimiz veri aktarım sürecinde ücretsiz yardım sağlar.',\r        highlights: ['Excel/CSV Desteği', 'Hazır Şablonlar', 'Ücretsiz Destek', 'Popüler Sistemlerle Uyumlu']\r      },\r      {\r        id: '12',\r        question: 'Hangi cihazlardan erişebilirim?',\r        answer: 'Web tarayıcısı olan her cihazdan (PC, Mac, tablet) erişebilirsiniz. iOS ve Android için özel mobil uygulamalarımız mevcuttur. Responsive tasarım sayesinde tüm ekran boyutlarında sorunsuz çalışır. İnternet bağlantınız olduğu her yerden güvenli erişim sağlayabilirsiniz.',\r        highlights: ['Web + Mobil', 'iOS & Android', 'Responsive Tasarım', 'Her Yerden Erişim']\r      }\r    ]\r  },\r  {\r    key: 'support',\r    title: 'Destek & Eğitim',\r    icon: <CustomerServiceOutlined />,\r    color: '#4facfe',\r    questions: [\r      {\r        id: '13',\r        question: 'Ne tür destek hizmetleri sunuyorsunuz?',\r        answer: '7/24 canlı destek, telefon desteği, e-posta desteği ve uzaktan bağlantı desteği sunuyoruz. Ayrıca kapsamlı dokümantasyon, video eğitimler ve canlı webinarlarımız mevcuttur. Premium paketlerde özel hesap yöneticisi atanır.',\r        highlights: ['7/24 Canlı Destek', 'Telefon & E-posta', 'Uzaktan Bağlantı', 'Özel Hesap Yöneticisi']\r      },\r      {\r        id: '14',\r        question: 'Eğitim ve adaptasyon süreci nasıl işliyor?',\r        answer: 'İlk kayıt sonrası ücretsiz tanışma görüşmesi yapılır. Temel eğitim videoları ve canlı webinarlarla hızlı başlangıç sağlanır. İlk 30 gün boyunca yoğunlaştırılmış destek verilir. Kurumsal paketlerde yerinde eğitim seçeneği sunulur.',\r        highlights: ['Ücretsiz Eğitim', 'Canlı Webinarlar', '30 Gün Özel Destek', 'Yerinde Eğitim']\r      },\r      {\r        id: '15',\r        question: 'Özelleştirme ve entegrasyon desteği var mı?',\r        answer: 'Evet, işletmenize özel rapor, form ve iş akışları oluşturabilirsiniz. E-ticaret, muhasebe, kargo ve ödeme sistemleriyle hazır entegrasyonlarımız var. API ile özel entegrasyonlar yapabilir veya profesyonel hizmet alabilirsiniz.',\r        highlights: ['Özel Raporlar', 'Hazır Entegrasyonlar', 'API Desteği', 'Profesyonel Hizmet']\r      }\r    ]\r  }\r];\rexport const FAQSection: React.FC = () => {\r  const [selectedCategory, setSelectedCategory] = useState('general');\r  const [expandedItems, setExpandedItems] = useState<string[]>(['1']);\r  const toggleExpand = (id: string) => {\r    setExpandedItems(prev => \r      prev.includes(id) \r        ? prev.filter(item => item !== id)\r        : [...prev, id]\r    );\r  };\r  const currentCategory = faqCategories.find(cat => cat.key === selectedCategory);\r  return (\r    <section className=\"faq-section\" id=\"faq\" style={{ padding: '100px 0', background: 'linear-gradient(180deg, #fafbfc 0%, #ffffff 100%)' }}>\r      <div className=\"container\" style={{ maxWidth: '1200px', margin: '0 auto', padding: '0 24px' }}>\r        {/* Header */}\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          whileInView={{ opacity: 1, y: 0 }}\r          viewport={{ once: true }}\r          className=\"section-header\"\r          style={{ textAlign: 'center', marginBottom: '60px' }}\r        >\r          <Tag color=\"purple\" style={{ marginBottom: 16, padding: '6px 16px', fontSize: '14px' }}>\r            <QuestionCircleOutlined /> SSS\r          </Tag>\r          <Title level={2} style={{ fontSize: '42px', fontWeight: '700', marginBottom: '16px' }}>\r            Sıkça Sorulan Sorular\r          </Title>\r          <Paragraph style={{ fontSize: '18px', color: '#718096', maxWidth: '600px', margin: '0 auto' }}>\r            Stocker ERP hakkında merak ettiğiniz her şey\r          </Paragraph>\r        </motion.div>\r        {/* Category Tabs */}\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          whileInView={{ opacity: 1, y: 0 }}\r          viewport={{ once: true }}\r          transition={{ delay: 0.1 }}\r          style={{ marginBottom: '48px' }}\r        >\r          <Row gutter={[16, 16]} justify=\"center\">\r            {faqCategories.map((category) => (\r              <Col key={category.key}>\r                <motion.div\r                  whileHover={{ scale: 1.05 }}\r                  whileTap={{ scale: 0.95 }}\r                >\r                  <Card\r                    hoverable\r                    onClick={() => setSelectedCategory(category.key)}\r                    style={{\r                      cursor: 'pointer',\r                      borderRadius: '12px',\r                      border: selectedCategory === category.key \r                        ? `2px solid ${category.color}`\r                        : '2px solid transparent',\r                      background: selectedCategory === category.key\r                        ? `linear-gradient(135deg, ${category.color}10, ${category.color}05)`\r                        : 'white',\r                      transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\r                      boxShadow: selectedCategory === category.key\r                        ? `0 8px 24px ${category.color}20`\r                        : '0 2px 8px rgba(0,0,0,0.06)'\r                    }}\r                    bodyStyle={{ padding: '20px 24px' }}\r                  >\r                    <Space align=\"center\" size={12}>\r                      <div style={{ \r                        fontSize: '24px', \r                        color: category.color,\r                        display: 'flex',\r                        alignItems: 'center'\r                      }}>\r                        {category.icon}\r                      </div>\r                      <Text strong style={{ \r                        fontSize: '16px',\r                        color: selectedCategory === category.key ? category.color : '#2d3748'\r                      }}>\r                        {category.title}\r                      </Text>\r                    </Space>\r                  </Card>\r                </motion.div>\r              </Col>\r            ))}\r          </Row>\r        </motion.div>\r        {/* Questions */}\r        <Row gutter={[32, 32]}>\r          <Col xs={24}>\r            <AnimatePresence mode=\"wait\">\r              {currentCategory && (\r                <motion.div\r                  key={selectedCategory}\r                  initial={{ opacity: 0, x: 20 }}\r                  animate={{ opacity: 1, x: 0 }}\r                  exit={{ opacity: 0, x: -20 }}\r                  transition={{ duration: 0.3 }}\r                >\r                  <div style={{ maxWidth: '900px', margin: '0 auto' }}>\r                    {currentCategory.questions.map((item, index) => (\r                      <motion.div\r                        key={item.id}\r                        initial={{ opacity: 0, y: 20 }}\r                        animate={{ opacity: 1, y: 0 }}\r                        transition={{ delay: index * 0.1 }}\r                        style={{ marginBottom: '16px' }}\r                      >\r                        <Card\r                          style={{\r                            borderRadius: '16px',\r                            border: expandedItems.includes(item.id)\r                              ? `2px solid ${currentCategory.color}20`\r                              : '1px solid #e2e8f0',\r                            transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\r                            overflow: 'hidden',\r                            boxShadow: expandedItems.includes(item.id)\r                              ? '0 8px 32px rgba(0,0,0,0.08)'\r                              : '0 2px 8px rgba(0,0,0,0.04)'\r                          }}\r                          bodyStyle={{ padding: 0 }}\r                        >\r                          <div\r                            onClick={() => toggleExpand(item.id)}\r                            style={{\r                              padding: '24px 28px',\r                              cursor: 'pointer',\r                              display: 'flex',\r                              justifyContent: 'space-between',\r                              alignItems: 'center',\r                              background: expandedItems.includes(item.id)\r                                ? `linear-gradient(135deg, ${currentCategory.color}05, transparent)`\r                                : 'transparent',\r                              transition: 'background 0.3s'\r                            }}\r                           role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => toggleExpand(item.id)(e)}>\r                            <Text strong style={{ \r                              fontSize: '16px', \r                              color: '#2d3748',\r                              flex: 1,\r                              paddingRight: '20px'\r                            }}>\r                              {item.question}\r                            </Text>\r                            <Button\r                              type=\"text\"\r                              icon={expandedItems.includes(item.id) ? <MinusOutlined /> : <PlusOutlined />}\r                              style={{\r                                color: currentCategory.color,\r                                borderRadius: '8px',\r                                background: `${currentCategory.color}10`\r                              }}\r                            / aria-label=\"button\">\r                          </div>\r                          <AnimatePresence>\r                            {expandedItems.includes(item.id) && (\r                              <motion.div\r                                initial={{ height: 0, opacity: 0 }}\r                                animate={{ height: 'auto', opacity: 1 }}\r                                exit={{ height: 0, opacity: 0 }}\r                                transition={{ duration: 0.3 }}\r                                style={{\r                                  borderTop: `1px solid ${currentCategory.color}10`,\r                                  background: 'white'\r                                }}\r                              >\r                                <div style={{ padding: '24px 28px' }}>\r                                  <Paragraph style={{ \r                                    fontSize: '15px', \r                                    color: '#4a5568',\r                                    marginBottom: '20px',\r                                    lineHeight: '1.7'\r                                  }}>\r                                    {item.answer}\r                                  </Paragraph>\r                                  {item.highlights && (\r                                    <Row gutter={[12, 12]}>\r                                      {item.highlights.map((highlight, idx) => (\r                                        <Col key={idx} xs={12} sm={6}>\r                                          <div style={{\r                                            padding: '8px 12px',\r                                            background: `linear-gradient(135deg, ${currentCategory.color}10, ${currentCategory.color}05)`,\r                                            borderRadius: '8px',\r                                            border: `1px solid ${currentCategory.color}20`,\r                                            textAlign: 'center'\r                                          }}>\r                                            <Text style={{ \r                                              fontSize: '13px', \r                                              color: currentCategory.color,\r                                              fontWeight: '500'\r                                            }}>\r                                              {highlight}\r                                            </Text>\r                                          </div>\r                                        </Col>\r                                      ))}\r                                    </Row>\r                                  )}\r                                </div>\r                              </motion.div>\r                            )}\r                          </AnimatePresence>\r                        </Card>\r                      </motion.div>\r                    ))}\r                  </div>\r                </motion.div>\r              )}\r            </AnimatePresence>\r          </Col>\r        </Row>\r        {/* CTA Footer */}\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          whileInView={{ opacity: 1, y: 0 }}\r          viewport={{ once: true }}\r          style={{ marginTop: '60px', textAlign: 'center' }}\r        >\r          <Card\r            style={{\r              background: 'linear-gradient(135deg, #667eea15, #764ba210)',\r              border: 'none',\r              borderRadius: '16px',\r              padding: '32px'\r            }}\r          >\r            <Title level={4} style={{ marginBottom: '12px' }}>Sorunuz mu var?</Title>\r            <Paragraph style={{ fontSize: '16px', color: '#718096', marginBottom: '24px' }}>\r              Aradığınız cevabı bulamadıysanız, destek ekibimiz size yardımcı olmaktan mutluluk duyar.\r            </Paragraph>\r            <Space size=\"large\">\r              <Button \r                type=\"primary\" \r                size=\"large\"\r                icon={<CustomerServiceOutlined />}\r                style={{ \r                  background: 'linear-gradient(135deg, #667eea, #764ba2)',\r                  border: 'none',\r                  height: '48px',\r                  padding: '0 32px',\r                  fontSize: '16px',\r                  borderRadius: '8px'\r                }}\r                onClick={() = aria-label=\"customer service outlined\"> window.location.href = 'mailto:destek@stocker.app'}\r              >\r                Destek Talebi Oluştur\r              </Button>\r              <Button \r                size=\"large\"\r                icon={<MobileOutlined />}\r                style={{\r                  height: '48px',\r                  padding: '0 32px',\r                  fontSize: '16px',\r                  borderRadius: '8px'\r                }}\r                onClick={() = aria-label=\"mobile outlined\"> window.location.href = 'tel:+908502001234'}\r              >\r                0850 200 12 34\r              </Button>\r            </Space>\r          </Card>\r        </motion.div>\r      </div>\r    </section>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/FAQSection/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport { WhatsAppOutlined, PhoneOutlined, MessageOutlined, QuestionCircleOutlined, CloseOutlined } from '@ant-design/icons';\rexport const FloatingActionButton: React.FC = () => {\r  const [isOpen, setIsOpen] = useState(false);\r  const actions = [\r    { icon: <WhatsAppOutlined />, label: 'WhatsApp', color: '#25D366', link: 'https://wa.me/905555555555' },\r    { icon: <PhoneOutlined />, label: 'Telefon', color: '#667eea', link: 'tel:+905555555555' },\r    { icon: <MessageOutlined />, label: 'Mesaj', color: '#1890ff', onClick: () =>  },\r    { icon: <QuestionCircleOutlined />, label: 'Yardım', color: '#764ba2', onClick: () =>  }\r  ];\r  return (\r    <div style={{ position: 'fixed', bottom: 24, right: 24, zIndex: 1000 }}>\r      <AnimatePresence>\r        {isOpen && (\r          <motion.div\r            initial={{ opacity: 0, scale: 0.5 }}\r            animate={{ opacity: 1, scale: 1 }}\r            exit={{ opacity: 0, scale: 0.5 }}\r            style={{\r              position: 'absolute',\r              bottom: 70,\r              right: 0,\r              display: 'flex',\r              flexDirection: 'column',\r              gap: 12\r            }}\r          >\r            {actions.map((action, index) => (\r              <motion.a\r                key={index}\r                href={action.link}\r                onClick={action.onClick}\r                initial={{ opacity: 0, x: 20 }}\r                animate={{ opacity: 1, x: 0 }}\r                exit={{ opacity: 0, x: 20 }}\r                transition={{ delay: index * 0.1 }}\r                whileHover={{ scale: 1.1 }}\r                whileTap={{ scale: 0.95 }}\r                style={{\r                  display: 'flex',\r                  alignItems: 'center',\r                  gap: 12,\r                  padding: '12px 20px',\r                  background: 'white',\r                  borderRadius: 25,\r                  boxShadow: '0 4px 12px rgba(0,0,0,0.15)',\r                  textDecoration: 'none',\r                  color: '#333',\r                  cursor: 'pointer',\r                  minWidth: 150\r                }}\r              >\r                <div \r                  style={{ \r                    fontSize: 20, \r                    color: action.color,\r                    display: 'flex',\r                    alignItems: 'center'\r                  }}\r                >\r                  {action.icon}\r                </div>\r                <span style={{ fontSize: 14, fontWeight: 500 }}>{action.label}</span>\r              </motion.a>\r            ))}\r          </motion.div>\r        )}\r      </AnimatePresence>\r      <motion.button\r        onClick={() => setIsOpen(!isOpen)}\r        whileHover={{ scale: 1.1 }}\r        whileTap={{ scale: 0.95 }}\r        animate={{ rotate: isOpen ? 45 : 0 }}\r        style={{\r          width: 56,\r          height: 56,\r          borderRadius: '50%',\r          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r          border: 'none',\r          color: 'white',\r          fontSize: 24,\r          display: 'flex',\r          alignItems: 'center',\r          justifyContent: 'center',\r          cursor: 'pointer',\r          boxShadow: '0 4px 20px rgba(102, 126, 234, 0.4)',\r          position: 'relative',\r          zIndex: 10\r        }}\r      >\r        {isOpen ? <CloseOutlined /> : <MessageOutlined />}\r      </motion.button>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/FloatingActionButton/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React from 'react';\rimport { Button, Typography } from 'antd';\rimport { RocketOutlined, PlayCircleOutlined } from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rconst { Title, Paragraph } = Typography;\rinterface HeroSectionProps {\r  scrolled?: boolean;\r  navigate?: any;\r}\rexport const HeroSection: React.FC<HeroSectionProps> = ({ scrolled, navigate: navProp }) => {\r  const navigate = useNavigate();\r  return (\r    <section \r      className=\"hero-section\" \r      style={{\r        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r        minHeight: '100vh',\r        display: 'flex',\r        alignItems: 'center',\r        padding: '80px 0'\r      }}\r    >\r      <div className=\"container\" style={{ maxWidth: 1200, margin: '0 auto', padding: '0 24px' }}>\r        <div style={{ textAlign: 'center', color: 'white' }}>\r          <Title \r            level={1} \r            style={{ \r              fontSize: 'clamp(2.5rem, 5vw, 4rem)', \r              fontWeight: 700,\r              color: 'white',\r              marginBottom: 24,\r              lineHeight: 1.2\r            }}\r          >\r            Tüm İşletme Süreçleriniz<br />Tek Platformda\r          </Title>\r          <Paragraph \r            style={{ \r              fontSize: '1.35rem', \r              color: 'rgba(255,255,255,0.95)',\r              maxWidth: 600,\r              margin: '0 auto 40px',\r              fontWeight: 300\r            }}\r          >\r            Stocker ERP ile işletmenizi dijitalleştirin, verimliliğinizi %40 artırın.\r          </Paragraph>\r          <div style={{ display: 'flex', gap: 20, justifyContent: 'center', flexWrap: 'wrap' }}>\r            <Button\r              type=\"primary\"\r              size=\"large\"\r              icon={<RocketOutlined />}\r              onClick={() = aria-label=\"rocket outlined\"> navigate('/register')}\r              style={{\r                height: 56,\r                paddingLeft: 40,\r                paddingRight: 40,\r                fontSize: 18,\r                background: 'white',\r                color: '#667eea',\r                border: 'none',\r                fontWeight: 600,\r                boxShadow: '0 8px 30px rgba(0,0,0,0.12)',\r                transition: 'all 0.3s'\r              }}\r              onMouseEnter={(e) => {\r                e.currentTarget.style.transform = 'translateY(-2px)';\r                e.currentTarget.style.boxShadow = '0 12px 40px rgba(0,0,0,0.15)';\r              }}\r              onMouseLeave={(e) => {\r                e.currentTarget.style.transform = 'translateY(0)';\r                e.currentTarget.style.boxShadow = '0 8px 30px rgba(0,0,0,0.12)';\r              }}\r            >\r              14 Gün Ücretsiz Dene\r            </Button>\r            <Button\r              size=\"large\"\r              icon={<PlayCircleOutlined />}\r              ghost\r              style={{\r                height: 56,\r                paddingLeft: 40,\r                paddingRight: 40,\r                fontSize: 18,\r                color: 'white',\r                borderColor: 'rgba(255,255,255,0.8)',\r                borderWidth: 2,\r                fontWeight: 500\r              }}\r             aria-label=\"play circle outlined\">\r              Canlı Demo\r            </Button>\r          </div>\r          <div style={{ \r            marginTop: 32,\r            display: 'flex',\r            gap: 24,\r            justifyContent: 'center',\r            alignItems: 'center',\r            flexWrap: 'wrap'\r          }}>\r            <span style={{ color: 'rgba(255,255,255,0.9)', fontSize: 15 }}>✓ Kredi kartı gerekmez</span>\r            <span style={{ color: 'rgba(255,255,255,0.9)', fontSize: 15 }}>✓ 5 dakikada kurulum</span>\r            <span style={{ color: 'rgba(255,255,255,0.9)', fontSize: 15 }}>✓ 7/24 destek</span>\r          </div>\r        </div>\r      </div>\r    </section>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/HeroSection/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { Drawer, Button, Space, Typography, Avatar, Badge } from 'antd';\rimport {\r  MenuOutlined,\r  CloseOutlined,\r  HomeOutlined,\r  AppstoreOutlined,\r  DollarOutlined,\r  StarOutlined,\r  PhoneOutlined,\r  UserOutlined,\r  RocketOutlined,\r  LoginOutlined,\r  PlayCircleOutlined,\r} from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport { useVisitorTracking } from '@/shared/hooks/useVisitorTracking';\rimport { useAuthStore } from '@/app/store/auth.store';\rimport './style.css';\rinterface MobileNavigationProps {\r  className?: string;\r}\rexport const MobileNavigation: React.FC<MobileNavigationProps> = ({ className }) => {\r  const [isOpen, setIsOpen] = useState(false);\r  const [activeSection, setActiveSection] = useState('home');\r  const navigate = useNavigate();\r  const { currentVisitType, trackInterest } = useVisitorTracking();\r  const { isAuthenticated, user } = useAuthStore();\r  const menuItems = [\r    {\r      key: 'home',\r      icon: <HomeOutlined />,\r      label: 'Ana Sayfa',\r      action: () => {\r        document.getElementById('hero')?.scrollIntoView({ behavior: 'smooth' });\r        trackInterest('navigation-home');\r      },\r    },\r    {\r      key: 'features',\r      icon: <AppstoreOutlined />,\r      label: 'Özellikler',\r      action: () => {\r        document.getElementById('features')?.scrollIntoView({ behavior: 'smooth' });\r        trackInterest('navigation-features');\r      },\r    },\r    {\r      key: 'modules',\r      icon: <AppstoreOutlined />,\r      label: 'Modüller',\r      action: () => {\r        document.getElementById('modules')?.scrollIntoView({ behavior: 'smooth' });\r        trackInterest('navigation-modules');\r      },\r    },\r    {\r      key: 'pricing',\r      icon: <DollarOutlined />,\r      label: 'Fiyatlandırma',\r      action: () => {\r        document.getElementById('pricing')?.scrollIntoView({ behavior: 'smooth' });\r        trackInterest('navigation-pricing');\r      },\r    },\r    {\r      key: 'testimonials',\r      icon: <StarOutlined />,\r      label: 'Referanslar',\r      action: () => {\r        document.getElementById('testimonials')?.scrollIntoView({ behavior: 'smooth' });\r        trackInterest('navigation-testimonials');\r      },\r    },\r    {\r      key: 'contact',\r      icon: <PhoneOutlined />,\r      label: 'İletişim',\r      action: () => {\r        document.getElementById('contact')?.scrollIntoView({ behavior: 'smooth' });\r        trackInterest('navigation-contact');\r      },\r    },\r  ];\r  const handleMenuClick = (item: typeof menuItems[0]) => {\r    item.action();\r    setIsOpen(false);\r    setActiveSection(item.key);\r  };\r  const renderUserSection = () => {\r    if (isAuthenticated && user) {\r      const userRole = user.roles?.[0];\r      let dashboardRoute = '/app/default';\r      if (userRole === 'SystemAdmin') dashboardRoute = '/master';\r      else if (userRole === 'TenantAdmin' || userRole === 'Admin') dashboardRoute = '/admin';\r      return (\r        <div className=\"mobile-nav-user-section\">\r          <div className=\"user-info\">\r            <Avatar size={48} icon={<UserOutlined />} />\r            <div className=\"user-details\">\r              <Typography.Text strong>{user.firstName || 'Kullanıcı'}</Typography.Text>\r              <Typography.Text type=\"secondary\" style={{ fontSize: 12 }}>\r                {user.email}\r              </Typography.Text>\r            </div>\r          </div>\r          <Button\r            type=\"primary\"\r            block\r            icon={<AppstoreOutlined />}\r            onClick={() = aria-label=\"appstore outlined\"> {\r              navigate(dashboardRoute);\r              setIsOpen(false);\r            }}\r            className=\"user-dashboard-btn\"\r          >\r            Panele Git\r          </Button>\r        </div>\r      );\r    }\r    return (\r      <div className=\"mobile-nav-cta-section\">\r        {currentVisitType === 'first-time' && (\r          <div className=\"mobile-cta-message\">\r            <Typography.Text style={{ fontSize: 13, color: '#667eea' }}>\r              ✨ 14 gün ücretsiz deneme!\r            </Typography.Text>\r          </div>\r        )}\r        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\r          {currentVisitType === 'returning' ? (\r            <>\r              <Button\r                type=\"primary\"\r                block\r                icon={<LoginOutlined />}\r                onClick={() = aria-label=\"login outlined\"> {\r                  navigate('/login');\r                  setIsOpen(false);\r                  trackInterest('mobile-nav-login');\r                }}\r                className=\"mobile-primary-cta\"\r              >\r                Giriş Yap\r              </Button>\r              <Button\r                block\r                ghost\r                icon={<RocketOutlined />}\r                onClick={() = aria-label=\"rocket outlined\"> {\r                  navigate('/register');\r                  setIsOpen(false);\r                  trackInterest('mobile-nav-trial');\r                }}\r              >\r                Deneme Sürümü\r              </Button>\r            </>\r          ) : (\r            <>\r              <Button\r                type=\"primary\"\r                block\r                icon={<RocketOutlined />}\r                onClick={() = aria-label=\"rocket outlined\"> {\r                  navigate('/register');\r                  setIsOpen(false);\r                  trackInterest('mobile-nav-register');\r                }}\r                className=\"mobile-primary-cta\"\r              >\r                {currentVisitType === 'active-user' ? 'Panelime Giriş' : 'Ücretsiz Dene'}\r              </Button>\r              <Button\r                block\r                ghost\r                icon={<PlayCircleOutlined />}\r                onClick={() = aria-label=\"play circle outlined\"> {\r                  document.getElementById('hero')?.scrollIntoView({ behavior: 'smooth' });\r                  setIsOpen(false);\r                  trackInterest('mobile-nav-demo');\r                }}\r              >\r                Demo İzle\r              </Button>\r            </>\r          )}\r        </Space>\r      </div>\r    );\r  };\r  // Close drawer when clicking outside or on escape\r  useEffect(() => {\r    const handleEscape = (e: KeyboardEvent) => {\r      if (e.key === 'Escape') {\r        setIsOpen(false);\r      }\r    };\r    document.addEventListener('keydown', handleEscape);\r    return () => document.removeEventListener('keydown', handleEscape);\r  }, []);\r  return (\r    <>\r      {/* Mobile Menu Trigger */}\r      <Button\r        type=\"text\"\r        icon={<MenuOutlined />}\r        onClick={() = aria-label=\"menu outlined\"> setIsOpen(true)}\r        className={`mobile-nav-trigger ${className}`}\r        size=\"large\"\r      />\r      {/* Mobile Navigation Drawer */}\r      <Drawer\r        title={\r          <div className=\"mobile-nav-header\">\r            <div className=\"mobile-nav-logo\">\r              <RocketOutlined className=\"logo-icon\" />\r              <span className=\"logo-text\">Stocker</span>\r            </div>\r            {currentVisitType === 'returning' && (\r              <Badge count=\"Yeni\" size=\"small\" color=\"#52c41a\" />\r            )}\r          </div>\r        }\r        placement=\"right\"\r        onClose={() => setIsOpen(false)}\r        open={isOpen}\r        width=\"100%\"\r        className=\"mobile-navigation-drawer\"\r        closeIcon={<CloseOutlined />}\r        styles={{ \r          header: {\r            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r            color: 'white',\r            borderBottom: 'none',\r          },\r          body: {\r            padding: 0, \r            background: 'linear-gradient(180deg, #f8f9fb 0%, #ffffff 100%)' \r          }\r        }}\r      >\r        <div className=\"mobile-nav-content\">\r          {/* User Section */}\r          {renderUserSection()}\r          {/* Navigation Menu */}\r          <div className=\"mobile-nav-menu\">\r            {menuItems.map((item) => (\r              <div\r                key={item.key}\r                className={`mobile-nav-item ${\r                  activeSection === item.key ? 'active' : ''\r                }`}\r                onClick={() => handleMenuClick(item)}\r               role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => handleMenuClick(item)(e)}>\r                <div className=\"nav-item-icon\">{item.icon}</div>\r                <div className=\"nav-item-content\">\r                  <Typography.Text className=\"nav-item-label\">\r                    {item.label}\r                  </Typography.Text>\r                </div>\r                <div className=\"nav-item-arrow\">→</div>\r              </div>\r            ))}\r          </div>\r          {/* Quick Actions */}\r          <div className=\"mobile-nav-quick-actions\">\r            <Typography.Title level={5} style={{ margin: '16px 20px 12px' }}>\r              Hızlı İşlemler\r            </Typography.Title>\r            <div className=\"quick-action-grid\">\r              <div\r                className=\"quick-action-item\"\r                onClick={() => {\r                  window.open('tel:08501234567', '_self');\r                  trackInterest('mobile-nav-call');\r                }}\r               role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => {\r                  window.open('tel:08501234567', '_self');\r                  trackInterest('mobile-nav-call');\r                (e)}>\r                <PhoneOutlined />\r                <span>Ara</span>\r              </div>\r              <div\r                className=\"quick-action-item\"\r                onClick={() => {\r                  window.open('https://wa.me/905555555555', '_blank');\r                  trackInterest('mobile-nav-whatsapp');\r                }}\r               role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => {\r                  window.open('https://wa.me/905555555555', '_blank');\r                  trackInterest('mobile-nav-whatsapp');\r                (e)}>\r                📱\r                <span>WhatsApp</span>\r              </div>\r              <div\r                className=\"quick-action-item\"\r                onClick={() => {\r                  navigate('/register');\r                  setIsOpen(false);\r                  trackInterest('mobile-nav-support');\r                }}\r               role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => {\r                  navigate('/register');\r                  setIsOpen(false);\r                  trackInterest('mobile-nav-support');\r                (e)}>\r                💬\r                <span>Destek</span>\r              </div>\r              <div\r                className=\"quick-action-item\"\r                onClick={() => {\r                  document.getElementById('contact')?.scrollIntoView({ behavior: 'smooth' });\r                  setIsOpen(false);\r                  trackInterest('mobile-nav-contact');\r                }}\r               role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => {\r                  document.getElementById('contact')?.scrollIntoView({ behavior: 'smooth' (e)}>\r                ✉️\r                <span>E-posta</span>\r              </div>\r            </div>\r          </div>\r          {/* Footer */}\r          <div className=\"mobile-nav-footer\">\r            <Typography.Text type=\"secondary\" style={{ fontSize: 12, textAlign: 'center' }}>\r              © 2024 Stocker - Türkiye'nin #1 İşletme Platformu\r            </Typography.Text>\r          </div>\r        </div>\r      </Drawer>\r    </>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/MobileNavigation/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import { Modal, Row, Col, Typography, Tag, Space, List, Tabs, Button, Card, Progress, Statistic } from 'antd';\rimport { \r  CheckCircleOutlined,\r  RocketOutlined,\r  TrophyOutlined,\r  StarOutlined,\r  ArrowUpOutlined,\r  ClockCircleOutlined,\r  SafetyOutlined,\r  ApiOutlined\r} from '@ant-design/icons';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rinterface ModuleDetailModalProps {\r  module: {\r    id: string;\r    name: string;\r    title: string;\r    description: string;\r    icon: React.ReactNode;\r    color: string;\r    features: string[];\r    benefits: string[];\r    status: string;\r  };\r  visible: boolean;\r  onClose: () => void;\r}\rexport const ModuleDetailModal: React.FC<ModuleDetailModalProps> = ({ module, visible, onClose }) => {\r  const integrations = [\r    { name: 'E-posta', status: 'active' },\r    { name: 'Takvim', status: 'active' },\r    { name: 'Muhasebe', status: 'active' },\r    { name: 'E-ticaret', status: 'coming' },\r    { name: 'Lojistik', status: 'coming' },\r    { name: 'CRM', status: 'active' }\r  ];\r  const useCases = [\r    {\r      title: 'Küçük İşletmeler',\r      description: 'Temel özellikleri kullanarak hızlı başlangıç',\r      icon: <RocketOutlined />\r    },\r    {\r      title: 'Orta Ölçekli Şirketler',\r      description: 'Gelişmiş özellikler ile süreç optimizasyonu',\r      icon: <TrophyOutlined />\r    },\r    {\r      title: 'Kurumsal Firmalar',\r      description: 'Tam entegrasyon ve özelleştirme imkanları',\r      icon: <SafetyOutlined />\r    }\r  ];\r  const screenshots = [\r    { title: 'Dashboard', url: '/screenshots/dashboard.png' },\r    { title: 'Raporlar', url: '/screenshots/reports.png' },\r    { title: 'Analiz', url: '/screenshots/analytics.png' }\r  ];\r  return (\r    <Modal\r      visible={visible}\r      onCancel={onClose}\r      width={900}\r      footer={[\r        <Button key=\"close\" onClick={onClose}>\r          Kapat\r        </Button>,\r        <Button key=\"demo\" type=\"default\" icon={<RocketOutlined />} aria-label=\"rocket outlined\">\r          Demo İste\r        </Button>,\r        <Button key=\"start\" type=\"primary\" icon={<CheckCircleOutlined />} aria-label=\"check circle outlined\">\r          Hemen Başla\r        </Button>\r      ]}\r      className=\"module-detail-modal\"\r    >\r      <div className=\"modal-header\">\r        <div className=\"module-icon-large\" style={{ backgroundColor: `${module.color}20`, color: module.color }}>\r          {module.icon}\r        </div>\r        <div className=\"module-info\">\r          <Title level={2}>{module.title}</Title>\r          <Paragraph className=\"module-description-full\">{module.description}</Paragraph>\r          <Space>\r            <Tag color={module.status === 'active' ? 'success' : 'processing'}>\r              {module.status === 'active' ? 'Kullanıma Hazır' : 'Beta'}\r            </Tag>\r            <Tag icon={<StarOutlined />} color=\"gold\">4.8/5 Puan</Tag>\r            <Tag icon={<ClockCircleOutlined />}>5 dk kurulum</Tag>\r          </Space>\r        </div>\r      </div>\r      <Tabs defaultActiveKey=\"features\" className=\"module-tabs\">\r        <TabPane tab=\"Özellikler\" key=\"features\">\r          <Row gutter={[24, 24]}>\r            <Col span={14}>\r              <Card title=\"Temel Özellikler\" className=\"feature-card\">\r                <List\r                  dataSource={module.features}\r                  renderItem={item => (\r                    <List.Item>\r                      <Space>\r                        <CheckCircleOutlined style={{ color: '#52c41a' }} />\r                        <Text>{item}</Text>\r                      </Space>\r                    </List.Item>\r                  )}\r                />\r              </Card>\r            </Col>\r            <Col span={10}>\r              <Card title=\"İş Sonuçları\" className=\"benefits-card\">\r                {module.benefits.map((benefit, index) => (\r                  <div key={index} className=\"benefit-item\">\r                    <ArrowUpOutlined style={{ color: '#52c41a' }} />\r                    <Text strong>{benefit}</Text>\r                  </div>\r                ))}\r              </Card>\r            </Col>\r          </Row>\r        </TabPane>\r        <TabPane tab=\"Entegrasyonlar\" key=\"integrations\">\r          <Card title=\"Mevcut Entegrasyonlar\">\r            <Row gutter={[16, 16]}>\r              {integrations.map((integration, index) => (\r                <Col span={8} key={index}>\r                  <Card className=\"integration-card\" hoverable>\r                    <Space>\r                      <ApiOutlined style={{ fontSize: 20, color: integration.status === 'active' ? '#52c41a' : '#faad14' }} />\r                      <div>\r                        <Text strong>{integration.name}</Text>\r                        <br />\r                        <Tag color={integration.status === 'active' ? 'success' : 'warning'} style={{ marginTop: 4 }}>\r                          {integration.status === 'active' ? 'Aktif' : 'Yakında'}\r                        </Tag>\r                      </div>\r                    </Space>\r                  </Card>\r                </Col>\r              ))}\r            </Row>\r          </Card>\r        </TabPane>\r        <TabPane tab=\"Kullanım Senaryoları\" key=\"usecases\">\r          <Row gutter={[16, 16]}>\r            {useCases.map((useCase, index) => (\r              <Col span={8} key={index}>\r                <Card className=\"usecase-card\" hoverable>\r                  <div className=\"usecase-icon\">{useCase.icon}</div>\r                  <Title level={5}>{useCase.title}</Title>\r                  <Paragraph>{useCase.description}</Paragraph>\r                </Card>\r              </Col>\r            ))}\r          </Row>\r          <Card title=\"Başarı Hikayeleri\" style={{ marginTop: 24 }}>\r            <Row gutter={16}>\r              <Col span={8}>\r                <Statistic\r                  title=\"Aktif Kullanıcı\"\r                  value={5280}\r                  prefix={<TeamOutlined />}\r                />\r              </Col>\r              <Col span={8}>\r                <Statistic\r                  title=\"İşlem Hacmi\"\r                  value={125}\r                  suffix=\"M₺\"\r                  prefix={<DollarOutlined />}\r                />\r              </Col>\r              <Col span={8}>\r                <Statistic\r                  title=\"Verimlilik Artışı\"\r                  value={42}\r                  suffix=\"%\"\r                  prefix={<ArrowUpOutlined />}\r                />\r              </Col>\r            </Row>\r          </Card>\r        </TabPane>\r        <TabPane tab=\"Fiyatlandırma\" key=\"pricing\">\r          <Row gutter={[16, 16]}>\r            <Col span={8}>\r              <Card className=\"pricing-card\" hoverable>\r                <div className=\"pricing-header\">\r                  <Title level={4}>Başlangıç</Title>\r                  <div className=\"price\">\r                    <Text className=\"currency\">₺</Text>\r                    <Text className=\"amount\">99</Text>\r                    <Text className=\"period\">/ay</Text>\r                  </div>\r                </div>\r                <List\r                  dataSource={[\r                    '5 kullanıcıya kadar',\r                    'Temel özellikler',\r                    'E-posta desteği',\r                    '10GB depolama'\r                  ]}\r                  renderItem={item => (\r                    <List.Item>\r                      <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 8 }} />\r                      {item}\r                    </List.Item>\r                  )}\r                />\r                <Button block>Planı Seç</Button>\r              </Card>\r            </Col>\r            <Col span={8}>\r              <Card className=\"pricing-card featured\" hoverable>\r                <Badge.Ribbon text=\"Popüler\" color=\"red\">\r                  <div className=\"pricing-header\">\r                    <Title level={4}>Profesyonel</Title>\r                    <div className=\"price\">\r                      <Text className=\"currency\">₺</Text>\r                      <Text className=\"amount\">299</Text>\r                      <Text className=\"period\">/ay</Text>\r                    </div>\r                  </div>\r                  <List\r                    dataSource={[\r                      '25 kullanıcıya kadar',\r                      'Tüm özellikler',\r                      'Öncelikli destek',\r                      '100GB depolama',\r                      'API erişimi'\r                    ]}\r                    renderItem={item => (\r                      <List.Item>\r                        <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 8 }} />\r                        {item}\r                      </List.Item>\r                    )}\r                  />\r                  <Button type=\"primary\" block>Planı Seç</Button>\r                </Badge.Ribbon>\r              </Card>\r            </Col>\r            <Col span={8}>\r              <Card className=\"pricing-card\" hoverable>\r                <div className=\"pricing-header\">\r                  <Title level={4}>Kurumsal</Title>\r                  <div className=\"price\">\r                    <Text className=\"currency\">₺</Text>\r                    <Text className=\"amount\">Özel</Text>\r                  </div>\r                </div>\r                <List\r                  dataSource={[\r                    'Sınırsız kullanıcı',\r                    'Özel özellikler',\r                    '7/24 destek',\r                    'Sınırsız depolama',\r                    'Özel entegrasyonlar'\r                  ]}\r                  renderItem={item => (\r                    <List.Item>\r                      <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 8 }} />\r                      {item}\r                    </List.Item>\r                  )}\r                />\r                <Button block>İletişime Geç</Button>\r              </Card>\r            </Col>\r          </Row>\r        </TabPane>\r      </Tabs>\r    </Modal>\r  );\r};\r// Import için gerekli tip tanımlamaları\rimport { TeamOutlined, DollarOutlined } from '@ant-design/icons';",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/ModuleDetailModal/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import { useState } from 'react';\rimport { Row, Col, Card, Typography, Tag, Button, Space, Modal, List, Badge } from 'antd';\rimport { \r  TeamOutlined,\r  InboxOutlined,\r  ShoppingCartOutlined,\r  DollarOutlined,\r  UserOutlined,\r  ToolOutlined,\r  RocketOutlined,\r  CheckCircleOutlined,\r  ArrowRightOutlined,\r  ExpandOutlined\r} from '@ant-design/icons';\rimport { ModuleDetailModal } from '../ModuleDetailModal';\rimport './style.css';\rimport './corporate.css';\rconst { Title, Text, Paragraph } = Typography;\rinterface Module {\r  id: string;\r  name: string;\r  title: string;\r  description: string;\r  icon: React.ReactNode;\r  color: string;\r  features: string[];\r  benefits: string[];\r  image?: string;\r  status: 'active' | 'coming-soon' | 'beta';\r  popular?: boolean;\r}\rconst modules: Module[] = [\r  {\r    id: 'crm',\r    name: 'CRM',\r    title: 'Müşteri İlişkileri Yönetimi',\r    description: 'Müşteri ilişkilerinizi güçlendirin, satış süreçlerinizi optimize edin ve müşteri memnuniyetini artırın.',\r    icon: <TeamOutlined />,\r    color: '#1890ff',\r    status: 'active',\r    popular: true,\r    features: [\r      'Müşteri profili yönetimi',\r      'İletişim geçmişi takibi',\r      'Satış fırsatı yönetimi',\r      'Teklif ve sözleşme yönetimi',\r      'Müşteri segmentasyonu',\r      'Satış hunisi analizi',\r      'Performans raporları',\r      'E-posta entegrasyonu'\r    ],\r    benefits: [\r      'Müşteri memnuniyetinde %35 artış',\r      'Satış dönüşüm oranında %25 iyileşme',\r      'Müşteri kaybında %40 azalma',\r      'Satış ekibi verimliliğinde %50 artış'\r    ]\r  },\r  {\r    id: 'inventory',\r    name: 'Envanter',\r    title: 'Stok ve Envanter Yönetimi',\r    description: 'Stoklarınızı anlık takip edin, envanter maliyetlerinizi düşürün ve tedarik zincirinizi optimize edin.',\r    icon: <InboxOutlined />,\r    color: '#52c41a',\r    status: 'active',\r    features: [\r      'Gerçek zamanlı stok takibi',\r      'Çoklu depo yönetimi',\r      'Barkod ve QR kod desteği',\r      'Otomatik stok uyarıları',\r      'Transfer yönetimi',\r      'Parti ve seri no takibi',\r      'ABC analizi',\r      'Stok değerleme raporları'\r    ],\r    benefits: [\r      'Stok maliyetlerinde %30 azalma',\r      'Stoksuz kalma durumunda %45 azalma',\r      'Envanter doğruluğunda %99 başarı',\r      'Depo verimliliğinde %40 artış'\r    ]\r  },\r  {\r    id: 'sales',\r    name: 'Satış',\r    title: 'Satış Yönetimi',\r    description: 'Satış süreçlerinizi baştan sona yönetin, siparişleri takip edin ve satış performansınızı artırın.',\r    icon: <ShoppingCartOutlined />,\r    color: '#722ed1',\r    status: 'active',\r    popular: true,\r    features: [\r      'Sipariş yönetimi',\r      'Teklif hazırlama',\r      'Fiyatlama ve indirim yönetimi',\r      'Satış ekibi performans takibi',\r      'Komisyon hesaplama',\r      'Satış tahminleme',\r      'Kampanya yönetimi',\r      'B2B ve B2C satış desteği'\r    ],\r    benefits: [\r      'Satış hacminde %40 artış',\r      'Sipariş işleme süresinde %60 azalma',\r      'Müşteri başına gelirde %25 artış',\r      'Satış tahmin doğruluğunda %85 başarı'\r    ]\r  },\r  {\r    id: 'finance',\r    name: 'Finans',\r    title: 'Finansal Yönetim',\r    description: 'Finansal süreçlerinizi dijitalleştirin, nakit akışınızı kontrol altında tutun ve karlılığınızı artırın.',\r    icon: <DollarOutlined />,\r    color: '#fa8c16',\r    status: 'active',\r    features: [\r      'Fatura yönetimi',\r      'Gelir/Gider takibi',\r      'Nakit akış yönetimi',\r      'Bütçe planlama',\r      'Finansal raporlama',\r      'Vergi hesaplama',\r      'Banka entegrasyonu',\r      'Muhasebe entegrasyonu'\r    ],\r    benefits: [\r      'Tahsilat süresinde %35 iyileşme',\r      'Nakit akış görünürlüğünde %100 artış',\r      'Finansal raporlama süresinde %70 azalma',\r      'Bütçe sapmasında %25 azalma'\r    ]\r  },\r  {\r    id: 'hr',\r    name: 'İK',\r    title: 'İnsan Kaynakları Yönetimi',\r    description: 'Çalışan deneyimini iyileştirin, İK süreçlerinizi otomatikleştirin ve yetenek yönetiminizi güçlendirin.',\r    icon: <UserOutlined />,\r    color: '#13c2c2',\r    status: 'active',\r    features: [\r      'Personel bilgi yönetimi',\r      'İzin ve devamsızlık takibi',\r      'Performans değerlendirme',\r      'İşe alım süreci yönetimi',\r      'Eğitim planlama',\r      'Bordro entegrasyonu',\r      'Organizasyon şeması',\r      'Çalışan self-servis portalı'\r    ],\r    benefits: [\r      'İK süreçlerinde %50 zaman tasarrufu',\r      'Çalışan memnuniyetinde %30 artış',\r      'İşe alım süresinde %40 azalma',\r      'İK maliyetlerinde %25 düşüş'\r    ]\r  },\r  {\r    id: 'production',\r    name: 'Üretim',\r    title: 'Üretim Yönetimi',\r    description: 'Üretim süreçlerinizi optimize edin, verimliliği artırın ve kalite standartlarınızı yükseltin.',\r    icon: <ToolOutlined />,\r    color: '#eb2f96',\r    status: 'beta',\r    features: [\r      'Üretim planlama',\r      'İş emri yönetimi',\r      'Makine ve ekipman takibi',\r      'Kalite kontrol',\r      'OEE hesaplama',\r      'Bakım planlaması',\r      'Gerçek zamanlı üretim takibi',\r      'IoT sensör entegrasyonu'\r    ],\r    benefits: [\r      'Üretim verimliliğinde %35 artış',\r      'Kalite problemlerinde %50 azalma',\r      'Makine duruş süresinde %40 azalma',\r      'Üretim maliyetlerinde %20 düşüş'\r    ]\r  }\r];\rexport const ModuleShowcase = () => {\r  const [selectedModule, setSelectedModule] = useState<Module | null>(null);\r  const [modalVisible, setModalVisible] = useState(false);\r  const handleModuleClick = (module: Module) => {\r    setSelectedModule(module);\r    setModalVisible(true);\r  };\r  const handleCloseModal = () => {\r    setModalVisible(false);\r    setSelectedModule(null);\r  };\r  return (\r    <div className=\"module-showcase\">\r      <div className=\"showcase-header\">\r        <Title level={2}>Güçlü Modüller ile İşinizi Büyütün</Title>\r        <Paragraph className=\"showcase-subtitle\">\r          İşletmenizin ihtiyaçlarına özel tasarlanmış, entegre çalışan ve ölçeklenebilir modüller\r        </Paragraph>\r      </div>\r      <Row gutter={[32, 32]}>\r        {modules.map((module) => (\r          <Col xs={24} sm={12} lg={8} key={module.id}>\r            <Card \r              className={`module-card ${module.status}`}\r              hoverable\r              onClick={() => handleModuleClick(module)}\r            >\r              {module.popular && (\r                <div className=\"popular-badge\">\r                  <Badge.Ribbon text=\"Popüler\" color=\"red\" />\r                </div>\r              )}\r              <div className=\"module-card-header\">\r                <div className=\"module-icon\" style={{ backgroundColor: `${module.color}20`, color: module.color }}>\r                  {module.icon}\r                </div>\r                <div className=\"module-status\">\r                  {module.status === 'active' && <Tag color=\"success\">Aktif</Tag>}\r                  {module.status === 'beta' && <Tag color=\"processing\">Beta</Tag>}\r                  {module.status === 'coming-soon' && <Tag color=\"orange\">Yakında</Tag>}\r                </div>\r              </div>\r              <Title level={4} className=\"module-title\">{module.title}</Title>\r              <Paragraph className=\"module-description\">{module.description}</Paragraph>\r              <div className=\"module-features-preview\">\r                <Space direction=\"vertical\" size={8}>\r                  {module.features.slice(0, 3).map((feature, index) => (\r                    <div key={index} className=\"feature-item\">\r                      <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 8 }} />\r                      <Text>{feature}</Text>\r                    </div>\r                  ))}\r                </Space>\r              </div>\r              <div className=\"module-card-footer\">\r                <Button \r                  type=\"link\" \r                  icon={<ExpandOutlined />}\r                  className=\"detail-button\"\r                 aria-label=\"expand outlined\">\r                  Detayları Görüntüle\r                </Button>\r              </div>\r            </Card>\r          </Col>\r        ))}\r      </Row>\r      <div className=\"showcase-cta\">\r        <Space direction=\"vertical\" align=\"center\" size={24}>\r          <Title level={3}>Tüm Modüller Entegre Çalışır</Title>\r          <Paragraph className=\"cta-description\">\r            Modüller arasında kusursuz veri akışı ve otomatik senkronizasyon ile \r            işletmenizin tüm süreçlerini tek platformdan yönetin.\r          </Paragraph>\r          <Button \r            type=\"primary\" \r            size=\"large\" \r            icon={<RocketOutlined />}\r            className=\"cta-button\"\r           aria-label=\"rocket outlined\">\r            Hemen Başlayın\r          </Button>\r        </Space>\r      </div>\r      {selectedModule && (\r        <ModuleDetailModal\r          module={selectedModule}\r          visible={modalVisible}\r          onClose={handleCloseModal}\r        />\r      )}\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/ModuleShowcase/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { Input, Button, Typography, message, Row, Col } from 'antd';\rimport { \r  MailOutlined, \r  SendOutlined, \r  GiftOutlined,\r  CheckCircleOutlined,\r  SafetyCertificateOutlined \r} from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport './style.css';\rconst { Title, Paragraph, Text } = Typography;\rexport const NewsletterSection: React.FC = () => {\r  const [email, setEmail] = useState('');\r  const [loading, setLoading] = useState(false);\r  const handleSubscribe = async () => {\r    if (!email) {\r      message.error('Lütfen e-posta adresinizi girin');\r      return;\r    }\r    if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\r      message.error('Geçerli bir e-posta adresi girin');\r      return;\r    }\r    setLoading(true);\r    // Simulate API call\r    setTimeout(() => {\r      message.success('Başarıyla abone oldunuz! 🎉');\r      setEmail('');\r      setLoading(false);\r    }, 1500);\r  };\r  const benefits = [\r    'Haftalık ERP ipuçları ve trendler',\r    'Özel indirimler ve kampanyalar',\r    'Yeni özellik duyuruları',\r    'Ücretsiz e-kitap ve rehberler'\r  ];\r  return (\r    <section className=\"newsletter-section\" id=\"newsletter\">\r      <div className=\"newsletter-container\">\r        <Row gutter={[48, 48]} align=\"middle\">\r          <Col xs={24} lg={12}>\r            <motion.div\r              initial={{ opacity: 0, x: -30 }}\r              whileInView={{ opacity: 1, x: 0 }}\r              transition={{ duration: 0.6 }}\r              className=\"newsletter-content\"\r            >\r              <div className=\"newsletter-badge\">\r                <GiftOutlined /> Özel Fırsatlar\r              </div>\r              <Title level={2} className=\"newsletter-title\">\r                ERP Dünyasından Haberdar Olun\r              </Title>\r              <Paragraph className=\"newsletter-description\">\r                En son ERP trendleri, başarı hikayeleri ve özel kampanyalardan \r                ilk siz haberdar olun. Üstelik abone olanlara özel %20 indirim!\r              </Paragraph>\r              <div className=\"benefits-list\">\r                {benefits.map((benefit, index) => (\r                  <motion.div\r                    key={index}\r                    initial={{ opacity: 0, x: -20 }}\r                    whileInView={{ opacity: 1, x: 0 }}\r                    transition={{ delay: index * 0.1 }}\r                    className=\"benefit-item\"\r                  >\r                    <CheckCircleOutlined className=\"benefit-icon\" />\r                    <Text>{benefit}</Text>\r                  </motion.div>\r                ))}\r              </div>\r              <div className=\"trust-badges\">\r                <div className=\"trust-item\">\r                  <SafetyCertificateOutlined />\r                  <span>KVKK Uyumlu</span>\r                </div>\r                <div className=\"trust-item\">\r                  <MailOutlined />\r                  <span>10.000+ Abone</span>\r                </div>\r              </div>\r            </motion.div>\r          </Col>\r          <Col xs={24} lg={12}>\r            <motion.div\r              initial={{ opacity: 0, x: 30 }}\r              whileInView={{ opacity: 1, x: 0 }}\r              transition={{ duration: 0.6 }}\r              className=\"newsletter-form-wrapper\"\r            >\r              <div className=\"newsletter-form\">\r                <div className=\"form-header\">\r                  <MailOutlined className=\"form-icon\" />\r                  <Title level={3}>Bültene Abone Ol</Title>\r                </div>\r                <div className=\"form-input-group\">\r                  <Input\r                    size=\"large\"\r                    placeholder=\"E-posta adresiniz\"\r                    prefix={<MailOutlined / aria-label=\"input field\">}\r                    value={email}\r                    onChange={(e) => setEmail(e.target.value)}\r                    onPressEnter={handleSubscribe}\r                    className=\"newsletter-input\"\r                  />\r                  <Button\r                    type=\"primary\"\r                    size=\"large\"\r                    icon={<SendOutlined />}\r                    loading={loading}\r                    onClick={handleSubscribe}\r                    className=\"subscribe-button\"\r                   aria-label=\"send outlined\">\r                    Abone Ol\r                  </Button>\r                </div>\r                <Text type=\"secondary\" className=\"form-note\">\r                  Aboneliğinizi istediğiniz zaman iptal edebilirsiniz.\r                  Gizlilik politikamızı okumak için <a href=\"#\">tıklayın</a>.\r                </Text>\r                <div className=\"discount-badge\">\r                  <GiftOutlined />\r                  <span>İlk siparişinizde %20 indirim kazanın!</span>\r                </div>\r              </div>\r            </motion.div>\r          </Col>\r        </Row>\r      </div>\r    </section>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/NewsletterSection/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { Row, Col, Card, Button, Typography, Badge, List, Segmented, Space } from 'antd';\rimport { CheckOutlined, CalculatorOutlined, AppstoreOutlined } from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport { pricingPlans } from '../../data/pricingPlans';\rimport { PricingWizard } from '../PricingWizard';\rconst { Title, Text, Paragraph } = Typography;\rinterface PricingSectionProps {\r  navigate?: any;\r}\rexport const PricingSection: React.FC<PricingSectionProps> = ({ navigate: navProp }) => {\r  const navigate = navProp || useNavigate();\r  const [viewMode, setViewMode] = useState<'classic' | 'wizard'>('wizard');\r  return (\r    <section id=\"pricing\" style={{ padding: '80px 0', background: 'white' }}>\r      <div className=\"container\" style={{ maxWidth: 1200, margin: '0 auto', padding: '0 24px' }}>\r        <Title level={2} style={{ textAlign: 'center', marginBottom: 16 }}>\r          Size Uygun Paketi Seçin\r        </Title>\r        <Paragraph \r          style={{ \r            textAlign: 'center', \r            fontSize: 18, \r            color: '#666',\r            maxWidth: 700,\r            margin: '0 auto 32px'\r          }}\r        >\r          İşletmenizin büyüklüğüne ve ihtiyaçlarına göre esnek fiyatlandırma\r        </Paragraph>\r        <div style={{ textAlign: 'center', marginBottom: 48 }}>\r          <Segmented\r            value={viewMode}\r            onChange={(value) => setViewMode(value as 'classic' | 'wizard')}\r            options={[\r              {\r                value: 'wizard',\r                label: (\r                  <Space>\r                    <CalculatorOutlined />\r                    <span>Size Özel Plan</span>\r                  </Space>\r                ),\r              },\r              {\r                value: 'classic',\r                label: (\r                  <Space>\r                    <AppstoreOutlined />\r                    <span>Tüm Planlar</span>\r                  </Space>\r                ),\r              },\r            ]}\r            size=\"large\"\r          />\r          <Paragraph style={{ marginTop: 16, color: '#666' }}>\r            {viewMode === 'wizard' \r              ? 'Birkaç basit soruyla size özel plan oluşturun'\r              : 'Hazır paket planlarımızı inceleyin'}\r          </Paragraph>\r        </div>\r        {viewMode === 'wizard' ? (\r          <PricingWizard />\r        ) : (\r          <>\r        <Row gutter={[32, 32]} justify=\"center\">\r          {pricingPlans.map((plan, index) => (\r            <Col xs={24} sm={24} md={12} lg={8} key={index}>\r              <Badge.Ribbon \r                text={plan.badge || \"Popüler\"} \r                color={plan.popular ? \"#667eea\" : \"#52c41a\"}\r                style={{ display: plan.badge ? 'block' : 'none' }}\r              >\r                <Card\r                  hoverable\r                  style={{ \r                    height: '100%',\r                    border: plan.popular ? '2px solid #667eea' : '1px solid #f0f0f0',\r                    transition: 'all 0.3s ease',\r                    transform: plan.popular ? 'scale(1.02)' : 'scale(1)'\r                  }}\r                  styles={{ body: { padding: 32 } }}\r                >\r                  <div style={{ textAlign: 'center', marginBottom: 24 }}>\r                    <Title level={3} style={{ marginBottom: 8 }}>\r                      {plan.name}\r                    </Title>\r                    <Text style={{ color: '#666' }}>{plan.description}</Text>\r                  </div>\r                  <div style={{ textAlign: 'center', marginBottom: 32 }}>\r                    {plan.oldPrice && (\r                      <Text \r                        delete \r                        style={{ \r                          fontSize: 20, \r                          color: '#999',\r                          display: 'block',\r                          marginBottom: 8\r                        }}\r                      >\r                        {plan.currency}{plan.oldPrice}\r                      </Text>\r                    )}\r                    <div style={{ display: 'flex', alignItems: 'baseline', justifyContent: 'center', gap: 4 }}>\r                      <Text style={{ fontSize: 48, fontWeight: 'bold', color: plan.popular ? '#667eea' : '#1a1a1a' }}>\r                        {plan.currency}{plan.price}\r                      </Text>\r                      <Text style={{ fontSize: 18, color: '#666' }}>/{plan.period}</Text>\r                    </div>\r                    {plan.savings && (\r                      <Badge \r                        count={plan.savings} \r                        style={{ \r                          backgroundColor: '#52c41a',\r                          marginTop: 8\r                        }} \r                      />\r                    )}\r                  </div>\r                  <List\r                    dataSource={plan.features}\r                    renderItem={item => (\r                      <List.Item style={{ border: 'none', padding: '8px 0' }}>\r                        <CheckOutlined style={{ color: '#52c41a', marginRight: 8 }} />\r                        <Text>{item}</Text>\r                      </List.Item>\r                    )}\r                    style={{ marginBottom: 24 }}\r                  />\r                  <Button\r                    type={plan.popular ? 'primary' : 'default'}\r                    size=\"large\"\r                    block\r                    onClick={() => navigate('/register')}\r                    style={{\r                      height: 48,\r                      fontSize: 16,\r                      background: plan.popular ? '#667eea' : undefined\r                    }}\r                  >\r                    Hemen Başla\r                  </Button>\r                </Card>\r              </Badge.Ribbon>\r            </Col>\r          ))}\r        </Row>\r        <div style={{ \r          textAlign: 'center', \r          marginTop: 64,\r          padding: '32px',\r          background: 'linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%)',\r          borderRadius: 16\r        }}>\r          <Title level={4} style={{ marginBottom: 16 }}>\r            💰 30 Gün Para İade Garantisi\r          </Title>\r          <Text style={{ fontSize: 16, color: '#666', display: 'block', marginBottom: 8 }}>\r            14 gün ücretsiz deneme • Kredi kartı gerekmez • Anında iptal\r          </Text>\r          <Text style={{ fontSize: 14, color: '#999' }}>\r            Memnun kalmazsanız, ilk 30 gün içinde ücret iadesi alabilirsiniz\r          </Text>\r        </div>\r        </>\r        )}\r      </div>\r    </section>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/PricingSection/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { \r  Steps, \r  Card, \r  Button, \r  Typography, \r  Space, \r  Radio, \r  Slider, \r  Tag,\r  Row,\r  Col,\r  Divider,\r  Result,\r  List,\r  Badge\r} from 'antd';\rimport { \r  TeamOutlined, \r  ShoppingOutlined,\r  RocketOutlined,\r  CheckCircleOutlined,\r  ArrowRightOutlined,\r  ArrowLeftOutlined,\r  CrownOutlined\r} from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rinterface WizardData {\r  businessSize: 'small' | 'medium' | 'large' | null;\r  userCount: number;\r  modules: string[];\r  industry: string | null;\r}\rinterface RecommendedPlan {\r  name: string;\r  price: number;\r  currency: string;\r  period: string;\r  features: string[];\r  savings?: number;\r  badge?: string;\r}\rexport const PricingWizard: React.FC = () => {\r  const navigate = useNavigate();\r  const [current, setCurrent] = useState(0);\r  const [wizardData, setWizardData] = useState<WizardData>({\r    businessSize: null,\r    userCount: 5,\r    modules: [],\r    industry: null\r  });\r  const [recommendedPlan, setRecommendedPlan] = useState<RecommendedPlan | null>(null);\r  const steps = [\r    {\r      title: 'İşletme Büyüklüğü',\r      icon: <TeamOutlined />\r    },\r    {\r      title: 'Kullanıcı Sayısı',\r      icon: <TeamOutlined />\r    },\r    {\r      title: 'Modül Seçimi',\r      icon: <ShoppingOutlined />\r    },\r    {\r      title: 'Önerilen Plan',\r      icon: <CrownOutlined />\r    }\r  ];\r  const businessSizes = [\r    {\r      value: 'small',\r      label: 'Küçük İşletme',\r      description: '1-10 çalışan',\r      icon: '🏢'\r    },\r    {\r      value: 'medium',\r      label: 'Orta Ölçekli',\r      description: '11-50 çalışan',\r      icon: '🏭'\r    },\r    {\r      value: 'large',\r      label: 'Büyük İşletme',\r      description: '50+ çalışan',\r      icon: '🏗️'\r    }\r  ];\r  const availableModules = [\r    { \r      id: 'crm', \r      name: 'CRM', \r      description: 'Müşteri İlişkileri',\r      price: 299,\r      icon: <TeamOutlined />\r    },\r    { \r      id: 'inventory', \r      name: 'Envanter', \r      description: 'Stok Yönetimi',\r      price: 249,\r      icon: <ShoppingOutlined />\r    },\r    { \r      id: 'sales', \r      name: 'Satış', \r      description: 'Satış Yönetimi',\r      price: 349,\r      icon: <RocketOutlined />\r    },\r    { \r      id: 'finance', \r      name: 'Finans', \r      description: 'Finansal Yönetim',\r      price: 399,\r      icon: <TeamOutlined />\r    },\r    { \r      id: 'hr', \r      name: 'İK', \r      description: 'İnsan Kaynakları',\r      price: 199,\r      icon: <TeamOutlined />\r    },\r    { \r      id: 'production', \r      name: 'Üretim', \r      description: 'Üretim Yönetimi',\r      price: 449,\r      icon: <TeamOutlined />\r    }\r  ];\r  const calculateRecommendedPlan = () => {\r    const basePrice = wizardData.businessSize === 'small' ? 499 : \r                     wizardData.businessSize === 'medium' ? 999 : 1999;\r    const modulePrice = wizardData.modules.reduce((total, moduleId) => {\r      const module = availableModules.find(m => m.id === moduleId);\r      return total + (module?.price || 0);\r    }, 0);\r    const userPrice = Math.max(0, (wizardData.userCount - 5) * 50);\r    const totalPrice = basePrice + modulePrice + userPrice;\r    const discountedPrice = Math.round(totalPrice * 0.85); // %15 indirim\r    const features = [\r      `${wizardData.userCount} kullanıcı`,\r      `${wizardData.modules.length} modül`,\r      '7/24 destek',\r      'Ücretsiz kurulum',\r      'Aylık güncelleme',\r      'Veri yedekleme',\r      'API erişimi',\r      'Özel raporlama'\r    ];\r    setRecommendedPlan({\r      name: wizardData.businessSize === 'small' ? 'Başlangıç Plus' :\r            wizardData.businessSize === 'medium' ? 'Profesyonel' : 'Kurumsal',\r      price: discountedPrice,\r      currency: '₺',\r      period: 'ay',\r      features,\r      savings: totalPrice - discountedPrice,\r      badge: 'Size Özel'\r    });\r    setCurrent(3);\r  };\r  const next = () => {\r    if (current === 2) {\r      calculateRecommendedPlan();\r    } else {\r      setCurrent(current + 1);\r    }\r  };\r  const prev = () => {\r    setCurrent(current - 1);\r  };\r  const isStepValid = () => {\r    switch (current) {\r      case 0:\r        return wizardData.businessSize !== null;\r      case 1:\r        return wizardData.userCount > 0;\r      case 2:\r        return wizardData.modules.length > 0;\r      default:\r        return true;\r    }\r  };\r  const renderStepContent = () => {\r    switch (current) {\r      case 0:\r        return (\r          <div className=\"wizard-step\">\r            <Title level={3}>İşletmenizin büyüklüğü nedir?</Title>\r            <Paragraph className=\"step-description\">\r              Size en uygun planı önerebilmemiz için işletme büyüklüğünüzü seçin\r            </Paragraph>\r            <Row gutter={[24, 24]} style={{ marginTop: 32 }}>\r              {businessSizes.map((size) => (\r                <Col xs={24} sm={8} key={size.value}>\r                  <Card\r                    hoverable\r                    className={`size-card ${wizardData.businessSize === size.value ? 'selected' : ''}`}\r                    onClick={() => setWizardData({...wizardData, businessSize: size.value as any})}\r                  >\r                    <div className=\"size-icon\">{size.icon}</div>\r                    <Title level={4}>{size.label}</Title>\r                    <Text type=\"secondary\">{size.description}</Text>\r                    {wizardData.businessSize === size.value && (\r                      <CheckCircleOutlined className=\"check-icon\" />\r                    )}\r                  </Card>\r                </Col>\r              ))}\r            </Row>\r          </div>\r        );\r      case 1:\r        return (\r          <div className=\"wizard-step\">\r            <Title level={3}>Kaç kullanıcınız olacak?</Title>\r            <Paragraph className=\"step-description\">\r              Sistemi aktif olarak kullanacak kişi sayısını belirtin\r            </Paragraph>\r            <div className=\"user-count-selector\">\r              <div className=\"user-count-display\">\r                <TeamOutlined style={{ fontSize: 48, color: '#667eea' }} />\r                <Title level={1} style={{ margin: '16px 0', color: '#667eea' }}>\r                  {wizardData.userCount}\r                </Title>\r                <Text>Kullanıcı</Text>\r              </div>\r              <Slider\r                min={1}\r                max={100}\r                value={wizardData.userCount}\r                onChange={(value) => setWizardData({...wizardData, userCount: value})}\r                marks={{\r                  1: '1',\r                  25: '25',\r                  50: '50',\r                  75: '75',\r                  100: '100+'\r                }}\r                style={{ maxWidth: 500, margin: '40px auto' }}\r              />\r              <Space size=\"large\" style={{ marginTop: 24 }}>\r                <Tag color=\"blue\">İlk 5 kullanıcı ücretsiz</Tag>\r                <Tag color=\"green\">Her ek kullanıcı: 50₺/ay</Tag>\r              </Space>\r            </div>\r          </div>\r        );\r      case 2:\r        return (\r          <div className=\"wizard-step\">\r            <Title level={3}>Hangi modüllere ihtiyacınız var?</Title>\r            <Paragraph className=\"step-description\">\r              İşletmenizde kullanmak istediğiniz modülleri seçin (birden fazla seçebilirsiniz)\r            </Paragraph>\r            <Row gutter={[16, 16]} style={{ marginTop: 32 }}>\r              {availableModules.map((module) => (\r                <Col xs={12} sm={8} md={6} lg={4} key={module.id}>\r                  <Card\r                    hoverable\r                    size=\"small\"\r                    className={`module-select-card ${wizardData.modules.includes(module.id) ? 'selected' : ''}`}\r                    onClick={() => {\r                      const modules = wizardData.modules.includes(module.id)\r                        ? wizardData.modules.filter(m => m !== module.id)\r                        : [...wizardData.modules, module.id];\r                      setWizardData({...wizardData, modules});\r                    }}\r                  >\r                    <div className=\"module-icon\">{module.icon}</div>\r                    <Title level={5} style={{ marginBottom: 4 }}>{module.name}</Title>\r                    <Text type=\"secondary\" style={{ fontSize: 12 }}>{module.description}</Text>\r                    <div className=\"module-price\">\r                      <Text strong>+{module.price}₺</Text>\r                    </div>\r                    {wizardData.modules.includes(module.id) && (\r                      <CheckCircleOutlined className=\"module-check-icon\" />\r                    )}\r                  </Card>\r                </Col>\r              ))}\r            </Row>\r            {wizardData.modules.length > 0 && (\r              <div className=\"selected-modules-summary\">\r                <Divider />\r                <Space>\r                  <Text>Seçilen modüller:</Text>\r                  {wizardData.modules.map(moduleId => {\r                    const module = availableModules.find(m => m.id === moduleId);\r                    return module ? (\r                      <Tag key={moduleId} color=\"blue\">{module.name}</Tag>\r                    ) : null;\r                  })}\r                </Space>\r              </div>\r            )}\r          </div>\r        );\r      case 3:\r        return recommendedPlan ? (\r          <div className=\"wizard-step result-step\">\r            <Result\r              status=\"success\"\r              title=\"Size Özel Planınız Hazır!\"\r              subTitle=\"İhtiyaçlarınıza göre en uygun planı hazırladık\"\r              extra={[\r                <Button \r                  type=\"primary\" \r                  key=\"start\"\r                  size=\"large\"\r                  onClick={() => navigate('/register')}\r                  icon={<RocketOutlined />}\r                >\r                  Hemen Başla\r                </Button>,\r                <Button \r                  key=\"compare\"\r                  size=\"large\"\r                  onClick={() => setCurrent(0)}\r                >\r                  Yeniden Hesapla\r                </Button>\r              ]}\r            />\r            <Row justify=\"center\" style={{ marginTop: 40 }}>\r              <Col xs={24} sm={20} md={16} lg={12}>\r                <Badge.Ribbon text={recommendedPlan.badge} color=\"#52c41a\">\r                  <Card className=\"recommended-plan-card\">\r                    <div className=\"plan-header\">\r                      <Title level={2}>{recommendedPlan.name}</Title>\r                      <div className=\"plan-price\">\r                        <Text className=\"price-amount\">\r                          {recommendedPlan.currency}{recommendedPlan.price}\r                        </Text>\r                        <Text className=\"price-period\">/{recommendedPlan.period}</Text>\r                      </div>\r                      {recommendedPlan.savings && (\r                        <Tag color=\"green\" style={{ marginTop: 8 }}>\r                          {recommendedPlan.savings}₺ tasarruf\r                        </Tag>\r                      )}\r                    </div>\r                    <Divider />\r                    <List\r                      dataSource={recommendedPlan.features}\r                      renderItem={item => (\r                        <List.Item style={{ border: 'none', padding: '8px 0' }}>\r                          <Space>\r                            <CheckCircleOutlined style={{ color: '#52c41a' }} />\r                            <Text>{item}</Text>\r                          </Space>\r                        </List.Item>\r                      )}\r                    />\r                    <Divider />\r                    <Space direction=\"vertical\" style={{ width: '100%' }}>\r                      <Text type=\"secondary\">\r                        * 14 gün ücretsiz deneme\r                      </Text>\r                      <Text type=\"secondary\">\r                        * Kredi kartı gerektirmez\r                      </Text>\r                      <Text type=\"secondary\">\r                        * İstediğiniz zaman iptal edebilirsiniz\r                      </Text>\r                    </Space>\r                  </Card>\r                </Badge.Ribbon>\r              </Col>\r            </Row>\r          </div>\r        ) : null;\r      default:\r        return null;\r    }\r  };\r  return (\r    <div className=\"pricing-wizard\">\r      <Card className=\"wizard-container\">\r        <Steps \r          current={current} \r          items={steps}\r          className=\"wizard-steps\"\r        />\r        <div className=\"wizard-content\">\r          {renderStepContent()}\r        </div>\r        <div className=\"wizard-actions\">\r          {current > 0 && current < 3 && (\r            <Button onClick={prev} icon={<ArrowLeftOutlined />} aria-label=\"arrow left outlined\">\r              Geri\r            </Button>\r          )}\r          {current < 3 && (\r            <Button \r              type=\"primary\" \r              onClick={next}\r              disabled={!isStepValid()}\r              icon={<ArrowRightOutlined />}\r              iconPosition=\"end\"\r             aria-label=\"arrow right outlined\">\r              {current === 2 ? 'Planı Göster' : 'İleri'}\r            </Button>\r          )}\r        </div>\r      </Card>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/PricingWizard/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { Typography, Row, Col, Card, Button, Modal, Tag, Space } from 'antd';\rimport {\r  PlayCircleOutlined,\r  ClockCircleOutlined,\r  EyeOutlined,\r  StarFilled,\r  CustomerServiceOutlined,\r  RocketOutlined,\r  ToolOutlined,\r  BarChartOutlined\r} from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport './style.css';\rconst { Title, Paragraph, Text } = Typography;\rinterface Video {\r  id: string;\r  title: string;\r  description: string;\r  duration: string;\r  views: string;\r  category: string;\r  thumbnail: string;\r  embedUrl: string;\r  isNew?: boolean;\r  rating?: number;\r}\rconst videos: Video[] = [\r  {\r    id: '1',\r    title: 'Stocker ERP Genel Tanıtım',\r    description: 'Platform hakkında kapsamlı bilgi ve temel özelliklerin tanıtımı',\r    duration: '8:45',\r    views: '2.3K',\r    category: 'Tanıtım',\r    thumbnail: 'https://images.unsplash.com/photo-1551434678-e076c223a692?w=800&h=450&fit=crop',\r    embedUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\r    isNew: true,\r    rating: 4.8\r  },\r  {\r    id: '2',\r    title: 'CRM Modülü Kullanımı',\r    description: 'Müşteri ilişkileri yönetimi modülünün detaylı anlatımı',\r    duration: '12:30',\r    views: '1.8K',\r    category: 'Eğitim',\r    thumbnail: 'https://images.unsplash.com/photo-1553877522-43269d4ea984?w=800&h=450&fit=crop',\r    embedUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\r    rating: 4.9\r  },\r  {\r    id: '3',\r    title: 'Stok Yönetimi Başlangıç',\r    description: 'Stok modülünde ilk adımlar ve temel işlemler',\r    duration: '10:15',\r    views: '3.1K',\r    category: 'Eğitim',\r    thumbnail: 'https://images.unsplash.com/photo-1586528116311-ad8dd3c8310d?w=800&h=450&fit=crop',\r    embedUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\r    rating: 4.7\r  },\r  {\r    id: '4',\r    title: 'Finans Modülü ve Raporlama',\r    description: 'Mali işlemler ve detaylı raporlama özellikleri',\r    duration: '15:20',\r    views: '1.5K',\r    category: 'Eğitim',\r    thumbnail: 'https://images.unsplash.com/photo-1554224155-6726b3ff858f?w=800&h=450&fit=crop',\r    embedUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\r    rating: 4.6\r  },\r  {\r    id: '5',\r    title: 'Müşteri Başarı Hikayeleri',\r    description: 'Stocker kullanan işletmelerin deneyimleri',\r    duration: '6:50',\r    views: '4.2K',\r    category: 'Başarı Hikayeleri',\r    thumbnail: 'https://images.unsplash.com/photo-1556761175-b413da4baf72?w=800&h=450&fit=crop',\r    embedUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\r    isNew: true,\r    rating: 5.0\r  },\r  {\r    id: '6',\r    title: 'E-Ticaret Entegrasyonu',\r    description: 'Trendyol, Hepsiburada ve diğer platformlarla entegrasyon',\r    duration: '9:30',\r    views: '2.7K',\r    category: 'Entegrasyon',\r    thumbnail: 'https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=800&h=450&fit=crop',\r    embedUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\r    rating: 4.8\r  }\r];\rconst categoryIcons: Record<string, React.ReactNode> = {\r  'Tanıtım': <RocketOutlined />,\r  'Eğitim': <CustomerServiceOutlined />,\r  'Başarı Hikayeleri': <StarFilled />,\r  'Entegrasyon': <ToolOutlined />\r};\rconst categoryColors: Record<string, string> = {\r  'Tanıtım': 'purple',\r  'Eğitim': 'blue',\r  'Başarı Hikayeleri': 'gold',\r  'Entegrasyon': 'green'\r};\rexport const VideoSection: React.FC = () => {\r  const [isModalVisible, setIsModalVisible] = useState(false);\r  const [selectedVideo, setSelectedVideo] = useState<Video | null>(null);\r  const [activeCategory, setActiveCategory] = useState<string>('all');\r  const handleVideoClick = (video: Video) => {\r    setSelectedVideo(video);\r    setIsModalVisible(true);\r  };\r  const filteredVideos = activeCategory === 'all' \r    ? videos \r    : videos.filter(v => v.category === activeCategory);\r  const categories = ['all', ...Array.from(new Set(videos.map(v => v.category)))];\r  return (\r    <section className=\"video-section\" id=\"videos\">\r      <div className=\"section-container\">\r        <motion.div\r          initial={{ opacity: 0, y: 20 }}\r          whileInView={{ opacity: 1, y: 0 }}\r          transition={{ duration: 0.6 }}\r          className=\"section-header\"\r        >\r          <Tag color=\"purple\" className=\"section-tag\">\r            <PlayCircleOutlined /> Video Galeri\r          </Tag>\r          <Title level={2}>Eğitim Videoları ve Tanıtımlar</Title>\r          <Paragraph>\r            Stocker ERP'yi daha yakından tanıyın, eğitim videolarımızı izleyin\r          </Paragraph>\r        </motion.div>\r        <div className=\"category-filters\">\r          {categories.map(category => (\r            <Button\r              key={category}\r              type={activeCategory === category ? 'primary' : 'default'}\r              onClick={() => setActiveCategory(category)}\r              className=\"category-filter-btn\"\r              icon={category !== 'all' ? categoryIcons[category] : <BarChartOutlined />}\r            >\r              {category === 'all' ? 'Tümü' : category}\r            </Button>\r          ))}\r        </div>\r        <Row gutter={[32, 32]}>\r          {filteredVideos.map((video, index) => (\r            <Col xs={24} sm={12} lg={8} key={video.id}>\r              <motion.div\r                initial={{ opacity: 0, y: 30 }}\r                whileInView={{ opacity: 1, y: 0 }}\r                transition={{ delay: index * 0.1, duration: 0.6 }}\r                whileHover={{ y: -8 }}\r              >\r                <Card\r                  hoverable\r                  className=\"video-card\"\r                  cover={\r                    <div className=\"video-thumbnail\" onClick={() => handleVideoClick(video)} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => handleVideoClick(video)(e)}>\r                      <img alt={video.title} src={video.thumbnail} />\r                      <div className=\"video-overlay\">\r                        <PlayCircleOutlined className=\"play-icon\" />\r                        <span className=\"video-duration\">{video.duration}</span>\r                      </div>\r                      {video.isNew && (\r                        <Tag color=\"red\" className=\"new-badge\">YENİ</Tag>\r                      )}\r                    </div>\r                  }\r                >\r                  <div className=\"video-category\">\r                    <Tag color={categoryColors[video.category]} icon={categoryIcons[video.category]}>\r                      {video.category}\r                    </Tag>\r                  </div>\r                  <Title level={4} className=\"video-title\">\r                    {video.title}\r                  </Title>\r                  <Paragraph className=\"video-description\">\r                    {video.description}\r                  </Paragraph>\r                  <div className=\"video-stats\">\r                    <Space>\r                      <span className=\"stat-item\">\r                        <EyeOutlined /> {video.views}\r                      </span>\r                      <span className=\"stat-item\">\r                        <ClockCircleOutlined /> {video.duration}\r                      </span>\r                      {video.rating && (\r                        <span className=\"stat-item\">\r                          <StarFilled style={{ color: '#faad14' }} /> {video.rating}\r                        </span>\r                      )}\r                    </Space>\r                  </div>\r                  <Button \r                    type=\"primary\" \r                    block \r                    icon={<PlayCircleOutlined />}\r                    onClick={() = aria-label=\"play circle outlined\"> handleVideoClick(video)}\r                    className=\"watch-button\"\r                  >\r                    İzle\r                  </Button>\r                </Card>\r              </motion.div>\r            </Col>\r          ))}\r        </Row>\r        <motion.div\r          initial={{ opacity: 0 }}\r          whileInView={{ opacity: 1 }}\r          transition={{ delay: 0.4, duration: 0.6 }}\r          className=\"video-footer\"\r        >\r          <Card className=\"video-cta-card\">\r            <Row align=\"middle\" gutter={[24, 24]}>\r              <Col xs={24} md={16}>\r                <Title level={3} style={{ marginBottom: 8 }}>\r                  Daha fazla eğitim içeriği mi arıyorsunuz?\r                </Title>\r                <Paragraph style={{ marginBottom: 0, fontSize: 16 }}>\r                  YouTube kanalımızda 100+ eğitim videosu ve webinar kaydı bulunmaktadır\r                </Paragraph>\r              </Col>\r              <Col xs={24} md={8} style={{ textAlign: 'right' }}>\r                <Button \r                  type=\"primary\" \r                  size=\"large\"\r                  icon={<PlayCircleOutlined />}\r                  className=\"youtube-button\"\r                 aria-label=\"play circle outlined\">\r                  YouTube Kanalımız\r                </Button>\r              </Col>\r            </Row>\r          </Card>\r        </motion.div>\r        <Modal\r          title={selectedVideo?.title}\r          visible={isModalVisible}\r          onCancel={() => setIsModalVisible(false)}\r          footer={null}\r          width={900}\r          centered\r          className=\"video-modal\"\r        >\r          {selectedVideo && (\r            <div className=\"video-player-wrapper\">\r              <div className=\"video-player\">\r                <iframe\r                  src={selectedVideo.embedUrl}\r                  title={selectedVideo.title}\r                  frameBorder=\"0\"\r                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r                  allowFullScreen\r                />\r              </div>\r              <div className=\"video-info\">\r                <Tag color={categoryColors[selectedVideo.category]}>\r                  {selectedVideo.category}\r                </Tag>\r                <Paragraph style={{ marginTop: 16 }}>\r                  {selectedVideo.description}\r                </Paragraph>\r                <div className=\"video-modal-stats\">\r                  <Space>\r                    <span><EyeOutlined /> {selectedVideo.views} görüntülenme</span>\r                    <span><ClockCircleOutlined /> {selectedVideo.duration}</span>\r                    {selectedVideo.rating && (\r                      <span><StarFilled style={{ color: '#faad14' }} /> {selectedVideo.rating}/5</span>\r                    )}\r                  </Space>\r                </div>\r              </div>\r            </div>\r          )}\r        </Modal>\r      </div>\r    </section>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/components/VideoSection/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useEffect, useState } from 'react';\rimport { useNavigate } from 'react-router-dom';\rimport { Layout, Button, Card, Row, Col, Typography, Space, Tag, Divider } from 'antd';\rimport {\r  RocketOutlined,\r  CustomerServiceOutlined,\r  GlobalOutlined,\r  CheckCircleOutlined,\r  ArrowRightOutlined,\r  ApiOutlined,\r  AppstoreOutlined,\r  DollarOutlined,\r  UserOutlined,\r  ToolOutlined,\r  MenuOutlined,\r  CompassOutlined,\r  DatabaseOutlined,\r  ShopOutlined,\r  FundProjectionScreenOutlined,\r  TruckOutlined,\r  ShoppingCartOutlined,\r  PieChartOutlined,\r} from '@ant-design/icons';\rimport { AnimatedHero } from '../../components/AnimatedHero';\rimport { FeaturesSection } from '../../components/FeaturesSection';\rimport { TestimonialsSection } from '../../components/TestimonialsSection';\rimport { StatsSection } from '../../components/StatsSection';\rimport { FloatingActionButton } from '../../components/FloatingActionButton';\rimport { FAQSection } from '../../components/FAQSection';\rimport { SolutionsSection } from '../../components/SolutionsSection';\rimport { mainModules } from '../../data/modules';\rimport './style.css';\rimport './corporate-style.css';\rconst { Header, Content, Footer } = Layout;\rconst { Title, Text, Paragraph } = Typography;\rexport const LandingPage: React.FC = () => {\r  const navigate = useNavigate();\r  const [scrolled, setScrolled] = useState(false);\r  useEffect(() => {\r    const handleScroll = () => {\r      setScrolled(window.scrollY > 50);\r    };\r    window.addEventListener('scroll', handleScroll);\r    return () => window.removeEventListener('scroll', handleScroll);\r  }, []);\r  const additionalModules = [\r    { name: 'E-Ticaret', icon: <ShopOutlined />, description: 'Online satış yönetimi' },\r    { name: 'Üretim', icon: <ToolOutlined />, description: 'Üretim planlama ve takibi' },\r    { name: 'Proje Yönetimi', icon: <FundProjectionScreenOutlined />, description: 'Proje takibi ve yönetimi' },\r    { name: 'Lojistik', icon: <TruckOutlined />, description: 'Nakliye ve kargo yönetimi' },\r    { name: 'Satın Alma', icon: <ShoppingCartOutlined />, description: 'Tedarik ve satın alma' },\r    { name: 'Raporlama', icon: <PieChartOutlined />, description: 'İş zekası ve analizler' }\r  ];\r  return (\r    <Layout className=\"landing-layout\">\r      {/* Navigation Header */}\r      <Header className={`landing-header ${scrolled ? 'scrolled' : ''}`}>\r        <div className=\"header-container\">\r          <div className=\"logo-section\" onClick={() => navigate('/')} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => navigate('/')(e)}>\r            <RocketOutlined className=\"logo-icon\" />\r            <span className=\"logo-text\">Stocker</span>\r          </div>\r          <nav className=\"nav-menu\">\r            <a href=\"#features\" onClick={(e) => { e.preventDefault(); document.getElementById('features')?.scrollIntoView({ behavior: 'smooth' }); }}>Özellikler</a>\r            <a href=\"#solutions\" onClick={(e) => { e.preventDefault(); document.getElementById('solutions')?.scrollIntoView({ behavior: 'smooth' }); }}>Çözümler</a>\r            <a href=\"#modules\" onClick={(e) => { e.preventDefault(); document.getElementById('modules')?.scrollIntoView({ behavior: 'smooth' }); }}>Modüller</a>\r            <a onClick={() => navigate('/pricing')} style={{ cursor: 'pointer' }}>Fiyatlandırma</a>\r            <a onClick={() => navigate('/training')} style={{ cursor: 'pointer' }}>Eğitimler</a>\r            <a onClick={() => navigate('/blog')} style={{ cursor: 'pointer' }}>Blog</a>\r            <a href=\"#faq\" onClick={(e) => { e.preventDefault(); document.getElementById('faq')?.scrollIntoView({ behavior: 'smooth' }); }}>SSS</a>\r          </nav>\r          <div className=\"header-actions\">\r            <Button \r              type={scrolled ? 'default' : 'primary'}\r              ghost={scrolled}\r              onClick={() => navigate('/login')}\r              icon={<UserOutlined />}\r              style={{ \r                marginRight: '8px',\r                ...(scrolled ? {} : { \r                  background: 'transparent', \r                  border: '2px solid #667eea',\r                  color: '#667eea'\r                })\r              }}\r            >\r              Giriş Yap\r            </Button>\r            <Button \r              type=\"primary\" \r              onClick={() => navigate('/register')}\r              icon={<RocketOutlined />}\r              style={{\r                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r                border: 'none',\r              }}\r            >\r              Ücretsiz Dene\r            </Button>\r            <MenuOutlined className=\"mobile-menu-toggle\" />\r          </div>\r        </div>\r      </Header>\r      <Content>\r        {/* Hero Section */}\r        <AnimatedHero />\r        {/* Stats Section */}\r        <StatsSection />\r        {/* Features Section */}\r        <FeaturesSection />\r        {/* Solutions Section */}\r        <SolutionsSection />\r        {/* Main Modules Section */}\r        <section id=\"modules\" className=\"modules-section\">\r          <div className=\"section-container\">\r            <div className=\"section-header\">\r              <Tag color=\"purple\" style={{ marginBottom: 16 }}>\r                <AppstoreOutlined /> Ana Modüller\r              </Tag>\r              <Typography.Title level={2}>İşletmenizi Güçlendirecek Ana Modüller</Typography.Title>\r              <Typography.Paragraph>\r                Entegre çalışan modüller ile tüm iş süreçlerinizi tek platformdan yönetin\r              </Typography.Paragraph>\r            </div>\r            {/* Additional Modules */}\r            <Divider style={{ margin: '48px 0' }}>\r              <Typography.Title level={4}>Ek Modüller</Typography.Title>\r            </Divider>\r            <Row gutter={[24, 24]}>\r              {additionalModules.map((module, index) => (\r                <Col xs={12} sm={8} lg={4} key={index}>\r                  <Card \r                    className=\"module-card slide-up\"\r                    hoverable\r                    variant=\"borderless\"\r                    style={{ animationDelay: `${index * 0.05}s` }}\r                  >\r                    <div className=\"module-icon\" style={{ color: '#667eea', fontSize: 32 }}>\r                      {module.icon}\r                    </div>\r                    <Typography.Title level={5} style={{ marginBottom: 4 }}>{module.name}</Typography.Title>\r                    <Typography.Text type=\"secondary\" style={{ fontSize: 13 }}>{module.description}</Typography.Text>\r                  </Card>\r                </Col>\r              ))}\r            </Row>\r          </div>\r        </section>\r        {/* Testimonials Section */}\r        <TestimonialsSection />\r        {/* FAQ Section */}\r        <FAQSection />\r        {/* Integration Section */}\r        <section className=\"integration-section\">\r          <div className=\"section-container\">\r            <div className=\"section-header\">\r              <Tag color=\"purple\" style={{ marginBottom: 16 }}>\r                <ApiOutlined /> Entegrasyonlar\r              </Tag>\r              <Typography.Title level={2}>Hazır Entegrasyonlar</Typography.Title>\r              <Typography.Paragraph>\r                Kullandığınız tüm sistemlerle uyumlu çalışır\r              </Typography.Paragraph>\r            </div>\r            <Row gutter={[24, 24]} justify=\"center\">\r              {[\r                'e-Fatura', 'e-Arşiv', 'e-İrsaliye', 'Trendyol', \r                'Hepsiburada', 'N11', 'Amazon', 'Paraşüt', \r                'Logo', 'Mikro', 'Nebim', 'SAP'\r              ].map((integration, index) => (\r                <Col key={index}>\r                  <Tag \r                    className=\"integration-tag fade-in\" \r                    style={{ animationDelay: `${index * 0.05}s` }}\r                  >\r                    {integration}\r                  </Tag>\r                </Col>\r              ))}\r            </Row>\r            <div style={{ textAlign: 'center', marginTop: 32 }}>\r              <Button type=\"link\" icon={<DatabaseOutlined />} aria-label=\"database outlined\">\r                Tüm Entegrasyonları Gör\r              </Button>\r            </div>\r          </div>\r        </section>\r        {/* CTA Section */}\r        <section id=\"contact\" className=\"cta-section\">\r          <div className=\"section-container\">\r            <Card className=\"cta-card\" variant=\"borderless\">\r              <Typography.Title level={2} style={{ color: 'white' }}>\r                İşletmenizi Dijitalleştirmeye Hazır mısınız?\r              </Typography.Title>\r              <Typography.Paragraph style={{ color: 'rgba(255,255,255,0.95)', fontSize: 20, maxWidth: 700, margin: '0 auto 40px' }}>\r                14 gün ücretsiz deneme sürümüyle başlayın. \r                Kredi kartı gerekmez, hemen kullanmaya başlayın.\r              </Typography.Paragraph>\r              <Space size=\"large\" wrap>\r                <Button \r                  type=\"primary\" \r                  size=\"large\"\r                  icon={<RocketOutlined />}\r                  onClick={() = aria-label=\"rocket outlined\"> navigate('/register')}\r                  className=\"cta-final-button\"\r                >\r                  Ücretsiz Dene\r                </Button>\r                <Button \r                  size=\"large\"\r                  ghost\r                  style={{ color: 'white', borderColor: 'white', backdropFilter: 'blur(10px)' }}\r                  icon={<CustomerServiceOutlined />}\r                  onClick={() = aria-label=\"customer service outlined\"> window.open('https://wa.me/905555555555', '_blank')}\r                >\r                  Satış Ekibiyle Görüş\r                </Button>\r              </Space>\r              <div style={{ marginTop: 40 }}>\r                <Space wrap size=\"large\" style={{ justifyContent: 'center' }}>\r                  <div style={{ color: 'white', display: 'flex', alignItems: 'center', gap: 8 }}>\r                    <CheckCircleOutlined style={{ fontSize: 20 }} />\r                    <Typography.Text style={{ color: 'white', fontSize: 16 }}>Kurulum ücreti yok</Typography.Text>\r                  </div>\r                  <div style={{ color: 'white', display: 'flex', alignItems: 'center', gap: 8 }}>\r                    <CheckCircleOutlined style={{ fontSize: 20 }} />\r                    <Typography.Text style={{ color: 'white', fontSize: 16 }}>İstediğiniz zaman iptal</Typography.Text>\r                  </div>\r                  <div style={{ color: 'white', display: 'flex', alignItems: 'center', gap: 8 }}>\r                    <CheckCircleOutlined style={{ fontSize: 20 }} />\r                    <Typography.Text style={{ color: 'white', fontSize: 16 }}>7/24 destek</Typography.Text>\r                  </div>\r                </Space>\r              </div>\r            </Card>\r          </div>\r        </section>\r      </Content>\r      {/* Footer */}\r      <Footer className=\"landing-footer\">\r        <div className=\"footer-container\">\r          <Row gutter={[32, 32]}>\r            <Col xs={24} sm={12} lg={6}>\r              <div className=\"footer-section\">\r                <div className=\"footer-logo\">\r                  <RocketOutlined /> Stocker\r                </div>\r                <Typography.Paragraph type=\"secondary\">\r                  Türkiye'nin en kapsamlı işletme yönetim platformu. \r                  Tüm iş süreçleriniz tek çatı altında.\r                </Typography.Paragraph>\r                <div style={{ marginTop: 16 }}>\r                  <Space>\r                    <Button shape=\"circle\" icon={<GlobalOutlined />} / aria-label=\"global outlined\">\r                    <Button shape=\"circle\" icon={<CustomerServiceOutlined />} / aria-label=\"customer service outlined\">\r                  </Space>\r                </div>\r              </div>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <div className=\"footer-section\">\r                <Typography.Title level={5}>Ürün</Typography.Title>\r                <ul className=\"footer-links\">\r                  <li><a href=\"#features\">Özellikler</a></li>\r                  <li><a href=\"#solutions\">Çözümler</a></li>\r                  <li><a href=\"#modules\">Modüller</a></li>\r                  <li><a onClick={() => navigate('/pricing')} style={{ cursor: 'pointer' }}>Fiyatlandırma</a></li>\r                  <li><a href=\"#faq\">SSS</a></li>\r                </ul>\r              </div>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <div className=\"footer-section\">\r                <Typography.Title level={5}>Şirket</Typography.Title>\r                <ul className=\"footer-links\">\r                  <li><a href=\"#\">Hakkımızda</a></li>\r                  <li><a href=\"#\">Kariyer</a></li>\r                  <li><a onClick={() => navigate('/blog')} style={{ cursor: 'pointer' }}>Blog</a></li>\r                  <li><a href=\"#\">İletişim</a></li>\r                  <li><a href=\"#\">Basın Kiti</a></li>\r                </ul>\r              </div>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <div className=\"footer-section\">\r                <Typography.Title level={5}>Destek</Typography.Title>\r                <ul className=\"footer-links\">\r                  <li><a href=\"#\">Yardım Merkezi</a></li>\r                  <li><a onClick={() => navigate('/training')} style={{ cursor: 'pointer' }}>Eğitim ve Videolar</a></li>\r                  <li><a href=\"#\">Kullanım Kılavuzu</a></li>\r                  <li><a href=\"#\">SSS</a></li>\r                  <li><a href=\"#\">Sistem Durumu</a></li>\r                </ul>\r                <div style={{ marginTop: 16 }}>\r                  <Typography.Text type=\"secondary\">Destek Hattı:</Typography.Text>\r                  <br />\r                  <Typography.Text strong style={{ fontSize: 18 }}>0850 123 45 67</Typography.Text>\r                </div>\r              </div>\r            </Col>\r          </Row>\r          <Divider />\r          <div className=\"footer-bottom\">\r            <Row align=\"middle\" justify=\"space-between\">\r              <Col>\r                <Typography.Text type=\"secondary\">\r                  © 2024 Stocker. Tüm hakları saklıdır.\r                </Typography.Text>\r              </Col>\r              <Col>\r                <Space>\r                  <a href=\"#\">Gizlilik Politikası</a>\r                  <span>|</span>\r                  <a href=\"#\">Kullanım Koşulları</a>\r                  <span>|</span>\r                  <a href=\"#\">KVKK</a>\r                </Space>\r              </Col>\r            </Row>\r          </div>\r        </div>\r      </Footer>\r      {/* Floating Action Button */}\r      <FloatingActionButton />\r    </Layout>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/pages/LandingPage/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { useNavigate } from 'react-router-dom';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport { \r  Button, \r  Typography, \r  Row, \r  Col, \r  Card, \r  Space, \r  Tag,\r  Badge,\r  Statistic,\r  Avatar,\r  Rate,\r  Tooltip,\r  Divider,\r  App,\r  Affix\r} from 'antd';\rimport {\r  RocketOutlined,\r  CheckCircleOutlined,\r  StarFilled,\r  UserOutlined,\r  TeamOutlined,\r  AppstoreOutlined,\r  DashboardOutlined,\r  BarChartOutlined,\r  SafetyOutlined,\r  CloudOutlined,\r  ApiOutlined,\r  CustomerServiceOutlined,\r  ThunderboltOutlined,\r  GlobalOutlined,\r  MobileOutlined,\r  ArrowRightOutlined,\r  PlayCircleOutlined,\r  TrophyOutlined,\r  HeartFilled,\r  CrownOutlined,\r  FireOutlined,\r  ShopOutlined,\r  TruckOutlined,\r  ArrowUpOutlined\r} from '@ant-design/icons';\rimport CountUp from 'react-countup';\rimport { useInView } from 'react-intersection-observer';\rimport { FAQSection } from '../../components/FAQSection';\rimport { ComparisonTable } from '../../components/ComparisonTable';\rimport { TenantLoginModal } from '../../../auth/components/TenantLoginModal';\rimport { isTenantDomain } from '../../../../utils/tenant';\rimport './style.css';\rconst { Title, Paragraph, Text } = Typography;\rexport const ModernLanding: React.FC = () => {\r  const navigate = useNavigate();\r  const { modal, notification } = App.useApp();\r  const [activeFeature, setActiveFeature] = useState(0);\r  const [selectedBusinessType, setSelectedBusinessType] = useState('');\r  const [scrolled, setScrolled] = useState(false);\r  const [scrollY, setScrollY] = useState(0);\r  const [showScrollTop, setShowScrollTop] = useState(false);\r  const [activeSection, setActiveSection] = useState('hero');\r  const [showTenantModal, setShowTenantModal] = useState(false);\r  // Section IDs for navigation\r  const sections = [\r    { id: 'hero', name: 'Ana Sayfa', icon: '🏠' },\r    { id: 'stats', name: 'İstatistikler', icon: '📊' },\r    { id: 'features', name: 'Özellikler', icon: '✨' },\r    { id: 'testimonials', name: 'Referanslar', icon: '💬' },\r    { id: 'comparison', name: 'Karşılaştırma', icon: '⚖️' },\r    { id: 'faq', name: 'SSS', icon: '❓' }\r  ];\r  // Scroll listener for navigation and parallax\r  useEffect(() => {\r    const handleScroll = () => {\r      setScrolled(window.scrollY > 50);\r      setScrollY(window.scrollY);\r      setShowScrollTop(window.scrollY > 500);\r      // Detect active section\r      const scrollPosition = window.scrollY + 100;\r      for (const section of sections) {\r        const element = document.getElementById(section.id);\r        if (element) {\r          const { offsetTop, offsetHeight } = element;\r          if (scrollPosition >= offsetTop && scrollPosition < offsetTop + offsetHeight) {\r            setActiveSection(section.id);\r            break;\r          }\r        }\r      }\r    };\r    window.addEventListener('scroll', handleScroll, { passive: true });\r    handleScroll(); // Initial check\r    return () => window.removeEventListener('scroll', handleScroll);\r  }, []);\r  const scrollToTop = () => {\r    window.scrollTo({ top: 0, behavior: 'smooth' });\r  };\r  const scrollToSection = (sectionId: string) => {\r    const element = document.getElementById(sectionId);\r    if (element) {\r      element.scrollIntoView({ behavior: 'smooth', block: 'start' });\r    }\r  };\r  const handleBusinessTypeSelect = (type: string, name: string) => {\r    setSelectedBusinessType(type);\r    notification.success({\r      message: `${name} Sektörü Seçildi`,\r      description: 'Size özel paket önerilerimizi aşağıda görebilirsiniz.',\r      placement: 'top',\r      duration: 3,\r      icon: <CheckCircleOutlined style={{ color: '#52c41a' }} />\r    });\r  };\r  const { ref: statsRef, inView: statsInView } = useInView({ \r    triggerOnce: true,\r    threshold: 0.1\r  });\r  const { ref: featuresRef, inView: featuresInView } = useInView({ \r    triggerOnce: true,\r    threshold: 0.1\r  });\r  const { ref: pricingRef, inView: pricingInView } = useInView({ \r    triggerOnce: true,\r    threshold: 0.1\r  });\r  const { ref: testimonialsRef, inView: testimonialsInView } = useInView({ \r    triggerOnce: true,\r    threshold: 0.1\r  });\r  // Hero typing animation\r  const [displayText, setDisplayText] = useState('');\r  const fullText = 'İşletmenizi Dijitalleştirin';\r  useEffect(() => {\r    let index = 0;\r    const timer = setInterval(() => {\r      if (index <= fullText.length) {\r        setDisplayText(fullText.slice(0, index));\r        index++;\r      } else {\r        clearInterval(timer);\r      }\r    }, 100);\r    return () => clearInterval(timer);\r  }, []);\r  // Auto-rotate features\r  useEffect(() => {\r    const timer = setInterval(() => {\r      setActiveFeature((prev) => (prev + 1) % features.length);\r    }, 5000);\r    return () => clearInterval(timer);\r  }, []);\r  const features = [\r    {\r      icon: <TeamOutlined />,\r      title: 'CRM Modülü',\r      description: 'Müşteri ilişkilerinizi profesyonelce yönetin',\r      color: '#667eea',\r      highlights: [\r        { label: 'Müşteri Yönetimi', value: 'Detaylı müşteri kartları ve iletişim geçmişi' },\r        { label: 'Satış Pipeline', value: 'Fırsatları takip edin ve dönüşüm oranlarınızı artırın' },\r        { label: 'Otomasyonlar', value: 'Hatırlatmalar ve görev atamaları ile verimliliği artırın' },\r        { label: 'Analiz & Raporlama', value: 'Satış performansınızı detaylı raporlarla izleyin' }\r      ],\r      stats: { users: '10K+', efficiency: '%45', time: '2 saat/gün' }\r    },\r    {\r      icon: <AppstoreOutlined />,\r      title: 'Stok Yönetimi',\r      description: 'Envanter kontrolünü tamamen dijitalleştirin',\r      color: '#764ba2',\r      highlights: [\r        { label: 'Gerçek Zamanlı Takip', value: 'Stok hareketlerini anlık olarak görüntüleyin' },\r        { label: 'Barkod & QR Kod', value: 'Hızlı ve hatasız stok girişi/çıkışı yapın' },\r        { label: 'Akıllı Uyarılar', value: 'Minimum ve maksimum stok seviyesi bildirimleri' },\r        { label: 'Çoklu Depo', value: 'Tüm depolarınızı tek platformdan yönetin' }\r      ],\r      stats: { products: '100K+', accuracy: '%99.9', warehouses: '50+' }\r    },\r    {\r      icon: <BarChartOutlined />,\r      title: 'Satış & Faturalama',\r      description: 'Satış süreçlerinizi baştan sona dijitalleştirin',\r      color: '#f093fb',\r      highlights: [\r        { label: 'E-Fatura & E-Arşiv', value: 'GİB entegrasyonu ile otomatik fatura oluşturma' },\r        { label: 'Teklif Yönetimi', value: 'Profesyonel teklifler hazırlayın ve takip edin' },\r        { label: 'Sipariş Takibi', value: 'Siparişten teslimata tüm süreci yönetin' },\r        { label: 'Tahsilat Yönetimi', value: 'Vadeli satışları ve tahsilatları takip edin' }\r      ],\r      stats: { invoices: '1M+', integration: 'GİB Onaylı', speed: '10x' }\r    },\r    {\r      icon: <DashboardOutlined />,\r      title: 'Finans & Muhasebe',\r      description: 'Mali süreçlerinizi kontrol altına alın',\r      color: '#f5576c',\r      highlights: [\r        { label: 'Gelir-Gider Takibi', value: 'Nakit akışınızı anlık olarak görüntüleyin' },\r        { label: 'Bütçe Planlama', value: 'Departman bazlı bütçeler oluşturun ve takip edin' },\r        { label: 'Mali Tablolar', value: 'Bilanço, kar-zarar ve diğer mali raporlar' },\r        { label: 'Vergi Yönetimi', value: 'KDV, stopaj ve diğer vergi hesaplamaları' }\r      ],\r      stats: { transactions: '10M+', reports: '50+', compliance: '%100' }\r    },\r    {\r      icon: <UserOutlined />,\r      title: 'İnsan Kaynakları',\r      description: 'Modern İK yönetimi için komple çözüm',\r      color: '#4facfe',\r      highlights: [\r        { label: 'Personel Yönetimi', value: 'Dijital özlük dosyaları ve organizasyon şeması' },\r        { label: 'İzin & Vardiya', value: 'İzin talepleri ve vardiya planlaması' },\r        { label: 'Bordro İşlemleri', value: 'Maaş, prim ve kesintileri otomatik hesaplama' },\r        { label: 'Performans Takibi', value: '360 derece performans değerlendirme sistemi' }\r      ],\r      stats: { employees: '50K+', automation: '%80', satisfaction: '4.8/5' }\r    },\r    {\r      icon: <GlobalOutlined />,\r      title: 'Üretim Planlama',\r      description: 'Üretim süreçlerinizi optimize edin',\r      color: '#43e97b',\r      highlights: [\r        { label: 'İş Emirleri', value: 'Üretim emirlerini dijital olarak yönetin' },\r        { label: 'Reçete Yönetimi', value: 'Ürün reçetelerini ve maliyetlerini takip edin' },\r        { label: 'Kapasite Planlama', value: 'Makine ve işgücü kapasitesini optimize edin' },\r        { label: 'Kalite Kontrol', value: 'Üretim sürecinde kalite kontrol noktaları' }\r      ],\r      stats: { production: '1M+ ürün', optimization: '%35', quality: '%99.5' }\r    }\r  ];\r  const stats = [\r    { value: 6, suffix: '', label: 'ERP Modülü', icon: <AppstoreOutlined /> },\r    { value: 100, suffix: '+', label: 'İş Süreci', icon: <ThunderboltOutlined /> },\r    { value: 50, suffix: '+', label: 'Entegrasyon', icon: <ApiOutlined /> },\r    { value: 24, suffix: '/7', label: 'Teknik Destek', icon: <CustomerServiceOutlined /> }\r  ];\r  const pricingPlansByType = {\r    retail: [\r      {\r        name: 'Perakende Başlangıç',\r        price: 399,\r        period: 'aylık',\r        icon: <ShopOutlined />,\r        features: ['3 Kullanıcı', 'Stok + Satış + Kasa Modülleri', 'Barkod Sistemi', '5GB Depolama', 'POS Entegrasyonu', 'Email Destek'],\r        popular: false\r      },\r      {\r        name: 'Perakende Plus',\r        price: 799,\r        period: 'aylık',\r        icon: <ShopOutlined />,\r        features: ['10 Kullanıcı', 'CRM + Stok + Satış + Finans', 'Multi-Mağaza Desteği', '50GB Depolama', 'E-Fatura & E-Arşiv', 'Sadakat Programı', '7/24 Destek'],\r        popular: true\r      },\r      {\r        name: 'Perakende Zincir',\r        price: 1999,\r        period: 'aylık',\r        icon: <ShopOutlined />,\r        features: ['Sınırsız Kullanıcı', 'Tüm Modüller', 'Sınırsız Mağaza', 'Merkezi Yönetim', 'Franchise Desteği', 'Özel Raporlar', 'SLA Garantisi'],\r        popular: false\r      }\r    ],\r    production: [\r      {\r        name: 'Üretim Atölye',\r        price: 599,\r        period: 'aylık',\r        icon: <GlobalOutlined />,\r        features: ['5 Kullanıcı', 'Üretim + Stok + Satış', 'Reçete Yönetimi', '20GB Depolama', 'İş Emirleri', 'Temel Planlama'],\r        popular: false\r      },\r      {\r        name: 'Üretim Fabrika',\r        price: 1299,\r        period: 'aylık',\r        icon: <GlobalOutlined />,\r        features: ['25 Kullanıcı', 'Tüm Üretim Modülleri', 'MRP Planlama', 'Kalite Kontrol', 'Bakım Yönetimi', 'IoT Entegrasyon', 'Vardiya Yönetimi'],\r        popular: true\r      },\r      {\r        name: 'Üretim Enterprise',\r        price: 3499,\r        period: 'aylık',\r        icon: <GlobalOutlined />,\r        features: ['Sınırsız Kullanıcı', 'ERP + MES + WMS', 'Gelişmiş Planlama', 'AI Optimizasyon', 'Multi-Fabrika', 'SAP Entegrasyon', 'Özel Geliştirme'],\r        popular: false\r      }\r    ],\r    distribution: [\r      {\r        name: 'Dağıtım Başlangıç',\r        price: 499,\r        period: 'aylık',\r        icon: <TruckOutlined />,\r        features: ['5 Kullanıcı', 'Stok + Satış + Lojistik', 'Rota Planlama', '15GB Depolama', 'Araç Takibi', 'Sevkiyat Yönetimi'],\r        popular: false\r      },\r      {\r        name: 'Dağıtım Pro',\r        price: 999,\r        period: 'aylık',\r        icon: <TruckOutlined />,\r        features: ['20 Kullanıcı', 'WMS + TMS Modülleri', 'Depo Optimizasyonu', 'Gerçek Zamanlı Takip', 'B2B Portal', 'EDI Entegrasyon', 'Cross-Docking'],\r        popular: true\r      },\r      {\r        name: 'Dağıtım Network',\r        price: 2999,\r        period: 'aylık',\r        icon: <TruckOutlined />,\r        features: ['Sınırsız Kullanıcı', 'Komple Lojistik Suite', 'Multi-Depo', 'Filo Yönetimi', 'Global Ticaret', 'Gümrük Entegrasyonu', 'Blockchain Takip'],\r        popular: false\r      }\r    ],\r    service: [\r      {\r        name: 'Hizmet Başlangıç',\r        price: 349,\r        period: 'aylık',\r        icon: <CustomerServiceOutlined />,\r        features: ['3 Kullanıcı', 'CRM + Servis Yönetimi', 'Randevu Sistemi', '5GB Depolama', 'Ticket Sistemi', 'Email Destek'],\r        popular: false\r      },\r      {\r        name: 'Hizmet Professional',\r        price: 749,\r        period: 'aylık',\r        icon: <CustomerServiceOutlined />,\r        features: ['15 Kullanıcı', 'Field Service Management', 'Saha Ekibi Yönetimi', 'SLA Takibi', 'Müşteri Portali', 'Sözleşme Yönetimi', '7/24 Destek'],\r        popular: true\r      },\r      {\r        name: 'Hizmet Enterprise',\r        price: 1799,\r        period: 'aylık',\r        icon: <CustomerServiceOutlined />,\r        features: ['Sınırsız Kullanıcı', 'Komple Service Suite', 'AI Chatbot', 'Omnichannel Destek', 'Knowledge Base', 'API Marketplace', 'White Label'],\r        popular: false\r      }\r    ],\r    default: [\r      {\r        name: 'Startup Paketi',\r        price: 499,\r        period: 'aylık',\r        icon: <RocketOutlined />,\r        features: ['5 Kullanıcı', 'CRM + Stok + Satış', '10GB Depolama', 'Temel Raporlar', 'Email Destek', 'Mobil Uygulama'],\r        popular: false\r      },\r      {\r        name: 'Profesyonel Paket',\r        price: 999,\r        period: 'aylık',\r        icon: <ThunderboltOutlined />,\r        features: ['25 Kullanıcı', 'Tüm ERP Modülleri', '100GB Depolama', 'Gelişmiş Raporlar', '7/24 Destek', 'E-Fatura', 'API Erişimi'],\r        popular: true\r      },\r      {\r        name: 'Kurumsal Paket',\r        price: 2499,\r        period: 'aylık',\r        icon: <TrophyOutlined />,\r        features: ['Sınırsız Kullanıcı', 'Tüm Modüller + Özelleştirme', 'Sınırsız Depolama', 'BI & Analytics', 'Özel Destek', 'White Label', 'SLA'],\r        popular: false\r      }\r    ]\r  };\r  const currentPlans = pricingPlansByType[selectedBusinessType] || pricingPlansByType.default;\r  const testimonials = [\r    {\r      name: 'Ahmet Yılmaz',\r      position: 'Genel Müdür',\r      company: 'TechCorp',\r      avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=1',\r      rating: 5,\r      comment: 'Stocker ERP ile tüm departmanlarımızı tek platformda topladık. Üretimden satışa kadar her şey kontrol altında.'\r    },\r    {\r      name: 'Ayşe Demir',\r      position: 'Operasyon Direktörü',\r      company: 'GlobalTrade',\r      avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=2',\r      rating: 5,\r      comment: 'Stok ve finans modülleri mükemmel entegre. E-fatura sistemi sayesinde muhasebe işlerimiz %80 hızlandı.'\r    },\r    {\r      name: 'Mehmet Kara',\r      position: 'Satış Müdürü',\r      company: 'RetailPlus',\r      avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=3',\r      rating: 5,\r      comment: 'CRM modülü ile müşteri memnuniyetimiz arttı. Tüm şubelerimizi tek yerden yönetiyoruz.'\r    }\r  ];\r  return (\r    <div className=\"modern-landing\">\r      {/* Navigation */}\r      <motion.nav \r        className={`modern-nav ${scrolled ? 'scrolled' : ''}`}\r        initial={{ y: -100 }}\r        animate={{ y: 0 }}\r        transition={{ duration: 0.5 }}\r      >\r        <div className=\"nav-container\">\r          <div className=\"nav-logo\" onClick={() => navigate('/')} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => navigate('/')(e)}>\r            <RocketOutlined style={{ fontSize: 28 }} />\r            <span>Stocker</span>\r          </div>\r          <div className=\"nav-menu\">\r            <a \r              className={activeSection === 'features' ? 'active' : ''}\r              onClick={() => scrollToSection('features')} \r              style={{ cursor: 'pointer' }}\r            >\r              Özellikler\r            </a>\r            <a \r              className={activeSection === 'stats' ? 'active' : ''}\r              onClick={() => scrollToSection('stats')} \r              style={{ cursor: 'pointer' }}\r            >\r              İstatistikler\r            </a>\r            <a \r              className={activeSection === 'comparison' ? 'active' : ''}\r              onClick={() => scrollToSection('comparison')} \r              style={{ cursor: 'pointer' }}\r            >\r              Fiyatlandırma\r            </a>\r            <a \r              className={activeSection === 'testimonials' ? 'active' : ''}\r              onClick={() => scrollToSection('testimonials')} \r              style={{ cursor: 'pointer' }}\r            >\r              Referanslar\r            </a>\r            <a onClick={() => navigate('/blog')} style={{ cursor: 'pointer' }}>Blog</a>\r            <a \r              className={activeSection === 'faq' ? 'active' : ''}\r              onClick={() => scrollToSection('faq')} \r              style={{ cursor: 'pointer' }}\r            >\r              SSS\r            </a>\r            <Button type=\"default\" onClick={() => setShowTenantModal(true)}>Giriş</Button>\r            <Button type=\"primary\" onClick={() => navigate('/register')}>\r              Ücretsiz Başla\r            </Button>\r          </div>\r        </div>\r      </motion.nav>\r      {/* Section Navigation Dots */}\r      <motion.div\r        initial={{ opacity: 0, x: -20 }}\r        animate={{ opacity: 1, x: 0 }}\r        transition={{ delay: 0.5 }}\r        style={{\r          position: 'fixed',\r          left: '40px',\r          top: '50%',\r          transform: 'translateY(-50%)',\r          zIndex: 998,\r          display: 'flex',\r          flexDirection: 'column',\r          gap: '20px'\r        }}\r        className=\"section-navigation\"\r      >\r        {sections.map((section) => (\r          <Tooltip\r            key={section.id}\r            title={`${section.icon} ${section.name}`}\r            placement=\"right\"\r          >\r            <motion.div\r              whileHover={{ scale: 1.2 }}\r              whileTap={{ scale: 0.9 }}\r              onClick={() => scrollToSection(section.id)}\r              style={{\r                width: activeSection === section.id ? '40px' : '12px',\r                height: '12px',\r                borderRadius: '6px',\r                background: activeSection === section.id\r                  ? 'linear-gradient(135deg, #667eea, #764ba2)'\r                  : '#cbd5e0',\r                cursor: 'pointer',\r                transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',\r                boxShadow: activeSection === section.id\r                  ? '0 4px 12px rgba(102, 126, 234, 0.4)'\r                  : 'none'\r              }}\r            />\r          </Tooltip>\r        ))}\r      </motion.div>\r      {/* Progress Bar */}\r      <motion.div\r        initial={{ scaleX: 0 }}\r        animate={{ scaleX: scrollY / (document.documentElement.scrollHeight - window.innerHeight) }}\r        style={{\r          position: 'fixed',\r          top: 0,\r          left: 0,\r          right: 0,\r          height: '3px',\r          background: 'linear-gradient(90deg, #667eea, #764ba2)',\r          transformOrigin: 'left',\r          zIndex: 1001,\r          transition: 'transform 0.1s'\r        }}\r      />\r      {/* Hero Section */}\r      <section id=\"hero\" className=\"hero-section\">\r        <div \r          className=\"hero-background\"\r          style={{\r            transform: `translateY(${scrollY * 0.5}px)`\r          }}\r        >\r          {[...Array(20)].map((_, i) => (\r            <motion.div\r              key={i}\r              className=\"floating-shape\"\r              animate={{\r                y: [0, -30, 0],\r                x: [0, 15, 0],\r                rotate: [0, 360]\r              }}\r              transition={{\r                duration: 15 + i * 2,\r                repeat: Infinity,\r                ease: \"linear\"\r              }}\r              style={{\r                left: `${Math.random() * 100}%`,\r                top: `${Math.random() * 100}%`,\r                animationDelay: `${i * 0.3}s`,\r                transform: `translateY(${scrollY * (0.1 * (i % 3))}px)`\r              }}\r            />\r          ))}\r        </div>\r        <div className=\"hero-content\">\r          <motion.div\r            initial={{ opacity: 0, y: 20 }}\r            animate={{ opacity: 1, y: 0 }}\r            transition={{ duration: 0.8 }}\r          >\r            <div style={{ marginBottom: 20 }}>\r              <Tag color=\"purple\" style={{ padding: '8px 20px', fontSize: '16px' }}>\r                <FireOutlined /> 14 Gün Ücretsiz Deneme\r              </Tag>\r              <Tag color=\"red\" style={{ padding: '8px 20px', fontSize: '16px', marginLeft: '10px' }}>\r                🎉 Yeni\r              </Tag>\r            </div>\r            <Title level={1} className=\"hero-title\">\r              {displayText}\r              <span className=\"cursor-blink\">|</span>\r            </Title>\r            <Title level={2} className=\"hero-subtitle\">\r              Kapsamlı ERP Çözümü ile <span className=\"gradient-text\">Tek Platform</span>da Tüm İşlemler\r            </Title>\r            <Paragraph className=\"hero-description\">\r              CRM, Stok, Satış, Finans, İK ve Üretim modülleriyle işletmenizin tüm süreçlerini \r              tek bir platformdan yönetin. Bulut tabanlı, güvenli ve ölçeklenebilir ERP sistemi.\r            </Paragraph>\r            <Space size=\"large\" className=\"hero-actions\">\r              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\r                <Button \r                  type=\"primary\" \r                  size=\"large\"\r                  icon={<RocketOutlined />}\r                  onClick={() = aria-label=\"rocket outlined\"> navigate('/register')}\r                  className=\"cta-button primary-cta\"\r                >\r                  Hemen Başla - Ücretsiz\r                </Button>\r              </motion.div>\r              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\r                <Button \r                  size=\"large\"\r                  icon={<PlayCircleOutlined />}\r                  className=\"cta-button secondary-cta\"\r                  onClick={() = aria-label=\"play circle outlined\"> {\r                    modal.info({\r                      title: 'Demo Videosu',\r                      content: (\r                        <div>\r                          <p>Demo videosu yakında eklenecek!</p>\r                          <p>Şimdilik <strong>14 gün ücretsiz deneme</strong> ile tüm özellikleri test edebilirsiniz.</p>\r                        </div>\r                      ),\r                      icon: <PlayCircleOutlined style={{ color: '#667eea' }} />,\r                      okText: 'Tamam',\r                      okButtonProps: { type: 'primary' },\r                      centered: true,\r                      maskClosable: true\r                    });\r                  }}\r                >\r                  Demo İzle\r                </Button>\r              </motion.div>\r            </Space>\r            <div className=\"hero-trust\">\r              <Space split={<Divider type=\"vertical\" />}>\r                <span><CheckCircleOutlined /> Kredi kartı gerekmez</span>\r                <span><CheckCircleOutlined /> 5 dakikada kurulum</span>\r                <span><CheckCircleOutlined /> 7/24 destek</span>\r              </Space>\r            </div>\r          </motion.div>\r        </div>\r        {/* Hero Dashboard Preview */}\r        <motion.div \r          className=\"hero-preview\"\r          initial={{ opacity: 0, y: 50 }}\r          animate={{ opacity: 1, y: 0 }}\r          transition={{ delay: 0.5, duration: 0.8 }}\r        >\r          <div className=\"preview-window\">\r            <div className=\"window-controls\">\r              <span></span><span></span><span></span>\r            </div>\r            <div className=\"preview-content\">\r              <div style={{ \r                padding: '40px',\r                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r                borderRadius: '8px',\r                color: 'white',\r                textAlign: 'center'\r              }}>\r                <DashboardOutlined style={{ fontSize: '64px', marginBottom: '20px' }} />\r                <h3 style={{ fontSize: '24px', fontWeight: 600, marginBottom: '10px' }}>\r                  Stocker ERP Dashboard\r                </h3>\r                <p style={{ fontSize: '16px', opacity: 0.9 }}>\r                  6 Ana Modül, Tek Platform\r                </p>\r                <div style={{ \r                  marginTop: '30px',\r                  display: 'grid',\r                  gridTemplateColumns: 'repeat(3, 1fr)',\r                  gap: '15px'\r                }}>\r                  <div style={{ textAlign: 'center' }}>\r                    <TeamOutlined style={{ fontSize: '24px', marginBottom: '5px' }} />\r                    <div style={{ fontSize: '14px', fontWeight: 'bold' }}>CRM</div>\r                  </div>\r                  <div style={{ textAlign: 'center' }}>\r                    <AppstoreOutlined style={{ fontSize: '24px', marginBottom: '5px' }} />\r                    <div style={{ fontSize: '14px', fontWeight: 'bold' }}>Stok</div>\r                  </div>\r                  <div style={{ textAlign: 'center' }}>\r                    <BarChartOutlined style={{ fontSize: '24px', marginBottom: '5px' }} />\r                    <div style={{ fontSize: '14px', fontWeight: 'bold' }}>Satış</div>\r                  </div>\r                  <div style={{ textAlign: 'center' }}>\r                    <DashboardOutlined style={{ fontSize: '24px', marginBottom: '5px' }} />\r                    <div style={{ fontSize: '14px', fontWeight: 'bold' }}>Finans</div>\r                  </div>\r                  <div style={{ textAlign: 'center' }}>\r                    <UserOutlined style={{ fontSize: '24px', marginBottom: '5px' }} />\r                    <div style={{ fontSize: '14px', fontWeight: 'bold' }}>İK</div>\r                  </div>\r                  <div style={{ textAlign: 'center' }}>\r                    <GlobalOutlined style={{ fontSize: '24px', marginBottom: '5px' }} />\r                    <div style={{ fontSize: '14px', fontWeight: 'bold' }}>Üretim</div>\r                  </div>\r                </div>\r              </div>\r            </div>\r          </div>\r        </motion.div>\r      </section>\r      {/* Stats Section */}\r      <section id=\"stats\" className=\"stats-section\" ref={statsRef}>\r        <div className=\"container\">\r          <Row gutter={[32, 32]}>\r            {stats.map((stat, index) => (\r              <Col xs={12} sm={12} md={6} key={index}>\r                <motion.div\r                  initial={{ opacity: 0, y: 20 }}\r                  animate={statsInView ? { opacity: 1, y: 0 } : {}}\r                  transition={{ delay: index * 0.1 }}\r                  className=\"stat-card\"\r                >\r                  <div className=\"stat-icon\">{stat.icon}</div>\r                  <div className=\"stat-value\">\r                    {statsInView && (\r                      <CountUp\r                        end={stat.value}\r                        duration={2.5}\r                        separator=\",\"\r                        decimals={stat.suffix === '%' ? 1 : 0}\r                      />\r                    )}\r                    <span className=\"stat-suffix\">{stat.suffix}</span>\r                  </div>\r                  <div className=\"stat-label\">{stat.label}</div>\r                </motion.div>\r              </Col>\r            ))}\r          </Row>\r        </div>\r      </section>\r      {/* Features Section */}\r      <section id=\"features\" className=\"features-section\" ref={featuresRef}>\r        <div className=\"container\">\r          <motion.div\r            initial={{ opacity: 0 }}\r            animate={featuresInView ? { opacity: 1 } : {}}\r            className=\"section-header\"\r          >\r            <Tag color=\"purple\" className=\"section-tag\">ERP Modülleri</Tag>\r            <Title level={2}>İşletmenizi Dijitalleştiren 6 Ana Modül</Title>\r            <Paragraph>Her departman için özel tasarlanmış, birbiriyle entegre çalışan güçlü modüller</Paragraph>\r          </motion.div>\r          <Row gutter={[24, 24]}>\r            {features.map((feature, index) => (\r              <Col xs={24} md={12} lg={8} key={index}>\r                <motion.div\r                  initial={{ opacity: 0, y: 20 }}\r                  animate={featuresInView ? { opacity: 1, y: 0 } : {}}\r                  transition={{ delay: index * 0.1 }}\r                >\r                  <Card\r                    className=\"feature-card-modern\"\r                    hoverable\r                    style={{\r                      height: '100%',\r                      borderRadius: '16px',\r                      border: 'none',\r                      boxShadow: '0 4px 20px rgba(0,0,0,0.08)',\r                      overflow: 'hidden',\r                      transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)'\r                    }}\r                    onMouseEnter={(e) => {\r                      e.currentTarget.style.transform = 'translateY(-8px)';\r                      e.currentTarget.style.boxShadow = '0 12px 40px rgba(102, 126, 234, 0.15)';\r                    }}\r                    onMouseLeave={(e) => {\r                      e.currentTarget.style.transform = 'translateY(0)';\r                      e.currentTarget.style.boxShadow = '0 4px 20px rgba(0,0,0,0.08)';\r                    }}\r                  >\r                    {/* Gradient Header */}\r                    <div style={{\r                      background: `linear-gradient(135deg, ${feature.color}15, ${feature.color}05)`,\r                      padding: '24px',\r                      marginBottom: '20px',\r                      borderRadius: '12px',\r                      textAlign: 'center'\r                    }}>\r                      <div style={{\r                        fontSize: '48px',\r                        color: feature.color,\r                        marginBottom: '12px'\r                      }}>\r                        {feature.icon}\r                      </div>\r                      <h3 style={{\r                        fontSize: '20px',\r                        fontWeight: '600',\r                        margin: '0 0 8px 0',\r                        color: '#1a202c'\r                      }}>\r                        {feature.title}\r                      </h3>\r                      <p style={{\r                        fontSize: '14px',\r                        color: '#718096',\r                        margin: 0,\r                        lineHeight: '1.5'\r                      }}>\r                        {feature.description}\r                      </p>\r                    </div>\r                    {/* Key Features */}\r                    <div style={{ padding: '0 24px 24px' }}>\r                      <div style={{ marginBottom: '20px' }}>\r                        {feature.highlights.slice(0, 3).map((highlight, i) => (\r                          <div key={i} style={{\r                            marginBottom: '12px',\r                            display: 'flex',\r                            alignItems: 'flex-start',\r                            gap: '10px'\r                          }}>\r                            <CheckCircleOutlined style={{\r                              color: feature.color,\r                              fontSize: '16px',\r                              marginTop: '2px',\r                              flexShrink: 0\r                            }} />\r                            <div>\r                              <div style={{\r                                fontSize: '14px',\r                                fontWeight: '500',\r                                color: '#2d3748',\r                                marginBottom: '2px'\r                              }}>\r                                {highlight.label}\r                              </div>\r                              <div style={{\r                                fontSize: '12px',\r                                color: '#718096',\r                                lineHeight: '1.4'\r                              }}>\r                                {highlight.value}\r                              </div>\r                            </div>\r                          </div>\r                        ))}\r                      </div>\r                      {/* Stats Bar */}\r                      <div style={{\r                        borderTop: '1px solid #e2e8f0',\r                        paddingTop: '16px',\r                        display: 'flex',\r                        justifyContent: 'space-around',\r                        textAlign: 'center'\r                      }}>\r                        {Object.entries(feature.stats).slice(0, 3).map(([key, value], i) => (\r                          <div key={i}>\r                            <div style={{\r                              fontSize: '16px',\r                              fontWeight: '600',\r                              color: feature.color\r                            }}>\r                              {value}\r                            </div>\r                            <div style={{\r                              fontSize: '11px',\r                              color: '#a0aec0',\r                              textTransform: 'capitalize',\r                              marginTop: '2px'\r                            }}>\r                              {key === 'users' ? 'Kullanıcı' : \r                               key === 'efficiency' ? 'Verimlilik' :\r                               key === 'time' ? 'Tasarruf' :\r                               key === 'products' ? 'Ürün' :\r                               key === 'accuracy' ? 'Doğruluk' :\r                               key === 'warehouses' ? 'Depo' :\r                               key === 'invoices' ? 'Fatura' :\r                               key === 'integration' ? 'Entegrasyon' :\r                               key === 'speed' ? 'Hız' :\r                               key === 'transactions' ? 'İşlem' :\r                               key === 'reports' ? 'Rapor' :\r                               key === 'compliance' ? 'Uyumluluk' :\r                               key === 'employees' ? 'Çalışan' :\r                               key === 'automation' ? 'Otomasyon' :\r                               key === 'satisfaction' ? 'Memnuniyet' :\r                               key === 'production' ? 'Üretim' :\r                               key === 'optimization' ? 'Optimizasyon' :\r                               key === 'quality' ? 'Kalite' : key}\r                            </div>\r                          </div>\r                        ))}\r                      </div>\r                      {/* Learn More Button */}\r                      <Button\r                        type=\"link\"\r                        style={{\r                          padding: 0,\r                          marginTop: '16px',\r                          color: feature.color,\r                          fontWeight: '500',\r                          fontSize: '14px'\r                        }}\r                        onClick={() => {\r                          modal.info({\r                            title: feature.title,\r                            width: 600,\r                            content: (\r                              <div>\r                                <p style={{ marginBottom: '20px' }}>{feature.description}</p>\r                                <h4 style={{ marginBottom: '12px', fontWeight: '600' }}>Öne Çıkan Özellikler:</h4>\r                                {feature.highlights.map((highlight, i) => (\r                                  <div key={i} style={{ marginBottom: '12px' }}>\r                                    <strong>{highlight.label}:</strong> {highlight.value}\r                                  </div>\r                                ))}\r                                <Divider />\r                                <div style={{ display: 'flex', justifyContent: 'space-around', textAlign: 'center' }}>\r                                  {Object.entries(feature.stats).map(([key, value], i) => (\r                                    <div key={i}>\r                                      <div style={{ fontSize: '20px', fontWeight: '600', color: feature.color }}>\r                                        {value}\r                                      </div>\r                                      <div style={{ fontSize: '12px', color: '#718096' }}>\r                                        {key === 'users' ? 'Aktif Kullanıcı' : \r                                         key === 'efficiency' ? 'Verimlilik Artışı' :\r                                         key === 'time' ? 'Zaman Tasarrufu' :\r                                         key === 'products' ? 'Yönetilen Ürün' :\r                                         key === 'accuracy' ? 'Envanter Doğruluğu' :\r                                         key === 'warehouses' ? 'Desteklenen Depo' :\r                                         key === 'invoices' ? 'Aylık Fatura' :\r                                         key === 'integration' ? '' :\r                                         key === 'speed' ? 'Daha Hızlı' :\r                                         key === 'transactions' ? 'Yıllık İşlem' :\r                                         key === 'reports' ? 'Hazır Rapor' :\r                                         key === 'compliance' ? 'Yasal Uyumluluk' :\r                                         key === 'employees' ? 'Yönetilen Personel' :\r                                         key === 'automation' ? 'Süreç Otomasyonu' :\r                                         key === 'satisfaction' ? 'Kullanıcı Puanı' :\r                                         key === 'production' ? '' :\r                                         key === 'optimization' ? 'Maliyet Azalması' :\r                                         key === 'quality' ? 'Kalite Oranı' : key}\r                                      </div>\r                                    </div>\r                                  ))}\r                                </div>\r                              </div>\r                            ),\r                            okText: 'Tamam',\r                            okButtonProps: { type: 'primary' },\r                            centered: true\r                          });\r                        }}\r                      >\r                        Detaylı Bilgi <ArrowRightOutlined style={{ fontSize: '12px' }} />\r                      </Button>\r                    </div>\r                  </Card>\r                </motion.div>\r              </Col>\r            ))}\r          </Row>\r          {/* Integration Message */}\r          <motion.div\r            initial={{ opacity: 0, y: 20 }}\r            animate={featuresInView ? { opacity: 1, y: 0 } : {}}\r            transition={{ delay: 0.6 }}\r            style={{\r              marginTop: '60px',\r              textAlign: 'center'\r            }}\r          >\r            <Card\r              style={{\r                background: 'linear-gradient(135deg, #667eea15, #764ba205)',\r                border: 'none',\r                borderRadius: '16px',\r                padding: '32px'\r              }}\r            >\r              <ApiOutlined style={{ fontSize: '48px', color: '#667eea', marginBottom: '16px' }} />\r              <Title level={3} style={{ marginBottom: '12px' }}>Tam Entegre Çalışma</Title>\r              <Paragraph style={{ fontSize: '16px', maxWidth: '600px', margin: '0 auto' }}>\r                Tüm modüller birbiriyle senkronize çalışır. Bir modülde yapılan değişiklik, \r                ilgili tüm modüllerde otomatik olarak güncellenir.\r              </Paragraph>\r            </Card>\r          </motion.div>\r        </div>\r      </section>\r      {/* Testimonials Section */}\r      <section id=\"testimonials\" className=\"testimonials-section\" ref={testimonialsRef}>\r        <div className=\"container\">\r          <div className=\"section-header\">\r            <Tag color=\"purple\" className=\"section-tag\">Referanslar</Tag>\r            <Title level={2}>Müşterilerimiz Ne Diyor?</Title>\r            <Paragraph>Stocker ERP'yi tercih eden işletmelerden geri bildirimler</Paragraph>\r          </div>\r          {/* Client Logos */}\r          <div className=\"client-logos\">\r            <motion.div \r              className=\"logos-container\"\r              initial={{ opacity: 0, y: 20 }}\r              animate={testimonialsInView ? { opacity: 1, y: 0 } : {}}\r              transition={{ duration: 0.6 }}\r            >\r              {[\r                { name: 'TechCorp', bg: '#667eea' },\r                { name: 'GlobalTrade', bg: '#764ba2' },\r                { name: 'RetailPlus', bg: '#f093fb' },\r                { name: 'LogiMove', bg: '#4facfe' },\r                { name: 'ProdFactory', bg: '#43e97b' },\r                { name: 'ServicePro', bg: '#fa709a' }\r              ].map((client, index) => (\r                <motion.div\r                  key={index}\r                  className=\"logo-card\"\r                  whileHover={{ scale: 1.05, y: -5 }}\r                  transition={{ type: \"spring\", stiffness: 300 }}\r                  style={{ animationDelay: `${index * 0.1}s` }}\r                >\r                  <div \r                    className=\"logo-placeholder\"\r                    style={{ background: `linear-gradient(135deg, ${client.bg}20, ${client.bg}10)` }}\r                  >\r                    <span style={{ color: client.bg, fontWeight: 700, fontSize: 18 }}>\r                      {client.name}\r                    </span>\r                  </div>\r                </motion.div>\r              ))}\r            </motion.div>\r          </div>\r          <Row gutter={[32, 32]} style={{ marginTop: 60 }}>\r            {testimonials.map((testimonial, index) => (\r              <Col xs={24} md={8} key={index}>\r                <motion.div\r                  initial={{ opacity: 0, scale: 0.9 }}\r                  animate={testimonialsInView ? { opacity: 1, scale: 1 } : {}}\r                  transition={{ delay: index * 0.1 }}\r                  className=\"testimonial-card-modern\"\r                >\r                  <div className=\"testimonial-header\">\r                    <Avatar \r                      src={testimonial.avatar} \r                      size={64} \r                      style={{ border: '4px solid white', boxShadow: '0 4px 20px rgba(0,0,0,0.1)' }}\r                    />\r                    <Rate disabled defaultValue={testimonial.rating} style={{ marginTop: 12 }} />\r                  </div>\r                  <p className=\"testimonial-comment\">\"{testimonial.comment}\"</p>\r                  <div className=\"testimonial-footer\">\r                    <h4>{testimonial.name}</h4>\r                    <span>{testimonial.position}</span>\r                    <div className=\"company-badge\">{testimonial.company}</div>\r                  </div>\r                </motion.div>\r              </Col>\r            ))}\r          </Row>\r        </div>\r      </section>\r      {/* Comparison Table */}\r      <section id=\"comparison\">\r        <ComparisonTable />\r      </section>\r      {/* FAQ Section */}\r      <section id=\"faq\">\r        <FAQSection />\r      </section>\r      {/* Footer */}\r      <footer className=\"modern-footer\">\r        <div className=\"container\">\r          <Row gutter={[32, 32]}>\r            <Col xs={24} sm={12} lg={6}>\r              <div className=\"footer-brand\">\r                <RocketOutlined /> Stocker\r              </div>\r              <p>Modern işletmeler için dijital dönüşüm platformu</p>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <h4>Ürün</h4>\r              <ul>\r                <li><a href=\"#\">Özellikler</a></li>\r                <li><a href=\"#\">Fiyatlandırma</a></li>\r                <li><a href=\"#\">Entegrasyonlar</a></li>\r              </ul>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <h4>Şirket</h4>\r              <ul>\r                <li><a href=\"#\">Hakkımızda</a></li>\r                <li><a href=\"#\">Kariyer</a></li>\r                <li><a href=\"#\">İletişim</a></li>\r              </ul>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <h4>Destek</h4>\r              <ul>\r                <li><a href=\"#\">Yardım Merkezi</a></li>\r                <li><a href=\"#\">API Dokümantasyon</a></li>\r                <li><a href=\"#\">Durum</a></li>\r              </ul>\r            </Col>\r          </Row>\r          <Divider />\r          <div className=\"footer-bottom\">\r            <p>© 2024 Stocker. Tüm hakları saklıdır.</p>\r            <Space>\r              <a href=\"#\">Gizlilik</a>\r              <a href=\"#\">Şartlar</a>\r              <a href=\"#\">Çerezler</a>\r            </Space>\r          </div>\r        </div>\r      </footer>\r      {/* Scroll to Top Button */}\r      <Affix style={{ position: 'fixed', bottom: 40, right: 40 }}>\r        <Button\r          type=\"primary\"\r          shape=\"circle\"\r          size=\"large\"\r          icon={<ArrowUpOutlined />}\r          onClick={scrollToTop}\r          style={{\r            width: '56px',\r            height: '56px',\r            background: 'linear-gradient(135deg, #667eea, #764ba2)',\r            border: 'none',\r            boxShadow: '0 8px 32px rgba(102, 126, 234, 0.35)',\r            fontSize: '20px',\r            display: showScrollTop ? 'flex' : 'none',\r            alignItems: 'center',\r            justifyContent: 'center'\r          }}\r        / aria-label=\"arrow up outlined\">\r      </Affix>\r      {/* Tenant Login Modal */}\r      <TenantLoginModal\r        visible={showTenantModal}\r        onClose={() => setShowTenantModal(false)}\r      />\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/landing/pages/ModernLanding/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { memo, useMemo } from 'react';\rimport { Card, Row, Col, Statistic, Progress, Badge, Space, Typography, Tooltip, Skeleton } from 'antd';\rimport {\r  ArrowUpOutlined,\r  ArrowDownOutlined,\r  InfoCircleOutlined,\r  SyncOutlined,\r} from '@ant-design/icons';\rimport CountUp from 'react-countup';\rimport { motion } from 'framer-motion';\rconst { Text, Title } = Typography;\rinterface WidgetProps {\r  title: string;\r  value: number;\r  prefix?: string;\r  suffix?: string;\r  trend?: 'up' | 'down' | 'stable';\r  trendValue?: number;\r  icon?: React.ReactNode;\r  color?: string;\r  loading?: boolean;\r  description?: string;\r  onClick?: () => void;\r  progress?: number;\r  extra?: React.ReactNode;\r}\r// Optimize edilmiş StatWidget komponenti\rexport const StatWidget = memo<WidgetProps>(({\r  title,\r  value,\r  prefix,\r  suffix,\r  trend,\r  trendValue,\r  icon,\r  color = '#1890ff',\r  loading = false,\r  description,\r  onClick,\r  progress,\r  extra\r}) => {\r  const trendIcon = useMemo(() => {\r    if (!trend) return null;\r    if (trend === 'up') return <ArrowUpOutlined style={{ color: '#52c41a' }} />;\r    if (trend === 'down') return <ArrowDownOutlined style={{ color: '#ff4d4f' }} />;\r    return null;\r  }, [trend]);\r  const trendColor = useMemo(() => {\r    if (trend === 'up') return '#52c41a';\r    if (trend === 'down') return '#ff4d4f';\r    return '#faad14';\r  }, [trend]);\r  if (loading) {\r    return (\r      <Card className=\"stat-widget-loading\">\r        <Skeleton active paragraph={{ rows: 2 }} />\r      </Card>\r    );\r  }\r  return (\r    <motion.div\r      whileHover={{ scale: 1.02 }}\r      whileTap={{ scale: 0.98 }}\r      transition={{ type: \"spring\", stiffness: 300 }}\r    >\r      <Card\r        className=\"stat-widget\"\r        hoverable={!!onClick}\r        onClick={onClick}\r        style={{\r          borderTop: `3px solid ${color}`,\r          cursor: onClick ? 'pointer' : 'default'\r        }}\r      >\r        <div className=\"widget-header\">\r          <Space>\r            {icon && (\r              <div className=\"widget-icon\" style={{ color, fontSize: 24 }}>\r                {icon}\r              </div>\r            )}\r            <div>\r              <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                {title}\r              </Text>\r              {description && (\r                <Tooltip title={description}>\r                  <InfoCircleOutlined style={{ marginLeft: 8, fontSize: 12 }} />\r                </Tooltip>\r              )}\r            </div>\r          </Space>\r          {extra}\r        </div>\r        <div className=\"widget-value\" style={{ margin: '16px 0' }}>\r          <Space align=\"baseline\">\r            {prefix && <Text style={{ fontSize: 20, color }}>{prefix}</Text>}\r            <Text style={{ fontSize: 32, fontWeight: 700, color }}>\r              <CountUp\r                end={value}\r                duration={1.5}\r                separator=\",\"\r                decimals={suffix === '%' ? 1 : 0}\r              />\r            </Text>\r            {suffix && <Text style={{ fontSize: 20, color }}>{suffix}</Text>}\r          </Space>\r        </div>\r        {(trend || progress !== undefined) && (\r          <div className=\"widget-footer\">\r            {trend && trendValue !== undefined && (\r              <Space style={{ fontSize: 12 }}>\r                {trendIcon}\r                <Text style={{ color: trendColor }}>\r                  {trendValue > 0 ? '+' : ''}{trendValue}%\r                </Text>\r                <Text type=\"secondary\">son 30 gün</Text>\r              </Space>\r            )}\r            {progress !== undefined && (\r              <Progress\r                percent={progress}\r                size=\"small\"\r                strokeColor={color}\r                showInfo={false}\r                style={{ marginTop: 8 }}\r              />\r            )}\r          </div>\r        )}\r      </Card>\r    </motion.div>\r  );\r});\rStatWidget.displayName = 'StatWidget';\r// Mini istatistik widget'ı\rexport const MiniStatWidget = memo<{\r  title: string;\r  value: number | string;\r  icon?: React.ReactNode;\r  color?: string;\r  trend?: 'up' | 'down';\r}>(({ title, value, icon, color = '#1890ff', trend }) => (\r  <div className=\"mini-stat-widget\">\r    <Space size=\"small\">\r      {icon && (\r        <div className=\"mini-icon\" style={{ color, fontSize: 20 }}>\r          {icon}\r        </div>\r      )}\r      <div>\r        <Text type=\"secondary\" style={{ fontSize: 11, display: 'block' }}>\r          {title}\r        </Text>\r        <Space size={4} align=\"baseline\">\r          <Text strong style={{ fontSize: 16 }}>\r            {typeof value === 'number' ? (\r              <CountUp end={value} duration={1} separator=\",\" />\r            ) : value}\r          </Text>\r          {trend && (\r            trend === 'up' \r              ? <ArrowUpOutlined style={{ fontSize: 10, color: '#52c41a' }} />\r              : <ArrowDownOutlined style={{ fontSize: 10, color: '#ff4d4f' }} />\r          )}\r        </Space>\r      </div>\r    </Space>\r  </div>\r));\rMiniStatWidget.displayName = 'MiniStatWidget';\r// Sistem durumu widget'ı\rexport const SystemStatusWidget = memo<{\r  cpu: number;\r  memory: number;\r  disk: number;\r  network: number;\r  loading?: boolean;\r}>(({ cpu, memory, disk, network, loading }) => {\r  const getStatusColor = (value: number) => {\r    if (value < 50) return '#52c41a';\r    if (value < 80) return '#faad14';\r    return '#ff4d4f';\r  };\r  const getStatus = (value: number) => {\r    if (value < 50) return 'success';\r    if (value < 80) return 'warning';\r    return 'error';\r  };\r  if (loading) {\r    return (\r      <Card title=\"Sistem Durumu\" extra={<SyncOutlined spin />}>\r        <Skeleton active paragraph={{ rows: 4 }} />\r      </Card>\r    );\r  }\r  const metrics = [\r    { label: 'CPU', value: cpu, unit: '%' },\r    { label: 'Bellek', value: memory, unit: '%' },\r    { label: 'Disk', value: disk, unit: '%' },\r    { label: 'Network', value: network, unit: 'Mbps' }\r  ];\r  return (\r    <Card \r      title=\"Sistem Durumu\" \r      extra={\r        <Badge \r          status={getStatus(Math.max(cpu, memory, disk))} \r          text=\"Çalışıyor\" \r        />\r      }\r    >\r      <Space direction=\"vertical\" style={{ width: '100%' }} size=\"middle\">\r        {metrics.map((metric) => (\r          <div key={metric.label}>\r            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 4 }}>\r              <Text>{metric.label}</Text>\r              <Text strong>\r                {metric.value}{metric.unit}\r              </Text>\r            </div>\r            <Progress\r              percent={metric.unit === '%' ? metric.value : Math.min(metric.value / 100 * 100, 100)}\r              strokeColor={getStatusColor(metric.value)}\r              size=\"small\"\r              status={metric.value >= 95 ? 'exception' : 'active'}\r            />\r          </div>\r        ))}\r      </Space>\r    </Card>\r  );\r});\rSystemStatusWidget.displayName = 'SystemStatusWidget';\r// Activity widget'ı\rexport const ActivityWidget = memo<{\r  activities: Array<{\r    id: string;\r    type: 'success' | 'error' | 'warning' | 'info';\r    title: string;\r    description?: string;\r    time: string;\r    user?: string;\r  }>;\r  loading?: boolean;\r}>(({ activities, loading }) => {\r  if (loading) {\r    return (\r      <Card title=\"Son Aktiviteler\">\r        <Skeleton active paragraph={{ rows: 5 }} />\r      </Card>\r    );\r  }\r  return (\r    <Card \r      title=\"Son Aktiviteler\"\r      bodyStyle={{ padding: '12px 24px' }}\r      extra={\r        <Badge count={activities.length} style={{ backgroundColor: '#52c41a' }} />\r      }\r    >\r      <div className=\"activity-list\">\r        {activities.map((activity) => (\r          <div key={activity.id} className=\"activity-item\">\r            <Badge \r              status={\r                activity.type === 'success' ? 'success' :\r                activity.type === 'error' ? 'error' :\r                activity.type === 'warning' ? 'warning' :\r                'processing'\r              }\r            />\r            <div className=\"activity-content\">\r              <div>\r                <Text strong>{activity.title}</Text>\r                {activity.description && (\r                  <Text type=\"secondary\" style={{ display: 'block', fontSize: 12 }}>\r                    {activity.description}\r                  </Text>\r                )}\r              </div>\r              <Space size=\"small\" style={{ fontSize: 11 }}>\r                <Text type=\"secondary\">{activity.time}</Text>\r                {activity.user && (\r                  <>\r                    <span>•</span>\r                    <Text type=\"secondary\">{activity.user}</Text>\r                  </>\r                )}\r              </Space>\r            </div>\r          </div>\r        ))}\r      </div>\r    </Card>\r  );\r});\rActivityWidget.displayName = 'ActivityWidget';\r// CSS stilleri için\rconst styles = `\r.stat-widget {\r  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r  border-radius: 12px;\r}\r.stat-widget:hover {\r  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);\r}\r.widget-header {\r  display: flex;\r  justify-content: space-between;\r  align-items: flex-start;\r}\r.widget-icon {\r  width: 40px;\r  height: 40px;\r  display: flex;\r  align-items: center;\r  justify-content: center;\r  border-radius: 8px;\r  background: rgba(24, 144, 255, 0.1);\r}\r.mini-stat-widget {\r  padding: 12px;\r  background: #fafafa;\r  border-radius: 8px;\r  transition: all 0.3s;\r}\r.mini-stat-widget:hover {\r  background: #f0f0f0;\r}\r.activity-list {\r  max-height: 400px;\r  overflow-y: auto;\r}\r.activity-item {\r  display: flex;\r  gap: 12px;\r  padding: 12px 0;\r  border-bottom: 1px solid #f0f0f0;\r}\r.activity-item:last-child {\r  border-bottom: none;\r}\r.activity-content {\r  flex: 1;\r  display: flex;\r  justify-content: space-between;\r  align-items: flex-start;\r}\r`;\r// Style tag ekle\rif (typeof document !== 'undefined' && !document.getElementById('dashboard-widgets-styles')) {\r  const styleTag = document.createElement('style');\r  styleTag.id = 'dashboard-widgets-styles';\r  styleTag.innerHTML = styles;\r  document.head.appendChild(styleTag);\r}\rexport default {\r  StatWidget,\r  MiniStatWidget,\r  SystemStatusWidget,\r  ActivityWidget\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/components/DashboardWidgets.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useRef, useEffect } from 'react';\rimport { Layout, Button, Input, Space, Tooltip, Avatar, Dropdown, Badge, Divider, AutoComplete } from 'antd';\rimport {\r  MenuOutlined,\r  MenuFoldOutlined,\r  MenuUnfoldOutlined,\r  SearchOutlined,\r  FullscreenOutlined,\r  FullscreenExitOutlined,\r  UserOutlined,\r  SettingOutlined,\r  LogoutOutlined,\r  QuestionCircleOutlined,\r  InfoCircleOutlined,\r  ClockCircleOutlined,\r  KeyOutlined,\r  SafetyOutlined,\r  GlobalOutlined,\r  DashboardOutlined,\r  FileTextOutlined,\r  TeamOutlined,\r} from '@ant-design/icons';\rimport { useNavigate, useLocation } from 'react-router-dom';\rimport { useAuthStore } from '@/app/store/auth.store';\rimport { LanguageSwitcher } from '@/components/LanguageSwitcher';\rimport { NotificationBell } from '../../NotificationBell';\rimport { ThemeSwitcher } from '@/core/theme';\rimport './styles.css';\rconst { Header } = Layout;\rconst { Search } = Input;\rinterface MasterHeaderProps {\r  collapsed: boolean;\r  onCollapse: () => void;\r  darkMode: boolean;\r  onDarkModeChange: (value: boolean) => void;\r  fullscreen: boolean;\r  onFullscreenToggle: () => void;\r  onMobileMenuClick: () => void;\r}\rinterface SearchOption {\r  value: string;\r  label: React.ReactNode;\r  category: string;\r  icon: React.ReactNode;\r  path?: string;\r}\rexport const MasterHeader: React.FC<MasterHeaderProps> = ({\r  collapsed,\r  onCollapse,\r  darkMode,\r  onDarkModeChange,\r  fullscreen,\r  onFullscreenToggle,\r  onMobileMenuClick,\r}) => {\r  const navigate = useNavigate();\r  const location = useLocation();\r  const { user, logout } = useAuthStore();\r  const [searchValue, setSearchValue] = useState('');\r  const [searchOptions, setSearchOptions] = useState<SearchOption[]>([]);\r  const [showSearch, setShowSearch] = useState(false);\r  const searchRef = useRef<HTMLDivElement>(null);\r  // Global search options\r  const globalSearchOptions: SearchOption[] = [\r    {\r      value: 'dashboard',\r      label: 'Dashboard',\r      category: 'Sayfalar',\r      icon: <DashboardOutlined />,\r      path: '/master/dashboard',\r    },\r    {\r      value: 'users',\r      label: 'Kullanıcılar',\r      category: 'Sayfalar',\r      icon: <TeamOutlined />,\r      path: '/master/users',\r    },\r    {\r      value: 'reports',\r      label: 'Raporlar',\r      category: 'Sayfalar',\r      icon: <FileTextOutlined />,\r      path: '/master/reports',\r    },\r    {\r      value: 'settings',\r      label: 'Ayarlar',\r      category: 'Sistem',\r      icon: <SettingOutlined />,\r      path: '/master/settings',\r    },\r    {\r      value: 'profile',\r      label: 'Profil',\r      category: 'Kullanıcı',\r      icon: <UserOutlined />,\r      path: '/master/profile',\r    },\r  ];\r  // Filter search options based on input\r  useEffect(() => {\r    if (searchValue) {\r      const filtered = globalSearchOptions.filter(option =>\r        option.label.toString().toLowerCase().includes(searchValue.toLowerCase())\r      );\r      setSearchOptions(filtered);\r    } else {\r      setSearchOptions([]);\r    }\r  }, [searchValue]);\r  // Click outside to close search\r  useEffect(() => {\r    const handleClickOutside = (event: MouseEvent) => {\r      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\r        setShowSearch(false);\r      }\r    };\r    document.addEventListener('mousedown', handleClickOutside);\r    return () => document.removeEventListener('mousedown', handleClickOutside);\r  }, []);\r  const userMenuItems = [\r    {\r      key: 'user-info',\r      label: (\r        <div className=\"user-menu-header\">\r          <Avatar size={48} src={user?.avatar} icon={!user?.avatar && <UserOutlined />} />\r          <div className=\"user-menu-info\">\r            <div className=\"user-menu-name\">{user?.name || user?.userName || 'Admin'}</div>\r            <div className=\"user-menu-email\">{user?.email || 'admin@stocker.com'}</div>\r          </div>\r        </div>\r      ),\r      disabled: true,\r    },\r    {\r      type: 'divider' as const,\r    },\r    {\r      key: 'profile',\r      icon: <UserOutlined />,\r      label: 'Profilim',\r    },\r    {\r      key: 'settings',\r      icon: <SettingOutlined />,\r      label: 'Hesap Ayarları',\r    },\r    {\r      key: 'security',\r      icon: <SafetyOutlined />,\r      label: 'Güvenlik',\r    },\r    {\r      key: 'activity',\r      icon: <ClockCircleOutlined />,\r      label: 'Aktiviteler',\r    },\r    {\r      type: 'divider' as const,\r    },\r    {\r      key: 'help',\r      icon: <QuestionCircleOutlined />,\r      label: 'Yardım & Destek',\r    },\r    {\r      key: 'about',\r      icon: <InfoCircleOutlined />,\r      label: 'Hakkında',\r    },\r    {\r      type: 'divider' as const,\r    },\r    {\r      key: 'logout',\r      icon: <LogoutOutlined />,\r      label: 'Çıkış Yap',\r      danger: true,\r    },\r  ];\r  const handleUserMenuClick = ({ key }: { key: string }) => {\r    switch (key) {\r      case 'logout':\r        logout();\r        navigate('/login');\r        break;\r      case 'profile':\r        navigate('/master/profile');\r        break;\r      case 'settings':\r        navigate('/master/settings');\r        break;\r      case 'security':\r        navigate('/master/security');\r        break;\r      case 'activity':\r        navigate('/master/activity');\r        break;\r      case 'help':\r        navigate('/master/help');\r        break;\r      case 'about':\r        navigate('/master/about');\r        break;\r    }\r  };\r  const handleSearch = (value: string) => {\r    const option = globalSearchOptions.find(opt => opt.value === value);\r    if (option?.path) {\r      navigate(option.path);\r      setSearchValue('');\r      setShowSearch(false);\r    }\r  };\r  const renderSearchOption = (option: SearchOption) => (\r    <div className=\"search-option-item\">\r      <span className=\"search-option-icon\">{option.icon}</span>\r      <div className=\"search-option-content\">\r        <div className=\"search-option-label\">{option.label}</div>\r        <div className=\"search-option-category\">{option.category}</div>\r      </div>\r    </div>\r  );\r  // Breadcrumb for current location\r  const getBreadcrumb = () => {\r    const paths = location.pathname.split('/').filter(p => p);\r    if (paths.length > 1) {\r      return paths[paths.length - 1].charAt(0).toUpperCase() + paths[paths.length - 1].slice(1);\r    }\r    return 'Dashboard';\r  };\r  return (\r    <Header className=\"master-header\">\r      <div className=\"master-header-left\">\r        <Button\r          type=\"text\"\r          icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}\r          onClick={() = aria-label=\"button\"> onCollapse(!collapsed)}\r          className=\"header-menu-trigger desktop-only\"\r        />\r        <Button\r          type=\"text\"\r          icon={<MenuOutlined />}\r          onClick={onMobileMenuClick}\r          className=\"header-menu-trigger mobile-only\"\r        / aria-label=\"menu outlined\">\r        <Divider type=\"vertical\" className=\"header-divider desktop-only\" />\r        <div className=\"header-breadcrumb desktop-only\">\r          <span className=\"breadcrumb-text\">{getBreadcrumb()}</span>\r        </div>\r        <div className=\"header-search-wrapper\" ref={searchRef}>\r          {showSearch ? (\r            <AutoComplete\r              className=\"header-search-autocomplete\"\r              value={searchValue}\r              onChange={setSearchValue}\r              onSelect={handleSearch}\r              options={searchOptions.map(option => ({\r                value: option.value,\r                label: renderSearchOption(option),\r              }))}\r              placeholder=\"Hızlı arama... (Ctrl+K)\"\r              autoFocus\r              allowClear\r              onBlur={() => {\r                setTimeout(() => {\r                  if (!searchValue) setShowSearch(false);\r                }, 200);\r              }}\r            >\r              <Search className=\"header-search\" />\r            </AutoComplete>\r          ) : (\r            <Button\r              type=\"text\"\r              icon={<SearchOutlined />}\r              onClick={() = aria-label=\"search outlined\"> setShowSearch(true)}\r              className=\"header-search-trigger\"\r            >\r              <span className=\"desktop-only\">Hızlı Ara</span>\r              <kbd className=\"search-shortcut desktop-only\">Ctrl+K</kbd>\r            </Button>\r          )}\r        </div>\r      </div>\r      <div className=\"master-header-right\">\r        <Space size=\"small\" className=\"header-actions\">\r          <Tooltip title=\"Yardım Merkezi\">\r            <Button\r              type=\"text\"\r              icon={<QuestionCircleOutlined />}\r              className=\"header-action-btn desktop-only\"\r              onClick={() = aria-label=\"question circle outlined\"> navigate('/master/help')}\r            />\r          </Tooltip>\r          <LanguageSwitcher mode=\"dropdown\" showName={false} />\r          <ThemeSwitcher variant=\"button\" />\r          <Tooltip title={fullscreen ? 'Tam Ekrandan Çık' : 'Tam Ekran'}>\r            <Button\r              type=\"text\"\r              icon={fullscreen ? <FullscreenExitOutlined /> : <FullscreenOutlined />}\r              onClick={onFullscreenToggle}\r              className=\"header-action-btn desktop-only\"\r            / aria-label=\"button\">\r          </Tooltip>\r          <NotificationBell />\r          <Divider type=\"vertical\" className=\"header-divider\" />\r          <Dropdown\r            menu={{ \r              items: userMenuItems, \r              onClick: handleUserMenuClick,\r              className: 'user-dropdown-menu'\r            }}\r            placement=\"bottomRight\"\r            trigger={['click']}\r            overlayClassName=\"user-dropdown-overlay\"\r          >\r            <Button type=\"text\" className=\"header-user-button\">\r              <Space size={8}>\r                <Badge dot status=\"success\" offset={[-6, 6]}>\r                  <Avatar\r                    size={32}\r                    src={user?.avatar}\r                    icon={!user?.avatar && <UserOutlined />}\r                    className=\"user-avatar\"\r                  />\r                </Badge>\r                <div className=\"user-info desktop-only\">\r                  <span className=\"user-name\">{user?.name || user?.userName || 'Admin'}</span>\r                  <span className=\"user-role\">Yönetici</span>\r                </div>\r              </Space>\r            </Button>\r          </Dropdown>\r        </Space>\r      </div>\r    </Header>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/components/Layout/MasterHeader/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useMemo } from 'react';\rimport { Layout, Menu, Button, Drawer, Badge, Tooltip, Input } from 'antd';\rimport { useNavigate, useLocation } from 'react-router-dom';\rimport {\r  MenuFoldOutlined,\r  MenuUnfoldOutlined,\r  SearchOutlined,\r  CloseOutlined,\r  FireOutlined,\r  RocketOutlined,\r  QuestionCircleOutlined,\r  BookOutlined,\r} from '@ant-design/icons';\rimport { menuItems } from './menuItems';\rimport './styles.css';\rconst { Sider } = Layout;\rconst { Search } = Input;\rinterface MasterSidebarProps {\r  collapsed: boolean;\r  onCollapse: (collapsed: boolean) => void;\r  mobileDrawerOpen: boolean;\r  onMobileDrawerClose: () => void;\r}\rexport const MasterSidebar: React.FC<MasterSidebarProps> = ({\r  collapsed,\r  onCollapse,\r  mobileDrawerOpen,\r  onMobileDrawerClose,\r}) => {\r  const navigate = useNavigate();\r  const location = useLocation();\r  const [searchValue, setSearchValue] = useState('');\r  const [showSearch, setShowSearch] = useState(false);\r  // Filter menu items based on search\r  const filteredMenuItems = useMemo(() => {\r    if (!searchValue) return menuItems;\r    const filterItems = (items: any[]): any[] => {\r      return items.reduce((acc, item) => {\r        const labelMatch = item.label?.toLowerCase().includes(searchValue.toLowerCase());\r        if (item.children) {\r          const filteredChildren = filterItems(item.children);\r          if (filteredChildren.length > 0) {\r            acc.push({ ...item, children: filteredChildren });\r          } else if (labelMatch) {\r            acc.push(item);\r          }\r        } else if (labelMatch) {\r          acc.push(item);\r        }\r        return acc;\r      }, []);\r    };\r    return filterItems(menuItems);\r  }, [searchValue]);\r  const handleMenuClick = ({ key }: { key: string }) => {\r    if (key.startsWith('/')) {\r      navigate(key);\r      onMobileDrawerClose();\r      setSearchValue('');\r      setShowSearch(false);\r    }\r  };\r  const getActiveKeys = () => {\r    const path = location.pathname;\r    const activeKeys = [];\r    // Find parent menu keys for active item\r    menuItems.forEach(item => {\r      if (item.children) {\r        const hasActiveChild = item.children.some((child: any) => child.key === path);\r        if (hasActiveChild) {\r          activeKeys.push(item.key);\r        }\r      }\r    });\r    return activeKeys;\r  };\r  const sidebarHeader = (\r    <div className=\"sidebar-header\">\r      <div className=\"sidebar-logo\">\r        {collapsed ? (\r          <div className=\"logo-collapsed\">\r            <Tooltip title=\"Stoocker Pro\" placement=\"right\">\r              <FireOutlined className=\"logo-icon\" />\r            </Tooltip>\r          </div>\r        ) : (\r          <div className=\"logo-expanded\">\r            <FireOutlined className=\"logo-icon\" />\r            <div className=\"logo-info\">\r              <span className=\"logo-text\">Stoocker</span>\r              <span className=\"logo-version\">v3.0.0</span>\r            </div>\r            <Badge \r              status=\"success\" \r              text=\"Pro\" \r              className=\"logo-badge\"\r            />\r          </div>\r        )}\r      </div>\r      {!collapsed && (\r        <div className=\"sidebar-toggle-internal\">\r          <Button\r            type=\"text\"\r            icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}\r            onClick={() = aria-label=\"button\"> onCollapse(!collapsed)}\r            className=\"toggle-btn\"\r          />\r        </div>\r      )}\r    </div>\r  );\r  const sidebarSearch = !collapsed && (\r    <div className={`sidebar-search ${showSearch ? 'active' : ''}`}>\r      {showSearch ? (\r        <Search\r          placeholder=\"Menüde ara...\"\r          value={searchValue}\r          onChange={(e) => setSearchValue(e.target.value)}\r          onBlur={() => {\r            if (!searchValue) {\r              setShowSearch(false);\r            }\r          }}\r          autoFocus\r          allowClear\r          size=\"small\"\r          prefix={<SearchOutlined />}\r          className=\"search-input\"\r        />\r      ) : (\r        <Button\r          type=\"text\"\r          icon={<SearchOutlined />}\r          onClick={() = aria-label=\"search outlined\"> setShowSearch(true)}\r          className=\"search-trigger\"\r          block\r        >\r          Hızlı Arama\r        </Button>\r      )}\r    </div>\r  );\r  const sidebarFooter = !collapsed && (\r    <div className=\"sidebar-footer\">\r      <div className=\"sidebar-card gradient-card\">\r        <div className=\"card-content\">\r          <div className=\"card-icon\">\r            <RocketOutlined />\r          </div>\r          <div className=\"card-info\">\r            <h4>Premium Özellikler</h4>\r            <p>Tüm özelliklere erişin</p>\r          </div>\r        </div>\r        <Button type=\"primary\" size=\"small\" block className=\"card-btn\">\r          Yükselt\r        </Button>\r      </div>\r      <div className=\"sidebar-actions\">\r        <Tooltip title=\"Yardım Merkezi\">\r          <Button\r            type=\"text\"\r            icon={<QuestionCircleOutlined />}\r            className=\"action-btn\"\r          / aria-label=\"question circle outlined\">\r        </Tooltip>\r        <Tooltip title=\"Dokümantasyon\">\r          <Button\r            type=\"text\"\r            icon={<BookOutlined />}\r            className=\"action-btn\"\r          / aria-label=\"book outlined\">\r        </Tooltip>\r      </div>\r    </div>\r  );\r  const sidebarContent = (\r    <>\r      {sidebarHeader}\r      {sidebarSearch}\r      <div className=\"sidebar-menu-wrapper\">\r        <Menu\r          mode=\"inline\"\r          selectedKeys={[location.pathname]}\r          defaultOpenKeys={getActiveKeys()}\r          items={filteredMenuItems}\r          onClick={handleMenuClick}\r          className=\"master-sidebar-menu\"\r        />\r      </div>\r      {sidebarFooter}\r    </>\r  );\r  const mobileHeader = (\r    <div className=\"mobile-drawer-header\">\r      <div className=\"mobile-logo\">\r        <FireOutlined className=\"logo-icon\" />\r        <span className=\"logo-text\">Stoocker</span>\r      </div>\r      <Button\r        type=\"text\"\r        icon={<CloseOutlined />}\r        onClick={onMobileDrawerClose}\r        className=\"close-btn\"\r      / aria-label=\"close outlined\">\r    </div>\r  );\r  return (\r    <>\r      {/* Desktop Sidebar */}\r      <Sider\r        trigger={null}\r        collapsible\r        collapsed={collapsed}\r        width={280}\r        collapsedWidth={80}\r        className=\"master-sidebar desktop-sidebar\"\r        breakpoint=\"lg\"\r        onBreakpoint={(broken) => {\r          if (broken) {\r            onCollapse(true);\r          }\r        }}\r      >\r        {sidebarContent}\r      </Sider>\r      {/* Mobile Drawer */}\r      <Drawer\r        title={null}\r        placement=\"left\"\r        onClose={onMobileDrawerClose}\r        open={mobileDrawerOpen}\r        className=\"mobile-sidebar-drawer\"\r        width={320}\r        closeIcon={null}\r        headerStyle={{ padding: 0 }}\r      >\r        {mobileHeader}\r        <div className=\"mobile-search\">\r          <Search\r            placeholder=\"Menüde ara...\"\r            value={searchValue}\r            onChange={(e) => setSearchValue(e.target.value)}\r            allowClear\r            prefix={<SearchOutlined />}\r          />\r        </div>\r        <Menu\r          mode=\"inline\"\r          selectedKeys={[location.pathname]}\r          defaultOpenKeys={getActiveKeys()}\r          items={filteredMenuItems}\r          onClick={handleMenuClick}\r          className=\"mobile-menu\"\r        />\r        <div className=\"mobile-footer\">\r          <Button type=\"primary\" block size=\"large\" className=\"upgrade-btn\">\r            <RocketOutlined /> Premium'a Geç\r          </Button>\r        </div>\r      </Drawer>\r    </>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/components/Layout/MasterSidebar/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect, useRef } from 'react';\rimport { Badge, Button, Dropdown, Tabs, Empty, List, Avatar, Tag, Space, Tooltip, Spin } from 'antd';\rimport {\r  BellOutlined,\r  BellFilled,\r  CheckOutlined,\r  CheckCircleOutlined,\r  CloseOutlined,\r  DeleteOutlined,\r  InfoCircleOutlined,\r  WarningOutlined,\r  ExclamationCircleOutlined,\r  MessageOutlined,\r  UserOutlined,\r  SettingOutlined,\r  GiftOutlined,\r  HeartOutlined,\r  StarOutlined,\r  ClockCircleOutlined,\r  EyeOutlined,\r  EyeInvisibleOutlined,\r} from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport './notification-styles.css';\rconst { TabPane } = Tabs;\rexport interface Notification {\r  id: string;\r  type: 'info' | 'success' | 'warning' | 'error' | 'message' | 'system';\r  title: string;\r  description: string;\r  timestamp: Date;\r  read: boolean;\r  avatar?: string;\r  icon?: React.ReactNode;\r  actionUrl?: string;\r  priority?: 'low' | 'medium' | 'high' | 'urgent';\r  sender?: string;\r  category?: string;\r}\r// Mock notifications data\rconst mockNotifications: Notification[] = [\r  {\r    id: '1',\r    type: 'success',\r    title: 'Yeni Kullanıcı Kaydı',\r    description: 'Ahmet Yılmaz sisteme başarıyla kaydedildi.',\r    timestamp: new Date(Date.now() - 1000 * 60 * 5), // 5 dakika önce\r    read: false,\r    priority: 'high',\r    sender: 'Sistem',\r    category: 'user',\r  },\r  {\r    id: '2',\r    type: 'warning',\r    title: 'Disk Alanı Uyarısı',\r    description: 'Sunucu disk alanı %85 doluluk oranına ulaştı.',\r    timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30 dakika önce\r    read: false,\r    priority: 'urgent',\r    sender: 'Sistem Monitörü',\r    category: 'system',\r  },\r  {\r    id: '3',\r    type: 'message',\r    title: 'Yeni Mesaj',\r    description: 'Mehmet Öz: Toplantı notlarını paylaşabilir misiniz?',\r    timestamp: new Date(Date.now() - 1000 * 60 * 60), // 1 saat önce\r    read: true,\r    avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=mehmet',\r    sender: 'Mehmet Öz',\r    category: 'message',\r  },\r  {\r    id: '4',\r    type: 'info',\r    title: 'Sistem Güncellemesi',\r    description: 'v2.5.0 sürümü başarıyla yüklendi.',\r    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2 saat önce\r    read: true,\r    priority: 'low',\r    sender: 'DevOps',\r    category: 'system',\r  },\r  {\r    id: '5',\r    type: 'error',\r    title: 'Ödeme Hatası',\r    description: 'Kredi kartı işlemi başarısız oldu.',\r    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 3), // 3 saat önce\r    read: false,\r    priority: 'urgent',\r    sender: 'Ödeme Sistemi',\r    category: 'payment',\r  },\r];\rexport const NotificationBell: React.FC = () => {\r  const navigate = useNavigate();\r  const [visible, setVisible] = useState(false);\r  const [notifications, setNotifications] = useState<Notification[]>(mockNotifications);\r  const [loading, setLoading] = useState(false);\r  const [activeTab, setActiveTab] = useState('all');\r  const [animateBell, setAnimateBell] = useState(false);\r  const dropdownRef = useRef<HTMLDivElement>(null);\r  // Calculate unread count\r  const unreadCount = notifications.filter(n => !n.read).length;\r  const unreadUrgent = notifications.filter(n => !n.read && n.priority === 'urgent').length;\r  // Animate bell on new notification\r  useEffect(() => {\r    if (unreadCount > 0) {\r      const interval = setInterval(() => {\r        setAnimateBell(true);\r        setTimeout(() => setAnimateBell(false), 1000);\r      }, 5000);\r      return () => clearInterval(interval);\r    }\r  }, [unreadCount]);\r  // Filter notifications by tab\r  const getFilteredNotifications = () => {\r    switch (activeTab) {\r      case 'unread':\r        return notifications.filter(n => !n.read);\r      case 'messages':\r        return notifications.filter(n => n.category === 'message');\r      case 'system':\r        return notifications.filter(n => n.category === 'system');\r      default:\r        return notifications;\r    }\r  };\r  // Mark notification as read\r  const markAsRead = (id: string) => {\r    setNotifications(prev =>\r      prev.map(n => (n.id === id ? { ...n, read: true } : n))\r    );\r  };\r  // Mark all as read\r  const markAllAsRead = () => {\r    setNotifications(prev => prev.map(n => ({ ...n, read: true })));\r  };\r  // Delete notification\r  const deleteNotification = (id: string) => {\r    setNotifications(prev => prev.filter(n => n.id !== id));\r  };\r  // Clear all notifications\r  const clearAll = () => {\r    setNotifications([]);\r    setVisible(false);\r  };\r  // Get icon by type\r  const getNotificationIcon = (notification: Notification) => {\r    if (notification.icon) return notification.icon;\r    switch (notification.type) {\r      case 'success':\r        return <CheckCircleOutlined style={{ color: 'var(--color-success)' }} />;\r      case 'warning':\r        return <ExclamationCircleOutlined style={{ color: 'var(--color-warning)' }} />;\r      case 'error':\r        return <CloseOutlined style={{ color: 'var(--color-error)' }} />;\r      case 'message':\r        return <MessageOutlined style={{ color: 'var(--color-primary)' }} />;\r      case 'system':\r        return <SettingOutlined style={{ color: 'var(--color-info)' }} />;\r      default:\r        return <InfoCircleOutlined style={{ color: 'var(--color-info)' }} />;\r    }\r  };\r  // Get priority color\r  const getPriorityColor = (priority?: string) => {\r    switch (priority) {\r      case 'urgent':\r        return 'red';\r      case 'high':\r        return 'orange';\r      case 'medium':\r        return 'blue';\r      case 'low':\r        return 'default';\r      default:\r        return 'default';\r    }\r  };\r  // Format timestamp\r  const formatTime = (date: Date) => {\r    const now = new Date();\r    const diff = now.getTime() - date.getTime();\r    const minutes = Math.floor(diff / 60000);\r    const hours = Math.floor(diff / 3600000);\r    const days = Math.floor(diff / 86400000);\r    if (minutes < 1) return 'Şimdi';\r    if (minutes < 60) return `${minutes} dakika önce`;\r    if (hours < 24) return `${hours} saat önce`;\r    if (days < 7) return `${days} gün önce`;\r    return date.toLocaleDateString('tr-TR');\r  };\r  // Notification list item\r  const renderNotification = (notification: Notification) => (\r    <List.Item\r      key={notification.id}\r      className={`notification-item ${!notification.read ? 'unread' : ''}`}\r      onClick={() => {\r        markAsRead(notification.id);\r        if (notification.actionUrl) {\r          navigate(notification.actionUrl);\r          setVisible(false);\r        }\r      }}\r      actions={[\r        <Tooltip title={notification.read ? 'Okunmadı olarak işaretle' : 'Okundu olarak işaretle'}>\r          <Button\r            type=\"text\"\r            size=\"small\"\r            icon={notification.read ? <EyeInvisibleOutlined /> : <EyeOutlined />}\r            onClick={(e) = aria-label=\"button\"> {\r              e.stopPropagation();\r              markAsRead(notification.id);\r            }}\r          />\r        </Tooltip>,\r        <Tooltip title=\"Sil\">\r          <Button\r            type=\"text\"\r            size=\"small\"\r            danger\r            icon={<DeleteOutlined />}\r            onClick={(e) = aria-label=\"delete outlined\"> {\r              e.stopPropagation();\r              deleteNotification(notification.id);\r            }}\r          />\r        </Tooltip>,\r      ]}\r    >\r      <List.Item.Meta\r        avatar={\r          notification.avatar ? (\r            <Avatar src={notification.avatar} />\r          ) : (\r            <Avatar icon={getNotificationIcon(notification)} className=\"notification-avatar\" />\r          )\r        }\r        title={\r          <Space>\r            <span className=\"notification-title\">{notification.title}</span>\r            {notification.priority && (\r              <Tag color={getPriorityColor(notification.priority)} className=\"priority-tag\">\r                {notification.priority === 'urgent' ? 'Acil' : \r                 notification.priority === 'high' ? 'Yüksek' :\r                 notification.priority === 'medium' ? 'Orta' : 'Düşük'}\r              </Tag>\r            )}\r          </Space>\r        }\r        description={\r          <div className=\"notification-content\">\r            <p className=\"notification-description\">{notification.description}</p>\r            <div className=\"notification-meta\">\r              <span className=\"notification-time\">\r                <ClockCircleOutlined /> {formatTime(notification.timestamp)}\r              </span>\r              {notification.sender && (\r                <span className=\"notification-sender\">• {notification.sender}</span>\r              )}\r            </div>\r          </div>\r        }\r      />\r    </List.Item>\r  );\r  // Dropdown content\r  const dropdownContent = (\r    <div className=\"notification-dropdown\" ref={dropdownRef}>\r      <div className=\"notification-header\">\r        <h3>Bildirimler</h3>\r        <Space>\r          {unreadCount > 0 && (\r            <Button\r              type=\"text\"\r              size=\"small\"\r              icon={<CheckOutlined />}\r              onClick={markAllAsRead}\r             aria-label=\"check outlined\">\r              Tümünü Okundu İşaretle\r            </Button>\r          )}\r          <Button\r            type=\"text\"\r            size=\"small\"\r            danger\r            icon={<DeleteOutlined />}\r            onClick={clearAll}\r           aria-label=\"delete outlined\">\r            Tümünü Temizle\r          </Button>\r        </Space>\r      </div>\r      <Tabs \r        activeKey={activeTab} \r        onChange={setActiveTab}\r        className=\"notification-tabs\"\r        size=\"small\"\r      >\r        <TabPane \r          tab={\r            <span>\r              Tümü\r              {notifications.length > 0 && (\r                <Badge count={notifications.length} className=\"tab-badge\" />\r              )}\r            </span>\r          } \r          key=\"all\" \r        />\r        <TabPane \r          tab={\r            <span>\r              Okunmamış\r              {unreadCount > 0 && (\r                <Badge count={unreadCount} className=\"tab-badge\" status=\"error\" />\r              )}\r            </span>\r          } \r          key=\"unread\" \r        />\r        <TabPane tab=\"Mesajlar\" key=\"messages\" />\r        <TabPane tab=\"Sistem\" key=\"system\" />\r      </Tabs>\r      <div className=\"notification-list\">\r        {loading ? (\r          <div className=\"notification-loading\">\r            <Spin tip=\"Yükleniyor...\" />\r          </div>\r        ) : getFilteredNotifications().length > 0 ? (\r          <List\r            dataSource={getFilteredNotifications()}\r            renderItem={renderNotification}\r          />\r        ) : (\r          <Empty\r            image={Empty.PRESENTED_IMAGE_SIMPLE}\r            description={\r              activeTab === 'unread' \r                ? 'Okunmamış bildirim yok' \r                : 'Bildirim yok'\r            }\r            className=\"notification-empty\"\r          />\r        )}\r      </div>\r      <div className=\"notification-footer\">\r        <Button \r          type=\"link\" \r          block\r          onClick={() => {\r            navigate('/master/notifications');\r            setVisible(false);\r          }}\r        >\r          Tüm Bildirimleri Görüntüle\r        </Button>\r      </div>\r    </div>\r  );\r  return (\r    <Dropdown\r      trigger={['click']}\r      open={visible}\r      onOpenChange={setVisible}\r      dropdownRender={() => dropdownContent}\r      placement=\"bottomRight\"\r      overlayClassName=\"notification-dropdown-overlay\"\r      getPopupContainer={() => document.body}\r    >\r      <Badge \r        count={unreadCount} \r        dot={unreadUrgent > 0}\r        offset={[-2, 2]}\r      >\r        <Button\r          type=\"text\"\r          icon={\r            visible ? (\r              <BellFilled className={`bell-icon ${animateBell ? 'bell-animate' : ''}`} / aria-label=\"button\">\r            ) : (\r              <BellOutlined className={`bell-icon ${animateBell ? 'bell-animate' : ''}`} />\r            )\r          }\r          className=\"notification-bell-btn\"\r        />\r      </Badge>\r    </Dropdown>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/components/NotificationBell.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect, useRef } from 'react';\rimport './notification-panel-modern.css';\rinterface NotificationPanelProps {\r  isOpen: boolean;\r  onClose: () => void;\r}\rinterface Notification {\r  id: string;\r  title: string;\r  message: string;\r  type: 'success' | 'error' | 'warning' | 'info';\r  timestamp: Date;\r  read: boolean;\r  category: string;\r}\r// Mock notifications data\rconst mockNotifications: Notification[] = [\r  {\r    id: '1',\r    title: 'Yeni Kiracı Kaydı',\r    message: 'ABC Teknoloji firması sisteme kayıt oldu.',\r    type: 'success',\r    timestamp: new Date(Date.now() - 1000 * 60 * 5), // 5 minutes ago\r    read: false,\r    category: 'tenant'\r  },\r  {\r    id: '2',\r    title: 'Ödeme Alındı',\r    message: 'XYZ Ltd. firmasından 5000 TL ödeme alındı.',\r    type: 'info',\r    timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30 minutes ago\r    read: false,\r    category: 'payment'\r  },\r  {\r    id: '3',\r    title: 'Sistem Uyarısı',\r    message: 'Disk kullanımı %85 seviyesine ulaştı.',\r    type: 'warning',\r    timestamp: new Date(Date.now() - 1000 * 60 * 60), // 1 hour ago\r    read: true,\r    category: 'system'\r  },\r  {\r    id: '4',\r    title: 'Güvenlik Bildirimi',\r    message: 'Başarısız giriş denemesi tespit edildi.',\r    type: 'error',\r    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2 hours ago\r    read: true,\r    category: 'security'\r  },\r  {\r    id: '5',\r    title: 'Yedekleme Tamamlandı',\r    message: 'Günlük otomatik yedekleme başarıyla tamamlandı.',\r    type: 'success',\r    timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24), // 1 day ago\r    read: true,\r    category: 'system'\r  }\r];\rexport const NotificationPanel: React.FC<NotificationPanelProps> = ({ isOpen, onClose }) => {\r  const [notifications, setNotifications] = useState<Notification[]>(mockNotifications);\r  const [filter, setFilter] = useState<'all' | 'unread'>('all');\r  const panelRef = useRef<HTMLDivElement>(null);\r  // Close panel when clicking outside\r  useEffect(() => {\r    const handleClickOutside = (event: MouseEvent) => {\r      if (panelRef.current && !panelRef.current.contains(event.target as Node)) {\r        const bellButton = document.querySelector('.notification-bell-button');\r        if (bellButton && !bellButton.contains(event.target as Node)) {\r          onClose();\r        }\r      }\r    };\r    if (isOpen) {\r      document.addEventListener('mousedown', handleClickOutside);\r    }\r    return () => {\r      document.removeEventListener('mousedown', handleClickOutside);\r    };\r  }, [isOpen, onClose]);\r  const filteredNotifications = filter === 'unread' \r    ? notifications.filter(n => !n.read)\r    : notifications;\r  const markAsRead = (id: string) => {\r    setNotifications(prev => \r      prev.map(n => n.id === id ? { ...n, read: true } : n)\r    );\r  };\r  const markAllAsRead = () => {\r    setNotifications(prev => \r      prev.map(n => ({ ...n, read: true }))\r    );\r  };\r  const deleteNotification = (id: string) => {\r    setNotifications(prev => prev.filter(n => n.id !== id));\r  };\r  const clearAll = () => {\r    setNotifications([]);\r  };\r  const formatTime = (date: Date) => {\r    const now = new Date();\r    const diff = now.getTime() - date.getTime();\r    const minutes = Math.floor(diff / 60000);\r    const hours = Math.floor(minutes / 60);\r    const days = Math.floor(hours / 24);\r    if (minutes < 1) return 'Az önce';\r    if (minutes < 60) return `${minutes} dakika önce`;\r    if (hours < 24) return `${hours} saat önce`;\r    if (days === 1) return 'Dün';\r    if (days < 7) return `${days} gün önce`;\r    return date.toLocaleDateString('tr-TR');\r  };\r  const getIcon = (type: string) => {\r    switch (type) {\r      case 'success': return '✅';\r      case 'error': return '❌';\r      case 'warning': return '⚠️';\r      case 'info': return 'ℹ️';\r      default: return '📌';\r    }\r  };\r  if (!isOpen) return null;\r  return (\r    <div className=\"notification-panel\" ref={panelRef}>\r      {/* Header */}\r      <div className=\"panel-header\">\r        <h3>Bildirimler</h3>\r        <button className=\"close-btn\" onClick={onClose}>\r          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\">\r            <path d=\"M6 6L18 18M6 18L18 6\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\"/>\r          </svg>\r        </button>\r      </div>\r      {/* Filter Tabs */}\r      <div className=\"filter-tabs\">\r        <button \r          className={filter === 'all' ? 'active' : ''} \r          onClick={() => setFilter('all')}\r        >\r          Tümü ({notifications.length})\r        </button>\r        <button \r          className={filter === 'unread' ? 'active' : ''} \r          onClick={() => setFilter('unread')}\r        >\r          Okunmamış ({notifications.filter(n => !n.read).length})\r        </button>\r      </div>\r      {/* Actions */}\r      <div className=\"panel-actions\">\r        <button onClick={markAllAsRead} className=\"action-btn\">\r          Tümünü Okundu İşaretle\r        </button>\r        <button onClick={clearAll} className=\"action-btn danger\">\r          Tümünü Temizle\r        </button>\r      </div>\r      {/* Notifications List */}\r      <div className=\"notifications-list\">\r        {filteredNotifications.length === 0 ? (\r          <div className=\"empty-state\">\r            <span className=\"empty-icon\">📭</span>\r            <p>Bildirim bulunmuyor</p>\r          </div>\r        ) : (\r          filteredNotifications.map(notification => (\r            <div \r              key={notification.id} \r              className={`notification-item ${!notification.read ? 'unread' : ''} ${notification.type}`}\r              onClick={() => markAsRead(notification.id)}\r             role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => markAsRead(notification.id)(e)}>\r              <span className=\"notification-icon\">{getIcon(notification.type)}</span>\r              <div className=\"notification-content\">\r                <h4>{notification.title}</h4>\r                <p>{notification.message}</p>\r                <span className=\"notification-time\">{formatTime(notification.timestamp)}</span>\r              </div>\r              <button \r                className=\"delete-btn\"\r                onClick={(e) => {\r                  e.stopPropagation();\r                  deleteNotification(notification.id);\r                }}\r              >\r                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\">\r                  <path d=\"M6 6L18 18M6 18L18 6\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\"/>\r                </svg>\r              </button>\r            </div>\r          ))\r        )}\r      </div>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/components/NotificationPanel.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { memo, useMemo } from 'react';\rimport {\r  Card,\r  Tag,\r  Avatar,\r  Space,\r  Button,\r  Dropdown,\r  Progress,\r  Typography,\r  Tooltip,\r  Badge,\r} from 'antd';\rimport {\r  UserOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  LoginOutlined,\r  LockOutlined,\r  UnlockOutlined,\r  MoreOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r  GlobalOutlined,\r  DollarOutlined,\r  RiseOutlined,\r  FallOutlined,\r} from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport CountUp from 'react-countup';\rconst { Text, Title } = Typography;\rconst { Meta } = Card;\rinterface TenantCardProps {\r  tenant: {\r    id: string;\r    name: string;\r    domain: string;\r    email: string;\r    plan: string;\r    status: string;\r    userCount: number;\r    maxUsers: number;\r    storageUsed: number;\r    maxStorage: number;\r    revenue: number;\r    growth: number;\r    modules: string[];\r  };\r  onEdit: (tenant: any) => void;\r  onDelete: (id: string) => void;\r  onToggleStatus: (id: string) => void;\r  onLoginAs: (tenant: any) => void;\r  onViewDetails: (tenant: any) => void;\r}\rexport const TenantCard: React.FC<TenantCardProps> = memo(({\r  tenant,\r  onEdit,\r  onDelete,\r  onToggleStatus,\r  onLoginAs,\r  onViewDetails,\r}) => {\r  // Memoize expensive calculations\r  const storagePercentage = useMemo(() => \r    Math.round((tenant.storageUsed / tenant.maxStorage) * 100),\r    [tenant.storageUsed, tenant.maxStorage]\r  );\r  const userPercentage = useMemo(() => \r    Math.round((tenant.userCount / tenant.maxUsers) * 100),\r    [tenant.userCount, tenant.maxUsers]\r  );\r  const statusColor = useMemo(() => {\r    const colors: Record<string, string> = {\r      active: 'success',\r      suspended: 'error',\r      pending: 'warning',\r      expired: 'default',\r    };\r    return colors[tenant.status] || 'default';\r  }, [tenant.status]);\r  const planColor = useMemo(() => {\r    const colors: Record<string, string> = {\r      Enterprise: 'purple',\r      Professional: 'blue',\r      Starter: 'green',\r      Free: 'default',\r    };\r    return colors[tenant.plan] || 'default';\r  }, [tenant.plan]);\r  const menuItems = useMemo(() => [\r    {\r      key: 'view',\r      label: 'Detayları Görüntüle',\r      icon: <UserOutlined />,\r      onClick: () => onViewDetails(tenant),\r    },\r    {\r      key: 'login',\r      label: 'Tenant Olarak Giriş',\r      icon: <LoginOutlined />,\r      onClick: () => onLoginAs(tenant),\r    },\r    {\r      key: 'edit',\r      label: 'Düzenle',\r      icon: <EditOutlined />,\r      onClick: () => onEdit(tenant),\r    },\r    {\r      key: 'toggle',\r      label: tenant.status === 'active' ? 'Askıya Al' : 'Aktifleştir',\r      icon: tenant.status === 'active' ? <LockOutlined /> : <UnlockOutlined />,\r      onClick: () => onToggleStatus(tenant.id),\r    },\r    { type: 'divider' },\r    {\r      key: 'delete',\r      label: 'Sil',\r      icon: <DeleteOutlined />,\r      danger: true,\r      onClick: () => onDelete(tenant.id),\r    },\r  ], [tenant, onViewDetails, onLoginAs, onEdit, onToggleStatus, onDelete]);\r  return (\r    <motion.div\r      initial={{ opacity: 0, y: 20 }}\r      animate={{ opacity: 1, y: 0 }}\r      transition={{ duration: 0.3 }}\r      whileHover={{ y: -8 }}\r    >\r      <Card\r        className=\"tenant-card\"\r        actions={[\r          <Button type=\"text\" icon={<EditOutlined />} onClick={() = aria-label=\"edit outlined\"> onEdit(tenant)}>\r            Düzenle\r          </Button>,\r          <Button type=\"text\" icon={<LoginOutlined />} onClick={() = aria-label=\"login outlined\"> onLoginAs(tenant)}>\r            Giriş\r          </Button>,\r          <Dropdown menu={{ items: menuItems }} trigger={['click']}>\r            <Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r          </Dropdown>,\r        ]}\r      >\r        <Meta\r          avatar={\r            <Avatar \r              size={64} \r              style={{ backgroundColor: '#667eea' }}\r              icon={<UserOutlined />}\r            >\r              {tenant.name.substring(0, 2).toUpperCase()}\r            </Avatar>\r          }\r          title={\r            <Space direction=\"vertical\" size={0}>\r              <Title level={5} style={{ margin: 0 }}>{tenant.name}</Title>\r              <Space size=\"small\">\r                <Tag color={statusColor}>\r                  {tenant.status === 'active' ? 'Aktif' : \r                   tenant.status === 'suspended' ? 'Askıda' :\r                   tenant.status === 'pending' ? 'Beklemede' : 'Süresi Dolmuş'}\r                </Tag>\r                <Tag color={planColor}>{tenant.plan}</Tag>\r              </Space>\r            </Space>\r          }\r          description={\r            <Space direction=\"vertical\" style={{ width: '100%', marginTop: 12 }}>\r              <Text type=\"secondary\">\r                <GlobalOutlined /> {tenant.domain}\r              </Text>\r              <div style={{ marginTop: 16 }}>\r                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>\r                  <Text type=\"secondary\">\r                    <UserOutlined /> Kullanıcılar\r                  </Text>\r                  <Text>{tenant.userCount} / {tenant.maxUsers}</Text>\r                </div>\r                <Progress \r                  percent={userPercentage} \r                  strokeColor={userPercentage > 80 ? '#ff4d4f' : '#667eea'}\r                  showInfo={false}\r                  size=\"small\"\r                />\r              </div>\r              <div style={{ marginTop: 12 }}>\r                <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>\r                  <Text type=\"secondary\">\r                    <DatabaseOutlined /> Depolama\r                  </Text>\r                  <Text>{tenant.storageUsed} / {tenant.maxStorage} GB</Text>\r                </div>\r                <Progress \r                  percent={storagePercentage} \r                  strokeColor={storagePercentage > 80 ? '#faad14' : '#52c41a'}\r                  showInfo={false}\r                  size=\"small\"\r                />\r              </div>\r              <div style={{ \r                marginTop: 16, \r                padding: '12px', \r                background: '#fafafa', \r                borderRadius: 8,\r                display: 'flex',\r                justifyContent: 'space-between',\r                alignItems: 'center'\r              }}>\r                <div>\r                  <Text type=\"secondary\">Aylık Gelir</Text>\r                  <div style={{ fontSize: 20, fontWeight: 600, color: '#595959' }}>\r                    ₺<CountUp end={tenant.revenue} separator=\",\" duration={2} />\r                  </div>\r                </div>\r                <div style={{ textAlign: 'center' }}>\r                  {tenant.growth > 0 ? (\r                    <Badge \r                      count={\r                        <span style={{ color: '#52c41a' }}>\r                          <RiseOutlined /> {tenant.growth}%\r                        </span>\r                      }\r                    />\r                  ) : (\r                    <Badge \r                      count={\r                        <span style={{ color: '#ff4d4f' }}>\r                          <FallOutlined /> {Math.abs(tenant.growth)}%\r                        </span>\r                      }\r                    />\r                  )}\r                </div>\r              </div>\r              {tenant.modules && tenant.modules.length > 0 && (\r                <div style={{ marginTop: 12 }}>\r                  <Space size={[4, 4]} wrap>\r                    {tenant.modules.map(module => (\r                      <Tag key={module} color=\"blue\" style={{ fontSize: 11 }}>\r                        {module}\r                      </Tag>\r                    ))}\r                  </Space>\r                </div>\r              )}\r            </Space>\r          }\r        />\r      </Card>\r    </motion.div>\r  );\r}, (prevProps, nextProps) => {\r  // Custom comparison function for better performance\r  return (\r    prevProps.tenant.id === nextProps.tenant.id &&\r    prevProps.tenant.status === nextProps.tenant.status &&\r    prevProps.tenant.userCount === nextProps.tenant.userCount &&\r    prevProps.tenant.storageUsed === nextProps.tenant.storageUsed &&\r    prevProps.tenant.revenue === nextProps.tenant.revenue &&\r    prevProps.tenant.growth === nextProps.tenant.growth\r  );\r});\rTenantCard.displayName = 'TenantCard';\rexport default TenantCard;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/components/TenantCard.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useCallback, useMemo, useRef, useEffect } from 'react';\rimport {\r  Table,\r  Button,\r  Space,\r  Tag,\r  Avatar,\r  Typography,\r  Input,\r  Select,\r  DatePicker,\r  Dropdown,\r  Modal,\r  Badge,\r  Tooltip,\r  Checkbox,\r  Row,\r  Col,\r  message,\r  Popconfirm,\r} from 'antd';\rimport type { TableProps, ColumnsType, TableRowSelection } from 'antd/es/table';\rimport {\r  SearchOutlined,\r  FilterOutlined,\r  ExportOutlined,\r  ReloadOutlined,\r  MoreOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  LockOutlined,\r  UnlockOutlined,\r  LoginOutlined,\r  EyeOutlined,\r  MailOutlined,\r  TeamOutlined,\r  CalendarOutlined,\r  DollarOutlined,\r  CrownOutlined,\r  DownloadOutlined,\r} from '@ant-design/icons';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport dayjs from 'dayjs';\rconst { Text, Title } = Typography;\rconst { RangePicker } = DatePicker;\rinterface Tenant {\r  id: string;\r  name: string;\r  subdomain: string;\r  plan: 'Başlangıç' | 'Profesyonel' | 'Kurumsal';\r  status: 'active' | 'suspended' | 'pending' | 'expired';\r  users: number;\r  maxUsers: number;\r  storage: number;\r  maxStorage: number;\r  createdAt: string;\r  expiresAt: string;\r  lastLogin: string;\r  owner: {\r    name: string;\r    email: string;\r    phone?: string;\r    avatar?: string;\r  };\r  revenue: number;\r  modules: string[];\r}\rinterface TenantDataTableProps {\r  data: Tenant[];\r  loading: boolean;\r  onEdit?: (tenant: Tenant) => void;\r  onDelete?: (tenantIds: string[]) => void;\r  onToggleStatus?: (tenantId: string) => void;\r  onLoginAs?: (tenantId: string) => void;\r  onView?: (tenant: Tenant) => void;\r  onRefresh?: () => void;\r  onExport?: (selectedIds?: string[]) => void;\r  onSearch?: (query: string) => void;\r  onFilter?: (filters: any) => void;\r  pagination?: TableProps<Tenant>['pagination'];\r  onChange?: TableProps<Tenant>['onChange'];\r}\rexport const TenantDataTable: React.FC<TenantDataTableProps> = ({\r  data,\r  loading,\r  onEdit,\r  onDelete,\r  onToggleStatus,\r  onLoginAs,\r  onView,\r  onRefresh,\r  onExport,\r  onSearch,\r  onFilter,\r  pagination,\r  onChange,\r}) => {\r  const [selectedRowKeys, setSelectedRowKeys] = useState<string[]>([]);\r  const [searchText, setSearchText] = useState('');\r  const [filters, setFilters] = useState<any>({});\r  const [expandedRowKeys, setExpandedRowKeys] = useState<string[]>([]);\r  const searchInputRef = useRef<any>(null);\r  // Plan renkleri\r  const getPlanColor = (plan: string) => {\r    switch (plan) {\r      case 'Başlangıç': return 'green';\r      case 'Profesyonel': return 'blue';\r      case 'Kurumsal': return 'gold';\r      default: return 'default';\r    }\r  };\r  // Durum renkleri ve ikonları\r  const getStatusConfig = (status: string) => {\r    switch (status) {\r      case 'active':\r        return { color: 'success', text: 'Aktif', icon: '🟢' };\r      case 'suspended':\r        return { color: 'error', text: 'Askıda', icon: '🔴' };\r      case 'pending':\r        return { color: 'warning', text: 'Onay Bekliyor', icon: '🟡' };\r      case 'expired':\r        return { color: 'default', text: 'Süresi Dolmuş', icon: '⚫' };\r      default:\r        return { color: 'default', text: status, icon: '⚪' };\r    }\r  };\r  // Toplu işlem menüsü\r  const bulkActionMenu = useMemo(() => ({\r    items: [\r      {\r        key: 'activate',\r        label: 'Aktif Et',\r        icon: <UnlockOutlined />,\r        onClick: () => {\r          message.success(`${selectedRowKeys.length} tenant aktif edildi`);\r          setSelectedRowKeys([]);\r        }\r      },\r      {\r        key: 'suspend',\r        label: 'Askıya Al',\r        icon: <LockOutlined />,\r        danger: true,\r        onClick: () => {\r          message.warning(`${selectedRowKeys.length} tenant askıya alındı`);\r          setSelectedRowKeys([]);\r        }\r      },\r      { type: 'divider' },\r      {\r        key: 'export',\r        label: 'Dışa Aktar',\r        icon: <ExportOutlined />,\r        onClick: () => onExport?.(selectedRowKeys)\r      },\r      {\r        key: 'delete',\r        label: 'Sil',\r        icon: <DeleteOutlined />,\r        danger: true,\r        onClick: () => {\r          Modal.confirm({\r            title: 'Tenantları Sil',\r            content: `${selectedRowKeys.length} tenant kalıcı olarak silinecek. Emin misiniz?`,\r            okText: 'Sil',\r            cancelText: 'İptal',\r            okButtonProps: { danger: true },\r            onOk: () => {\r              onDelete?.(selectedRowKeys);\r              setSelectedRowKeys([]);\r            }\r          });\r        }\r      }\r    ]\r  }), [selectedRowKeys, onExport, onDelete]);\r  // Tablo kolonları\r  const columns: ColumnsType<Tenant> = [\r    {\r      title: 'Tenant',\r      key: 'tenant',\r      fixed: 'left',\r      width: 280,\r      render: (_, record) => (\r        <Space>\r          <Avatar \r            size={40} \r            style={{ backgroundColor: getPlanColor(record.plan) }}\r          >\r            {record.name.charAt(0).toUpperCase()}\r          </Avatar>\r          <div>\r            <Text strong>{record.name}</Text>\r            <br />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {record.subdomain}.stocker.app\r            </Text>\r          </div>\r        </Space>\r      ),\r      filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r        <div style={{ padding: 8 }}>\r          <Input\r            ref={searchInputRef}\r            placeholder=\"Tenant ara...\"\r            value={selectedKeys[0]}\r            onChange={e = aria-label=\"input field\"> setSelectedKeys(e.target.value ? [e.target.value] : [])}\r            onPressEnter={() => confirm()}\r            style={{ marginBottom: 8, display: 'block' }}\r          />\r          <Space>\r            <Button\r              type=\"primary\"\r              onClick={() => confirm()}\r              icon={<SearchOutlined />}\r              size=\"small\"\r              style={{ width: 90 }}\r            >\r              Ara\r            </Button>\r            <Button onClick={() => clearFilters?.()} size=\"small\" style={{ width: 90 }}>\r              Temizle\r            </Button>\r          </Space>\r        </div>\r      ),\r      filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r      onFilter: (value, record) => \r        record.name.toLowerCase().includes(value.toString().toLowerCase()) ||\r        record.subdomain.toLowerCase().includes(value.toString().toLowerCase()),\r    },\r    {\r      title: 'Sahip',\r      key: 'owner',\r      width: 200,\r      render: (_, record) => (\r        <Space direction=\"vertical\" size={0}>\r          <Text>{record.owner.name}</Text>\r          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r            <MailOutlined /> {record.owner.email}\r          </Text>\r        </Space>\r      ),\r    },\r    {\r      title: 'Plan',\r      dataIndex: 'plan',\r      key: 'plan',\r      width: 120,\r      filters: [\r        { text: 'Başlangıç', value: 'Başlangıç' },\r        { text: 'Profesyonel', value: 'Profesyonel' },\r        { text: 'Kurumsal', value: 'Kurumsal' },\r      ],\r      render: (plan: string) => (\r        <Tag color={getPlanColor(plan)} icon={<CrownOutlined />}>\r          {plan}\r        </Tag>\r      ),\r      onFilter: (value, record) => record.plan === value,\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      width: 120,\r      filters: [\r        { text: 'Aktif', value: 'active' },\r        { text: 'Askıda', value: 'suspended' },\r        { text: 'Onay Bekliyor', value: 'pending' },\r        { text: 'Süresi Dolmuş', value: 'expired' },\r      ],\r      render: (status: string) => {\r        const config = getStatusConfig(status);\r        return (\r          <Badge status={config.color as any} text={config.text} />\r        );\r      },\r      onFilter: (value, record) => record.status === value,\r    },\r    {\r      title: 'Kullanım',\r      key: 'usage',\r      width: 180,\r      render: (_, record) => (\r        <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\r          <div>\r            <Text type=\"secondary\" style={{ fontSize: 11 }}>\r              Kullanıcı: {record.users}/{record.maxUsers}\r            </Text>\r            <Tooltip title={`${record.users} / ${record.maxUsers} kullanıcı`}>\r              <div style={{ marginTop: 2 }}>\r                <div style={{\r                  width: '100%',\r                  height: 4,\r                  background: '#f0f0f0',\r                  borderRadius: 2,\r                  overflow: 'hidden'\r                }}>\r                  <div style={{\r                    width: `${(record.users / record.maxUsers) * 100}%`,\r                    height: '100%',\r                    background: record.users >= record.maxUsers ? '#ff4d4f' : '#52c41a',\r                    transition: 'width 0.3s'\r                  }} />\r                </div>\r              </div>\r            </Tooltip>\r          </div>\r          <div>\r            <Text type=\"secondary\" style={{ fontSize: 11 }}>\r              Depolama: {record.storage}GB/{record.maxStorage}GB\r            </Text>\r            <Tooltip title={`${record.storage}GB / ${record.maxStorage}GB depolama`}>\r              <div style={{ marginTop: 2 }}>\r                <div style={{\r                  width: '100%',\r                  height: 4,\r                  background: '#f0f0f0',\r                  borderRadius: 2,\r                  overflow: 'hidden'\r                }}>\r                  <div style={{\r                    width: `${(record.storage / record.maxStorage) * 100}%`,\r                    height: '100%',\r                    background: record.storage >= record.maxStorage * 0.9 ? '#faad14' : '#1890ff',\r                    transition: 'width 0.3s'\r                  }} />\r                </div>\r              </div>\r            </Tooltip>\r          </div>\r        </Space>\r      ),\r    },\r    {\r      title: 'Gelir',\r      dataIndex: 'revenue',\r      key: 'revenue',\r      width: 120,\r      sorter: (a, b) => a.revenue - b.revenue,\r      render: (revenue: number) => (\r        <Text strong style={{ color: '#52c41a' }}>\r          <DollarOutlined /> {revenue.toLocaleString('tr-TR')}\r        </Text>\r      ),\r    },\r    {\r      title: 'Kayıt Tarihi',\r      dataIndex: 'createdAt',\r      key: 'createdAt',\r      width: 120,\r      sorter: (a, b) => dayjs(a.createdAt).unix() - dayjs(b.createdAt).unix(),\r      render: (date: string) => (\r        <Tooltip title={dayjs(date).format('DD MMMM YYYY HH:mm')}>\r          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r            {dayjs(date).fromNow()}\r          </Text>\r        </Tooltip>\r      ),\r    },\r    {\r      title: 'Son Giriş',\r      dataIndex: 'lastLogin',\r      key: 'lastLogin',\r      width: 120,\r      render: (date: string) => (\r        <Tooltip title={dayjs(date).format('DD MMMM YYYY HH:mm')}>\r          <Text type={dayjs().diff(dayjs(date), 'day') > 7 ? 'warning' : 'secondary'} style={{ fontSize: 12 }}>\r            {dayjs(date).fromNow()}\r          </Text>\r        </Tooltip>\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      fixed: 'right',\r      width: 120,\r      render: (_, record) => (\r        <Space size=\"small\">\r          <Tooltip title=\"Görüntüle\">\r            <Button\r              type=\"text\"\r              size=\"small\"\r              icon={<EyeOutlined />}\r              onClick={() = aria-label=\"eye outlined\"> onView?.(record)}\r            />\r          </Tooltip>\r          <Tooltip title=\"Düzenle\">\r            <Button\r              type=\"text\"\r              size=\"small\"\r              icon={<EditOutlined />}\r              onClick={() = aria-label=\"edit outlined\"> onEdit?.(record)}\r            />\r          </Tooltip>\r          <Dropdown\r            menu={{\r              items: [\r                {\r                  key: 'login',\r                  label: 'Tenant Olarak Giriş',\r                  icon: <LoginOutlined />,\r                  onClick: () => onLoginAs?.(record.id),\r                },\r                {\r                  key: 'toggle',\r                  label: record.status === 'active' ? 'Askıya Al' : 'Aktif Et',\r                  icon: record.status === 'active' ? <LockOutlined /> : <UnlockOutlined />,\r                  onClick: () => onToggleStatus?.(record.id),\r                },\r                { type: 'divider' },\r                {\r                  key: 'delete',\r                  label: 'Sil',\r                  icon: <DeleteOutlined />,\r                  danger: true,\r                  onClick: () => {\r                    Modal.confirm({\r                      title: 'Tenant Sil',\r                      content: `${record.name} kalıcı olarak silinecek. Emin misiniz?`,\r                      okText: 'Sil',\r                      cancelText: 'İptal',\r                      okButtonProps: { danger: true },\r                      onOk: () => onDelete?.([record.id]),\r                    });\r                  },\r                },\r              ],\r            }}\r            trigger={['click']}\r          >\r            <Button type=\"text\" size=\"small\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r          </Dropdown>\r        </Space>\r      ),\r    },\r  ];\r  // Satır seçimi\r  const rowSelection: TableRowSelection<Tenant> = {\r    selectedRowKeys,\r    onChange: (keys) => setSelectedRowKeys(keys as string[]),\r    selections: [\r      Table.SELECTION_ALL,\r      Table.SELECTION_INVERT,\r      Table.SELECTION_NONE,\r    ],\r  };\r  // Genişletilebilir satır içeriği\r  const expandedRowRender = (record: Tenant) => (\r    <div style={{ padding: '16px 48px' }}>\r      <Row gutter={[24, 16]}>\r        <Col span={8}>\r          <Text type=\"secondary\">Modüller</Text>\r          <div style={{ marginTop: 8 }}>\r            {record.modules.map(module => (\r              <Tag key={module} style={{ marginBottom: 4 }}>{module}</Tag>\r            ))}\r          </div>\r        </Col>\r        <Col span={8}>\r          <Text type=\"secondary\">Abonelik Bitiş</Text>\r          <div style={{ marginTop: 8 }}>\r            <Text>{dayjs(record.expiresAt).format('DD MMMM YYYY')}</Text>\r            <br />\r            <Text type={dayjs().isAfter(record.expiresAt) ? 'danger' : 'secondary'} style={{ fontSize: 12 }}>\r              {dayjs(record.expiresAt).fromNow()}\r            </Text>\r          </div>\r        </Col>\r        <Col span={8}>\r          <Text type=\"secondary\">İletişim</Text>\r          <div style={{ marginTop: 8 }}>\r            <Text>{record.owner.phone || 'Telefon yok'}</Text>\r          </div>\r        </Col>\r      </Row>\r    </div>\r  );\r  return (\r    <div className=\"tenant-data-table\">\r      {/* Üst Toolbar */}\r      <div style={{ marginBottom: 16, display: 'flex', justifyContent: 'space-between', alignItems: 'center', flexWrap: 'wrap', gap: 16 }}>\r        <Space wrap>\r          {selectedRowKeys.length > 0 && (\r            <AnimatePresence>\r              <motion.div\r                initial={{ opacity: 0, scale: 0.8 }}\r                animate={{ opacity: 1, scale: 1 }}\r                exit={{ opacity: 0, scale: 0.8 }}\r              >\r                <Badge count={selectedRowKeys.length} offset={[-5, 5]}>\r                  <Dropdown menu={bulkActionMenu} trigger={['click']}>\r                    <Button>\r                      Toplu İşlem <MoreOutlined />\r                    </Button>\r                  </Dropdown>\r                </Badge>\r              </motion.div>\r            </AnimatePresence>\r          )}\r          <Input\r            placeholder=\"Tenant ara...\"\r            prefix={<SearchOutlined / aria-label=\"input field\">}\r            style={{ width: 250 }}\r            value={searchText}\r            onChange={(e) => {\r              setSearchText(e.target.value);\r              onSearch?.(e.target.value);\r            }}\r            allowClear\r          />\r          <Select\r            placeholder=\"Plan Filtrele\"\r            style={{ width: 150 }}\r            allowClear\r            onChange={(value) = aria-label=\"select field\"> {\r              setFilters({ ...filters, plan: value });\r              onFilter?.({ ...filters, plan: value });\r            }}\r          >\r            <Select.Option value=\"Başlangıç\" aria-label=\"select field\">Başlangıç</Select.Option>\r            <Select.Option value=\"Profesyonel\" aria-label=\"select field\">Profesyonel</Select.Option>\r            <Select.Option value=\"Kurumsal\" aria-label=\"select field\">Kurumsal</Select.Option>\r          </Select>\r          <Select\r            placeholder=\"Durum Filtrele\"\r            style={{ width: 150 }}\r            allowClear\r            onChange={(value) = aria-label=\"select field\"> {\r              setFilters({ ...filters, status: value });\r              onFilter?.({ ...filters, status: value });\r            }}\r          >\r            <Select.Option value=\"active\" aria-label=\"select field\">Aktif</Select.Option>\r            <Select.Option value=\"suspended\" aria-label=\"select field\">Askıda</Select.Option>\r            <Select.Option value=\"pending\" aria-label=\"select field\">Onay Bekliyor</Select.Option>\r            <Select.Option value=\"expired\" aria-label=\"select field\">Süresi Dolmuş</Select.Option>\r          </Select>\r        </Space>\r        <Space>\r          <Button icon={<ReloadOutlined />} onClick={onRefresh} loading={loading} aria-label=\"reload outlined\">\r            Yenile\r          </Button>\r          <Button icon={<ExportOutlined />} onClick={() = aria-label=\"export outlined\"> onExport?.()}>\r            Dışa Aktar\r          </Button>\r        </Space>\r      </div>\r      {/* Tablo */}\r      <Table\r        rowSelection={rowSelection}\r        columns={columns}\r        dataSource={data}\r        loading={loading}\r        rowKey=\"id\"\r        pagination={pagination}\r        onChange={onChange}\r        expandable={{\r          expandedRowRender,\r          expandedRowKeys,\r          onExpandedRowsChange: setExpandedRowKeys,\r          expandRowByClick: false,\r        }}\r        scroll={{ x: 1500 }}\r        size=\"middle\"\r        className=\"custom-table\"\r      />\r    </div>\r  );\r};\rexport default TenantDataTable;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/components/TenantDataTable.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Typography,\r  Button,\r  Table,\r  Space,\r  Tag,\r  Tooltip,\r  Modal,\r  Form,\r  Input,\r  Select,\r  DatePicker,\r  Switch,\r  Tabs,\r  Row,\r  Col,\r  Statistic,\r  Progress,\r  Timeline,\r  Alert,\r  Popconfirm,\r  message,\r  Dropdown,\r  Menu,\r  Badge,\r  Divider,\r  InputNumber,\r  Checkbox,\r  List,\r  Avatar,\r  notification,\r  Descriptions,\r  Collapse\r} from 'antd';\rimport {\r  ApiOutlined,\r  PlusOutlined,\r  KeyOutlined,\r  DeleteOutlined,\r  EditOutlined,\r  CopyOutlined,\r  ReloadOutlined,\r  SettingOutlined,\r  SafetyOutlined,\r  ThunderboltOutlined,\r  CloudServerOutlined,\r  BarChartOutlined,\r  ApiOutlined as WebhookOutlined, // WebhookOutlined yok, ApiOutlined kullan\r  LockOutlined,\r  UnlockOutlined,\r  WarningOutlined,\r  CheckCircleOutlined,\r  ClockCircleOutlined,\r  EyeOutlined,\r  EyeInvisibleOutlined,\r  MoreOutlined,\r  FilterOutlined,\r  ExportOutlined,\r  InfoCircleOutlined,\r  GlobalOutlined,\r  CodeOutlined,\r  FileTextOutlined,\r  HistoryOutlined\r} from '@ant-design/icons';\rimport { ColumnType } from 'antd/es/table';\rimport dayjs from 'dayjs';\rimport relativeTime from 'dayjs/plugin/relativeTime';\rimport { Line, Bar, Pie } from 'recharts';\rimport {\r  LineChart,\r  BarChart,\r  PieChart,\r  CartesianGrid,\r  XAxis,\r  YAxis,\r  Tooltip as RechartsTooltip,\r  Legend,\r  ResponsiveContainer,\r  Cell\r} from 'recharts';\rimport './api-management.css';\rimport './api-management-enhanced.css';\rdayjs.extend(relativeTime);\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst { TextArea } = Input;\rconst { Option } = Select;\rconst { RangePicker } = DatePicker;\rinterface ApiKey {\r  id: string;\r  name: string;\r  key: string;\r  secret?: string;\r  tenantId: string;\r  tenantName: string;\r  environment: 'development' | 'staging' | 'production';\r  status: 'active' | 'inactive' | 'revoked' | 'expired';\r  permissions: string[];\r  rateLimit: {\r    requests: number;\r    period: 'second' | 'minute' | 'hour' | 'day';\r    burst?: number;\r  };\r  usage: {\r    requests: number;\r    errors: number;\r    lastUsed: string;\r    bandwidth: number;\r  };\r  ipWhitelist?: string[];\r  expiresAt?: string;\r  createdAt: string;\r  createdBy: string;\r  lastModified: string;\r}\rinterface Webhook {\r  id: string;\r  name: string;\r  url: string;\r  events: string[];\r  status: 'active' | 'inactive' | 'failed';\r  secret: string;\r  headers?: Record<string, string>;\r  retryPolicy: {\r    maxRetries: number;\r    retryInterval: number;\r    backoffMultiplier: number;\r  };\r  lastTriggered?: string;\r  successRate: number;\r  totalCalls: number;\r  failedCalls: number;\r  createdAt: string;\r}\rinterface ApiEndpoint {\r  id: string;\r  path: string;\r  method: string;\r  description: string;\r  category: string;\r  authentication: boolean;\r  rateLimit?: {\r    requests: number;\r    period: string;\r  };\r  parameters: Array<{\r    name: string;\r    type: string;\r    required: boolean;\r    description: string;\r  }>;\r  responses: Array<{\r    status: number;\r    description: string;\r  }>;\r  deprecated: boolean;\r  version: string;\r}\rconst ApiManagement: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [apiKeys, setApiKeys] = useState<ApiKey[]>([]);\r  const [webhooks, setWebhooks] = useState<Webhook[]>([]);\r  const [endpoints, setEndpoints] = useState<ApiEndpoint[]>([]);\r  const [selectedKeys, setSelectedKeys] = useState<string[]>([]);\r  const [activeTab, setActiveTab] = useState('keys');\r  const [keyModalVisible, setKeyModalVisible] = useState(false);\r  const [webhookModalVisible, setWebhookModalVisible] = useState(false);\r  const [selectedKey, setSelectedKey] = useState<ApiKey | null>(null);\r  const [selectedWebhook, setSelectedWebhook] = useState<Webhook | null>(null);\r  const [showSecret, setShowSecret] = useState<Record<string, boolean>>({});\r  const [form] = Form.useForm();\r  const [webhookForm] = Form.useForm();\r  const [filterStatus, setFilterStatus] = useState<string>('all');\r  const [searchText, setSearchText] = useState('');\r  // Mock data\r  useEffect(() => {\r    const mockApiKeys: ApiKey[] = [\r      {\r        id: '1',\r        name: 'Production API',\r        key: 'pk_live_51234567890abcdef',\r        secret: 'sk_live_51234567890abcdef_secret123',\r        tenantId: 'tenant_001',\r        tenantName: 'Acme Corporation',\r        environment: 'production',\r        status: 'active',\r        permissions: ['read', 'write', 'delete'],\r        rateLimit: {\r          requests: 10000,\r          period: 'hour',\r          burst: 100\r        },\r        usage: {\r          requests: 45678,\r          errors: 23,\r          lastUsed: dayjs().subtract(5, 'minutes').toISOString(),\r          bandwidth: 1024000000\r        },\r        ipWhitelist: ['192.168.1.0/24', '10.0.0.0/8'],\r        expiresAt: dayjs().add(90, 'days').toISOString(),\r        createdAt: dayjs().subtract(30, 'days').toISOString(),\r        createdBy: 'admin@example.com',\r        lastModified: dayjs().subtract(2, 'days').toISOString()\r      },\r      {\r        id: '2',\r        name: 'Development API',\r        key: 'pk_test_98765432109876',\r        secret: 'sk_test_98765432109876_secret456',\r        tenantId: 'tenant_002',\r        tenantName: 'Beta Tech Inc',\r        environment: 'development',\r        status: 'active',\r        permissions: ['read'],\r        rateLimit: {\r          requests: 1000,\r          period: 'hour'\r        },\r        usage: {\r          requests: 1234,\r          errors: 5,\r          lastUsed: dayjs().subtract(1, 'hour').toISOString(),\r          bandwidth: 50000000\r        },\r        createdAt: dayjs().subtract(15, 'days').toISOString(),\r        createdBy: 'developer@example.com',\r        lastModified: dayjs().subtract(5, 'days').toISOString()\r      },\r      {\r        id: '3',\r        name: 'Mobile App Key',\r        key: 'pk_mobile_abc123def456',\r        tenantId: 'tenant_001',\r        tenantName: 'Acme Corporation',\r        environment: 'production',\r        status: 'revoked',\r        permissions: ['read'],\r        rateLimit: {\r          requests: 5000,\r          period: 'hour'\r        },\r        usage: {\r          requests: 98765,\r          errors: 145,\r          lastUsed: dayjs().subtract(7, 'days').toISOString(),\r          bandwidth: 250000000\r        },\r        createdAt: dayjs().subtract(60, 'days').toISOString(),\r        createdBy: 'mobile@example.com',\r        lastModified: dayjs().subtract(7, 'days').toISOString()\r      }\r    ];\r    const mockWebhooks: Webhook[] = [\r      {\r        id: '1',\r        name: 'Order Events',\r        url: 'https://api.example.com/webhooks/orders',\r        events: ['order.created', 'order.updated', 'order.cancelled'],\r        status: 'active',\r        secret: 'whsec_test_secret123',\r        headers: {\r          'X-Custom-Header': 'CustomValue'\r        },\r        retryPolicy: {\r          maxRetries: 3,\r          retryInterval: 60,\r          backoffMultiplier: 2\r        },\r        lastTriggered: dayjs().subtract(30, 'minutes').toISOString(),\r        successRate: 98.5,\r        totalCalls: 1523,\r        failedCalls: 23,\r        createdAt: dayjs().subtract(20, 'days').toISOString()\r      },\r      {\r        id: '2',\r        name: 'Payment Notifications',\r        url: 'https://payment.example.com/webhook',\r        events: ['payment.success', 'payment.failed', 'refund.processed'],\r        status: 'active',\r        secret: 'whsec_live_secret456',\r        retryPolicy: {\r          maxRetries: 5,\r          retryInterval: 30,\r          backoffMultiplier: 1.5\r        },\r        lastTriggered: dayjs().subtract(2, 'hours').toISOString(),\r        successRate: 99.8,\r        totalCalls: 4567,\r        failedCalls: 9,\r        createdAt: dayjs().subtract(45, 'days').toISOString()\r      },\r      {\r        id: '3',\r        name: 'Inventory Updates',\r        url: 'https://inventory.example.com/hooks',\r        events: ['product.updated', 'stock.low', 'stock.out'],\r        status: 'failed',\r        secret: 'whsec_inv_secret789',\r        retryPolicy: {\r          maxRetries: 3,\r          retryInterval: 120,\r          backoffMultiplier: 2\r        },\r        lastTriggered: dayjs().subtract(1, 'day').toISOString(),\r        successRate: 85.2,\r        totalCalls: 892,\r        failedCalls: 132,\r        createdAt: dayjs().subtract(10, 'days').toISOString()\r      }\r    ];\r    const mockEndpoints: ApiEndpoint[] = [\r      {\r        id: '1',\r        path: '/api/v1/products',\r        method: 'GET',\r        description: 'List all products',\r        category: 'Products',\r        authentication: true,\r        rateLimit: {\r          requests: 100,\r          period: 'minute'\r        },\r        parameters: [\r          {\r            name: 'page',\r            type: 'integer',\r            required: false,\r            description: 'Page number'\r          },\r          {\r            name: 'limit',\r            type: 'integer',\r            required: false,\r            description: 'Items per page'\r          }\r        ],\r        responses: [\r          {\r            status: 200,\r            description: 'Success'\r          },\r          {\r            status: 401,\r            description: 'Unauthorized'\r          }\r        ],\r        deprecated: false,\r        version: 'v1'\r      },\r      {\r        id: '2',\r        path: '/api/v1/orders',\r        method: 'POST',\r        description: 'Create a new order',\r        category: 'Orders',\r        authentication: true,\r        rateLimit: {\r          requests: 10,\r          period: 'minute'\r        },\r        parameters: [\r          {\r            name: 'customer_id',\r            type: 'string',\r            required: true,\r            description: 'Customer ID'\r          },\r          {\r            name: 'items',\r            type: 'array',\r            required: true,\r            description: 'Order items'\r          }\r        ],\r        responses: [\r          {\r            status: 201,\r            description: 'Created'\r          },\r          {\r            status: 400,\r            description: 'Bad Request'\r          }\r        ],\r        deprecated: false,\r        version: 'v1'\r      }\r    ];\r    setApiKeys(mockApiKeys);\r    setWebhooks(mockWebhooks);\r    setEndpoints(mockEndpoints);\r  }, []);\r  const handleCreateApiKey = () => {\r    setSelectedKey(null);\r    form.resetFields();\r    setKeyModalVisible(true);\r  };\r  const handleEditApiKey = (key: ApiKey) => {\r    setSelectedKey(key);\r    form.setFieldsValue({\r      name: key.name,\r      environment: key.environment,\r      permissions: key.permissions,\r      rateLimit: key.rateLimit.requests,\r      ratePeriod: key.rateLimit.period,\r      expiresAt: key.expiresAt ? dayjs(key.expiresAt) : undefined,\r      ipWhitelist: key.ipWhitelist?.join('\\n')\r    });\r    setKeyModalVisible(true);\r  };\r  const handleRevokeKey = (keyId: string) => {\r    Modal.confirm({\r      title: 'Revoke API Key',\r      icon: <WarningOutlined />,\r      content: 'Are you sure you want to revoke this API key? This action cannot be undone.',\r      okText: 'Revoke',\r      okType: 'danger',\r      onOk: () => {\r        setApiKeys(prev => prev.map(k => \r          k.id === keyId ? { ...k, status: 'revoked' as const } : k\r        ));\r        message.success('API key revoked successfully');\r      }\r    });\r  };\r  const handleRegenerateKey = (keyId: string) => {\r    Modal.confirm({\r      title: 'Regenerate API Key',\r      icon: <ReloadOutlined />,\r      content: 'This will generate a new key and invalidate the current one. Continue?',\r      onOk: () => {\r        const newKey = `pk_${Math.random().toString(36).substr(2, 20)}`;\r        const newSecret = `sk_${Math.random().toString(36).substr(2, 30)}`;\r        setApiKeys(prev => prev.map(k => \r          k.id === keyId ? { ...k, key: newKey, secret: newSecret } : k\r        ));\r        notification.success({\r          message: 'API Key Regenerated',\r          description: 'The new key has been copied to your clipboard.',\r          duration: 5\r        });\r        navigator.clipboard.writeText(newKey);\r      }\r    });\r  };\r  const handleCopyKey = (key: string) => {\r    navigator.clipboard.writeText(key);\r    message.success('API key copied to clipboard');\r  };\r  const handleCreateWebhook = () => {\r    setSelectedWebhook(null);\r    webhookForm.resetFields();\r    setWebhookModalVisible(true);\r  };\r  const handleEditWebhook = (webhook: Webhook) => {\r    setSelectedWebhook(webhook);\r    webhookForm.setFieldsValue({\r      name: webhook.name,\r      url: webhook.url,\r      events: webhook.events,\r      maxRetries: webhook.retryPolicy.maxRetries,\r      retryInterval: webhook.retryPolicy.retryInterval\r    });\r    setWebhookModalVisible(true);\r  };\r  const handleTestWebhook = (webhook: Webhook) => {\r    message.loading('Testing webhook...', 2).then(() => {\r      message.success('Webhook test successful!');\r    });\r  };\r  const getStatusColor = (status: string) => {\r    const colors: Record<string, string> = {\r      active: 'success',\r      inactive: 'default',\r      revoked: 'error',\r      expired: 'warning',\r      failed: 'error'\r    };\r    return colors[status] || 'default';\r  };\r  const apiKeyColumns: ColumnType<ApiKey>[] = [\r    {\r      title: 'Name',\r      dataIndex: 'name',\r      key: 'name',\r      render: (text, record) => (\r        <Space>\r          <KeyOutlined />\r          <div>\r            <Text strong>{text}</Text>\r            <br />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {record.tenantName} • {record.environment}\r            </Text>\r          </div>\r        </Space>\r      )\r    },\r    {\r      title: 'API Key',\r      dataIndex: 'key',\r      key: 'key',\r      render: (text, record) => (\r        <Space>\r          <Text code copyable={{ text }}>\r            {text.substring(0, 20)}...\r          </Text>\r          {record.secret && (\r            <Tooltip title={showSecret[record.id] ? 'Hide secret' : 'Show secret'}>\r              <Button\r                size=\"small\"\r                icon={showSecret[record.id] ? <EyeInvisibleOutlined /> : <EyeOutlined />}\r                onClick={() = aria-label=\"button\"> setShowSecret(prev => ({ ...prev, [record.id]: !prev[record.id] }))}\r              />\r            </Tooltip>\r          )}\r        </Space>\r      )\r    },\r    {\r      title: 'Status',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status) => (\r        <Tag color={getStatusColor(status)} icon={\r          status === 'active' ? <CheckCircleOutlined /> :\r          status === 'revoked' ? <LockOutlined /> :\r          status === 'expired' ? <ClockCircleOutlined /> :\r          <WarningOutlined />\r        }>\r          {status.toUpperCase()}\r        </Tag>\r      )\r    },\r    {\r      title: 'Rate Limit',\r      key: 'rateLimit',\r      render: (_, record) => (\r        <Text type=\"secondary\">\r          {record.rateLimit.requests.toLocaleString()}/{record.rateLimit.period}\r        </Text>\r      )\r    },\r    {\r      title: 'Usage',\r      key: 'usage',\r      render: (_, record) => (\r        <Space direction=\"vertical\" size={0}>\r          <Text>{record.usage.requests.toLocaleString()} requests</Text>\r          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r            Last used {dayjs(record.usage.lastUsed).fromNow()}\r          </Text>\r        </Space>\r      )\r    },\r    {\r      title: 'Expires',\r      dataIndex: 'expiresAt',\r      key: 'expiresAt',\r      render: (date) => date ? (\r        <Tooltip title={dayjs(date).format('YYYY-MM-DD HH:mm')}>\r          <Text>{dayjs(date).fromNow()}</Text>\r        </Tooltip>\r      ) : <Text type=\"secondary\">Never</Text>\r    },\r    {\r      title: 'Actions',\r      key: 'actions',\r      render: (_, record) => (\r        <Space>\r          <Tooltip title=\"Edit\">\r            <Button\r              size=\"small\"\r              icon={<EditOutlined />}\r              onClick={() = aria-label=\"edit outlined\"> handleEditApiKey(record)}\r            />\r          </Tooltip>\r          <Tooltip title=\"Regenerate\">\r            <Button\r              size=\"small\"\r              icon={<ReloadOutlined />}\r              onClick={() = aria-label=\"reload outlined\"> handleRegenerateKey(record.id)}\r              disabled={record.status === 'revoked'}\r            />\r          </Tooltip>\r          <Tooltip title=\"Revoke\">\r            <Button\r              size=\"small\"\r              danger\r              icon={<DeleteOutlined />}\r              onClick={() = aria-label=\"delete outlined\"> handleRevokeKey(record.id)}\r              disabled={record.status === 'revoked'}\r            />\r          </Tooltip>\r        </Space>\r      )\r    }\r  ];\r  const webhookColumns: ColumnType<Webhook>[] = [\r    {\r      title: 'Webhook',\r      key: 'webhook',\r      render: (_, record) => (\r        <Space>\r          <WebhookOutlined />\r          <div>\r            <Text strong>{record.name}</Text>\r            <br />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {record.url}\r            </Text>\r          </div>\r        </Space>\r      )\r    },\r    {\r      title: 'Events',\r      dataIndex: 'events',\r      key: 'events',\r      render: (events) => (\r        <Space wrap>\r          {events.slice(0, 2).map((event: string) => (\r            <Tag key={event}>{event}</Tag>\r          ))}\r          {events.length > 2 && (\r            <Tag>+{events.length - 2} more</Tag>\r          )}\r        </Space>\r      )\r    },\r    {\r      title: 'Status',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status) => (\r        <Badge\r          status={status === 'active' ? 'success' : status === 'failed' ? 'error' : 'default'}\r          text={status.charAt(0).toUpperCase() + status.slice(1)}\r        />\r      )\r    },\r    {\r      title: 'Success Rate',\r      key: 'successRate',\r      render: (_, record) => (\r        <Space direction=\"vertical\" size={0}>\r          <Progress\r            percent={record.successRate}\r            size=\"small\"\r            status={record.successRate > 95 ? 'success' : record.successRate > 80 ? 'normal' : 'exception'}\r          />\r          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r            {record.totalCalls.toLocaleString()} calls\r          </Text>\r        </Space>\r      )\r    },\r    {\r      title: 'Last Triggered',\r      dataIndex: 'lastTriggered',\r      key: 'lastTriggered',\r      render: (date) => date ? (\r        <Tooltip title={dayjs(date).format('YYYY-MM-DD HH:mm:ss')}>\r          <Text>{dayjs(date).fromNow()}</Text>\r        </Tooltip>\r      ) : <Text type=\"secondary\">Never</Text>\r    },\r    {\r      title: 'Actions',\r      key: 'actions',\r      render: (_, record) => (\r        <Space>\r          <Tooltip title=\"Edit\">\r            <Button\r              size=\"small\"\r              icon={<EditOutlined />}\r              onClick={() = aria-label=\"edit outlined\"> handleEditWebhook(record)}\r            />\r          </Tooltip>\r          <Tooltip title=\"Test\">\r            <Button\r              size=\"small\"\r              icon={<ThunderboltOutlined />}\r              onClick={() = aria-label=\"thunderbolt outlined\"> handleTestWebhook(record)}\r            />\r          </Tooltip>\r          <Tooltip title=\"View Logs\">\r            <Button\r              size=\"small\"\r              icon={<HistoryOutlined />}\r            / aria-label=\"history outlined\">\r          </Tooltip>\r        </Space>\r      )\r    }\r  ];\r  const usageData = [\r    { date: '01', requests: 4500, errors: 45 },\r    { date: '02', requests: 5200, errors: 23 },\r    { date: '03', requests: 4800, errors: 67 },\r    { date: '04', requests: 6100, errors: 34 },\r    { date: '05', requests: 5500, errors: 28 },\r    { date: '06', requests: 5900, errors: 41 },\r    { date: '07', requests: 6500, errors: 52 }\r  ];\r  const methodDistribution = [\r    { name: 'GET', value: 65, color: '#52c41a' },\r    { name: 'POST', value: 20, color: '#1890ff' },\r    { name: 'PUT', value: 10, color: '#faad14' },\r    { name: 'DELETE', value: 5, color: '#ff4d4f' }\r  ];\r  return (\r    <div className=\"api-management-container\">\r      <div className=\"api-header\">\r        <Title level={2}>\r          <ApiOutlined /> API Management\r        </Title>\r        <Space>\r          <Button icon={<ExportOutlined />} aria-label=\"export outlined\">Export</Button>\r          <Button icon={<SettingOutlined />} aria-label=\"setting outlined\">Settings</Button>\r        </Space>\r      </div>\r      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\r        <Col xs={24} sm={12} md={6}>\r          <Card className=\"stat-card\">\r            <Statistic\r              title=\"Total API Keys\"\r              value={apiKeys.filter(k => k.status === 'active').length}\r              prefix={<KeyOutlined />}\r              suffix={`/ ${apiKeys.length}`}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card className=\"stat-card\">\r            <Statistic\r              title=\"Active Webhooks\"\r              value={webhooks.filter(w => w.status === 'active').length}\r              prefix={<WebhookOutlined />}\r              suffix={`/ ${webhooks.length}`}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card className=\"stat-card\">\r            <Statistic\r              title=\"Total Requests (24h)\"\r              value={156789}\r              prefix={<ThunderboltOutlined />}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card className=\"stat-card\">\r            <Statistic\r              title=\"Error Rate\"\r              value={0.52}\r              suffix=\"%\"\r              prefix={<WarningOutlined />}\r              valueStyle={{ color: '#52c41a' }}\r            />\r          </Card>\r        </Col>\r      </Row>\r      <Tabs activeKey={activeTab} onChange={setActiveTab}>\r        <TabPane tab={<span><KeyOutlined /> API Keys</span>} key=\"keys\">\r          <Card>\r            <Space style={{ marginBottom: 16 }} wrap>\r              <Button\r                type=\"primary\"\r                icon={<PlusOutlined />}\r                onClick={handleCreateApiKey}\r               aria-label=\"plus outlined\">\r                Generate New Key\r              </Button>\r              <Select\r                style={{ width: 150 }}\r                placeholder=\"Filter by status\"\r                value={filterStatus}\r                onChange={setFilterStatus}\r               aria-label=\"select field\">\r                <Option value=\"all\">All Status</Option>\r                <Option value=\"active\">Active</Option>\r                <Option value=\"inactive\">Inactive</Option>\r                <Option value=\"revoked\">Revoked</Option>\r              </Select>\r              <Input.Search\r                placeholder=\"Search keys...\"\r                style={{ width: 250 }}\r                value={searchText}\r                onChange={(e) = aria-label=\"input field\"> setSearchText(e.target.value)}\r              />\r            </Space>\r            <Table\r              columns={apiKeyColumns}\r              dataSource={apiKeys.filter(key => {\r                if (filterStatus !== 'all' && key.status !== filterStatus) return false;\r                if (searchText && !key.name.toLowerCase().includes(searchText.toLowerCase())) return false;\r                return true;\r              })}\r              rowKey=\"id\"\r              loading={loading}\r              pagination={{\r                pageSize: 10,\r                showSizeChanger: true,\r                showTotal: (total) => `Total ${total} keys`\r              }}\r              expandable={{\r                expandedRowRender: (record) => (\r                  <div className=\"expanded-row\">\r                    {showSecret[record.id] && record.secret && (\r                      <Alert\r                        message=\"Secret Key\"\r                        description={\r                          <Text code copyable={{ text: record.secret }}>\r                            {record.secret}\r                          </Text>\r                        }\r                        type=\"warning\"\r                        icon={<LockOutlined />}\r                        style={{ marginBottom: 16 }}\r                      />\r                    )}\r                    <Descriptions size=\"small\" column={2}>\r                      <Descriptions.Item label=\"Created By\">{record.createdBy}</Descriptions.Item>\r                      <Descriptions.Item label=\"Created At\">\r                        {dayjs(record.createdAt).format('YYYY-MM-DD HH:mm')}\r                      </Descriptions.Item>\r                      <Descriptions.Item label=\"Permissions\">\r                        {record.permissions.map(p => <Tag key={p}>{p}</Tag>)}\r                      </Descriptions.Item>\r                      <Descriptions.Item label=\"IP Whitelist\">\r                        {record.ipWhitelist?.join(', ') || 'None'}\r                      </Descriptions.Item>\r                      <Descriptions.Item label=\"Total Requests\">\r                        {record.usage.requests.toLocaleString()}\r                      </Descriptions.Item>\r                      <Descriptions.Item label=\"Error Count\">\r                        {record.usage.errors.toLocaleString()}\r                      </Descriptions.Item>\r                    </Descriptions>\r                  </div>\r                )\r              }}\r            />\r          </Card>\r        </TabPane>\r        <TabPane tab={<span><WebhookOutlined /> Webhooks</span>} key=\"webhooks\">\r          <Card>\r            <Space style={{ marginBottom: 16 }}>\r              <Button\r                type=\"primary\"\r                icon={<PlusOutlined />}\r                onClick={handleCreateWebhook}\r               aria-label=\"plus outlined\">\r                Add Webhook\r              </Button>\r              <Button icon={<ReloadOutlined />} aria-label=\"reload outlined\">Refresh</Button>\r            </Space>\r            <Table\r              columns={webhookColumns}\r              dataSource={webhooks}\r              rowKey=\"id\"\r              loading={loading}\r              pagination={{\r                pageSize: 10,\r                showSizeChanger: true\r              }}\r            />\r          </Card>\r        </TabPane>\r        <TabPane tab={<span><BarChartOutlined /> Usage Analytics</span>} key=\"usage\">\r          <Row gutter={[16, 16]}>\r            <Col xs={24} lg={16}>\r              <Card title=\"API Usage Trend\">\r                <ResponsiveContainer width=\"100%\" height={300}>\r                  <LineChart data={usageData}>\r                    <CartesianGrid strokeDasharray=\"3 3\" />\r                    <XAxis dataKey=\"date\" />\r                    <YAxis />\r                    <RechartsTooltip />\r                    <Legend />\r                    <Line\r                      type=\"monotone\"\r                      dataKey=\"requests\"\r                      stroke=\"#1890ff\"\r                      name=\"Requests\"\r                      strokeWidth={2}\r                    />\r                    <Line\r                      type=\"monotone\"\r                      dataKey=\"errors\"\r                      stroke=\"#ff4d4f\"\r                      name=\"Errors\"\r                      strokeWidth={2}\r                    />\r                  </LineChart>\r                </ResponsiveContainer>\r              </Card>\r            </Col>\r            <Col xs={24} lg={8}>\r              <Card title=\"Method Distribution\">\r                <ResponsiveContainer width=\"100%\" height={300}>\r                  <PieChart>\r                    <Pie\r                      data={methodDistribution}\r                      dataKey=\"value\"\r                      nameKey=\"name\"\r                      cx=\"50%\"\r                      cy=\"50%\"\r                      outerRadius={80}\r                      label\r                    >\r                      {methodDistribution.map((entry, index) => (\r                        <Cell key={`cell-${index}`} fill={entry.color} />\r                      ))}\r                    </Pie>\r                    <RechartsTooltip />\r                    <Legend />\r                  </PieChart>\r                </ResponsiveContainer>\r              </Card>\r            </Col>\r          </Row>\r          <Card title=\"Top Endpoints\" style={{ marginTop: 16 }}>\r            <List\r              dataSource={endpoints}\r              renderItem={(endpoint) => (\r                <List.Item\r                  actions={[\r                    <Tag color={endpoint.method === 'GET' ? 'green' : endpoint.method === 'POST' ? 'blue' : 'orange'}>\r                      {endpoint.method}\r                    </Tag>,\r                    <Text type=\"secondary\">\r                      {endpoint.rateLimit?.requests}/{endpoint.rateLimit?.period}\r                    </Text>\r                  ]}\r                >\r                  <List.Item.Meta\r                    avatar={<Avatar icon={<CodeOutlined />} />}\r                    title={endpoint.path}\r                    description={endpoint.description}\r                  />\r                </List.Item>\r              )}\r            />\r          </Card>\r        </TabPane>\r        <TabPane tab={<span><FileTextOutlined /> Documentation</span>} key=\"docs\">\r          <Card>\r            <Alert\r              message=\"API Documentation\"\r              description=\"Interactive API documentation with request/response examples and testing capabilities.\"\r              type=\"info\"\r              showIcon\r              style={{ marginBottom: 24 }}\r            />\r            <Collapse>\r              {endpoints.map(endpoint => (\r                <Collapse.Panel\r                  key={endpoint.id}\r                  header={\r                    <Space>\r                      <Tag color={endpoint.method === 'GET' ? 'green' : endpoint.method === 'POST' ? 'blue' : 'orange'}>\r                        {endpoint.method}\r                      </Tag>\r                      <Text strong>{endpoint.path}</Text>\r                      <Text type=\"secondary\">- {endpoint.description}</Text>\r                      {endpoint.deprecated && <Tag color=\"error\">Deprecated</Tag>}\r                    </Space>\r                  }\r                >\r                  <Descriptions column={1}>\r                    <Descriptions.Item label=\"Authentication\">\r                      {endpoint.authentication ? 'Required' : 'Not required'}\r                    </Descriptions.Item>\r                    {endpoint.rateLimit && (\r                      <Descriptions.Item label=\"Rate Limit\">\r                        {endpoint.rateLimit.requests} requests per {endpoint.rateLimit.period}\r                      </Descriptions.Item>\r                    )}\r                  </Descriptions>\r                  <Divider orientation=\"left\">Parameters</Divider>\r                  <Table\r                    dataSource={endpoint.parameters}\r                    columns={[\r                      { title: 'Name', dataIndex: 'name', key: 'name' },\r                      { title: 'Type', dataIndex: 'type', key: 'type' },\r                      {\r                        title: 'Required',\r                        dataIndex: 'required',\r                        key: 'required',\r                        render: (required) => required ? <Tag color=\"red\">Required</Tag> : <Tag>Optional</Tag>\r                      },\r                      { title: 'Description', dataIndex: 'description', key: 'description' }\r                    ]}\r                    pagination={false}\r                    size=\"small\"\r                  />\r                  <Divider orientation=\"left\">Responses</Divider>\r                  <List\r                    dataSource={endpoint.responses}\r                    renderItem={(response) => (\r                      <List.Item>\r                        <Tag color={response.status >= 200 && response.status < 300 ? 'success' : 'error'}>\r                          {response.status}\r                        </Tag>\r                        <Text>{response.description}</Text>\r                      </List.Item>\r                    )}\r                  />\r                </Collapse.Panel>\r              ))}\r            </Collapse>\r          </Card>\r        </TabPane>\r      </Tabs>\r      <Modal\r        title={selectedKey ? 'Edit API Key' : 'Generate New API Key'}\r        visible={keyModalVisible}\r        onCancel={() => setKeyModalVisible(false)}\r        footer={[\r          <Button key=\"cancel\" onClick={() => setKeyModalVisible(false)}>\r            Cancel\r          </Button>,\r          <Button\r            key=\"submit\"\r            type=\"primary\"\r            onClick={() => {\r              form.validateFields().then(values => {\r                if (selectedKey) {\r                  message.success('API key updated successfully');\r                } else {\r                  message.success('New API key generated successfully');\r                }\r                setKeyModalVisible(false);\r              });\r            }}\r          >\r            {selectedKey ? 'Update' : 'Generate'}\r          </Button>\r        ]}\r        width={600}\r      >\r        <Form form={form} layout=\"vertical\">\r          <Form.Item\r            name=\"name\"\r            label=\"Key Name\"\r            rules={[{ required: true, message: 'Please enter a key name' }]}\r          >\r            <Input placeholder=\"e.g., Production API Key\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item\r            name=\"environment\"\r            label=\"Environment\"\r            rules={[{ required: true, message: 'Please select an environment' }]}\r          >\r            <Select placeholder=\"Select environment\" aria-label=\"select field\">\r              <Option value=\"development\">Development</Option>\r              <Option value=\"staging\">Staging</Option>\r              <Option value=\"production\">Production</Option>\r            </Select>\r          </Form.Item>\r          <Form.Item\r            name=\"permissions\"\r            label=\"Permissions\"\r            rules={[{ required: true, message: 'Please select permissions' }]}\r          >\r            <Checkbox.Group>\r              <Row>\r                <Col span={8}>\r                  <Checkbox value=\"read\">Read</Checkbox>\r                </Col>\r                <Col span={8}>\r                  <Checkbox value=\"write\">Write</Checkbox>\r                </Col>\r                <Col span={8}>\r                  <Checkbox value=\"delete\">Delete</Checkbox>\r                </Col>\r              </Row>\r            </Checkbox.Group>\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"rateLimit\"\r                label=\"Rate Limit\"\r                rules={[{ required: true, message: 'Please enter rate limit' }]}\r              >\r                <InputNumber\r                  min={1}\r                  max={100000}\r                  style={{ width: '100%' }}\r                  placeholder=\"Requests\"\r                / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"ratePeriod\"\r                label=\"Period\"\r                rules={[{ required: true, message: 'Please select period' }]}\r              >\r                <Select placeholder=\"Select period\" aria-label=\"select field\">\r                  <Option value=\"second\">Per Second</Option>\r                  <Option value=\"minute\">Per Minute</Option>\r                  <Option value=\"hour\">Per Hour</Option>\r                  <Option value=\"day\">Per Day</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item\r            name=\"expiresAt\"\r            label=\"Expiration Date (Optional)\"\r          >\r            <DatePicker\r              style={{ width: '100%' }}\r              showTime\r              disabledDate={(current) => current && current < dayjs().endOf('day')}\r            />\r          </Form.Item>\r          <Form.Item\r            name=\"ipWhitelist\"\r            label=\"IP Whitelist (Optional)\"\r            extra=\"Enter one IP address or CIDR block per line\"\r          >\r            <TextArea\r              rows={3}\r              placeholder=\"192.168.1.0/24&#10;10.0.0.1\"\r            />\r          </Form.Item>\r        </Form>\r      </Modal>\r      <Modal\r        title={selectedWebhook ? 'Edit Webhook' : 'Add Webhook'}\r        visible={webhookModalVisible}\r        onCancel={() => setWebhookModalVisible(false)}\r        footer={[\r          <Button key=\"cancel\" onClick={() => setWebhookModalVisible(false)}>\r            Cancel\r          </Button>,\r          <Button\r            key=\"submit\"\r            type=\"primary\"\r            onClick={() => {\r              webhookForm.validateFields().then(values => {\r                if (selectedWebhook) {\r                  message.success('Webhook updated successfully');\r                } else {\r                  message.success('Webhook added successfully');\r                }\r                setWebhookModalVisible(false);\r              });\r            }}\r          >\r            {selectedWebhook ? 'Update' : 'Add'}\r          </Button>\r        ]}\r        width={600}\r      >\r        <Form form={webhookForm} layout=\"vertical\">\r          <Form.Item\r            name=\"name\"\r            label=\"Webhook Name\"\r            rules={[{ required: true, message: 'Please enter webhook name' }]}\r          >\r            <Input placeholder=\"e.g., Order Notifications\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item\r            name=\"url\"\r            label=\"Webhook URL\"\r            rules={[\r              { required: true, message: 'Please enter webhook URL' },\r              { type: 'url', message: 'Please enter a valid URL' }\r            ]}\r          >\r            <Input placeholder=\"https://api.example.com/webhook\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item\r            name=\"events\"\r            label=\"Events\"\r            rules={[{ required: true, message: 'Please select at least one event' }]}\r          >\r            <Select\r              mode=\"multiple\"\r              placeholder=\"Select events to trigger webhook\"\r             aria-label=\"select field\">\r              <Option value=\"order.created\">Order Created</Option>\r              <Option value=\"order.updated\">Order Updated</Option>\r              <Option value=\"order.cancelled\">Order Cancelled</Option>\r              <Option value=\"payment.success\">Payment Success</Option>\r              <Option value=\"payment.failed\">Payment Failed</Option>\r              <Option value=\"refund.processed\">Refund Processed</Option>\r              <Option value=\"product.updated\">Product Updated</Option>\r              <Option value=\"stock.low\">Stock Low</Option>\r              <Option value=\"stock.out\">Stock Out</Option>\r            </Select>\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"maxRetries\"\r                label=\"Max Retries\"\r                initialValue={3}\r              >\r                <InputNumber\r                  min={0}\r                  max={10}\r                  style={{ width: '100%' }}\r                / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"retryInterval\"\r                label=\"Retry Interval (seconds)\"\r                initialValue={60}\r              >\r                <InputNumber\r                  min={10}\r                  max={600}\r                  style={{ width: '100%' }}\r                / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r        </Form>\r      </Modal>\r    </div>\r  );\r};\rexport default ApiManagement;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/ApiManagement/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useCallback, useMemo } from 'react';\rimport {\r  Card,\r  Table,\r  Input,\r  Select,\r  DatePicker,\r  Button,\r  Tag,\r  Space,\r  Row,\r  Col,\r  Timeline,\r  Avatar,\r  Tooltip,\r  Badge,\r  Dropdown,\r  Checkbox,\r  Modal,\r  Typography,\r  Divider,\r  message,\r  Tabs,\r  Statistic,\r  Progress,\r  Empty,\r  Alert\r} from 'antd';\rimport {\r  SearchOutlined,\r  FilterOutlined,\r  ExportOutlined,\r  ReloadOutlined,\r  UserOutlined,\r  DesktopOutlined,\r  MobileOutlined,\r  TabletOutlined,\r  GlobalOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  InfoCircleOutlined,\r  WarningOutlined,\r  ClockCircleOutlined,\r  DownloadOutlined,\r  EyeOutlined,\r  DeleteOutlined,\r  SafetyOutlined,\r  ApiOutlined,\r  DatabaseOutlined,\r  FileTextOutlined,\r  SettingOutlined,\r  TeamOutlined,\r  KeyOutlined,\r  MailOutlined,\r  BellOutlined\r} from '@ant-design/icons';\rimport type { ColumnsType } from 'antd/es/table';\rimport dayjs from 'dayjs';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport { useRealtimeData } from '../../hooks/useRealtimeData';\rimport './auditLogs.css';\rconst { Search } = Input;\rconst { RangePicker } = DatePicker;\rconst { Option } = Select;\rconst { Text, Title, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rinterface AuditLog {\r  id: string;\r  timestamp: string;\r  user: {\r    id: string;\r    name: string;\r    email: string;\r    avatar?: string;\r    role: string;\r  };\r  tenant?: {\r    id: string;\r    name: string;\r  };\r  action: string;\r  category: 'auth' | 'user' | 'tenant' | 'system' | 'api' | 'data' | 'security' | 'billing';\r  severity: 'info' | 'warning' | 'error' | 'critical';\r  resource?: {\r    type: string;\r    id: string;\r    name: string;\r  };\r  details?: Record<string, any>;\r  ip: string;\r  userAgent: string;\r  device: 'desktop' | 'mobile' | 'tablet';\r  location?: {\r    country: string;\r    city: string;\r  };\r  duration?: number;\r  status: 'success' | 'failed' | 'pending';\r}\rconst mockLogs: AuditLog[] = Array.from({ length: 100 }, (_, i) => {\r  const categories = ['auth', 'user', 'tenant', 'system', 'api', 'data', 'security', 'billing'] as const;\r  const severities = ['info', 'warning', 'error', 'critical'] as const;\r  const devices = ['desktop', 'mobile', 'tablet'] as const;\r  const statuses = ['success', 'failed', 'pending'] as const;\r  return {\r    id: `LOG-${1000 + i}`,\r    timestamp: dayjs().subtract(Math.floor(Math.random() * 30), 'day').subtract(Math.floor(Math.random() * 24), 'hour').toISOString(),\r    user: {\r      id: `USER-${Math.floor(Math.random() * 10) + 1}`,\r      name: ['Ahmet Yılmaz', 'Mehmet Demir', 'Ayşe Kara', 'Fatma Şahin', 'Ali Öztürk'][Math.floor(Math.random() * 5)],\r      email: `user${Math.floor(Math.random() * 10) + 1}@example.com`,\r      avatar: Math.random() > 0.3 ? `https://i.pravatar.cc/150?img=${Math.floor(Math.random() * 70) + 1}` : undefined,\r      role: ['Admin', 'Manager', 'User', 'Developer'][Math.floor(Math.random() * 4)]\r    },\r    tenant: Math.random() > 0.3 ? {\r      id: `TENANT-${Math.floor(Math.random() * 5) + 1}`,\r      name: ['Teknoloji A.Ş.', 'Üretim Ltd.', 'Satış Tic.', 'Hizmet Ltd.'][Math.floor(Math.random() * 4)]\r    } : undefined,\r    action: [\r      'User Login', 'User Logout', 'Password Changed', 'Profile Updated',\r      'Tenant Created', 'Tenant Updated', 'Tenant Deleted',\r      'API Key Generated', 'API Key Revoked', 'API Call',\r      'Data Export', 'Data Import', 'Backup Created',\r      'Settings Changed', 'Role Assigned', 'Permission Updated'\r    ][Math.floor(Math.random() * 16)],\r    category: categories[Math.floor(Math.random() * categories.length)],\r    severity: severities[Math.floor(Math.random() * severities.length)],\r    resource: Math.random() > 0.5 ? {\r      type: ['User', 'Tenant', 'Product', 'Order', 'Invoice'][Math.floor(Math.random() * 5)],\r      id: `RES-${Math.floor(Math.random() * 100) + 1}`,\r      name: `Resource ${Math.floor(Math.random() * 100) + 1}`\r    } : undefined,\r    details: Math.random() > 0.7 ? {\r      oldValue: 'Old Value',\r      newValue: 'New Value',\r      reason: 'User requested change'\r    } : undefined,\r    ip: `192.168.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`,\r    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\r    device: devices[Math.floor(Math.random() * devices.length)],\r    location: Math.random() > 0.4 ? {\r      country: ['Türkiye', 'USA', 'Germany', 'UK'][Math.floor(Math.random() * 4)],\r      city: ['İstanbul', 'Ankara', 'İzmir', 'Bursa'][Math.floor(Math.random() * 4)]\r    } : undefined,\r    duration: Math.random() > 0.6 ? Math.floor(Math.random() * 5000) + 100 : undefined,\r    status: statuses[Math.floor(Math.random() * statuses.length)]\r  };\r});\rconst AuditLogs: React.FC = () => {\r  const [selectedLogs, setSelectedLogs] = useState<string[]>([]);\r  const [filters, setFilters] = useState({\r    search: '',\r    category: 'all',\r    severity: 'all',\r    status: 'all',\r    user: 'all',\r    tenant: 'all',\r    dateRange: [null, null] as [dayjs.Dayjs | null, dayjs.Dayjs | null]\r  });\r  const [viewMode, setViewMode] = useState<'table' | 'timeline'>('table');\r  const [detailsModal, setDetailsModal] = useState<{ visible: boolean; log: AuditLog | null }>({ \r    visible: false, \r    log: null \r  });\r  const [exportModal, setExportModal] = useState(false);\r  const [exportOptions, setExportOptions] = useState({\r    format: 'json',\r    includeDetails: true,\r    dateRange: true\r  });\r  const { data: logs, loading, refresh } = useRealtimeData(\r    async () => mockLogs,\r    { interval: 30000 }\r  );\r  const categoryIcons = {\r    auth: <KeyOutlined />,\r    user: <UserOutlined />,\r    tenant: <TeamOutlined />,\r    system: <SettingOutlined />,\r    api: <ApiOutlined />,\r    data: <DatabaseOutlined />,\r    security: <SafetyOutlined />,\r    billing: <FileTextOutlined />\r  };\r  const severityColors = {\r    info: 'blue',\r    warning: 'orange',\r    error: 'red',\r    critical: 'red'\r  };\r  const statusIcons = {\r    success: <CheckCircleOutlined style={{ color: '#52c41a' }} />,\r    failed: <CloseCircleOutlined style={{ color: '#ff4d4f' }} />,\r    pending: <ClockCircleOutlined style={{ color: '#faad14' }} />\r  };\r  const deviceIcons = {\r    desktop: <DesktopOutlined />,\r    mobile: <MobileOutlined />,\r    tablet: <TabletOutlined />\r  };\r  const filteredLogs = useMemo(() => {\r    if (!logs) return [];\r    return logs.filter(log => {\r      if (filters.search && !log.action.toLowerCase().includes(filters.search.toLowerCase()) &&\r          !log.user.name.toLowerCase().includes(filters.search.toLowerCase()) &&\r          !log.user.email.toLowerCase().includes(filters.search.toLowerCase())) {\r        return false;\r      }\r      if (filters.category !== 'all' && log.category !== filters.category) return false;\r      if (filters.severity !== 'all' && log.severity !== filters.severity) return false;\r      if (filters.status !== 'all' && log.status !== filters.status) return false;\r      if (filters.user !== 'all' && log.user.id !== filters.user) return false;\r      if (filters.tenant !== 'all' && log.tenant?.id !== filters.tenant) return false;\r      if (filters.dateRange[0] && filters.dateRange[1]) {\r        const logDate = dayjs(log.timestamp);\r        if (!logDate.isAfter(filters.dateRange[0]) || !logDate.isBefore(filters.dateRange[1])) {\r          return false;\r        }\r      }\r      return true;\r    });\r  }, [logs, filters]);\r  const statistics = useMemo(() => {\r    if (!filteredLogs) return null;\r    const total = filteredLogs.length;\r    const byCategory = filteredLogs.reduce((acc, log) => {\r      acc[log.category] = (acc[log.category] || 0) + 1;\r      return acc;\r    }, {} as Record<string, number>);\r    const bySeverity = filteredLogs.reduce((acc, log) => {\r      acc[log.severity] = (acc[log.severity] || 0) + 1;\r      return acc;\r    }, {} as Record<string, number>);\r    const failedCount = filteredLogs.filter(log => log.status === 'failed').length;\r    const successRate = total > 0 ? ((total - failedCount) / total * 100).toFixed(1) : 0;\r    return { total, byCategory, bySeverity, failedCount, successRate };\r  }, [filteredLogs]);\r  const handleExport = useCallback(() => {\r    const dataToExport = selectedLogs.length > 0 \r      ? filteredLogs.filter(log => selectedLogs.includes(log.id))\r      : filteredLogs;\r    let content = '';\r    const filename = `audit-logs-${dayjs().format('YYYY-MM-DD-HHmmss')}`;\r    if (exportOptions.format === 'json') {\r      content = JSON.stringify(dataToExport, null, 2);\r    } else if (exportOptions.format === 'csv') {\r      const headers = ['ID', 'Timestamp', 'User', 'Action', 'Category', 'Severity', 'Status', 'IP', 'Device'];\r      const rows = dataToExport.map(log => [\r        log.id,\r        log.timestamp,\r        log.user.name,\r        log.action,\r        log.category,\r        log.severity,\r        log.status,\r        log.ip,\r        log.device\r      ]);\r      content = [headers, ...rows].map(row => row.join(',')).join('\\n');\r    }\r    const blob = new Blob([content], { type: 'text/plain' });\r    const url = URL.createObjectURL(blob);\r    const link = document.createElement('a');\r    link.href = url;\r    link.download = `${filename}.${exportOptions.format}`;\r    link.click();\r    URL.revokeObjectURL(url);\r    message.success(`${dataToExport.length} logs exported successfully`);\r    setExportModal(false);\r  }, [filteredLogs, selectedLogs, exportOptions]);\r  const columns: ColumnsType<AuditLog> = [\r    {\r      title: () => (\r        <Checkbox\r          indeterminate={selectedLogs.length > 0 && selectedLogs.length < filteredLogs.length}\r          checked={selectedLogs.length === filteredLogs.length && filteredLogs.length > 0}\r          onChange={e => {\r            setSelectedLogs(e.target.checked ? filteredLogs.map(log => log.id) : []);\r          }}\r        />\r      ),\r      key: 'select',\r      width: 50,\r      fixed: 'left',\r      render: (_, record) => (\r        <Checkbox\r          checked={selectedLogs.includes(record.id)}\r          onChange={e => {\r            setSelectedLogs(prev => \r              e.target.checked \r                ? [...prev, record.id]\r                : prev.filter(id => id !== record.id)\r            );\r          }}\r        />\r      )\r    },\r    {\r      title: 'Timestamp',\r      key: 'timestamp',\r      width: 180,\r      render: (_, record) => (\r        <Space direction=\"vertical\" size={0}>\r          <Text strong>{dayjs(record.timestamp).format('DD/MM/YYYY')}</Text>\r          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r            {dayjs(record.timestamp).format('HH:mm:ss')}\r          </Text>\r        </Space>\r      ),\r      sorter: (a, b) => dayjs(a.timestamp).unix() - dayjs(b.timestamp).unix()\r    },\r    {\r      title: 'User',\r      key: 'user',\r      width: 200,\r      render: (_, record) => (\r        <Space>\r          <Avatar src={record.user.avatar} icon={<UserOutlined />} size=\"small\" />\r          <Space direction=\"vertical\" size={0}>\r            <Text strong>{record.user.name}</Text>\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>{record.user.role}</Text>\r          </Space>\r        </Space>\r      )\r    },\r    {\r      title: 'Action',\r      key: 'action',\r      width: 200,\r      render: (_, record) => (\r        <Space direction=\"vertical\" size={0}>\r          <Space>\r            {categoryIcons[record.category]}\r            <Text strong>{record.action}</Text>\r          </Space>\r          {record.resource && (\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {record.resource.type}: {record.resource.name}\r            </Text>\r          )}\r        </Space>\r      )\r    },\r    {\r      title: 'Category',\r      key: 'category',\r      width: 120,\r      render: (_, record) => (\r        <Tag color={severityColors[record.severity]}>\r          {record.category.toUpperCase()}\r        </Tag>\r      ),\r      filters: ['auth', 'user', 'tenant', 'system', 'api', 'data', 'security', 'billing'].map(cat => ({\r        text: cat.toUpperCase(),\r        value: cat\r      })),\r      onFilter: (value, record) => record.category === value\r    },\r    {\r      title: 'Severity',\r      key: 'severity',\r      width: 100,\r      render: (_, record) => {\r        const icons = {\r          info: <InfoCircleOutlined />,\r          warning: <WarningOutlined />,\r          error: <CloseCircleOutlined />,\r          critical: <CloseCircleOutlined />\r        };\r        return (\r          <Tag icon={icons[record.severity]} color={severityColors[record.severity]}>\r            {record.severity.toUpperCase()}\r          </Tag>\r        );\r      }\r    },\r    {\r      title: 'Status',\r      key: 'status',\r      width: 100,\r      render: (_, record) => (\r        <Space>\r          {statusIcons[record.status]}\r          <Text>{record.status}</Text>\r        </Space>\r      )\r    },\r    {\r      title: 'Location',\r      key: 'location',\r      width: 150,\r      render: (_, record) => (\r        <Space>\r          {deviceIcons[record.device]}\r          {record.location ? (\r            <Tooltip title={`${record.location.city}, ${record.location.country}`}>\r              <Space size={4}>\r                <GlobalOutlined />\r                <Text type=\"secondary\">{record.location.city}</Text>\r              </Space>\r            </Tooltip>\r          ) : (\r            <Text type=\"secondary\">{record.ip}</Text>\r          )}\r        </Space>\r      )\r    },\r    {\r      title: 'Actions',\r      key: 'actions',\r      width: 100,\r      fixed: 'right',\r      render: (_, record) => (\r        <Space>\r          <Tooltip title=\"View Details\">\r            <Button\r              type=\"text\"\r              icon={<EyeOutlined />}\r              onClick={() = aria-label=\"eye outlined\"> setDetailsModal({ visible: true, log: record })}\r            />\r          </Tooltip>\r          {record.details && (\r            <Tooltip title=\"Has Additional Data\">\r              <InfoCircleOutlined style={{ color: '#1890ff' }} />\r            </Tooltip>\r          )}\r        </Space>\r      )\r    }\r  ];\r  const renderTimeline = () => {\r    const groupedLogs = filteredLogs.reduce((acc, log) => {\r      const date = dayjs(log.timestamp).format('YYYY-MM-DD');\r      if (!acc[date]) acc[date] = [];\r      acc[date].push(log);\r      return acc;\r    }, {} as Record<string, AuditLog[]>);\r    return (\r      <div className=\"audit-timeline\">\r        {Object.entries(groupedLogs).map(([date, logs]) => (\r          <div key={date} className=\"timeline-section\">\r            <Title level={5} style={{ marginBottom: 16 }}>\r              {dayjs(date).format('DD MMMM YYYY')}\r            </Title>\r            <Timeline mode=\"left\">\r              {logs.map(log => (\r                <Timeline.Item\r                  key={log.id}\r                  dot={statusIcons[log.status]}\r                  color={severityColors[log.severity]}\r                >\r                  <Card \r                    size=\"small\" \r                    className=\"timeline-card\"\r                    onClick={() => setDetailsModal({ visible: true, log })}\r                    hoverable\r                  >\r                    <Space direction=\"vertical\" style={{ width: '100%' }}>\r                      <Space style={{ width: '100%', justifyContent: 'space-between' }}>\r                        <Space>\r                          <Avatar src={log.user.avatar} icon={<UserOutlined />} size=\"small\" />\r                          <Text strong>{log.user.name}</Text>\r                        </Space>\r                        <Text type=\"secondary\">{dayjs(log.timestamp).format('HH:mm:ss')}</Text>\r                      </Space>\r                      <Space>\r                        {categoryIcons[log.category]}\r                        <Text>{log.action}</Text>\r                      </Space>\r                      {log.resource && (\r                        <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                          {log.resource.type}: {log.resource.name}\r                        </Text>\r                      )}\r                      <Space>\r                        <Tag color={severityColors[log.severity]} style={{ margin: 0 }}>\r                          {log.severity.toUpperCase()}\r                        </Tag>\r                        {log.tenant && (\r                          <Tag color=\"blue\" style={{ margin: 0 }}>\r                            {log.tenant.name}\r                          </Tag>\r                        )}\r                      </Space>\r                    </Space>\r                  </Card>\r                </Timeline.Item>\r              ))}\r            </Timeline>\r          </div>\r        ))}\r      </div>\r    );\r  };\r  return (\r    <div className=\"audit-logs-page\">\r      <Row gutter={[16, 16]}>\r        <Col span={24}>\r          <Card className=\"stats-card\">\r            <Row gutter={16}>\r              <Col xs={24} sm={12} md={6}>\r                <Statistic\r                  title=\"Total Logs\"\r                  value={statistics?.total || 0}\r                  prefix={<FileTextOutlined />}\r                />\r              </Col>\r              <Col xs={24} sm={12} md={6}>\r                <Statistic\r                  title=\"Failed Actions\"\r                  value={statistics?.failedCount || 0}\r                  valueStyle={{ color: '#ff4d4f' }}\r                  prefix={<CloseCircleOutlined />}\r                />\r              </Col>\r              <Col xs={24} sm={12} md={6}>\r                <Statistic\r                  title=\"Success Rate\"\r                  value={statistics?.successRate || 0}\r                  suffix=\"%\"\r                  valueStyle={{ color: '#52c41a' }}\r                  prefix={<CheckCircleOutlined />}\r                />\r              </Col>\r              <Col xs={24} sm={12} md={6}>\r                <div className=\"category-distribution\">\r                  <Text type=\"secondary\">Category Distribution</Text>\r                  <div style={{ marginTop: 8 }}>\r                    {statistics?.byCategory && Object.entries(statistics.byCategory).map(([cat, count]) => (\r                      <Tag key={cat} style={{ marginBottom: 4 }}>\r                        {cat}: {count}\r                      </Tag>\r                    ))}\r                  </div>\r                </div>\r              </Col>\r            </Row>\r          </Card>\r        </Col>\r        <Col span={24}>\r          <Card>\r            <Space style={{ width: '100%', justifyContent: 'space-between', marginBottom: 16 }} wrap>\r              <Space wrap>\r                <Search\r                  placeholder=\"Search logs...\"\r                  style={{ width: 250 }}\r                  value={filters.search}\r                  onChange={e => setFilters(prev => ({ ...prev, search: e.target.value }))}\r                  prefix={<SearchOutlined />}\r                  allowClear\r                />\r                <Select\r                  style={{ width: 150 }}\r                  value={filters.category}\r                  onChange={value = aria-label=\"select field\"> setFilters(prev => ({ ...prev, category: value }))}\r                  placeholder=\"Category\"\r                >\r                  <Option value=\"all\">All Categories</Option>\r                  {['auth', 'user', 'tenant', 'system', 'api', 'data', 'security', 'billing'].map(cat => (\r                    <Option key={cat} value={cat}>\r                      {cat.charAt(0).toUpperCase() + cat.slice(1)}\r                    </Option>\r                  ))}\r                </Select>\r                <Select\r                  style={{ width: 130 }}\r                  value={filters.severity}\r                  onChange={value = aria-label=\"select field\"> setFilters(prev => ({ ...prev, severity: value }))}\r                  placeholder=\"Severity\"\r                >\r                  <Option value=\"all\">All Severity</Option>\r                  {['info', 'warning', 'error', 'critical'].map(sev => (\r                    <Option key={sev} value={sev}>\r                      {sev.charAt(0).toUpperCase() + sev.slice(1)}\r                    </Option>\r                  ))}\r                </Select>\r                <Select\r                  style={{ width: 120 }}\r                  value={filters.status}\r                  onChange={value = aria-label=\"select field\"> setFilters(prev => ({ ...prev, status: value }))}\r                  placeholder=\"Status\"\r                >\r                  <Option value=\"all\">All Status</Option>\r                  <Option value=\"success\">Success</Option>\r                  <Option value=\"failed\">Failed</Option>\r                  <Option value=\"pending\">Pending</Option>\r                </Select>\r                <RangePicker\r                  value={filters.dateRange}\r                  onChange={dates => setFilters(prev => ({ ...prev, dateRange: dates as any }))}\r                  format=\"DD/MM/YYYY\"\r                />\r              </Space>\r              <Space>\r                <Button.Group>\r                  <Button\r                    type={viewMode === 'table' ? 'primary' : 'default'}\r                    onClick={() => setViewMode('table')}\r                  >\r                    Table\r                  </Button>\r                  <Button\r                    type={viewMode === 'timeline' ? 'primary' : 'default'}\r                    onClick={() => setViewMode('timeline')}\r                  >\r                    Timeline\r                  </Button>\r                </Button.Group>\r                {selectedLogs.length > 0 && (\r                  <Badge count={selectedLogs.length} offset={[-5, 5]}>\r                    <Button icon={<DeleteOutlined />} danger aria-label=\"delete outlined\">\r                      Delete Selected\r                    </Button>\r                  </Badge>\r                )}\r                <Button\r                  icon={<ExportOutlined />}\r                  onClick={() = aria-label=\"export outlined\"> setExportModal(true)}\r                >\r                  Export\r                </Button>\r                <Button\r                  icon={<ReloadOutlined />}\r                  onClick={refresh}\r                  loading={loading}\r                 aria-label=\"reload outlined\">\r                  Refresh\r                </Button>\r              </Space>\r            </Space>\r            <AnimatePresence mode=\"wait\">\r              {viewMode === 'table' ? (\r                <motion.div\r                  key=\"table\"\r                  initial={{ opacity: 0, y: 20 }}\r                  animate={{ opacity: 1, y: 0 }}\r                  exit={{ opacity: 0, y: -20 }}\r                >\r                  <Table\r                    columns={columns}\r                    dataSource={filteredLogs}\r                    loading={loading}\r                    rowKey=\"id\"\r                    scroll={{ x: 1500 }}\r                    pagination={{\r                      showSizeChanger: true,\r                      showQuickJumper: true,\r                      showTotal: (total) => `Total ${total} logs`,\r                      defaultPageSize: 20\r                    }}\r                  />\r                </motion.div>\r              ) : (\r                <motion.div\r                  key=\"timeline\"\r                  initial={{ opacity: 0, y: 20 }}\r                  animate={{ opacity: 1, y: 0 }}\r                  exit={{ opacity: 0, y: -20 }}\r                >\r                  {renderTimeline()}\r                </motion.div>\r              )}\r            </AnimatePresence>\r          </Card>\r        </Col>\r      </Row>\r      <Modal\r        title=\"Log Details\"\r        visible={detailsModal.visible}\r        onCancel={() => setDetailsModal({ visible: false, log: null })}\r        footer={null}\r        width={700}\r      >\r        {detailsModal.log && (\r          <div className=\"log-details\">\r            <Descriptions bordered column={2}>\r              <Descriptions.Item label=\"Log ID\" span={2}>\r                <Text copyable>{detailsModal.log.id}</Text>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Timestamp\" span={2}>\r                {dayjs(detailsModal.log.timestamp).format('DD/MM/YYYY HH:mm:ss')}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"User\">\r                <Space>\r                  <Avatar src={detailsModal.log.user.avatar} icon={<UserOutlined />} />\r                  {detailsModal.log.user.name}\r                </Space>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Email\">\r                {detailsModal.log.user.email}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Role\">\r                {detailsModal.log.user.role}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Tenant\">\r                {detailsModal.log.tenant?.name || 'N/A'}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Action\" span={2}>\r                <Space>\r                  {categoryIcons[detailsModal.log.category]}\r                  {detailsModal.log.action}\r                </Space>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Category\">\r                <Tag color={severityColors[detailsModal.log.severity]}>\r                  {detailsModal.log.category.toUpperCase()}\r                </Tag>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Severity\">\r                <Tag color={severityColors[detailsModal.log.severity]}>\r                  {detailsModal.log.severity.toUpperCase()}\r                </Tag>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Status\">\r                <Space>\r                  {statusIcons[detailsModal.log.status]}\r                  {detailsModal.log.status}\r                </Space>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Duration\">\r                {detailsModal.log.duration ? `${detailsModal.log.duration}ms` : 'N/A'}\r              </Descriptions.Item>\r              {detailsModal.log.resource && (\r                <>\r                  <Descriptions.Item label=\"Resource Type\">\r                    {detailsModal.log.resource.type}\r                  </Descriptions.Item>\r                  <Descriptions.Item label=\"Resource ID\">\r                    {detailsModal.log.resource.id}\r                  </Descriptions.Item>\r                </>\r              )}\r              <Descriptions.Item label=\"IP Address\">\r                {detailsModal.log.ip}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Device\">\r                <Space>\r                  {deviceIcons[detailsModal.log.device]}\r                  {detailsModal.log.device}\r                </Space>\r              </Descriptions.Item>\r              {detailsModal.log.location && (\r                <Descriptions.Item label=\"Location\" span={2}>\r                  <Space>\r                    <GlobalOutlined />\r                    {detailsModal.log.location.city}, {detailsModal.log.location.country}\r                  </Space>\r                </Descriptions.Item>\r              )}\r              <Descriptions.Item label=\"User Agent\" span={2}>\r                <Text style={{ fontSize: 12 }}>{detailsModal.log.userAgent}</Text>\r              </Descriptions.Item>\r            </Descriptions>\r            {detailsModal.log.details && (\r              <>\r                <Divider>Additional Details</Divider>\r                <pre style={{ background: '#f5f5f5', padding: 12, borderRadius: 4 }}>\r                  {JSON.stringify(detailsModal.log.details, null, 2)}\r                </pre>\r              </>\r            )}\r          </div>\r        )}\r      </Modal>\r      <Modal\r        title=\"Export Logs\"\r        visible={exportModal}\r        onOk={handleExport}\r        onCancel={() => setExportModal(false)}\r      >\r        <Space direction=\"vertical\" style={{ width: '100%' }}>\r          <div>\r            <Text strong>Export Format:</Text>\r            <Select\r              style={{ width: '100%', marginTop: 8 }}\r              value={exportOptions.format}\r              onChange={value = aria-label=\"select field\"> setExportOptions(prev => ({ ...prev, format: value }))}\r            >\r              <Option value=\"json\">JSON</Option>\r              <Option value=\"csv\">CSV</Option>\r            </Select>\r          </div>\r          <div>\r            <Checkbox\r              checked={exportOptions.includeDetails}\r              onChange={e => setExportOptions(prev => ({ ...prev, includeDetails: e.target.checked }))}\r            >\r              Include detailed information\r            </Checkbox>\r          </div>\r          <div>\r            <Checkbox\r              checked={exportOptions.dateRange}\r              onChange={e => setExportOptions(prev => ({ ...prev, dateRange: e.target.checked }))}\r            >\r              Apply current date range filter\r            </Checkbox>\r          </div>\r          {selectedLogs.length > 0 && (\r            <Alert\r              message={`${selectedLogs.length} logs selected for export`}\r              type=\"info\"\r              showIcon\r            />\r          )}\r        </Space>\r      </Modal>\r    </div>\r  );\r};\rexport default AuditLogs;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/AuditLogs/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Box,\r  Card,\r  CardContent,\r  Typography,\r  Button,\r  Grid,\r  List,\r  ListItem,\r  ListItemText,\r  ListItemIcon,\r  ListItemSecondaryAction,\r  IconButton,\r  Dialog,\r  DialogTitle,\r  DialogContent,\r  DialogActions,\r  TextField,\r  Select,\r  MenuItem,\r  FormControl,\r  InputLabel,\r  Alert,\r  CircularProgress,\r  Chip,\r  LinearProgress,\r  Paper,\r  Divider,\r  Tooltip,\r  Switch,\r  FormControlLabel,\r  Tab,\r  Tabs,\r  Badge,\r  Collapse,\r  Accordion,\r  AccordionSummary,\r  AccordionDetails,\r  SelectChangeEvent,\r  Table,\r  TableBody,\r  TableCell,\r  TableContainer,\r  TableHead,\r  TableRow,\r  TablePagination\r} from '@mui/material';\rimport {\r  Backup as BackupIcon,\r  Restore as RestoreIcon,\r  CloudUpload as CloudUploadIcon,\r  CloudDownload as CloudDownloadIcon,\r  Schedule as ScheduleIcon,\r  Delete as DeleteIcon,\r  Download as DownloadIcon,\r  Visibility as VisibilityIcon,\r  Settings as SettingsIcon,\r  Storage as StorageIcon,\r  CloudQueue as CloudIcon,\r  Check as CheckIcon,\r  Error as ErrorIcon,\r  Warning as WarningIcon,\r  Info as InfoIcon,\r  History as HistoryIcon,\r  PlayArrow as PlayIcon,\r  Stop as StopIcon,\r  ExpandMore as ExpandMoreIcon,\r  Folder as FolderIcon,\r  DataUsage as DataUsageIcon,\r  Timer as TimerIcon,\r  Security as SecurityIcon\r} from '@mui/icons-material';\rimport { useTheme } from '@mui/material/styles';\rimport { format, parseISO } from 'date-fns';\rimport { tr } from 'date-fns/locale';\rinterface BackupItem {\r  id: string;\r  name: string;\r  createdAt: string;\r  size: number;\r  type: 'full' | 'incremental' | 'differential';\r  status: 'completed' | 'in_progress' | 'failed' | 'pending';\r  location: 'local' | 'cloud' | 'external';\r  databases: string[];\r  encrypted: boolean;\r  compressed: boolean;\r  retention: number;\r  description?: string;\r  error?: string;\r}\rinterface BackupSchedule {\r  id: string;\r  name: string;\r  type: 'daily' | 'weekly' | 'monthly' | 'custom';\r  time: string;\r  enabled: boolean;\r  lastRun?: string;\r  nextRun: string;\r  backupType: 'full' | 'incremental' | 'differential';\r  retention: number;\r  databases: string[];\r  notifications: boolean;\r}\rinterface RestorePoint {\r  id: string;\r  backupId: string;\r  name: string;\r  timestamp: string;\r  databases: string[];\r  status: 'available' | 'restoring' | 'restored';\r  size: number;\r}\rinterface TabPanelProps {\r  children?: React.ReactNode;\r  index: number;\r  value: number;\r}\rfunction TabPanel(props: TabPanelProps) {\r  const { children, value, index, ...other } = props;\r  return (\r    <div role=\"tabpanel\" hidden={value !== index} {...other}>\r      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r    </div>\r  );\r}\rconst BackupManagement: React.FC = () => {\r  const theme = useTheme();\r  const [tabValue, setTabValue] = useState(0);\r  const [backups, setBackups] = useState<BackupItem[]>([]);\r  const [schedules, setSchedules] = useState<BackupSchedule[]>([]);\r  const [restorePoints, setRestorePoints] = useState<RestorePoint[]>([]);\r  const [loading, setLoading] = useState(false);\r  const [backupInProgress, setBackupInProgress] = useState(false);\r  const [selectedBackup, setSelectedBackup] = useState<BackupItem | null>(null);\r  const [openBackupDialog, setOpenBackupDialog] = useState(false);\r  const [openRestoreDialog, setOpenRestoreDialog] = useState(false);\r  const [openScheduleDialog, setOpenScheduleDialog] = useState(false);\r  const [openSettingsDialog, setOpenSettingsDialog] = useState(false);\r  const [page, setPage] = useState(0);\r  const [rowsPerPage, setRowsPerPage] = useState(10);\r  const [backupForm, setBackupForm] = useState({\r    name: '',\r    type: 'full' as 'full' | 'incremental' | 'differential',\r    databases: [] as string[],\r    location: 'local' as 'local' | 'cloud' | 'external',\r    encrypted: true,\r    compressed: true,\r    retention: 30,\r    description: ''\r  });\r  const [scheduleForm, setScheduleForm] = useState({\r    name: '',\r    type: 'daily' as 'daily' | 'weekly' | 'monthly' | 'custom',\r    time: '02:00',\r    enabled: true,\r    backupType: 'full' as 'full' | 'incremental' | 'differential',\r    retention: 30,\r    databases: [] as string[],\r    notifications: true\r  });\r  const [backupSettings, setBackupSettings] = useState({\r    autoBackup: true,\r    compressionLevel: 'medium',\r    encryptionMethod: 'AES-256',\r    maxBackupSize: 10,\r    cloudProvider: 'azure',\r    notificationEmail: 'admin@stocker.com',\r    retentionPolicy: 'tiered'\r  });\r  useEffect(() => {\r    loadBackups();\r    loadSchedules();\r    loadRestorePoints();\r  }, []);\r  const loadBackups = () => {\r    setLoading(true);\r    const mockBackups: BackupItem[] = [\r      {\r        id: '1',\r        name: 'Full Backup - 2024-01-15',\r        createdAt: '2024-01-15T03:00:00Z',\r        size: 2147483648,\r        type: 'full',\r        status: 'completed',\r        location: 'cloud',\r        databases: ['master', 'tenant_db_1', 'tenant_db_2'],\r        encrypted: true,\r        compressed: true,\r        retention: 30,\r        description: 'Scheduled full backup'\r      },\r      {\r        id: '2',\r        name: 'Incremental Backup - 2024-01-14',\r        createdAt: '2024-01-14T15:30:00Z',\r        size: 536870912,\r        type: 'incremental',\r        status: 'completed',\r        location: 'local',\r        databases: ['master'],\r        encrypted: true,\r        compressed: true,\r        retention: 7\r      },\r      {\r        id: '3',\r        name: 'Emergency Backup',\r        createdAt: '2024-01-14T10:00:00Z',\r        size: 1073741824,\r        type: 'full',\r        status: 'failed',\r        location: 'external',\r        databases: ['tenant_db_3'],\r        encrypted: false,\r        compressed: true,\r        retention: 90,\r        error: 'Storage connection timeout'\r      }\r    ];\r    setBackups(mockBackups);\r    setLoading(false);\r  };\r  const loadSchedules = () => {\r    const mockSchedules: BackupSchedule[] = [\r      {\r        id: '1',\r        name: 'Daily Full Backup',\r        type: 'daily',\r        time: '02:00',\r        enabled: true,\r        lastRun: '2024-01-14T02:00:00Z',\r        nextRun: '2024-01-15T02:00:00Z',\r        backupType: 'full',\r        retention: 30,\r        databases: ['master', 'all_tenants'],\r        notifications: true\r      },\r      {\r        id: '2',\r        name: 'Weekly Incremental',\r        type: 'weekly',\r        time: '03:00',\r        enabled: true,\r        nextRun: '2024-01-21T03:00:00Z',\r        backupType: 'incremental',\r        retention: 14,\r        databases: ['master'],\r        notifications: false\r      }\r    ];\r    setSchedules(mockSchedules);\r  };\r  const loadRestorePoints = () => {\r    const mockRestorePoints: RestorePoint[] = [\r      {\r        id: '1',\r        backupId: '1',\r        name: 'Restore Point - 2024-01-15',\r        timestamp: '2024-01-15T03:00:00Z',\r        databases: ['master', 'tenant_db_1'],\r        status: 'available',\r        size: 2147483648\r      },\r      {\r        id: '2',\r        backupId: '2',\r        name: 'Restore Point - 2024-01-14',\r        timestamp: '2024-01-14T15:30:00Z',\r        databases: ['master'],\r        status: 'available',\r        size: 536870912\r      }\r    ];\r    setRestorePoints(mockRestorePoints);\r  };\r  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {\r    setTabValue(newValue);\r  };\r  const handleCreateBackup = () => {\r    setBackupInProgress(true);\r    setTimeout(() => {\r      setBackupInProgress(false);\r      setOpenBackupDialog(false);\r      loadBackups();\r    }, 3000);\r  };\r  const handleRestore = (backup: BackupItem) => {\r    setSelectedBackup(backup);\r    setOpenRestoreDialog(true);\r  };\r  const handleDeleteBackup = (id: string) => {\r    setBackups(backups.filter(b => b.id !== id));\r  };\r  const formatFileSize = (bytes: number) => {\r    if (bytes === 0) return '0 Bytes';\r    const k = 1024;\r    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r    const i = Math.floor(Math.log(bytes) / Math.log(k));\r    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r  };\r  const getStatusColor = (status: string) => {\r    switch (status) {\r      case 'completed':\r      case 'available':\r      case 'restored':\r        return 'success';\r      case 'in_progress':\r      case 'restoring':\r        return 'warning';\r      case 'failed':\r        return 'error';\r      default:\r        return 'default';\r    }\r  };\r  const getLocationIcon = (location: string) => {\r    switch (location) {\r      case 'cloud':\r        return <CloudIcon />;\r      case 'local':\r        return <StorageIcon />;\r      case 'external':\r        return <FolderIcon />;\r      default:\r        return <StorageIcon />;\r    }\r  };\r  return (\r    <Box>\r      <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r        <Typography variant=\"h4\" fontWeight=\"bold\">\r          Backup ve Restore Yönetimi\r        </Typography>\r        <Box sx={{ display: 'flex', gap: 2 }}>\r          <Button\r            variant=\"outlined\"\r            startIcon={<SettingsIcon />}\r            onClick={() => setOpenSettingsDialog(true)}\r          >\r            Ayarlar\r          </Button>\r          <Button\r            variant=\"contained\"\r            startIcon={<BackupIcon />}\r            onClick={() => setOpenBackupDialog(true)}\r            disabled={backupInProgress}\r          >\r            Yeni Backup\r          </Button>\r        </Box>\r      </Box>\r      <Paper elevation={0} sx={{ mb: 3 }}>\r        <Grid container spacing={3}>\r          <Grid item xs={12} md={3}>\r            <Card>\r              <CardContent>\r                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r                  <StorageIcon sx={{ mr: 2, color: theme.palette.primary.main }} />\r                  <Typography variant=\"h6\">Toplam Backup</Typography>\r                </Box>\r                <Typography variant=\"h3\" fontWeight=\"bold\">\r                  {backups.length}\r                </Typography>\r                <Typography color=\"text.secondary\" variant=\"body2\">\r                  {backups.filter(b => b.status === 'completed').length} başarılı\r                </Typography>\r              </CardContent>\r            </Card>\r          </Grid>\r          <Grid item xs={12} md={3}>\r            <Card>\r              <CardContent>\r                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r                  <DataUsageIcon sx={{ mr: 2, color: theme.palette.warning.main }} />\r                  <Typography variant=\"h6\">Toplam Boyut</Typography>\r                </Box>\r                <Typography variant=\"h3\" fontWeight=\"bold\">\r                  {formatFileSize(backups.reduce((acc, b) => acc + b.size, 0))}\r                </Typography>\r                <Typography color=\"text.secondary\" variant=\"body2\">\r                  {backups.filter(b => b.location === 'cloud').length} bulutta\r                </Typography>\r              </CardContent>\r            </Card>\r          </Grid>\r          <Grid item xs={12} md={3}>\r            <Card>\r              <CardContent>\r                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r                  <ScheduleIcon sx={{ mr: 2, color: theme.palette.success.main }} />\r                  <Typography variant=\"h6\">Zamanlanmış</Typography>\r                </Box>\r                <Typography variant=\"h3\" fontWeight=\"bold\">\r                  {schedules.filter(s => s.enabled).length}\r                </Typography>\r                <Typography color=\"text.secondary\" variant=\"body2\">\r                  {schedules.length} toplam zamanlama\r                </Typography>\r              </CardContent>\r            </Card>\r          </Grid>\r          <Grid item xs={12} md={3}>\r            <Card>\r              <CardContent>\r                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r                  <RestoreIcon sx={{ mr: 2, color: theme.palette.info.main }} />\r                  <Typography variant=\"h6\">Restore Point</Typography>\r                </Box>\r                <Typography variant=\"h3\" fontWeight=\"bold\">\r                  {restorePoints.length}\r                </Typography>\r                <Typography color=\"text.secondary\" variant=\"body2\">\r                  {restorePoints.filter(r => r.status === 'available').length} kullanılabilir\r                </Typography>\r              </CardContent>\r            </Card>\r          </Grid>\r        </Grid>\r      </Paper>\r      <Paper>\r        <Tabs value={tabValue} onChange={handleTabChange} sx={{ borderBottom: 1, borderColor: 'divider' }}>\r          <Tab icon={<BackupIcon />} label=\"Backup Listesi\" />\r          <Tab icon={<ScheduleIcon />} label=\"Zamanlamalar\" />\r          <Tab icon={<RestoreIcon />} label=\"Restore Points\" />\r          <Tab icon={<HistoryIcon />} label=\"Geçmiş\" />\r        </Tabs>\r        <TabPanel value={tabValue} index={0}>\r          {loading ? (\r            <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\r              <CircularProgress />\r            </Box>\r          ) : (\r            <>\r              <TableContainer>\r                <Table>\r                  <TableHead>\r                    <TableRow>\r                      <TableCell>Backup Adı</TableCell>\r                      <TableCell>Tür</TableCell>\r                      <TableCell>Durum</TableCell>\r                      <TableCell>Boyut</TableCell>\r                      <TableCell>Konum</TableCell>\r                      <TableCell>Oluşturulma</TableCell>\r                      <TableCell>Özellikler</TableCell>\r                      <TableCell align=\"right\">İşlemler</TableCell>\r                    </TableRow>\r                  </TableHead>\r                  <TableBody>\r                    {backups\r                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r                      .map((backup) => (\r                        <TableRow key={backup.id}>\r                          <TableCell>\r                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r                              <BackupIcon sx={{ mr: 2, color: 'text.secondary' }} />\r                              <Box>\r                                <Typography variant=\"body1\">{backup.name}</Typography>\r                                {backup.description && (\r                                  <Typography variant=\"caption\" color=\"text.secondary\">\r                                    {backup.description}\r                                  </Typography>\r                                )}\r                              </Box>\r                            </Box>\r                          </TableCell>\r                          <TableCell>\r                            <Chip\r                              label={backup.type}\r                              size=\"small\"\r                              variant=\"outlined\"\r                            />\r                          </TableCell>\r                          <TableCell>\r                            <Chip\r                              label={backup.status}\r                              color={getStatusColor(backup.status) as any}\r                              size=\"small\"\r                            />\r                          </TableCell>\r                          <TableCell>{formatFileSize(backup.size)}</TableCell>\r                          <TableCell>\r                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r                              {getLocationIcon(backup.location)}\r                              <Typography sx={{ ml: 1 }} variant=\"body2\">\r                                {backup.location}\r                              </Typography>\r                            </Box>\r                          </TableCell>\r                          <TableCell>\r                            {format(parseISO(backup.createdAt), 'dd MMM yyyy HH:mm', { locale: tr })}\r                          </TableCell>\r                          <TableCell>\r                            <Box sx={{ display: 'flex', gap: 0.5 }}>\r                              {backup.encrypted && (\r                                <Tooltip title=\"Şifrelenmiş\">\r                                  <SecurityIcon fontSize=\"small\" color=\"success\" />\r                                </Tooltip>\r                              )}\r                              {backup.compressed && (\r                                <Tooltip title=\"Sıkıştırılmış\">\r                                  <DataUsageIcon fontSize=\"small\" color=\"primary\" />\r                                </Tooltip>\r                              )}\r                            </Box>\r                          </TableCell>\r                          <TableCell align=\"right\">\r                            <IconButton\r                              size=\"small\"\r                              onClick={() => handleRestore(backup)}\r                              disabled={backup.status !== 'completed'}\r                            >\r                              <RestoreIcon />\r                            </IconButton>\r                            <IconButton size=\"small\">\r                              <DownloadIcon />\r                            </IconButton>\r                            <IconButton\r                              size=\"small\"\r                              onClick={() => handleDeleteBackup(backup.id)}\r                            >\r                              <DeleteIcon />\r                            </IconButton>\r                          </TableCell>\r                        </TableRow>\r                      ))}\r                  </TableBody>\r                </Table>\r              </TableContainer>\r              <TablePagination\r                rowsPerPageOptions={[5, 10, 25]}\r                component=\"div\"\r                count={backups.length}\r                rowsPerPage={rowsPerPage}\r                page={page}\r                onPageChange={(_e, newPage) => setPage(newPage)}\r                onRowsPerPageChange={(e) => {\r                  setRowsPerPage(parseInt(e.target.value, 10));\r                  setPage(0);\r                }}\r              />\r            </>\r          )}\r        </TabPanel>\r        <TabPanel value={tabValue} index={1}>\r          <Box sx={{ mb: 2, display: 'flex', justifyContent: 'flex-end' }}>\r            <Button\r              variant=\"contained\"\r              startIcon={<ScheduleIcon />}\r              onClick={() => setOpenScheduleDialog(true)}\r            >\r              Yeni Zamanlama\r            </Button>\r          </Box>\r          <List>\r            {schedules.map((schedule) => (\r              <ListItem key={schedule.id} sx={{ border: 1, borderColor: 'divider', borderRadius: 1, mb: 1 }}>\r                <ListItemIcon>\r                  <ScheduleIcon />\r                </ListItemIcon>\r                <ListItemText\r                  primary={\r                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r                      <Typography variant=\"body1\">{schedule.name}</Typography>\r                      <Chip\r                        label={schedule.type}\r                        size=\"small\"\r                        variant=\"outlined\"\r                      />\r                      <Chip\r                        label={schedule.backupType}\r                        size=\"small\"\r                        color=\"primary\"\r                        variant=\"outlined\"\r                      />\r                    </Box>\r                  }\r                  secondary={\r                    <Box>\r                      <Typography variant=\"body2\" color=\"text.secondary\">\r                        Saat: {schedule.time} | Sonraki: {format(parseISO(schedule.nextRun), 'dd MMM yyyy HH:mm', { locale: tr })}\r                      </Typography>\r                      {schedule.lastRun && (\r                        <Typography variant=\"caption\" color=\"text.secondary\">\r                          Son çalışma: {format(parseISO(schedule.lastRun), 'dd MMM yyyy HH:mm', { locale: tr })}\r                        </Typography>\r                      )}\r                    </Box>\r                  }\r                />\r                <ListItemSecondaryAction>\r                  <Switch\r                    checked={schedule.enabled}\r                    onChange={() => {}}\r                  />\r                  <IconButton size=\"small\">\r                    <PlayIcon />\r                  </IconButton>\r                  <IconButton size=\"small\">\r                    <DeleteIcon />\r                  </IconButton>\r                </ListItemSecondaryAction>\r              </ListItem>\r            ))}\r          </List>\r        </TabPanel>\r        <TabPanel value={tabValue} index={2}>\r          <List>\r            {restorePoints.map((point) => (\r              <ListItem key={point.id} sx={{ border: 1, borderColor: 'divider', borderRadius: 1, mb: 1 }}>\r                <ListItemIcon>\r                  <RestoreIcon />\r                </ListItemIcon>\r                <ListItemText\r                  primary={point.name}\r                  secondary={\r                    <Box>\r                      <Typography variant=\"body2\" color=\"text.secondary\">\r                        {format(parseISO(point.timestamp), 'dd MMM yyyy HH:mm', { locale: tr })} | {formatFileSize(point.size)}\r                      </Typography>\r                      <Box sx={{ display: 'flex', gap: 0.5, mt: 0.5 }}>\r                        {point.databases.map(db => (\r                          <Chip key={db} label={db} size=\"small\" />\r                        ))}\r                      </Box>\r                    </Box>\r                  }\r                />\r                <ListItemSecondaryAction>\r                  <Chip\r                    label={point.status}\r                    color={getStatusColor(point.status) as any}\r                    size=\"small\"\r                    sx={{ mr: 2 }}\r                  />\r                  <Button\r                    variant=\"contained\"\r                    size=\"small\"\r                    startIcon={<RestoreIcon />}\r                    disabled={point.status !== 'available'}\r                  >\r                    Restore Et\r                  </Button>\r                </ListItemSecondaryAction>\r              </ListItem>\r            ))}\r          </List>\r        </TabPanel>\r        <TabPanel value={tabValue} index={3}>\r          <Typography variant=\"body1\" color=\"text.secondary\">\r            Backup ve restore geçmişi burada görüntülenecek...\r          </Typography>\r        </TabPanel>\r      </Paper>\r      {/* Backup Dialog */}\r      <Dialog open={openBackupDialog} onClose={() => setOpenBackupDialog(false)} maxWidth=\"md\" fullWidth>\r        <DialogTitle>Yeni Backup Oluştur</DialogTitle>\r        <DialogContent>\r          <Grid container spacing={2} sx={{ mt: 1 }}>\r            <Grid item xs={12}>\r              <TextField\r                fullWidth\r                label=\"Backup Adı\"\r                value={backupForm.name}\r                onChange={(e) => setBackupForm({ ...backupForm, name: e.target.value })}\r              />\r            </Grid>\r            <Grid item xs={6}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Backup Türü</InputLabel>\r                <Select\r                  value={backupForm.type}\r                  label=\"Backup Türü\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setBackupForm({ ...backupForm, type: e.target.value as any })}\r                >\r                  <MenuItem value=\"full\">Full Backup</MenuItem>\r                  <MenuItem value=\"incremental\">Incremental</MenuItem>\r                  <MenuItem value=\"differential\">Differential</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={6}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Konum</InputLabel>\r                <Select\r                  value={backupForm.location}\r                  label=\"Konum\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setBackupForm({ ...backupForm, location: e.target.value as any })}\r                >\r                  <MenuItem value=\"local\">Yerel</MenuItem>\r                  <MenuItem value=\"cloud\">Bulut</MenuItem>\r                  <MenuItem value=\"external\">Harici</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={12}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Veritabanları</InputLabel>\r                <Select\r                  multiple\r                  value={backupForm.databases}\r                  label=\"Veritabanları\"\r                  onChange={(e: SelectChangeEvent<string[] aria-label=\"select field\">) => setBackupForm({ ...backupForm, databases: e.target.value as string[] })}\r                >\r                  <MenuItem value=\"master\">Master DB</MenuItem>\r                  <MenuItem value=\"tenant_db_1\">Tenant DB 1</MenuItem>\r                  <MenuItem value=\"tenant_db_2\">Tenant DB 2</MenuItem>\r                  <MenuItem value=\"all_tenants\">Tüm Tenant DB'ler</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={6}>\r              <FormControlLabel\r                control={\r                  <Switch\r                    checked={backupForm.encrypted}\r                    onChange={(e) => setBackupForm({ ...backupForm, encrypted: e.target.checked })}\r                  />\r                }\r                label=\"Şifreleme\"\r              />\r            </Grid>\r            <Grid item xs={6}>\r              <FormControlLabel\r                control={\r                  <Switch\r                    checked={backupForm.compressed}\r                    onChange={(e) => setBackupForm({ ...backupForm, compressed: e.target.checked })}\r                  />\r                }\r                label=\"Sıkıştırma\"\r              />\r            </Grid>\r            <Grid item xs={12}>\r              <TextField\r                fullWidth\r                label=\"Açıklama\"\r                multiline\r                rows={3}\r                value={backupForm.description}\r                onChange={(e) => setBackupForm({ ...backupForm, description: e.target.value })}\r              />\r            </Grid>\r          </Grid>\r        </DialogContent>\r        <DialogActions>\r          <Button onClick={() => setOpenBackupDialog(false)}>İptal</Button>\r          <Button\r            variant=\"contained\"\r            onClick={handleCreateBackup}\r            startIcon={backupInProgress ? <CircularProgress size={20} /> : <BackupIcon />}\r            disabled={backupInProgress}\r          >\r            {backupInProgress ? 'Oluşturuluyor...' : 'Backup Oluştur'}\r          </Button>\r        </DialogActions>\r      </Dialog>\r      {/* Restore Dialog */}\r      <Dialog open={openRestoreDialog} onClose={() => setOpenRestoreDialog(false)} maxWidth=\"sm\" fullWidth>\r        <DialogTitle>Restore İşlemi</DialogTitle>\r        <DialogContent>\r          {selectedBackup && (\r            <Box>\r              <Alert severity=\"warning\" sx={{ mb: 2 }}>\r                Bu işlem mevcut verilerin üzerine yazacaktır. Devam etmeden önce mevcut verileri yedeklediğinizden emin olun.\r              </Alert>\r              <Typography variant=\"body1\" sx={{ mb: 2 }}>\r                <strong>Backup:</strong> {selectedBackup.name}\r              </Typography>\r              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r                <strong>Tarih:</strong> {format(parseISO(selectedBackup.createdAt), 'dd MMM yyyy HH:mm', { locale: tr })}\r              </Typography>\r              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\r                <strong>Boyut:</strong> {formatFileSize(selectedBackup.size)}\r              </Typography>\r              <Typography variant=\"body2\" color=\"text.secondary\">\r                <strong>Veritabanları:</strong> {selectedBackup.databases.join(', ')}\r              </Typography>\r            </Box>\r          )}\r        </DialogContent>\r        <DialogActions>\r          <Button onClick={() => setOpenRestoreDialog(false)}>İptal</Button>\r          <Button variant=\"contained\" color=\"warning\" startIcon={<RestoreIcon />}>\r            Restore Başlat\r          </Button>\r        </DialogActions>\r      </Dialog>\r      {/* Schedule Dialog */}\r      <Dialog open={openScheduleDialog} onClose={() => setOpenScheduleDialog(false)} maxWidth=\"sm\" fullWidth>\r        <DialogTitle>Yeni Zamanlama</DialogTitle>\r        <DialogContent>\r          <Grid container spacing={2} sx={{ mt: 1 }}>\r            <Grid item xs={12}>\r              <TextField\r                fullWidth\r                label=\"Zamanlama Adı\"\r                value={scheduleForm.name}\r                onChange={(e) => setScheduleForm({ ...scheduleForm, name: e.target.value })}\r              />\r            </Grid>\r            <Grid item xs={6}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Periyot</InputLabel>\r                <Select\r                  value={scheduleForm.type}\r                  label=\"Periyot\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setScheduleForm({ ...scheduleForm, type: e.target.value as any })}\r                >\r                  <MenuItem value=\"daily\">Günlük</MenuItem>\r                  <MenuItem value=\"weekly\">Haftalık</MenuItem>\r                  <MenuItem value=\"monthly\">Aylık</MenuItem>\r                  <MenuItem value=\"custom\">Özel</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={6}>\r              <TextField\r                fullWidth\r                label=\"Saat\"\r                type=\"time\"\r                value={scheduleForm.time}\r                onChange={(e) => setScheduleForm({ ...scheduleForm, time: e.target.value })}\r                InputLabelProps={{ shrink: true }}\r              />\r            </Grid>\r            <Grid item xs={12}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Backup Türü</InputLabel>\r                <Select\r                  value={scheduleForm.backupType}\r                  label=\"Backup Türü\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setScheduleForm({ ...scheduleForm, backupType: e.target.value as any })}\r                >\r                  <MenuItem value=\"full\">Full Backup</MenuItem>\r                  <MenuItem value=\"incremental\">Incremental</MenuItem>\r                  <MenuItem value=\"differential\">Differential</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={12}>\r              <FormControlLabel\r                control={\r                  <Switch\r                    checked={scheduleForm.enabled}\r                    onChange={(e) => setScheduleForm({ ...scheduleForm, enabled: e.target.checked })}\r                  />\r                }\r                label=\"Aktif\"\r              />\r              <FormControlLabel\r                control={\r                  <Switch\r                    checked={scheduleForm.notifications}\r                    onChange={(e) => setScheduleForm({ ...scheduleForm, notifications: e.target.checked })}\r                  />\r                }\r                label=\"Bildirimler\"\r              />\r            </Grid>\r          </Grid>\r        </DialogContent>\r        <DialogActions>\r          <Button onClick={() => setOpenScheduleDialog(false)}>İptal</Button>\r          <Button variant=\"contained\" startIcon={<ScheduleIcon />}>\r            Zamanlama Oluştur\r          </Button>\r        </DialogActions>\r      </Dialog>\r      {/* Settings Dialog */}\r      <Dialog open={openSettingsDialog} onClose={() => setOpenSettingsDialog(false)} maxWidth=\"md\" fullWidth>\r        <DialogTitle>Backup Ayarları</DialogTitle>\r        <DialogContent>\r          <Grid container spacing={2} sx={{ mt: 1 }}>\r            <Grid item xs={12}>\r              <FormControlLabel\r                control={\r                  <Switch\r                    checked={backupSettings.autoBackup}\r                    onChange={(e) => setBackupSettings({ ...backupSettings, autoBackup: e.target.checked })}\r                  />\r                }\r                label=\"Otomatik Backup\"\r              />\r            </Grid>\r            <Grid item xs={6}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Sıkıştırma Seviyesi</InputLabel>\r                <Select\r                  value={backupSettings.compressionLevel}\r                  label=\"Sıkıştırma Seviyesi\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setBackupSettings({ ...backupSettings, compressionLevel: e.target.value })}\r                >\r                  <MenuItem value=\"none\">Yok</MenuItem>\r                  <MenuItem value=\"low\">Düşük</MenuItem>\r                  <MenuItem value=\"medium\">Orta</MenuItem>\r                  <MenuItem value=\"high\">Yüksek</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={6}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Şifreleme Metodu</InputLabel>\r                <Select\r                  value={backupSettings.encryptionMethod}\r                  label=\"Şifreleme Metodu\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setBackupSettings({ ...backupSettings, encryptionMethod: e.target.value })}\r                >\r                  <MenuItem value=\"none\">Yok</MenuItem>\r                  <MenuItem value=\"AES-128\">AES-128</MenuItem>\r                  <MenuItem value=\"AES-256\">AES-256</MenuItem>\r                  <MenuItem value=\"RSA\">RSA</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={6}>\r              <TextField\r                fullWidth\r                label=\"Max Backup Boyutu (GB)\"\r                type=\"number\"\r                value={backupSettings.maxBackupSize}\r                onChange={(e) => setBackupSettings({ ...backupSettings, maxBackupSize: parseInt(e.target.value) })}\r              />\r            </Grid>\r            <Grid item xs={6}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Bulut Sağlayıcı</InputLabel>\r                <Select\r                  value={backupSettings.cloudProvider}\r                  label=\"Bulut Sağlayıcı\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setBackupSettings({ ...backupSettings, cloudProvider: e.target.value })}\r                >\r                  <MenuItem value=\"azure\">Azure</MenuItem>\r                  <MenuItem value=\"aws\">AWS S3</MenuItem>\r                  <MenuItem value=\"gcp\">Google Cloud</MenuItem>\r                  <MenuItem value=\"local\">Yerel</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={12}>\r              <TextField\r                fullWidth\r                label=\"Bildirim Email\"\r                type=\"email\"\r                value={backupSettings.notificationEmail}\r                onChange={(e) => setBackupSettings({ ...backupSettings, notificationEmail: e.target.value })}\r              />\r            </Grid>\r            <Grid item xs={12}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Saklama Politikası</InputLabel>\r                <Select\r                  value={backupSettings.retentionPolicy}\r                  label=\"Saklama Politikası\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setBackupSettings({ ...backupSettings, retentionPolicy: e.target.value })}\r                >\r                  <MenuItem value=\"tiered\">Kademeli</MenuItem>\r                  <MenuItem value=\"fixed\">Sabit</MenuItem>\r                  <MenuItem value=\"custom\">Özel</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r          </Grid>\r        </DialogContent>\r        <DialogActions>\r          <Button onClick={() => setOpenSettingsDialog(false)}>İptal</Button>\r          <Button variant=\"contained\" startIcon={<SettingsIcon />}>\r            Ayarları Kaydet\r          </Button>\r        </DialogActions>\r      </Dialog>\r    </Box>\r  );\r};\r// Export both the old and new versions\rexport default BackupManagement;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Backup/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useMemo } from 'react';\rimport {\r  Card,\r  Table,\r  Button,\r  Space,\r  Tag,\r  Typography,\r  Row,\r  Col,\r  Statistic,\r  Select,\r  DatePicker,\r  Input,\r  Dropdown,\r  Modal,\r  Form,\r  InputNumber,\r  Tabs,\r  Progress,\r  Timeline,\r  Badge,\r  Alert,\r  Descriptions,\r  List,\r  Avatar,\r  Tooltip,\r  message,\r  Divider,\r} from 'antd';\rimport {\r  DollarOutlined,\r  FileTextOutlined,\r  CreditCardOutlined,\r  CalendarOutlined,\r  DownloadOutlined,\r  PrinterOutlined,\r  MailOutlined,\r  FilterOutlined,\r  PlusOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  EyeOutlined,\r  CheckCircleOutlined,\r  ClockCircleOutlined,\r  ExclamationCircleOutlined,\r  CloudDownloadOutlined,\r  ReloadOutlined,\r  BankOutlined,\r  PayCircleOutlined,\r  HistoryOutlined,\r  RiseOutlined,\r  FallOutlined,\r  ShoppingCartOutlined,\r} from '@ant-design/icons';\rimport type { ColumnsType } from 'antd/es/table';\rimport { Line, Bar, Pie } from '@ant-design/charts';\rimport dayjs from 'dayjs';\rconst { Title, Text, Paragraph } = Typography;\rconst { RangePicker } = DatePicker;\rconst { TabPane } = Tabs;\rconst { Option } = Select;\rinterface Invoice {\r  id: string;\r  invoiceNumber: string;\r  tenantId: string;\r  tenantName: string;\r  amount: number;\r  tax: number;\r  total: number;\r  status: 'paid' | 'pending' | 'overdue' | 'cancelled' | 'draft';\r  dueDate: string;\r  issueDate: string;\r  paymentDate?: string;\r  paymentMethod?: string;\r  items: InvoiceItem[];\r  currency: string;\r}\rinterface InvoiceItem {\r  id: string;\r  description: string;\r  quantity: number;\r  unitPrice: number;\r  total: number;\r}\rinterface Subscription {\r  id: string;\r  tenantId: string;\r  tenantName: string;\r  plan: string;\r  status: 'active' | 'cancelled' | 'expired' | 'trial';\r  startDate: string;\r  endDate: string;\r  nextBillingDate: string;\r  amount: number;\r  billingCycle: 'monthly' | 'yearly';\r  features: string[];\r  usage: {\r    users: { current: number; limit: number };\r    storage: { current: number; limit: number };\r    api: { current: number; limit: number };\r  };\r}\rinterface Payment {\r  id: string;\r  invoiceId: string;\r  amount: number;\r  method: string;\r  status: 'success' | 'pending' | 'failed';\r  date: string;\r  transactionId: string;\r  tenantName: string;\r}\rconst BillingPage: React.FC = () => {\r  const [activeTab, setActiveTab] = useState('invoices');\r  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);\r  const [invoiceModalVisible, setInvoiceModalVisible] = useState(false);\r  const [subscriptionModalVisible, setSubscriptionModalVisible] = useState(false);\r  const [selectedRows, setSelectedRows] = useState<string[]>([]);\r  const [filters, setFilters] = useState({\r    status: 'all',\r    dateRange: null as any,\r    search: '',\r  });\r  // Mock data\r  const invoices: Invoice[] = [\r    {\r      id: '1',\r      invoiceNumber: 'INV-2024-001',\r      tenantId: 't1',\r      tenantName: 'ABC Şirketi',\r      amount: 2500,\r      tax: 450,\r      total: 2950,\r      status: 'paid',\r      dueDate: '2024-01-15',\r      issueDate: '2024-01-01',\r      paymentDate: '2024-01-10',\r      paymentMethod: 'Kredi Kartı',\r      currency: 'TRY',\r      items: [\r        { id: '1', description: 'Premium Plan - Aylık', quantity: 1, unitPrice: 2000, total: 2000 },\r        { id: '2', description: 'Ek Kullanıcı (5)', quantity: 5, unitPrice: 100, total: 500 },\r      ],\r    },\r    {\r      id: '2',\r      invoiceNumber: 'INV-2024-002',\r      tenantId: 't2',\r      tenantName: 'XYZ Teknoloji',\r      amount: 5000,\r      tax: 900,\r      total: 5900,\r      status: 'pending',\r      dueDate: '2024-01-20',\r      issueDate: '2024-01-05',\r      currency: 'TRY',\r      items: [\r        { id: '3', description: 'Enterprise Plan - Aylık', quantity: 1, unitPrice: 5000, total: 5000 },\r      ],\r    },\r    {\r      id: '3',\r      invoiceNumber: 'INV-2024-003',\r      tenantId: 't3',\r      tenantName: 'Demo Firma',\r      amount: 1500,\r      tax: 270,\r      total: 1770,\r      status: 'overdue',\r      dueDate: '2024-01-10',\r      issueDate: '2023-12-25',\r      currency: 'TRY',\r      items: [\r        { id: '4', description: 'Standard Plan - Aylık', quantity: 1, unitPrice: 1500, total: 1500 },\r      ],\r    },\r  ];\r  const subscriptions: Subscription[] = [\r    {\r      id: '1',\r      tenantId: 't1',\r      tenantName: 'ABC Şirketi',\r      plan: 'Premium',\r      status: 'active',\r      startDate: '2023-01-01',\r      endDate: '2024-01-01',\r      nextBillingDate: '2024-02-01',\r      amount: 2000,\r      billingCycle: 'monthly',\r      features: ['Sınırsız kullanıcı', '100GB depolama', 'Özel destek', 'API erişimi'],\r      usage: {\r        users: { current: 25, limit: -1 },\r        storage: { current: 45, limit: 100 },\r        api: { current: 15000, limit: 50000 },\r      },\r    },\r    {\r      id: '2',\r      tenantId: 't2',\r      tenantName: 'XYZ Teknoloji',\r      plan: 'Enterprise',\r      status: 'active',\r      startDate: '2023-06-01',\r      endDate: '2024-06-01',\r      nextBillingDate: '2024-02-01',\r      amount: 5000,\r      billingCycle: 'monthly',\r      features: ['Sınırsız kullanıcı', 'Sınırsız depolama', '7/24 destek', 'Özel API limiti'],\r      usage: {\r        users: { current: 150, limit: -1 },\r        storage: { current: 500, limit: -1 },\r        api: { current: 125000, limit: -1 },\r      },\r    },\r  ];\r  const payments: Payment[] = [\r    {\r      id: '1',\r      invoiceId: '1',\r      amount: 2950,\r      method: 'Kredi Kartı',\r      status: 'success',\r      date: '2024-01-10',\r      transactionId: 'TRX-2024-001',\r      tenantName: 'ABC Şirketi',\r    },\r    {\r      id: '2',\r      invoiceId: '2',\r      amount: 5900,\r      method: 'Banka Transferi',\r      status: 'pending',\r      date: '2024-01-15',\r      transactionId: 'TRX-2024-002',\r      tenantName: 'XYZ Teknoloji',\r    },\r  ];\r  // Statistics\r  const stats = useMemo(() => {\r    const totalRevenue = invoices\r      .filter(inv => inv.status === 'paid')\r      .reduce((sum, inv) => sum + inv.total, 0);\r    const pendingAmount = invoices\r      .filter(inv => inv.status === 'pending')\r      .reduce((sum, inv) => sum + inv.total, 0);\r    const overdueAmount = invoices\r      .filter(inv => inv.status === 'overdue')\r      .reduce((sum, inv) => sum + inv.total, 0);\r    const activeSubscriptions = subscriptions.filter(sub => sub.status === 'active').length;\r    return {\r      totalRevenue,\r      pendingAmount,\r      overdueAmount,\r      activeSubscriptions,\r      totalInvoices: invoices.length,\r      paidInvoices: invoices.filter(inv => inv.status === 'paid').length,\r    };\r  }, [invoices, subscriptions]);\r  // Invoice columns\r  const invoiceColumns: ColumnsType<Invoice> = [\r    {\r      title: 'Fatura No',\r      dataIndex: 'invoiceNumber',\r      key: 'invoiceNumber',\r      render: (text, record) => (\r        <Button type=\"link\" onClick={() => handleViewInvoice(record)}>\r          {text}\r        </Button>\r      ),\r    },\r    {\r      title: 'Müşteri',\r      dataIndex: 'tenantName',\r      key: 'tenantName',\r      render: (text) => (\r        <Space>\r          <Avatar size=\"small\" style={{ backgroundColor: '#1890ff' }}>\r            {text[0]}\r          </Avatar>\r          {text}\r        </Space>\r      ),\r    },\r    {\r      title: 'Tutar',\r      dataIndex: 'total',\r      key: 'total',\r      render: (value, record) => (\r        <Text strong>\r          {value.toLocaleString('tr-TR')} {record.currency}\r        </Text>\r      ),\r      sorter: (a, b) => a.total - b.total,\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status: string) => {\r        const statusConfig = {\r          paid: { color: 'success', text: 'Ödendi', icon: <CheckCircleOutlined /> },\r          pending: { color: 'processing', text: 'Bekliyor', icon: <ClockCircleOutlined /> },\r          overdue: { color: 'error', text: 'Gecikmiş', icon: <ExclamationCircleOutlined /> },\r          cancelled: { color: 'default', text: 'İptal', icon: <DeleteOutlined /> },\r          draft: { color: 'default', text: 'Taslak', icon: <EditOutlined /> },\r        };\r        const config = statusConfig[status as keyof typeof statusConfig];\r        return (\r          <Tag color={config.color} icon={config.icon}>\r            {config.text}\r          </Tag>\r        );\r      },\r      filters: [\r        { text: 'Ödendi', value: 'paid' },\r        { text: 'Bekliyor', value: 'pending' },\r        { text: 'Gecikmiş', value: 'overdue' },\r      ],\r    },\r    {\r      title: 'Vade Tarihi',\r      dataIndex: 'dueDate',\r      key: 'dueDate',\r      render: (date) => dayjs(date).format('DD/MM/YYYY'),\r      sorter: (a, b) => dayjs(a.dueDate).unix() - dayjs(b.dueDate).unix(),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      render: (_, record) => (\r        <Space>\r          <Tooltip title=\"Görüntüle\">\r            <Button icon={<EyeOutlined />} size=\"small\" onClick={() = aria-label=\"eye outlined\"> handleViewInvoice(record)} />\r          </Tooltip>\r          <Tooltip title=\"İndir\">\r            <Button icon={<DownloadOutlined />} size=\"small\" onClick={() = aria-label=\"download outlined\"> handleDownloadInvoice(record)} />\r          </Tooltip>\r          <Tooltip title=\"E-posta Gönder\">\r            <Button icon={<MailOutlined />} size=\"small\" onClick={() = aria-label=\"mail outlined\"> handleSendInvoice(record)} />\r          </Tooltip>\r          <Dropdown\r            menu={{\r              items: [\r                { key: 'edit', label: 'Düzenle', icon: <EditOutlined /> },\r                { key: 'duplicate', label: 'Kopyala', icon: <FileTextOutlined /> },\r                { key: 'cancel', label: 'İptal Et', icon: <DeleteOutlined />, danger: true },\r              ],\r            }}\r          >\r            <Button size=\"small\">Daha Fazla</Button>\r          </Dropdown>\r        </Space>\r      ),\r    },\r  ];\r  // Subscription columns\r  const subscriptionColumns: ColumnsType<Subscription> = [\r    {\r      title: 'Müşteri',\r      dataIndex: 'tenantName',\r      key: 'tenantName',\r      render: (text) => (\r        <Space>\r          <Avatar size=\"small\" style={{ backgroundColor: '#52c41a' }}>\r            {text[0]}\r          </Avatar>\r          {text}\r        </Space>\r      ),\r    },\r    {\r      title: 'Plan',\r      dataIndex: 'plan',\r      key: 'plan',\r      render: (plan) => (\r        <Tag color=\"blue\">{plan}</Tag>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status: string) => {\r        const statusConfig = {\r          active: { color: 'success', text: 'Aktif' },\r          cancelled: { color: 'error', text: 'İptal' },\r          expired: { color: 'warning', text: 'Süresi Dolmuş' },\r          trial: { color: 'processing', text: 'Deneme' },\r        };\r        const config = statusConfig[status as keyof typeof statusConfig];\r        return <Tag color={config.color}>{config.text}</Tag>;\r      },\r    },\r    {\r      title: 'Fatura Dönemi',\r      dataIndex: 'billingCycle',\r      key: 'billingCycle',\r      render: (cycle) => (cycle === 'monthly' ? 'Aylık' : 'Yıllık'),\r    },\r    {\r      title: 'Tutar',\r      dataIndex: 'amount',\r      key: 'amount',\r      render: (value) => `${value.toLocaleString('tr-TR')} TRY`,\r    },\r    {\r      title: 'Sonraki Fatura',\r      dataIndex: 'nextBillingDate',\r      key: 'nextBillingDate',\r      render: (date) => dayjs(date).format('DD/MM/YYYY'),\r    },\r    {\r      title: 'Kullanım',\r      key: 'usage',\r      render: (_, record) => (\r        <Space direction=\"vertical\" size={0}>\r          <Text type=\"secondary\" style={{ fontSize: '12px' }}>\r            Kullanıcı: {record.usage.users.current}/{record.usage.users.limit === -1 ? '∞' : record.usage.users.limit}\r          </Text>\r          <Text type=\"secondary\" style={{ fontSize: '12px' }}>\r            Depolama: {record.usage.storage.current}GB/{record.usage.storage.limit === -1 ? '∞' : record.usage.storage.limit + 'GB'}\r          </Text>\r        </Space>\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      render: (_, record) => (\r        <Space>\r          <Button size=\"small\">Yönet</Button>\r          <Dropdown\r            menu={{\r              items: [\r                { key: 'upgrade', label: 'Yükselt', icon: <RiseOutlined /> },\r                { key: 'downgrade', label: 'Düşür', icon: <FallOutlined /> },\r                { key: 'cancel', label: 'İptal Et', icon: <DeleteOutlined />, danger: true },\r              ],\r            }}\r          >\r            <Button size=\"small\">Daha Fazla</Button>\r          </Dropdown>\r        </Space>\r      ),\r    },\r  ];\r  // Payment columns\r  const paymentColumns: ColumnsType<Payment> = [\r    {\r      title: 'İşlem No',\r      dataIndex: 'transactionId',\r      key: 'transactionId',\r    },\r    {\r      title: 'Müşteri',\r      dataIndex: 'tenantName',\r      key: 'tenantName',\r    },\r    {\r      title: 'Tutar',\r      dataIndex: 'amount',\r      key: 'amount',\r      render: (value) => `${value.toLocaleString('tr-TR')} TRY`,\r    },\r    {\r      title: 'Ödeme Yöntemi',\r      dataIndex: 'method',\r      key: 'method',\r      render: (method) => (\r        <Tag icon={method === 'Kredi Kartı' ? <CreditCardOutlined /> : <BankOutlined />}>\r          {method}\r        </Tag>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status: string) => {\r        const statusConfig = {\r          success: { color: 'success', text: 'Başarılı' },\r          pending: { color: 'processing', text: 'Bekliyor' },\r          failed: { color: 'error', text: 'Başarısız' },\r        };\r        const config = statusConfig[status as keyof typeof statusConfig];\r        return <Tag color={config.color}>{config.text}</Tag>;\r      },\r    },\r    {\r      title: 'Tarih',\r      dataIndex: 'date',\r      key: 'date',\r      render: (date) => dayjs(date).format('DD/MM/YYYY HH:mm'),\r    },\r  ];\r  // Handlers\r  const handleViewInvoice = (invoice: Invoice) => {\r    setSelectedInvoice(invoice);\r    setInvoiceModalVisible(true);\r  };\r  const handleDownloadInvoice = (invoice: Invoice) => {\r    message.success(`${invoice.invoiceNumber} indirildi`);\r  };\r  const handleSendInvoice = (invoice: Invoice) => {\r    message.success(`${invoice.invoiceNumber} e-posta ile gönderildi`);\r  };\r  const handleCreateInvoice = () => {\r    // Create invoice logic\r    message.success('Yeni fatura oluşturuldu');\r  };\r  const handleBulkAction = (action: string) => {\r    message.info(`${selectedRows.length} fatura için ${action} işlemi yapılıyor`);\r  };\r  // Revenue chart data\r  const revenueData = [\r    { month: 'Ocak', value: 45000 },\r    { month: 'Şubat', value: 52000 },\r    { month: 'Mart', value: 48000 },\r    { month: 'Nisan', value: 61000 },\r    { month: 'Mayıs', value: 55000 },\r    { month: 'Haziran', value: 67000 },\r  ];\r  const revenueConfig = {\r    data: revenueData,\r    xField: 'month',\r    yField: 'value',\r    smooth: true,\r    point: { size: 3 },\r    tooltip: {\r      formatter: (datum: any) => ({\r        name: 'Gelir',\r        value: `${datum.value.toLocaleString('tr-TR')} TRY`,\r      }),\r    },\r  };\r  return (\r    <div style={{ padding: '24px' }}>\r      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\r        <Col span={24}>\r          <Title level={2}>\r            <DollarOutlined /> Faturalama ve Ödemeler\r          </Title>\r        </Col>\r      </Row>\r      {/* Statistics Cards */}\r      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\r        <Col xs={24} sm={12} lg={6}>\r          <Card>\r            <Statistic\r              title=\"Toplam Gelir\"\r              value={stats.totalRevenue}\r              suffix=\"TRY\"\r              valueStyle={{ color: '#52c41a' }}\r              prefix={<DollarOutlined />}\r            />\r            <Progress percent={75} strokeColor=\"#52c41a\" showInfo={false} />\r            <Text type=\"secondary\">Son 30 gün</Text>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card>\r            <Statistic\r              title=\"Bekleyen Ödemeler\"\r              value={stats.pendingAmount}\r              suffix=\"TRY\"\r              valueStyle={{ color: '#1890ff' }}\r              prefix={<ClockCircleOutlined />}\r            />\r            <Progress percent={30} strokeColor=\"#1890ff\" showInfo={false} />\r            <Text type=\"secondary\">{invoices.filter(inv => inv.status === 'pending').length} fatura</Text>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card>\r            <Statistic\r              title=\"Gecikmiş Ödemeler\"\r              value={stats.overdueAmount}\r              suffix=\"TRY\"\r              valueStyle={{ color: '#ff4d4f' }}\r              prefix={<ExclamationCircleOutlined />}\r            />\r            <Progress percent={15} strokeColor=\"#ff4d4f\" showInfo={false} />\r            <Text type=\"secondary\">{invoices.filter(inv => inv.status === 'overdue').length} fatura</Text>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card>\r            <Statistic\r              title=\"Aktif Abonelikler\"\r              value={stats.activeSubscriptions}\r              valueStyle={{ color: '#722ed1' }}\r              prefix={<ShoppingCartOutlined />}\r            />\r            <Progress percent={85} strokeColor=\"#722ed1\" showInfo={false} />\r            <Text type=\"secondary\">Toplam {subscriptions.length} abonelik</Text>\r          </Card>\r        </Col>\r      </Row>\r      {/* Main Content Tabs */}\r      <Card>\r        <Tabs activeKey={activeTab} onChange={setActiveTab}>\r          <TabPane tab={<span><FileTextOutlined /> Faturalar</span>} key=\"invoices\">\r            {/* Filters and Actions */}\r            <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\r              <Col xs={24} lg={16}>\r                <Space wrap>\r                  <Select\r                    style={{ width: 150 }}\r                    value={filters.status}\r                    onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, status: value })}\r                  >\r                    <Option value=\"all\">Tüm Durumlar</Option>\r                    <Option value=\"paid\">Ödendi</Option>\r                    <Option value=\"pending\">Bekliyor</Option>\r                    <Option value=\"overdue\">Gecikmiş</Option>\r                  </Select>\r                  <RangePicker placeholder={['Başlangıç', 'Bitiş']} />\r                  <Input.Search\r                    placeholder=\"Fatura ara...\"\r                    style={{ width: 250 }}\r                    value={filters.search}\r                    onChange={(e) = aria-label=\"input field\"> setFilters({ ...filters, search: e.target.value })}\r                  />\r                </Space>\r              </Col>\r              <Col xs={24} lg={8} style={{ textAlign: 'right' }}>\r                <Space>\r                  <Button icon={<ReloadOutlined />} aria-label=\"reload outlined\">Yenile</Button>\r                  <Button icon={<DownloadOutlined />} aria-label=\"download outlined\">Dışa Aktar</Button>\r                  <Button type=\"primary\" icon={<PlusOutlined />} onClick={handleCreateInvoice} aria-label=\"plus outlined\">\r                    Yeni Fatura\r                  </Button>\r                </Space>\r              </Col>\r            </Row>\r            {/* Bulk Actions */}\r            {selectedRows.length > 0 && (\r              <Alert\r                message={`${selectedRows.length} fatura seçildi`}\r                type=\"info\"\r                showIcon\r                action={\r                  <Space>\r                    <Button size=\"small\" onClick={() => handleBulkAction('email')}>\r                      E-posta Gönder\r                    </Button>\r                    <Button size=\"small\" onClick={() => handleBulkAction('download')}>\r                      İndir\r                    </Button>\r                    <Button size=\"small\" danger onClick={() => handleBulkAction('delete')}>\r                      Sil\r                    </Button>\r                  </Space>\r                }\r                style={{ marginBottom: 16 }}\r              />\r            )}\r            {/* Invoices Table */}\r            <Table\r              columns={invoiceColumns}\r              dataSource={invoices}\r              rowKey=\"id\"\r              rowSelection={{\r                selectedRowKeys: selectedRows,\r                onChange: (keys) => setSelectedRows(keys as string[]),\r              }}\r              pagination={{\r                showSizeChanger: true,\r                showTotal: (total) => `Toplam ${total} fatura`,\r              }}\r            />\r          </TabPane>\r          <TabPane tab={<span><ShoppingCartOutlined /> Abonelikler</span>} key=\"subscriptions\">\r            {/* Subscription Actions */}\r            <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\r              <Col span={24} style={{ textAlign: 'right' }}>\r                <Space>\r                  <Button icon={<ReloadOutlined />} aria-label=\"reload outlined\">Yenile</Button>\r                  <Button type=\"primary\" icon={<PlusOutlined />} aria-label=\"plus outlined\">\r                    Yeni Abonelik\r                  </Button>\r                </Space>\r              </Col>\r            </Row>\r            {/* Subscriptions Table */}\r            <Table\r              columns={subscriptionColumns}\r              dataSource={subscriptions}\r              rowKey=\"id\"\r              pagination={{\r                showSizeChanger: true,\r                showTotal: (total) => `Toplam ${total} abonelik`,\r              }}\r            />\r          </TabPane>\r          <TabPane tab={<span><CreditCardOutlined /> Ödemeler</span>} key=\"payments\">\r            {/* Payment History */}\r            <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\r              <Col span={24}>\r                <Alert\r                  message=\"Ödeme İşlemleri\"\r                  description=\"Son 30 gündeki tüm ödeme işlemleri listelenmektedir.\"\r                  type=\"info\"\r                  showIcon\r                />\r              </Col>\r            </Row>\r            <Table\r              columns={paymentColumns}\r              dataSource={payments}\r              rowKey=\"id\"\r              pagination={{\r                showSizeChanger: true,\r                showTotal: (total) => `Toplam ${total} ödeme`,\r              }}\r            />\r          </TabPane>\r          <TabPane tab={<span><HistoryOutlined /> Gelir Analizi</span>} key=\"revenue\">\r            <Row gutter={[16, 16]}>\r              <Col span={24}>\r                <Card title=\"Aylık Gelir Trendi\" bordered={false}>\r                  <Line {...revenueConfig} height={300} />\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r        </Tabs>\r      </Card>\r      {/* Invoice Detail Modal */}\r      <Modal\r        title={`Fatura Detayı - ${selectedInvoice?.invoiceNumber}`}\r        open={invoiceModalVisible}\r        onCancel={() => setInvoiceModalVisible(false)}\r        width={800}\r        footer={[\r          <Button key=\"print\" icon={<PrinterOutlined />} aria-label=\"printer outlined\">\r            Yazdır\r          </Button>,\r          <Button key=\"download\" icon={<DownloadOutlined />} aria-label=\"download outlined\">\r            PDF İndir\r          </Button>,\r          <Button key=\"email\" icon={<MailOutlined />} aria-label=\"mail outlined\">\r            E-posta Gönder\r          </Button>,\r          <Button key=\"close\" onClick={() => setInvoiceModalVisible(false)}>\r            Kapat\r          </Button>,\r        ]}\r      >\r        {selectedInvoice && (\r          <>\r            <Descriptions bordered column={2}>\r              <Descriptions.Item label=\"Fatura No\">{selectedInvoice.invoiceNumber}</Descriptions.Item>\r              <Descriptions.Item label=\"Müşteri\">{selectedInvoice.tenantName}</Descriptions.Item>\r              <Descriptions.Item label=\"Düzenleme Tarihi\">\r                {dayjs(selectedInvoice.issueDate).format('DD/MM/YYYY')}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Vade Tarihi\">\r                {dayjs(selectedInvoice.dueDate).format('DD/MM/YYYY')}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Durum\">\r                <Tag color={selectedInvoice.status === 'paid' ? 'success' : 'processing'}>\r                  {selectedInvoice.status === 'paid' ? 'Ödendi' : 'Bekliyor'}\r                </Tag>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Ödeme Yöntemi\">\r                {selectedInvoice.paymentMethod || '-'}\r              </Descriptions.Item>\r            </Descriptions>\r            <Divider />\r            <Table\r              columns={[\r                { title: 'Açıklama', dataIndex: 'description', key: 'description' },\r                { title: 'Miktar', dataIndex: 'quantity', key: 'quantity' },\r                { title: 'Birim Fiyat', dataIndex: 'unitPrice', key: 'unitPrice', render: (value) => `${value} TRY` },\r                { title: 'Toplam', dataIndex: 'total', key: 'total', render: (value) => `${value} TRY` },\r              ]}\r              dataSource={selectedInvoice.items}\r              rowKey=\"id\"\r              pagination={false}\r              summary={() => (\r                <>\r                  <Table.Summary.Row>\r                    <Table.Summary.Cell index={0} colSpan={3}>\r                      <Text strong>Ara Toplam</Text>\r                    </Table.Summary.Cell>\r                    <Table.Summary.Cell index={1}>\r                      <Text>{selectedInvoice.amount} TRY</Text>\r                    </Table.Summary.Cell>\r                  </Table.Summary.Row>\r                  <Table.Summary.Row>\r                    <Table.Summary.Cell index={0} colSpan={3}>\r                      <Text strong>KDV (%18)</Text>\r                    </Table.Summary.Cell>\r                    <Table.Summary.Cell index={1}>\r                      <Text>{selectedInvoice.tax} TRY</Text>\r                    </Table.Summary.Cell>\r                  </Table.Summary.Row>\r                  <Table.Summary.Row>\r                    <Table.Summary.Cell index={0} colSpan={3}>\r                      <Text strong>Genel Toplam</Text>\r                    </Table.Summary.Cell>\r                    <Table.Summary.Cell index={1}>\r                      <Text strong style={{ fontSize: '16px' }}>\r                        {selectedInvoice.total} TRY\r                      </Text>\r                    </Table.Summary.Cell>\r                  </Table.Summary.Row>\r                </>\r              )}\r            />\r            {selectedInvoice.status === 'paid' && (\r              <>\r                <Divider />\r                <Alert\r                  message=\"Ödeme Bilgisi\"\r                  description={`Bu fatura ${dayjs(selectedInvoice.paymentDate).format('DD/MM/YYYY')} tarihinde ${selectedInvoice.paymentMethod} ile ödenmiştir.`}\r                  type=\"success\"\r                  showIcon\r                />\r              </>\r            )}\r          </>\r        )}\r      </Modal>\r    </div>\r  );\r};\rexport default BillingPage;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Billing/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport CountUp from 'react-countup';\rimport { Line, Area, Column, Pie, DualAxes, Gauge, Liquid } from '@ant-design/plots';\rimport {\r  Row,\r  Col,\r  Card,\r  Statistic,\r  Progress,\r  Table,\r  Tag,\r  Space,\r  Avatar,\r  Typography,\r  Button,\r  Dropdown,\r  Badge,\r  Timeline,\r  List,\r  Tooltip,\r  Segmented,\r  Select,\r  DatePicker,\r  Skeleton,\r  Alert,\r  Tabs,\r  Divider,\r} from 'antd';\rimport {\r  DashboardOutlined,\r  UserOutlined,\r  TeamOutlined,\r  ShoppingCartOutlined,\r  DollarOutlined,\r  RiseOutlined,\r  FallOutlined,\r  SyncOutlined,\r  CloudServerOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r  SafetyOutlined,\r  BellOutlined,\r  SettingOutlined,\r  ExportOutlined,\r  ReloadOutlined,\r  InfoCircleOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  WarningOutlined,\r  ClockCircleOutlined,\r  FireOutlined,\r  ThunderboltOutlined,\r  RocketOutlined,\r  CrownOutlined,\r  TrophyOutlined,\r  StarOutlined,\r  GlobalOutlined,\r  BarChartOutlined,\r  LineChartOutlined,\r  PieChartOutlined,\r  AreaChartOutlined,\r  FundOutlined,\r  StockOutlined,\r  CalendarOutlined,\r  FilterOutlined,\r  MoreOutlined,\r} from '@ant-design/icons';\r// import './styles.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { RangePicker } = DatePicker;\rconst { TabPane } = Tabs;\r// Types\rinterface StatCardProps {\r  title: string;\r  value: number;\r  prefix?: React.ReactNode;\r  suffix?: string;\r  trend?: 'up' | 'down';\r  trendValue?: number;\r  color: string;\r  icon: React.ReactNode;\r  loading?: boolean;\r  onClick?: () => void;\r}\rinterface Activity {\r  id: string;\r  type: 'success' | 'warning' | 'error' | 'info';\r  title: string;\r  description: string;\r  time: string;\r  icon: React.ReactNode;\r}\rimport MetronicDashboard from './MetronicDashboard';\rexport { MetronicDashboard };\rexport const MasterDashboard: React.FC = () => {\r  // Use Metronic Dashboard\r  return <MetronicDashboard />;\r};\rconst OldMasterDashboard: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [timeRange, setTimeRange] = useState<string>('today');\r  const [selectedMetric, setSelectedMetric] = useState<string>('revenue');\r  // Animated Stat Card Component\r  const StatCard: React.FC<StatCardProps> = ({\r    title,\r    value,\r    prefix,\r    suffix,\r    trend,\r    trendValue,\r    color,\r    icon,\r    loading,\r    onClick,\r  }) => (\r    <motion.div\r      whileHover={{ scale: 1.02, translateY: -5 }}\r      whileTap={{ scale: 0.98 }}\r      initial={{ opacity: 0, y: 20 }}\r      animate={{ opacity: 1, y: 0 }}\r      transition={{ duration: 0.3 }}\r    >\r      <Card\r        className=\"stat-card glass-morphism\"\r        style={{\r          background: `linear-gradient(135deg, ${color}08 0%, ${color}03 100%)`,\r          borderLeft: `4px solid ${color}`,\r          cursor: onClick ? 'pointer' : 'default',\r        }}\r        onClick={onClick}\r        hoverable={!!onClick}\r      >\r        {loading ? (\r          <Skeleton active paragraph={{ rows: 2 }} />\r        ) : (\r          <>\r            <div className=\"stat-header\">\r              <div className=\"stat-icon-wrapper\" style={{ background: `${color}15` }}>\r                <div className=\"stat-icon\" style={{ color }}>\r                  {icon}\r                </div>\r              </div>\r              {trend && (\r                <div className={`stat-trend ${trend}`}>\r                  {trend === 'up' ? <RiseOutlined /> : <FallOutlined />}\r                  <span>{trendValue}%</span>\r                </div>\r              )}\r            </div>\r            <div className=\"stat-content\">\r              <Text className=\"stat-title\">{title}</Text>\r              <div className=\"stat-value\">\r                {prefix}\r                <CountUp\r                  end={value}\r                  duration={2}\r                  separator=\",\"\r                  decimals={suffix === '%' ? 1 : 0}\r                />\r                {suffix}\r              </div>\r            </div>\r            <div className=\"stat-footer\">\r              <Progress\r                percent={(trendValue || 0) + 50}\r                showInfo={false}\r                strokeColor={color}\r                trailColor={`${color}20`}\r                size=\"small\"\r              />\r            </div>\r          </>\r        )}\r      </Card>\r    </motion.div>\r  );\r  // Mock Data\r  const statsData = [\r    {\r      title: 'Toplam Gelir',\r      value: 524350,\r      prefix: '₺',\r      trend: 'up' as const,\r      trendValue: 12.5,\r      color: '#52c41a',\r      icon: <DollarOutlined />,\r    },\r    {\r      title: 'Aktif Tenantlar',\r      value: 386,\r      trend: 'up' as const,\r      trendValue: 8.3,\r      color: '#1890ff',\r      icon: <TeamOutlined />,\r    },\r    {\r      title: 'Toplam Kullanıcı',\r      value: 4823,\r      trend: 'up' as const,\r      trendValue: 15.7,\r      color: '#722ed1',\r      icon: <UserOutlined />,\r    },\r    {\r      title: 'Sistem Uptime',\r      value: 99.9,\r      suffix: '%',\r      trend: 'up' as const,\r      trendValue: 0.1,\r      color: '#13c2c2',\r      icon: <ThunderboltOutlined />,\r    },\r  ];\r  // Revenue Chart Data\r  const revenueData = [\r    { month: 'Ocak', revenue: 320000, growth: 12 },\r    { month: 'Şubat', revenue: 385000, growth: 15 },\r    { month: 'Mart', revenue: 412000, growth: 8 },\r    { month: 'Nisan', revenue: 445000, growth: 11 },\r    { month: 'Mayıs', revenue: 478000, growth: 9 },\r    { month: 'Haziran', revenue: 524350, growth: 13 },\r  ];\r  const revenueChartConfig = {\r    data: [revenueData, revenueData],\r    xField: 'month',\r    yField: ['revenue', 'growth'],\r    geometryOptions: [\r      {\r        geometry: 'column',\r        color: '#5B8FF9',\r        columnWidthRatio: 0.4,\r        label: {\r          position: 'middle',\r        },\r      },\r      {\r        geometry: 'line',\r        color: '#5AD8A6',\r        smooth: true,\r        lineStyle: {\r          lineWidth: 3,\r          shadowColor: 'rgba(0,0,0,0.1)',\r          shadowBlur: 10,\r        },\r        point: {\r          size: 5,\r          shape: 'circle',\r          style: {\r            fill: 'white',\r            stroke: '#5AD8A6',\r            lineWidth: 2,\r          },\r        },\r      },\r    ],\r    interactions: [{ type: 'element-active' }],\r    legend: {\r      position: 'top-right',\r    },\r  };\r  // Tenant Distribution\r  const tenantDistribution = [\r    { type: 'Enterprise', value: 45, color: '#5B8FF9' },\r    { type: 'Professional', value: 125, color: '#5AD8A6' },\r    { type: 'Starter', value: 186, color: '#5D7092' },\r    { type: 'Free', value: 30, color: '#FF9845' },\r  ];\r  const pieConfig = {\r    data: tenantDistribution,\r    angleField: 'value',\r    colorField: 'type',\r    radius: 1,\r    innerRadius: 0.6,\r    label: {\r      type: 'inner',\r      offset: '-50%',\r      content: '{value}',\r      style: {\r        textAlign: 'center',\r        fontSize: 14,\r        fill: '#fff',\r      },\r    },\r    interactions: [\r      { type: 'element-selected' },\r      { type: 'element-active' },\r    ],\r    statistic: {\r      title: {\r        content: 'Toplam',\r        style: {\r          fontSize: '14px',\r          color: '#8c8c8c',\r        },\r      },\r      content: {\r        style: {\r          fontSize: '24px',\r          fontWeight: 'bold',\r          color: '#262626',\r        },\r        content: '386',\r      },\r    },\r  };\r  // System Metrics\r  const systemMetrics = [\r    { name: 'CPU Kullanımı', value: 68, status: 'normal' },\r    { name: 'RAM Kullanımı', value: 75, status: 'warning' },\r    { name: 'Disk Kullanımı', value: 45, status: 'normal' },\r    { name: 'Network I/O', value: 82, status: 'warning' },\r    { name: 'Database Connections', value: 35, status: 'normal' },\r  ];\r  // Recent Activities\r  const recentActivities: Activity[] = [\r    {\r      id: '1',\r      type: 'success',\r      title: 'Yeni Tenant Kaydı',\r      description: 'TechCorp Solutions sisteme katıldı',\r      time: '5 dakika önce',\r      icon: <CheckCircleOutlined />,\r    },\r    {\r      id: '2',\r      type: 'info',\r      title: 'Sistem Güncellemesi',\r      description: 'v2.4.1 başarıyla yüklendi',\r      time: '1 saat önce',\r      icon: <InfoCircleOutlined />,\r    },\r    {\r      id: '3',\r      type: 'warning',\r      title: 'Yüksek CPU Kullanımı',\r      description: 'Server-3 CPU %85 üzerinde',\r      time: '2 saat önce',\r      icon: <WarningOutlined />,\r    },\r    {\r      id: '4',\r      type: 'error',\r      title: 'Ödeme Hatası',\r      description: 'ABC Corp ödeme başarısız',\r      time: '3 saat önce',\r      icon: <CloseCircleOutlined />,\r    },\r  ];\r  // Top Tenants Table Columns\r  const tenantColumns = [\r    {\r      title: 'Sıra',\r      dataIndex: 'rank',\r      key: 'rank',\r      width: 80,\r      render: (rank: number) => {\r        const icons = {\r          1: <CrownOutlined style={{ color: '#ffd700' }} />,\r          2: <TrophyOutlined style={{ color: '#c0c0c0' }} />,\r          3: <StarOutlined style={{ color: '#cd7f32' }} />,\r        };\r        return (\r          <Space>\r            {icons[rank as keyof typeof icons]}\r            <Text strong>#{rank}</Text>\r          </Space>\r        );\r      },\r    },\r    {\r      title: 'Tenant',\r      dataIndex: 'name',\r      key: 'name',\r      render: (name: string, record: any) => (\r        <Space>\r          <Avatar style={{ backgroundColor: record.color }}>\r            {name.substring(0, 2).toUpperCase()}\r          </Avatar>\r          <div>\r            <Text strong>{name}</Text>\r            <br />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {record.plan}\r            </Text>\r          </div>\r        </Space>\r      ),\r    },\r    {\r      title: 'Kullanıcı',\r      dataIndex: 'users',\r      key: 'users',\r      render: (users: number) => (\r        <Badge count={users} style={{ backgroundColor: '#52c41a' }} />\r      ),\r    },\r    {\r      title: 'Gelir',\r      dataIndex: 'revenue',\r      key: 'revenue',\r      render: (revenue: number) => (\r        <Text strong style={{ color: '#52c41a' }}>\r          ₺{revenue.toLocaleString()}\r        </Text>\r      ),\r    },\r    {\r      title: 'Büyüme',\r      dataIndex: 'growth',\r      key: 'growth',\r      render: (growth: number) => (\r        <Tag color={growth > 0 ? 'success' : 'error'}>\r          {growth > 0 ? '+' : ''}{growth}%\r        </Tag>\r      ),\r    },\r  ];\r  const topTenantsData = [\r    { rank: 1, name: 'TechCorp Solutions', plan: 'Enterprise', users: 245, revenue: 45000, growth: 15, color: '#1890ff' },\r    { rank: 2, name: 'Digital Dynamics', plan: 'Professional', users: 189, revenue: 32000, growth: 12, color: '#52c41a' },\r    { rank: 3, name: 'CloudFirst Inc', plan: 'Enterprise', users: 156, revenue: 28500, growth: -3, color: '#722ed1' },\r    { rank: 4, name: 'DataDrive Systems', plan: 'Professional', users: 134, revenue: 24000, growth: 8, color: '#fa8c16' },\r    { rank: 5, name: 'InnovateTech', plan: 'Starter', users: 98, revenue: 18000, growth: 22, color: '#eb2f96' },\r  ];\r  return (\r    <div className=\"master-dashboard\">\r      {/* Header */}\r      <div className=\"dashboard-header glass-morphism\">\r        <motion.div\r          initial={{ opacity: 0, x: -20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-left\"\r        >\r          <Title level={2} className=\"gradient-text\">\r            <DashboardOutlined /> Master Dashboard\r          </Title>\r          <Text type=\"secondary\">Sistem geneli özet ve performans metrikleri</Text>\r        </motion.div>\r        <motion.div\r          initial={{ opacity: 0, x: 20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-right\"\r        >\r          <Space size=\"middle\">\r            <Segmented\r              value={timeRange}\r              onChange={setTimeRange}\r              options={[\r                { label: 'Bugün', value: 'today', icon: <CalendarOutlined /> },\r                { label: 'Bu Hafta', value: 'week' },\r                { label: 'Bu Ay', value: 'month' },\r                { label: 'Bu Yıl', value: 'year' },\r              ]}\r            />\r            <RangePicker />\r            <Button\r              icon={<ReloadOutlined spin={loading} / aria-label=\"reload outlined\">}\r              onClick={() => setLoading(!loading)}\r            >\r              Yenile\r            </Button>\r            <Button type=\"primary\" icon={<ExportOutlined />} aria-label=\"export outlined\">\r              Rapor İndir\r            </Button>\r          </Space>\r        </motion.div>\r      </div>\r      {/* Stats Cards */}\r      <Row gutter={[20, 20]} className=\"stats-row\">\r        {statsData.map((stat, index) => (\r          <Col xs={24} sm={12} lg={6} key={index}>\r            <StatCard {...stat} loading={loading} />\r          </Col>\r        ))}\r      </Row>\r      {/* Charts Section */}\r      <Row gutter={[20, 20]} className=\"charts-row\">\r        <Col xs={24} lg={16}>\r          <motion.div\r            initial={{ opacity: 0, y: 20 }}\r            animate={{ opacity: 1, y: 0 }}\r            transition={{ delay: 0.2 }}\r          >\r            <Card\r              title={\r                <Space>\r                  <BarChartOutlined className=\"card-icon\" />\r                  <span>Gelir Analizi</span>\r                </Space>\r              }\r              extra={\r                <Select\r                  value={selectedMetric}\r                  onChange={setSelectedMetric}\r                  style={{ width: 120 }}\r                 aria-label=\"select field\">\r                  <Select.Option value=\"revenue\" aria-label=\"select field\">Gelir</Select.Option>\r                  <Select.Option value=\"users\" aria-label=\"select field\">Kullanıcı</Select.Option>\r                  <Select.Option value=\"growth\" aria-label=\"select field\">Büyüme</Select.Option>\r                </Select>\r              }\r              className=\"chart-card glass-morphism\"\r            >\r              {loading ? (\r                <Skeleton.Node active style={{ width: '100%', height: 300 }}>\r                  <BarChartOutlined style={{ fontSize: 40, color: '#bfbfbf' }} />\r                </Skeleton.Node>\r              ) : (\r                <DualAxes {...revenueChartConfig} height={300} />\r              )}\r            </Card>\r          </motion.div>\r        </Col>\r        <Col xs={24} lg={8}>\r          <motion.div\r            initial={{ opacity: 0, y: 20 }}\r            animate={{ opacity: 1, y: 0 }}\r            transition={{ delay: 0.3 }}\r          >\r            <Card\r              title={\r                <Space>\r                  <PieChartOutlined className=\"card-icon\" />\r                  <span>Tenant Dağılımı</span>\r                </Space>\r              }\r              className=\"chart-card glass-morphism\"\r            >\r              {loading ? (\r                <Skeleton.Node active style={{ width: '100%', height: 300 }}>\r                  <PieChartOutlined style={{ fontSize: 40, color: '#bfbfbf' }} />\r                </Skeleton.Node>\r              ) : (\r                <Pie {...pieConfig} height={300} />\r              )}\r            </Card>\r          </motion.div>\r        </Col>\r      </Row>\r      {/* System Health & Activities */}\r      <Row gutter={[20, 20]} className=\"info-row\">\r        <Col xs={24} md={12}>\r          <motion.div\r            initial={{ opacity: 0, x: -20 }}\r            animate={{ opacity: 1, x: 0 }}\r            transition={{ delay: 0.4 }}\r          >\r            <Card\r              title={\r                <Space>\r                  <CloudServerOutlined className=\"card-icon\" />\r                  <span>Sistem Sağlığı</span>\r                </Space>\r              }\r              extra={<Badge status=\"processing\" text=\"Canlı\" />}\r              className=\"system-health-card glass-morphism\"\r            >\r              <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\r                {systemMetrics.map((metric, index) => (\r                  <div key={index} className=\"metric-item\">\r                    <div className=\"metric-header\">\r                      <Text>{metric.name}</Text>\r                      <Text strong>{metric.value}%</Text>\r                    </div>\r                    <Progress\r                      percent={metric.value}\r                      strokeColor={{\r                        '0%': metric.status === 'warning' ? '#faad14' : '#52c41a',\r                        '100%': metric.status === 'warning' ? '#fa8c16' : '#73d13d',\r                      }}\r                      showInfo={false}\r                    />\r                  </div>\r                ))}\r              </Space>\r            </Card>\r          </motion.div>\r        </Col>\r        <Col xs={24} md={12}>\r          <motion.div\r            initial={{ opacity: 0, x: 20 }}\r            animate={{ opacity: 1, x: 0 }}\r            transition={{ delay: 0.5 }}\r          >\r            <Card\r              title={\r                <Space>\r                  <BellOutlined className=\"card-icon\" />\r                  <span>Son Aktiviteler</span>\r                </Space>\r              }\r              extra={\r                <Button type=\"link\" size=\"small\">\r                  Tümünü Gör\r                </Button>\r              }\r              className=\"activities-card glass-morphism\"\r            >\r              <Timeline>\r                {recentActivities.map((activity) => (\r                  <Timeline.Item\r                    key={activity.id}\r                    dot={\r                      <div className={`activity-dot ${activity.type}`}>\r                        {activity.icon}\r                      </div>\r                    }\r                  >\r                    <div className=\"activity-content\">\r                      <Text strong>{activity.title}</Text>\r                      <br />\r                      <Text type=\"secondary\">{activity.description}</Text>\r                      <br />\r                      <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                        <ClockCircleOutlined /> {activity.time}\r                      </Text>\r                    </div>\r                  </Timeline.Item>\r                ))}\r              </Timeline>\r            </Card>\r          </motion.div>\r        </Col>\r      </Row>\r      {/* Top Tenants Table */}\r      <motion.div\r        initial={{ opacity: 0, y: 20 }}\r        animate={{ opacity: 1, y: 0 }}\r        transition={{ delay: 0.6 }}\r      >\r        <Card\r          title={\r            <Space>\r              <TrophyOutlined className=\"card-icon\" style={{ color: '#faad14' }} />\r              <span>En İyi 5 Tenant</span>\r            </Space>\r          }\r          extra={\r            <Space>\r              <Button icon={<FilterOutlined />} aria-label=\"filter outlined\">Filtrele</Button>\r              <Button type=\"primary\" icon={<ExportOutlined />} aria-label=\"export outlined\">\r                Excel\r              </Button>\r            </Space>\r          }\r          className=\"table-card glass-morphism\"\r        >\r          <Table\r            columns={tenantColumns}\r            dataSource={topTenantsData}\r            pagination={false}\r            loading={loading}\r            rowKey=\"rank\"\r          />\r        </Card>\r      </motion.div>\r      {/* Quick Actions */}\r      <motion.div\r        initial={{ opacity: 0, y: 20 }}\r        animate={{ opacity: 1, y: 0 }}\r        transition={{ delay: 0.7 }}\r        className=\"quick-actions\"\r      >\r        <Card className=\"glass-morphism gradient-border\">\r          <Title level={4}>Hızlı İşlemler</Title>\r          <Row gutter={[16, 16]}>\r            {[\r              { icon: <TeamOutlined />, title: 'Yeni Tenant', color: '#1890ff' },\r              { icon: <UserOutlined />, title: 'Kullanıcı Ekle', color: '#52c41a' },\r              { icon: <DatabaseOutlined />, title: 'Backup Al', color: '#722ed1' },\r              { icon: <SettingOutlined />, title: 'Ayarlar', color: '#fa8c16' },\r            ].map((action, index) => (\r              <Col xs={12} sm={6} key={index}>\r                <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>\r                  <Button\r                    className=\"action-button\"\r                    icon={action.icon}\r                    size=\"large\"\r                    block\r                    style={{\r                      height: 80,\r                      background: `linear-gradient(135deg, ${action.color}15 0%, ${action.color}05 100%)`,\r                      border: `1px solid ${action.color}30`,\r                    }}\r                   aria-label=\"button\">\r                    <div style={{ marginTop: 8 }}>{action.title}</div>\r                  </Button>\r                </motion.div>\r              </Col>\r            ))}\r          </Row>\r        </Card>\r      </motion.div>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Dashboard/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect, useMemo, useCallback, lazy, Suspense } from 'react';\rimport {\r  Row,\r  Col,\r  Card,\r  Statistic,\r  Progress,\r  Table,\r  Tag,\r  Avatar,\r  Space,\r  Button,\r  Dropdown,\r  Select,\r  DatePicker,\r  Typography,\r  List,\r  Timeline,\r  Badge,\r  Tooltip,\r  Skeleton,\r  message,\r} from 'antd';\rimport {\r  ArrowUpOutlined,\r  ArrowDownOutlined,\r  UserOutlined,\r  TeamOutlined,\r  DollarOutlined,\r  ShoppingCartOutlined,\r  RiseOutlined,\r  FallOutlined,\r  MoreOutlined,\r  CalendarOutlined,\r  ClockCircleOutlined,\r  CheckCircleOutlined,\r  SyncOutlined,\r  ExportOutlined,\r  FilterOutlined,\r  FileTextOutlined,\r  CrownOutlined,\r  FireOutlined,\r  RocketOutlined,\r  ThunderboltOutlined,\r  HeartOutlined,\r  StarOutlined,\r  TrophyOutlined,\r  ApiOutlined,\r  WarningOutlined,\r  SettingOutlined,\r  DeleteOutlined,\r} from '@ant-design/icons';\r// Lazy load charts for better initial load performance\rconst Area = lazy(() => import('@ant-design/charts').then(module => ({ default: module.Area })));\rconst Pie = lazy(() => import('@ant-design/charts').then(module => ({ default: module.Pie })));\rimport CountUp from 'react-countup';\rimport { masterApi } from '@/shared/api/master.api';\rimport { dashboardApi } from '@/shared/api/dashboard.api';\rimport { useApiCache, prefetchApi } from '@/shared/hooks/useApiCache';\rimport { useDebounce } from '@/shared/utils/performance';\rimport './metronic-dashboard.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { RangePicker } = DatePicker;\rconst MetronicDashboard: React.FC = () => {\r  const [timeRange, setTimeRange] = useState('month');\r  const [searchQuery, setSearchQuery] = useState('');\r  // Use API cache for tenants\r  const {\r    data: tenantsData,\r    loading: loadingTenants,\r    error: tenantsError,\r    refetch: refetchTenants,\r    isStale: tenantsStale\r  } = useApiCache(\r    `dashboard-tenants-${timeRange}`,\r    async () => {\r      const response = await dashboardApi.topTenants.get();\r      if (response.data?.success && response.data?.data) {\r        return response.data.data.map((tenant: any, index: number) => ({\r          key: tenant.id,\r          rank: index + 1,\r          name: tenant.name,\r          plan: tenant.plan,\r          users: tenant.users,\r          revenue: tenant.revenue,\r          growth: tenant.growth,\r          status: tenant.status,\r        }));\r      }\r      return [];\r    },\r    { ttl: 5 * 60 * 1000, staleTime: 60 * 1000 }\r  );\r  // Use API cache for stats\r  const {\r    data: statsData,\r    loading: loadingStats,\r    error: statsError,\r    refetch: refetchStats,\r    isStale: statsStale\r  } = useApiCache(\r    `dashboard-stats-${timeRange}`,\r    async () => {\r      const response = await dashboardApi.stats.get();\r      if (response.data?.success && response.data?.data) {\r        const data = response.data.data;\r        return {\r          totalRevenue: data.totalRevenue,\r          activeTenants: data.activeTenants,\r          totalUsers: data.totalUsers,\r          activeUsers: data.activeUsers,\r          conversionRate: 68.3,\r          revenueChange: data.growth.revenue,\r          tenantsChange: data.growth.tenants,\r          usersChange: data.growth.users,\r          systemHealth: data.systemHealth,\r          packageDistribution: data.packageDistribution\r        };\r      }\r      return null;\r    },\r    { ttl: 5 * 60 * 1000, staleTime: 60 * 1000 }\r  );\r  const tenants = useMemo(() => tenantsData || [], [tenantsData]);\r  const stats = useMemo(() => statsData || {\r    totalRevenue: 524350,\r    activeTenants: 386,\r    totalUsers: 4823,\r    conversionRate: 68.3,\r  }, [statsData]);\r  // Prefetch data for next time range\r  useEffect(() => {\r    const nextTimeRange = timeRange === 'today' ? 'week' : \r                         timeRange === 'week' ? 'month' : \r                         timeRange === 'month' ? 'year' : 'today';\r    prefetchApi(\r      `dashboard-stats-${nextTimeRange}`,\r      () => dashboardApi.stats.get(),\r      5 * 60 * 1000\r    );\r  }, [timeRange]);\r  const handleRefresh = useCallback(async () => {\r    try {\r      await Promise.all([refetchTenants(), refetchStats()]);\r      message.success('Dashboard yenilendi');\r    } catch (error) {\r      message.error('Yenileme başarısız');\r    }\r  }, [refetchTenants, refetchStats]);\r  // Debounced search for tenants\r  const debouncedSearch = useDebounce((query: string) => {\r    // Filter tenants based on search query\r  }, 300);\r  const handleSearch = useCallback((value: string) => {\r    setSearchQuery(value);\r    debouncedSearch(value);\r  }, [debouncedSearch]);\r  // Filter tenants based on search\r  const filteredTenants = useMemo(() => {\r    if (!searchQuery) return tenants;\r    return tenants.filter(tenant => \r      tenant.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\r      tenant.plan?.toLowerCase().includes(searchQuery.toLowerCase())\r    );\r  }, [tenants, searchQuery]);\r  // Stats Data - Memoized for performance\r  const statsCardData = useMemo(() => [\r    {\r      title: 'Toplam Gelir',\r      value: stats?.totalRevenue || 524350,\r      prefix: '',\r      change: stats?.revenueChange || 12.5,\r      changeType: (stats?.revenueChange || 12.5) > 0 ? 'increase' : 'decrease',\r      icon: <span style={{ fontSize: 24, fontWeight: 600 }}>₺</span>,\r      color: '#667eea',\r      bgColor: 'rgba(102, 126, 234, 0.1)',\r      description: 'geçen aya göre',\r    },\r    {\r      title: 'Aktif Tenantlar',\r      value: stats?.activeTenants || 386,\r      change: stats?.tenantsChange || 8.3,\r      changeType: (stats?.tenantsChange || 8.3) > 0 ? 'increase' : 'decrease',\r      icon: <TeamOutlined />,\r      color: '#50cd89',\r      bgColor: 'rgba(80, 205, 137, 0.1)',\r      description: 'bu ay yeni',\r    },\r    {\r      title: 'Toplam Kullanıcı',\r      value: stats?.totalUsers || 4823,\r      change: stats?.usersChange || 15.7,\r      changeType: (stats?.usersChange || 15.7) > 0 ? 'increase' : 'decrease',\r      icon: <UserOutlined />,\r      color: '#ffc700',\r      bgColor: 'rgba(255, 199, 0, 0.1)',\r      description: 'aktif kullanıcı',\r    },\r    {\r      title: 'Dönüşüm Oranı',\r      value: stats?.conversionRate || 68.3,\r      suffix: '%',\r      change: stats?.conversionChange || 3.2,\r      changeType: (stats?.conversionChange || -3.2) > 0 ? 'increase' : 'decrease',\r      icon: <RiseOutlined />,\r      color: '#f1416c',\r      bgColor: 'rgba(241, 65, 108, 0.1)',\r      description: 'denemelerden',\r    },\r  ], [stats]);\r  // Revenue Chart Data - Memoized\r  const revenueData = useMemo(() => [\r    { month: 'Jan', revenue: 320000, profit: 120000 },\r    { month: 'Feb', revenue: 385000, profit: 145000 },\r    { month: 'Mar', revenue: 412000, profit: 168000 },\r    { month: 'Apr', revenue: 445000, profit: 178000 },\r    { month: 'May', revenue: 478000, profit: 195000 },\r    { month: 'Jun', revenue: 524350, profit: 210000 },\r  ], []);\r  const revenueConfig = useMemo(() => ({\r    data: revenueData,\r    xField: 'month',\r    yField: 'revenue',\r    height: 300,\r    smooth: true,\r    color: 'l(0) 0:#667eea 1:#764ba2',\r    areaStyle: {\r      fillOpacity: 0.6,\r    },\r    xAxis: {\r      grid: null,\r    },\r    yAxis: {\r      label: {\r        formatter: (v: string) => `₺${parseInt(v) / 1000}k`,\r      },\r      grid: {\r        line: {\r          style: {\r            stroke: '#f0f0f0',\r            lineWidth: 1,\r            lineDash: [4, 4],\r          },\r        },\r      },\r    },\r    tooltip: {\r      customContent: (title: string, items: any[]) => {\r        return `<div style=\"padding: 8px;\">\r          <div style=\"margin-bottom: 4px; font-weight: 600;\">${title}</div>\r          ${items.map(item => \r            `<div style=\"color: ${item.color};\">Gelir: ₺${item.data.revenue.toLocaleString('tr-TR')}</div>\r             <div style=\"color: ${item.color};\">Kar: ₺${item.data.profit.toLocaleString('tr-TR')}</div>`\r          ).join('')}\r        </div>`;\r      },\r    },\r  }), [revenueData]);\r  // Tenant Distribution - Memoized\r  const tenantData = useMemo(() => [\r    { type: 'Enterprise', value: 45, percentage: 11.6 },\r    { type: 'Professional', value: 125, percentage: 32.4 },\r    { type: 'Starter', value: 186, percentage: 48.2 },\r    { type: 'Free Trial', value: 30, percentage: 7.8 },\r  ], []);\r  const pieConfig = useMemo(() => ({\r    data: tenantData,\r    angleField: 'value',\r    colorField: 'type',\r    radius: 0.8,\r    innerRadius: 0.6,\r    height: 300,\r    label: {\r      type: 'inner',\r      offset: '-50%',\r      content: '{value}',\r      style: {\r        textAlign: 'center',\r        fontSize: 14,\r        fill: '#fff',\r      },\r    },\r    color: ['#667eea', '#50cd89', '#ffc700', '#f1416c'],\r    interactions: [{ type: 'element-active' }],\r    statistic: {\r      title: false,\r      content: {\r        style: {\r          whiteSpace: 'pre-wrap',\r          overflow: 'hidden',\r          textOverflow: 'ellipsis',\r          fontSize: '24px',\r          fontWeight: 'bold',\r        },\r        content: '386\\nTenant',\r      },\r    },\r    legend: {\r      position: 'bottom',\r      flipPage: false,\r    },\r  }), [tenantData]);\r  // Recent Activities - Memoized\r  const activities = useMemo(() => [\r    {\r      type: 'success',\r      title: 'Yeni tenant kaydı',\r      description: 'TechCorp Solutions platforma katıldı',\r      time: '2 dakika önce',\r      user: 'John Doe',\r      avatar: null,\r    },\r    {\r      type: 'info',\r      title: 'Ödeme alındı',\r      description: 'Fatura #1234 ödendi',\r      time: '1 saat önce',\r      user: 'Jane Smith',\r      avatar: null,\r    },\r    {\r      type: 'warning',\r      title: 'Abonelik sona eriyor',\r      description: 'CloudFirst Inc aboneliği 3 gün içinde sona erecek',\r      time: '3 saat önce',\r      user: 'Sistem',\r      avatar: null,\r    },\r    {\r      type: 'error',\r      title: 'Ödeme başarısız',\r      description: 'StartupHub için ödeme işlenemedi',\r      time: '5 saat önce',\r      user: 'Sistem',\r      avatar: null,\r    },\r  ], []);\r  const columns = useMemo(() => [\r    {\r      title: '#',\r      dataIndex: 'rank',\r      key: 'rank',\r      width: 60,\r      fixed: 'left' as const,\r      render: (rank: number) => {\r        const icons = {\r          1: <TrophyOutlined style={{ color: '#ffd700', fontSize: 16 }} />,\r          2: <TrophyOutlined style={{ color: '#c0c0c0', fontSize: 16 }} />,\r          3: <TrophyOutlined style={{ color: '#cd7f32', fontSize: 16 }} />,\r        };\r        return (\r          <Space size=\"small\">\r            {icons[rank as keyof typeof icons]}\r            <span>#{rank}</span>\r          </Space>\r        );\r      },\r    },\r    {\r      title: 'Tenant',\r      dataIndex: 'name',\r      key: 'name',\r      width: 200,\r      ellipsis: true,\r      render: (name: string, record: any) => (\r        <Space size=\"small\">\r          <Avatar size=\"small\" style={{ backgroundColor: '#667eea' }}>\r            {name ? name.substring(0, 2).toUpperCase() : 'NA'}\r          </Avatar>\r          <div style={{ lineHeight: 1.2 }}>\r            <div style={{ fontWeight: 500 }}>{name || 'İsimsiz'}</div>\r            <Tag \r              style={{ marginTop: 4, fontSize: 11 }}\r              color={record.plan === 'Enterprise' ? 'purple' : record.plan === 'Professional' ? 'blue' : record.plan === 'Starter' ? 'green' : 'default'}\r            >\r              {record.plan}\r            </Tag>\r          </div>\r        </Space>\r      ),\r    },\r    {\r      title: 'Kullanıcı',\r      dataIndex: 'users',\r      key: 'users',\r      width: 100,\r      align: 'center' as const,\r      render: (users: number) => (\r        <Badge count={users} showZero overflowCount={999} style={{ backgroundColor: '#667eea' }} />\r      ),\r    },\r    {\r      title: 'Gelir',\r      dataIndex: 'revenue',\r      key: 'revenue',\r      width: 120,\r      align: 'right' as const,\r      render: (revenue: number) => (\r        <span style={{ color: '#50cd89', fontWeight: 500 }}>\r          ₺{revenue.toLocaleString('tr-TR')}\r        </span>\r      ),\r    },\r    {\r      title: 'Büyüme',\r      dataIndex: 'growth',\r      key: 'growth',\r      width: 100,\r      align: 'center' as const,\r      render: (growth: number) => (\r        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 4 }}>\r          {growth > 0 ? (\r            <ArrowUpOutlined style={{ color: '#50cd89', fontSize: 12 }} />\r          ) : (\r            <ArrowDownOutlined style={{ color: '#f1416c', fontSize: 12 }} />\r          )}\r          <span style={{ color: growth > 0 ? '#50cd89' : '#f1416c', fontWeight: 500 }}>\r            {Math.abs(growth).toFixed(1)}%\r          </span>\r        </div>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      width: 90,\r      align: 'center' as const,\r      render: (status: string) => (\r        <Tag \r          style={{ margin: 0, fontSize: 11 }}\r          color={status === 'active' ? 'success' : 'error'}\r        >\r          {status === 'active' ? 'AKTİF' : 'ASKIDA'}\r        </Tag>\r      ),\r    },\r    {\r      title: '',\r      key: 'action',\r      width: 50,\r      fixed: 'right' as const,\r      render: () => (\r        <Dropdown\r          menu={{\r            items: [\r              { key: 'view', label: 'Detaylar', icon: <FileTextOutlined /> },\r              { key: 'edit', label: 'Düzenle', icon: <SettingOutlined /> },\r              { type: 'divider' },\r              { key: 'delete', label: 'Sil', icon: <DeleteOutlined />, danger: true },\r            ],\r          }}\r          trigger={['click']}\r          placement=\"bottomRight\"\r        >\r          <Button \r            type=\"text\" \r            size=\"small\"\r            icon={<MoreOutlined />} \r            style={{ padding: '4px 8px' }}\r          / aria-label=\"more outlined\">\r        </Dropdown>\r      ),\r    },\r  ], []);\r  return (\r    <div className=\"metronic-dashboard\">\r      {/* Page Header */}\r      <div className=\"dashboard-header\">\r        <div className=\"header-content\">\r          <Title level={3} className=\"page-title\">Dashboard</Title>\r          <Paragraph className=\"page-description\">\r            Hoş geldiniz! Platformunuzda bugün neler oluyor.\r          </Paragraph>\r        </div>\r        <div className=\"header-actions\">\r          <Space>\r            <Select\r              value={timeRange}\r              onChange={setTimeRange}\r              style={{ width: 120 }}\r             aria-label=\"select field\">\r              <Select.Option value=\"today\" aria-label=\"select field\">Bugün</Select.Option>\r              <Select.Option value=\"week\" aria-label=\"select field\">Bu Hafta</Select.Option>\r              <Select.Option value=\"month\" aria-label=\"select field\">Bu Ay</Select.Option>\r              <Select.Option value=\"year\" aria-label=\"select field\">Bu Yıl</Select.Option>\r            </Select>\r            <RangePicker />\r            <Button icon={<ExportOutlined />} aria-label=\"export outlined\">Dışa Aktar</Button>\r            <Button \r              type=\"primary\" \r              icon={<SyncOutlined spin={loadingStats || loadingTenants} / aria-label=\"sync outlined\">} \r              onClick={handleRefresh} \r              loading={loadingStats || loadingTenants}\r            >\r              {(tenantsStale || statsStale) ? 'Güncelle' : 'Yenile'}\r            </Button>\r          </Space>\r        </div>\r      </div>\r      {/* Stats Cards */}\r      <Row gutter={[32, 32]} className=\"stats-row\">\r        {statsCardData.map((stat, index) => (\r          <Col xs={24} sm={12} xl={6} key={index}>\r            <Card className=\"stat-card\" loading={loadingStats}>\r              <div className=\"stat-card-content\">\r                <div className=\"stat-icon\" style={{ backgroundColor: stat.bgColor, color: stat.color }}>\r                  {stat.icon}\r                </div>\r                <div className=\"stat-details\">\r                  <Text className=\"stat-title\">{stat.title}</Text>\r                  <div className=\"stat-value\">\r                    {stat.prefix && <span className=\"currency-symbol\">{stat.prefix}</span>}\r                    <CountUp\r                      end={stat.value}\r                      duration={2}\r                      separator=\",\"\r                      decimals={stat.suffix === '%' ? 1 : 0}\r                    />\r                    {stat.suffix && <span className=\"stat-suffix\">{stat.suffix}</span>}\r                  </div>\r                  <div className=\"stat-change\">\r                    {stat.changeType === 'increase' ? (\r                      <ArrowUpOutlined style={{ color: '#50cd89' }} />\r                    ) : (\r                      <ArrowDownOutlined style={{ color: '#f1416c' }} />\r                    )}\r                    <span className={`change-value ${stat.changeType}`}>\r                      {stat.change}%\r                    </span>\r                    <span className=\"change-description\">{stat.description}</span>\r                  </div>\r                </div>\r              </div>\r            </Card>\r          </Col>\r        ))}\r      </Row>\r      {/* Charts Row */}\r      <Row gutter={[32, 32]} className=\"charts-row\">\r        <Col xs={24} lg={16}>\r          <Card\r            title=\"Gelir Özeti\"\r            extra={\r              <Space>\r                <Button type=\"text\" icon={<FilterOutlined />} aria-label=\"filter outlined\">Filtrele</Button>\r                <Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r              </Space>\r            }\r            className=\"chart-card\"\r            loading={loadingStats}\r          >\r            <Suspense fallback={<Skeleton active paragraph={{ rows: 8 }} />}>\r              <Area {...revenueConfig} />\r            </Suspense>\r          </Card>\r        </Col>\r        <Col xs={24} lg={8}>\r          <Card\r            title=\"Tenant Dağılımı\"\r            extra={<Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">}\r            className=\"chart-card\"\r            loading={loadingStats}\r          >\r            <Suspense fallback={<Skeleton active paragraph={{ rows: 8 }} />}>\r              <Pie {...pieConfig} />\r            </Suspense>\r          </Card>\r        </Col>\r      </Row>\r      {/* Tables Row */}\r      <Row gutter={[32, 32]} className=\"tables-row\">\r        <Col xs={24} lg={16}>\r          <Card\r            title=\"En İyi Performans Gösteren Tenantlar\"\r            extra={\r              <Space>\r                <Button type=\"text\">Tümünü Gör</Button>\r                <Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r              </Space>\r            }\r            className=\"table-card\"\r          >\r            <Table\r              columns={columns}\r              dataSource={filteredTenants}\r              pagination={{\r                pageSize: 10,\r                showSizeChanger: false,\r                showTotal: (total) => `Toplam ${total} tenant`,\r              }}\r              loading={loadingTenants}\r              scroll={{ x: 800 }}\r              size=\"small\"\r              rowClassName=\"table-row-hover\"\r            />\r          </Card>\r        </Col>\r        <Col xs={24} xl={8} lg={24}>\r          <Card\r            title=\"Son Aktiviteler\"\r            extra={<Button type=\"text\">Tümünü Gör</Button>}\r            className=\"activity-card\"\r            loading={loadingStats}\r          >\r            <Timeline>\r              {activities.map((activity, index) => (\r                <Timeline.Item\r                  key={index}\r                  color={\r                    activity.type === 'success' ? 'green' :\r                    activity.type === 'info' ? 'blue' :\r                    activity.type === 'warning' ? 'orange' : 'red'\r                  }\r                >\r                  <div className=\"activity-item\">\r                    <Text strong>{activity.title}</Text>\r                    <br />\r                    <Text type=\"secondary\">{activity.description}</Text>\r                    <br />\r                    <Space className=\"activity-meta\">\r                      <ClockCircleOutlined />\r                      <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                        {activity.time}\r                      </Text>\r                      {activity.user && (\r                        <>\r                          <span>•</span>\r                          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                            {activity.user} tarafından\r                          </Text>\r                        </>\r                      )}\r                    </Space>\r                  </div>\r                </Timeline.Item>\r              ))}\r            </Timeline>\r          </Card>\r        </Col>\r      </Row>\r      {/* Quick Stats */}\r      <Row gutter={[24, 24]} className=\"quick-stats-row\">\r        <Col xs={24}>\r          <Card title=\"Platform Performansı\" className=\"performance-card\">\r            <Row gutter={[24, 24]}>\r              <Col xs={24} sm={12} md={6}>\r                <div className=\"performance-metric\">\r                  <div className=\"metric-header\">\r                    <Text type=\"secondary\">Sunucu Çalışma Süresi</Text>\r                    <CheckCircleOutlined style={{ color: '#50cd89' }} />\r                  </div>\r                  <Progress percent={99.9} strokeColor=\"#50cd89\" />\r                  <Text strong>%99.9 Çalışma</Text>\r                </div>\r              </Col>\r              <Col xs={24} sm={12} md={6}>\r                <div className=\"performance-metric\">\r                  <div className=\"metric-header\">\r                    <Text type=\"secondary\">Yanıt Süresi</Text>\r                    <ThunderboltOutlined style={{ color: '#ffc700' }} />\r                  </div>\r                  <Progress percent={85} strokeColor=\"#ffc700\" />\r                  <Text strong>245ms Ortalama</Text>\r                </div>\r              </Col>\r              <Col xs={24} sm={12} md={6}>\r                <div className=\"performance-metric\">\r                  <div className=\"metric-header\">\r                    <Text type=\"secondary\">API Çağrıları</Text>\r                    <ApiOutlined style={{ color: '#667eea' }} />\r                  </div>\r                  <Progress percent={68} strokeColor=\"#667eea\" />\r                  <Text strong>Bugün 1.2M</Text>\r                </div>\r              </Col>\r              <Col xs={24} sm={12} md={6}>\r                <div className=\"performance-metric\">\r                  <div className=\"metric-header\">\r                    <Text type=\"secondary\">Hata Oranı</Text>\r                    <WarningOutlined style={{ color: '#f1416c' }} />\r                  </div>\r                  <Progress percent={2} strokeColor=\"#f1416c\" />\r                  <Text strong>%0.02 Hata</Text>\r                </div>\r              </Col>\r            </Row>\r          </Card>\r        </Col>\r      </Row>\r    </div>\r  );\r};\rexport default MetronicDashboard;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Dashboard/MetronicDashboard.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Box,\r  Card,\r  CardContent,\r  Typography,\r  Button,\r  Grid,\r  List,\r  ListItem,\r  ListItemText,\r  ListItemIcon,\r  ListItemSecondaryAction,\r  IconButton,\r  Dialog,\r  DialogTitle,\r  DialogContent,\r  DialogActions,\r  TextField,\r  Select,\r  MenuItem,\r  FormControl,\r  InputLabel,\r  Alert,\r  CircularProgress,\r  Chip,\r  Paper,\r  Divider,\r  Tooltip,\r  Switch,\r  FormControlLabel,\r  Tab,\r  Tabs,\r  SelectChangeEvent,\r  Table,\r  TableBody,\r  TableCell,\r  TableContainer,\r  TableHead,\r  TableRow,\r  TablePagination,\r  Accordion,\r  AccordionSummary,\r  AccordionDetails,\r  ToggleButton,\r  ToggleButtonGroup\r} from '@mui/material';\rimport {\r  Email as EmailIcon,\r  Edit as EditIcon,\r  Delete as DeleteIcon,\r  FileCopy as FileCopyIcon,\r  Visibility as VisibilityIcon,\r  Send as SendIcon,\r  Code as CodeIcon,\r  Preview as PreviewIcon,\r  Settings as SettingsIcon,\r  Language as LanguageIcon,\r  History as HistoryIcon,\r  Check as CheckIcon,\r  Close as CloseIcon,\r  ExpandMore as ExpandMoreIcon,\r  AddCircle as AddIcon,\r  ColorLens as ColorLensIcon,\r  TextFields as TextFieldsIcon,\r  Image as ImageIcon,\r  AttachFile as AttachFileIcon,\r  Schedule as ScheduleIcon,\r  Group as GroupIcon,\r  PersonAdd as PersonAddIcon,\r  ShoppingCart as ShoppingCartIcon,\r  Receipt as ReceiptIcon,\r  Lock as LockIcon,\r  NotificationsActive as NotificationIcon,\r  Campaign as CampaignIcon,\r  Badge as BadgeIcon,\r  Celebration as CelebrationIcon\r} from '@mui/icons-material';\rimport { useTheme } from '@mui/material/styles';\rimport { format, parseISO } from 'date-fns';\rimport { tr } from 'date-fns/locale';\rimport Editor from '@monaco-editor/react';\rinterface EmailTemplate {\r  id: string;\r  name: string;\r  subject: string;\r  category: 'system' | 'marketing' | 'transaction' | 'notification';\r  type: 'welcome' | 'password_reset' | 'verification' | 'invoice' | 'payment' | 'subscription' | 'notification' | 'custom';\r  status: 'active' | 'draft' | 'archived';\r  language: 'tr' | 'en' | 'de' | 'fr';\r  htmlContent: string;\r  textContent: string;\r  variables: string[];\r  attachments: string[];\r  createdAt: string;\r  updatedAt: string;\r  usageCount: number;\r  lastUsed?: string;\r  tags: string[];\r}\rinterface EmailVariable {\r  name: string;\r  description: string;\r  defaultValue: string;\r  required: boolean;\r  type: 'text' | 'number' | 'date' | 'boolean' | 'url' | 'email';\r}\rinterface EmailHistory {\r  id: string;\r  templateId: string;\r  sentTo: string;\r  sentAt: string;\r  status: 'sent' | 'delivered' | 'opened' | 'clicked' | 'bounced' | 'failed';\r  openedAt?: string;\r  clickedAt?: string;\r}\rinterface TabPanelProps {\r  children?: React.ReactNode;\r  index: number;\r  value: number;\r}\rfunction TabPanel(props: TabPanelProps) {\r  const { children, value, index, ...other } = props;\r  return (\r    <div role=\"tabpanel\" hidden={value !== index} {...other}>\r      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\r    </div>\r  );\r}\rconst EmailTemplateManagement: React.FC = () => {\r  const theme = useTheme();\r  const [tabValue, setTabValue] = useState(0);\r  const [templates, setTemplates] = useState<EmailTemplate[]>([]);\r  const [selectedTemplate, setSelectedTemplate] = useState<EmailTemplate | null>(null);\r  const [loading, setLoading] = useState(false);\r  const [openTemplateDialog, setOpenTemplateDialog] = useState(false);\r  const [openPreviewDialog, setOpenPreviewDialog] = useState(false);\r  const [openTestDialog, setOpenTestDialog] = useState(false);\r  const [editMode, setEditMode] = useState(false);\r  const [viewMode, setViewMode] = useState<'html' | 'text' | 'split'>('split');\r  const [page, setPage] = useState(0);\r  const [rowsPerPage, setRowsPerPage] = useState(10);\r  const [filterCategory, setFilterCategory] = useState<string>('all');\r  const [filterStatus, setFilterStatus] = useState<string>('all');\r  const [templateForm, setTemplateForm] = useState({\r    name: '',\r    subject: '',\r    category: 'notification' as 'system' | 'marketing' | 'transaction' | 'notification',\r    type: 'custom' as any,\r    status: 'draft' as 'active' | 'draft' | 'archived',\r    language: 'tr' as 'tr' | 'en' | 'de' | 'fr',\r    htmlContent: '',\r    textContent: '',\r    variables: [] as string[],\r    tags: [] as string[]\r  });\r  const [testForm, setTestForm] = useState({\r    recipientEmail: '',\r    variables: {} as Record<string, string>\r  });\r  const availableVariables: EmailVariable[] = [\r    { name: 'userName', description: 'Kullanıcı adı', defaultValue: 'Kullanıcı', required: true, type: 'text' },\r    { name: 'userEmail', description: 'Kullanıcı e-postası', defaultValue: 'user@example.com', required: true, type: 'email' },\r    { name: 'companyName', description: 'Şirket adı', defaultValue: 'Stocker', required: false, type: 'text' },\r    { name: 'activationLink', description: 'Aktivasyon linki', defaultValue: 'https://...', required: false, type: 'url' },\r    { name: 'invoiceNumber', description: 'Fatura numarası', defaultValue: 'INV-001', required: false, type: 'text' },\r    { name: 'amount', description: 'Tutar', defaultValue: '100.00', required: false, type: 'number' },\r    { name: 'date', description: 'Tarih', defaultValue: '2024-01-15', required: false, type: 'date' }\r  ];\r  useEffect(() => {\r    loadTemplates();\r  }, []);\r  const loadTemplates = () => {\r    setLoading(true);\r    const mockTemplates: EmailTemplate[] = [\r      {\r        id: '1',\r        name: 'Hoş Geldin E-postası',\r        subject: 'Stocker\\'a Hoş Geldiniz!',\r        category: 'system',\r        type: 'welcome',\r        status: 'active',\r        language: 'tr',\r        htmlContent: '<h1>Hoş Geldiniz {{userName}}!</h1><p>Stocker ailesine katıldığınız için teşekkür ederiz.</p>',\r        textContent: 'Hoş Geldiniz {{userName}}! Stocker ailesine katıldığınız için teşekkür ederiz.',\r        variables: ['userName', 'companyName', 'activationLink'],\r        attachments: [],\r        createdAt: '2024-01-10T10:00:00Z',\r        updatedAt: '2024-01-14T15:30:00Z',\r        usageCount: 245,\r        lastUsed: '2024-01-15T09:00:00Z',\r        tags: ['welcome', 'onboarding', 'activation']\r      },\r      {\r        id: '2',\r        name: 'Şifre Sıfırlama',\r        subject: 'Şifre Sıfırlama Talebi',\r        category: 'system',\r        type: 'password_reset',\r        status: 'active',\r        language: 'tr',\r        htmlContent: '<h2>Şifre Sıfırlama</h2><p>Merhaba {{userName}},</p><p>Şifrenizi sıfırlamak için <a href=\"{{resetLink}}\">buraya tıklayın</a>.</p>',\r        textContent: 'Merhaba {{userName}}, Şifrenizi sıfırlamak için linke tıklayın: {{resetLink}}',\r        variables: ['userName', 'resetLink'],\r        attachments: [],\r        createdAt: '2024-01-08T10:00:00Z',\r        updatedAt: '2024-01-12T11:00:00Z',\r        usageCount: 89,\r        lastUsed: '2024-01-15T08:30:00Z',\r        tags: ['security', 'password', 'reset']\r      },\r      {\r        id: '3',\r        name: 'Fatura Bildirimi',\r        subject: 'Faturanız Hazır - {{invoiceNumber}}',\r        category: 'transaction',\r        type: 'invoice',\r        status: 'active',\r        language: 'tr',\r        htmlContent: '<h2>Fatura Detayları</h2><p>Sayın {{userName}},</p><p>{{invoiceNumber}} numaralı faturanız hazırlanmıştır. Tutar: {{amount}} TL</p>',\r        textContent: 'Sayın {{userName}}, {{invoiceNumber}} numaralı faturanız hazırlanmıştır. Tutar: {{amount}} TL',\r        variables: ['userName', 'invoiceNumber', 'amount', 'date'],\r        attachments: ['invoice.pdf'],\r        createdAt: '2024-01-05T10:00:00Z',\r        updatedAt: '2024-01-13T14:00:00Z',\r        usageCount: 567,\r        lastUsed: '2024-01-15T10:00:00Z',\r        tags: ['billing', 'invoice', 'payment']\r      },\r      {\r        id: '4',\r        name: 'Kampanya Duyurusu',\r        subject: '🎉 Özel Kampanya - %30 İndirim!',\r        category: 'marketing',\r        type: 'custom',\r        status: 'draft',\r        language: 'tr',\r        htmlContent: '<div style=\"text-align:center;\"><h1>Özel Kampanya!</h1><p>Tüm paketlerde %30 indirim...</p></div>',\r        textContent: 'Özel Kampanya! Tüm paketlerde %30 indirim...',\r        variables: ['userName', 'discountCode'],\r        attachments: [],\r        createdAt: '2024-01-14T10:00:00Z',\r        updatedAt: '2024-01-14T16:00:00Z',\r        usageCount: 0,\r        tags: ['marketing', 'campaign', 'discount']\r      }\r    ];\r    setTemplates(mockTemplates);\r    setLoading(false);\r  };\r  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {\r    setTabValue(newValue);\r  };\r  const handleCreateTemplate = () => {\r    setEditMode(false);\r    setTemplateForm({\r      name: '',\r      subject: '',\r      category: 'notification',\r      type: 'custom',\r      status: 'draft',\r      language: 'tr',\r      htmlContent: '',\r      textContent: '',\r      variables: [],\r      tags: []\r    });\r    setOpenTemplateDialog(true);\r  };\r  const handleEditTemplate = (template: EmailTemplate) => {\r    setEditMode(true);\r    setSelectedTemplate(template);\r    setTemplateForm({\r      name: template.name,\r      subject: template.subject,\r      category: template.category,\r      type: template.type,\r      status: template.status,\r      language: template.language,\r      htmlContent: template.htmlContent,\r      textContent: template.textContent,\r      variables: template.variables,\r      tags: template.tags\r    });\r    setOpenTemplateDialog(true);\r  };\r  const handlePreviewTemplate = (template: EmailTemplate) => {\r    setSelectedTemplate(template);\r    setOpenPreviewDialog(true);\r  };\r  const handleTestTemplate = (template: EmailTemplate) => {\r    setSelectedTemplate(template);\r    setTestForm({\r      recipientEmail: '',\r      variables: template.variables.reduce((acc, v) => ({ ...acc, [v]: '' }), {})\r    });\r    setOpenTestDialog(true);\r  };\r  const handleDeleteTemplate = (id: string) => {\r    setTemplates(templates.filter(t => t.id !== id));\r  };\r  const handleDuplicateTemplate = (template: EmailTemplate) => {\r    const newTemplate = {\r      ...template,\r      id: Date.now().toString(),\r      name: `${template.name} (Kopya)`,\r      status: 'draft' as const,\r      usageCount: 0,\r      createdAt: new Date().toISOString(),\r      updatedAt: new Date().toISOString()\r    };\r    setTemplates([...templates, newTemplate]);\r  };\r  const getCategoryIcon = (category: string) => {\r    switch (category) {\r      case 'system':\r        return <SettingsIcon />;\r      case 'marketing':\r        return <CampaignIcon />;\r      case 'transaction':\r        return <ReceiptIcon />;\r      case 'notification':\r        return <NotificationIcon />;\r      default:\r        return <EmailIcon />;\r    }\r  };\r  const getTypeIcon = (type: string) => {\r    switch (type) {\r      case 'welcome':\r        return <CelebrationIcon />;\r      case 'password_reset':\r        return <LockIcon />;\r      case 'verification':\r        return <CheckIcon />;\r      case 'invoice':\r        return <ReceiptIcon />;\r      case 'payment':\r        return <ShoppingCartIcon />;\r      case 'subscription':\r        return <BadgeIcon />;\r      case 'notification':\r        return <NotificationIcon />;\r      default:\r        return <EmailIcon />;\r    }\r  };\r  const getStatusColor = (status: string) => {\r    switch (status) {\r      case 'active':\r        return 'success';\r      case 'draft':\r        return 'warning';\r      case 'archived':\r        return 'default';\r      default:\r        return 'default';\r    }\r  };\r  const filteredTemplates = templates.filter(template => {\r    if (filterCategory !== 'all' && template.category !== filterCategory) return false;\r    if (filterStatus !== 'all' && template.status !== filterStatus) return false;\r    return true;\r  });\r  const defaultHtmlTemplate = `<!DOCTYPE html>\r<html>\r<head>\r    <style>\r        body { font-family: Arial, sans-serif; }\r        .container { max-width: 600px; margin: 0 auto; padding: 20px; }\r        .header { background-color: #1976d2; color: white; padding: 20px; text-align: center; }\r        .content { padding: 20px; background-color: #f5f5f5; }\r        .footer { padding: 10px; text-align: center; color: #666; }\r    </style>\r</head>\r<body>\r    <div class=\"container\">\r        <div class=\"header\">\r            <h1>{{subject}}</h1>\r        </div>\r        <div class=\"content\">\r            <p>Merhaba {{userName}},</p>\r            <p>İçerik buraya gelecek...</p>\r        </div>\r        <div class=\"footer\">\r            <p>&copy; 2024 Stocker. Tüm hakları saklıdır.</p>\r        </div>\r    </div>\r</body>\r</html>`;\r  return (\r    <Box>\r      <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r        <Typography variant=\"h4\" fontWeight=\"bold\">\r          E-posta Şablon Yönetimi\r        </Typography>\r        <Button\r          variant=\"contained\"\r          startIcon={<AddIcon />}\r          onClick={handleCreateTemplate}\r        >\r          Yeni Şablon\r        </Button>\r      </Box>\r      <Paper elevation={0} sx={{ mb: 3 }}>\r        <Grid container spacing={3}>\r          <Grid item xs={12} md={3}>\r            <Card>\r              <CardContent>\r                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r                  <EmailIcon sx={{ mr: 2, color: theme.palette.primary.main }} />\r                  <Typography variant=\"h6\">Toplam Şablon</Typography>\r                </Box>\r                <Typography variant=\"h3\" fontWeight=\"bold\">\r                  {templates.length}\r                </Typography>\r                <Typography color=\"text.secondary\" variant=\"body2\">\r                  {templates.filter(t => t.status === 'active').length} aktif\r                </Typography>\r              </CardContent>\r            </Card>\r          </Grid>\r          <Grid item xs={12} md={3}>\r            <Card>\r              <CardContent>\r                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r                  <SendIcon sx={{ mr: 2, color: theme.palette.success.main }} />\r                  <Typography variant=\"h6\">Gönderimler</Typography>\r                </Box>\r                <Typography variant=\"h3\" fontWeight=\"bold\">\r                  {templates.reduce((acc, t) => acc + t.usageCount, 0)}\r                </Typography>\r                <Typography color=\"text.secondary\" variant=\"body2\">\r                  Toplam gönderim\r                </Typography>\r              </CardContent>\r            </Card>\r          </Grid>\r          <Grid item xs={12} md={3}>\r            <Card>\r              <CardContent>\r                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r                  <LanguageIcon sx={{ mr: 2, color: theme.palette.warning.main }} />\r                  <Typography variant=\"h6\">Diller</Typography>\r                </Box>\r                <Typography variant=\"h3\" fontWeight=\"bold\">\r                  4\r                </Typography>\r                <Typography color=\"text.secondary\" variant=\"body2\">\r                  TR, EN, DE, FR\r                </Typography>\r              </CardContent>\r            </Card>\r          </Grid>\r          <Grid item xs={12} md={3}>\r            <Card>\r              <CardContent>\r                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r                  <HistoryIcon sx={{ mr: 2, color: theme.palette.info.main }} />\r                  <Typography variant=\"h6\">Son Güncelleme</Typography>\r                </Box>\r                <Typography variant=\"h6\" fontWeight=\"bold\">\r                  Bugün\r                </Typography>\r                <Typography color=\"text.secondary\" variant=\"body2\">\r                  3 şablon güncellendi\r                </Typography>\r              </CardContent>\r            </Card>\r          </Grid>\r        </Grid>\r      </Paper>\r      <Paper>\r        <Box sx={{ p: 2, display: 'flex', gap: 2, borderBottom: 1, borderColor: 'divider' }}>\r          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\r            <InputLabel aria-label=\"input field\">Kategori</InputLabel>\r            <Select\r              value={filterCategory}\r              label=\"Kategori\"\r              onChange={(e) = aria-label=\"select field\"> setFilterCategory(e.target.value)}\r            >\r              <MenuItem value=\"all\">Tümü</MenuItem>\r              <MenuItem value=\"system\">Sistem</MenuItem>\r              <MenuItem value=\"marketing\">Pazarlama</MenuItem>\r              <MenuItem value=\"transaction\">İşlem</MenuItem>\r              <MenuItem value=\"notification\">Bildirim</MenuItem>\r            </Select>\r          </FormControl>\r          <FormControl size=\"small\" sx={{ minWidth: 150 }}>\r            <InputLabel aria-label=\"input field\">Durum</InputLabel>\r            <Select\r              value={filterStatus}\r              label=\"Durum\"\r              onChange={(e) = aria-label=\"select field\"> setFilterStatus(e.target.value)}\r            >\r              <MenuItem value=\"all\">Tümü</MenuItem>\r              <MenuItem value=\"active\">Aktif</MenuItem>\r              <MenuItem value=\"draft\">Taslak</MenuItem>\r              <MenuItem value=\"archived\">Arşivlenmiş</MenuItem>\r            </Select>\r          </FormControl>\r        </Box>\r        <TableContainer>\r          <Table>\r            <TableHead>\r              <TableRow>\r                <TableCell>Şablon Adı</TableCell>\r                <TableCell>Kategori</TableCell>\r                <TableCell>Tür</TableCell>\r                <TableCell>Durum</TableCell>\r                <TableCell>Dil</TableCell>\r                <TableCell>Kullanım</TableCell>\r                <TableCell>Son Kullanım</TableCell>\r                <TableCell align=\"right\">İşlemler</TableCell>\r              </TableRow>\r            </TableHead>\r            <TableBody>\r              {filteredTemplates\r                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r                .map((template) => (\r                  <TableRow key={template.id}>\r                    <TableCell>\r                      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r                        {getTypeIcon(template.type)}\r                        <Box sx={{ ml: 2 }}>\r                          <Typography variant=\"body1\">{template.name}</Typography>\r                          <Typography variant=\"caption\" color=\"text.secondary\">\r                            {template.subject}\r                          </Typography>\r                        </Box>\r                      </Box>\r                    </TableCell>\r                    <TableCell>\r                      <Chip\r                        icon={getCategoryIcon(template.category)}\r                        label={template.category}\r                        size=\"small\"\r                        variant=\"outlined\"\r                      />\r                    </TableCell>\r                    <TableCell>{template.type}</TableCell>\r                    <TableCell>\r                      <Chip\r                        label={template.status}\r                        color={getStatusColor(template.status) as any}\r                        size=\"small\"\r                      />\r                    </TableCell>\r                    <TableCell>\r                      <Chip label={template.language.toUpperCase()} size=\"small\" />\r                    </TableCell>\r                    <TableCell>{template.usageCount}</TableCell>\r                    <TableCell>\r                      {template.lastUsed\r                        ? format(parseISO(template.lastUsed), 'dd MMM HH:mm', { locale: tr })\r                        : '-'}\r                    </TableCell>\r                    <TableCell align=\"right\">\r                      <Tooltip title=\"Önizle\">\r                        <IconButton size=\"small\" onClick={() => handlePreviewTemplate(template)}>\r                          <VisibilityIcon />\r                        </IconButton>\r                      </Tooltip>\r                      <Tooltip title=\"Düzenle\">\r                        <IconButton size=\"small\" onClick={() => handleEditTemplate(template)}>\r                          <EditIcon />\r                        </IconButton>\r                      </Tooltip>\r                      <Tooltip title=\"Test Et\">\r                        <IconButton size=\"small\" onClick={() => handleTestTemplate(template)}>\r                          <SendIcon />\r                        </IconButton>\r                      </Tooltip>\r                      <Tooltip title=\"Kopyala\">\r                        <IconButton size=\"small\" onClick={() => handleDuplicateTemplate(template)}>\r                          <FileCopyIcon />\r                        </IconButton>\r                      </Tooltip>\r                      <Tooltip title=\"Sil\">\r                        <IconButton size=\"small\" onClick={() => handleDeleteTemplate(template.id)}>\r                          <DeleteIcon />\r                        </IconButton>\r                      </Tooltip>\r                    </TableCell>\r                  </TableRow>\r                ))}\r            </TableBody>\r          </Table>\r        </TableContainer>\r        <TablePagination\r          rowsPerPageOptions={[5, 10, 25]}\r          component=\"div\"\r          count={filteredTemplates.length}\r          rowsPerPage={rowsPerPage}\r          page={page}\r          onPageChange={(_e, newPage) => setPage(newPage)}\r          onRowsPerPageChange={(e) => {\r            setRowsPerPage(parseInt(e.target.value, 10));\r            setPage(0);\r          }}\r        />\r      </Paper>\r      {/* Template Dialog */}\r      <Dialog open={openTemplateDialog} onClose={() => setOpenTemplateDialog(false)} maxWidth=\"lg\" fullWidth>\r        <DialogTitle>\r          {editMode ? 'Şablonu Düzenle' : 'Yeni Şablon Oluştur'}\r        </DialogTitle>\r        <DialogContent>\r          <Grid container spacing={2} sx={{ mt: 1 }}>\r            <Grid item xs={12} md={6}>\r              <TextField\r                fullWidth\r                label=\"Şablon Adı\"\r                value={templateForm.name}\r                onChange={(e) => setTemplateForm({ ...templateForm, name: e.target.value })}\r              />\r            </Grid>\r            <Grid item xs={12} md={6}>\r              <TextField\r                fullWidth\r                label=\"Konu\"\r                value={templateForm.subject}\r                onChange={(e) => setTemplateForm({ ...templateForm, subject: e.target.value })}\r                helperText=\"Değişken kullanabilirsiniz: {{variable}}\"\r              />\r            </Grid>\r            <Grid item xs={6} md={3}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Kategori</InputLabel>\r                <Select\r                  value={templateForm.category}\r                  label=\"Kategori\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setTemplateForm({ ...templateForm, category: e.target.value as any })}\r                >\r                  <MenuItem value=\"system\">Sistem</MenuItem>\r                  <MenuItem value=\"marketing\">Pazarlama</MenuItem>\r                  <MenuItem value=\"transaction\">İşlem</MenuItem>\r                  <MenuItem value=\"notification\">Bildirim</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={6} md={3}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Tür</InputLabel>\r                <Select\r                  value={templateForm.type}\r                  label=\"Tür\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setTemplateForm({ ...templateForm, type: e.target.value as any })}\r                >\r                  <MenuItem value=\"welcome\">Hoş Geldin</MenuItem>\r                  <MenuItem value=\"password_reset\">Şifre Sıfırlama</MenuItem>\r                  <MenuItem value=\"verification\">Doğrulama</MenuItem>\r                  <MenuItem value=\"invoice\">Fatura</MenuItem>\r                  <MenuItem value=\"payment\">Ödeme</MenuItem>\r                  <MenuItem value=\"subscription\">Abonelik</MenuItem>\r                  <MenuItem value=\"notification\">Bildirim</MenuItem>\r                  <MenuItem value=\"custom\">Özel</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={6} md={3}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Durum</InputLabel>\r                <Select\r                  value={templateForm.status}\r                  label=\"Durum\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setTemplateForm({ ...templateForm, status: e.target.value as any })}\r                >\r                  <MenuItem value=\"active\">Aktif</MenuItem>\r                  <MenuItem value=\"draft\">Taslak</MenuItem>\r                  <MenuItem value=\"archived\">Arşivlenmiş</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={6} md={3}>\r              <FormControl fullWidth>\r                <InputLabel aria-label=\"input field\">Dil</InputLabel>\r                <Select\r                  value={templateForm.language}\r                  label=\"Dil\"\r                  onChange={(e: SelectChangeEvent) = aria-label=\"select field\"> setTemplateForm({ ...templateForm, language: e.target.value as any })}\r                >\r                  <MenuItem value=\"tr\">Türkçe</MenuItem>\r                  <MenuItem value=\"en\">English</MenuItem>\r                  <MenuItem value=\"de\">Deutsch</MenuItem>\r                  <MenuItem value=\"fr\">Français</MenuItem>\r                </Select>\r              </FormControl>\r            </Grid>\r            <Grid item xs={12}>\r              <Box sx={{ mb: 2 }}>\r                <Typography variant=\"subtitle2\" gutterBottom>\r                  Kullanılabilir Değişkenler:\r                </Typography>\r                <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\r                  {availableVariables.map((variable) => (\r                    <Chip\r                      key={variable.name}\r                      label={`{{${variable.name}}}`}\r                      size=\"small\"\r                      onClick={() => {\r                        navigator.clipboard.writeText(`{{${variable.name}}}`);\r                      }}\r                      title={variable.description}\r                    />\r                  ))}\r                </Box>\r              </Box>\r            </Grid>\r            <Grid item xs={12}>\r              <Box sx={{ border: 1, borderColor: 'divider', borderRadius: 1 }}>\r                <Box sx={{ p: 1, borderBottom: 1, borderColor: 'divider' }}>\r                  <ToggleButtonGroup\r                    value={viewMode}\r                    exclusive\r                    onChange={(_e, newMode) => newMode && setViewMode(newMode)}\r                    size=\"small\"\r                  >\r                    <ToggleButton value=\"html\">HTML</ToggleButton>\r                    <ToggleButton value=\"text\">Text</ToggleButton>\r                    <ToggleButton value=\"split\">Bölünmüş</ToggleButton>\r                  </ToggleButtonGroup>\r                </Box>\r                <Box sx={{ display: 'flex', height: 400 }}>\r                  {(viewMode === 'html' || viewMode === 'split') && (\r                    <Box sx={{ flex: viewMode === 'split' ? 1 : '1 1 100%', borderRight: viewMode === 'split' ? 1 : 0, borderColor: 'divider' }}>\r                      <Editor\r                        height=\"100%\"\r                        defaultLanguage=\"html\"\r                        value={templateForm.htmlContent || defaultHtmlTemplate}\r                        onChange={(value) => setTemplateForm({ ...templateForm, htmlContent: value || '' })}\r                        theme={theme.palette.mode === 'dark' ? 'vs-dark' : 'light'}\r                        options={{\r                          minimap: { enabled: false },\r                          fontSize: 14,\r                          wordWrap: 'on'\r                        }}\r                      />\r                    </Box>\r                  )}\r                  {(viewMode === 'text' || viewMode === 'split') && (\r                    <Box sx={{ flex: viewMode === 'split' ? 1 : '1 1 100%' }}>\r                      <TextField\r                        fullWidth\r                        multiline\r                        rows={16}\r                        value={templateForm.textContent}\r                        onChange={(e) => setTemplateForm({ ...templateForm, textContent: e.target.value })}\r                        placeholder=\"Düz metin versiyonu...\"\r                        sx={{ '& .MuiInputBase-root': { height: '100%' } }}\r                      />\r                    </Box>\r                  )}\r                </Box>\r              </Box>\r            </Grid>\r            <Grid item xs={12}>\r              <TextField\r                fullWidth\r                label=\"Etiketler\"\r                placeholder=\"Virgülle ayırın: etiket1, etiket2\"\r                value={templateForm.tags.join(', ')}\r                onChange={(e) => setTemplateForm({ \r                  ...templateForm, \r                  tags: e.target.value.split(',').map(t => t.trim()).filter(t => t) \r                })}\r              />\r            </Grid>\r          </Grid>\r        </DialogContent>\r        <DialogActions>\r          <Button onClick={() => setOpenTemplateDialog(false)}>İptal</Button>\r          <Button variant=\"contained\" startIcon={editMode ? <EditIcon /> : <AddIcon />}>\r            {editMode ? 'Güncelle' : 'Oluştur'}\r          </Button>\r        </DialogActions>\r      </Dialog>\r      {/* Preview Dialog */}\r      <Dialog open={openPreviewDialog} onClose={() => setOpenPreviewDialog(false)} maxWidth=\"md\" fullWidth>\r        <DialogTitle>Şablon Önizleme</DialogTitle>\r        <DialogContent>\r          {selectedTemplate && (\r            <Box>\r              <Tabs value={0} sx={{ borderBottom: 1, borderColor: 'divider' }}>\r                <Tab label=\"HTML Önizleme\" />\r                <Tab label=\"Metin Önizleme\" />\r              </Tabs>\r              <Box sx={{ mt: 2, p: 2, border: 1, borderColor: 'divider', borderRadius: 1, bgcolor: 'white' }}>\r                <div dangerouslySetInnerHTML={{ __html: selectedTemplate.htmlContent }} />\r              </Box>\r            </Box>\r          )}\r        </DialogContent>\r        <DialogActions>\r          <Button onClick={() => setOpenPreviewDialog(false)}>Kapat</Button>\r        </DialogActions>\r      </Dialog>\r      {/* Test Dialog */}\r      <Dialog open={openTestDialog} onClose={() => setOpenTestDialog(false)} maxWidth=\"sm\" fullWidth>\r        <DialogTitle>E-posta Test Gönderimi</DialogTitle>\r        <DialogContent>\r          <Grid container spacing={2} sx={{ mt: 1 }}>\r            <Grid item xs={12}>\r              <TextField\r                fullWidth\r                label=\"Alıcı E-posta\"\r                type=\"email\"\r                value={testForm.recipientEmail}\r                onChange={(e) => setTestForm({ ...testForm, recipientEmail: e.target.value })}\r              />\r            </Grid>\r            {selectedTemplate?.variables.map((variable) => (\r              <Grid item xs={12} key={variable}>\r                <TextField\r                  fullWidth\r                  label={variable}\r                  value={testForm.variables[variable] || ''}\r                  onChange={(e) => setTestForm({\r                    ...testForm,\r                    variables: { ...testForm.variables, [variable]: e.target.value }\r                  })}\r                />\r              </Grid>\r            ))}\r          </Grid>\r        </DialogContent>\r        <DialogActions>\r          <Button onClick={() => setOpenTestDialog(false)}>İptal</Button>\r          <Button variant=\"contained\" startIcon={<SendIcon />}>\r            Test E-postası Gönder\r          </Button>\r        </DialogActions>\r      </Dialog>\r    </Box>\r  );\r};\r// Export both the old and new versions\rexport default EmailTemplateManagement;\rexport { default as ProfessionalEmailTemplates } from './ProfessionalEmailTemplates';",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/EmailTemplates/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Table,\r  Button,\r  Space,\r  Tag,\r  Input,\r  DatePicker,\r  Select,\r  Row,\r  Col,\r  Statistic,\r  Badge,\r  Dropdown,\r  Modal,\r  message,\r  Tooltip,\r  Typography,\r  Divider,\r} from 'antd';\rimport {\r  SearchOutlined,\r  DownloadOutlined,\r  PrinterOutlined,\r  EyeOutlined,\r  MailOutlined,\r  CheckCircleOutlined,\r  ClockCircleOutlined,\r  CloseCircleOutlined,\r  DollarOutlined,\r  FileTextOutlined,\r  FilterOutlined,\r  ExportOutlined,\r  PlusOutlined,\r} from '@ant-design/icons';\rimport type { ColumnsType } from 'antd/es/table';\rimport dayjs from 'dayjs';\rconst { RangePicker } = DatePicker;\rconst { Title, Text } = Typography;\rinterface Invoice {\r  id: string;\r  invoiceNumber: string;\r  tenant: string;\r  tenantId: string;\r  amount: number;\r  tax: number;\r  total: number;\r  status: 'paid' | 'pending' | 'overdue' | 'cancelled';\r  dueDate: string;\r  issueDate: string;\r  paymentDate?: string;\r  paymentMethod?: string;\r  items: Array<{\r    description: string;\r    quantity: number;\r    unitPrice: number;\r    total: number;\r  }>;\r}\rconst MasterInvoicesPage: React.FC = () => {\r  const [invoices, setInvoices] = useState<Invoice[]>([]);\r  const [loading, setLoading] = useState(false);\r  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);\r  const [detailModalVisible, setDetailModalVisible] = useState(false);\r  const [filters, setFilters] = useState({\r    search: '',\r    status: 'all',\r    dateRange: null as any,\r  });\r  // Mock data\r  useEffect(() => {\r    const mockInvoices: Invoice[] = [\r      {\r        id: '1',\r        invoiceNumber: 'INV-2024-001',\r        tenant: 'TechCorp Solutions',\r        tenantId: 'tenant-1',\r        amount: 2500,\r        tax: 450,\r        total: 2950,\r        status: 'paid',\r        dueDate: '2024-02-15',\r        issueDate: '2024-01-15',\r        paymentDate: '2024-02-10',\r        paymentMethod: 'Credit Card',\r        items: [\r          { description: 'Enterprise Package - Monthly', quantity: 1, unitPrice: 2500, total: 2500 }\r        ]\r      },\r      {\r        id: '2',\r        invoiceNumber: 'INV-2024-002',\r        tenant: 'Global Retail Inc',\r        tenantId: 'tenant-2',\r        amount: 1500,\r        tax: 270,\r        total: 1770,\r        status: 'pending',\r        dueDate: '2024-02-20',\r        issueDate: '2024-01-20',\r        items: [\r          { description: 'Professional Package - Monthly', quantity: 1, unitPrice: 1500, total: 1500 }\r        ]\r      },\r      {\r        id: '3',\r        invoiceNumber: 'INV-2024-003',\r        tenant: 'StartUp Hub',\r        tenantId: 'tenant-3',\r        amount: 500,\r        tax: 90,\r        total: 590,\r        status: 'overdue',\r        dueDate: '2024-01-25',\r        issueDate: '2023-12-25',\r        items: [\r          { description: 'Starter Package - Monthly', quantity: 1, unitPrice: 500, total: 500 }\r        ]\r      },\r    ];\r    setInvoices(mockInvoices);\r  }, []);\r  const handleViewDetails = (invoice: Invoice) => {\r    setSelectedInvoice(invoice);\r    setDetailModalVisible(true);\r  };\r  const handleSendInvoice = (invoice: Invoice) => {\r    message.success(`Fatura ${invoice.tenant} firmasına gönderildi`);\r  };\r  const handleDownloadInvoice = (invoice: Invoice) => {\r    message.info(`${invoice.invoiceNumber} numaralı fatura indiriliyor...`);\r  };\r  const handleMarkAsPaid = (invoice: Invoice) => {\r    Modal.confirm({\r      title: 'Ödeme Onayı',\r      content: `${invoice.invoiceNumber} numaralı faturayı ödendi olarak işaretlemek istediğinize emin misiniz?`,\r      onOk: () => {\r        message.success('Fatura ödendi olarak işaretlendi');\r      },\r    });\r  };\r  const columns: ColumnsType<Invoice> = [\r    {\r      title: 'Fatura No',\r      dataIndex: 'invoiceNumber',\r      key: 'invoiceNumber',\r      render: (text) => <a>{text}</a>,\r    },\r    {\r      title: 'Firma',\r      dataIndex: 'tenant',\r      key: 'tenant',\r    },\r    {\r      title: 'Tutar',\r      dataIndex: 'total',\r      key: 'total',\r      render: (value) => (\r        <Text strong>₺{value.toLocaleString('tr-TR')}</Text>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status) => {\r        const statusConfig = {\r          paid: { color: 'success', text: 'Ödendi', icon: <CheckCircleOutlined /> },\r          pending: { color: 'warning', text: 'Bekliyor', icon: <ClockCircleOutlined /> },\r          overdue: { color: 'error', text: 'Gecikmiş', icon: <CloseCircleOutlined /> },\r          cancelled: { color: 'default', text: 'İptal', icon: <CloseCircleOutlined /> },\r        };\r        const config = statusConfig[status];\r        return (\r          <Tag color={config.color} icon={config.icon}>\r            {config.text}\r          </Tag>\r        );\r      },\r    },\r    {\r      title: 'Düzenleme Tarihi',\r      dataIndex: 'issueDate',\r      key: 'issueDate',\r      render: (date) => dayjs(date).format('DD.MM.YYYY'),\r    },\r    {\r      title: 'Son Ödeme',\r      dataIndex: 'dueDate',\r      key: 'dueDate',\r      render: (date, record) => {\r        const isOverdue = dayjs(date).isBefore(dayjs()) && record.status === 'pending';\r        return (\r          <Text type={isOverdue ? 'danger' : undefined}>\r            {dayjs(date).format('DD.MM.YYYY')}\r          </Text>\r        );\r      },\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      render: (_, record) => (\r        <Space size=\"middle\">\r          <Tooltip title=\"Detaylar\">\r            <Button\r              type=\"text\"\r              icon={<EyeOutlined />}\r              onClick={() = aria-label=\"eye outlined\"> handleViewDetails(record)}\r            />\r          </Tooltip>\r          <Tooltip title=\"İndir\">\r            <Button\r              type=\"text\"\r              icon={<DownloadOutlined />}\r              onClick={() = aria-label=\"download outlined\"> handleDownloadInvoice(record)}\r            />\r          </Tooltip>\r          <Tooltip title=\"E-posta Gönder\">\r            <Button\r              type=\"text\"\r              icon={<MailOutlined />}\r              onClick={() = aria-label=\"mail outlined\"> handleSendInvoice(record)}\r            />\r          </Tooltip>\r          {record.status === 'pending' && (\r            <Tooltip title=\"Ödendi Olarak İşaretle\">\r              <Button\r                type=\"text\"\r                icon={<CheckCircleOutlined />}\r                onClick={() = aria-label=\"check circle outlined\"> handleMarkAsPaid(record)}\r              />\r            </Tooltip>\r          )}\r        </Space>\r      ),\r    },\r  ];\r  const stats = {\r    total: invoices.length,\r    paid: invoices.filter(i => i.status === 'paid').length,\r    pending: invoices.filter(i => i.status === 'pending').length,\r    overdue: invoices.filter(i => i.status === 'overdue').length,\r    totalAmount: invoices.reduce((sum, i) => sum + i.total, 0),\r    paidAmount: invoices.filter(i => i.status === 'paid').reduce((sum, i) => sum + i.total, 0),\r    pendingAmount: invoices.filter(i => i.status === 'pending').reduce((sum, i) => sum + i.total, 0),\r  };\r  return (\r    <div className=\"master-invoices-page\">\r      <Row gutter={[24, 24]}>\r        {/* Statistics Cards */}\r        <Col span={24}>\r          <Row gutter={[16, 16]}>\r            <Col xs={24} sm={12} lg={6}>\r              <Card>\r                <Statistic\r                  title=\"Toplam Fatura\"\r                  value={stats.total}\r                  prefix={<FileTextOutlined />}\r                />\r              </Card>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <Card>\r                <Statistic\r                  title=\"Ödenen\"\r                  value={stats.paid}\r                  valueStyle={{ color: '#3f8600' }}\r                  prefix={<CheckCircleOutlined />}\r                />\r              </Card>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <Card>\r                <Statistic\r                  title=\"Bekleyen\"\r                  value={stats.pending}\r                  valueStyle={{ color: '#faad14' }}\r                  prefix={<ClockCircleOutlined />}\r                />\r              </Card>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <Card>\r                <Statistic\r                  title=\"Toplam Tutar\"\r                  value={stats.totalAmount}\r                  prefix=\"₺\"\r                  precision={2}\r                />\r              </Card>\r            </Col>\r          </Row>\r        </Col>\r        {/* Main Content */}\r        <Col span={24}>\r          <Card\r            title=\"Faturalar\"\r            extra={\r              <Space>\r                <Button icon={<ExportOutlined />} aria-label=\"export outlined\">Dışa Aktar</Button>\r                <Button type=\"primary\" icon={<PlusOutlined />} aria-label=\"plus outlined\">\r                  Yeni Fatura\r                </Button>\r              </Space>\r            }\r          >\r            {/* Filters */}\r            <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\r              <Col xs={24} sm={12} lg={8}>\r                <Input\r                  placeholder=\"Fatura no veya firma adı ile ara...\"\r                  prefix={<SearchOutlined / aria-label=\"input field\">}\r                  value={filters.search}\r                  onChange={(e) => setFilters({ ...filters, search: e.target.value })}\r                />\r              </Col>\r              <Col xs={24} sm={12} lg={6}>\r                <Select\r                  style={{ width: '100%' }}\r                  placeholder=\"Durum\"\r                  value={filters.status}\r                  onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, status: value })}\r                >\r                  <Select.Option value=\"all\" aria-label=\"select field\">Tümü</Select.Option>\r                  <Select.Option value=\"paid\" aria-label=\"select field\">Ödendi</Select.Option>\r                  <Select.Option value=\"pending\" aria-label=\"select field\">Bekliyor</Select.Option>\r                  <Select.Option value=\"overdue\" aria-label=\"select field\">Gecikmiş</Select.Option>\r                  <Select.Option value=\"cancelled\" aria-label=\"select field\">İptal</Select.Option>\r                </Select>\r              </Col>\r              <Col xs={24} sm={12} lg={8}>\r                <RangePicker\r                  style={{ width: '100%' }}\r                  placeholder={['Başlangıç', 'Bitiş']}\r                  onChange={(dates) => setFilters({ ...filters, dateRange: dates })}\r                />\r              </Col>\r              <Col xs={24} sm={12} lg={2}>\r                <Button icon={<FilterOutlined />} block aria-label=\"filter outlined\">\r                  Filtrele\r                </Button>\r              </Col>\r            </Row>\r            {/* Table */}\r            <Table\r              columns={columns}\r              dataSource={invoices}\r              rowKey=\"id\"\r              loading={loading}\r              pagination={{\r                pageSize: 10,\r                showSizeChanger: true,\r                showTotal: (total) => `Toplam ${total} fatura`,\r              }}\r            />\r          </Card>\r        </Col>\r      </Row>\r      {/* Invoice Detail Modal */}\r      <Modal\r        title={`Fatura Detayı - ${selectedInvoice?.invoiceNumber}`}\r        open={detailModalVisible}\r        onCancel={() => setDetailModalVisible(false)}\r        width={700}\r        footer={[\r          <Button key=\"close\" onClick={() => setDetailModalVisible(false)}>\r            Kapat\r          </Button>,\r          <Button key=\"print\" icon={<PrinterOutlined />} aria-label=\"printer outlined\">\r            Yazdır\r          </Button>,\r          <Button key=\"download\" type=\"primary\" icon={<DownloadOutlined />} aria-label=\"download outlined\">\r            İndir\r          </Button>,\r        ]}\r      >\r        {selectedInvoice && (\r          <div>\r            <Row gutter={[16, 16]}>\r              <Col span={12}>\r                <Text type=\"secondary\">Firma:</Text>\r                <Title level={5}>{selectedInvoice.tenant}</Title>\r              </Col>\r              <Col span={12}>\r                <Text type=\"secondary\">Durum:</Text>\r                <div>\r                  {selectedInvoice.status === 'paid' && (\r                    <Tag color=\"success\" icon={<CheckCircleOutlined />}>Ödendi</Tag>\r                  )}\r                  {selectedInvoice.status === 'pending' && (\r                    <Tag color=\"warning\" icon={<ClockCircleOutlined />}>Bekliyor</Tag>\r                  )}\r                  {selectedInvoice.status === 'overdue' && (\r                    <Tag color=\"error\" icon={<CloseCircleOutlined />}>Gecikmiş</Tag>\r                  )}\r                </div>\r              </Col>\r            </Row>\r            <Divider />\r            <Table\r              dataSource={selectedInvoice.items}\r              columns={[\r                { title: 'Açıklama', dataIndex: 'description', key: 'description' },\r                { title: 'Miktar', dataIndex: 'quantity', key: 'quantity' },\r                { title: 'Birim Fiyat', dataIndex: 'unitPrice', key: 'unitPrice', render: (v) => `₺${v}` },\r                { title: 'Toplam', dataIndex: 'total', key: 'total', render: (v) => `₺${v}` },\r              ]}\r              pagination={false}\r              rowKey=\"description\"\r            />\r            <Divider />\r            <Row justify=\"end\">\r              <Col>\r                <Space direction=\"vertical\" align=\"end\">\r                  <Text>Ara Toplam: ₺{selectedInvoice.amount}</Text>\r                  <Text>KDV (%18): ₺{selectedInvoice.tax}</Text>\r                  <Title level={4}>Toplam: ₺{selectedInvoice.total}</Title>\r                </Space>\r              </Col>\r            </Row>\r          </div>\r        )}\r      </Modal>\r    </div>\r  );\r};\rexport default MasterInvoicesPage;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Invoices/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { Card, Table, Tag, Button, Space, Select, DatePicker, Input, Modal, message, Tabs, Statistic, Row, Col, Progress } from 'antd';\rimport { ReloadOutlined, DownloadOutlined, FileTextOutlined, WarningOutlined, InfoCircleOutlined, CloseCircleOutlined, CheckCircleOutlined, DeleteOutlined, EyeOutlined } from '@ant-design/icons';\rimport type { ColumnsType } from 'antd/es/table';\rimport { api } from '@/services/api';\rimport './styles.css';\rconst { Option } = Select;\rconst { RangePicker } = DatePicker;\rconst { Search } = Input;\rconst { TabPane } = Tabs;\rinterface LogEntry {\r  id: number;\r  message: string;\r  level: string;\r  timeStamp: string;\r  exception?: string;\r  properties?: string;\r}\rinterface LogFile {\r  name: string;\r  size: number;\r  sizeFormatted: string;\r  lastModified: string;\r  type: string;\r}\rinterface LogStats {\r  level: string;\r  count: number;\r  lastOccurrence: string;\r}\rexport const LogsPage: React.FC = () => {\r  const [logs, setLogs] = useState<LogEntry[]>([]);\r  const [files, setFiles] = useState<LogFile[]>([]);\r  const [stats, setStats] = useState<LogStats[]>([]);\r  const [loading, setLoading] = useState(false);\r  const [selectedLevel, setSelectedLevel] = useState<string | undefined>();\r  const [dateRange, setDateRange] = useState<[any, any] | null>(null);\r  const [searchText, setSearchText] = useState('');\r  const [viewModalVisible, setViewModalVisible] = useState(false);\r  const [fileContent, setFileContent] = useState('');\r  const [selectedFile, setSelectedFile] = useState<string>('');\r  useEffect(() => {\r    fetchLogs();\r    fetchFiles();\r    fetchStats();\r  }, []);\r  const fetchLogs = async () => {\r    setLoading(true);\r    try {\r      const params: any = {\r        pageSize: 100,\r        page: 1\r      };\r      if (selectedLevel) params.level = selectedLevel;\r      if (dateRange && dateRange[0]) params.from = dateRange[0].format('YYYY-MM-DD');\r      if (dateRange && dateRange[1]) params.to = dateRange[1].format('YYYY-MM-DD');\r      const response = await api.get('/api/admin/logs/recent', { params });\r      setLogs(response.data.logs);\r    } catch (error) {\r      message.error('Loglar yüklenirken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const fetchFiles = async () => {\r    try {\r      const response = await api.get('/api/admin/logs/files');\r      setFiles(response.data.files);\r    } catch (error) {\r    }\r  };\r  const fetchStats = async () => {\r    try {\r      const response = await api.get('/api/admin/logs/stats');\r      setStats(response.data.stats);\r    } catch (error) {\r    }\r  };\r  const viewFile = async (fileName: string) => {\r    setLoading(true);\r    try {\r      const response = await api.get(`/api/admin/logs/files/${fileName}/content`, {\r        params: { lines: 500 }\r      });\r      setFileContent(response.data.content);\r      setSelectedFile(fileName);\r      setViewModalVisible(true);\r    } catch (error) {\r      message.error('Dosya içeriği yüklenemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const downloadFile = (fileName: string) => {\r    window.open(`${api.defaults.baseURL}/api/admin/logs/files/${fileName}`, '_blank');\r  };\r  const clearOldLogs = async () => {\r    Modal.confirm({\r      title: 'Eski Logları Temizle',\r      content: '30 günden eski tüm loglar silinecek. Emin misiniz?',\r      okText: 'Evet, Sil',\r      cancelText: 'İptal',\r      okType: 'danger',\r      onOk: async () => {\r        try {\r          const response = await api.delete('/api/admin/logs/clear?daysToKeep=30');\r          message.success(response.data.message);\r          fetchLogs();\r          fetchFiles();\r          fetchStats();\r        } catch (error) {\r          message.error('Log temizleme başarısız');\r        }\r      }\r    });\r  };\r  const getLevelTag = (level: string) => {\r    const levelMap: Record<string, { color: string; icon: React.ReactNode }> = {\r      'Error': { color: 'error', icon: <CloseCircleOutlined /> },\r      'Warning': { color: 'warning', icon: <WarningOutlined /> },\r      'Information': { color: 'processing', icon: <InfoCircleOutlined /> },\r      'Debug': { color: 'default', icon: <InfoCircleOutlined /> },\r      'Fatal': { color: 'error', icon: <CloseCircleOutlined /> }\r    };\r    const config = levelMap[level] || { color: 'default', icon: null };\r    return (\r      <Tag color={config.color}>\r        {config.icon} {level}\r      </Tag>\r    );\r  };\r  const columns: ColumnsType<LogEntry> = [\r    {\r      title: 'Zaman',\r      dataIndex: 'timeStamp',\r      key: 'timeStamp',\r      width: 180,\r      render: (text: string) => new Date(text).toLocaleString('tr-TR')\r    },\r    {\r      title: 'Seviye',\r      dataIndex: 'level',\r      key: 'level',\r      width: 120,\r      render: getLevelTag\r    },\r    {\r      title: 'Mesaj',\r      dataIndex: 'message',\r      key: 'message',\r      ellipsis: true\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      width: 100,\r      render: (_, record) => (\r        <Button\r          size=\"small\"\r          icon={<EyeOutlined />}\r          onClick={() = aria-label=\"eye outlined\"> {\r            Modal.info({\r              title: 'Log Detayı',\r              width: 800,\r              content: (\r                <div>\r                  <p><strong>Mesaj:</strong> {record.message}</p>\r                  {record.exception && (\r                    <pre style={{ background: '#f0f0f0', padding: 10, borderRadius: 4 }}>\r                      {record.exception}\r                    </pre>\r                  )}\r                  {record.properties && (\r                    <pre style={{ background: '#f0f0f0', padding: 10, borderRadius: 4 }}>\r                      {JSON.stringify(JSON.parse(record.properties), null, 2)}\r                    </pre>\r                  )}\r                </div>\r              )\r            });\r          }}\r        >\r          Detay\r        </Button>\r      )\r    }\r  ];\r  const fileColumns: ColumnsType<LogFile> = [\r    {\r      title: 'Dosya Adı',\r      dataIndex: 'name',\r      key: 'name',\r      render: (text) => <><FileTextOutlined /> {text}</>\r    },\r    {\r      title: 'Boyut',\r      dataIndex: 'sizeFormatted',\r      key: 'size',\r      width: 100\r    },\r    {\r      title: 'Son Değişiklik',\r      dataIndex: 'lastModified',\r      key: 'lastModified',\r      width: 180,\r      render: (text: string) => new Date(text).toLocaleString('tr-TR')\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      width: 150,\r      render: (_, record) => (\r        <Space>\r          <Button\r            size=\"small\"\r            icon={<EyeOutlined />}\r            onClick={() = aria-label=\"eye outlined\"> viewFile(record.name)}\r          >\r            Görüntüle\r          </Button>\r          <Button\r            size=\"small\"\r            icon={<DownloadOutlined />}\r            onClick={() = aria-label=\"download outlined\"> downloadFile(record.name)}\r          >\r            İndir\r          </Button>\r        </Space>\r      )\r    }\r  ];\r  const getStatColor = (level: string) => {\r    const colors: Record<string, string> = {\r      'Error': '#ff4d4f',\r      'Warning': '#faad14',\r      'Information': '#1890ff',\r      'Debug': '#52c41a'\r    };\r    return colors[level] || '#666';\r  };\r  return (\r    <div className=\"logs-page\">\r      <Card title=\"Log Yönetimi\" className=\"logs-header\">\r        <Row gutter={16}>\r          {stats.map((stat) => (\r            <Col span={6} key={stat.level}>\r              <Card>\r                <Statistic\r                  title={stat.level}\r                  value={stat.count}\r                  valueStyle={{ color: getStatColor(stat.level) }}\r                  suffix=\"log\"\r                />\r                <Progress\r                  percent={(stat.count / stats.reduce((a, b) => a + b.count, 0)) * 100}\r                  strokeColor={getStatColor(stat.level)}\r                  showInfo={false}\r                />\r              </Card>\r            </Col>\r          ))}\r        </Row>\r      </Card>\r      <Card className=\"logs-content\">\r        <Tabs defaultActiveKey=\"1\">\r          <TabPane tab=\"Canlı Loglar\" key=\"1\">\r            <Space style={{ marginBottom: 16 }}>\r              <Select\r                style={{ width: 150 }}\r                placeholder=\"Seviye\"\r                allowClear\r                onChange={setSelectedLevel}\r               aria-label=\"select field\">\r                <Option value=\"Error\">Error</Option>\r                <Option value=\"Warning\">Warning</Option>\r                <Option value=\"Information\">Information</Option>\r                <Option value=\"Debug\">Debug</Option>\r              </Select>\r              <RangePicker onChange={(dates) => setDateRange(dates as [any, any])} />\r              <Search\r                placeholder=\"Ara...\"\r                onSearch={setSearchText}\r                style={{ width: 200 }}\r              />\r              <Button icon={<ReloadOutlined />} onClick={fetchLogs} aria-label=\"reload outlined\">\r                Yenile\r              </Button>\r              <Button danger icon={<DeleteOutlined />} onClick={clearOldLogs} aria-label=\"delete outlined\">\r                Eski Logları Temizle\r              </Button>\r            </Space>\r            <Table\r              columns={columns}\r              dataSource={logs}\r              loading={loading}\r              rowKey=\"id\"\r              pagination={{ pageSize: 50 }}\r              scroll={{ x: 800 }}\r            />\r          </TabPane>\r          <TabPane tab=\"Log Dosyaları\" key=\"2\">\r            <Table\r              columns={fileColumns}\r              dataSource={files}\r              rowKey=\"name\"\r              pagination={false}\r            />\r          </TabPane>\r        </Tabs>\r      </Card>\r      <Modal\r        title={`Log Dosyası: ${selectedFile}`}\r        visible={viewModalVisible}\r        onCancel={() => setViewModalVisible(false)}\r        width={1000}\r        footer={[\r          <Button key=\"close\" onClick={() => setViewModalVisible(false)}>\r            Kapat\r          </Button>\r        ]}\r      >\r        <pre style={{ \r          maxHeight: 500, \r          overflow: 'auto', \r          background: '#f0f0f0', \r          padding: 10,\r          fontSize: 12\r        }}>\r          {fileContent}\r        </pre>\r      </Modal>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Logs/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { Card, Table, Button, Space, Tag, message, Modal, Spin, Alert, Tooltip, Badge, Divider } from 'antd';\rimport { SyncOutlined, CheckCircleOutlined, ExclamationCircleOutlined, DatabaseOutlined, HistoryOutlined, ThunderboltOutlined } from '@ant-design/icons';\rimport api from '@/services/api';\rimport Swal from 'sweetalert2';\rimport './styles.css';\rinterface TenantMigration {\r  tenantId: string;\r  tenantName: string;\r  tenantCode: string;\r  pendingMigrations: string[];\r  appliedMigrations: string[];\r  hasPendingMigrations: boolean;\r  error?: string;\r}\rinterface MigrationResult {\r  tenantId: string;\r  tenantName: string;\r  success: boolean;\r  message: string;\r  appliedMigrations?: string[];\r  error?: string;\r}\rconst MigrationsPage: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [applyingTo, setApplyingTo] = useState<string | null>(null);\r  const [migrations, setMigrations] = useState<TenantMigration[]>([]);\r  const [selectedTenant, setSelectedTenant] = useState<TenantMigration | null>(null);\r  const [historyModalVisible, setHistoryModalVisible] = useState(false);\r  useEffect(() => {\r    fetchMigrations();\r  }, []);\r  const fetchMigrations = async () => {\r    setLoading(true);\r    try {\r      const response = await api.get('/api/master/migrations/pending');\r      setMigrations(response.data.data || []);\r    } catch (error) {\r      message.error('Migration durumu alınamadı');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const applyMigrationToTenant = async (tenantId: string, tenantName: string) => {\r    const result = await Swal.fire({\r      title: 'Migration Uygula',\r      html: `\r        <div>\r          <p><strong>${tenantName}</strong> tenant'ına migration'lar uygulanacak.</p>\r          <div style=\"background-color: #fff2e8; border: 1px solid #faad14; border-radius: 4px; padding: 12px; margin-top: 12px;\">\r            <strong style=\"color: #faad14;\">⚠️ Dikkat</strong><br/>\r            Bu işlem database şemasını değiştirecektir. İşlem geri alınamaz!\r          </div>\r        </div>\r      `,\r      icon: 'warning',\r      showCancelButton: true,\r      confirmButtonText: 'Uygula',\r      cancelButtonText: 'İptal',\r      confirmButtonColor: '#ff4d4f',\r      showLoaderOnConfirm: true,\r      preConfirm: async () => {\r        try {\r          const response = await api.post(`/api/master/migrations/apply/${tenantId}`);\r          return response.data;\r        } catch (error: any) {\r          Swal.showValidationMessage(\r            `Hata: ${error.response?.data?.message || error.message || 'Migration uygulanamadı'}`\r          );\r          throw error;\r        }\r      },\r      allowOutsideClick: () => !Swal.isLoading()\r    });\r    if (result.isConfirmed) {\r      setApplyingTo(tenantId);\r      await Swal.fire({\r        title: 'Başarılı!',\r        html: `\r          <div>\r            <p>${result.value.message || 'Migration başarıyla uygulandı'}</p>\r            ${result.value.appliedMigrations && result.value.appliedMigrations.length > 0 ? `\r              <div style=\"margin-top: 12px; text-align: left;\">\r                <strong>Uygulanan Migration'lar:</strong>\r                <ul style=\"margin-top: 8px;\">\r                  ${result.value.appliedMigrations.map((m: string) => `<li>${m}</li>`).join('')}\r                </ul>\r              </div>\r            ` : ''}\r          </div>\r        `,\r        icon: 'success',\r        confirmButtonColor: '#52c41a'\r      });\r      await fetchMigrations();\r      setApplyingTo(null);\r    }\r  };\r  const applyMigrationsToAll = async () => {\r    const result = await Swal.fire({\r      title: 'Tüm Tenantlara Migration Uygula',\r      html: `\r        <div>\r          <p>Tüm aktif tenant'lara bekleyen migration'lar uygulanacak.</p>\r          <div style=\"background-color: #fff1f0; border: 1px solid #ff4d4f; border-radius: 4px; padding: 12px; margin-top: 12px;\">\r            <strong style=\"color: #ff4d4f;\">🚨 Kritik İşlem</strong><br/>\r            Bu işlem TÜM tenant database'lerini güncelleyecektir. İşlem geri alınamaz ve uzun sürebilir!\r          </div>\r        </div>\r      `,\r      icon: 'error',\r      showCancelButton: true,\r      confirmButtonText: 'Tümüne Uygula',\r      cancelButtonText: 'İptal',\r      confirmButtonColor: '#ff4d4f',\r      showLoaderOnConfirm: true,\r      preConfirm: async () => {\r        try {\r          const response = await api.post('/api/master/migrations/apply-all');\r          return response.data;\r        } catch (error: any) {\r          Swal.showValidationMessage(\r            `Hata: ${error.response?.data?.message || error.message || 'Migrationlar uygulanamadı'}`\r          );\r          throw error;\r        }\r      },\r      allowOutsideClick: () => !Swal.isLoading()\r    });\r    if (result.isConfirmed) {\r      setLoading(true);\r      // Show results\r      let resultsHtml = `<p>${result.value.message}</p><hr/>`;\r      resultsHtml += '<div style=\"max-height: 400px; overflow: auto; text-align: left;\">';\r      result.value.results.forEach((res: MigrationResult) => {\r        const icon = res.success ? '✅' : '❌';\r        const color = res.success ? '#52c41a' : '#ff4d4f';\r        resultsHtml += `\r          <div style=\"margin-bottom: 12px; padding: 8px; border-left: 3px solid ${color};\">\r            <span>${icon}</span>\r            <strong>${res.tenantName}:</strong> ${res.message}\r            ${res.error ? `<div style=\"color: #ff4d4f; margin-top: 4px; font-size: 12px;\">${res.error}</div>` : ''}\r            ${res.appliedMigrations && res.appliedMigrations.length > 0 ? `\r              <div style=\"margin-top: 4px; font-size: 12px;\">\r                <em>Uygulanan: ${res.appliedMigrations.join(', ')}</em>\r              </div>\r            ` : ''}\r          </div>\r        `;\r      });\r      resultsHtml += '</div>';\r      await Swal.fire({\r        title: 'Migration Sonuçları',\r        html: resultsHtml,\r        icon: result.value.failureCount > 0 ? 'warning' : 'success',\r        confirmButtonText: 'Tamam',\r        confirmButtonColor: result.value.failureCount > 0 ? '#faad14' : '#52c41a',\r        width: 800\r      });\r      await fetchMigrations();\r      setLoading(false);\r    }\r  };\r  const showMigrationHistory = async (tenant: TenantMigration) => {\r    setSelectedTenant(tenant);\r    setHistoryModalVisible(true);\r  };\r  const columns = [\r    {\r      title: 'Tenant',\r      key: 'tenant',\r      render: (record: TenantMigration) => (\r        <div>\r          <div style={{ fontWeight: 500 }}>{record.tenantName}</div>\r          <div style={{ fontSize: 12, color: '#666' }}>{record.tenantCode}</div>\r        </div>\r      ),\r    },\r    {\r      title: 'Durum',\r      key: 'status',\r      render: (record: TenantMigration) => {\r        if (record.error) {\r          return <Tag color=\"error\">Hata</Tag>;\r        }\r        return record.hasPendingMigrations ? (\r          <Badge count={record.pendingMigrations.length}>\r            <Tag color=\"warning\">Bekleyen Migration Var</Tag>\r          </Badge>\r        ) : (\r          <Tag color=\"success\">Güncel</Tag>\r        );\r      },\r    },\r    {\r      title: 'Bekleyen Migrationlar',\r      key: 'pending',\r      render: (record: TenantMigration) => {\r        if (record.error) {\r          return (\r            <Tooltip title={record.error}>\r              <span style={{ color: '#ff4d4f' }}>Bağlantı hatası</span>\r            </Tooltip>\r          );\r        }\r        if (!record.hasPendingMigrations) {\r          return <span style={{ color: '#52c41a' }}>Yok</span>;\r        }\r        return (\r          <div>\r            {record.pendingMigrations.map((migration, index) => (\r              <div key={index} style={{ fontSize: 12 }}>\r                • {migration}\r              </div>\r            ))}\r          </div>\r        );\r      },\r    },\r    {\r      title: 'Uygulanan',\r      key: 'applied',\r      render: (record: TenantMigration) => (\r        <span>{record.appliedMigrations?.length || 0} migration</span>\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      width: 200,\r      render: (record: TenantMigration) => (\r        <Space>\r          <Tooltip title=\"Migration geçmişini görüntüle\">\r            <Button\r              type=\"link\"\r              icon={<HistoryOutlined />}\r              onClick={() = aria-label=\"history outlined\"> showMigrationHistory(record)}\r            />\r          </Tooltip>\r          {record.hasPendingMigrations && !record.error && (\r            <Button\r              type=\"primary\"\r              size=\"small\"\r              icon={<SyncOutlined />}\r              loading={applyingTo === record.tenantId}\r              onClick={() = aria-label=\"sync outlined\"> applyMigrationToTenant(record.tenantId, record.tenantName)}\r            >\r              Migration Uygula\r            </Button>\r          )}\r        </Space>\r      ),\r    },\r  ];\r  const tenantsWithPending = migrations.filter(m => m.hasPendingMigrations && !m.error);\r  return (\r    <div className=\"migrations-page\">\r      <Card\r        title={\r          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r            <span>\r              <DatabaseOutlined /> Database Migration Yönetimi\r            </span>\r            <Space>\r              <Button\r                icon={<SyncOutlined />}\r                onClick={fetchMigrations}\r                loading={loading}\r               aria-label=\"sync outlined\">\r                Yenile\r              </Button>\r              {tenantsWithPending.length > 0 && (\r                <Button\r                  type=\"primary\"\r                  danger\r                  icon={<ThunderboltOutlined />}\r                  onClick={applyMigrationsToAll}\r                  loading={loading}\r                 aria-label=\"thunderbolt outlined\">\r                  Tümüne Uygula ({tenantsWithPending.length} tenant)\r                </Button>\r              )}\r            </Space>\r          </div>\r        }\r      >\r        {tenantsWithPending.length > 0 && (\r          <Alert\r            message={`${tenantsWithPending.length} tenant'ta bekleyen migration var`}\r            description=\"Migration'ları tek tek veya toplu olarak uygulayabilirsiniz.\"\r            type=\"warning\"\r            showIcon\r            style={{ marginBottom: 16 }}\r          />\r        )}\r        <Spin spinning={loading}>\r          <Table\r            dataSource={migrations}\r            columns={columns}\r            rowKey=\"tenantId\"\r            pagination={false}\r            rowClassName={(record) => record.error ? 'error-row' : ''}\r          />\r        </Spin>\r      </Card>\r      <Modal\r        title={`Migration Geçmişi - ${selectedTenant?.tenantName}`}\r        open={historyModalVisible}\r        onCancel={() => setHistoryModalVisible(false)}\r        footer={[\r          <Button key=\"close\" onClick={() => setHistoryModalVisible(false)}>\r            Kapat\r          </Button>\r        ]}\r        width={600}\r      >\r        {selectedTenant && (\r          <div>\r            <p><strong>Tenant Kodu:</strong> {selectedTenant.tenantCode}</p>\r            <Divider />\r            <h4>Uygulanan Migration'lar ({selectedTenant.appliedMigrations?.length || 0})</h4>\r            <div style={{ maxHeight: 300, overflow: 'auto' }}>\r              {selectedTenant.appliedMigrations?.map((migration, index) => (\r                <div key={index} style={{ padding: '4px 0' }}>\r                  <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 8 }} />\r                  {migration}\r                </div>\r              )) || <p>Migration geçmişi yok</p>}\r            </div>\r            {selectedTenant.hasPendingMigrations && (\r              <>\r                <Divider />\r                <h4 style={{ color: '#faad14' }}>\r                  Bekleyen Migration'lar ({selectedTenant.pendingMigrations?.length || 0})\r                </h4>\r                <div style={{ maxHeight: 200, overflow: 'auto' }}>\r                  {selectedTenant.pendingMigrations?.map((migration, index) => (\r                    <div key={index} style={{ padding: '4px 0' }}>\r                      <ExclamationCircleOutlined style={{ color: '#faad14', marginRight: 8 }} />\r                      {migration}\r                    </div>\r                  ))}\r                </div>\r              </>\r            )}\r          </div>\r        )}\r      </Modal>\r    </div>\r  );\r};\rexport default MigrationsPage;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Migrations/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Table,\r  Button,\r  Space,\r  Tag,\r  Switch,\r  Modal,\r  Form,\r  Input,\r  InputNumber,\r  Select,\r  Row,\r  Col,\r  Typography,\r  Badge,\r  Statistic,\r  Tooltip,\r  message,\r  Tabs,\r  List,\r  Avatar,\r  Progress,\r  Alert,\r  Segmented,\r} from 'antd';\rimport {\r  AppstoreOutlined,\r  EditOutlined,\r  SettingOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  DollarOutlined,\r  UserOutlined,\r  ShoppingOutlined,\r  TeamOutlined,\r  BarChartOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r  CloudOutlined,\r  SafetyOutlined,\r  RocketOutlined,\r  ThunderboltOutlined,\r  ReloadOutlined,\r  InfoCircleOutlined,\r  PlusOutlined,\r  MinusOutlined,\r  TableOutlined,\r  AppstoreAddOutlined,\r  CrownOutlined,\r  FireOutlined,\r  StarOutlined,\r  TrophyOutlined,\r  ExperimentOutlined,\r} from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport CountUp from 'react-countup';\rimport { masterApi } from '@/shared/api/master.api';\rimport '../../styles/master-layout.css';\rimport './modules.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst { Option } = Select;\rinterface Module {\r  id: string;\r  name: string;\r  displayName: string;\r  description: string;\r  icon: string;\r  isActive: boolean;\r  isPremium: boolean;\r  price: number;\r  features: string[];\r  permissions: string[];\r  dependencies: string[];\r  version: string;\r  lastUpdated: string;\r  usageCount: number;\r  color: string;\r}\rconst moduleIcons: Record<string, React.ReactNode> = {\r  crm: <TeamOutlined />,\r  inventory: <DatabaseOutlined />,\r  sales: <ShoppingOutlined />,\r  finance: <DollarOutlined />,\r  hr: <UserOutlined />,\r  production: <SettingOutlined />,\r  reporting: <BarChartOutlined />,\r  api: <ApiOutlined />,\r  cloud: <CloudOutlined />,\r  security: <SafetyOutlined />,\r};\rconst moduleColors: Record<string, string> = {\r  crm: '#1890ff',\r  inventory: '#52c41a',\r  sales: '#fa8c16',\r  finance: '#722ed1',\r  hr: '#13c2c2',\r  production: '#eb2f96',\r  reporting: '#faad14',\r  api: '#2f54eb',\r  cloud: '#73d13d',\r  security: '#ff4d4f',\r};\rexport const MasterModulesPage: React.FC = () => {\r  const [modules, setModules] = useState<Module[]>([]);\r  const [loading, setLoading] = useState(false);\r  const [showEditModal, setShowEditModal] = useState(false);\r  const [showFeatureModal, setShowFeatureModal] = useState(false);\r  const [selectedModule, setSelectedModule] = useState<Module | null>(null);\r  const [form] = Form.useForm();\r  const [featureForm] = Form.useForm();\r  const [activeTab, setActiveTab] = useState('all');\r  // Mock data - API'den gelecek\r  const mockModules: Module[] = [\r    {\r      id: '1',\r      name: 'crm',\r      displayName: 'CRM Modülü',\r      description: 'Müşteri ilişkileri yönetimi modülü',\r      icon: 'crm',\r      isActive: true,\r      isPremium: false,\r      price: 0,\r      features: ['Müşteri Yönetimi', 'Lead Takibi', 'Satış Pipeline', 'Raporlama'],\r      permissions: ['crm.view', 'crm.create', 'crm.update', 'crm.delete'],\r      dependencies: [],\r      version: '2.1.0',\r      lastUpdated: '2024-01-15',\r      usageCount: 245,\r      color: '#1890ff',\r    },\r    {\r      id: '2',\r      name: 'inventory',\r      displayName: 'Stok Yönetimi',\r      description: 'Envanter ve stok takip modülü',\r      icon: 'inventory',\r      isActive: true,\r      isPremium: false,\r      price: 0,\r      features: ['Ürün Yönetimi', 'Stok Takibi', 'Depo Yönetimi', 'Stok Uyarıları'],\r      permissions: ['inventory.view', 'inventory.create', 'inventory.update', 'inventory.delete'],\r      dependencies: [],\r      version: '2.0.5',\r      lastUpdated: '2024-01-10',\r      usageCount: 189,\r      color: '#52c41a',\r    },\r    {\r      id: '3',\r      name: 'sales',\r      displayName: 'Satış Yönetimi',\r      description: 'Satış ve sipariş yönetimi modülü',\r      icon: 'sales',\r      isActive: true,\r      isPremium: true,\r      price: 99,\r      features: ['Sipariş Yönetimi', 'Fatura Oluşturma', 'Ödeme Takibi', 'Satış Raporları'],\r      permissions: ['sales.view', 'sales.create', 'sales.update', 'sales.delete'],\r      dependencies: ['inventory'],\r      version: '1.8.2',\r      lastUpdated: '2024-01-08',\r      usageCount: 156,\r      color: '#fa8c16',\r    },\r    {\r      id: '4',\r      name: 'finance',\r      displayName: 'Finans Modülü',\r      description: 'Finansal yönetim ve muhasebe modülü',\r      icon: 'finance',\r      isActive: true,\r      isPremium: true,\r      price: 149,\r      features: ['Gelir/Gider Takibi', 'Bütçe Yönetimi', 'Finansal Raporlar', 'Vergi Hesaplamaları'],\r      permissions: ['finance.view', 'finance.create', 'finance.update', 'finance.delete'],\r      dependencies: ['sales'],\r      version: '1.5.0',\r      lastUpdated: '2024-01-05',\r      usageCount: 98,\r      color: '#722ed1',\r    },\r    {\r      id: '5',\r      name: 'hr',\r      displayName: 'İnsan Kaynakları',\r      description: 'İK ve personel yönetimi modülü',\r      icon: 'hr',\r      isActive: false,\r      isPremium: true,\r      price: 199,\r      features: ['Personel Yönetimi', 'İzin Takibi', 'Maaş Bordrosu', 'Performans Değerlendirme'],\r      permissions: ['hr.view', 'hr.create', 'hr.update', 'hr.delete'],\r      dependencies: [],\r      version: '1.2.0',\r      lastUpdated: '2023-12-20',\r      usageCount: 45,\r      color: '#13c2c2',\r    },\r  ];\r  useEffect(() => {\r    fetchModules();\r  }, []);\r  const fetchModules = async () => {\r    setLoading(true);\r    try {\r      // API çağrısı yapılacak\r      // const response = await masterApi.modules.getAll();\r      // setModules(response.data);\r      // Şimdilik mock data kullanıyoruz\r      setTimeout(() => {\r        setModules(mockModules);\r        setLoading(false);\r      }, 500);\r    } catch (error) {\r      message.error('Modüller yüklenirken hata oluştu');\r      setLoading(false);\r    }\r  };\r  const handleToggleStatus = async (module: Module) => {\r    try {\r      // await masterApi.modules.toggleStatus(module.id, !module.isActive);\r      message.success(`${module.displayName} ${module.isActive ? 'devre dışı bırakıldı' : 'aktif edildi'}`);\r      fetchModules();\r    } catch (error) {\r      message.error('Durum değiştirilemedi');\r    }\r  };\r  const handleEdit = (module: Module) => {\r    setSelectedModule(module);\r    form.setFieldsValue({\r      displayName: module.displayName,\r      description: module.description,\r      price: module.price,\r      isPremium: module.isPremium,\r      version: module.version,\r    });\r    setShowEditModal(true);\r  };\r  const handleEditSubmit = async (values: any) => {\r    try {\r      // await masterApi.modules.update(selectedModule!.id, values);\r      message.success('Modül güncellendi');\r      setShowEditModal(false);\r      fetchModules();\r    } catch (error) {\r      message.error('Modül güncellenemedi');\r    }\r  };\r  const handleManageFeatures = (module: Module) => {\r    setSelectedModule(module);\r    setShowFeatureModal(true);\r  };\r  const stats = [\r    {\r      title: 'Toplam Modül',\r      value: modules.length,\r      icon: <AppstoreOutlined />,\r      color: '#1890ff',\r    },\r    {\r      title: 'Aktif Modül',\r      value: modules.filter(m => m.isActive).length,\r      icon: <CheckCircleOutlined />,\r      color: '#52c41a',\r    },\r    {\r      title: 'Premium Modül',\r      value: modules.filter(m => m.isPremium).length,\r      icon: <DollarOutlined />,\r      color: '#722ed1',\r    },\r    {\r      title: 'Toplam Kullanım',\r      value: modules.reduce((sum, m) => sum + m.usageCount, 0),\r      icon: <TeamOutlined />,\r      color: '#fa8c16',\r    },\r  ];\r  const columns = [\r    {\r      title: 'Modül',\r      key: 'module',\r      render: (record: Module) => (\r        <Space>\r          <Avatar\r            style={{ backgroundColor: moduleColors[record.name] }}\r            icon={moduleIcons[record.name]}\r            size=\"large\"\r          />\r          <div>\r            <Text strong>{record.displayName}</Text>\r            {record.isPremium && (\r              <Badge count=\"Premium\" style={{ backgroundColor: '#722ed1', marginLeft: 8 }} />\r            )}\r            <br />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {record.description}\r            </Text>\r          </div>\r        </Space>\r      ),\r    },\r    {\r      title: 'Versiyon',\r      dataIndex: 'version',\r      key: 'version',\r      render: (version: string) => <Tag>{version}</Tag>,\r    },\r    {\r      title: 'Özellikler',\r      key: 'features',\r      render: (record: Module) => (\r        <Tooltip title={record.features.join(', ')}>\r          <Tag color=\"blue\">{record.features.length} Özellik</Tag>\r        </Tooltip>\r      ),\r    },\r    {\r      title: 'Fiyat',\r      dataIndex: 'price',\r      key: 'price',\r      render: (price: number, record: Module) => (\r        record.isPremium ? (\r          <Text strong style={{ color: '#722ed1' }}>\r            ${price}/ay\r          </Text>\r        ) : (\r          <Tag color=\"green\">Ücretsiz</Tag>\r        )\r      ),\r    },\r    {\r      title: 'Kullanım',\r      dataIndex: 'usageCount',\r      key: 'usageCount',\r      render: (count: number) => (\r        <Space>\r          <TeamOutlined />\r          <Text>{count} Tenant</Text>\r        </Space>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'isActive',\r      key: 'isActive',\r      render: (isActive: boolean, record: Module) => (\r        <Switch\r          checked={isActive}\r          onChange={() => handleToggleStatus(record)}\r          checkedChildren=\"Aktif\"\r          unCheckedChildren=\"Pasif\"\r        />\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      render: (record: Module) => (\r        <Space>\r          <Tooltip title=\"Düzenle\">\r            <Button\r              type=\"text\"\r              icon={<EditOutlined />}\r              onClick={() = aria-label=\"edit outlined\"> handleEdit(record)}\r            />\r          </Tooltip>\r          <Tooltip title=\"Özellikler\">\r            <Button\r              type=\"text\"\r              icon={<SettingOutlined />}\r              onClick={() = aria-label=\"setting outlined\"> handleManageFeatures(record)}\r            />\r          </Tooltip>\r        </Space>\r      ),\r    },\r  ];\r  const filteredModules = activeTab === 'all' \r    ? modules \r    : activeTab === 'active' \r      ? modules.filter(m => m.isActive)\r      : activeTab === 'premium'\r        ? modules.filter(m => m.isPremium)\r        : modules;\r  const [viewMode, setViewMode] = useState<'grid' | 'table'>('grid');\r  return (\r    <div className=\"master-modules-page\">\r      {/* Header */}\r      <motion.div \r        className=\"modules-header\"\r        initial={{ opacity: 0, y: -20 }}\r        animate={{ opacity: 1, y: 0 }}\r        transition={{ duration: 0.5 }}\r      >\r        <h1>\r          <AppstoreOutlined /> Modül Yönetimi\r        </h1>\r        <p className=\"subtitle\">Sistem modüllerini yönetin, yapılandırın ve özelleştirin</p>\r        <Space size=\"large\">\r          <Button\r            type=\"primary\"\r            icon={<AppstoreAddOutlined />}\r            size=\"large\"\r            className=\"gradient-button\"\r           aria-label=\"appstore add outlined\">\r            Yeni Modül Ekle\r          </Button>\r          <Button\r            icon={<ReloadOutlined />}\r            onClick={fetchModules}\r            loading={loading}\r            size=\"large\"\r           aria-label=\"reload outlined\">\r            Yenile\r          </Button>\r        </Space>\r      </motion.div>\r      {/* Stats */}\r      <Row gutter={[24, 24]} className=\"modules-stats\">\r        {stats.map((stat, index) => (\r          <Col xs={24} sm={12} lg={6} key={index}>\r            <motion.div\r              initial={{ opacity: 0, y: 20 }}\r              animate={{ opacity: 1, y: 0 }}\r              transition={{ delay: index * 0.1 }}\r              whileHover={{ scale: 1.02 }}\r            >\r              <Card className=\"module-stat-card\">\r                <div className=\"stat-icon-wrapper\" style={{\r                  background: `linear-gradient(135deg, ${stat.color}20 0%, ${stat.color}10 100%)`\r                }}>\r                  {stat.icon}\r                </div>\r                <div className=\"stat-number\">\r                  <CountUp end={stat.value} separator=\",\" duration={2} />\r                </div>\r                <div className=\"stat-title\">{stat.title}</div>\r                <div className=\"stat-change\">\r                  <Tag color=\"success\">+12%</Tag>\r                  <Text type=\"secondary\" style={{ fontSize: 12 }}>Bu ay</Text>\r                </div>\r              </Card>\r            </motion.div>\r          </Col>\r        ))}\r      </Row>\r      {/* Controls */}\r      <Card className=\"controls-card\">\r        <Row align=\"middle\" justify=\"space-between\">\r          <Col>\r            <Space size=\"middle\">\r              <Tabs activeKey={activeTab} onChange={setActiveTab} style={{ marginBottom: 0 }}>\r                <TabPane tab=\"Tüm Modüller\" key=\"all\" />\r                <TabPane tab=\"Aktif Modüller\" key=\"active\" />\r                <TabPane tab=\"Premium Modüller\" key=\"premium\" />\r              </Tabs>\r            </Space>\r          </Col>\r          <Col>\r            <Segmented\r              options={[\r                { label: 'Kart Görünümü', value: 'grid', icon: <AppstoreOutlined /> },\r                { label: 'Tablo Görünümü', value: 'table', icon: <TableOutlined /> },\r              ]}\r              value={viewMode}\r              onChange={(value) => setViewMode(value as 'grid' | 'table')}\r              className=\"view-toggle\"\r            />\r          </Col>\r        </Row>\r      </Card>\r      {/* Module Cards Grid */}\r      {viewMode === 'grid' ? (\r        <Card style={{ background: 'transparent', border: 'none', boxShadow: 'none' }}>\r          <Row gutter={[24, 24]}>\r            {filteredModules.map((module, index) => (\r              <Col xs={24} sm={12} lg={8} xl={6} key={module.id}>\r                <motion.div\r                  initial={{ opacity: 0, scale: 0.9 }}\r                  animate={{ opacity: 1, scale: 1 }}\r                  transition={{ delay: index * 0.05 }}\r                >\r                  <Card\r                    className={`module-card ${module.isPremium ? 'premium' : ''}`}\r                    hoverable\r                    style={{ borderColor: moduleColors[module.name] }}\r                  >\r                    <div className=\"module-header\">\r                      <div className=\"module-icon-box\" style={{\r                        background: `linear-gradient(135deg, ${moduleColors[module.name]}20 0%, ${moduleColors[module.name]}10 100%)`,\r                        color: moduleColors[module.name]\r                      }}>\r                        {moduleIcons[module.name]}\r                      </div>\r                      <div className=\"module-info\">\r                        <h3 className=\"module-name\">\r                          {module.displayName}\r                        </h3>\r                        <p className=\"module-description\">\r                          {module.description}\r                        </p>\r                      </div>\r                    </div>\r                    <div className=\"module-badges\">\r                      {module.isPremium && (\r                        <span className=\"module-badge badge-premium\">\r                          <CrownOutlined /> Premium\r                        </span>\r                      )}\r                      {module.isActive ? (\r                        <span className=\"module-badge badge-active\">Aktif</span>\r                      ) : (\r                        <span className=\"module-badge badge-inactive\">Pasif</span>\r                      )}\r                      {module.version === '2.1.0' && (\r                        <span className=\"module-badge badge-new\">\r                          <FireOutlined /> Yeni\r                        </span>\r                      )}\r                    </div>\r                    <div className=\"module-features\">\r                      <ul className=\"feature-list\">\r                        {module.features.slice(0, 3).map((feature, idx) => (\r                          <li key={idx} className=\"feature-item\">\r                            <span className=\"feature-icon\">\r                              <CheckCircleOutlined />\r                            </span>\r                            {feature}\r                          </li>\r                        ))}\r                      </ul>\r                    </div>\r                    <div className=\"module-progress\">\r                      <Progress\r                        percent={Math.round((module.usageCount / 300) * 100)}\r                        size=\"small\"\r                        format={() => `${module.usageCount} Kullanıcı`}\r                      />\r                    </div>\r                    <div className=\"module-footer\">\r                      <div>\r                        {module.isPremium ? (\r                          <div className=\"module-price\">${module.price}/ay</div>\r                        ) : (\r                          <Tag color=\"green\" style={{ fontSize: 14 }}>Ücretsiz</Tag>\r                        )}\r                      </div>\r                      <div className=\"module-actions\">\r                        <Switch\r                          className=\"module-toggle\"\r                          checked={module.isActive}\r                          onChange={() => handleToggleStatus(module)}\r                        />\r                        <Tooltip title=\"Düzenle\">\r                          <Button\r                            type=\"text\"\r                            icon={<EditOutlined />}\r                            onClick={() = aria-label=\"edit outlined\"> handleEdit(module)}\r                          />\r                        </Tooltip>\r                        <Tooltip title=\"Özellikler\">\r                          <Button\r                            type=\"text\"\r                            icon={<SettingOutlined />}\r                            onClick={() = aria-label=\"setting outlined\"> handleManageFeatures(module)}\r                          />\r                        </Tooltip>\r                      </div>\r                    </div>\r                  </Card>\r                </motion.div>\r              </Col>\r            ))}\r          </Row>\r        </Card>\r      ) : (\r        <Card className=\"modules-table-card\">\r          <Table\r            columns={columns}\r            dataSource={filteredModules}\r            rowKey=\"id\"\r            loading={loading}\r            pagination={{\r              pageSize: 10,\r              showTotal: (total) => `Toplam ${total} modül`,\r            }}\r          />\r        </Card>\r      )}\r      {/* Edit Modal */}\r      <Modal\r        title=\"Modül Düzenle\"\r        open={showEditModal}\r        onCancel={() => setShowEditModal(false)}\r        footer={null}\r        width={600}\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleEditSubmit}\r        >\r          <Form.Item\r            name=\"displayName\"\r            label=\"Modül Adı\"\r            rules={[{ required: true, message: 'Modül adı zorunlu' }]}\r          >\r            <Input / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item\r            name=\"description\"\r            label=\"Açıklama\"\r            rules={[{ required: true, message: 'Açıklama zorunlu' }]}\r          >\r            <Input.TextArea rows={3} / aria-label=\"input field\">\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"version\"\r                label=\"Versiyon\"\r                rules={[{ required: true, message: 'Versiyon zorunlu' }]}\r              >\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"price\"\r                label=\"Fiyat ($/ay)\"\r              >\r                <InputNumber min={0} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item\r            name=\"isPremium\"\r            valuePropName=\"checked\"\r          >\r            <Switch checkedChildren=\"Premium\" unCheckedChildren=\"Ücretsiz\" />\r          </Form.Item>\r          <Form.Item>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => setShowEditModal(false)}>İptal</Button>\r              <Button type=\"primary\" htmlType=\"submit\">\r                Kaydet\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Features Modal */}\r      <Modal\r        title={`${selectedModule?.displayName} - Özellikler`}\r        open={showFeatureModal}\r        onCancel={() => setShowFeatureModal(false)}\r        footer={null}\r        width={700}\r      >\r        {selectedModule && (\r          <Tabs defaultActiveKey=\"features\">\r            <TabPane tab=\"Özellikler\" key=\"features\">\r              <List\r                dataSource={selectedModule.features}\r                renderItem={(feature) => (\r                  <List.Item\r                    actions={[\r                      <Button\r                        type=\"text\"\r                        icon={<MinusOutlined />}\r                        danger\r                        size=\"small\"\r                      / aria-label=\"minus outlined\">\r                    ]}\r                  >\r                    <List.Item.Meta\r                      avatar={<CheckCircleOutlined style={{ color: '#52c41a' }} />}\r                      title={feature}\r                    />\r                  </List.Item>\r                )}\r              />\r              <Button\r                type=\"dashed\"\r                icon={<PlusOutlined />}\r                style={{ width: '100%', marginTop: 16 }}\r               aria-label=\"plus outlined\">\r                Yeni Özellik Ekle\r              </Button>\r            </TabPane>\r            <TabPane tab=\"İzinler\" key=\"permissions\">\r              <List\r                dataSource={selectedModule.permissions}\r                renderItem={(permission) => (\r                  <List.Item>\r                    <Tag color=\"blue\">{permission}</Tag>\r                  </List.Item>\r                )}\r              />\r            </TabPane>\r            <TabPane tab=\"Bağımlılıklar\" key=\"dependencies\">\r              {selectedModule.dependencies.length > 0 ? (\r                <List\r                  dataSource={selectedModule.dependencies}\r                  renderItem={(dep) => (\r                    <List.Item>\r                      <Tag color=\"orange\">{dep}</Tag>\r                    </List.Item>\r                  )}\r                />\r              ) : (\r                <Alert\r                  message=\"Bağımlılık Yok\"\r                  description=\"Bu modülün başka modüllere bağımlılığı bulunmuyor.\"\r                  type=\"info\"\r                />\r              )}\r            </TabPane>\r          </Tabs>\r        )}\r      </Modal>\r    </div>\r  );\r};\rexport default MasterModulesPage;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Modules/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Row,\r  Col,\r  Statistic,\r  Progress,\r  Typography,\r  Alert,\r  Button,\r  Space,\r  Tag,\r  Table,\r  Tabs,\r  Badge,\r  List,\r  Timeline,\r  Select,\r  DatePicker,\r  Tooltip,\r  message,\r  Divider,\r  Descriptions,\r  Switch,\r  notification,\r  Modal,\r  Input,\r} from 'antd';\rimport {\r  DashboardOutlined,\r  CloudServerOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r  ClockCircleOutlined,\r  WarningOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  ReloadOutlined,\r  SettingOutlined,\r  ThunderboltOutlined,\r  InfoCircleOutlined,\r  BugOutlined,\r  FileTextOutlined,\r  BarChartOutlined,\r  LineChartOutlined,\r  PieChartOutlined,\r  RocketOutlined,\r  WifiOutlined,\r  GlobalOutlined,\r  LockOutlined,\r  SafetyOutlined,\r  ExclamationCircleOutlined,\r  SearchOutlined,\r  FilterOutlined,\r  DownloadOutlined,\r  ClearOutlined,\r  PoweroffOutlined,\r  PlayCircleOutlined,\r  PauseCircleOutlined,\r  StopOutlined,\r  SyncOutlined,\r  HeartOutlined,\r  AlertOutlined,\r} from '@ant-design/icons';\rimport { Line, Pie, Column, Area, Gauge } from '@ant-design/plots';\rimport { motion } from 'framer-motion';\rimport dayjs from 'dayjs';\rimport relativeTime from 'dayjs/plugin/relativeTime';\rimport { masterApi } from '@/shared/api/master.api';\rimport '../../styles/master-layout.css';\rdayjs.extend(relativeTime);\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst { Option } = Select;\rconst { RangePicker } = DatePicker;\rconst { TextArea } = Input;\rinterface SystemMetric {\r  name: string;\r  value: number;\r  unit: string;\r  status: 'normal' | 'warning' | 'critical';\r  trend?: 'up' | 'down' | 'stable';\r}\rinterface Service {\r  id: string;\r  name: string;\r  status: 'running' | 'stopped' | 'error' | 'starting' | 'stopping';\r  uptime: string;\r  cpu: number;\r  memory: number;\r  responseTime: number;\r  errorRate: number;\r  lastCheck: string;\r}\rinterface LogEntry {\r  id: string;\r  timestamp: string;\r  level: 'info' | 'warning' | 'error' | 'debug';\r  source: string;\r  message: string;\r  details?: any;\r}\rinterface Alert {\r  id: string;\r  type: 'error' | 'warning' | 'info';\r  title: string;\r  description: string;\r  timestamp: string;\r  resolved: boolean;\r}\rexport const MasterMonitoringPage: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [activeTab, setActiveTab] = useState('overview');\r  const [services, setServices] = useState<Service[]>([]);\r  const [logs, setLogs] = useState<LogEntry[]>([]);\r  const [alerts, setAlerts] = useState<Alert[]>([]);\r  const [selectedService, setSelectedService] = useState<Service | null>(null);\r  const [showServiceModal, setShowServiceModal] = useState(false);\r  const [showLogModal, setShowLogModal] = useState(false);\r  const [selectedLog, setSelectedLog] = useState<LogEntry | null>(null);\r  const [logLevel, setLogLevel] = useState<string>('all');\r  const [dateRange, setDateRange] = useState<[dayjs.Dayjs, dayjs.Dayjs] | null>(null);\r  const [autoRefresh, setAutoRefresh] = useState(true);\r  const [refreshInterval, setRefreshInterval] = useState(30000); // 30 seconds\r  // Mock system metrics\r  const systemMetrics: SystemMetric[] = [\r    { name: 'CPU Kullanımı', value: 42, unit: '%', status: 'normal', trend: 'stable' },\r    { name: 'Bellek Kullanımı', value: 68, unit: '%', status: 'warning', trend: 'up' },\r    { name: 'Disk Kullanımı', value: 35, unit: '%', status: 'normal', trend: 'up' },\r    { name: 'Ağ Trafiği', value: 125, unit: 'MB/s', status: 'normal', trend: 'stable' },\r  ];\r  // Mock services data\r  const mockServices: Service[] = [\r    {\r      id: '1',\r      name: 'API Gateway',\r      status: 'running',\r      uptime: '15d 3h 45m',\r      cpu: 25,\r      memory: 45,\r      responseTime: 125,\r      errorRate: 0.2,\r      lastCheck: dayjs().subtract(30, 'seconds').toISOString(),\r    },\r    {\r      id: '2',\r      name: 'PostgreSQL',\r      status: 'running',\r      uptime: '30d 12h 10m',\r      cpu: 15,\r      memory: 62,\r      responseTime: 8,\r      errorRate: 0,\r      lastCheck: dayjs().subtract(30, 'seconds').toISOString(),\r    },\r    {\r      id: '3',\r      name: 'Redis Cache',\r      status: 'running',\r      uptime: '30d 12h 10m',\r      cpu: 5,\r      memory: 25,\r      responseTime: 2,\r      errorRate: 0,\r      lastCheck: dayjs().subtract(30, 'seconds').toISOString(),\r    },\r    {\r      id: '4',\r      name: 'RabbitMQ',\r      status: 'running',\r      uptime: '10d 5h 30m',\r      cpu: 12,\r      memory: 38,\r      responseTime: 15,\r      errorRate: 0.1,\r      lastCheck: dayjs().subtract(30, 'seconds').toISOString(),\r    },\r    {\r      id: '5',\r      name: 'Elasticsearch',\r      status: 'warning',\r      uptime: '5d 2h 15m',\r      cpu: 78,\r      memory: 85,\r      responseTime: 450,\r      errorRate: 2.5,\r      lastCheck: dayjs().subtract(30, 'seconds').toISOString(),\r    },\r    {\r      id: '6',\r      name: 'MinIO Storage',\r      status: 'running',\r      uptime: '20d 8h 55m',\r      cpu: 8,\r      memory: 30,\r      responseTime: 35,\r      errorRate: 0,\r      lastCheck: dayjs().subtract(30, 'seconds').toISOString(),\r    },\r  ];\r  // Mock logs data\r  const mockLogs: LogEntry[] = [\r    {\r      id: '1',\r      timestamp: dayjs().subtract(2, 'minutes').toISOString(),\r      level: 'info',\r      source: 'API Gateway',\r      message: 'New tenant registered: TechCorp',\r    },\r    {\r      id: '2',\r      timestamp: dayjs().subtract(5, 'minutes').toISOString(),\r      level: 'warning',\r      source: 'Elasticsearch',\r      message: 'High memory usage detected (85%)',\r      details: { memory: 85, threshold: 80 },\r    },\r    {\r      id: '3',\r      timestamp: dayjs().subtract(10, 'minutes').toISOString(),\r      level: 'error',\r      source: 'Payment Service',\r      message: 'Failed to process payment for order #12345',\r      details: { orderId: '12345', error: 'Gateway timeout' },\r    },\r    {\r      id: '4',\r      timestamp: dayjs().subtract(15, 'minutes').toISOString(),\r      level: 'info',\r      source: 'System',\r      message: 'Scheduled backup completed successfully',\r    },\r    {\r      id: '5',\r      timestamp: dayjs().subtract(30, 'minutes').toISOString(),\r      level: 'debug',\r      source: 'Redis Cache',\r      message: 'Cache invalidation completed for key: products_*',\r    },\r  ];\r  // Mock alerts\r  const mockAlerts: Alert[] = [\r    {\r      id: '1',\r      type: 'warning',\r      title: 'Yüksek Bellek Kullanımı',\r      description: 'Elasticsearch servisi %85 bellek kullanımına ulaştı',\r      timestamp: dayjs().subtract(5, 'minutes').toISOString(),\r      resolved: false,\r    },\r    {\r      id: '2',\r      type: 'error',\r      title: 'Ödeme Hatası',\r      description: 'Son 10 dakikada 3 ödeme işlemi başarısız oldu',\r      timestamp: dayjs().subtract(10, 'minutes').toISOString(),\r      resolved: false,\r    },\r    {\r      id: '3',\r      type: 'info',\r      title: 'Sistem Güncellemesi',\r      description: 'Yeni güvenlik yaması uygulandı',\r      timestamp: dayjs().subtract(1, 'hour').toISOString(),\r      resolved: true,\r    },\r  ];\r  useEffect(() => {\r    fetchMonitoringData();\r    if (autoRefresh) {\r      const interval = setInterval(fetchMonitoringData, refreshInterval);\r      return () => clearInterval(interval);\r    }\r  }, [autoRefresh, refreshInterval]);\r  const fetchMonitoringData = async () => {\r    setLoading(true);\r    try {\r      // API çağrıları yapılacak\r      // const [status, metrics, logs] = await Promise.all([\r      //   masterApi.monitoring.getSystemStatus(),\r      //   masterApi.monitoring.getPerformanceMetrics(),\r      //   masterApi.monitoring.getLogs(),\r      // ]);\r      // Şimdilik mock data kullanıyoruz\r      setTimeout(() => {\r        setServices(mockServices);\r        setLogs(mockLogs);\r        setAlerts(mockAlerts);\r        setLoading(false);\r      }, 500);\r    } catch (error) {\r      message.error('Monitoring verileri yüklenirken hata oluştu');\r      setLoading(false);\r    }\r  };\r  const handleServiceAction = async (service: Service, action: 'start' | 'stop' | 'restart') => {\r    try {\r      // await masterApi.monitoring.restartService(service.id);\r      notification.success({\r        message: 'İşlem Başarılı',\r        description: `${service.name} servisi ${action === 'restart' ? 'yeniden başlatıldı' : action === 'start' ? 'başlatıldı' : 'durduruldu'}`,\r      });\r      fetchMonitoringData();\r    } catch (error) {\r      message.error('İşlem başarısız oldu');\r    }\r  };\r  const handleClearCache = async () => {\r    Modal.confirm({\r      title: 'Önbelleği Temizle',\r      content: 'Tüm önbellek verilerini temizlemek istediğinizden emin misiniz?',\r      okText: 'Temizle',\r      okType: 'danger',\r      cancelText: 'İptal',\r      onOk: async () => {\r        try {\r          // await masterApi.monitoring.clearCache();\r          message.success('Önbellek temizlendi');\r        } catch (error) {\r          message.error('Önbellek temizlenemedi');\r        }\r      },\r    });\r  };\r  const getServiceStatusColor = (status: string) => {\r    const colors: Record<string, string> = {\r      running: 'success',\r      stopped: 'default',\r      error: 'error',\r      starting: 'processing',\r      stopping: 'warning',\r    };\r    return colors[status] || 'default';\r  };\r  const getServiceStatusIcon = (status: string) => {\r    const icons: Record<string, React.ReactNode> = {\r      running: <CheckCircleOutlined />,\r      stopped: <StopOutlined />,\r      error: <CloseCircleOutlined />,\r      starting: <SyncOutlined spin />,\r      stopping: <PauseCircleOutlined />,\r    };\r    return icons[status] || <InfoCircleOutlined />;\r  };\r  const getLogLevelColor = (level: string) => {\r    const colors: Record<string, string> = {\r      info: 'blue',\r      warning: 'orange',\r      error: 'red',\r      debug: 'default',\r    };\r    return colors[level] || 'default';\r  };\r  // CPU Usage Chart Data\r  const cpuChartData = Array.from({ length: 24 }, (_, i) => ({\r    time: `${i}:00`,\r    value: Math.floor(Math.random() * 40) + 30,\r  }));\r  const cpuChartConfig = {\r    data: cpuChartData,\r    xField: 'time',\r    yField: 'value',\r    smooth: true,\r    color: '#1890ff',\r    areaStyle: {\r      fill: 'l(270) 0:#ffffff 1:#1890ff',\r    },\r    yAxis: {\r      max: 100,\r      min: 0,\r    },\r  };\r  // Memory Usage Gauge\r  const memoryGaugeConfig = {\r    percent: 0.68,\r    range: {\r      color: 'l(0) 0:#52c41a 0.5:#faad14 1:#ff4d4f',\r    },\r    indicator: {\r      pointer: {\r        style: {\r          stroke: '#D0D0D0',\r        },\r      },\r      pin: {\r        style: {\r          stroke: '#D0D0D0',\r        },\r      },\r    },\r    statistic: {\r      content: {\r        style: {\r          fontSize: '24px',\r        },\r        formatter: () => '68%',\r      },\r    },\r  };\r  // Service Health Pie Chart\r  const serviceHealthData = [\r    { type: 'Sağlıklı', value: 4 },\r    { type: 'Uyarı', value: 1 },\r    { type: 'Hata', value: 1 },\r  ];\r  const serviceHealthConfig = {\r    data: serviceHealthData,\r    angleField: 'value',\r    colorField: 'type',\r    radius: 0.8,\r    label: {\r      type: 'outer',\r    },\r    color: ['#52c41a', '#faad14', '#ff4d4f'],\r  };\r  const serviceColumns = [\r    {\r      title: 'Servis',\r      dataIndex: 'name',\r      key: 'name',\r      render: (name: string, record: Service) => (\r        <Space>\r          <Badge status={getServiceStatusColor(record.status) as any} />\r          <Text strong>{name}</Text>\r        </Space>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status: string) => (\r        <Tag color={getServiceStatusColor(status)} icon={getServiceStatusIcon(status)}>\r          {status.toUpperCase()}\r        </Tag>\r      ),\r    },\r    {\r      title: 'Uptime',\r      dataIndex: 'uptime',\r      key: 'uptime',\r    },\r    {\r      title: 'CPU',\r      dataIndex: 'cpu',\r      key: 'cpu',\r      render: (cpu: number) => (\r        <Progress\r          percent={cpu}\r          size=\"small\"\r          status={cpu > 80 ? 'exception' : cpu > 60 ? 'active' : 'success'}\r        />\r      ),\r    },\r    {\r      title: 'Bellek',\r      dataIndex: 'memory',\r      key: 'memory',\r      render: (memory: number) => (\r        <Progress\r          percent={memory}\r          size=\"small\"\r          status={memory > 80 ? 'exception' : memory > 60 ? 'active' : 'success'}\r        />\r      ),\r    },\r    {\r      title: 'Yanıt Süresi',\r      dataIndex: 'responseTime',\r      key: 'responseTime',\r      render: (time: number) => (\r        <Tag color={time > 500 ? 'red' : time > 200 ? 'orange' : 'green'}>\r          {time}ms\r        </Tag>\r      ),\r    },\r    {\r      title: 'Hata Oranı',\r      dataIndex: 'errorRate',\r      key: 'errorRate',\r      render: (rate: number) => (\r        <Tag color={rate > 5 ? 'red' : rate > 2 ? 'orange' : 'green'}>\r          {rate}%\r        </Tag>\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      render: (record: Service) => (\r        <Space>\r          <Tooltip title=\"Detaylar\">\r            <Button\r              type=\"text\"\r              icon={<InfoCircleOutlined />}\r              onClick={() = aria-label=\"info circle outlined\"> {\r                setSelectedService(record);\r                setShowServiceModal(true);\r              }}\r            />\r          </Tooltip>\r          <Tooltip title=\"Yeniden Başlat\">\r            <Button\r              type=\"text\"\r              icon={<ReloadOutlined />}\r              onClick={() = aria-label=\"reload outlined\"> handleServiceAction(record, 'restart')}\r            />\r          </Tooltip>\r          {record.status === 'running' ? (\r            <Tooltip title=\"Durdur\">\r              <Button\r                type=\"text\"\r                icon={<PauseCircleOutlined />}\r                danger\r                onClick={() = aria-label=\"pause circle outlined\"> handleServiceAction(record, 'stop')}\r              />\r            </Tooltip>\r          ) : (\r            <Tooltip title=\"Başlat\">\r              <Button\r                type=\"text\"\r                icon={<PlayCircleOutlined />}\r                onClick={() = aria-label=\"play circle outlined\"> handleServiceAction(record, 'start')}\r              />\r            </Tooltip>\r          )}\r        </Space>\r      ),\r    },\r  ];\r  const filteredLogs = logs.filter(log => \r    logLevel === 'all' || log.level === logLevel\r  );\r  return (\r    <div className=\"master-monitoring-page\">\r      {/* Header */}\r      <div className=\"page-header glass-morphism\">\r        <motion.div\r          initial={{ opacity: 0, x: -20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-content\"\r        >\r          <Title level={2} className=\"gradient-text\">\r            <DashboardOutlined /> Sistem İzleme\r          </Title>\r          <Text type=\"secondary\">Sistem performansı ve servis durumlarını izleyin</Text>\r        </motion.div>\r        <motion.div\r          initial={{ opacity: 0, x: 20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-actions\"\r        >\r          <Space>\r            <Text>Otomatik Yenileme:</Text>\r            <Switch\r              checked={autoRefresh}\r              onChange={setAutoRefresh}\r              checkedChildren=\"Açık\"\r              unCheckedChildren=\"Kapalı\"\r            />\r            <Select\r              value={refreshInterval}\r              onChange={setRefreshInterval}\r              style={{ width: 120 }}\r              disabled={!autoRefresh}\r             aria-label=\"select field\">\r              <Option value={10000}>10 saniye</Option>\r              <Option value={30000}>30 saniye</Option>\r              <Option value={60000}>1 dakika</Option>\r              <Option value={300000}>5 dakika</Option>\r            </Select>\r            <Button\r              icon={<ReloadOutlined />}\r              onClick={fetchMonitoringData}\r              loading={loading}\r             aria-label=\"reload outlined\">\r              Yenile\r            </Button>\r          </Space>\r        </motion.div>\r      </div>\r      {/* Active Alerts */}\r      {alerts.filter(a => !a.resolved).length > 0 && (\r        <Alert\r          message=\"Aktif Uyarılar\"\r          description={\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              {alerts.filter(a => !a.resolved).map(alert => (\r                <div key={alert.id}>\r                  <Space>\r                    {alert.type === 'error' ? (\r                      <ExclamationCircleOutlined style={{ color: '#ff4d4f' }} />\r                    ) : (\r                      <WarningOutlined style={{ color: '#faad14' }} />\r                    )}\r                    <Text strong>{alert.title}</Text>\r                    <Text type=\"secondary\">- {alert.description}</Text>\r                    <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                      ({dayjs(alert.timestamp).fromNow()})\r                    </Text>\r                  </Space>\r                </div>\r              ))}\r            </Space>\r          }\r          type=\"warning\"\r          showIcon\r          closable\r          style={{ marginBottom: 20 }}\r        />\r      )}\r      {/* System Metrics */}\r      <Row gutter={[20, 20]} className=\"stats-row\">\r        {systemMetrics.map((metric, index) => (\r          <Col xs={24} sm={12} lg={6} key={index}>\r            <motion.div\r              initial={{ opacity: 0, y: 20 }}\r              animate={{ opacity: 1, y: 0 }}\r              transition={{ delay: index * 0.1 }}\r            >\r              <Card className=\"stat-card glass-morphism\">\r                <Statistic\r                  title={metric.name}\r                  value={metric.value}\r                  suffix={metric.unit}\r                  valueStyle={{\r                    color: metric.status === 'critical' ? '#ff4d4f' :\r                           metric.status === 'warning' ? '#faad14' : '#52c41a'\r                  }}\r                  prefix={\r                    metric.trend === 'up' ? <ArrowUpOutlined /> :\r                    metric.trend === 'down' ? <ArrowDownOutlined /> : null\r                  }\r                />\r                <Progress\r                  percent={metric.unit === '%' ? metric.value : (metric.value / 200) * 100}\r                  showInfo={false}\r                  status={\r                    metric.status === 'critical' ? 'exception' :\r                    metric.status === 'warning' ? 'active' : 'success'\r                  }\r                />\r              </Card>\r            </motion.div>\r          </Col>\r        ))}\r      </Row>\r      {/* Main Content */}\r      <Card className=\"content-card glass-morphism\">\r        <Tabs activeKey={activeTab} onChange={setActiveTab}>\r          <TabPane\r            tab={\r              <span>\r                <BarChartOutlined />\r                Genel Bakış\r              </span>\r            }\r            key=\"overview\"\r          >\r            <Row gutter={[20, 20]}>\r              <Col xs={24} lg={12}>\r                <Card title=\"CPU Kullanımı (24 Saat)\" bordered={false}>\r                  <Area {...cpuChartConfig} height={200} />\r                </Card>\r              </Col>\r              <Col xs={24} lg={6}>\r                <Card title=\"Bellek Kullanımı\" bordered={false}>\r                  <Gauge {...memoryGaugeConfig} height={200} />\r                </Card>\r              </Col>\r              <Col xs={24} lg={6}>\r                <Card title=\"Servis Durumu\" bordered={false}>\r                  <Pie {...serviceHealthConfig} height={200} />\r                </Card>\r              </Col>\r            </Row>\r            <Divider />\r            <Row gutter={[20, 20]}>\r              <Col xs={24}>\r                <Card\r                  title=\"Sistem Bilgileri\"\r                  bordered={false}\r                  extra={\r                    <Button\r                      icon={<ClearOutlined />}\r                      onClick={handleClearCache}\r                     aria-label=\"clear outlined\">\r                      Önbelleği Temizle\r                    </Button>\r                  }\r                >\r                  <Descriptions bordered column={{ xs: 1, sm: 2, lg: 3 }}>\r                    <Descriptions.Item label=\"İşletim Sistemi\">\r                      Ubuntu 22.04 LTS\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Çekirdek\">\r                      5.15.0-88-generic\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Uptime\">\r                      30d 12h 45m\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"CPU\">\r                      Intel Xeon E5-2680 v4 (8 cores)\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"RAM\">\r                      32 GB DDR4\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Disk\">\r                      500 GB SSD\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Veritabanı Boyutu\">\r                      12.5 GB\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Önbellek Boyutu\">\r                      256 MB\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Son Yedekleme\">\r                      {dayjs().subtract(6, 'hours').format('DD.MM.YYYY HH:mm')}\r                    </Descriptions.Item>\r                  </Descriptions>\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          <TabPane\r            tab={\r              <span>\r                <CloudServerOutlined />\r                Servisler\r              </span>\r            }\r            key=\"services\"\r          >\r            <Table\r              columns={serviceColumns}\r              dataSource={services}\r              rowKey=\"id\"\r              loading={loading}\r              pagination={false}\r            />\r          </TabPane>\r          <TabPane\r            tab={\r              <span>\r                <FileTextOutlined />\r                Loglar\r              </span>\r            }\r            key=\"logs\"\r          >\r            <Space style={{ marginBottom: 16 }}>\r              <Select\r                value={logLevel}\r                onChange={setLogLevel}\r                style={{ width: 120 }}\r               aria-label=\"select field\">\r                <Option value=\"all\">Tümü</Option>\r                <Option value=\"error\">Hata</Option>\r                <Option value=\"warning\">Uyarı</Option>\r                <Option value=\"info\">Bilgi</Option>\r                <Option value=\"debug\">Debug</Option>\r              </Select>\r              <RangePicker\r                showTime\r                onChange={(dates) => setDateRange(dates as [dayjs.Dayjs, dayjs.Dayjs])}\r              />\r              <Button icon={<SearchOutlined />} aria-label=\"search outlined\">Ara</Button>\r              <Button icon={<DownloadOutlined />} aria-label=\"download outlined\">İndir</Button>\r            </Space>\r            <List\r              dataSource={filteredLogs}\r              renderItem={(log) => (\r                <List.Item\r                  key={log.id}\r                  actions={[\r                    <Button\r                      type=\"link\"\r                      onClick={() => {\r                        setSelectedLog(log);\r                        setShowLogModal(true);\r                      }}\r                    >\r                      Detay\r                    </Button>\r                  ]}\r                >\r                  <List.Item.Meta\r                    avatar={\r                      <Tag color={getLogLevelColor(log.level)}>\r                        {log.level.toUpperCase()}\r                      </Tag>\r                    }\r                    title={\r                      <Space>\r                        <Text strong>{log.source}</Text>\r                        <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                          {dayjs(log.timestamp).format('DD.MM.YYYY HH:mm:ss')}\r                        </Text>\r                      </Space>\r                    }\r                    description={log.message}\r                  />\r                </List.Item>\r              )}\r            />\r          </TabPane>\r          <TabPane\r            tab={\r              <span>\r                <AlertOutlined />\r                Uyarılar\r              </span>\r            }\r            key=\"alerts\"\r          >\r            <Timeline>\r              {alerts.map(alert => (\r                <Timeline.Item\r                  key={alert.id}\r                  color={\r                    alert.type === 'error' ? 'red' :\r                    alert.type === 'warning' ? 'orange' : 'blue'\r                  }\r                  dot={\r                    alert.resolved ? <CheckCircleOutlined /> :\r                    alert.type === 'error' ? <CloseCircleOutlined /> :\r                    <ExclamationCircleOutlined />\r                  }\r                >\r                  <Space direction=\"vertical\">\r                    <Space>\r                      <Text strong>{alert.title}</Text>\r                      {alert.resolved && (\r                        <Tag color=\"success\">Çözüldü</Tag>\r                      )}\r                    </Space>\r                    <Text>{alert.description}</Text>\r                    <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                      {dayjs(alert.timestamp).format('DD.MM.YYYY HH:mm')}\r                    </Text>\r                  </Space>\r                </Timeline.Item>\r              ))}\r            </Timeline>\r          </TabPane>\r        </Tabs>\r      </Card>\r      {/* Service Details Modal */}\r      <Modal\r        title={`Servis Detayları: ${selectedService?.name}`}\r        open={showServiceModal}\r        onCancel={() => setShowServiceModal(false)}\r        footer={[\r          <Button key=\"close\" onClick={() => setShowServiceModal(false)}>\r            Kapat\r          </Button>,\r        ]}\r        width={600}\r      >\r        {selectedService && (\r          <Descriptions bordered column={1}>\r            <Descriptions.Item label=\"Durum\">\r              <Tag color={getServiceStatusColor(selectedService.status)}>\r                {selectedService.status.toUpperCase()}\r              </Tag>\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Uptime\">\r              {selectedService.uptime}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"CPU Kullanımı\">\r              <Progress percent={selectedService.cpu} />\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Bellek Kullanımı\">\r              <Progress percent={selectedService.memory} />\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Yanıt Süresi\">\r              {selectedService.responseTime}ms\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Hata Oranı\">\r              {selectedService.errorRate}%\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Son Kontrol\">\r              {dayjs(selectedService.lastCheck).format('DD.MM.YYYY HH:mm:ss')}\r            </Descriptions.Item>\r          </Descriptions>\r        )}\r      </Modal>\r      {/* Log Details Modal */}\r      <Modal\r        title=\"Log Detayları\"\r        open={showLogModal}\r        onCancel={() => setShowLogModal(false)}\r        footer={[\r          <Button key=\"close\" onClick={() => setShowLogModal(false)}>\r            Kapat\r          </Button>,\r        ]}\r        width={700}\r      >\r        {selectedLog && (\r          <>\r            <Descriptions bordered column={1}>\r              <Descriptions.Item label=\"Zaman\">\r                {dayjs(selectedLog.timestamp).format('DD.MM.YYYY HH:mm:ss')}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Seviye\">\r                <Tag color={getLogLevelColor(selectedLog.level)}>\r                  {selectedLog.level.toUpperCase()}\r                </Tag>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Kaynak\">\r                {selectedLog.source}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Mesaj\">\r                {selectedLog.message}\r              </Descriptions.Item>\r            </Descriptions>\r            {selectedLog.details && (\r              <>\r                <Divider>Detaylar</Divider>\r                <pre style={{ background: '#f5f5f5', padding: 12, borderRadius: 4 }}>\r                  {JSON.stringify(selectedLog.details, null, 2)}\r                </pre>\r              </>\r            )}\r          </>\r        )}\r      </Modal>\r    </div>\r  );\r};\r// Fix for missing icon imports\rconst ArrowUpOutlined = () => <span>↑</span>;\rconst ArrowDownOutlined = () => <span>↓</span>;\rexport default MasterMonitoringPage;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Monitoring/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect, useCallback, useMemo } from 'react';\rimport {\r  Row,\r  Col,\r  Card,\r  Statistic,\r  Progress,\r  Typography,\r  Space,\r  Tag,\r  Button,\r  Alert,\r  Badge,\r  List,\r  Timeline,\r  Tooltip,\r  Select,\r  Switch,\r  Divider,\r  Tabs,\r  notification,\r  message,\r  Empty,\r  Skeleton,\r} from 'antd';\rimport {\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  WarningOutlined,\r  SyncOutlined,\r  CloudServerOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r  WifiOutlined,\r  ThunderboltOutlined,\r  DashboardOutlined,\r  LineChartOutlined,\r  AlertOutlined,\r  ReloadOutlined,\r  SettingOutlined,\r  InfoCircleOutlined,\r  RocketOutlined,\r  BugOutlined,\r  ClockCircleOutlined,\r  FireOutlined,\r} from '@ant-design/icons';\rimport { Area, Line, Column, Gauge, Liquid } from '@ant-design/charts';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport CountUp from 'react-countup';\rimport { useRealtimeData, useWebSocketData } from '../../hooks/useRealtimeData';\rimport './monitoring.css';\rimport './monitoring-enhanced.css';\rimport './monitoring-text-fix.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\r// Service durumları\rinterface ServiceStatus {\r  name: string;\r  status: 'healthy' | 'degraded' | 'down';\r  responseTime: number;\r  uptime: number;\r  lastCheck: Date;\r  error?: string;\r}\r// Sistem metrikleri\rinterface SystemMetrics {\r  cpu: {\r    usage: number;\r    cores: number;\r    temperature?: number;\r    processes: number;\r  };\r  memory: {\r    used: number;\r    total: number;\r    percentage: number;\r    swap: number;\r  };\r  disk: {\r    used: number;\r    total: number;\r    percentage: number;\r    iops: number;\r  };\r  network: {\r    in: number;\r    out: number;\r    connections: number;\r    errors: number;\r  };\r}\r// Alert interface\rinterface SystemAlert {\r  id: string;\r  type: 'critical' | 'warning' | 'info';\r  title: string;\r  description: string;\r  timestamp: Date;\r  resolved: boolean;\r}\rconst SystemMonitoring: React.FC = () => {\r  const [autoRefresh, setAutoRefresh] = useState(true);\r  const [refreshInterval, setRefreshInterval] = useState(5000);\r  const [selectedService, setSelectedService] = useState<string | null>(null);\r  const [alertsFilter, setAlertsFilter] = useState<'all' | 'critical' | 'warning' | 'info'>('all');\r  // Mock data - gerçek API'ye bağlanacak\r  const mockMetrics: SystemMetrics = {\r    cpu: {\r      usage: Math.random() * 100,\r      cores: 8,\r      temperature: 45 + Math.random() * 20,\r      processes: Math.floor(150 + Math.random() * 50),\r    },\r    memory: {\r      used: 12.5,\r      total: 16,\r      percentage: 78.125,\r      swap: 2.1,\r    },\r    disk: {\r      used: 256,\r      total: 512,\r      percentage: 50,\r      iops: Math.floor(1000 + Math.random() * 500),\r    },\r    network: {\r      in: Math.random() * 100,\r      out: Math.random() * 50,\r      connections: Math.floor(200 + Math.random() * 100),\r      errors: Math.floor(Math.random() * 5),\r    },\r  };\r  // Services mock data\r  const services: ServiceStatus[] = [\r    {\r      name: 'API Gateway',\r      status: 'healthy',\r      responseTime: 45,\r      uptime: 99.99,\r      lastCheck: new Date(),\r    },\r    {\r      name: 'PostgreSQL Database',\r      status: 'healthy',\r      responseTime: 12,\r      uptime: 99.95,\r      lastCheck: new Date(),\r    },\r    {\r      name: 'Redis Cache',\r      status: 'healthy',\r      responseTime: 2,\r      uptime: 100,\r      lastCheck: new Date(),\r    },\r    {\r      name: 'File Storage',\r      status: 'degraded',\r      responseTime: 350,\r      uptime: 98.5,\r      lastCheck: new Date(),\r      error: 'High latency detected',\r    },\r    {\r      name: 'Email Service',\r      status: 'healthy',\r      responseTime: 120,\r      uptime: 99.8,\r      lastCheck: new Date(),\r    },\r    {\r      name: 'Background Jobs',\r      status: 'healthy',\r      responseTime: 55,\r      uptime: 99.9,\r      lastCheck: new Date(),\r    },\r  ];\r  // Alerts mock data\r  const alerts: SystemAlert[] = [\r    {\r      id: '1',\r      type: 'warning',\r      title: 'High CPU Usage',\r      description: 'CPU usage has been above 80% for the last 5 minutes',\r      timestamp: new Date(Date.now() - 10 * 60000),\r      resolved: false,\r    },\r    {\r      id: '2',\r      type: 'info',\r      title: 'Backup Completed',\r      description: 'Daily backup completed successfully',\r      timestamp: new Date(Date.now() - 30 * 60000),\r      resolved: true,\r    },\r    {\r      id: '3',\r      type: 'critical',\r      title: 'Storage Service Degraded',\r      description: 'File storage service experiencing high latency',\r      timestamp: new Date(Date.now() - 5 * 60000),\r      resolved: false,\r    },\r  ];\r  // Metrikleri state'te tut (realtime hook yerine)\r  const [metrics, setMetrics] = useState<SystemMetrics>(mockMetrics);\r  const [metricsLoading, setMetricsLoading] = useState(false);\r  // Metrikleri güncelle\r  const refreshMetrics = useCallback(() => {\r    setMetricsLoading(true);\r    // Simüle edilmiş veri güncelleme\r    setTimeout(() => {\r      setMetrics({\r        cpu: {\r          usage: Math.random() * 100,\r          cores: 8,\r          temperature: 45 + Math.random() * 20,\r          processes: Math.floor(150 + Math.random() * 50),\r        },\r        memory: {\r          used: 12.5,\r          total: 16,\r          percentage: 78.125,\r          swap: 2.1,\r        },\r        disk: {\r          used: 256,\r          total: 512,\r          percentage: 50,\r          iops: Math.floor(1000 + Math.random() * 500),\r        },\r        network: {\r          in: Math.random() * 100,\r          out: Math.random() * 50,\r          connections: Math.floor(200 + Math.random() * 100),\r          errors: Math.floor(Math.random() * 5),\r        },\r      });\r      setMetricsLoading(false);\r    }, 500);\r  }, []);\r  // Auto refresh effect\r  useEffect(() => {\r    if (autoRefresh && refreshInterval > 0) {\r      const interval = setInterval(refreshMetrics, refreshInterval);\r      return () => clearInterval(interval);\r    }\r  }, [autoRefresh, refreshInterval, refreshMetrics]);\r  // WebSocket bağlantısını devre dışı bırak (şimdilik)\r  // const { data: wsData, connected } = useWebSocketData<any>(\r  //   'ws://localhost:8080/monitoring',\r  //   {\r  //     onMessage: (data) => {\r  //       console.log('WebSocket data received:', data);\r  //     },\r  //     onError: (error) => {\r  //       console.error('WebSocket error:', error);\r  //     },\r  //   }\r  // );\r  const connected = false; // WebSocket devre dışı\r  // Service status badge\r  const getStatusBadge = (status: string) => {\r    switch (status) {\r      case 'healthy':\r        return <Badge status=\"success\" text=\"Healthy\" />;\r      case 'degraded':\r        return <Badge status=\"warning\" text=\"Degraded\" />;\r      case 'down':\r        return <Badge status=\"error\" text=\"Down\" />;\r      default:\r        return <Badge status=\"default\" text=\"Unknown\" />;\r    }\r  };\r  // Alert icon\r  const getAlertIcon = (type: string) => {\r    switch (type) {\r      case 'critical':\r        return <CloseCircleOutlined style={{ color: '#ff4d4f' }} />;\r      case 'warning':\r        return <WarningOutlined style={{ color: '#faad14' }} />;\r      case 'info':\r        return <InfoCircleOutlined style={{ color: '#1890ff' }} />;\r      default:\r        return null;\r    }\r  };\r  // CPU Gauge Chart Config\r  const cpuGaugeConfig = {\r    percent: (metrics?.cpu.usage || 0) / 100,\r    range: {\r      ticks: [0, 1 / 3, 2 / 3, 1],\r      color: ['#30BF78', '#FAAD14', '#F4664A'],\r    },\r    indicator: {\r      pointer: {\r        style: {\r          stroke: '#D0D0D0',\r        },\r      },\r      pin: {\r        style: {\r          stroke: '#D0D0D0',\r        },\r      },\r    },\r    axis: {\r      label: {\r        formatter: (v: any) => (Number(v) * 100).toFixed(0),\r      },\r      subTickLine: {\r        count: 3,\r      },\r    },\r    statistic: {\r      title: {\r        formatter: () => 'CPU',\r        style: {\r          fontSize: '14px',\r          lineHeight: 1,\r        },\r      },\r      content: {\r        offsetY: 36,\r        style: {\r          fontSize: '24px',\r          color: '#4B535E',\r        },\r        formatter: () => `${(metrics?.cpu.usage || 0).toFixed(1)}%`,\r      },\r    },\r  };\r  // Memory Liquid Chart Config\r  const memoryLiquidConfig = {\r    percent: (metrics?.memory.percentage || 0) / 100,\r    outline: {\r      border: 4,\r      distance: 8,\r    },\r    wave: {\r      length: 128,\r    },\r    statistic: {\r      title: {\r        formatter: () => 'Memory',\r        style: {\r          fontSize: '14px',\r        },\r      },\r      content: {\r        style: {\r          fontSize: '24px',\r        },\r        formatter: () => `${(metrics?.memory.percentage || 0).toFixed(1)}%`,\r      },\r    },\r  };\r  // Network Traffic Chart Data\r  const networkData = Array.from({ length: 20 }, (_, i) => ({\r    time: `${i * 5}s`,\r    in: Math.random() * 100,\r    out: Math.random() * 50,\r  }));\r  const networkConfig = {\r    data: networkData,\r    xField: 'time',\r    yField: 'in',\r    smooth: true,\r    height: 100,\r    autoFit: true,\r    areaStyle: {\r      fill: 'l(270) 0:#ffffff 0.5:#7ec2f3 1:#1890ff',\r    },\r  };\r  return (\r    <div className=\"system-monitoring\">\r      {/* Header Controls */}\r      <Card className=\"monitoring-header\" bordered={false}>\r        <Row align=\"middle\" justify=\"space-between\">\r          <Col>\r            <Space>\r              <Title level={3} style={{ margin: 0 }}>\r                <DashboardOutlined /> System Monitoring\r              </Title>\r              {connected && (\r                <Tag color=\"green\" icon={<WifiOutlined />}>\r                  Live Connection\r                </Tag>\r              )}\r              <Badge \r                count={alerts.filter(a => !a.resolved && a.type === 'critical').length} \r                style={{ backgroundColor: '#ff4d4f' }}\r              >\r                <Tag color=\"default\">Alerts</Tag>\r              </Badge>\r            </Space>\r          </Col>\r          <Col>\r            <Space>\r              <Select\r                value={refreshInterval}\r                onChange={setRefreshInterval}\r                style={{ width: 120 }}\r               aria-label=\"select field\">\r                <Select.Option value={5000} aria-label=\"select field\">5 seconds</Select.Option>\r                <Select.Option value={10000} aria-label=\"select field\">10 seconds</Select.Option>\r                <Select.Option value={30000} aria-label=\"select field\">30 seconds</Select.Option>\r                <Select.Option value={60000} aria-label=\"select field\">1 minute</Select.Option>\r              </Select>\r              <Switch\r                checked={autoRefresh}\r                onChange={setAutoRefresh}\r                checkedChildren=\"Auto Refresh\"\r                unCheckedChildren=\"Manual\"\r              />\r              <Button\r                icon={<ReloadOutlined spin={metricsLoading} / aria-label=\"reload outlined\">}\r                onClick={refreshMetrics}\r                type=\"primary\"\r              >\r                Refresh\r              </Button>\r            </Space>\r          </Col>\r        </Row>\r      </Card>\r      {/* Critical Alerts */}\r      {alerts.filter(a => !a.resolved && a.type === 'critical').length > 0 && (\r        <Alert\r          message=\"Critical System Alert\"\r          description={\r            <Space direction=\"vertical\">\r              {alerts\r                .filter(a => !a.resolved && a.type === 'critical')\r                .map(alert => (\r                  <div key={alert.id}>\r                    <Text strong>{alert.title}:</Text> {alert.description}\r                  </div>\r                ))}\r            </Space>\r          }\r          type=\"error\"\r          showIcon\r          closable\r          style={{ marginBottom: 24 }}\r        />\r      )}\r      {/* System Metrics Overview */}\r      <Row gutter={[24, 24]} style={{ marginBottom: 24 }}>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"metric-card\" bordered={false}>\r            <motion.div\r              animate={{ scale: [1, 1.05, 1] }}\r              transition={{ duration: 2, repeat: Infinity }}\r            >\r              <Gauge {...cpuGaugeConfig} height={200} />\r            </motion.div>\r            <Divider />\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Cores:</Text>\r                <Text strong>{metrics?.cpu.cores || 0}</Text>\r              </div>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Temperature:</Text>\r                <Text strong>{(metrics?.cpu.temperature || 0).toFixed(1)}°C</Text>\r              </div>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Processes:</Text>\r                <Text strong>{metrics?.cpu.processes || 0}</Text>\r              </div>\r            </Space>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"metric-card\" bordered={false}>\r            <Liquid {...memoryLiquidConfig} height={200} />\r            <Divider />\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Used:</Text>\r                <Text strong>{(metrics?.memory.used || 0).toFixed(1)} GB</Text>\r              </div>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Total:</Text>\r                <Text strong>{metrics?.memory.total || 0} GB</Text>\r              </div>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Swap:</Text>\r                <Text strong>{(metrics?.memory.swap || 0).toFixed(1)} GB</Text>\r              </div>\r            </Space>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"metric-card\" bordered={false}>\r            <div className=\"disk-usage\">\r              <CloudServerOutlined style={{ fontSize: 48, color: '#1890ff' }} />\r              <Title level={2} style={{ margin: '16px 0' }}>\r                <CountUp end={metrics?.disk.percentage || 0} suffix=\"%\" />\r              </Title>\r              <Text type=\"secondary\">Disk Usage</Text>\r            </div>\r            <Progress\r              percent={metrics?.disk.percentage || 0}\r              strokeColor={{\r                '0%': '#108ee9',\r                '100%': '#87d068',\r              }}\r              status={metrics?.disk.percentage > 90 ? 'exception' : 'active'}\r            />\r            <Divider />\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Used:</Text>\r                <Text strong>{metrics?.disk.used || 0} GB</Text>\r              </div>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Total:</Text>\r                <Text strong>{metrics?.disk.total || 0} GB</Text>\r              </div>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">IOPS:</Text>\r                <Text strong>{metrics?.disk.iops || 0}</Text>\r              </div>\r            </Space>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"metric-card\" bordered={false}>\r            <div style={{ marginBottom: 16 }}>\r              <Text type=\"secondary\">Network Traffic</Text>\r            </div>\r            <Area {...networkConfig} style={{ height: 60 }} />\r            <Divider />\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">In:</Text>\r                <Text strong>{(metrics?.network.in || 0).toFixed(2)} Mbps</Text>\r              </div>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Out:</Text>\r                <Text strong>{(metrics?.network.out || 0).toFixed(2)} Mbps</Text>\r              </div>\r              <div className=\"metric-detail\">\r                <Text type=\"secondary\">Connections:</Text>\r                <Text strong>{metrics?.network.connections || 0}</Text>\r              </div>\r            </Space>\r          </Card>\r        </Col>\r      </Row>\r      {/* Services & Alerts Tabs */}\r      <Tabs defaultActiveKey=\"services\" type=\"card\">\r        <TabPane tab={<span><ApiOutlined /> Services Status</span>} key=\"services\">\r          <Row gutter={[24, 24]}>\r            {services.map((service) => (\r              <Col xs={24} sm={12} lg={8} key={service.name}>\r                <motion.div\r                  whileHover={{ scale: 1.02 }}\r                  whileTap={{ scale: 0.98 }}\r                >\r                  <Card\r                    className={`service-card ${service.status}`}\r                    bordered={false}\r                    hoverable\r                    onClick={() => setSelectedService(service.name)}\r                  >\r                    <Space direction=\"vertical\" style={{ width: '100%' }}>\r                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                        <Title level={5} style={{ margin: 0 }}>{service.name}</Title>\r                        {getStatusBadge(service.status)}\r                      </div>\r                      <Row gutter={16}>\r                        <Col span={12}>\r                          <Statistic\r                            title=\"Response Time\"\r                            value={service.responseTime}\r                            suffix=\"ms\"\r                            valueStyle={{\r                              color: service.responseTime > 200 ? '#faad14' : '#52c41a',\r                              fontSize: 20\r                            }}\r                          />\r                        </Col>\r                        <Col span={12}>\r                          <Statistic\r                            title=\"Uptime\"\r                            value={service.uptime}\r                            suffix=\"%\"\r                            precision={2}\r                            valueStyle={{\r                              color: service.uptime > 99 ? '#52c41a' : '#faad14',\r                              fontSize: 20\r                            }}\r                          />\r                        </Col>\r                      </Row>\r                      {service.error && (\r                        <Alert message={service.error} type=\"warning\" showIcon />\r                      )}\r                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                        <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                          <ClockCircleOutlined /> Last check: {new Date(service.lastCheck).toLocaleTimeString()}\r                        </Text>\r                        <Button size=\"small\" type=\"text\" icon={<SyncOutlined />} aria-label=\"sync outlined\">\r                          Check Now\r                        </Button>\r                      </div>\r                    </Space>\r                  </Card>\r                </motion.div>\r              </Col>\r            ))}\r          </Row>\r        </TabPane>\r        <TabPane tab={<span><AlertOutlined /> System Alerts</span>} key=\"alerts\">\r          <Card bordered={false}>\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 16 }}>\r                <Select\r                  value={alertsFilter}\r                  onChange={setAlertsFilter}\r                  style={{ width: 200 }}\r                 aria-label=\"select field\">\r                  <Select.Option value=\"all\" aria-label=\"select field\">All Alerts</Select.Option>\r                  <Select.Option value=\"critical\" aria-label=\"select field\">Critical Only</Select.Option>\r                  <Select.Option value=\"warning\" aria-label=\"select field\">Warnings</Select.Option>\r                  <Select.Option value=\"info\" aria-label=\"select field\">Info</Select.Option>\r                </Select>\r                <Button type=\"primary\" danger icon={<BugOutlined />} aria-label=\"bug outlined\">\r                  Clear Resolved\r                </Button>\r              </div>\r              <Timeline mode=\"left\">\r                {alerts\r                  .filter(a => alertsFilter === 'all' || a.type === alertsFilter)\r                  .map(alert => (\r                    <Timeline.Item\r                      key={alert.id}\r                      dot={getAlertIcon(alert.type)}\r                      color={alert.resolved ? 'gray' : undefined}\r                    >\r                      <Card\r                        size=\"small\"\r                        className={`alert-card ${alert.type} ${alert.resolved ? 'resolved' : ''}`}\r                      >\r                        <Space direction=\"vertical\" style={{ width: '100%' }}>\r                          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r                            <Text strong style={{ textDecoration: alert.resolved ? 'line-through' : 'none' }}>\r                              {alert.title}\r                            </Text>\r                            <Tag color={alert.resolved ? 'success' : 'processing'}>\r                              {alert.resolved ? 'Resolved' : 'Active'}\r                            </Tag>\r                          </div>\r                          <Text type=\"secondary\">{alert.description}</Text>\r                          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                            <ClockCircleOutlined /> {new Date(alert.timestamp).toLocaleString()}\r                          </Text>\r                          {!alert.resolved && (\r                            <Button size=\"small\" type=\"primary\">\r                              Mark as Resolved\r                            </Button>\r                          )}\r                        </Space>\r                      </Card>\r                    </Timeline.Item>\r                  ))}\r              </Timeline>\r            </Space>\r          </Card>\r        </TabPane>\r        <TabPane tab={<span><LineChartOutlined /> Performance Trends</span>} key=\"trends\">\r          <Card bordered={false}>\r            <Empty description=\"Performance trends coming soon...\" />\r          </Card>\r        </TabPane>\r      </Tabs>\r    </div>\r  );\r};\rexport default SystemMonitoring;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Monitoring/SystemMonitoring.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport './notification-settings.css';\rimport './notification-settings-enhanced.css';\rinterface NotificationPreferences {\r  email: {\r    enabled: boolean;\r    frequency: 'instant' | 'hourly' | 'daily' | 'weekly';\r    categories: {\r      system: boolean;\r      tenant: boolean;\r      payment: boolean;\r      security: boolean;\r      performance: boolean;\r    };\r  };\r  push: {\r    enabled: boolean;\r    categories: {\r      system: boolean;\r      tenant: boolean;\r      payment: boolean;\r      security: boolean;\r      performance: boolean;\r    };\r  };\r  sms: {\r    enabled: boolean;\r    phoneNumber: string;\r    criticalOnly: boolean;\r  };\r  slack: {\r    enabled: boolean;\r    webhookUrl: string;\r    channel: string;\r  };\r  webhook: {\r    enabled: boolean;\r    url: string;\r    secret: string;\r  };\r}\rconst NotificationSettings: React.FC = () => {\r  const [preferences, setPreferences] = useState<NotificationPreferences>({\r    email: {\r      enabled: true,\r      frequency: 'instant',\r      categories: {\r        system: true,\r        tenant: true,\r        payment: true,\r        security: true,\r        performance: true\r      }\r    },\r    push: {\r      enabled: true,\r      categories: {\r        system: true,\r        tenant: true,\r        payment: false,\r        security: true,\r        performance: true\r      }\r    },\r    sms: {\r      enabled: false,\r      phoneNumber: '',\r      criticalOnly: true\r    },\r    slack: {\r      enabled: false,\r      webhookUrl: '',\r      channel: '#notifications'\r    },\r    webhook: {\r      enabled: false,\r      url: '',\r      secret: ''\r    }\r  });\r  const [testMode, setTestMode] = useState<string | null>(null);\r  const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'saved'>('idle');\r  const handleSave = () => {\r    setSaveStatus('saving');\r    // Simüle edilmiş kaydetme\r    setTimeout(() => {\r      localStorage.setItem('notification_preferences', JSON.stringify(preferences));\r      setSaveStatus('saved');\r      setTimeout(() => setSaveStatus('idle'), 2000);\r    }, 1000);\r  };\r  const sendTestNotification = (channel: string) => {\r    setTestMode(channel);\r    // Test bildirimi gönder\r    setTimeout(() => {\r      alert(`Test bildirimi ${channel} kanalına gönderildi!`);\r      setTestMode(null);\r    }, 1500);\r  };\r  return (\r    <div className=\"notification-settings\">\r      <div className=\"settings-header\">\r        <h1>🔔 Bildirim Ayarları</h1>\r        <p>Bildirim tercihlerinizi ve kanallarınızı yönetin</p>\r      </div>\r      <div className=\"settings-content\">\r        {/* Email Bildirimleri */}\r        <div className=\"settings-section\">\r          <div className=\"section-header\">\r            <h2>📧 Email Bildirimleri</h2>\r            <label className=\"toggle-switch\">\r              <input\r                type=\"checkbox\"\r                checked={preferences.email.enabled}\r                onChange={(e) = aria-label=\"input field\"> setPreferences({\r                  ...preferences,\r                  email: { ...preferences.email, enabled: e.target.checked }\r                })}\r              />\r              <span className=\"toggle-slider\"></span>\r            </label>\r          </div>\r          {preferences.email.enabled && (\r            <div className=\"section-content\">\r              <div className=\"form-group\">\r                <label>Bildirim Sıklığı</label>\r                <select\r                  value={preferences.email.frequency}\r                  onChange={(e) = aria-label=\"select field\"> setPreferences({\r                    ...preferences,\r                    email: { ...preferences.email, frequency: e.target.value as any }\r                  })}\r                >\r                  <option value=\"instant\">Anında</option>\r                  <option value=\"hourly\">Saatlik Özet</option>\r                  <option value=\"daily\">Günlük Özet</option>\r                  <option value=\"weekly\">Haftalık Özet</option>\r                </select>\r              </div>\r              <div className=\"category-toggles\">\r                <h3>Bildirim Kategorileri</h3>\r                {Object.entries(preferences.email.categories).map(([key, value]) => (\r                  <label key={key} className=\"category-toggle\">\r                    <input\r                      type=\"checkbox\"\r                      checked={value}\r                      onChange={(e) = aria-label=\"input field\"> setPreferences({\r                        ...preferences,\r                        email: {\r                          ...preferences.email,\r                          categories: {\r                            ...preferences.email.categories,\r                            [key]: e.target.checked\r                          }\r                        }\r                      })}\r                    />\r                    <span>{key.charAt(0).toUpperCase() + key.slice(1)}</span>\r                  </label>\r                ))}\r              </div>\r              <button \r                className=\"test-btn\"\r                onClick={() => sendTestNotification('email')}\r                disabled={testMode === 'email'}\r              >\r                {testMode === 'email' ? 'Gönderiliyor...' : 'Test Email Gönder'}\r              </button>\r            </div>\r          )}\r        </div>\r        {/* Push Bildirimleri */}\r        <div className=\"settings-section\">\r          <div className=\"section-header\">\r            <h2>🔔 Push Bildirimleri</h2>\r            <label className=\"toggle-switch\">\r              <input\r                type=\"checkbox\"\r                checked={preferences.push.enabled}\r                onChange={(e) = aria-label=\"input field\"> setPreferences({\r                  ...preferences,\r                  push: { ...preferences.push, enabled: e.target.checked }\r                })}\r              />\r              <span className=\"toggle-slider\"></span>\r            </label>\r          </div>\r          {preferences.push.enabled && (\r            <div className=\"section-content\">\r              <div className=\"category-toggles\">\r                <h3>Bildirim Kategorileri</h3>\r                {Object.entries(preferences.push.categories).map(([key, value]) => (\r                  <label key={key} className=\"category-toggle\">\r                    <input\r                      type=\"checkbox\"\r                      checked={value}\r                      onChange={(e) = aria-label=\"input field\"> setPreferences({\r                        ...preferences,\r                        push: {\r                          ...preferences.push,\r                          categories: {\r                            ...preferences.push.categories,\r                            [key]: e.target.checked\r                          }\r                        }\r                      })}\r                    />\r                    <span>{key.charAt(0).toUpperCase() + key.slice(1)}</span>\r                  </label>\r                ))}\r              </div>\r              <button \r                className=\"test-btn\"\r                onClick={() => sendTestNotification('push')}\r                disabled={testMode === 'push'}\r              >\r                {testMode === 'push' ? 'Gönderiliyor...' : 'Test Push Gönder'}\r              </button>\r            </div>\r          )}\r        </div>\r        {/* SMS Bildirimleri */}\r        <div className=\"settings-section\">\r          <div className=\"section-header\">\r            <h2>📱 SMS Bildirimleri</h2>\r            <label className=\"toggle-switch\">\r              <input\r                type=\"checkbox\"\r                checked={preferences.sms.enabled}\r                onChange={(e) = aria-label=\"input field\"> setPreferences({\r                  ...preferences,\r                  sms: { ...preferences.sms, enabled: e.target.checked }\r                })}\r              />\r              <span className=\"toggle-slider\"></span>\r            </label>\r          </div>\r          {preferences.sms.enabled && (\r            <div className=\"section-content\">\r              <div className=\"form-group\">\r                <label>Telefon Numarası</label>\r                <input\r                  type=\"tel\"\r                  placeholder=\"+90 5XX XXX XX XX\"\r                  value={preferences.sms.phoneNumber}\r                  onChange={(e) = aria-label=\"input field\"> setPreferences({\r                    ...preferences,\r                    sms: { ...preferences.sms, phoneNumber: e.target.value }\r                  })}\r                />\r              </div>\r              <label className=\"category-toggle\">\r                <input\r                  type=\"checkbox\"\r                  checked={preferences.sms.criticalOnly}\r                  onChange={(e) = aria-label=\"input field\"> setPreferences({\r                    ...preferences,\r                    sms: { ...preferences.sms, criticalOnly: e.target.checked }\r                  })}\r                />\r                <span>Sadece kritik bildirimler</span>\r              </label>\r              <button \r                className=\"test-btn\"\r                onClick={() => sendTestNotification('sms')}\r                disabled={testMode === 'sms' || !preferences.sms.phoneNumber}\r              >\r                {testMode === 'sms' ? 'Gönderiliyor...' : 'Test SMS Gönder'}\r              </button>\r            </div>\r          )}\r        </div>\r        {/* Slack Entegrasyonu */}\r        <div className=\"settings-section\">\r          <div className=\"section-header\">\r            <h2>💬 Slack Entegrasyonu</h2>\r            <label className=\"toggle-switch\">\r              <input\r                type=\"checkbox\"\r                checked={preferences.slack.enabled}\r                onChange={(e) = aria-label=\"input field\"> setPreferences({\r                  ...preferences,\r                  slack: { ...preferences.slack, enabled: e.target.checked }\r                })}\r              />\r              <span className=\"toggle-slider\"></span>\r            </label>\r          </div>\r          {preferences.slack.enabled && (\r            <div className=\"section-content\">\r              <div className=\"form-group\">\r                <label>Webhook URL</label>\r                <input\r                  type=\"url\"\r                  placeholder=\"https://hooks.slack.com/services/...\"\r                  value={preferences.slack.webhookUrl}\r                  onChange={(e) = aria-label=\"input field\"> setPreferences({\r                    ...preferences,\r                    slack: { ...preferences.slack, webhookUrl: e.target.value }\r                  })}\r                />\r              </div>\r              <div className=\"form-group\">\r                <label>Kanal</label>\r                <input\r                  type=\"text\"\r                  placeholder=\"#notifications\"\r                  value={preferences.slack.channel}\r                  onChange={(e) = aria-label=\"input field\"> setPreferences({\r                    ...preferences,\r                    slack: { ...preferences.slack, channel: e.target.value }\r                  })}\r                />\r              </div>\r              <button \r                className=\"test-btn\"\r                onClick={() => sendTestNotification('slack')}\r                disabled={testMode === 'slack' || !preferences.slack.webhookUrl}\r              >\r                {testMode === 'slack' ? 'Gönderiliyor...' : 'Test Mesajı Gönder'}\r              </button>\r            </div>\r          )}\r        </div>\r        {/* Webhook */}\r        <div className=\"settings-section\">\r          <div className=\"section-header\">\r            <h2>🔗 Webhook</h2>\r            <label className=\"toggle-switch\">\r              <input\r                type=\"checkbox\"\r                checked={preferences.webhook.enabled}\r                onChange={(e) = aria-label=\"input field\"> setPreferences({\r                  ...preferences,\r                  webhook: { ...preferences.webhook, enabled: e.target.checked }\r                })}\r              />\r              <span className=\"toggle-slider\"></span>\r            </label>\r          </div>\r          {preferences.webhook.enabled && (\r            <div className=\"section-content\">\r              <div className=\"form-group\">\r                <label>Webhook URL</label>\r                <input\r                  type=\"url\"\r                  placeholder=\"https://your-api.com/webhook\"\r                  value={preferences.webhook.url}\r                  onChange={(e) = aria-label=\"input field\"> setPreferences({\r                    ...preferences,\r                    webhook: { ...preferences.webhook, url: e.target.value }\r                  })}\r                />\r              </div>\r              <div className=\"form-group\">\r                <label>Secret Key</label>\r                <input\r                  type=\"password\"\r                  placeholder=\"Webhook secret key\"\r                  value={preferences.webhook.secret}\r                  onChange={(e) = aria-label=\"input field\"> setPreferences({\r                    ...preferences,\r                    webhook: { ...preferences.webhook, secret: e.target.value }\r                  })}\r                />\r              </div>\r              <button \r                className=\"test-btn\"\r                onClick={() => sendTestNotification('webhook')}\r                disabled={testMode === 'webhook' || !preferences.webhook.url}\r              >\r                {testMode === 'webhook' ? 'Gönderiliyor...' : 'Test Webhook Gönder'}\r              </button>\r            </div>\r          )}\r        </div>\r      </div>\r      <div className=\"settings-footer\">\r        <button \r          className={`save-btn ${saveStatus}`}\r          onClick={handleSave}\r          disabled={saveStatus === 'saving'}\r        >\r          {saveStatus === 'saving' && '⏳ Kaydediliyor...'}\r          {saveStatus === 'saved' && '✅ Kaydedildi!'}\r          {saveStatus === 'idle' && '💾 Ayarları Kaydet'}\r        </button>\r      </div>\r    </div>\r  );\r};\rexport default NotificationSettings;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/NotificationSettings/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport {\r  Row,\r  Col,\r  Card,\r  Button,\r  Space,\r  Tag,\r  Typography,\r  Modal,\r  Form,\r  Input,\r  InputNumber,\r  Select,\r  Switch,\r  Divider,\r  Badge,\r  Tooltip,\r  Table,\r  Segmented,\r  message,\r  Popconfirm,\r  Checkbox,\r  List,\r  Avatar,\r  Progress,\r  Statistic,\r  Timeline,\r  Alert,\r  Tabs,\r} from 'antd';\rimport {\r  CrownOutlined,\r  RocketOutlined,\r  ThunderboltOutlined,\r  UserOutlined,\r  CheckOutlined,\r  CloseOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  PlusOutlined,\r  DollarOutlined,\r  GiftOutlined,\r  StarFilled,\r  FireOutlined,\r  SafetyOutlined,\r  CloudServerOutlined,\r  ApiOutlined,\r  DatabaseOutlined,\r  MailOutlined,\r  CustomerServiceOutlined,\r  TeamOutlined,\r  AppstoreOutlined,\r  BarsOutlined,\r  CopyOutlined,\r  EyeOutlined,\r  SettingOutlined,\r  InfoCircleOutlined,\r  ExportOutlined,\r  ImportOutlined,\r  ReloadOutlined,\r  HeartFilled,\r  TrophyOutlined,\r  BulbOutlined,\r  ExperimentOutlined,\r} from '@ant-design/icons';\rimport CountUp from 'react-countup';\rimport '../../styles/master-inputs.css';\rimport '../../styles/master-layout.css';\rimport './packages.css';\rimport { packagesApi, CreatePackageRequest, UpdatePackageRequest, PackageFeatureDto, PackageModuleDto } from '@/shared/api/packages.api';\rimport { useEffect } from 'react';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\r// Types\rinterface Package {\r  id: string;\r  name: string;\r  description: string;\r  price: number;\r  discountedPrice?: number;\r  currency: string;\r  billingCycle: 'monthly' | 'yearly';\r  popular?: boolean;\r  recommended?: boolean;\r  new?: boolean;\r  maxUsers: number;\r  maxStorage: number;\r  features: string[];\r  modules: string[];\r  support: string;\r  apiCalls: number;\r  customDomain: boolean;\r  whiteLabel: boolean;\r  priority: number;\r  color: string;\r  icon: React.ReactNode;\r  gradient: string;\r  subscriberCount: number;\r  revenue: number;\r  growth: number;\r  status: 'active' | 'inactive' | 'deprecated';\r  createdAt: string;\r  updatedAt: string;\r}\rinterface Feature {\r  id: string;\r  name: string;\r  description: string;\r  category: string;\r  packages: string[];\r}\rexport const MasterPackagesPage: React.FC = () => {\r  const [viewMode, setViewMode] = useState<'grid' | 'table'>('grid');\r  const [billingCycle, setBillingCycle] = useState<'monthly' | 'yearly'>('monthly');\r  const [showCreateModal, setShowCreateModal] = useState(false);\r  const [showFeatureModal, setShowFeatureModal] = useState(false);\r  const [selectedPackage, setSelectedPackage] = useState<Package | null>(null);\r  const [loading, setLoading] = useState(false);\r  const [packages, setPackages] = useState<Package[]>([]);\r  const [form] = Form.useForm();\r  const [featureForm] = Form.useForm();\r  // Fetch packages from API\r  useEffect(() => {\r    fetchPackages();\r  }, []);\r  const fetchPackages = async () => {\r    setLoading(true);\r    try {\r      const response = await packagesApi.getAll({ isActive: true });\r      if (response.data && response.data.success && response.data.data) {\r        const mappedPackages = response.data.data.map((p: any) => ({\r          id: p.id,\r          name: p.name,\r          description: p.description || 'Açıklama yok',\r          price: p.basePrice?.amount || 0,\r          discountedPrice: p.discountedPrice,\r          currency: p.basePrice?.currency || p.currency || 'TRY',\r          billingCycle: p.billingCycle?.toLowerCase() || 'monthly',\r          popular: p.isPopular || false,\r          recommended: false,\r          new: false,\r          maxUsers: p.maxUsers || 0,\r          maxStorage: p.maxStorage || 0,\r          features: p.features?.map((f: PackageFeatureDto) => f.featureName) || [],\r          modules: p.modules?.map((m: PackageModuleDto) => m.moduleName) || [],\r          support: 'E-posta',\r          apiCalls: 10000,\r          customDomain: p.basePrice?.amount > 100,\r          whiteLabel: p.basePrice?.amount > 500,\r          priority: p.displayOrder || 1,\r          color: getPackageColor(p.name),\r          icon: getPackageIcon(p.name),\r          gradient: getPackageGradient(p.name),\r          subscriberCount: Math.floor(Math.random() * 1000),\r          revenue: (p.basePrice?.amount || 0) * Math.floor(Math.random() * 100),\r          growth: Math.floor(Math.random() * 40) - 10,\r          status: p.isActive ? 'active' : 'inactive',\r          createdAt: p.createdAt || new Date().toISOString(),\r          updatedAt: p.modifiedAt || new Date().toISOString()\r        }));\r        setPackages(mappedPackages);\r      } else {\r        // Use mock data as fallback\r        setPackages(mockPackages);\r      }\r    } catch (error) {\r      message.error('Paket listesi yüklenirken hata oluştu');\r      // Use mock data as fallback\r      setPackages(mockPackages);\r    } finally {\r      setLoading(false);\r    }\r  };\r  // Helper functions for package styling\r  const getPackageColor = (name: string) => {\r    const colors: any = {\r      'Free': '#8c8c8c',\r      'Starter': '#52c41a',\r      'Professional': '#1890ff',\r      'Enterprise': '#722ed1'\r    };\r    return colors[name] || '#1890ff';\r  };\r  const getPackageIcon = (name: string) => {\r    const icons: any = {\r      'Free': <UserOutlined />,\r      'Starter': <RocketOutlined />,\r      'Professional': <ThunderboltOutlined />,\r      'Enterprise': <CrownOutlined />\r    };\r    return icons[name] || <AppstoreOutlined />;\r  };\r  const getPackageGradient = (name: string) => {\r    const gradients: any = {\r      'Free': 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r      'Starter': 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',\r      'Professional': 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',\r      'Enterprise': 'linear-gradient(135deg, #fa709a 0%, #fee140 100%)'\r    };\r    return gradients[name] || 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';\r  };\r  // Mock packages data\r  const mockPackages: Package[] = [\r    {\r      id: '1',\r      name: 'Free',\r      description: 'Küçük işletmeler için mükemmel başlangıç',\r      price: 0,\r      currency: '₺',\r      billingCycle: 'monthly',\r      maxUsers: 5,\r      maxStorage: 5,\r      features: [\r        'Temel CRM özellikleri',\r        'E-posta desteği',\r        '5 GB depolama',\r        'Temel raporlama',\r        'Mobil uygulama',\r      ],\r      modules: ['CRM'],\r      support: 'E-posta',\r      apiCalls: 1000,\r      customDomain: false,\r      whiteLabel: false,\r      priority: 1,\r      color: '#8c8c8c',\r      icon: <UserOutlined />,\r      gradient: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r      subscriberCount: 150,\r      revenue: 0,\r      growth: 25,\r      status: 'active',\r      createdAt: '2024-01-01',\r      updatedAt: '2024-01-01',\r    },\r    {\r      id: '2',\r      name: 'Starter',\r      description: 'Büyüyen işletmeler için ideal',\r      price: 299,\r      discountedPrice: 249,\r      currency: '₺',\r      billingCycle: 'monthly',\r      new: true,\r      maxUsers: 25,\r      maxStorage: 25,\r      features: [\r        'Tüm Free özellikleri',\r        'Gelişmiş CRM',\r        'Sales modülü',\r        '25 GB depolama',\r        'Özel raporlar',\r        'Öncelikli e-posta desteği',\r        'API erişimi',\r      ],\r      modules: ['CRM', 'Sales'],\r      support: 'E-posta + Telefon',\r      apiCalls: 10000,\r      customDomain: false,\r      whiteLabel: false,\r      priority: 2,\r      color: '#52c41a',\r      icon: <RocketOutlined />,\r      gradient: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',\r      subscriberCount: 89,\r      revenue: 22211,\r      growth: 15,\r      status: 'active',\r      createdAt: '2024-01-01',\r      updatedAt: '2024-03-01',\r    },\r    {\r      id: '3',\r      name: 'Professional',\r      description: 'Profesyonel ekipler için güçlü özellikler',\r      price: 599,\r      currency: '₺',\r      billingCycle: 'monthly',\r      popular: true,\r      recommended: true,\r      maxUsers: 100,\r      maxStorage: 100,\r      features: [\r        'Tüm Starter özellikleri',\r        'Finance modülü',\r        'HR modülü',\r        '100 GB depolama',\r        'Gelişmiş analitik',\r        '7/24 telefon desteği',\r        'Özel domain',\r        'Webhook entegrasyonları',\r        'Bulk işlemler',\r      ],\r      modules: ['CRM', 'Sales', 'Finance', 'HR'],\r      support: '7/24 Telefon + Chat',\r      apiCalls: 50000,\r      customDomain: true,\r      whiteLabel: false,\r      priority: 3,\r      color: '#1890ff',\r      icon: <ThunderboltOutlined />,\r      gradient: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',\r      subscriberCount: 156,\r      revenue: 93444,\r      growth: 32,\r      status: 'active',\r      createdAt: '2024-01-01',\r      updatedAt: '2024-02-15',\r    },\r    {\r      id: '4',\r      name: 'Enterprise',\r      description: 'Büyük organizasyonlar için sınırsız güç',\r      price: 1299,\r      discountedPrice: 999,\r      currency: '₺',\r      billingCycle: 'monthly',\r      maxUsers: 999999,\r      maxStorage: 999999,\r      features: [\r        'Tüm Professional özellikleri',\r        'Production modülü',\r        'Inventory modülü',\r        'Sınırsız depolama',\r        'Özel geliştirme',\r        'Dedike destek',\r        'White-label',\r        'SLA garantisi',\r        'Özel eğitim',\r        'Veri yedekleme',\r      ],\r      modules: ['CRM', 'Sales', 'Finance', 'HR', 'Production', 'Inventory'],\r      support: 'Dedike Account Manager',\r      apiCalls: 999999,\r      customDomain: true,\r      whiteLabel: true,\r      priority: 4,\r      color: '#722ed1',\r      icon: <CrownOutlined />,\r      gradient: 'linear-gradient(135deg, #fa709a 0%, #fee140 100%)',\r      subscriberCount: 45,\r      revenue: 44955,\r      growth: 18,\r      status: 'active',\r      createdAt: '2024-01-01',\r      updatedAt: '2024-01-20',\r    },\r  ];\r  // Remove this line as packages state is already defined above\r  // Mock features data\r  const mockFeatures: Feature[] = [\r    { id: '1', name: 'CRM Modülü', description: 'Müşteri ilişkileri yönetimi', category: 'Modüller', packages: ['Free', 'Starter', 'Professional', 'Enterprise'] },\r    { id: '2', name: 'Sales Modülü', description: 'Satış yönetimi', category: 'Modüller', packages: ['Starter', 'Professional', 'Enterprise'] },\r    { id: '3', name: 'Finance Modülü', description: 'Finansal yönetim', category: 'Modüller', packages: ['Professional', 'Enterprise'] },\r    { id: '4', name: 'API Erişimi', description: 'REST API erişimi', category: 'Entegrasyon', packages: ['Starter', 'Professional', 'Enterprise'] },\r    { id: '5', name: 'Özel Domain', description: 'Kendi domain adresiniz', category: 'Özelleştirme', packages: ['Professional', 'Enterprise'] },\r    { id: '6', name: 'White Label', description: 'Marka özelleştirme', category: 'Özelleştirme', packages: ['Enterprise'] },\r  ];\r  const [features, setFeatures] = useState<Feature[]>(mockFeatures);\r  // Stats\r  const stats = [\r    {\r      title: 'Toplam Paket',\r      value: packages.length,\r      icon: <GiftOutlined style={{ color: '#1890ff' }} />,\r      color: '#1890ff',\r      suffix: '',\r      trend: 0,\r    },\r    {\r      title: 'Aktif Abonelik',\r      value: packages.reduce((sum, p) => sum + p.subscriberCount, 0),\r      icon: <TeamOutlined style={{ color: '#52c41a' }} />,\r      color: '#52c41a',\r      suffix: '',\r      trend: 15,\r    },\r    {\r      title: 'Aylık Gelir',\r      value: packages.reduce((sum, p) => sum + p.revenue, 0),\r      icon: <DollarOutlined style={{ color: '#fa8c16' }} />,\r      color: '#fa8c16',\r      prefix: '₺',\r      trend: 22,\r    },\r    {\r      title: 'Ortalama Büyüme',\r      value: Math.round(packages.reduce((sum, p) => sum + p.growth, 0) / packages.length) || 0,\r      icon: <FireOutlined style={{ color: '#722ed1' }} />,\r      color: '#722ed1',\r      suffix: '%',\r      trend: 8,\r    },\r  ];\r  // Package Card Component\r  const PackageCard: React.FC<{ pkg: Package }> = ({ pkg }) => (\r    <motion.div\r      initial={{ opacity: 0, y: 20 }}\r      animate={{ opacity: 1, y: 0 }}\r      exit={{ opacity: 0, y: 20 }}\r      whileHover={{ y: -8 }}\r      transition={{ duration: 0.3 }}\r    >\r      <Card\r        className={`package-card ${pkg.popular ? 'popular' : ''}`}\r        style={{\r          background: `linear-gradient(135deg, white 0%, ${pkg.color}05 100%)`,\r          borderTop: `4px solid ${pkg.color}`,\r          height: '100%',\r          minHeight: '450px',\r        }}\r      >\r        {/* Badges */}\r        {(pkg.popular || pkg.recommended || pkg.new) && (\r          <div className=\"package-badges\">\r            {pkg.popular && (\r              <Badge.Ribbon text=\"Popüler\" color=\"red\">\r                <div />\r              </Badge.Ribbon>\r            )}\r            {pkg.recommended && (\r              <Tag color=\"green\" icon={<StarFilled />}>\r                Önerilen\r              </Tag>\r            )}\r            {pkg.new && (\r              <Tag color=\"blue\" icon={<FireOutlined />}>\r                Yeni\r              </Tag>\r            )}\r          </div>\r        )}\r        {/* Header */}\r        <div className=\"package-header\">\r          <Avatar\r            size={64}\r            style={{\r              background: pkg.gradient,\r              border: `3px solid ${pkg.color}20`,\r            }}\r          >\r            {pkg.icon}\r          </Avatar>\r          <Title level={3} style={{ color: pkg.color, marginTop: 16 }}>\r            {pkg.name}\r          </Title>\r          <Paragraph type=\"secondary\">{pkg.description}</Paragraph>\r        </div>\r        {/* Pricing */}\r        <div className=\"package-pricing\">\r          {pkg.discountedPrice ? (\r            <>\r              <Text delete style={{ fontSize: 20, color: '#8c8c8c' }}>\r                {pkg.currency}{pkg.price}\r              </Text>\r              <Title level={2} style={{ color: pkg.color, margin: '0 8px' }}>\r                {pkg.currency}{pkg.discountedPrice}\r              </Title>\r            </>\r          ) : (\r            <Title level={2} style={{ color: pkg.color }}>\r              {pkg.price === 0 ? 'Ücretsiz' : `${pkg.currency}${pkg.price}`}\r            </Title>\r          )}\r          {pkg.price > 0 && (\r            <Text type=\"secondary\">\r              / {billingCycle === 'monthly' ? 'aylık' : 'yıllık'}\r            </Text>\r          )}\r        </div>\r        <Divider />\r        {/* Features */}\r        <div className=\"package-features\">\r          <List\r            size=\"small\"\r            dataSource={pkg.features}\r            renderItem={(feature) => (\r              <List.Item style={{ border: 'none', padding: '4px 0' }}>\r                <Space>\r                  <CheckOutlined style={{ color: '#52c41a' }} />\r                  <Text>{feature}</Text>\r                </Space>\r              </List.Item>\r            )}\r          />\r        </div>\r        <Divider />\r        {/* Limits */}\r        <div className=\"package-limits\">\r          <Row gutter={[8, 8]}>\r            <Col span={12}>\r              <div className=\"limit-item\">\r                <UserOutlined style={{ color: pkg.color }} />\r                <Text strong>\r                  {pkg.maxUsers === 999999 ? 'Sınırsız' : pkg.maxUsers}\r                </Text>\r                <Text type=\"secondary\">Kullanıcı</Text>\r              </div>\r            </Col>\r            <Col span={12}>\r              <div className=\"limit-item\">\r                <DatabaseOutlined style={{ color: pkg.color }} />\r                <Text strong>\r                  {pkg.maxStorage === 999999 ? 'Sınırsız' : `${pkg.maxStorage}GB`}\r                </Text>\r                <Text type=\"secondary\">Depolama</Text>\r              </div>\r            </Col>\r            <Col span={12}>\r              <div className=\"limit-item\">\r                <ApiOutlined style={{ color: pkg.color }} />\r                <Text strong>\r                  {pkg.apiCalls === 999999 ? 'Sınırsız' : `${pkg.apiCalls / 1000}K`}\r                </Text>\r                <Text type=\"secondary\">API Çağrı</Text>\r              </div>\r            </Col>\r            <Col span={12}>\r              <div className=\"limit-item\">\r                <CustomerServiceOutlined style={{ color: pkg.color }} />\r                <Text strong>{pkg.support.split(' ')[0]}</Text>\r                <Text type=\"secondary\">Destek</Text>\r              </div>\r            </Col>\r          </Row>\r        </div>\r        <Divider />\r        {/* Stats */}\r        <div className=\"package-stats\">\r          <Row gutter={[8, 8]}>\r            <Col span={8}>\r              <Statistic\r                value={pkg.subscriberCount}\r                valueStyle={{ fontSize: 16, color: pkg.color }}\r                prefix={<TeamOutlined />}\r                title=\"Abone\"\r              />\r            </Col>\r            <Col span={8}>\r              <Statistic\r                value={pkg.revenue}\r                valueStyle={{ fontSize: 16, color: '#52c41a' }}\r                prefix=\"₺\"\r                title=\"Gelir\"\r              />\r            </Col>\r            <Col span={8}>\r              <Statistic\r                value={pkg.growth}\r                valueStyle={{\r                  fontSize: 16,\r                  color: pkg.growth > 0 ? '#52c41a' : '#ff4d4f',\r                }}\r                suffix=\"%\"\r                prefix={pkg.growth > 0 ? '+' : ''}\r                title=\"Büyüme\"\r              />\r            </Col>\r          </Row>\r        </div>\r        {/* Actions */}\r        <div className=\"package-actions\">\r          <Button\r            type=\"primary\"\r            block\r            size=\"large\"\r            style={{\r              background: pkg.gradient,\r              border: 'none',\r              height: 48,\r            }}\r            onClick={() => handleEdit(pkg)}\r          >\r            Düzenle\r          </Button>\r          <Space style={{ marginTop: 12, width: '100%' }}>\r            <Button\r              block\r              icon={<EyeOutlined />}\r              onClick={() = aria-label=\"eye outlined\"> handleViewDetails(pkg)}\r            >\r              Detaylar\r            </Button>\r            <Button\r              block\r              icon={<CopyOutlined />}\r              onClick={() = aria-label=\"copy outlined\"> handleDuplicate(pkg)}\r            >\r              Kopyala\r            </Button>\r            <Popconfirm\r              title=\"Bu paketi silmek istediğinizden emin misiniz?\"\r              onConfirm={() => handleDelete(pkg.id)}\r              okText=\"Sil\"\r              cancelText=\"İptal\"\r            >\r              <Button block danger icon={<DeleteOutlined />} aria-label=\"delete outlined\">\r                Sil\r              </Button>\r            </Popconfirm>\r          </Space>\r        </div>\r      </Card>\r    </motion.div>\r  );\r  // Table columns\r  const columns = [\r    {\r      title: 'Paket',\r      dataIndex: 'name',\r      key: 'name',\r      render: (text: string, record: Package) => (\r        <Space>\r          <Avatar style={{ background: record.gradient }}>\r            {record.icon}\r          </Avatar>\r          <div>\r            <Text strong>{text}</Text>\r            {record.popular && <Tag color=\"red\">Popüler</Tag>}\r            {record.new && <Tag color=\"blue\">Yeni</Tag>}\r          </div>\r        </Space>\r      ),\r    },\r    {\r      title: 'Fiyat',\r      key: 'price',\r      render: (record: Package) => (\r        <div>\r          {record.discountedPrice ? (\r            <>\r              <Text delete>{record.currency}{record.price}</Text>\r              <Text strong style={{ marginLeft: 8, color: record.color }}>\r                {record.currency}{record.discountedPrice}\r              </Text>\r            </>\r          ) : (\r            <Text strong style={{ color: record.color }}>\r              {record.price === 0 ? 'Ücretsiz' : `${record.currency}${record.price}`}\r            </Text>\r          )}\r        </div>\r      ),\r    },\r    {\r      title: 'Limitler',\r      key: 'limits',\r      render: (record: Package) => (\r        <Space direction=\"vertical\" size={0}>\r          <Text>{record.maxUsers === 999999 ? 'Sınırsız' : record.maxUsers} kullanıcı</Text>\r          <Text>{record.maxStorage === 999999 ? 'Sınırsız' : `${record.maxStorage}GB`} depolama</Text>\r        </Space>\r      ),\r    },\r    {\r      title: 'Aboneler',\r      dataIndex: 'subscriberCount',\r      key: 'subscriberCount',\r      render: (count: number) => (\r        <Badge count={count} style={{ backgroundColor: '#52c41a' }} />\r      ),\r    },\r    {\r      title: 'Gelir',\r      dataIndex: 'revenue',\r      key: 'revenue',\r      render: (revenue: number) => (\r        <Text strong style={{ color: '#52c41a' }}>\r          ₺{revenue.toLocaleString()}\r        </Text>\r      ),\r    },\r    {\r      title: 'Büyüme',\r      dataIndex: 'growth',\r      key: 'growth',\r      render: (growth: number) => (\r        <Tag color={growth > 0 ? 'success' : 'error'}>\r          {growth > 0 ? '+' : ''}{growth}%\r        </Tag>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status: string) => (\r        <Tag color={status === 'active' ? 'success' : 'default'}>\r          {status === 'active' ? 'Aktif' : 'Pasif'}\r        </Tag>\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      render: (record: Package) => (\r        <Space>\r          <Tooltip title=\"Düzenle\">\r            <Button\r              type=\"text\"\r              size=\"small\"\r              icon={<EditOutlined />}\r              onClick={() = aria-label=\"edit outlined\"> handleEdit(record)}\r            />\r          </Tooltip>\r          <Tooltip title=\"Kopyala\">\r            <Button\r              type=\"text\"\r              size=\"small\"\r              icon={<CopyOutlined />}\r              onClick={() = aria-label=\"copy outlined\"> handleDuplicate(record)}\r            />\r          </Tooltip>\r          <Popconfirm\r            title=\"Bu paketi silmek istediğinizden emin misiniz?\"\r            onConfirm={() => handleDelete(record.id)}\r          >\r            <Tooltip title=\"Sil\">\r              <Button\r                type=\"text\"\r                size=\"small\"\r                danger\r                icon={<DeleteOutlined />}\r              / aria-label=\"delete outlined\">\r            </Tooltip>\r          </Popconfirm>\r        </Space>\r      ),\r    },\r  ];\r  // Handlers\r  const handleEdit = (pkg: Package) => {\r    setSelectedPackage(pkg);\r    form.setFieldsValue({\r      ...pkg,\r      billingCycle: pkg.billingCycle,\r      isActive: pkg.status === 'active'\r    });\r    setShowCreateModal(true);\r  };\r  const handleDelete = async (id: string) => {\r    try {\r      await packagesApi.delete(id);\r      setPackages(packages.filter((p) => p.id !== id));\r      message.success('Paket silindi');\r    } catch (error) {\r      message.error('Paket silinirken hata oluştu');\r    }\r  };\r  const handleDuplicate = (pkg: Package) => {\r    const newPackage = {\r      ...pkg,\r      id: Date.now().toString(),\r      name: `${pkg.name} (Kopya)`,\r      createdAt: new Date().toISOString(),\r    };\r    setPackages([...packages, newPackage]);\r    message.success('Paket kopyalandı');\r  };\r  const handleViewDetails = (pkg: Package) => {\r    Modal.info({\r      title: `${pkg.name} Paket Detayları`,\r      width: 600,\r      content: (\r        <Space direction=\"vertical\" style={{ width: '100%' }}>\r          <Divider />\r          <Descriptions bordered column={2}>\r            <Descriptions.Item label=\"Fiyat\" span={2}>\r              {pkg.currency}{pkg.discountedPrice || pkg.price} / {pkg.billingCycle === 'monthly' ? 'aylık' : 'yıllık'}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Max Kullanıcı\">\r              {pkg.maxUsers === 999999 ? 'Sınırsız' : pkg.maxUsers}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Max Depolama\">\r              {pkg.maxStorage === 999999 ? 'Sınırsız' : `${pkg.maxStorage}GB`}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"API Çağrı\">\r              {pkg.apiCalls === 999999 ? 'Sınırsız' : pkg.apiCalls}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Destek\">\r              {pkg.support}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Modüller\" span={2}>\r              <Space wrap>\r                {pkg.modules.map((module) => (\r                  <Tag key={module} color=\"blue\">{module}</Tag>\r                ))}\r              </Space>\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Özellikler\" span={2}>\r              <List\r                size=\"small\"\r                dataSource={pkg.features}\r                renderItem={(feature) => (\r                  <List.Item style={{ padding: '4px 0' }}>\r                    <CheckOutlined style={{ color: '#52c41a', marginRight: 8 }} />\r                    {feature}\r                  </List.Item>\r                )}\r              />\r            </Descriptions.Item>\r          </Descriptions>\r        </Space>\r      ),\r    });\r  };\r  const handleCreatePackage = async (values: any) => {\r    setLoading(true);\r    try {\r      // Prepare features and modules\r      const features: PackageFeatureDto[] = (values.features || []).map((f: string) => ({\r        featureCode: f.toLowerCase().replace(/\\s+/g, '_'),\r        featureName: f,\r        isEnabled: true\r      }));\r      const modules: PackageModuleDto[] = (values.modules || []).map((m: string) => ({\r        moduleCode: m.toLowerCase(),\r        moduleName: m,\r        isIncluded: true\r      }));\r      if (selectedPackage) {\r        // Update existing package\r        const updateRequest: UpdatePackageRequest = {\r          id: selectedPackage.id,\r          name: values.name,\r          description: values.description,\r          basePrice: values.price,\r          billingCycle: values.billingCycle === 'monthly' ? 'Monthly' : 'Yearly',\r          maxUsers: values.maxUsers,\r          maxStorage: values.maxStorage,\r          isActive: values.isActive !== undefined ? values.isActive : true\r        };\r        await packagesApi.update(selectedPackage.id, updateRequest);\r        message.success('Paket güncellendi');\r      } else {\r        // Create new package\r        const createRequest: CreatePackageRequest = {\r          name: values.name,\r          description: values.description,\r          basePrice: values.price,\r          billingCycle: values.billingCycle === 'monthly' ? 'Monthly' : 'Yearly',\r          maxUsers: values.maxUsers,\r          maxStorage: values.maxStorage,\r          isActive: true,\r          features,\r          modules\r        };\r        await packagesApi.create(createRequest);\r        message.success('Paket oluşturuldu');\r      }\r      // Refresh packages list\r      await fetchPackages();\r      setShowCreateModal(false);\r      setSelectedPackage(null);\r      form.resetFields();\r    } catch (error) {\r      message.error(selectedPackage ? 'Paket güncellenirken hata oluştu' : 'Paket oluşturulurken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleCreateFeature = (values: any) => {\r    const newFeature: Feature = {\r      ...values,\r      id: Date.now().toString(),\r    };\r    setFeatures([...features, newFeature]);\r    message.success('Özellik eklendi');\r    setShowFeatureModal(false);\r    featureForm.resetFields();\r  };\r  return (\r    <div className=\"master-packages-page\">\r      {/* Header */}\r      <motion.div \r        className=\"packages-header\"\r        initial={{ opacity: 0, y: -20 }}\r        animate={{ opacity: 1, y: 0 }}\r        transition={{ duration: 0.5 }}\r      >\r        <Title level={1}>\r          Fiyatlandırma & Paketler\r        </Title>\r        <Paragraph className=\"subtitle\">\r          İşletmenizin ihtiyaçlarına uygun paketi seçin ve hemen başlayın\r        </Paragraph>\r        <Space style={{ marginTop: 32 }}>\r          <Button \r            icon={<PlusOutlined />} \r            onClick={() = aria-label=\"plus outlined\"> setShowFeatureModal(true)}\r            size=\"large\"\r          >\r            Özellik Ekle\r          </Button>\r          <Button\r            type=\"primary\"\r            icon={<PlusOutlined />}\r            onClick={() = aria-label=\"plus outlined\"> setShowCreateModal(true)}\r            className=\"package-action-btn primary\"\r            size=\"large\"\r          >\r            Yeni Paket Oluştur\r          </Button>\r        </Space>\r      </motion.div>\r      {/* Stats */}\r      <Row gutter={[24, 24]} className=\"packages-stats\">\r        {stats.map((stat, index) => (\r          <Col xs={24} sm={12} md={12} lg={6} key={index}>\r            <motion.div\r              initial={{ opacity: 0, y: 20 }}\r              animate={{ opacity: 1, y: 0 }}\r              transition={{ delay: index * 0.1 }}\r              whileHover={{ scale: 1.02 }}\r            >\r              <Card className=\"package-stat-card\">\r                <div className=\"stat-icon-wrapper\" style={{\r                  background: `linear-gradient(135deg, ${stat.color}20 0%, ${stat.color}10 100%)`\r                }}>\r                  {stat.icon}\r                </div>\r                <Title level={3} style={{ margin: '8px 0' }}>\r                  {stat.prefix}<CountUp end={stat.value} separator=\",\" duration={2} />{stat.suffix}\r                </Title>\r                <Text type=\"secondary\" style={{ fontSize: 14 }}>{stat.title}</Text>\r                {stat.trend && (\r                  <div style={{ marginTop: 12 }}>\r                    <Tag \r                      color={stat.trend > 0 ? 'success' : 'error'}\r                      style={{ fontSize: 12 }}\r                    >\r                      {stat.trend > 0 ? '↑' : '↓'} {Math.abs(stat.trend)}%\r                    </Tag>\r                    <Text type=\"secondary\" style={{ fontSize: 12, marginLeft: 8 }}>\r                      geçen aya göre\r                    </Text>\r                  </div>\r                )}\r              </Card>\r            </motion.div>\r          </Col>\r        ))}\r      </Row>\r      {/* Controls */}\r      <Card className=\"controls-card glass-morphism\" style={{ marginBottom: 32 }}>\r        <Row align=\"middle\" justify=\"space-between\">\r          <Col>\r            <Space size=\"large\">\r              <Text strong style={{ fontSize: 16 }}>Faturalama Dönemi:</Text>\r              <Segmented\r                value={billingCycle}\r                onChange={(value) => setBillingCycle(value as 'monthly' | 'yearly')}\r                options={[\r                  { label: 'Aylık Ödeme', value: 'monthly' },\r                  { \r                    label: (\r                      <Space>\r                        <span>Yıllık Ödeme</span>\r                        <Tag color=\"success\" style={{ marginLeft: 4 }}>\r                          %20 İNDİRİM\r                        </Tag>\r                      </Space>\r                    ), \r                    value: 'yearly' \r                  },\r                ]}\r                size=\"large\"\r              />\r            </Space>\r          </Col>\r          <Col>\r            <Space>\r              <Segmented\r                value={viewMode}\r                onChange={(value) => setViewMode(value as 'grid' | 'table')}\r                options={[\r                  { label: 'Grid', value: 'grid', icon: <AppstoreOutlined /> },\r                  { label: 'Tablo', value: 'table', icon: <BarsOutlined /> },\r                ]}\r              />\r              <Button icon={<ReloadOutlined spin={loading} / aria-label=\"reload outlined\">} onClick={() => fetchPackages()}>\r                Yenile\r              </Button>\r            </Space>\r          </Col>\r        </Row>\r      </Card>\r      {/* Content */}\r      <AnimatePresence mode=\"wait\">\r        {viewMode === 'grid' ? (\r          <motion.div\r            key=\"grid\"\r            initial={{ opacity: 0 }}\r            animate={{ opacity: 1 }}\r            exit={{ opacity: 0 }}\r          >\r            <Row gutter={[20, 20]}>\r              {packages.map((pkg) => (\r                <Col xs={24} sm={24} md={12} lg={8} xl={8} xxl={6} key={pkg.id}>\r                  <PackageCard pkg={pkg} />\r                </Col>\r              ))}\r            </Row>\r          </motion.div>\r        ) : (\r          <motion.div\r            key=\"table\"\r            initial={{ opacity: 0 }}\r            animate={{ opacity: 1 }}\r            exit={{ opacity: 0 }}\r          >\r            <Card className=\"table-card glass-morphism\">\r              <Table\r                columns={columns}\r                dataSource={packages}\r                rowKey=\"id\"\r                loading={loading}\r                pagination={{\r                  pageSize: 10,\r                  showSizeChanger: true,\r                  showTotal: (total) => `Toplam ${total} paket`,\r                }}\r              />\r            </Card>\r          </motion.div>\r        )}\r      </AnimatePresence>\r      {/* Create/Edit Package Modal */}\r      <Modal\r        title={selectedPackage ? 'Paket Düzenle' : 'Yeni Paket Oluştur'}\r        open={showCreateModal}\r        onCancel={() => {\r          setShowCreateModal(false);\r          setSelectedPackage(null);\r          form.resetFields();\r        }}\r        footer={null}\r        width={700}\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleCreatePackage}\r        >\r          <Tabs defaultActiveKey=\"1\">\r            <TabPane tab=\"Genel Bilgiler\" key=\"1\">\r              <Row gutter={16}>\r                <Col span={12}>\r                  <Form.Item\r                    name=\"name\"\r                    label=\"Paket Adı\"\r                    rules={[{ required: true, message: 'Paket adı gerekli' }]}\r                  >\r                    <Input placeholder=\"Örn: Professional\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item\r                    name=\"billingCycle\"\r                    label=\"Faturalandırma\"\r                    rules={[{ required: true }]}\r                  >\r                    <Select aria-label=\"select field\">\r                      <Select.Option value=\"monthly\" aria-label=\"select field\">Aylık</Select.Option>\r                      <Select.Option value=\"yearly\" aria-label=\"select field\">Yıllık</Select.Option>\r                    </Select>\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item\r                name=\"description\"\r                label=\"Açıklama\"\r                rules={[{ required: true, message: 'Açıklama gerekli' }]}\r              >\r                <Input.TextArea rows={3} placeholder=\"Paket açıklaması\" / aria-label=\"input field\">\r              </Form.Item>\r              <Row gutter={16}>\r                <Col span={8}>\r                  <Form.Item\r                    name=\"price\"\r                    label=\"Fiyat\"\r                    rules={[{ required: true, message: 'Fiyat gerekli' }]}\r                  >\r                    <InputNumber\r                      min={0}\r                      style={{ width: '100%' }}\r                      addonBefore=\"₺\"\r                      placeholder=\"599\"\r                    / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col span={8}>\r                  <Form.Item\r                    name=\"discountedPrice\"\r                    label=\"İndirimli Fiyat\"\r                  >\r                    <InputNumber\r                      min={0}\r                      style={{ width: '100%' }}\r                      addonBefore=\"₺\"\r                      placeholder=\"499\"\r                    / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col span={8}>\r                  <Form.Item\r                    name=\"color\"\r                    label=\"Renk\"\r                    rules={[{ required: true }]}\r                  >\r                    <Input type=\"color\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Row gutter={16}>\r                <Col span={6}>\r                  <Form.Item name=\"popular\" valuePropName=\"checked\">\r                    <Checkbox>Popüler</Checkbox>\r                  </Form.Item>\r                </Col>\r                <Col span={6}>\r                  <Form.Item name=\"recommended\" valuePropName=\"checked\">\r                    <Checkbox>Önerilen</Checkbox>\r                  </Form.Item>\r                </Col>\r                <Col span={6}>\r                  <Form.Item name=\"new\" valuePropName=\"checked\">\r                    <Checkbox>Yeni</Checkbox>\r                  </Form.Item>\r                </Col>\r                <Col span={6}>\r                  <Form.Item name=\"isActive\" valuePropName=\"checked\" initialValue={true}>\r                    <Checkbox>Aktif</Checkbox>\r                  </Form.Item>\r                </Col>\r              </Row>\r            </TabPane>\r            <TabPane tab=\"Limitler\" key=\"2\">\r              <Row gutter={16}>\r                <Col span={12}>\r                  <Form.Item\r                    name=\"maxUsers\"\r                    label=\"Maksimum Kullanıcı\"\r                    rules={[{ required: true }]}\r                  >\r                    <InputNumber\r                      min={1}\r                      style={{ width: '100%' }}\r                      placeholder=\"100\"\r                    / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item\r                    name=\"maxStorage\"\r                    label=\"Maksimum Depolama (GB)\"\r                    rules={[{ required: true }]}\r                  >\r                    <InputNumber\r                      min={1}\r                      style={{ width: '100%' }}\r                      placeholder=\"100\"\r                    / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Row gutter={16}>\r                <Col span={12}>\r                  <Form.Item\r                    name=\"apiCalls\"\r                    label=\"API Çağrı Limiti\"\r                    rules={[{ required: true }]}\r                  >\r                    <InputNumber\r                      min={0}\r                      style={{ width: '100%' }}\r                      placeholder=\"50000\"\r                    / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item\r                    name=\"support\"\r                    label=\"Destek Seviyesi\"\r                    rules={[{ required: true }]}\r                  >\r                    <Select aria-label=\"select field\">\r                      <Select.Option value=\"E-posta\" aria-label=\"select field\">E-posta</Select.Option>\r                      <Select.Option value=\"E-posta + Telefon\" aria-label=\"select field\">E-posta + Telefon</Select.Option>\r                      <Select.Option value=\"7/24 Telefon + Chat\" aria-label=\"select field\">7/24 Telefon + Chat</Select.Option>\r                      <Select.Option value=\"Dedike Account Manager\" aria-label=\"select field\">Dedike Account Manager</Select.Option>\r                    </Select>\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Row gutter={16}>\r                <Col span={12}>\r                  <Form.Item name=\"customDomain\" valuePropName=\"checked\">\r                    <Checkbox>Özel Domain Desteği</Checkbox>\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item name=\"whiteLabel\" valuePropName=\"checked\">\r                    <Checkbox>White Label</Checkbox>\r                  </Form.Item>\r                </Col>\r              </Row>\r            </TabPane>\r            <TabPane tab=\"Modüller\" key=\"3\">\r              <Form.Item name=\"modules\" label=\"Aktif Modüller\">\r                <Checkbox.Group>\r                  <Row>\r                    <Col span={8}>\r                      <Checkbox value=\"CRM\">CRM</Checkbox>\r                    </Col>\r                    <Col span={8}>\r                      <Checkbox value=\"Sales\">Sales</Checkbox>\r                    </Col>\r                    <Col span={8}>\r                      <Checkbox value=\"Finance\">Finance</Checkbox>\r                    </Col>\r                    <Col span={8}>\r                      <Checkbox value=\"HR\">HR</Checkbox>\r                    </Col>\r                    <Col span={8}>\r                      <Checkbox value=\"Production\">Production</Checkbox>\r                    </Col>\r                    <Col span={8}>\r                      <Checkbox value=\"Inventory\">Inventory</Checkbox>\r                    </Col>\r                  </Row>\r                </Checkbox.Group>\r              </Form.Item>\r            </TabPane>\r            <TabPane tab=\"Özellikler\" key=\"4\">\r              <Form.Item name=\"features\" label=\"Paket Özellikleri\">\r                <Select\r                  mode=\"tags\"\r                  style={{ width: '100%' }}\r                  placeholder=\"Özellik ekleyin\"\r                  options={features.map((f) = aria-label=\"select field\"> ({ label: f.name, value: f.name }))}\r                />\r              </Form.Item>\r            </TabPane>\r          </Tabs>\r          <Form.Item>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => setShowCreateModal(false)}>İptal</Button>\r              <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\r                {selectedPackage ? 'Güncelle' : 'Oluştur'}\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Feature Modal */}\r      <Modal\r        title=\"Yeni Özellik Ekle\"\r        open={showFeatureModal}\r        onCancel={() => {\r          setShowFeatureModal(false);\r          featureForm.resetFields();\r        }}\r        footer={null}\r      >\r        <Form\r          form={featureForm}\r          layout=\"vertical\"\r          onFinish={handleCreateFeature}\r        >\r          <Form.Item\r            name=\"name\"\r            label=\"Özellik Adı\"\r            rules={[{ required: true }]}\r          >\r            <Input placeholder=\"Örn: API Erişimi\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item\r            name=\"description\"\r            label=\"Açıklama\"\r            rules={[{ required: true }]}\r          >\r            <Input.TextArea rows={2} placeholder=\"Özellik açıklaması\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item\r            name=\"category\"\r            label=\"Kategori\"\r            rules={[{ required: true }]}\r          >\r            <Select aria-label=\"select field\">\r              <Select.Option value=\"Modüller\" aria-label=\"select field\">Modüller</Select.Option>\r              <Select.Option value=\"Entegrasyon\" aria-label=\"select field\">Entegrasyon</Select.Option>\r              <Select.Option value=\"Özelleştirme\" aria-label=\"select field\">Özelleştirme</Select.Option>\r              <Select.Option value=\"Destek\" aria-label=\"select field\">Destek</Select.Option>\r              <Select.Option value=\"Güvenlik\" aria-label=\"select field\">Güvenlik</Select.Option>\r            </Select>\r          </Form.Item>\r          <Form.Item\r            name=\"packages\"\r            label=\"Paketler\"\r            rules={[{ required: true }]}\r          >\r            <Checkbox.Group>\r              <Row>\r                {packages.map((pkg) => (\r                  <Col span={12} key={pkg.id}>\r                    <Checkbox value={pkg.name}>{pkg.name}</Checkbox>\r                  </Col>\r                ))}\r              </Row>\r            </Checkbox.Group>\r          </Form.Item>\r          <Form.Item>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => setShowFeatureModal(false)}>İptal</Button>\r              <Button type=\"primary\" htmlType=\"submit\">\r                Ekle\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r    </div>\r  );\r};\r// Add missing import\rimport { Descriptions } from 'antd';",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Packages/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Table,\r  Button,\r  Space,\r  Tag,\r  Input,\r  DatePicker,\r  Select,\r  Row,\r  Col,\r  Statistic,\r  Modal,\r  message,\r  Tooltip,\r  Typography,\r  Timeline,\r  Descriptions,\r  Alert,\r  Badge,\r} from 'antd';\rimport {\r  SearchOutlined,\r  DollarOutlined,\r  CreditCardOutlined,\r  BankOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  ClockCircleOutlined,\r  SyncOutlined,\r  ExportOutlined,\r  EyeOutlined,\r  FileTextOutlined,\r  WarningOutlined,\r  ArrowUpOutlined,\r  ArrowDownOutlined,\r} from '@ant-design/icons';\rimport type { ColumnsType } from 'antd/es/table';\rimport dayjs from 'dayjs';\rconst { RangePicker } = DatePicker;\rconst { Title, Text } = Typography;\rinterface Payment {\r  id: string;\r  transactionId: string;\r  tenant: string;\r  tenantId: string;\r  amount: number;\r  currency: string;\r  status: 'completed' | 'pending' | 'failed' | 'refunded';\r  method: 'credit_card' | 'bank_transfer' | 'paypal' | 'stripe';\r  invoiceNumber?: string;\r  description: string;\r  createdAt: string;\r  completedAt?: string;\r  refundedAt?: string;\r  failureReason?: string;\r  metadata?: Record<string, any>;\r}\rconst MasterPaymentsPage: React.FC = () => {\r  const [payments, setPayments] = useState<Payment[]>([]);\r  const [loading, setLoading] = useState(false);\r  const [selectedPayment, setSelectedPayment] = useState<Payment | null>(null);\r  const [detailModalVisible, setDetailModalVisible] = useState(false);\r  const [filters, setFilters] = useState({\r    search: '',\r    status: 'all',\r    method: 'all',\r    dateRange: null as any,\r  });\r  // Mock data\r  useEffect(() => {\r    const mockPayments: Payment[] = [\r      {\r        id: '1',\r        transactionId: 'TRX-2024-001',\r        tenant: 'TechCorp Solutions',\r        tenantId: 'tenant-1',\r        amount: 2950,\r        currency: 'TRY',\r        status: 'completed',\r        method: 'credit_card',\r        invoiceNumber: 'INV-2024-001',\r        description: 'Enterprise Package - Monthly Payment',\r        createdAt: '2024-02-10T10:30:00',\r        completedAt: '2024-02-10T10:31:00',\r        metadata: {\r          cardLast4: '4242',\r          cardBrand: 'Visa',\r        },\r      },\r      {\r        id: '2',\r        transactionId: 'TRX-2024-002',\r        tenant: 'Global Retail Inc',\r        tenantId: 'tenant-2',\r        amount: 1770,\r        currency: 'TRY',\r        status: 'pending',\r        method: 'bank_transfer',\r        invoiceNumber: 'INV-2024-002',\r        description: 'Professional Package - Monthly Payment',\r        createdAt: '2024-02-11T14:20:00',\r        metadata: {\r          bankName: 'Garanti Bank',\r          accountNumber: '****1234',\r        },\r      },\r      {\r        id: '3',\r        transactionId: 'TRX-2024-003',\r        tenant: 'StartUp Hub',\r        tenantId: 'tenant-3',\r        amount: 590,\r        currency: 'TRY',\r        status: 'failed',\r        method: 'credit_card',\r        invoiceNumber: 'INV-2024-003',\r        description: 'Starter Package - Monthly Payment',\r        createdAt: '2024-02-09T09:15:00',\r        failureReason: 'Insufficient funds',\r        metadata: {\r          cardLast4: '5555',\r          cardBrand: 'Mastercard',\r        },\r      },\r      {\r        id: '4',\r        transactionId: 'TRX-2024-004',\r        tenant: 'Digital Agency',\r        tenantId: 'tenant-4',\r        amount: 1200,\r        currency: 'TRY',\r        status: 'refunded',\r        method: 'paypal',\r        description: 'Professional Package - Refund',\r        createdAt: '2024-02-08T11:00:00',\r        completedAt: '2024-02-08T11:01:00',\r        refundedAt: '2024-02-09T10:00:00',\r        metadata: {\r          paypalEmail: 'billing@digitalagency.com',\r        },\r      },\r    ];\r    setPayments(mockPayments);\r  }, []);\r  const handleViewDetails = (payment: Payment) => {\r    setSelectedPayment(payment);\r    setDetailModalVisible(true);\r  };\r  const handleRefund = (payment: Payment) => {\r    Modal.confirm({\r      title: 'İade İşlemi',\r      content: `${payment.transactionId} numaralı ödemeyi iade etmek istediğinize emin misiniz?`,\r      onOk: () => {\r        message.success('İade işlemi başlatıldı');\r      },\r    });\r  };\r  const handleRetryPayment = (payment: Payment) => {\r    message.info('Ödeme yeniden deneniyor...');\r  };\r  const getPaymentMethodIcon = (method: string) => {\r    switch (method) {\r      case 'credit_card':\r        return <CreditCardOutlined />;\r      case 'bank_transfer':\r        return <BankOutlined />;\r      case 'paypal':\r        return <DollarOutlined />;\r      case 'stripe':\r        return <CreditCardOutlined />;\r      default:\r        return <DollarOutlined />;\r    }\r  };\r  const columns: ColumnsType<Payment> = [\r    {\r      title: 'İşlem No',\r      dataIndex: 'transactionId',\r      key: 'transactionId',\r      render: (text) => <a>{text}</a>,\r    },\r    {\r      title: 'Firma',\r      dataIndex: 'tenant',\r      key: 'tenant',\r    },\r    {\r      title: 'Tutar',\r      dataIndex: 'amount',\r      key: 'amount',\r      render: (value, record) => (\r        <Text strong>\r          {record.currency === 'TRY' ? '₺' : record.currency}\r          {value.toLocaleString('tr-TR')}\r        </Text>\r      ),\r    },\r    {\r      title: 'Yöntem',\r      dataIndex: 'method',\r      key: 'method',\r      render: (method) => {\r        const methodNames = {\r          credit_card: 'Kredi Kartı',\r          bank_transfer: 'Banka Transferi',\r          paypal: 'PayPal',\r          stripe: 'Stripe',\r        };\r        return (\r          <Space>\r            {getPaymentMethodIcon(method)}\r            <span>{methodNames[method]}</span>\r          </Space>\r        );\r      },\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status) => {\r        const statusConfig = {\r          completed: { color: 'success', text: 'Tamamlandı', icon: <CheckCircleOutlined /> },\r          pending: { color: 'warning', text: 'Bekliyor', icon: <ClockCircleOutlined /> },\r          failed: { color: 'error', text: 'Başarısız', icon: <CloseCircleOutlined /> },\r          refunded: { color: 'default', text: 'İade Edildi', icon: <SyncOutlined /> },\r        };\r        const config = statusConfig[status];\r        return (\r          <Tag color={config.color} icon={config.icon}>\r            {config.text}\r          </Tag>\r        );\r      },\r    },\r    {\r      title: 'Tarih',\r      dataIndex: 'createdAt',\r      key: 'createdAt',\r      render: (date) => dayjs(date).format('DD.MM.YYYY HH:mm'),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      render: (_, record) => (\r        <Space size=\"middle\">\r          <Tooltip title=\"Detaylar\">\r            <Button\r              type=\"text\"\r              icon={<EyeOutlined />}\r              onClick={() = aria-label=\"eye outlined\"> handleViewDetails(record)}\r            />\r          </Tooltip>\r          {record.status === 'completed' && (\r            <Tooltip title=\"İade Et\">\r              <Button\r                type=\"text\"\r                icon={<SyncOutlined />}\r                onClick={() = aria-label=\"sync outlined\"> handleRefund(record)}\r              />\r            </Tooltip>\r          )}\r          {record.status === 'failed' && (\r            <Tooltip title=\"Tekrar Dene\">\r              <Button\r                type=\"text\"\r                icon={<SyncOutlined />}\r                onClick={() = aria-label=\"sync outlined\"> handleRetryPayment(record)}\r              />\r            </Tooltip>\r          )}\r          {record.invoiceNumber && (\r            <Tooltip title=\"Faturayı Görüntüle\">\r              <Button\r                type=\"text\"\r                icon={<FileTextOutlined />}\r              / aria-label=\"file text outlined\">\r            </Tooltip>\r          )}\r        </Space>\r      ),\r    },\r  ];\r  const stats = {\r    total: payments.length,\r    completed: payments.filter(p => p.status === 'completed').length,\r    pending: payments.filter(p => p.status === 'pending').length,\r    failed: payments.filter(p => p.status === 'failed').length,\r    totalAmount: payments.filter(p => p.status === 'completed').reduce((sum, p) => sum + p.amount, 0),\r    pendingAmount: payments.filter(p => p.status === 'pending').reduce((sum, p) => sum + p.amount, 0),\r    refundedAmount: payments.filter(p => p.status === 'refunded').reduce((sum, p) => sum + p.amount, 0),\r  };\r  return (\r    <div className=\"master-payments-page\">\r      <Row gutter={[24, 24]}>\r        {/* Statistics Cards */}\r        <Col span={24}>\r          <Row gutter={[16, 16]}>\r            <Col xs={24} sm={12} lg={6}>\r              <Card>\r                <Statistic\r                  title=\"Toplam Ödeme\"\r                  value={stats.total}\r                  prefix={<DollarOutlined />}\r                />\r              </Card>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <Card>\r                <Statistic\r                  title=\"Başarılı\"\r                  value={stats.completed}\r                  valueStyle={{ color: '#3f8600' }}\r                  prefix={<CheckCircleOutlined />}\r                />\r              </Card>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <Card>\r                <Statistic\r                  title=\"Başarısız\"\r                  value={stats.failed}\r                  valueStyle={{ color: '#cf1322' }}\r                  prefix={<CloseCircleOutlined />}\r                />\r              </Card>\r            </Col>\r            <Col xs={24} sm={12} lg={6}>\r              <Card>\r                <Statistic\r                  title=\"Toplam Gelir\"\r                  value={stats.totalAmount}\r                  prefix=\"₺\"\r                  precision={2}\r                  valueStyle={{ color: '#3f8600' }}\r                  suffix={\r                    <span style={{ fontSize: 14, color: '#3f8600' }}>\r                      <ArrowUpOutlined />\r                    </span>\r                  }\r                />\r              </Card>\r            </Col>\r          </Row>\r        </Col>\r        {/* Recent Activity Alert */}\r        {stats.failed > 0 && (\r          <Col span={24}>\r            <Alert\r              message=\"Dikkat!\"\r              description={`${stats.failed} adet başarısız ödeme işlemi bulunmaktadır. Lütfen kontrol ediniz.`}\r              type=\"warning\"\r              showIcon\r              icon={<WarningOutlined />}\r              closable\r            />\r          </Col>\r        )}\r        {/* Main Content */}\r        <Col span={24}>\r          <Card\r            title=\"Ödemeler\"\r            extra={\r              <Space>\r                <Button icon={<ExportOutlined />} aria-label=\"export outlined\">Dışa Aktar</Button>\r                <Button type=\"primary\" icon={<SyncOutlined />} aria-label=\"sync outlined\">\r                  Yenile\r                </Button>\r              </Space>\r            }\r          >\r            {/* Filters */}\r            <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\r              <Col xs={24} sm={12} lg={8}>\r                <Input\r                  placeholder=\"İşlem no veya firma adı ile ara...\"\r                  prefix={<SearchOutlined / aria-label=\"input field\">}\r                  value={filters.search}\r                  onChange={(e) => setFilters({ ...filters, search: e.target.value })}\r                />\r              </Col>\r              <Col xs={24} sm={12} lg={4}>\r                <Select\r                  style={{ width: '100%' }}\r                  placeholder=\"Durum\"\r                  value={filters.status}\r                  onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, status: value })}\r                >\r                  <Select.Option value=\"all\" aria-label=\"select field\">Tümü</Select.Option>\r                  <Select.Option value=\"completed\" aria-label=\"select field\">Tamamlandı</Select.Option>\r                  <Select.Option value=\"pending\" aria-label=\"select field\">Bekliyor</Select.Option>\r                  <Select.Option value=\"failed\" aria-label=\"select field\">Başarısız</Select.Option>\r                  <Select.Option value=\"refunded\" aria-label=\"select field\">İade Edildi</Select.Option>\r                </Select>\r              </Col>\r              <Col xs={24} sm={12} lg={4}>\r                <Select\r                  style={{ width: '100%' }}\r                  placeholder=\"Yöntem\"\r                  value={filters.method}\r                  onChange={(value) = aria-label=\"select field\"> setFilters({ ...filters, method: value })}\r                >\r                  <Select.Option value=\"all\" aria-label=\"select field\">Tümü</Select.Option>\r                  <Select.Option value=\"credit_card\" aria-label=\"select field\">Kredi Kartı</Select.Option>\r                  <Select.Option value=\"bank_transfer\" aria-label=\"select field\">Banka Transferi</Select.Option>\r                  <Select.Option value=\"paypal\" aria-label=\"select field\">PayPal</Select.Option>\r                  <Select.Option value=\"stripe\" aria-label=\"select field\">Stripe</Select.Option>\r                </Select>\r              </Col>\r              <Col xs={24} sm={12} lg={8}>\r                <RangePicker\r                  style={{ width: '100%' }}\r                  placeholder={['Başlangıç', 'Bitiş']}\r                  showTime\r                  onChange={(dates) => setFilters({ ...filters, dateRange: dates })}\r                />\r              </Col>\r            </Row>\r            {/* Table */}\r            <Table\r              columns={columns}\r              dataSource={payments}\r              rowKey=\"id\"\r              loading={loading}\r              pagination={{\r                pageSize: 10,\r                showSizeChanger: true,\r                showTotal: (total) => `Toplam ${total} ödeme`,\r              }}\r            />\r          </Card>\r        </Col>\r      </Row>\r      {/* Payment Detail Modal */}\r      <Modal\r        title={`Ödeme Detayı - ${selectedPayment?.transactionId}`}\r        open={detailModalVisible}\r        onCancel={() => setDetailModalVisible(false)}\r        width={700}\r        footer={[\r          <Button key=\"close\" onClick={() => setDetailModalVisible(false)}>\r            Kapat\r          </Button>,\r        ]}\r      >\r        {selectedPayment && (\r          <div>\r            <Descriptions bordered column={{ xs: 1, sm: 2 }}>\r              <Descriptions.Item label=\"İşlem No\">\r                {selectedPayment.transactionId}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Firma\">\r                {selectedPayment.tenant}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Tutar\">\r                ₺{selectedPayment.amount.toLocaleString('tr-TR')}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Durum\">\r                {selectedPayment.status === 'completed' && (\r                  <Badge status=\"success\" text=\"Tamamlandı\" />\r                )}\r                {selectedPayment.status === 'pending' && (\r                  <Badge status=\"processing\" text=\"Bekliyor\" />\r                )}\r                {selectedPayment.status === 'failed' && (\r                  <Badge status=\"error\" text=\"Başarısız\" />\r                )}\r                {selectedPayment.status === 'refunded' && (\r                  <Badge status=\"default\" text=\"İade Edildi\" />\r                )}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Ödeme Yöntemi\">\r                <Space>\r                  {getPaymentMethodIcon(selectedPayment.method)}\r                  <span>\r                    {selectedPayment.method === 'credit_card' && 'Kredi Kartı'}\r                    {selectedPayment.method === 'bank_transfer' && 'Banka Transferi'}\r                    {selectedPayment.method === 'paypal' && 'PayPal'}\r                    {selectedPayment.method === 'stripe' && 'Stripe'}\r                  </span>\r                </Space>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Fatura No\">\r                {selectedPayment.invoiceNumber || '-'}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Açıklama\" span={2}>\r                {selectedPayment.description}\r              </Descriptions.Item>\r              {selectedPayment.failureReason && (\r                <Descriptions.Item label=\"Hata Nedeni\" span={2}>\r                  <Text type=\"danger\">{selectedPayment.failureReason}</Text>\r                </Descriptions.Item>\r              )}\r            </Descriptions>\r            <Title level={5} style={{ marginTop: 24 }}>İşlem Geçmişi</Title>\r            <Timeline>\r              <Timeline.Item color=\"green\">\r                İşlem başlatıldı - {dayjs(selectedPayment.createdAt).format('DD.MM.YYYY HH:mm')}\r              </Timeline.Item>\r              {selectedPayment.completedAt && (\r                <Timeline.Item color=\"green\">\r                  Ödeme tamamlandı - {dayjs(selectedPayment.completedAt).format('DD.MM.YYYY HH:mm')}\r                </Timeline.Item>\r              )}\r              {selectedPayment.status === 'failed' && (\r                <Timeline.Item color=\"red\">\r                  Ödeme başarısız - {selectedPayment.failureReason}\r                </Timeline.Item>\r              )}\r              {selectedPayment.refundedAt && (\r                <Timeline.Item color=\"gray\">\r                  İade edildi - {dayjs(selectedPayment.refundedAt).format('DD.MM.YYYY HH:mm')}\r                </Timeline.Item>\r              )}\r            </Timeline>\r          </div>\r        )}\r      </Modal>\r    </div>\r  );\r};\rexport default MasterPaymentsPage;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Payments/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Row,\r  Col,\r  Progress,\r  Statistic,\r  Table,\r  Tag,\r  Alert,\r  Button,\r  Space,\r  Typography,\r  Timeline,\r  Badge,\r  Tabs,\r  List,\r  Avatar,\r  Tooltip,\r  Select,\r  DatePicker,\r} from 'antd';\rimport {\r  ThunderboltOutlined,\r  ClockCircleOutlined,\r  CloudServerOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r  WarningOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  RiseOutlined,\r  FallOutlined,\r  ReloadOutlined,\r  SettingOutlined,\r  DashboardOutlined,\r  DesktopOutlined,\r  GlobalOutlined,\r  WifiOutlined,\r} from '@ant-design/icons';\rimport {\r  LineChart,\r  Line,\r  AreaChart,\r  Area,\r  XAxis,\r  YAxis,\r  CartesianGrid,\r  Tooltip as ChartTooltip,\r  ResponsiveContainer,\r  Legend,\r} from 'recharts';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst { RangePicker } = DatePicker;\rinterface PerformanceMetric {\r  id: string;\r  name: string;\r  value: number;\r  unit: string;\r  status: 'good' | 'warning' | 'critical';\r  trend: 'up' | 'down' | 'stable';\r  trendValue: number;\r}\rinterface ServerStatus {\r  id: string;\r  name: string;\r  type: string;\r  cpu: number;\r  memory: number;\r  disk: number;\r  network: number;\r  status: 'online' | 'offline' | 'maintenance';\r  uptime: string;\r  lastCheck: string;\r}\rconst MasterPerformancePage: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [selectedServer, setSelectedServer] = useState<string>('all');\r  const [timeRange, setTimeRange] = useState('1h');\r  // Mock real-time data\r  const [realtimeData, setRealtimeData] = useState<any[]>([]);\r  useEffect(() => {\r    // Simulate real-time data updates\r    const interval = setInterval(() => {\r      const newData = {\r        time: new Date().toLocaleTimeString(),\r        cpu: Math.floor(Math.random() * 30 + 50),\r        memory: Math.floor(Math.random() * 20 + 60),\r        requests: Math.floor(Math.random() * 500 + 1000),\r        responseTime: Math.floor(Math.random() * 50 + 100),\r      };\r      setRealtimeData(prev => {\r        const updated = [...prev, newData];\r        return updated.slice(-20); // Keep last 20 data points\r      });\r    }, 2000);\r    return () => clearInterval(interval);\r  }, []);\r  const performanceMetrics: PerformanceMetric[] = [\r    {\r      id: '1',\r      name: 'Response Time',\r      value: 125,\r      unit: 'ms',\r      status: 'good',\r      trend: 'down',\r      trendValue: 15,\r    },\r    {\r      id: '2',\r      name: 'Throughput',\r      value: 1500,\r      unit: 'req/s',\r      status: 'good',\r      trend: 'up',\r      trendValue: 8,\r    },\r    {\r      id: '3',\r      name: 'Error Rate',\r      value: 0.2,\r      unit: '%',\r      status: 'good',\r      trend: 'down',\r      trendValue: 5,\r    },\r    {\r      id: '4',\r      name: 'Apdex Score',\r      value: 0.95,\r      unit: '',\r      status: 'good',\r      trend: 'stable',\r      trendValue: 0,\r    },\r  ];\r  const servers: ServerStatus[] = [\r    {\r      id: '1',\r      name: 'API Server 1',\r      type: 'Application',\r      cpu: 65,\r      memory: 72,\r      disk: 45,\r      network: 88,\r      status: 'online',\r      uptime: '45 days',\r      lastCheck: '2 seconds ago',\r    },\r    {\r      id: '2',\r      name: 'Database Primary',\r      type: 'Database',\r      cpu: 45,\r      memory: 85,\r      disk: 78,\r      network: 65,\r      status: 'online',\r      uptime: '120 days',\r      lastCheck: '5 seconds ago',\r    },\r    {\r      id: '3',\r      name: 'Cache Server',\r      type: 'Cache',\r      cpu: 25,\r      memory: 45,\r      disk: 20,\r      network: 92,\r      status: 'online',\r      uptime: '30 days',\r      lastCheck: '3 seconds ago',\r    },\r    {\r      id: '4',\r      name: 'Load Balancer',\r      type: 'Network',\r      cpu: 35,\r      memory: 40,\r      disk: 15,\r      network: 95,\r      status: 'online',\r      uptime: '180 days',\r      lastCheck: '1 second ago',\r    },\r  ];\r  const apiEndpoints = [\r    { endpoint: '/api/auth/login', avgTime: 120, calls: 15420, errors: 12, errorRate: 0.08 },\r    { endpoint: '/api/tenants', avgTime: 85, calls: 8932, errors: 5, errorRate: 0.06 },\r    { endpoint: '/api/users', avgTime: 95, calls: 12543, errors: 8, errorRate: 0.06 },\r    { endpoint: '/api/reports', avgTime: 450, calls: 3421, errors: 45, errorRate: 1.31 },\r    { endpoint: '/api/analytics', avgTime: 320, calls: 5678, errors: 23, errorRate: 0.41 },\r  ];\r  const slowQueries = [\r    {\r      query: 'SELECT * FROM tenants JOIN subscriptions...',\r      duration: 2.5,\r      executions: 145,\r      database: 'Master',\r    },\r    {\r      query: 'UPDATE users SET last_login = NOW()...',\r      duration: 1.8,\r      executions: 3421,\r      database: 'Tenant_001',\r    },\r    {\r      query: 'SELECT COUNT(*) FROM transactions WHERE...',\r      duration: 1.5,\r      executions: 892,\r      database: 'Analytics',\r    },\r  ];\r  const getStatusColor = (status: string) => {\r    switch (status) {\r      case 'good':\r      case 'online':\r        return 'success';\r      case 'warning':\r      case 'maintenance':\r        return 'warning';\r      case 'critical':\r      case 'offline':\r        return 'error';\r      default:\r        return 'default';\r    }\r  };\r  const getProgressColor = (value: number) => {\r    if (value < 50) return '#52c41a';\r    if (value < 75) return '#faad14';\r    return '#f5222d';\r  };\r  return (\r    <div className=\"master-performance-page\">\r      {/* Header */}\r      <Card style={{ marginBottom: 24 }}>\r        <Row justify=\"space-between\" align=\"middle\">\r          <Col>\r            <Space>\r              <Select\r                value={selectedServer}\r                onChange={setSelectedServer}\r                style={{ width: 200 }}\r               aria-label=\"select field\">\r                <Select.Option value=\"all\" aria-label=\"select field\">Tüm Sunucular</Select.Option>\r                {servers.map(server => (\r                  <Select.Option key={server.id} value={server.id} aria-label=\"select field\">\r                    {server.name}\r                  </Select.Option>\r                ))}\r              </Select>\r              <Select\r                value={timeRange}\r                onChange={setTimeRange}\r                style={{ width: 150 }}\r               aria-label=\"select field\">\r                <Select.Option value=\"1h\" aria-label=\"select field\">Son 1 Saat</Select.Option>\r                <Select.Option value=\"6h\" aria-label=\"select field\">Son 6 Saat</Select.Option>\r                <Select.Option value=\"24h\" aria-label=\"select field\">Son 24 Saat</Select.Option>\r                <Select.Option value=\"7d\" aria-label=\"select field\">Son 7 Gün</Select.Option>\r              </Select>\r              <Button icon={<ReloadOutlined />} onClick={() = aria-label=\"reload outlined\"> setLoading(true)}>\r                Yenile\r              </Button>\r            </Space>\r          </Col>\r          <Col>\r            <Space>\r              <Badge status=\"processing\" text=\"Canlı İzleme Aktif\" />\r              <Button icon={<SettingOutlined />} aria-label=\"setting outlined\">Ayarlar</Button>\r            </Space>\r          </Col>\r        </Row>\r      </Card>\r      {/* Key Performance Indicators */}\r      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\r        {performanceMetrics.map(metric => (\r          <Col xs={24} sm={12} lg={6} key={metric.id}>\r            <Card>\r              <Statistic\r                title={metric.name}\r                value={metric.value}\r                suffix={metric.unit}\r                valueStyle={{ color: getStatusColor(metric.status) === 'success' ? '#3f8600' : undefined }}\r                prefix={\r                  metric.trend === 'up' ? <RiseOutlined /> :\r                  metric.trend === 'down' ? <FallOutlined /> :\r                  null\r                }\r              />\r              <div style={{ marginTop: 8 }}>\r                <Tag color={getStatusColor(metric.status)}>\r                  {metric.status.toUpperCase()}\r                </Tag>\r                {metric.trend !== 'stable' && (\r                  <Text type=\"secondary\" style={{ marginLeft: 8 }}>\r                    {metric.trend === 'up' ? '+' : '-'}{metric.trendValue}%\r                  </Text>\r                )}\r              </div>\r            </Card>\r          </Col>\r        ))}\r      </Row>\r      <Tabs defaultActiveKey=\"realtime\">\r        <TabPane tab=\"Gerçek Zamanlı İzleme\" key=\"realtime\">\r          <Row gutter={[16, 16]}>\r            <Col span={24}>\r              <Card title=\"Sistem Metrikleri\" bordered={false}>\r                <ResponsiveContainer width=\"100%\" height={350}>\r                  <LineChart data={realtimeData}>\r                    <CartesianGrid strokeDasharray=\"3 3\" />\r                    <XAxis dataKey=\"time\" />\r                    <YAxis />\r                    <ChartTooltip />\r                    <Legend />\r                    <Line\r                      type=\"monotone\"\r                      dataKey=\"cpu\"\r                      stroke=\"#8884d8\"\r                      name=\"CPU %\"\r                      strokeWidth={2}\r                    />\r                    <Line\r                      type=\"monotone\"\r                      dataKey=\"memory\"\r                      stroke=\"#82ca9d\"\r                      name=\"Memory %\"\r                      strokeWidth={2}\r                    />\r                    <Line\r                      type=\"monotone\"\r                      dataKey=\"responseTime\"\r                      stroke=\"#ffc658\"\r                      name=\"Response Time (ms)\"\r                      strokeWidth={2}\r                    />\r                  </LineChart>\r                </ResponsiveContainer>\r              </Card>\r            </Col>\r          </Row>\r        </TabPane>\r        <TabPane tab=\"Sunucu Durumu\" key=\"servers\">\r          <Row gutter={[16, 16]}>\r            {servers.map(server => (\r              <Col xs={24} sm={12} lg={6} key={server.id}>\r                <Card\r                  title={\r                    <Space>\r                      <Badge status={server.status === 'online' ? 'success' : 'error'} />\r                      {server.name}\r                    </Space>\r                  }\r                  extra={<Tag color={getStatusColor(server.status)}>{server.status}</Tag>}\r                >\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <div>\r                      <Text type=\"secondary\">CPU</Text>\r                      <Progress\r                        percent={server.cpu}\r                        strokeColor={getProgressColor(server.cpu)}\r                        size=\"small\"\r                      />\r                    </div>\r                    <div>\r                      <Text type=\"secondary\">Memory</Text>\r                      <Progress\r                        percent={server.memory}\r                        strokeColor={getProgressColor(server.memory)}\r                        size=\"small\"\r                      />\r                    </div>\r                    <div>\r                      <Text type=\"secondary\">Disk</Text>\r                      <Progress\r                        percent={server.disk}\r                        strokeColor={getProgressColor(server.disk)}\r                        size=\"small\"\r                      />\r                    </div>\r                    <div>\r                      <Text type=\"secondary\">Network</Text>\r                      <Progress\r                        percent={server.network}\r                        strokeColor={getProgressColor(server.network)}\r                        size=\"small\"\r                      />\r                    </div>\r                    <div style={{ marginTop: 12 }}>\r                      <Text type=\"secondary\">Uptime: </Text>\r                      <Text strong>{server.uptime}</Text>\r                    </div>\r                    <div>\r                      <Text type=\"secondary\">Last Check: </Text>\r                      <Text>{server.lastCheck}</Text>\r                    </div>\r                  </Space>\r                </Card>\r              </Col>\r            ))}\r          </Row>\r        </TabPane>\r        <TabPane tab=\"API Performansı\" key=\"api\">\r          <Card title=\"API Endpoint Performansı\" bordered={false}>\r            <Table\r              dataSource={apiEndpoints}\r              columns={[\r                {\r                  title: 'Endpoint',\r                  dataIndex: 'endpoint',\r                  key: 'endpoint',\r                  render: (text) => <Text code>{text}</Text>,\r                },\r                {\r                  title: 'Ortalama Süre',\r                  dataIndex: 'avgTime',\r                  key: 'avgTime',\r                  render: (time) => {\r                    const color = time < 200 ? 'success' : time < 500 ? 'warning' : 'error';\r                    return <Tag color={color}>{time}ms</Tag>;\r                  },\r                },\r                {\r                  title: 'Toplam Çağrı',\r                  dataIndex: 'calls',\r                  key: 'calls',\r                  render: (calls) => calls.toLocaleString('tr-TR'),\r                },\r                {\r                  title: 'Hata Sayısı',\r                  dataIndex: 'errors',\r                  key: 'errors',\r                },\r                {\r                  title: 'Hata Oranı',\r                  dataIndex: 'errorRate',\r                  key: 'errorRate',\r                  render: (rate) => {\r                    const color = rate < 0.1 ? 'success' : rate < 1 ? 'warning' : 'error';\r                    return <Tag color={color}>{rate.toFixed(2)}%</Tag>;\r                  },\r                },\r              ]}\r              pagination={false}\r              rowKey=\"endpoint\"\r            />\r          </Card>\r        </TabPane>\r        <TabPane tab=\"Veritabanı\" key=\"database\">\r          <Row gutter={[16, 16]}>\r            <Col span={24}>\r              <Alert\r                message=\"Yavaş Sorgu Uyarısı\"\r                description=\"3 adet yavaş çalışan sorgu tespit edildi. Lütfen optimize ediniz.\"\r                type=\"warning\"\r                showIcon\r                style={{ marginBottom: 16 }}\r              />\r            </Col>\r            <Col span={24}>\r              <Card title=\"Yavaş Sorgular\" bordered={false}>\r                <Table\r                  dataSource={slowQueries}\r                  columns={[\r                    {\r                      title: 'Sorgu',\r                      dataIndex: 'query',\r                      key: 'query',\r                      render: (text) => (\r                        <Tooltip title={text}>\r                          <Text code style={{ maxWidth: 300, display: 'inline-block' }} ellipsis>\r                            {text}\r                          </Text>\r                        </Tooltip>\r                      ),\r                    },\r                    {\r                      title: 'Süre',\r                      dataIndex: 'duration',\r                      key: 'duration',\r                      render: (duration) => (\r                        <Tag color={duration > 2 ? 'error' : 'warning'}>\r                          {duration}s\r                        </Tag>\r                      ),\r                    },\r                    {\r                      title: 'Çalıştırma',\r                      dataIndex: 'executions',\r                      key: 'executions',\r                    },\r                    {\r                      title: 'Veritabanı',\r                      dataIndex: 'database',\r                      key: 'database',\r                      render: (db) => <Tag>{db}</Tag>,\r                    },\r                  ]}\r                  pagination={false}\r                  rowKey=\"query\"\r                />\r              </Card>\r            </Col>\r            <Col xs={24} lg={12}>\r              <Card title=\"Bağlantı Havuzu\" bordered={false}>\r                <Space direction=\"vertical\" style={{ width: '100%' }}>\r                  <div>\r                    <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>\r                      <Text>Aktif Bağlantılar</Text>\r                      <Text strong>85/100</Text>\r                    </div>\r                    <Progress percent={85} strokeColor=\"#1890ff\" />\r                  </div>\r                  <div>\r                    <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>\r                      <Text>Bekleyen İşlemler</Text>\r                      <Text strong>12</Text>\r                    </div>\r                    <Progress percent={12} strokeColor=\"#52c41a\" />\r                  </div>\r                  <div>\r                    <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: 8 }}>\r                      <Text>Zaman Aşımı</Text>\r                      <Text strong>3</Text>\r                    </div>\r                    <Progress percent={3} strokeColor=\"#faad14\" />\r                  </div>\r                </Space>\r              </Card>\r            </Col>\r            <Col xs={24} lg={12}>\r              <Card title=\"Cache Performansı\" bordered={false}>\r                <Space direction=\"vertical\" style={{ width: '100%' }}>\r                  <Statistic\r                    title=\"Cache Hit Rate\"\r                    value={92.5}\r                    suffix=\"%\"\r                    prefix={<CheckCircleOutlined />}\r                    valueStyle={{ color: '#3f8600' }}\r                  />\r                  <Row gutter={16}>\r                    <Col span={12}>\r                      <Statistic title=\"Hits\" value={125432} />\r                    </Col>\r                    <Col span={12}>\r                      <Statistic title=\"Misses\" value={10234} />\r                    </Col>\r                  </Row>\r                  <Row gutter={16}>\r                    <Col span={12}>\r                      <Statistic title=\"Keys\" value={8932} />\r                    </Col>\r                    <Col span={12}>\r                      <Statistic title=\"Memory\" value=\"256MB\" />\r                    </Col>\r                  </Row>\r                </Space>\r              </Card>\r            </Col>\r          </Row>\r        </TabPane>\r      </Tabs>\r    </div>\r  );\r};\rexport default MasterPerformancePage;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Performance/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Alert,\r  Card,\r  Row,\r  Col,\r  Typography,\r  Button,\r  Space,\r  DatePicker,\r  Select,\r  Table,\r  Tabs,\r  Statistic,\r  Tag,\r  Progress,\r  Divider,\r  Radio,\r  Tooltip,\r  message,\r  Empty,\r  Badge,\r  Segmented,\r  List,\r  Avatar,\r} from 'antd';\rimport {\r  FileTextOutlined,\r  DownloadOutlined,\r  PrinterOutlined,\r  MailOutlined,\r  CalendarOutlined,\r  BarChartOutlined,\r  LineChartOutlined,\r  PieChartOutlined,\r  AreaChartOutlined,\r  RiseOutlined,\r  FallOutlined,\r  UserOutlined,\r  ShoppingCartOutlined,\r  DollarOutlined,\r  TeamOutlined,\r  ShopOutlined,\r  FilterOutlined,\r  ReloadOutlined,\r  ExportOutlined,\r  FilePdfOutlined,\r  FileExcelOutlined,\r  ClockCircleOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  InfoCircleOutlined,\r  TrophyOutlined,\r  CrownOutlined,\r  FireOutlined,\r  RocketOutlined,\r  ThunderboltOutlined,\r} from '@ant-design/icons';\rimport { Line, Column, Pie, Area, DualAxes, Radar, Funnel } from '@ant-design/plots';\rimport { motion } from 'framer-motion';\rimport dayjs from 'dayjs';\rimport quarterOfYear from 'dayjs/plugin/quarterOfYear';\rimport weekOfYear from 'dayjs/plugin/weekOfYear';\rimport { masterApi } from '@/shared/api/master.api';\rimport '../../styles/master-layout.css';\rdayjs.extend(quarterOfYear);\rdayjs.extend(weekOfYear);\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst { Option } = Select;\rconst { RangePicker } = DatePicker;\rinterface ReportData {\r  revenue: number;\r  growth: number;\r  tenants: number;\r  users: number;\r  subscriptions: number;\r  churnRate: number;\r  arpu: number;\r  mrr: number;\r  arr: number;\r}\rinterface TenantReport {\r  id: string;\r  name: string;\r  package: string;\r  users: number;\r  revenue: number;\r  status: string;\r  createdDate: string;\r  lastActivity: string;\r}\rinterface UserReport {\r  id: string;\r  name: string;\r  tenant: string;\r  role: string;\r  loginCount: number;\r  lastLogin: string;\r  status: string;\r}\rexport const MasterReportsPage: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [activeTab, setActiveTab] = useState('overview');\r  const [reportType, setReportType] = useState('monthly');\r  const [dateRange, setDateRange] = useState<[dayjs.Dayjs, dayjs.Dayjs]>([\r    dayjs().subtract(30, 'days'),\r    dayjs(),\r  ]);\r  const [exportFormat, setExportFormat] = useState('pdf');\r  const [selectedMetric, setSelectedMetric] = useState('revenue');\r  // Mock report data\r  const reportData: ReportData = {\r    revenue: 125450,\r    growth: 23.5,\r    tenants: 156,\r    users: 3450,\r    subscriptions: 142,\r    churnRate: 2.8,\r    arpu: 850,\r    mrr: 45200,\r    arr: 542400,\r  };\r  // Mock tenant reports\r  const tenantReports: TenantReport[] = [\r    {\r      id: '1',\r      name: 'TechCorp Solutions',\r      package: 'Enterprise',\r      users: 125,\r      revenue: 12500,\r      status: 'active',\r      createdDate: '2023-06-15',\r      lastActivity: dayjs().subtract(2, 'hours').toISOString(),\r    },\r    {\r      id: '2',\r      name: 'StartupHub Inc',\r      package: 'Professional',\r      users: 45,\r      revenue: 4500,\r      status: 'active',\r      createdDate: '2023-08-20',\r      lastActivity: dayjs().subtract(1, 'day').toISOString(),\r    },\r    {\r      id: '3',\r      name: 'Digital Agency',\r      package: 'Basic',\r      users: 15,\r      revenue: 990,\r      status: 'active',\r      createdDate: '2023-10-05',\r      lastActivity: dayjs().subtract(3, 'hours').toISOString(),\r    },\r  ];\r  // Revenue trend data\r  const revenueTrendData = Array.from({ length: 12 }, (_, i) => ({\r    month: dayjs().subtract(11 - i, 'months').format('MMM'),\r    revenue: Math.floor(Math.random() * 50000) + 30000,\r    subscriptions: Math.floor(Math.random() * 30) + 100,\r  }));\r  // Package distribution data\r  const packageDistribution = [\r    { type: 'Enterprise', value: 25, count: 25 },\r    { type: 'Professional', value: 45, count: 45 },\r    { type: 'Basic', value: 65, count: 65 },\r    { type: 'Starter', value: 21, count: 21 },\r  ];\r  // User activity data\r  const userActivityData = Array.from({ length: 24 }, (_, i) => ({\r    hour: `${i}:00`,\r    active: Math.floor(Math.random() * 200) + 50,\r    new: Math.floor(Math.random() * 20) + 5,\r  }));\r  // Top tenants by revenue\r  const topTenants = [\r    { name: 'TechCorp', revenue: 12500, growth: 15 },\r    { name: 'StartupHub', revenue: 8900, growth: 32 },\r    { name: 'Digital Agency', revenue: 6750, growth: -5 },\r    { name: 'CloudFirst', revenue: 5200, growth: 18 },\r    { name: 'DataDriven Co', revenue: 4800, growth: 8 },\r  ];\r  useEffect(() => {\r    fetchReports();\r  }, [reportType, dateRange]);\r  const fetchReports = async () => {\r    setLoading(true);\r    try {\r      // API çağrıları yapılacak\r      // const response = await masterApi.reports.getOverview({\r      //   type: reportType,\r      //   startDate: dateRange[0].toISOString(),\r      //   endDate: dateRange[1].toISOString(),\r      // });\r      setTimeout(() => {\r        setLoading(false);\r      }, 500);\r    } catch (error) {\r      message.error('Raporlar yüklenirken hata oluştu');\r      setLoading(false);\r    }\r  };\r  const handleExport = (format: string) => {\r    message.success(`Rapor ${format.toUpperCase()} formatında indiriliyor...`);\r    // Export logic here\r  };\r  const handleSendEmail = () => {\r    message.success('Rapor e-posta ile gönderiliyor...');\r    // Email logic here\r  };\r  const handlePrint = () => {\r    window.print();\r  };\r  // Chart configurations\r  const revenueChartConfig = {\r    data: revenueTrendData,\r    xField: 'month',\r    yField: ['revenue', 'subscriptions'],\r    geometryOptions: [\r      {\r        geometry: 'column',\r        color: '#5B8FF9',\r      },\r      {\r        geometry: 'line',\r        color: '#5AD8A6',\r        lineStyle: {\r          lineWidth: 2,\r        },\r      },\r    ],\r    yAxis: {\r      revenue: {\r        min: 0,\r        label: {\r          formatter: (v: string) => `₺${Number(v).toLocaleString()}`,\r        },\r      },\r      subscriptions: {\r        min: 0,\r      },\r    },\r  };\r  const packagePieConfig = {\r    data: packageDistribution,\r    angleField: 'value',\r    colorField: 'type',\r    radius: 0.8,\r    label: {\r      type: 'spider',\r      content: '{name}: {percentage}',\r    },\r    interactions: [\r      {\r        type: 'element-active',\r      },\r    ],\r  };\r  const userActivityConfig = {\r    data: userActivityData,\r    xField: 'hour',\r    yField: 'active',\r    smooth: true,\r    areaStyle: {\r      fill: 'l(270) 0:#ffffff 1:#5B8FF9',\r    },\r  };\r  // KPI Cards\r  const kpiCards = [\r    {\r      title: 'Toplam Gelir',\r      value: reportData.revenue,\r      prefix: '₺',\r      suffix: '',\r      change: reportData.growth,\r      icon: <DollarOutlined />,\r      color: '#52c41a',\r    },\r    {\r      title: 'Aktif Tenant',\r      value: reportData.tenants,\r      prefix: '',\r      suffix: '',\r      change: 8.2,\r      icon: <ShopOutlined />,\r      color: '#1890ff',\r    },\r    {\r      title: 'Toplam Kullanıcı',\r      value: reportData.users,\r      prefix: '',\r      suffix: '',\r      change: 15.3,\r      icon: <TeamOutlined />,\r      color: '#722ed1',\r    },\r    {\r      title: 'MRR',\r      value: reportData.mrr,\r      prefix: '₺',\r      suffix: '',\r      change: 12.5,\r      icon: <RiseOutlined />,\r      color: '#fa8c16',\r    },\r  ];\r  const tenantColumns = [\r    {\r      title: 'Tenant',\r      dataIndex: 'name',\r      key: 'name',\r      render: (name: string) => (\r        <Space>\r          <Avatar icon={<ShopOutlined />} />\r          <Text strong>{name}</Text>\r        </Space>\r      ),\r    },\r    {\r      title: 'Paket',\r      dataIndex: 'package',\r      key: 'package',\r      render: (pkg: string) => {\r        const colors: Record<string, string> = {\r          Enterprise: 'purple',\r          Professional: 'blue',\r          Basic: 'green',\r          Starter: 'default',\r        };\r        return <Tag color={colors[pkg] || 'default'}>{pkg}</Tag>;\r      },\r    },\r    {\r      title: 'Kullanıcı',\r      dataIndex: 'users',\r      key: 'users',\r      render: (users: number) => (\r        <Space>\r          <TeamOutlined />\r          <Text>{users}</Text>\r        </Space>\r      ),\r    },\r    {\r      title: 'Gelir',\r      dataIndex: 'revenue',\r      key: 'revenue',\r      render: (revenue: number) => (\r        <Text strong>₺{revenue.toLocaleString()}</Text>\r      ),\r      sorter: (a: TenantReport, b: TenantReport) => a.revenue - b.revenue,\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status: string) => (\r        <Badge\r          status={status === 'active' ? 'success' : 'error'}\r          text={status === 'active' ? 'Aktif' : 'Pasif'}\r        />\r      ),\r    },\r    {\r      title: 'Son Aktivite',\r      dataIndex: 'lastActivity',\r      key: 'lastActivity',\r      render: (date: string) => (\r        <Text type=\"secondary\">{dayjs(date).fromNow()}</Text>\r      ),\r    },\r  ];\r  return (\r    <div className=\"master-reports-page\">\r      {/* Header */}\r      <div className=\"page-header glass-morphism\">\r        <motion.div\r          initial={{ opacity: 0, x: -20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-content\"\r        >\r          <Title level={2} className=\"gradient-text\">\r            <BarChartOutlined /> Raporlar ve Analizler\r          </Title>\r          <Text type=\"secondary\">Detaylı sistem raporları ve iş analizleri</Text>\r        </motion.div>\r        <motion.div\r          initial={{ opacity: 0, x: 20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-actions\"\r        >\r          <Space>\r            <Segmented\r              value={reportType}\r              onChange={setReportType}\r              options={[\r                { label: 'Günlük', value: 'daily' },\r                { label: 'Haftalık', value: 'weekly' },\r                { label: 'Aylık', value: 'monthly' },\r                { label: 'Yıllık', value: 'yearly' },\r              ]}\r            />\r            <RangePicker\r              value={dateRange}\r              onChange={(dates) => dates && setDateRange(dates as [dayjs.Dayjs, dayjs.Dayjs])}\r              format=\"DD.MM.YYYY\"\r            />\r            <Button\r              icon={<ReloadOutlined />}\r              onClick={fetchReports}\r              loading={loading}\r             aria-label=\"reload outlined\">\r              Yenile\r            </Button>\r          </Space>\r        </motion.div>\r      </div>\r      {/* KPI Cards */}\r      <Row gutter={[20, 20]} className=\"stats-row\">\r        {kpiCards.map((kpi, index) => (\r          <Col xs={24} sm={12} lg={6} key={index}>\r            <motion.div\r              initial={{ opacity: 0, y: 20 }}\r              animate={{ opacity: 1, y: 0 }}\r              transition={{ delay: index * 0.1 }}\r            >\r              <Card className=\"stat-card glass-morphism\">\r                <Statistic\r                  title={kpi.title}\r                  value={kpi.value}\r                  prefix={\r                    <span style={{ color: kpi.color }}>\r                      {kpi.icon}\r                      {kpi.prefix}\r                    </span>\r                  }\r                  suffix={\r                    <span style={{ fontSize: 14, color: kpi.change > 0 ? '#52c41a' : '#ff4d4f' }}>\r                      {kpi.change > 0 ? <RiseOutlined /> : <FallOutlined />}\r                      {Math.abs(kpi.change)}%\r                    </span>\r                  }\r                  valueStyle={{ color: kpi.color }}\r                />\r              </Card>\r            </motion.div>\r          </Col>\r        ))}\r      </Row>\r      {/* Main Content */}\r      <Card className=\"content-card glass-morphism\">\r        <Tabs \r          activeKey={activeTab} \r          onChange={setActiveTab}\r          tabBarExtraContent={\r            <Space>\r              <Select\r                value={exportFormat}\r                onChange={setExportFormat}\r                style={{ width: 100 }}\r               aria-label=\"select field\">\r                <Option value=\"pdf\">PDF</Option>\r                <Option value=\"excel\">Excel</Option>\r                <Option value=\"csv\">CSV</Option>\r              </Select>\r              <Button\r                icon={<DownloadOutlined />}\r                onClick={() = aria-label=\"download outlined\"> handleExport(exportFormat)}\r              >\r                İndir\r              </Button>\r              <Button icon={<MailOutlined />} onClick={handleSendEmail} aria-label=\"mail outlined\">\r                E-posta\r              </Button>\r              <Button icon={<PrinterOutlined />} onClick={handlePrint} aria-label=\"printer outlined\">\r                Yazdır\r              </Button>\r            </Space>\r          }\r        >\r          <TabPane\r            tab={\r              <span>\r                <AreaChartOutlined />\r                Genel Bakış\r              </span>\r            }\r            key=\"overview\"\r          >\r            <Row gutter={[20, 20]}>\r              <Col xs={24} lg={16}>\r                <Card\r                  title=\"Gelir ve Abonelik Trendi\"\r                  bordered={false}\r                  extra={\r                    <Radio.Group value={selectedMetric} onChange={(e) => setSelectedMetric(e.target.value)}>\r                      <Radio.Button value=\"revenue\">Gelir</Radio.Button>\r                      <Radio.Button value=\"subscriptions\">Abonelik</Radio.Button>\r                      <Radio.Button value=\"both\">Her İkisi</Radio.Button>\r                    </Radio.Group>\r                  }\r                >\r                  <DualAxes {...revenueChartConfig} height={300} />\r                </Card>\r              </Col>\r              <Col xs={24} lg={8}>\r                <Card title=\"Paket Dağılımı\" bordered={false}>\r                  <Pie {...packagePieConfig} height={300} />\r                </Card>\r              </Col>\r            </Row>\r            <Divider />\r            <Row gutter={[20, 20]}>\r              <Col xs={24} lg={12}>\r                <Card\r                  title=\"En Yüksek Gelirli Tenantlar\"\r                  bordered={false}\r                  extra={<Text type=\"secondary\">Top 5</Text>}\r                >\r                  <List\r                    dataSource={topTenants}\r                    renderItem={(item) => (\r                      <List.Item>\r                        <List.Item.Meta\r                          avatar={\r                            item.growth > 0 ? (\r                              <Avatar style={{ backgroundColor: '#52c41a' }} icon={<RiseOutlined />} />\r                            ) : (\r                              <Avatar style={{ backgroundColor: '#ff4d4f' }} icon={<FallOutlined />} />\r                            )\r                          }\r                          title={item.name}\r                          description={\r                            <Space>\r                              <Text strong>₺{item.revenue.toLocaleString()}</Text>\r                              <Tag color={item.growth > 0 ? 'green' : 'red'}>\r                                {item.growth > 0 ? '+' : ''}{item.growth}%\r                              </Tag>\r                            </Space>\r                          }\r                        />\r                        <Progress\r                          percent={(item.revenue / topTenants[0].revenue) * 100}\r                          showInfo={false}\r                          strokeColor=\"#1890ff\"\r                        />\r                      </List.Item>\r                    )}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} lg={12}>\r                <Card\r                  title=\"Kullanıcı Aktivitesi (24 Saat)\"\r                  bordered={false}\r                  extra={\r                    <Badge count={userActivityData.reduce((sum, d) => sum + d.active, 0)} showZero>\r                      <UserOutlined />\r                    </Badge>\r                  }\r                >\r                  <Area {...userActivityConfig} height={320} />\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          <TabPane\r            tab={\r              <span>\r                <ShopOutlined />\r                Tenant Raporları\r              </span>\r            }\r            key=\"tenants\"\r          >\r            <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\r              <Col xs={24} sm={8}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"Toplam Tenant\"\r                    value={reportData.tenants}\r                    prefix={<ShopOutlined />}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} sm={8}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"Ortalama Kullanıcı/Tenant\"\r                    value={Math.round(reportData.users / reportData.tenants)}\r                    prefix={<TeamOutlined />}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} sm={8}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"Churn Rate\"\r                    value={reportData.churnRate}\r                    suffix=\"%\"\r                    valueStyle={{ color: reportData.churnRate < 5 ? '#52c41a' : '#ff4d4f' }}\r                  />\r                </Card>\r              </Col>\r            </Row>\r            <Table\r              columns={tenantColumns}\r              dataSource={tenantReports}\r              rowKey=\"id\"\r              loading={loading}\r              pagination={{\r                pageSize: 10,\r                showSizeChanger: true,\r                showTotal: (total) => `Toplam ${total} tenant`,\r              }}\r            />\r          </TabPane>\r          <TabPane\r            tab={\r              <span>\r                <DollarOutlined />\r                Finansal Raporlar\r              </span>\r            }\r            key=\"financial\"\r          >\r            <Row gutter={[20, 20]}>\r              <Col xs={24} sm={12} lg={6}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"MRR (Aylık Tekrarlayan Gelir)\"\r                    value={reportData.mrr}\r                    prefix=\"₺\"\r                    valueStyle={{ color: '#52c41a' }}\r                  />\r                  <Progress percent={75} showInfo={false} strokeColor=\"#52c41a\" />\r                  <Text type=\"secondary\">Hedef: ₺60,000</Text>\r                </Card>\r              </Col>\r              <Col xs={24} sm={12} lg={6}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"ARR (Yıllık Tekrarlayan Gelir)\"\r                    value={reportData.arr}\r                    prefix=\"₺\"\r                    valueStyle={{ color: '#1890ff' }}\r                  />\r                  <Progress percent={68} showInfo={false} strokeColor=\"#1890ff\" />\r                  <Text type=\"secondary\">Hedef: ₺800,000</Text>\r                </Card>\r              </Col>\r              <Col xs={24} sm={12} lg={6}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"ARPU (Kullanıcı Başı Gelir)\"\r                    value={reportData.arpu}\r                    prefix=\"₺\"\r                    valueStyle={{ color: '#722ed1' }}\r                  />\r                  <Progress percent={85} showInfo={false} strokeColor=\"#722ed1\" />\r                  <Text type=\"secondary\">Hedef: ₺1,000</Text>\r                </Card>\r              </Col>\r              <Col xs={24} sm={12} lg={6}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"Büyüme Oranı\"\r                    value={reportData.growth}\r                    suffix=\"%\"\r                    prefix={reportData.growth > 0 ? <RiseOutlined /> : <FallOutlined />}\r                    valueStyle={{ color: reportData.growth > 0 ? '#52c41a' : '#ff4d4f' }}\r                  />\r                  <Progress\r                    percent={reportData.growth}\r                    showInfo={false}\r                    strokeColor={reportData.growth > 20 ? '#52c41a' : '#faad14'}\r                  />\r                  <Text type=\"secondary\">Hedef: %30</Text>\r                </Card>\r              </Col>\r            </Row>\r            <Divider />\r            <Row gutter={[20, 20]}>\r              <Col xs={24}>\r                <Card title=\"Gelir Tahmin Modeli\" bordered={false}>\r                  <Empty\r                    image={Empty.PRESENTED_IMAGE_SIMPLE}\r                    description=\"Gelir tahmin modeli yakında eklenecek\"\r                  />\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          <TabPane\r            tab={\r              <span>\r                <TeamOutlined />\r                Kullanıcı Raporları\r              </span>\r            }\r            key=\"users\"\r          >\r            <Row gutter={[16, 16]} style={{ marginBottom: 16 }}>\r              <Col xs={24} sm={8}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"Toplam Kullanıcı\"\r                    value={reportData.users}\r                    prefix={<UserOutlined />}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} sm={8}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"Aktif Kullanıcı (30 gün)\"\r                    value={Math.round(reportData.users * 0.75)}\r                    prefix={<CheckCircleOutlined />}\r                    valueStyle={{ color: '#52c41a' }}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} sm={8}>\r                <Card className=\"glass-morphism\">\r                  <Statistic\r                    title=\"Yeni Kullanıcı (30 gün)\"\r                    value={Math.round(reportData.users * 0.15)}\r                    prefix={<UserOutlined />}\r                    valueStyle={{ color: '#1890ff' }}\r                  />\r                </Card>\r              </Col>\r            </Row>\r            <Card title=\"Kullanıcı Aktivite Haritası\" bordered={false}>\r              <Empty\r                image={Empty.PRESENTED_IMAGE_SIMPLE}\r                description=\"Kullanıcı aktivite haritası yakında eklenecek\"\r              />\r            </Card>\r          </TabPane>\r          <TabPane\r            tab={\r              <span>\r                <RocketOutlined />\r                Performans\r              </span>\r            }\r            key=\"performance\"\r          >\r            <Row gutter={[20, 20]}>\r              <Col xs={24} lg={8}>\r                <Card title=\"Sistem Performansı\" bordered={false}>\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <div>\r                      <Text>API Yanıt Süresi</Text>\r                      <Progress percent={92} status=\"success\" />\r                    </div>\r                    <div>\r                      <Text>Veritabanı Performansı</Text>\r                      <Progress percent={88} status=\"success\" />\r                    </div>\r                    <div>\r                      <Text>Önbellek İsabet Oranı</Text>\r                      <Progress percent={76} status=\"active\" />\r                    </div>\r                    <div>\r                      <Text>Sistem Uptime</Text>\r                      <Progress percent={99.9} status=\"success\" />\r                    </div>\r                  </Space>\r                </Card>\r              </Col>\r              <Col xs={24} lg={8}>\r                <Card title=\"En Çok Kullanılan Özellikler\" bordered={false}>\r                  <List\r                    dataSource={[\r                      { name: 'Stok Yönetimi', usage: 3450 },\r                      { name: 'Fatura Oluşturma', usage: 2890 },\r                      { name: 'Raporlama', usage: 2100 },\r                      { name: 'Müşteri Yönetimi', usage: 1850 },\r                      { name: 'Kullanıcı Yönetimi', usage: 1200 },\r                    ]}\r                    renderItem={(item) => (\r                      <List.Item>\r                        <Space style={{ width: '100%', justifyContent: 'space-between' }}>\r                          <Text>{item.name}</Text>\r                          <Tag color=\"blue\">{item.usage}</Tag>\r                        </Space>\r                      </List.Item>\r                    )}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} lg={8}>\r                <Card title=\"Hata Oranları\" bordered={false}>\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <Alert\r                      message=\"4xx Hatalar\"\r                      description=\"125 (0.2%)\"\r                      type=\"warning\"\r                      showIcon\r                    />\r                    <Alert\r                      message=\"5xx Hatalar\"\r                      description=\"12 (0.02%)\"\r                      type=\"error\"\r                      showIcon\r                    />\r                    <Alert\r                      message=\"Başarılı İstekler\"\r                      description=\"62,863 (99.78%)\"\r                      type=\"success\"\r                      showIcon\r                    />\r                  </Space>\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r        </Tabs>\r      </Card>\r    </div>\r  );\r};\rexport default MasterReportsPage;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Reports/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Row,\r  Col,\r  Card,\r  Tabs,\r  Form,\r  Input,\r  InputNumber,\r  Select,\r  Switch,\r  Button,\r  Space,\r  Typography,\r  Divider,\r  Alert,\r  message,\r  notification,\r  Upload,\r  ColorPicker,\r  Slider,\r  Radio,\r  Checkbox,\r  TimePicker,\r  DatePicker,\r  Tag,\r  Tooltip,\r  Progress,\r  List,\r  Avatar,\r  Badge,\r  Descriptions,\r  Table,\r  Modal,\r  Drawer,\r  Spin,\r  Result,\r  Skeleton,\r  Tree,\r  TreeSelect,\r  Cascader,\r  AutoComplete,\r  Mentions,\r  Rate,\r  Transfer,\r} from 'antd';\rimport type { UploadProps, TabsProps } from 'antd';\rimport {\r  SettingOutlined,\r  GlobalOutlined,\r  SecurityScanOutlined,\r  MailOutlined,\r  DatabaseOutlined,\r  CloudServerOutlined,\r  ApiOutlined,\r  BellOutlined,\r  UserOutlined,\r  KeyOutlined,\r  LockOutlined,\r  SafetyOutlined,\r  ThunderboltOutlined,\r  RocketOutlined,\r  DollarOutlined,\r  FileTextOutlined,\r  CodeOutlined,\r  BugOutlined,\r  ExperimentOutlined,\r  ToolOutlined,\r  ControlOutlined,\r  ApartmentOutlined,\r  BlockOutlined,\r  ClusterOutlined,\r  CloudUploadOutlined,\r  CloudDownloadOutlined,\r  SyncOutlined,\r  ReloadOutlined,\r  SaveOutlined,\r  ExportOutlined,\r  ImportOutlined,\r  InfoCircleOutlined,\r  CheckCircleOutlined,\r  WarningOutlined,\r  CloseCircleOutlined,\r  QuestionCircleOutlined,\r  PlusOutlined,\r  MinusOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  CopyOutlined,\r  ScissorOutlined,\r  FolderOutlined,\r  FolderOpenOutlined,\r  FileAddOutlined,\r  FileDoneOutlined,\r  FileExcelOutlined,\r  FilePdfOutlined,\r  FileImageOutlined,\r  FileMarkdownOutlined,\r  FileZipOutlined,\r  DesktopOutlined,\r  MobileOutlined,\r  TabletOutlined,\r  LaptopOutlined,\r  ChromeOutlined,\r  GithubOutlined,\r  SlackOutlined,\r  GoogleOutlined,\r  FacebookOutlined,\r  TwitterOutlined,\r  LinkedinOutlined,\r  InstagramOutlined,\r  WhatsAppOutlined,\r} from '@ant-design/icons';\rimport { ProForm, ProFormText, ProFormSelect, ProFormSwitch, ProFormDigit, ProFormTextArea } from '@ant-design/pro-components';\rimport dayjs from 'dayjs';\rimport './system-settings-enhanced.css';\rconst { Title, Text, Paragraph, Link } = Typography;\rconst { TabPane } = Tabs;\rconst { Option } = Select;\rconst { TextArea } = Input;\rconst { Dragger } = Upload;\rconst { confirm } = Modal;\rinterface SystemConfig {\r  general: {\r    siteName: string;\r    siteUrl: string;\r    adminEmail: string;\r    supportEmail: string;\r    timezone: string;\r    dateFormat: string;\r    language: string;\r    currency: string;\r    maintenanceMode: boolean;\r    maintenanceMessage: string;\r  };\r  security: {\r    passwordMinLength: number;\r    passwordRequireUppercase: boolean;\r    passwordRequireLowercase: boolean;\r    passwordRequireNumbers: boolean;\r    passwordRequireSpecialChars: boolean;\r    passwordExpiryDays: number;\r    maxLoginAttempts: number;\r    lockoutDuration: number;\r    twoFactorAuth: boolean;\r    sessionTimeout: number;\r    ipWhitelist: string[];\r    ipBlacklist: string[];\r    enableCaptcha: boolean;\r    enableSSL: boolean;\r    enableCSRF: boolean;\r  };\r  email: {\r    smtpHost: string;\r    smtpPort: number;\r    smtpUsername: string;\r    smtpPassword: string;\r    smtpEncryption: 'none' | 'tls' | 'ssl';\r    fromName: string;\r    fromEmail: string;\r    replyToEmail: string;\r    emailSignature: string;\r    enableEmailQueue: boolean;\r    maxEmailsPerHour: number;\r  };\r  database: {\r    connectionString: string;\r    maxConnections: number;\r    connectionTimeout: number;\r    commandTimeout: number;\r    enableConnectionPooling: boolean;\r    minPoolSize: number;\r    maxPoolSize: number;\r    enableAutoMigration: boolean;\r    backupSchedule: string;\r    retentionDays: number;\r  };\r  storage: {\r    provider: 'local' | 'aws' | 'azure' | 'gcp';\r    localPath: string;\r    awsBucket: string;\r    awsRegion: string;\r    awsAccessKey: string;\r    awsSecretKey: string;\r    azureContainer: string;\r    azureConnectionString: string;\r    gcpBucket: string;\r    gcpProjectId: string;\r    maxFileSize: number;\r    allowedFileTypes: string[];\r  };\r  api: {\r    enableApi: boolean;\r    apiVersion: string;\r    rateLimit: number;\r    rateLimitWindow: number;\r    enableApiKey: boolean;\r    enableOAuth: boolean;\r    corsOrigins: string[];\r    enableSwagger: boolean;\r    enableGraphQL: boolean;\r    maxRequestSize: number;\r    timeout: number;\r  };\r  notifications: {\r    enableEmailNotifications: boolean;\r    enablePushNotifications: boolean;\r    enableSmsNotifications: boolean;\r    enableInAppNotifications: boolean;\r    enableSlackIntegration: boolean;\r    slackWebhookUrl: string;\r    enableWebhooks: boolean;\r    webhookEndpoints: string[];\r    notificationRetention: number;\r  };\r  performance: {\r    enableCaching: boolean;\r    cacheProvider: 'memory' | 'redis' | 'memcached';\r    cacheDuration: number;\r    redisConnectionString: string;\r    enableCompression: boolean;\r    compressionLevel: number;\r    enableMinification: boolean;\r    enableCDN: boolean;\r    cdnUrl: string;\r    enableLazyLoading: boolean;\r    maxConcurrentRequests: number;\r  };\r  logging: {\r    logLevel: 'debug' | 'info' | 'warning' | 'error' | 'critical';\r    enableFileLogging: boolean;\r    logFilePath: string;\r    maxLogFileSize: number;\r    logRetentionDays: number;\r    enableDatabaseLogging: boolean;\r    enableConsoleLogging: boolean;\r    enableSentryLogging: boolean;\r    sentryDsn: string;\r    enableElasticLogging: boolean;\r    elasticUrl: string;\r  };\r  billing: {\r    enableBilling: boolean;\r    currency: string;\r    taxRate: number;\r    paymentGateway: 'stripe' | 'paypal' | 'square' | 'custom';\r    stripePublicKey: string;\r    stripeSecretKey: string;\r    paypalClientId: string;\r    paypalClientSecret: string;\r    enableRecurringBilling: boolean;\r    trialPeriodDays: number;\r    enableProration: boolean;\r  };\r}\rconst EnhancedSystemSettings: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [saving, setSaving] = useState(false);\r  const [config, setConfig] = useState<SystemConfig | null>(null);\r  const [activeTab, setActiveTab] = useState('general');\r  const [testingConnection, setTestingConnection] = useState(false);\r  const [form] = Form.useForm();\r  // Mock configuration data\r  const mockConfig: SystemConfig = {\r    general: {\r      siteName: 'Stocker Platform',\r      siteUrl: 'https://stocker.com',\r      adminEmail: 'admin@stocker.com',\r      supportEmail: 'support@stocker.com',\r      timezone: 'Europe/Istanbul',\r      dateFormat: 'DD/MM/YYYY',\r      language: 'tr',\r      currency: 'TRY',\r      maintenanceMode: false,\r      maintenanceMessage: 'Sistem bakımda, lütfen daha sonra tekrar deneyin.',\r    },\r    security: {\r      passwordMinLength: 8,\r      passwordRequireUppercase: true,\r      passwordRequireLowercase: true,\r      passwordRequireNumbers: true,\r      passwordRequireSpecialChars: true,\r      passwordExpiryDays: 90,\r      maxLoginAttempts: 5,\r      lockoutDuration: 30,\r      twoFactorAuth: true,\r      sessionTimeout: 30,\r      ipWhitelist: [],\r      ipBlacklist: [],\r      enableCaptcha: true,\r      enableSSL: true,\r      enableCSRF: true,\r    },\r    email: {\r      smtpHost: 'smtp.gmail.com',\r      smtpPort: 587,\r      smtpUsername: 'noreply@stocker.com',\r      smtpPassword: '********',\r      smtpEncryption: 'tls',\r      fromName: 'Stocker Platform',\r      fromEmail: 'noreply@stocker.com',\r      replyToEmail: 'support@stocker.com',\r      emailSignature: 'Stocker Platform Team',\r      enableEmailQueue: true,\r      maxEmailsPerHour: 100,\r    },\r    database: {\r      connectionString: 'Server=localhost;Database=stocker;User Id=sa;Password=******',\r      maxConnections: 100,\r      connectionTimeout: 30,\r      commandTimeout: 30,\r      enableConnectionPooling: true,\r      minPoolSize: 10,\r      maxPoolSize: 100,\r      enableAutoMigration: true,\r      backupSchedule: '0 2 * * *',\r      retentionDays: 30,\r    },\r    storage: {\r      provider: 'aws',\r      localPath: '/var/storage',\r      awsBucket: 'stocker-uploads',\r      awsRegion: 'eu-west-1',\r      awsAccessKey: 'AKIA**********',\r      awsSecretKey: '********',\r      azureContainer: '',\r      azureConnectionString: '',\r      gcpBucket: '',\r      gcpProjectId: '',\r      maxFileSize: 10485760,\r      allowedFileTypes: ['jpg', 'jpeg', 'png', 'pdf', 'doc', 'docx', 'xls', 'xlsx'],\r    },\r    api: {\r      enableApi: true,\r      apiVersion: 'v1',\r      rateLimit: 1000,\r      rateLimitWindow: 3600,\r      enableApiKey: true,\r      enableOAuth: true,\r      corsOrigins: ['http://localhost:3000', 'https://stocker.com'],\r      enableSwagger: true,\r      enableGraphQL: false,\r      maxRequestSize: 5242880,\r      timeout: 30000,\r    },\r    notifications: {\r      enableEmailNotifications: true,\r      enablePushNotifications: true,\r      enableSmsNotifications: false,\r      enableInAppNotifications: true,\r      enableSlackIntegration: true,\r      slackWebhookUrl: 'https://hooks.slack.com/services/******',\r      enableWebhooks: true,\r      webhookEndpoints: ['https://api.example.com/webhook'],\r      notificationRetention: 30,\r    },\r    performance: {\r      enableCaching: true,\r      cacheProvider: 'redis',\r      cacheDuration: 3600,\r      redisConnectionString: 'redis://localhost:6379',\r      enableCompression: true,\r      compressionLevel: 6,\r      enableMinification: true,\r      enableCDN: true,\r      cdnUrl: 'https://cdn.stocker.com',\r      enableLazyLoading: true,\r      maxConcurrentRequests: 10,\r    },\r    logging: {\r      logLevel: 'info',\r      enableFileLogging: true,\r      logFilePath: '/var/log/stocker',\r      maxLogFileSize: 10485760,\r      logRetentionDays: 30,\r      enableDatabaseLogging: true,\r      enableConsoleLogging: true,\r      enableSentryLogging: true,\r      sentryDsn: 'https://******@sentry.io/******',\r      enableElasticLogging: false,\r      elasticUrl: '',\r    },\r    billing: {\r      enableBilling: true,\r      currency: 'TRY',\r      taxRate: 18,\r      paymentGateway: 'stripe',\r      stripePublicKey: 'pk_live_******',\r      stripeSecretKey: 'sk_live_******',\r      paypalClientId: '',\r      paypalClientSecret: '',\r      enableRecurringBilling: true,\r      trialPeriodDays: 14,\r      enableProration: true,\r    },\r  };\r  useEffect(() => {\r    loadConfiguration();\r  }, []);\r  const loadConfiguration = async () => {\r    setLoading(true);\r    try {\r      // Simulated API call\r      setTimeout(() => {\r        setConfig(mockConfig);\r        form.setFieldsValue(mockConfig);\r        setLoading(false);\r      }, 1000);\r    } catch (error) {\r      message.error('Ayarlar yüklenemedi');\r      setLoading(false);\r    }\r  };\r  const handleSave = async (values: any) => {\r    setSaving(true);\r    try {\r      // Simulated API call\r      setTimeout(() => {\r        message.success('Ayarlar başarıyla kaydedildi');\r        setSaving(false);\r      }, 1500);\r    } catch (error) {\r      message.error('Ayarlar kaydedilemedi');\r      setSaving(false);\r    }\r  };\r  const handleTestConnection = (type: string) => {\r    setTestingConnection(true);\r    setTimeout(() => {\r      notification.success({\r        message: 'Bağlantı Başarılı',\r        description: `${type} bağlantısı başarıyla test edildi.`,\r      });\r      setTestingConnection(false);\r    }, 2000);\r  };\r  const handleExportSettings = () => {\r    const dataStr = JSON.stringify(config, null, 2);\r    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\r    const exportFileDefaultName = `system-settings-${dayjs().format('YYYY-MM-DD')}.json`;\r    const linkElement = document.createElement('a');\r    linkElement.setAttribute('href', dataUri);\r    linkElement.setAttribute('download', exportFileDefaultName);\r    linkElement.click();\r    message.success('Ayarlar dışa aktarıldı');\r  };\r  const handleImportSettings = (file: any) => {\r    const reader = new FileReader();\r    reader.onload = (e) => {\r      try {\r        const importedConfig = JSON.parse(e.target?.result as string);\r        setConfig(importedConfig);\r        form.setFieldsValue(importedConfig);\r        message.success('Ayarlar başarıyla içe aktarıldı');\r      } catch (error) {\r        message.error('Geçersiz ayar dosyası');\r      }\r    };\r    reader.readAsText(file);\r    return false;\r  };\r  const handleResetSettings = () => {\r    confirm({\r      title: 'Ayarları Sıfırla',\r      icon: <WarningOutlined />,\r      content: 'Tüm ayarlar varsayılan değerlere döndürülecek. Bu işlem geri alınamaz.',\r      okText: 'Sıfırla',\r      okType: 'danger',\r      cancelText: 'İptal',\r      onOk() {\r        loadConfiguration();\r        message.success('Ayarlar sıfırlandı');\r      },\r    });\r  };\r  if (loading) {\r    return (\r      <div className=\"system-settings-loading\">\r        <Card>\r          <Skeleton active paragraph={{ rows: 8 }} />\r        </Card>\r      </div>\r    );\r  }\r  const tabItems: TabsProps['items'] = [\r    {\r      key: 'general',\r      label: (\r        <span>\r          <GlobalOutlined />\r          Genel Ayarlar\r        </span>\r      ),\r      children: (\r        <Card title=\"Genel Sistem Ayarları\" className=\"settings-card\">\r          <Form.Item label=\"Site Adı\" name={['general', 'siteName']} rules={[{ required: true }]}>\r            <Input prefix={<GlobalOutlined / aria-label=\"input field\">} />\r          </Form.Item>\r          <Form.Item label=\"Site URL\" name={['general', 'siteUrl']} rules={[{ required: true, type: 'url' }]}>\r            <Input prefix={<GlobalOutlined / aria-label=\"input field\">} />\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Admin Email\" name={['general', 'adminEmail']} rules={[{ required: true, type: 'email' }]}>\r                <Input prefix={<MailOutlined / aria-label=\"input field\">} />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Destek Email\" name={['general', 'supportEmail']} rules={[{ required: true, type: 'email' }]}>\r                <Input prefix={<MailOutlined / aria-label=\"input field\">} />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item label=\"Zaman Dilimi\" name={['general', 'timezone']}>\r                <Select aria-label=\"select field\">\r                  <Option value=\"Europe/Istanbul\">Europe/Istanbul</Option>\r                  <Option value=\"UTC\">UTC</Option>\r                  <Option value=\"America/New_York\">America/New_York</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Tarih Formatı\" name={['general', 'dateFormat']}>\r                <Select aria-label=\"select field\">\r                  <Option value=\"DD/MM/YYYY\">DD/MM/YYYY</Option>\r                  <Option value=\"MM/DD/YYYY\">MM/DD/YYYY</Option>\r                  <Option value=\"YYYY-MM-DD\">YYYY-MM-DD</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Para Birimi\" name={['general', 'currency']}>\r                <Select aria-label=\"select field\">\r                  <Option value=\"TRY\">TRY (₺)</Option>\r                  <Option value=\"USD\">USD ($)</Option>\r                  <Option value=\"EUR\">EUR (€)</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r          </Row>\r          <Divider />\r          <Form.Item label=\"Bakım Modu\" name={['general', 'maintenanceMode']} valuePropName=\"checked\">\r            <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r          </Form.Item>\r          <Form.Item label=\"Bakım Mesajı\" name={['general', 'maintenanceMessage']}>\r            <TextArea rows={4} />\r          </Form.Item>\r        </Card>\r      ),\r    },\r    {\r      key: 'security',\r      label: (\r        <span>\r          <SecurityScanOutlined />\r          Güvenlik\r        </span>\r      ),\r      children: (\r        <Card title=\"Güvenlik Ayarları\" className=\"settings-card\">\r          <Title level={5}>Şifre Politikaları</Title>\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item label=\"Minimum Şifre Uzunluğu\" name={['security', 'passwordMinLength']}>\r                <InputNumber min={6} max={32} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Şifre Geçerlilik Süresi (Gün)\" name={['security', 'passwordExpiryDays']}>\r                <InputNumber min={0} max={365} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Maksimum Giriş Denemesi\" name={['security', 'maxLoginAttempts']}>\r                <InputNumber min={3} max={10} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Space direction=\"vertical\" style={{ width: '100%' }}>\r            <Form.Item name={['security', 'passwordRequireUppercase']} valuePropName=\"checked\">\r              <Checkbox>Büyük harf zorunlu</Checkbox>\r            </Form.Item>\r            <Form.Item name={['security', 'passwordRequireLowercase']} valuePropName=\"checked\">\r              <Checkbox>Küçük harf zorunlu</Checkbox>\r            </Form.Item>\r            <Form.Item name={['security', 'passwordRequireNumbers']} valuePropName=\"checked\">\r              <Checkbox>Rakam zorunlu</Checkbox>\r            </Form.Item>\r            <Form.Item name={['security', 'passwordRequireSpecialChars']} valuePropName=\"checked\">\r              <Checkbox>Özel karakter zorunlu</Checkbox>\r            </Form.Item>\r          </Space>\r          <Divider />\r          <Title level={5}>Güvenlik Özellikleri</Title>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"İki Faktörlü Doğrulama\" name={['security', 'twoFactorAuth']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Oturum Zaman Aşımı (Dakika)\" name={['security', 'sessionTimeout']}>\r                <InputNumber min={5} max={1440} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item label=\"CAPTCHA\" name={['security', 'enableCaptcha']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"SSL\" name={['security', 'enableSSL']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"CSRF Koruması\" name={['security', 'enableCSRF']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r          </Row>\r        </Card>\r      ),\r    },\r    {\r      key: 'email',\r      label: (\r        <span>\r          <MailOutlined />\r          Email\r        </span>\r      ),\r      children: (\r        <Card title=\"Email Ayarları\" className=\"settings-card\">\r          <Row gutter={16}>\r            <Col span={16}>\r              <Form.Item label=\"SMTP Sunucu\" name={['email', 'smtpHost']} rules={[{ required: true }]}>\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Port\" name={['email', 'smtpPort']} rules={[{ required: true }]}>\r                <InputNumber min={1} max={65535} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Kullanıcı Adı\" name={['email', 'smtpUsername']}>\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Şifre\" name={['email', 'smtpPassword']}>\r                <Input.Password / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item label=\"Şifreleme\" name={['email', 'smtpEncryption']}>\r            <Radio.Group>\r              <Radio value=\"none\">Yok</Radio>\r              <Radio value=\"tls\">TLS</Radio>\r              <Radio value=\"ssl\">SSL</Radio>\r            </Radio.Group>\r          </Form.Item>\r          <Divider />\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Gönderen Adı\" name={['email', 'fromName']}>\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Gönderen Email\" name={['email', 'fromEmail']} rules={[{ type: 'email' }]}>\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item label=\"Email İmzası\" name={['email', 'emailSignature']}>\r            <TextArea rows={4} />\r          </Form.Item>\r          <Space>\r            <Button \r              icon={<ThunderboltOutlined />}\r              onClick={() = aria-label=\"thunderbolt outlined\"> handleTestConnection('Email')}\r              loading={testingConnection}\r            >\r              Bağlantıyı Test Et\r            </Button>\r          </Space>\r        </Card>\r      ),\r    },\r    {\r      key: 'database',\r      label: (\r        <span>\r          <DatabaseOutlined />\r          Veritabanı\r        </span>\r      ),\r      children: (\r        <Card title=\"Veritabanı Ayarları\" className=\"settings-card\">\r          <Form.Item \r            label=\"Bağlantı Dizesi\" \r            name={['database', 'connectionString']}\r            rules={[{ required: true }]}\r          >\r            <Input.Password placeholder=\"Server=localhost;Database=stocker;...\" / aria-label=\"input field\">\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item label=\"Maksimum Bağlantı\" name={['database', 'maxConnections']}>\r                <InputNumber min={1} max={1000} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Bağlantı Timeout (sn)\" name={['database', 'connectionTimeout']}>\r                <InputNumber min={5} max={300} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Komut Timeout (sn)\" name={['database', 'commandTimeout']}>\r                <InputNumber min={5} max={300} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item label=\"Connection Pooling\" name={['database', 'enableConnectionPooling']} valuePropName=\"checked\">\r            <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Minimum Pool Size\" name={['database', 'minPoolSize']}>\r                <InputNumber min={1} max={100} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Maximum Pool Size\" name={['database', 'maxPoolSize']}>\r                <InputNumber min={1} max={500} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Divider />\r          <Title level={5}>Yedekleme</Title>\r          <Form.Item label=\"Yedekleme Zamanlaması (Cron)\" name={['database', 'backupSchedule']}>\r            <Input placeholder=\"0 2 * * * (Her gün saat 02:00)\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item label=\"Yedek Saklama Süresi (Gün)\" name={['database', 'retentionDays']}>\r            <InputNumber min={1} max={365} style={{ width: '100%' }} / aria-label=\"input field\">\r          </Form.Item>\r          <Space>\r            <Button \r              icon={<ThunderboltOutlined />}\r              onClick={() = aria-label=\"thunderbolt outlined\"> handleTestConnection('Database')}\r              loading={testingConnection}\r            >\r              Bağlantıyı Test Et\r            </Button>\r            <Button icon={<CloudDownloadOutlined />} aria-label=\"cloud download outlined\">\r              Manuel Yedek Al\r            </Button>\r          </Space>\r        </Card>\r      ),\r    },\r    {\r      key: 'storage',\r      label: (\r        <span>\r          <CloudServerOutlined />\r          Depolama\r        </span>\r      ),\r      children: (\r        <Card title=\"Depolama Ayarları\" className=\"settings-card\">\r          <Form.Item label=\"Depolama Sağlayıcı\" name={['storage', 'provider']}>\r            <Select aria-label=\"select field\">\r              <Option value=\"local\">Yerel Depolama</Option>\r              <Option value=\"aws\">Amazon S3</Option>\r              <Option value=\"azure\">Azure Blob Storage</Option>\r              <Option value=\"gcp\">Google Cloud Storage</Option>\r            </Select>\r          </Form.Item>\r          <Form.Item \r            noStyle\r            shouldUpdate={(prevValues, currentValues) => \r              prevValues?.storage?.provider !== currentValues?.storage?.provider\r            }\r          >\r            {({ getFieldValue }) => {\r              const provider = getFieldValue(['storage', 'provider']);\r              if (provider === 'local') {\r                return (\r                  <Form.Item label=\"Yerel Yol\" name={['storage', 'localPath']}>\r                    <Input / aria-label=\"input field\">\r                  </Form.Item>\r                );\r              }\r              if (provider === 'aws') {\r                return (\r                  <>\r                    <Row gutter={16}>\r                      <Col span={12}>\r                        <Form.Item label=\"S3 Bucket\" name={['storage', 'awsBucket']}>\r                          <Input / aria-label=\"input field\">\r                        </Form.Item>\r                      </Col>\r                      <Col span={12}>\r                        <Form.Item label=\"AWS Region\" name={['storage', 'awsRegion']}>\r                          <Input / aria-label=\"input field\">\r                        </Form.Item>\r                      </Col>\r                    </Row>\r                    <Row gutter={16}>\r                      <Col span={12}>\r                        <Form.Item label=\"Access Key\" name={['storage', 'awsAccessKey']}>\r                          <Input / aria-label=\"input field\">\r                        </Form.Item>\r                      </Col>\r                      <Col span={12}>\r                        <Form.Item label=\"Secret Key\" name={['storage', 'awsSecretKey']}>\r                          <Input.Password / aria-label=\"input field\">\r                        </Form.Item>\r                      </Col>\r                    </Row>\r                  </>\r                );\r              }\r              return null;\r            }}\r          </Form.Item>\r          <Divider />\r          <Form.Item label=\"Maksimum Dosya Boyutu (MB)\" name={['storage', 'maxFileSize']}>\r            <InputNumber \r              min={1} \r              max={100} \r              formatter={value = aria-label=\"input field\"> `${value} MB`}\r              parser={value => value?.replace(' MB', '') as any}\r              style={{ width: '100%' }} \r            />\r          </Form.Item>\r          <Form.Item label=\"İzin Verilen Dosya Türleri\" name={['storage', 'allowedFileTypes']}>\r            <Select mode=\"tags\" placeholder=\"jpg, png, pdf...\" aria-label=\"select field\">\r              <Option value=\"jpg\">jpg</Option>\r              <Option value=\"png\">png</Option>\r              <Option value=\"pdf\">pdf</Option>\r              <Option value=\"doc\">doc</Option>\r              <Option value=\"docx\">docx</Option>\r            </Select>\r          </Form.Item>\r        </Card>\r      ),\r    },\r    {\r      key: 'api',\r      label: (\r        <span>\r          <ApiOutlined />\r          API\r        </span>\r      ),\r      children: (\r        <Card title=\"API Ayarları\" className=\"settings-card\">\r          <Form.Item label=\"API Durumu\" name={['api', 'enableApi']} valuePropName=\"checked\">\r            <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r          </Form.Item>\r          <Form.Item label=\"API Versiyonu\" name={['api', 'apiVersion']}>\r            <Input / aria-label=\"input field\">\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Rate Limit (İstek/Saat)\" name={['api', 'rateLimit']}>\r                <InputNumber min={10} max={10000} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Maksimum İstek Boyutu (MB)\" name={['api', 'maxRequestSize']}>\r                <InputNumber \r                  min={1} \r                  max={100}\r                  formatter={value = aria-label=\"input field\"> `${value} MB`}\r                  parser={value => value?.replace(' MB', '') as any}\r                  style={{ width: '100%' }} \r                />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item label=\"API Key\" name={['api', 'enableApiKey']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"OAuth\" name={['api', 'enableOAuth']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Swagger\" name={['api', 'enableSwagger']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item label=\"CORS Origins\" name={['api', 'corsOrigins']}>\r            <Select mode=\"tags\" placeholder=\"http://localhost:3000\" aria-label=\"select field\">\r              <Option value=\"http://localhost:3000\">http://localhost:3000</Option>\r              <Option value=\"https://stocker.com\">https://stocker.com</Option>\r            </Select>\r          </Form.Item>\r        </Card>\r      ),\r    },\r    {\r      key: 'notifications',\r      label: (\r        <span>\r          <BellOutlined />\r          Bildirimler\r        </span>\r      ),\r      children: (\r        <Card title=\"Bildirim Ayarları\" className=\"settings-card\">\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Email Bildirimleri\" name={['notifications', 'enableEmailNotifications']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Push Bildirimleri\" name={['notifications', 'enablePushNotifications']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"SMS Bildirimleri\" name={['notifications', 'enableSmsNotifications']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Uygulama İçi Bildirimler\" name={['notifications', 'enableInAppNotifications']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Divider />\r          <Title level={5}>Entegrasyonlar</Title>\r          <Form.Item label=\"Slack Entegrasyonu\" name={['notifications', 'enableSlackIntegration']} valuePropName=\"checked\">\r            <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r          </Form.Item>\r          <Form.Item label=\"Slack Webhook URL\" name={['notifications', 'slackWebhookUrl']}>\r            <Input placeholder=\"https://hooks.slack.com/services/...\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item label=\"Webhook Endpoints\" name={['notifications', 'webhookEndpoints']}>\r            <Select mode=\"tags\" placeholder=\"Webhook URL ekle\" aria-label=\"select field\">\r              <Option value=\"https://api.example.com/webhook\">https://api.example.com/webhook</Option>\r            </Select>\r          </Form.Item>\r          <Form.Item label=\"Bildirim Saklama Süresi (Gün)\" name={['notifications', 'notificationRetention']}>\r            <InputNumber min={1} max={365} style={{ width: '100%' }} / aria-label=\"input field\">\r          </Form.Item>\r        </Card>\r      ),\r    },\r    {\r      key: 'performance',\r      label: (\r        <span>\r          <RocketOutlined />\r          Performans\r        </span>\r      ),\r      children: (\r        <Card title=\"Performans Ayarları\" className=\"settings-card\">\r          <Form.Item label=\"Önbellekleme\" name={['performance', 'enableCaching']} valuePropName=\"checked\">\r            <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Cache Sağlayıcı\" name={['performance', 'cacheProvider']}>\r                <Select aria-label=\"select field\">\r                  <Option value=\"memory\">Memory</Option>\r                  <Option value=\"redis\">Redis</Option>\r                  <Option value=\"memcached\">Memcached</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Cache Süresi (Saniye)\" name={['performance', 'cacheDuration']}>\r                <InputNumber min={60} max={86400} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item label=\"Redis Bağlantı\" name={['performance', 'redisConnectionString']}>\r            <Input placeholder=\"redis://localhost:6379\" / aria-label=\"input field\">\r          </Form.Item>\r          <Divider />\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item label=\"Sıkıştırma\" name={['performance', 'enableCompression']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Minification\" name={['performance', 'enableMinification']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Lazy Loading\" name={['performance', 'enableLazyLoading']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item label=\"CDN\" name={['performance', 'enableCDN']} valuePropName=\"checked\">\r            <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r          </Form.Item>\r          <Form.Item label=\"CDN URL\" name={['performance', 'cdnUrl']}>\r            <Input placeholder=\"https://cdn.stocker.com\" / aria-label=\"input field\">\r          </Form.Item>\r        </Card>\r      ),\r    },\r    {\r      key: 'logging',\r      label: (\r        <span>\r          <FileTextOutlined />\r          Loglama\r        </span>\r      ),\r      children: (\r        <Card title=\"Loglama Ayarları\" className=\"settings-card\">\r          <Form.Item label=\"Log Seviyesi\" name={['logging', 'logLevel']}>\r            <Select aria-label=\"select field\">\r              <Option value=\"debug\">Debug</Option>\r              <Option value=\"info\">Info</Option>\r              <Option value=\"warning\">Warning</Option>\r              <Option value=\"error\">Error</Option>\r              <Option value=\"critical\">Critical</Option>\r            </Select>\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={8}>\r              <Form.Item label=\"Dosya Loglama\" name={['logging', 'enableFileLogging']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Veritabanı Loglama\" name={['logging', 'enableDatabaseLogging']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r            <Col span={8}>\r              <Form.Item label=\"Konsol Loglama\" name={['logging', 'enableConsoleLogging']} valuePropName=\"checked\">\r                <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item label=\"Log Dosya Yolu\" name={['logging', 'logFilePath']}>\r            <Input placeholder=\"/var/log/stocker\" / aria-label=\"input field\">\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Max Log Dosya Boyutu (MB)\" name={['logging', 'maxLogFileSize']}>\r                <InputNumber \r                  min={1} \r                  max={1000}\r                  formatter={value = aria-label=\"input field\"> `${value} MB`}\r                  parser={value => value?.replace(' MB', '') as any}\r                  style={{ width: '100%' }} \r                />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Log Saklama Süresi (Gün)\" name={['logging', 'logRetentionDays']}>\r                <InputNumber min={1} max={365} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Divider />\r          <Title level={5}>External Logging</Title>\r          <Form.Item label=\"Sentry\" name={['logging', 'enableSentryLogging']} valuePropName=\"checked\">\r            <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r          </Form.Item>\r          <Form.Item label=\"Sentry DSN\" name={['logging', 'sentryDsn']}>\r            <Input placeholder=\"https://xxxx@sentry.io/xxxx\" / aria-label=\"input field\">\r          </Form.Item>\r        </Card>\r      ),\r    },\r    {\r      key: 'billing',\r      label: (\r        <span>\r          <DollarOutlined />\r          Faturalama\r        </span>\r      ),\r      children: (\r        <Card title=\"Faturalama Ayarları\" className=\"settings-card\">\r          <Form.Item label=\"Faturalama Sistemi\" name={['billing', 'enableBilling']} valuePropName=\"checked\">\r            <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Para Birimi\" name={['billing', 'currency']}>\r                <Select aria-label=\"select field\">\r                  <Option value=\"TRY\">TRY (₺)</Option>\r                  <Option value=\"USD\">USD ($)</Option>\r                  <Option value=\"EUR\">EUR (€)</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"KDV Oranı (%)\" name={['billing', 'taxRate']}>\r                <InputNumber min={0} max={100} style={{ width: '100%' }} / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item label=\"Ödeme Yöntemi\" name={['billing', 'paymentGateway']}>\r            <Select aria-label=\"select field\">\r              <Option value=\"stripe\">Stripe</Option>\r              <Option value=\"paypal\">PayPal</Option>\r              <Option value=\"square\">Square</Option>\r              <Option value=\"custom\">Özel</Option>\r            </Select>\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Stripe Public Key\" name={['billing', 'stripePublicKey']}>\r                <Input placeholder=\"pk_live_...\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Stripe Secret Key\" name={['billing', 'stripeSecretKey']}>\r                <Input.Password placeholder=\"sk_live_...\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Divider />\r          <Form.Item label=\"Tekrarlanan Ödemeler\" name={['billing', 'enableRecurringBilling']} valuePropName=\"checked\">\r            <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r          </Form.Item>\r          <Form.Item label=\"Deneme Süresi (Gün)\" name={['billing', 'trialPeriodDays']}>\r            <InputNumber min={0} max={90} style={{ width: '100%' }} / aria-label=\"input field\">\r          </Form.Item>\r        </Card>\r      ),\r    },\r  ];\r  return (\r    <div className=\"enhanced-system-settings\">\r      <div className=\"settings-header\">\r        <div className=\"header-content\">\r          <Title level={2}>\r            <SettingOutlined /> Sistem Ayarları\r          </Title>\r          <Text type=\"secondary\">\r            Sistem genelinde geçerli olan tüm ayarları buradan yapılandırabilirsiniz\r          </Text>\r        </div>\r        <Space>\r          <Button icon={<ImportOutlined />} onClick={() = aria-label=\"import outlined\"> document.getElementById('import-settings')?.click()}>\r            İçe Aktar\r          </Button>\r          <input\r            id=\"import-settings\"\r            type=\"file\"\r            accept=\".json\"\r            style={{ display: 'none' }}\r            onChange={(e) = aria-label=\"input field\"> e.target.files?.[0] && handleImportSettings(e.target.files[0])}\r          />\r          <Button icon={<ExportOutlined />} onClick={handleExportSettings} aria-label=\"export outlined\">\r            Dışa Aktar\r          </Button>\r          <Button icon={<ReloadOutlined />} onClick={handleResetSettings} aria-label=\"reload outlined\">\r            Sıfırla\r          </Button>\r          <Button \r            type=\"primary\" \r            icon={<SaveOutlined />}\r            onClick={() = aria-label=\"save outlined\"> form.validateFields().then(handleSave)}\r            loading={saving}\r          >\r            Kaydet\r          </Button>\r        </Space>\r      </div>\r      <Form\r        form={form}\r        layout=\"vertical\"\r        initialValues={config || undefined}\r        onFinish={handleSave}\r      >\r        <Tabs \r          activeKey={activeTab} \r          onChange={setActiveTab}\r          items={tabItems}\r        />\r      </Form>\r      <Card className=\"settings-footer\">\r        <Alert\r          message=\"Önemli Bilgi\"\r          description=\"Yapılan değişiklikler kaydedildikten sonra sistem genelinde geçerli olacaktır. Bazı ayarlar için sistemin yeniden başlatılması gerekebilir.\"\r          type=\"info\"\r          showIcon\r        />\r      </Card>\r    </div>\r  );\r};\rexport default EnhancedSystemSettings;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Settings/EnhancedSystemSettings.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Tabs,\r  Form,\r  Input,\r  Select,\r  Switch,\r  Button,\r  Row,\r  Col,\r  InputNumber,\r  TimePicker,\r  Space,\r  Typography,\r  Divider,\r  Alert,\r  Table,\r  Tag,\r  Modal,\r  message,\r  Spin,\r  Badge,\r  List,\r  Tooltip,\r  Upload,\r  Radio,\r  Checkbox,\r  Collapse,\r  Progress,\r  Statistic,\r  notification,\r} from 'antd';\rimport {\r  SettingOutlined,\r  MailOutlined,\r  SafetyOutlined,\r  DatabaseOutlined,\r  ToolOutlined,\r  BellOutlined,\r  SaveOutlined,\r  ReloadOutlined,\r  CloudUploadOutlined,\r  InfoCircleOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  GlobalOutlined,\r  ClockCircleOutlined,\r  LockOutlined,\r  KeyOutlined,\r  UserOutlined,\r  ApiOutlined,\r  FileProtectOutlined,\r  WarningOutlined,\r  SendOutlined,\r  TestTubeOutlined,\r  DeleteOutlined,\r  ExportOutlined,\r  ImportOutlined,\r  ThunderboltOutlined,\r  CloudServerOutlined,\r  SecurityScanOutlined,\r  NotificationOutlined,\r  CalendarOutlined,\r  FieldTimeOutlined,\r} from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport dayjs from 'dayjs';\rimport {\r  settingsApi,\r  GeneralSettings,\r  EmailSettings,\r  SecuritySettings,\r  BackupSettings,\r  MaintenanceSettings,\r  NotificationSettings,\r} from '@/shared/api/settings.api';\rimport '../../styles/master-layout.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Panel } = Collapse;\rconst { TextArea } = Input;\rconst { Option } = Select;\rexport const MasterSettingsPage: React.FC = () => {\r  const [activeTab, setActiveTab] = useState('general');\r  const [loading, setLoading] = useState(false);\r  const [saving, setSaving] = useState(false);\r  const [settings, setSettings] = useState<any>({});\r  const [generalForm] = Form.useForm();\r  const [emailForm] = Form.useForm();\r  const [securityForm] = Form.useForm();\r  const [backupForm] = Form.useForm();\r  const [maintenanceForm] = Form.useForm();\r  const [notificationForm] = Form.useForm();\r  useEffect(() => {\r    fetchSettings();\r  }, []);\r  const fetchSettings = async () => {\r    setLoading(true);\r    try {\r      const response = await settingsApi.getAll();\r      if (response.data?.success && response.data?.data) {\r        const settings = response.data.data;\r        setSettings(settings);\r        // Set form values\r        generalForm.setFieldsValue(settings.general);\r        emailForm.setFieldsValue(settings.email);\r        securityForm.setFieldsValue(settings.security);\r        backupForm.setFieldsValue({\r          ...settings.backup,\r          time: dayjs(settings.backup.time, 'HH:mm'),\r        });\r        maintenanceForm.setFieldsValue(settings.maintenance);\r        notificationForm.setFieldsValue(settings.notifications);\r      } else {\r        // Use mock data as fallback\r        const mockSettings = {\r        general: {\r          siteName: 'Stocker',\r          siteUrl: 'https://stoocker.app',\r          adminEmail: 'info@stoocker.app',\r          defaultLanguage: 'tr',\r          defaultTimezone: 'Europe/Istanbul',\r          dateFormat: 'DD/MM/YYYY',\r          timeFormat: 'HH:mm',\r          currency: 'TRY',\r          maxUploadSize: 10,\r          allowRegistration: true,\r          requireEmailVerification: true,\r          maintenanceMode: false,\r        },\r        email: {\r          provider: 'SMTP',\r          smtpHost: 'smtp.gmail.com',\r          smtpPort: 587,\r          smtpUsername: 'info@stoocker.app',\r          smtpEncryption: 'TLS',\r          fromEmail: 'info@stoocker.app',\r          fromName: 'Stocker',\r          testMode: false,\r        },\r        security: {\r          enforcePasswordPolicy: true,\r          minPasswordLength: 8,\r          requireUppercase: true,\r          requireLowercase: true,\r          requireNumbers: true,\r          requireSpecialChars: true,\r          passwordExpiryDays: 90,\r          maxLoginAttempts: 5,\r          lockoutDuration: 30,\r          enableTwoFactor: true,\r          sessionTimeout: 60,\r          enableCaptcha: true,\r          allowedIpAddresses: [],\r          blockedIpAddresses: [],\r        },\r        backup: {\r          enabled: true,\r          frequency: 'daily',\r          time: '03:00',\r          retentionDays: 30,\r          backupLocation: '/backups',\r          includeDatabase: true,\r          includeFiles: true,\r          emailNotification: true,\r          notificationEmail: 'admin@stoocker.app',\r        },\r        maintenance: {\r          enabled: false,\r          message: 'Sistem bakım çalışması yapılmaktadır. Lütfen daha sonra tekrar deneyin.',\r          allowedIPs: ['127.0.0.1'],\r          showCountdown: true,\r        },\r        notifications: {\r          emailNotifications: true,\r          pushNotifications: false,\r          smsNotifications: false,\r          newUserNotification: true,\r          newTenantNotification: true,\r          errorNotification: true,\r          systemUpdateNotification: true,\r          reportNotification: true,\r          notificationEmails: ['admin@stoocker.app', 'info@stoocker.app'],\r        },\r      };\r        setSettings(mockSettings);\r        // Set form values\r        generalForm.setFieldsValue(mockSettings.general);\r        emailForm.setFieldsValue(mockSettings.email);\r        securityForm.setFieldsValue(mockSettings.security);\r        backupForm.setFieldsValue({\r          ...mockSettings.backup,\r          time: dayjs(mockSettings.backup.time, 'HH:mm'),\r        });\r        maintenanceForm.setFieldsValue(mockSettings.maintenance);\r        notificationForm.setFieldsValue(mockSettings.notifications);\r      }\r    } catch (error) {\r      message.error('Ayarlar yüklenirken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleGeneralSubmit = async (values: GeneralSettings) => {\r    setSaving(true);\r    try {\r      await settingsApi.updateGeneral(values);\r      message.success('Genel ayarlar güncellendi');\r    } catch (error) {\r      message.error('Ayarlar güncellenirken hata oluştu');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleEmailSubmit = async (values: EmailSettings) => {\r    setSaving(true);\r    try {\r      await settingsApi.updateEmail(values);\r      message.success('E-posta ayarları güncellendi');\r    } catch (error) {\r      message.error('Ayarlar güncellenirken hata oluştu');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleSecuritySubmit = async (values: SecuritySettings) => {\r    setSaving(true);\r    try {\r      await settingsApi.updateSecurity(values);\r      message.success('Güvenlik ayarları güncellendi');\r    } catch (error) {\r      message.error('Ayarlar güncellenirken hata oluştu');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleBackupSubmit = async (values: any) => {\r    setSaving(true);\r    try {\r      const backupSettings = {\r        ...values,\r        time: values.time.format('HH:mm'),\r      };\r      await settingsApi.updateBackup(backupSettings);\r      message.success('Yedekleme ayarları güncellendi');\r    } catch (error) {\r      message.error('Ayarlar güncellenirken hata oluştu');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleTestEmail = () => {\r    Modal.confirm({\r      title: 'E-posta Testi',\r      content: (\r        <Form layout=\"vertical\">\r          <Form.Item label=\"Alıcı E-posta\" name=\"to\" rules={[{ required: true, type: 'email' }]}>\r            <Input placeholder=\"test@example.com\" / aria-label=\"input field\">\r          </Form.Item>\r        </Form>\r      ),\r      onOk: async () => {\r        try {\r          // await settingsApi.testEmailSettings({ to: 'test@example.com', subject: 'Test', body: 'Test email' });\r          message.success('Test e-postası gönderildi');\r        } catch (error) {\r          message.error('E-posta gönderilemedi');\r        }\r      },\r    });\r  };\r  const handleBackupNow = async () => {\r    Modal.confirm({\r      title: 'Manuel Yedekleme',\r      content: 'Şimdi manuel yedekleme yapmak istediğinizden emin misiniz?',\r      onOk: async () => {\r        try {\r          await settingsApi.backupNow();\r          notification.success({\r            message: 'Yedekleme Başlatıldı',\r            description: 'Yedekleme işlemi arka planda başlatıldı. Tamamlandığında bildirim alacaksınız.',\r          });\r        } catch (error) {\r          message.error('Yedekleme başlatılamadı');\r        }\r      },\r    });\r  };\r  const handleClearCache = async () => {\r    Modal.confirm({\r      title: 'Önbellek Temizleme',\r      content: 'Tüm sistem önbelleğini temizlemek istediğinizden emin misiniz?',\r      onOk: async () => {\r        try {\r          await settingsApi.clearCache();\r          message.success('Önbellek temizlendi');\r        } catch (error) {\r          message.error('Önbellek temizlenemedi');\r        }\r      },\r    });\r  };\r  const tabItems = [\r    {\r      key: 'general',\r      label: (\r        <span>\r          <GlobalOutlined />\r          Genel\r        </span>\r      ),\r      children: (\r        <Card>\r          <Form\r            form={generalForm}\r            layout=\"vertical\"\r            onFinish={handleGeneralSubmit}\r          >\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"siteName\"\r                  label=\"Site Adı\"\r                  rules={[{ required: true }]}\r                >\r                  <Input placeholder=\"Stocker\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"siteUrl\"\r                  label=\"Site URL\"\r                  rules={[{ required: true, type: 'url' }]}\r                >\r                  <Input placeholder=\"https://example.com\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"adminEmail\"\r                  label=\"Admin E-posta\"\r                  rules={[{ required: true, type: 'email' }]}\r                >\r                  <Input placeholder=\"admin@example.com\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"defaultLanguage\"\r                  label=\"Varsayılan Dil\"\r                  rules={[{ required: true }]}\r                >\r                  <Select aria-label=\"select field\">\r                    <Option value=\"tr\">Türkçe</Option>\r                    <Option value=\"en\">English</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"defaultTimezone\"\r                  label=\"Saat Dilimi\"\r                  rules={[{ required: true }]}\r                >\r                  <Select showSearch aria-label=\"select field\">\r                    <Option value=\"Europe/Istanbul\">Europe/Istanbul</Option>\r                    <Option value=\"Europe/London\">Europe/London</Option>\r                    <Option value=\"America/New_York\">America/New_York</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"currency\"\r                  label=\"Para Birimi\"\r                  rules={[{ required: true }]}\r                >\r                  <Select aria-label=\"select field\">\r                    <Option value=\"TRY\">TRY (₺)</Option>\r                    <Option value=\"USD\">USD ($)</Option>\r                    <Option value=\"EUR\">EUR (€)</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"dateFormat\"\r                  label=\"Tarih Formatı\"\r                  rules={[{ required: true }]}\r                >\r                  <Select aria-label=\"select field\">\r                    <Option value=\"DD/MM/YYYY\">DD/MM/YYYY</Option>\r                    <Option value=\"MM/DD/YYYY\">MM/DD/YYYY</Option>\r                    <Option value=\"YYYY-MM-DD\">YYYY-MM-DD</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"maxUploadSize\"\r                  label=\"Max Dosya Boyutu (MB)\"\r                  rules={[{ required: true }]}\r                >\r                  <InputNumber min={1} max={100} style={{ width: '100%' }} / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={24}>\r                <Divider />\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"allowRegistration\"\r                  label=\"Kayıt İzni\"\r                  valuePropName=\"checked\"\r                >\r                  <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r                </Form.Item>\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"requireEmailVerification\"\r                  label=\"E-posta Doğrulama\"\r                  valuePropName=\"checked\"\r                >\r                  <Switch checkedChildren=\"Zorunlu\" unCheckedChildren=\"İsteğe Bağlı\" />\r                </Form.Item>\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"maintenanceMode\"\r                  label=\"Bakım Modu\"\r                  valuePropName=\"checked\"\r                >\r                  <Switch checkedChildren=\"Aktif\" unCheckedChildren=\"Pasif\" />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Form.Item>\r              <Space>\r                <Button type=\"primary\" htmlType=\"submit\" loading={saving} icon={<SaveOutlined />} aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r                <Button onClick={() => generalForm.resetFields()} icon={<ReloadOutlined />}>\r                  Sıfırla\r                </Button>\r              </Space>\r            </Form.Item>\r          </Form>\r        </Card>\r      ),\r    },\r    {\r      key: 'email',\r      label: (\r        <span>\r          <MailOutlined />\r          E-posta\r        </span>\r      ),\r      children: (\r        <Card>\r          <Form\r            form={emailForm}\r            layout=\"vertical\"\r            onFinish={handleEmailSubmit}\r          >\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"provider\"\r                  label=\"E-posta Sağlayıcı\"\r                  rules={[{ required: true }]}\r                >\r                  <Select aria-label=\"select field\">\r                    <Option value=\"SMTP\">SMTP</Option>\r                    <Option value=\"SendGrid\">SendGrid</Option>\r                    <Option value=\"AWS SES\">AWS SES</Option>\r                    <Option value=\"Mailgun\">Mailgun</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"smtpHost\"\r                  label=\"SMTP Sunucu\"\r                  rules={[{ required: true }]}\r                >\r                  <Input placeholder=\"smtp.gmail.com\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"smtpPort\"\r                  label=\"Port\"\r                  rules={[{ required: true }]}\r                >\r                  <InputNumber min={1} max={65535} style={{ width: '100%' }} / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"smtpEncryption\"\r                  label=\"Şifreleme\"\r                  rules={[{ required: true }]}\r                >\r                  <Select aria-label=\"select field\">\r                    <Option value=\"TLS\">TLS</Option>\r                    <Option value=\"SSL\">SSL</Option>\r                    <Option value=\"None\">Yok</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"smtpUsername\"\r                  label=\"Kullanıcı Adı\"\r                  rules={[{ required: true }]}\r                >\r                  <Input placeholder=\"username@gmail.com\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"smtpPassword\"\r                  label=\"Şifre\"\r                >\r                  <Input.Password placeholder=\"••••••••\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"fromEmail\"\r                  label=\"Gönderen E-posta\"\r                  rules={[{ required: true, type: 'email' }]}\r                >\r                  <Input placeholder=\"noreply@example.com\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"fromName\"\r                  label=\"Gönderen Adı\"\r                  rules={[{ required: true }]}\r                >\r                  <Input placeholder=\"Stocker\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"testMode\"\r                  label=\"Test Modu\"\r                  valuePropName=\"checked\"\r                >\r                  <Switch checkedChildren=\"Açık\" unCheckedChildren=\"Kapalı\" />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Form.Item>\r              <Space>\r                <Button type=\"primary\" htmlType=\"submit\" loading={saving} icon={<SaveOutlined />} aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r                <Button onClick={handleTestEmail} icon={<SendOutlined />} aria-label=\"send outlined\">\r                  Test E-postası Gönder\r                </Button>\r                <Button onClick={() => emailForm.resetFields()} icon={<ReloadOutlined />}>\r                  Sıfırla\r                </Button>\r              </Space>\r            </Form.Item>\r          </Form>\r        </Card>\r      ),\r    },\r    {\r      key: 'security',\r      label: (\r        <span>\r          <SafetyOutlined />\r          Güvenlik\r        </span>\r      ),\r      children: (\r        <Card>\r          <Form\r            form={securityForm}\r            layout=\"vertical\"\r            onFinish={handleSecuritySubmit}\r          >\r            <Collapse defaultActiveKey={['password', 'login', 'session']}>\r              <Panel header=\"Şifre Politikası\" key=\"password\">\r                <Row gutter={24}>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"enforcePasswordPolicy\"\r                      label=\"Şifre Politikası\"\r                      valuePropName=\"checked\"\r                    >\r                      <Switch checkedChildren=\"Zorunlu\" unCheckedChildren=\"İsteğe Bağlı\" />\r                    </Form.Item>\r                  </Col>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"minPasswordLength\"\r                      label=\"Minimum Şifre Uzunluğu\"\r                    >\r                      <InputNumber min={6} max={32} style={{ width: '100%' }} / aria-label=\"input field\">\r                    </Form.Item>\r                  </Col>\r                  <Col span={6}>\r                    <Form.Item\r                      name=\"requireUppercase\"\r                      valuePropName=\"checked\"\r                    >\r                      <Checkbox>Büyük Harf</Checkbox>\r                    </Form.Item>\r                  </Col>\r                  <Col span={6}>\r                    <Form.Item\r                      name=\"requireLowercase\"\r                      valuePropName=\"checked\"\r                    >\r                      <Checkbox>Küçük Harf</Checkbox>\r                    </Form.Item>\r                  </Col>\r                  <Col span={6}>\r                    <Form.Item\r                      name=\"requireNumbers\"\r                      valuePropName=\"checked\"\r                    >\r                      <Checkbox>Rakam</Checkbox>\r                    </Form.Item>\r                  </Col>\r                  <Col span={6}>\r                    <Form.Item\r                      name=\"requireSpecialChars\"\r                      valuePropName=\"checked\"\r                    >\r                      <Checkbox>Özel Karakter</Checkbox>\r                    </Form.Item>\r                  </Col>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"passwordExpiryDays\"\r                      label=\"Şifre Geçerlilik Süresi (Gün)\"\r                    >\r                      <InputNumber min={0} max={365} style={{ width: '100%' }} / aria-label=\"input field\">\r                    </Form.Item>\r                  </Col>\r                </Row>\r              </Panel>\r              <Panel header=\"Giriş Güvenliği\" key=\"login\">\r                <Row gutter={24}>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"maxLoginAttempts\"\r                      label=\"Max Giriş Denemesi\"\r                    >\r                      <InputNumber min={3} max={10} style={{ width: '100%' }} / aria-label=\"input field\">\r                    </Form.Item>\r                  </Col>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"lockoutDuration\"\r                      label=\"Kilitleme Süresi (Dakika)\"\r                    >\r                      <InputNumber min={5} max={60} style={{ width: '100%' }} / aria-label=\"input field\">\r                    </Form.Item>\r                  </Col>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"enableTwoFactor\"\r                      label=\"İki Faktörlü Doğrulama\"\r                      valuePropName=\"checked\"\r                    >\r                      <Switch checkedChildren=\"Zorunlu\" unCheckedChildren=\"İsteğe Bağlı\" />\r                    </Form.Item>\r                  </Col>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"enableCaptcha\"\r                      label=\"CAPTCHA\"\r                      valuePropName=\"checked\"\r                    >\r                      <Switch checkedChildren=\"Aktif\" unCheckedChildren=\"Pasif\" />\r                    </Form.Item>\r                  </Col>\r                </Row>\r              </Panel>\r              <Panel header=\"Oturum Yönetimi\" key=\"session\">\r                <Row gutter={24}>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"sessionTimeout\"\r                      label=\"Oturum Zaman Aşımı (Dakika)\"\r                    >\r                      <InputNumber min={15} max={480} style={{ width: '100%' }} / aria-label=\"input field\">\r                    </Form.Item>\r                  </Col>\r                </Row>\r              </Panel>\r              <Panel header=\"IP Kısıtlamaları\" key=\"ip\">\r                <Row gutter={24}>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"allowedIpAddresses\"\r                      label=\"İzin Verilen IP Adresleri\"\r                    >\r                      <Select\r                        mode=\"tags\"\r                        placeholder=\"IP adresi girin\"\r                        style={{ width: '100%' }}\r                      / aria-label=\"select field\">\r                    </Form.Item>\r                  </Col>\r                  <Col span={12}>\r                    <Form.Item\r                      name=\"blockedIpAddresses\"\r                      label=\"Engellenen IP Adresleri\"\r                    >\r                      <Select\r                        mode=\"tags\"\r                        placeholder=\"IP adresi girin\"\r                        style={{ width: '100%' }}\r                      / aria-label=\"select field\">\r                    </Form.Item>\r                  </Col>\r                </Row>\r              </Panel>\r            </Collapse>\r            <Form.Item style={{ marginTop: 24 }}>\r              <Space>\r                <Button type=\"primary\" htmlType=\"submit\" loading={saving} icon={<SaveOutlined />} aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r                <Button onClick={() => securityForm.resetFields()} icon={<ReloadOutlined />}>\r                  Sıfırla\r                </Button>\r              </Space>\r            </Form.Item>\r          </Form>\r        </Card>\r      ),\r    },\r    {\r      key: 'backup',\r      label: (\r        <span>\r          <DatabaseOutlined />\r          Yedekleme\r        </span>\r      ),\r      children: (\r        <Card>\r          <Form\r            form={backupForm}\r            layout=\"vertical\"\r            onFinish={handleBackupSubmit}\r          >\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"enabled\"\r                  label=\"Otomatik Yedekleme\"\r                  valuePropName=\"checked\"\r                >\r                  <Switch checkedChildren=\"Aktif\" unCheckedChildren=\"Pasif\" />\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"frequency\"\r                  label=\"Yedekleme Sıklığı\"\r                  rules={[{ required: true }]}\r                >\r                  <Select aria-label=\"select field\">\r                    <Option value=\"daily\">Günlük</Option>\r                    <Option value=\"weekly\">Haftalık</Option>\r                    <Option value=\"monthly\">Aylık</Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"time\"\r                  label=\"Yedekleme Saati\"\r                  rules={[{ required: true }]}\r                >\r                  <TimePicker format=\"HH:mm\" style={{ width: '100%' }} />\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"retentionDays\"\r                  label=\"Saklama Süresi (Gün)\"\r                  rules={[{ required: true }]}\r                >\r                  <InputNumber min={7} max={365} style={{ width: '100%' }} / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={24}>\r                <Form.Item\r                  name=\"backupLocation\"\r                  label=\"Yedekleme Konumu\"\r                  rules={[{ required: true }]}\r                >\r                  <Input placeholder=\"/backups\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"includeDatabase\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>Veritabanı</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"includeFiles\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>Dosyalar</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"emailNotification\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>E-posta Bildirimi</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={24}>\r                <Form.Item\r                  name=\"notificationEmail\"\r                  label=\"Bildirim E-postası\"\r                >\r                  <Input type=\"email\" placeholder=\"admin@example.com\" / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider />\r            <Alert\r              message=\"Son Yedekleme\"\r              description=\"23 Aralık 2024, 03:00 - Başarılı\"\r              type=\"success\"\r              showIcon\r              action={\r                <Button size=\"small\" onClick={handleBackupNow}>\r                  Şimdi Yedekle\r                </Button>\r              }\r            />\r            <Form.Item style={{ marginTop: 24 }}>\r              <Space>\r                <Button type=\"primary\" htmlType=\"submit\" loading={saving} icon={<SaveOutlined />} aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r                <Button onClick={handleBackupNow} icon={<CloudUploadOutlined />} aria-label=\"cloud upload outlined\">\r                  Manuel Yedekleme\r                </Button>\r                <Button onClick={() => backupForm.resetFields()} icon={<ReloadOutlined />}>\r                  Sıfırla\r                </Button>\r              </Space>\r            </Form.Item>\r          </Form>\r        </Card>\r      ),\r    },\r    {\r      key: 'maintenance',\r      label: (\r        <span>\r          <ToolOutlined />\r          Bakım\r        </span>\r      ),\r      children: (\r        <Card>\r          <Form\r            form={maintenanceForm}\r            layout=\"vertical\"\r            onFinish={(values) => message.success('Bakım ayarları güncellendi')}\r          >\r            <Row gutter={24}>\r              <Col span={12}>\r                <Form.Item\r                  name=\"enabled\"\r                  label=\"Bakım Modu\"\r                  valuePropName=\"checked\"\r                >\r                  <Switch \r                    checkedChildren=\"Aktif\" \r                    unCheckedChildren=\"Pasif\"\r                    onChange={(checked) => {\r                      if (checked) {\r                        Modal.confirm({\r                          title: 'Bakım Modunu Etkinleştir',\r                          content: 'Bakım modu etkinleştirildiğinde kullanıcılar sisteme erişemez. Devam etmek istiyor musunuz?',\r                          okText: 'Evet',\r                          cancelText: 'İptal',\r                          onCancel: () => {\r                            maintenanceForm.setFieldValue('enabled', false);\r                          },\r                        });\r                      }\r                    }}\r                  />\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"showCountdown\"\r                  label=\"Geri Sayım Göster\"\r                  valuePropName=\"checked\"\r                >\r                  <Switch checkedChildren=\"Evet\" unCheckedChildren=\"Hayır\" />\r                </Form.Item>\r              </Col>\r              <Col span={24}>\r                <Form.Item\r                  name=\"message\"\r                  label=\"Bakım Mesajı\"\r                >\r                  <TextArea\r                    rows={4}\r                    placeholder=\"Sistem bakım çalışması yapılmaktadır...\"\r                  />\r                </Form.Item>\r              </Col>\r              <Col span={24}>\r                <Form.Item\r                  name=\"allowedIPs\"\r                  label=\"İzin Verilen IP Adresleri (Bakım sırasında erişebilecek)\"\r                >\r                  <Select\r                    mode=\"tags\"\r                    placeholder=\"IP adresi girin\"\r                    style={{ width: '100%' }}\r                  / aria-label=\"select field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider />\r            <Card title=\"Sistem Araçları\" size=\"small\">\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <Button \r                  icon={<DeleteOutlined />} \r                  onClick={handleClearCache}\r                  block\r                 aria-label=\"delete outlined\">\r                  Önbelleği Temizle\r                </Button>\r                <Button \r                  icon={<ReloadOutlined />} \r                  onClick={() = aria-label=\"reload outlined\"> message.info('Servisler yeniden başlatılıyor...')}\r                  block\r                >\r                  Servisleri Yeniden Başlat\r                </Button>\r                <Button \r                  icon={<ExportOutlined />} \r                  onClick={() = aria-label=\"export outlined\"> message.info('Sistem logları indiriliyor...')}\r                  block\r                >\r                  Logları İndir\r                </Button>\r              </Space>\r            </Card>\r            <Form.Item style={{ marginTop: 24 }}>\r              <Space>\r                <Button type=\"primary\" htmlType=\"submit\" loading={saving} icon={<SaveOutlined />} aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r                <Button onClick={() => maintenanceForm.resetFields()} icon={<ReloadOutlined />}>\r                  Sıfırla\r                </Button>\r              </Space>\r            </Form.Item>\r          </Form>\r        </Card>\r      ),\r    },\r    {\r      key: 'notifications',\r      label: (\r        <span>\r          <BellOutlined />\r          Bildirimler\r        </span>\r      ),\r      children: (\r        <Card>\r          <Form\r            form={notificationForm}\r            layout=\"vertical\"\r            onFinish={(values) => message.success('Bildirim ayarları güncellendi')}\r          >\r            <Row gutter={24}>\r              <Col span={24}>\r                <Title level={5}>Bildirim Kanalları</Title>\r                <Divider />\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"emailNotifications\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>E-posta Bildirimleri</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"pushNotifications\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>Push Bildirimleri</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={8}>\r                <Form.Item\r                  name=\"smsNotifications\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>SMS Bildirimleri</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={24}>\r                <Title level={5}>Bildirim Türleri</Title>\r                <Divider />\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"newUserNotification\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>Yeni Kullanıcı Kayıtları</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"newTenantNotification\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>Yeni Tenant Oluşturma</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"errorNotification\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>Sistem Hataları</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"systemUpdateNotification\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>Sistem Güncellemeleri</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={12}>\r                <Form.Item\r                  name=\"reportNotification\"\r                  valuePropName=\"checked\"\r                >\r                  <Checkbox>Raporlar</Checkbox>\r                </Form.Item>\r              </Col>\r              <Col span={24}>\r                <Form.Item\r                  name=\"notificationEmails\"\r                  label=\"Bildirim E-postaları\"\r                >\r                  <Select\r                    mode=\"tags\"\r                    placeholder=\"E-posta adresi girin\"\r                    style={{ width: '100%' }}\r                  / aria-label=\"select field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Form.Item style={{ marginTop: 24 }}>\r              <Space>\r                <Button type=\"primary\" htmlType=\"submit\" loading={saving} icon={<SaveOutlined />} aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r                <Button onClick={() => notificationForm.resetFields()} icon={<ReloadOutlined />}>\r                  Sıfırla\r                </Button>\r              </Space>\r            </Form.Item>\r          </Form>\r        </Card>\r      ),\r    },\r  ];\r  return (\r    <div className=\"master-settings-page\">\r      {/* Header */}\r      <div className=\"page-header glass-morphism\">\r        <motion.div\r          initial={{ opacity: 0, x: -20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-content\"\r        >\r          <Title level={2} className=\"gradient-text\">\r            <SettingOutlined /> Sistem Ayarları\r          </Title>\r          <Text type=\"secondary\">Sistem yapılandırması ve ayarları yönetin</Text>\r        </motion.div>\r        <motion.div\r          initial={{ opacity: 0, x: 20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-actions\"\r        >\r          <Space>\r            <Button icon={<ExportOutlined />} aria-label=\"export outlined\">\r              Ayarları Dışa Aktar\r            </Button>\r            <Button icon={<ImportOutlined />} aria-label=\"import outlined\">\r              Ayarları İçe Aktar\r            </Button>\r          </Space>\r        </motion.div>\r      </div>\r      {/* Content */}\r      <Card className=\"settings-card glass-morphism\">\r        <Spin spinning={loading}>\r          <Tabs\r            activeKey={activeTab}\r            onChange={setActiveTab}\r            items={tabItems}\r            type=\"card\"\r          />\r        </Spin>\r      </Card>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Settings/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Table,\r  Button,\r  Space,\r  Tag,\r  Modal,\r  Form,\r  Select,\r  DatePicker,\r  Switch,\r  message,\r  Dropdown,\r  Input,\r  Row,\r  Col,\r  Statistic,\r  Badge,\r  Typography,\r  Tooltip,\r  Drawer,\r  Descriptions,\r  Timeline,\r  Alert,\r} from 'antd';\rimport {\r  PlusOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  StopOutlined,\r  PlayCircleOutlined,\r  ReloadOutlined,\r  MoreOutlined,\r  CalendarOutlined,\r  DollarOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  ClockCircleOutlined,\r  ExclamationCircleOutlined,\r  DownloadOutlined,\r  FilterOutlined,\r  SearchOutlined,\r  ShoppingCartOutlined,\r} from '@ant-design/icons';\rimport type { ColumnsType } from 'antd/es/table';\rimport { subscriptionsApi, SubscriptionDto } from '@/shared/api/subscriptions.api';\rimport { masterApi } from '@/shared/api/master.api';\rimport dayjs from 'dayjs';\rconst { Title, Text } = Typography;\rconst { Option } = Select;\rconst { RangePicker } = DatePicker;\rconst { TextArea } = Input;\rexport const MasterSubscriptionsPage: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [subscriptions, setSubscriptions] = useState<SubscriptionDto[]>([]);\r  const [filteredSubscriptions, setFilteredSubscriptions] = useState<SubscriptionDto[]>([]);\r  const [modalVisible, setModalVisible] = useState(false);\r  const [editingSubscription, setEditingSubscription] = useState<SubscriptionDto | null>(null);\r  const [detailDrawerVisible, setDetailDrawerVisible] = useState(false);\r  const [selectedSubscription, setSelectedSubscription] = useState<SubscriptionDto | null>(null);\r  const [tenants, setTenants] = useState<any[]>([]);\r  const [packages, setPackages] = useState<any[]>([]);\r  const [form] = Form.useForm();\r  // Stats\r  const [stats, setStats] = useState({\r    total: 0,\r    active: 0,\r    trial: 0,\r    suspended: 0,\r    revenue: 0,\r  });\r  // Filters\r  const [statusFilter, setStatusFilter] = useState<string>('all');\r  const [searchText, setSearchText] = useState('');\r  useEffect(() => {\r    fetchSubscriptions();\r    fetchTenants();\r    fetchPackages();\r  }, []);\r  useEffect(() => {\r    filterSubscriptions();\r    calculateStats();\r  }, [subscriptions, statusFilter, searchText]);\r  const fetchSubscriptions = async () => {\r    setLoading(true);\r    try {\r      const response = await subscriptionsApi.getAll();\r      if (response.data?.success) {\r        setSubscriptions(response.data.data || []);\r      }\r    } catch (error) {\r      message.error('Abonelikler yüklenemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const fetchTenants = async () => {\r    try {\r      const response = await masterApi.tenants.getAll();\r      if (response.data?.data) {\r        setTenants(response.data.data);\r      }\r    } catch (error) {\r    }\r  };\r  const fetchPackages = async () => {\r    try {\r      const response = await masterApi.packages.getAll();\r      if (response.data?.data) {\r        setPackages(response.data.data);\r      }\r    } catch (error) {\r    }\r  };\r  const filterSubscriptions = () => {\r    let filtered = [...subscriptions];\r    if (statusFilter !== 'all') {\r      filtered = filtered.filter(s => s.status === statusFilter);\r    }\r    if (searchText) {\r      filtered = filtered.filter(s =>\r        s.tenantName?.toLowerCase().includes(searchText.toLowerCase()) ||\r        s.packageName?.toLowerCase().includes(searchText.toLowerCase())\r      );\r    }\r    setFilteredSubscriptions(filtered);\r  };\r  const calculateStats = () => {\r    const active = subscriptions.filter(s => s.status === 'Active').length;\r    const trial = subscriptions.filter(s => s.status === 'Trial').length;\r    const suspended = subscriptions.filter(s => s.status === 'Suspended').length;\r    const revenue = subscriptions\r      .filter(s => s.status === 'Active')\r      .reduce((sum, s) => sum + (s.price?.amount || 0), 0);\r    setStats({\r      total: subscriptions.length,\r      active,\r      trial,\r      suspended,\r      revenue,\r    });\r  };\r  const handleCreate = () => {\r    form.resetFields();\r    setEditingSubscription(null);\r    setModalVisible(true);\r  };\r  const handleEdit = (record: SubscriptionDto) => {\r    setEditingSubscription(record);\r    form.setFieldsValue({\r      tenantId: record.tenantId,\r      packageId: record.packageId,\r      startDate: dayjs(record.startDate),\r      endDate: dayjs(record.endDate),\r      autoRenew: record.autoRenew,\r    });\r    setModalVisible(true);\r  };\r  const handleSubmit = async (values: any) => {\r    try {\r      const data = {\r        ...values,\r        startDate: values.startDate?.format('YYYY-MM-DD'),\r        endDate: values.endDate?.format('YYYY-MM-DD'),\r      };\r      if (editingSubscription) {\r        await subscriptionsApi.update(editingSubscription.id, data);\r        message.success('Abonelik güncellendi');\r      } else {\r        await subscriptionsApi.create(data);\r        message.success('Abonelik oluşturuldu');\r      }\r      setModalVisible(false);\r      fetchSubscriptions();\r    } catch (error) {\r      message.error('İşlem başarısız');\r    }\r  };\r  const handleCancel = async (id: string) => {\r    Modal.confirm({\r      title: 'Aboneliği İptal Et',\r      content: 'Bu aboneliği iptal etmek istediğinizden emin misiniz?',\r      okText: 'İptal Et',\r      cancelText: 'Vazgeç',\r      onOk: async () => {\r        try {\r          await subscriptionsApi.cancel(id);\r          message.success('Abonelik iptal edildi');\r          fetchSubscriptions();\r        } catch (error) {\r          message.error('İptal işlemi başarısız');\r        }\r      },\r    });\r  };\r  const handleSuspend = async (id: string) => {\r    Modal.confirm({\r      title: 'Aboneliği Askıya Al',\r      content: (\r        <Form>\r          <Form.Item label=\"Askıya Alma Nedeni\">\r            <TextArea rows={3} placeholder=\"Neden belirtiniz...\" />\r          </Form.Item>\r        </Form>\r      ),\r      okText: 'Askıya Al',\r      cancelText: 'Vazgeç',\r      onOk: async () => {\r        try {\r          await subscriptionsApi.suspend(id, 'Manual suspension');\r          message.success('Abonelik askıya alındı');\r          fetchSubscriptions();\r        } catch (error) {\r          message.error('İşlem başarısız');\r        }\r      },\r    });\r  };\r  const handleActivate = async (id: string) => {\r    try {\r      await subscriptionsApi.activate(id);\r      message.success('Abonelik aktifleştirildi');\r      fetchSubscriptions();\r    } catch (error) {\r      message.error('Aktifleştirme başarısız');\r    }\r  };\r  const handleRenew = async (id: string) => {\r    Modal.confirm({\r      title: 'Aboneliği Yenile',\r      content: 'Bu aboneliği 1 ay daha yenilemek istiyor musunuz?',\r      okText: 'Yenile',\r      cancelText: 'Vazgeç',\r      onOk: async () => {\r        try {\r          await subscriptionsApi.renew(id, 1);\r          message.success('Abonelik yenilendi');\r          fetchSubscriptions();\r        } catch (error) {\r          message.error('Yenileme başarısız');\r        }\r      },\r    });\r  };\r  const showDetail = (record: SubscriptionDto) => {\r    setSelectedSubscription(record);\r    setDetailDrawerVisible(true);\r  };\r  const getStatusColor = (status: string) => {\r    const colors: Record<string, string> = {\r      Active: 'success',\r      Trial: 'processing',\r      Suspended: 'warning',\r      Cancelled: 'error',\r      Expired: 'default',\r    };\r    return colors[status] || 'default';\r  };\r  const getStatusIcon = (status: string) => {\r    const icons: Record<string, React.ReactNode> = {\r      Active: <CheckCircleOutlined />,\r      Trial: <ClockCircleOutlined />,\r      Suspended: <ExclamationCircleOutlined />,\r      Cancelled: <CloseCircleOutlined />,\r      Expired: <ClockCircleOutlined />,\r    };\r    return icons[status] || null;\r  };\r  const columns: ColumnsType<SubscriptionDto> = [\r    {\r      title: 'Tenant',\r      dataIndex: 'tenantName',\r      key: 'tenantName',\r      render: (text: string) => <Text strong>{text}</Text>,\r    },\r    {\r      title: 'Paket',\r      dataIndex: 'packageName',\r      key: 'packageName',\r      render: (text: string) => (\r        <Tag color=\"blue\">{text}</Tag>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status: string) => (\r        <Badge status={getStatusColor(status) as any} text={\r          <Space>\r            {getStatusIcon(status)}\r            <span>{status}</span>\r          </Space>\r        } />\r      ),\r    },\r    {\r      title: 'Fiyat',\r      key: 'price',\r      render: (_, record) => (\r        <Text strong style={{ color: '#52c41a' }}>\r          ₺{record.price?.amount || 0}\r        </Text>\r      ),\r    },\r    {\r      title: 'Başlangıç',\r      dataIndex: 'startDate',\r      key: 'startDate',\r      render: (date: string) => dayjs(date).format('DD.MM.YYYY'),\r    },\r    {\r      title: 'Bitiş',\r      dataIndex: 'endDate',\r      key: 'endDate',\r      render: (date: string) => {\r        const daysLeft = dayjs(date).diff(dayjs(), 'day');\r        const color = daysLeft < 7 ? 'red' : daysLeft < 30 ? 'orange' : 'green';\r        return (\r          <Tooltip title={`${daysLeft} gün kaldı`}>\r            <Text style={{ color }}>\r              {dayjs(date).format('DD.MM.YYYY')}\r            </Text>\r          </Tooltip>\r        );\r      },\r    },\r    {\r      title: 'Otomatik Yenileme',\r      dataIndex: 'autoRenew',\r      key: 'autoRenew',\r      render: (autoRenew: boolean) => (\r        <Switch checked={autoRenew} disabled size=\"small\" />\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      fixed: 'right',\r      width: 120,\r      render: (_, record) => (\r        <Dropdown\r          menu={{\r            items: [\r              {\r                key: 'view',\r                label: 'Detaylar',\r                icon: <CalendarOutlined />,\r                onClick: () => showDetail(record),\r              },\r              {\r                key: 'edit',\r                label: 'Düzenle',\r                icon: <EditOutlined />,\r                onClick: () => handleEdit(record),\r              },\r              { type: 'divider' },\r              ...(record.status === 'Active' ? [\r                {\r                  key: 'suspend',\r                  label: 'Askıya Al',\r                  icon: <StopOutlined />,\r                  onClick: () => handleSuspend(record.id),\r                },\r              ] : []),\r              ...(record.status === 'Suspended' ? [\r                {\r                  key: 'activate',\r                  label: 'Aktifleştir',\r                  icon: <PlayCircleOutlined />,\r                  onClick: () => handleActivate(record.id),\r                },\r              ] : []),\r              {\r                key: 'renew',\r                label: 'Yenile',\r                icon: <ReloadOutlined />,\r                onClick: () => handleRenew(record.id),\r              },\r              { type: 'divider' },\r              {\r                key: 'cancel',\r                label: 'İptal Et',\r                icon: <CloseCircleOutlined />,\r                danger: true,\r                onClick: () => handleCancel(record.id),\r              },\r            ],\r          }}\r          trigger={['click']}\r        >\r          <Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r        </Dropdown>\r      ),\r    },\r  ];\r  return (\r    <div className=\"master-subscriptions-page\">\r      {/* Stats Cards */}\r      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Toplam Abonelik\"\r              value={stats.total}\r              prefix={<ShoppingCartOutlined />}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Aktif\"\r              value={stats.active}\r              prefix={<CheckCircleOutlined />}\r              valueStyle={{ color: '#52c41a' }}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Deneme\"\r              value={stats.trial}\r              prefix={<ClockCircleOutlined />}\r              valueStyle={{ color: '#1890ff' }}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Aylık Gelir\"\r              value={stats.revenue}\r              prefix=\"₺\"\r              valueStyle={{ color: '#faad14' }}\r            />\r          </Card>\r        </Col>\r      </Row>\r      {/* Main Content */}\r      <Card\r        title=\"Abonelik Yönetimi\"\r        extra={\r          <Space>\r            <Select\r              value={statusFilter}\r              onChange={setStatusFilter}\r              style={{ width: 150 }}\r             aria-label=\"select field\">\r              <Option value=\"all\">Tüm Durumlar</Option>\r              <Option value=\"Active\">Aktif</Option>\r              <Option value=\"Trial\">Deneme</Option>\r              <Option value=\"Suspended\">Askıda</Option>\r              <Option value=\"Cancelled\">İptal</Option>\r            </Select>\r            <Input\r              placeholder=\"Ara...\"\r              prefix={<SearchOutlined / aria-label=\"input field\">}\r              value={searchText}\r              onChange={(e) => setSearchText(e.target.value)}\r              style={{ width: 200 }}\r            />\r            <Button icon={<ReloadOutlined />} onClick={fetchSubscriptions} aria-label=\"reload outlined\">\r              Yenile\r            </Button>\r            <Button type=\"primary\" icon={<PlusOutlined />} onClick={handleCreate} aria-label=\"plus outlined\">\r              Yeni Abonelik\r            </Button>\r          </Space>\r        }\r      >\r        <Table\r          columns={columns}\r          dataSource={filteredSubscriptions}\r          rowKey=\"id\"\r          loading={loading}\r          scroll={{ x: 1200 }}\r          pagination={{\r            showSizeChanger: true,\r            showTotal: (total) => `Toplam ${total} abonelik`,\r          }}\r        />\r      </Card>\r      {/* Create/Edit Modal */}\r      <Modal\r        title={editingSubscription ? 'Abonelik Düzenle' : 'Yeni Abonelik'}\r        open={modalVisible}\r        onCancel={() => setModalVisible(false)}\r        footer={null}\r        width={600}\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleSubmit}\r        >\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"tenantId\"\r                label=\"Tenant\"\r                rules={[{ required: true, message: 'Tenant seçiniz' }]}\r              >\r                <Select\r                  showSearch\r                  placeholder=\"Tenant seçiniz\"\r                  optionFilterProp=\"children\"\r                 aria-label=\"select field\">\r                  {tenants.map(t => (\r                    <Option key={t.id} value={t.id}>{t.name}</Option>\r                  ))}\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"packageId\"\r                label=\"Paket\"\r                rules={[{ required: true, message: 'Paket seçiniz' }]}\r              >\r                <Select placeholder=\"Paket seçiniz\" aria-label=\"select field\">\r                  {packages.map(p => (\r                    <Option key={p.id} value={p.id}>\r                      {p.name} - ₺{p.price}\r                    </Option>\r                  ))}\r                </Select>\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"startDate\"\r                label=\"Başlangıç Tarihi\"\r                rules={[{ required: true, message: 'Başlangıç tarihi seçiniz' }]}\r              >\r                <DatePicker style={{ width: '100%' }} />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"endDate\"\r                label=\"Bitiş Tarihi\"\r                rules={[{ required: true, message: 'Bitiş tarihi seçiniz' }]}\r              >\r                <DatePicker style={{ width: '100%' }} />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item\r            name=\"autoRenew\"\r            label=\"Otomatik Yenileme\"\r            valuePropName=\"checked\"\r          >\r            <Switch />\r          </Form.Item>\r          <Form.Item>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => setModalVisible(false)}>İptal</Button>\r              <Button type=\"primary\" htmlType=\"submit\">\r                {editingSubscription ? 'Güncelle' : 'Oluştur'}\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Detail Drawer */}\r      <Drawer\r        title=\"Abonelik Detayları\"\r        placement=\"right\"\r        width={600}\r        onClose={() => setDetailDrawerVisible(false)}\r        open={detailDrawerVisible}\r      >\r        {selectedSubscription && (\r          <>\r            <Descriptions bordered column={1} style={{ marginBottom: 24 }}>\r              <Descriptions.Item label=\"Tenant\">\r                {selectedSubscription.tenantName}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Paket\">\r                <Tag color=\"blue\">{selectedSubscription.packageName}</Tag>\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Durum\">\r                <Badge status={getStatusColor(selectedSubscription.status) as any} text={selectedSubscription.status} />\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Fiyat\">\r                ₺{selectedSubscription.price?.amount || 0}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Başlangıç\">\r                {dayjs(selectedSubscription.startDate).format('DD.MM.YYYY')}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Bitiş\">\r                {dayjs(selectedSubscription.endDate).format('DD.MM.YYYY')}\r              </Descriptions.Item>\r              <Descriptions.Item label=\"Otomatik Yenileme\">\r                <Switch checked={selectedSubscription.autoRenew} disabled />\r              </Descriptions.Item>\r            </Descriptions>\r            <Title level={5}>Özellikler</Title>\r            <Space wrap style={{ marginBottom: 24 }}>\r              {selectedSubscription.features?.map(feature => (\r                <Tag key={feature} icon={<CheckCircleOutlined />} color=\"success\">\r                  {feature}\r                </Tag>\r              ))}\r            </Space>\r            <Title level={5}>İşlem Geçmişi</Title>\r            <Timeline>\r              <Timeline.Item color=\"green\">\r                Abonelik oluşturuldu - {dayjs(selectedSubscription.createdAt).format('DD.MM.YYYY HH:mm')}\r              </Timeline.Item>\r              <Timeline.Item color=\"blue\">\r                Paket güncellendi - {dayjs().subtract(15, 'day').format('DD.MM.YYYY HH:mm')}\r              </Timeline.Item>\r              <Timeline.Item color=\"gray\">\r                Otomatik yenileme aktifleştirildi - {dayjs().subtract(30, 'day').format('DD.MM.YYYY HH:mm')}\r              </Timeline.Item>\r            </Timeline>\r          </>\r        )}\r      </Drawer>\r    </div>\r  );\r};\rexport default MasterSubscriptionsPage;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Subscriptions/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect, useMemo } from 'react';\rimport { useParams, useNavigate } from 'react-router-dom';\rimport {\r  Row,\r  Col,\r  Card,\r  Tabs,\r  Descriptions,\r  Table,\r  Tag,\r  Button,\r  Space,\r  Typography,\r  Timeline,\r  Avatar,\r  Badge,\r  Statistic,\r  Progress,\r  Switch,\r  Modal,\r  Form,\r  Input,\r  Select,\r  DatePicker,\r  message,\r  Tooltip,\r  Divider,\r  List,\r  Alert,\r  Dropdown,\r  Menu,\r  notification,\r  Breadcrumb,\r  Empty,\r  Drawer,\r  Skeleton,\r} from 'antd';\rimport {\r  ArrowLeftOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  LockOutlined,\r  UnlockOutlined,\r  UserOutlined,\r  TeamOutlined,\r  AppstoreOutlined,\r  DollarOutlined,\r  CalendarOutlined,\r  HistoryOutlined,\r  SettingOutlined,\r  CreditCardOutlined,\r  FileTextOutlined,\r  CloudServerOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  WarningOutlined,\r  InfoCircleOutlined,\r  RiseOutlined,\r  FallOutlined,\r  SyncOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  GlobalOutlined,\r  SafetyOutlined,\r  ExclamationCircleOutlined,\r  MoreOutlined,\r  DownloadOutlined,\r  PlusOutlined,\r  ReloadOutlined,\r  SendOutlined,\r  PrintOutlined,\r  ShareAltOutlined,\r  EyeOutlined,\r  BankOutlined,\r  ShoppingCartOutlined,\r  LineChartOutlined,\r  BarChartOutlined,\r  PieChartOutlined,\r  FundOutlined,\r  KeyOutlined,\r  BellOutlined,\r  MessageOutlined,\r  ClockCircleOutlined,\r  EnvironmentOutlined,\r  RocketOutlined,\r  FireOutlined,\r  ThunderboltOutlined,\r  SaveOutlined,\r  BarChartOutlined,\r} from '@ant-design/icons';\rimport { Area, Line, Column, Pie, Gauge, Liquid, DualAxes } from '@ant-design/charts';\rimport dayjs from 'dayjs';\rimport relativeTime from 'dayjs/plugin/relativeTime';\rimport { masterTenantApi } from '@/shared/api/master.api';\rimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\rimport './tenant-detail-enhanced.css';\rdayjs.extend(relativeTime);\rconst { Title, Text, Paragraph, Link } = Typography;\rconst { TabPane } = Tabs;\rconst { Option } = Select;\rconst { TextArea } = Input;\rconst { confirm } = Modal;\rinterface TenantDetailData {\r  id: string;\r  name: string;\r  code: string;\r  domain: string;\r  email: string;\r  phone: string;\r  address: string;\r  city: string;\r  country: string;\r  status: 'active' | 'suspended' | 'pending' | 'expired';\r  plan: string;\r  maxUsers: number;\r  currentUsers: number;\r  storage: {\r    used: number;\r    total: number;\r  };\r  createdAt: string;\r  expiresAt: string;\r  lastLogin: string;\r  modules: string[];\r  subscription: {\r    id: string;\r    plan: string;\r    price: number;\r    period: 'monthly' | 'yearly';\r    startDate: string;\r    endDate: string;\r    autoRenew: boolean;\r  };\r  billing: {\r    totalPaid: number;\r    outstandingBalance: number;\r    nextPayment: string;\r    paymentMethod: string;\r  };\r  usage: {\r    apiCalls: number;\r    bandwidth: number;\r    transactions: number;\r    emails: number;\r  };\r  admins: Array<{\r    id: string;\r    name: string;\r    email: string;\r    role: string;\r    lastLogin: string;\r  }>;\r}\rconst EnhancedTenantDetail: React.FC = () => {\r  const { id } = useParams<{ id: string }>();\r  const navigate = useNavigate();\r  const queryClient = useQueryClient();\r  const [activeTab, setActiveTab] = useState('overview');\r  const [editModalVisible, setEditModalVisible] = useState(false);\r  const [actionDrawerVisible, setActionDrawerVisible] = useState(false);\r  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\r  const [form] = Form.useForm();\r  // Fetch tenant data from API\r  const { data: apiTenant, isLoading: loading, error } = useQuery({\r    queryKey: ['tenant', id],\r    queryFn: () => masterTenantApi.getById(id!),\r    enabled: !!id,\r  });\r  // Fetch statistics\r  const { data: statistics } = useQuery({\r    queryKey: ['tenant-statistics', id],\r    queryFn: () => masterTenantApi.getStatistics(id!),\r    enabled: !!id,\r  });\r  // Map API data to component format\r  const tenant: TenantDetailData | null = useMemo(() => {\r    if (!apiTenant) return null;\r    return {\r      id: apiTenant.id,\r      name: apiTenant.name,\r      code: apiTenant.code,\r      domain: apiTenant.domain || '',\r      email: apiTenant.contactEmail || 'info@example.com',\r      phone: apiTenant.contactPhone || '',\r      address: apiTenant.address || '',\r      city: apiTenant.city || '',\r      country: apiTenant.country || 'Türkiye',\r      status: apiTenant.isActive ? 'active' : 'inactive',\r      plan: apiTenant.subscription?.packageName || 'Standart',\r      maxUsers: 100, // TODO: Get from package details\r      currentUsers: apiTenant.userCount || 0,\r      storage: {\r        used: statistics?.storageUsed || 0,\r        total: statistics?.storageTotal || 100,\r      },\r      createdAt: apiTenant.createdAt,\r      expiresAt: apiTenant.subscription?.endDate || new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),\r      lastLogin: apiTenant.updatedAt || apiTenant.createdAt,\r      modules: [], // TODO: Get from subscription modules\r      subscription: apiTenant.subscription ? {\r        id: apiTenant.subscription.id,\r        plan: apiTenant.subscription.packageName,\r        price: apiTenant.subscription.price,\r        period: 'monthly',\r        startDate: apiTenant.subscription.startDate,\r        endDate: apiTenant.subscription.endDate,\r        autoRenew: true,\r      } : {\r        id: 'N/A',\r        plan: 'No Subscription',\r        price: 0,\r        period: 'monthly',\r        startDate: apiTenant.createdAt,\r        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\r        autoRenew: false,\r      },\r      billing: {\r        totalPaid: 0,\r        outstandingBalance: 0,\r        nextPayment: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\r        paymentMethod: 'Kredi Kartı',\r      },\r      usage: {\r        apiCalls: statistics?.apiCallCount || 0,\r        bandwidth: statistics?.bandwidthUsed || 0,\r        transactions: statistics?.transactionCount || 0,\r        emails: statistics?.emailCount || 0,\r      },\r      admins: [],\r    };\r  }, [apiTenant, statistics]);\r  // Toggle status mutation\r  const toggleStatusMutation = useMutation({\r    mutationFn: () => masterTenantApi.toggleStatus(id!),\r    onSuccess: () => {\r      message.success('Kiracı durumu güncellendi');\r      queryClient.invalidateQueries({ queryKey: ['tenant', id] });\r    },\r    onError: () => {\r      message.error('Durum güncellenirken hata oluştu');\r    },\r  });\r  useEffect(() => {\r    if (error) {\r      message.error('Kiracı bilgileri yüklenemedi');\r      navigate('/master/tenants');\r    }\r  }, [error, navigate]);\r  const handleStatusChange = (checked: boolean) => {\r    confirm({\r      title: checked ? 'Kiracıyı Aktifleştir' : 'Kiracıyı Askıya Al',\r      icon: <ExclamationCircleOutlined />,\r      content: `Bu kiracıyı ${checked ? 'aktifleştirmek' : 'askıya almak'} istediğinize emin misiniz?`,\r      okText: 'Evet',\r      cancelText: 'İptal',\r      onOk() {\r        toggleStatusMutation.mutate();\r      },\r    });\r  };\r  const handleDelete = () => {\r    confirm({\r      title: 'Kiracıyı Sil',\r      icon: <ExclamationCircleOutlined />,\r      content: 'Bu işlem geri alınamaz. Tüm veriler silinecektir.',\r      okText: 'Sil',\r      okType: 'danger',\r      cancelText: 'İptal',\r      onOk() {\r        message.success('Kiracı silindi');\r        navigate('/master/tenants');\r      },\r    });\r  };\r  const getStatusColor = (status: string) => {\r    const colors = {\r      active: 'success',\r      suspended: 'warning',\r      pending: 'processing',\r      expired: 'error',\r    };\r    return colors[status as keyof typeof colors] || 'default';\r  };\r  const getStatusIcon = (status: string) => {\r    const icons = {\r      active: <CheckCircleOutlined />,\r      suspended: <WarningOutlined />,\r      pending: <SyncOutlined spin />,\r      expired: <CloseCircleOutlined />,\r    };\r    return icons[status as keyof typeof icons];\r  };\r  // Charts Configuration\r  const usageChartConfig = {\r    data: [\r      { date: '2024-01', value: 850000, type: 'API Calls' },\r      { date: '2024-01', value: 650, type: 'Bandwidth (GB)' },\r      { date: '2024-01', value: 35000, type: 'Transactions' },\r      { date: '2023-12', value: 920000, type: 'API Calls' },\r      { date: '2023-12', value: 720, type: 'Bandwidth (GB)' },\r      { date: '2023-12', value: 38000, type: 'Transactions' },\r      { date: '2023-11', value: 780000, type: 'API Calls' },\r      { date: '2023-11', value: 590, type: 'Bandwidth (GB)' },\r      { date: '2023-11', value: 32000, type: 'Transactions' },\r    ],\r    xField: 'date',\r    yField: 'value',\r    seriesField: 'type',\r    smooth: true,\r    animation: {\r      appear: {\r        animation: 'path-in',\r        duration: 1000,\r      },\r    },\r  };\r  const storageGaugeConfig = {\r    percent: tenant ? tenant.storage.used / tenant.storage.total : 0,\r    range: {\r      color: ['#30BF78', '#FAAD14', '#F4664A'],\r    },\r    indicator: {\r      pointer: {\r        style: {\r          stroke: '#D0D0D0',\r        },\r      },\r      pin: {\r        style: {\r          stroke: '#D0D0D0',\r        },\r      },\r    },\r    axis: {\r      label: {\r        formatter: (v: string) => {\r          return Number(v) * 100 + ' GB';\r        },\r      },\r    },\r    statistic: {\r      content: {\r        formatter: () => {\r          return tenant ? `${tenant.storage.used} / ${tenant.storage.total} GB` : '0 GB';\r        },\r        style: {\r          fontSize: '16px',\r        },\r      },\r    },\r  };\r  const actionMenu = (\r    <Menu>\r      <Menu.Item key=\"email\" icon={<MailOutlined />}>\r        Email Gönder\r      </Menu.Item>\r      <Menu.Item key=\"invoice\" icon={<FileTextOutlined />}>\r        Fatura Oluştur\r      </Menu.Item>\r      <Menu.Item key=\"backup\" icon={<CloudServerOutlined />}>\r        Yedek Al\r      </Menu.Item>\r      <Menu.Item key=\"reset\" icon={<KeyOutlined />}>\r        Şifre Sıfırla\r      </Menu.Item>\r      <Menu.Divider />\r      <Menu.Item key=\"export\" icon={<DownloadOutlined />}>\r        Verileri Dışa Aktar\r      </Menu.Item>\r      <Menu.Item key=\"audit\" icon={<FileTextOutlined />}>\r        Denetim Raporu\r      </Menu.Item>\r    </Menu>\r  );\r  if (loading) {\r    return (\r      <div className=\"tenant-detail-loading\">\r        <Card>\r          <Skeleton active paragraph={{ rows: 8 }} />\r        </Card>\r      </div>\r    );\r  }\r  if (!tenant) {\r    return (\r      <Card>\r        <Empty description=\"Kiracı bulunamadı\" />\r      </Card>\r    );\r  }\r  return (\r    <div className=\"enhanced-tenant-detail\">\r      {/* Header */}\r      <div className=\"detail-header\">\r        <div className=\"header-content\">\r          <Button \r            icon={<ArrowLeftOutlined />} \r            onClick={() = aria-label=\"arrow left outlined\"> navigate('/master/tenants')}\r            className=\"back-button\"\r          >\r            Geri\r          </Button>\r          <Breadcrumb>\r            <Breadcrumb.Item>Master</Breadcrumb.Item>\r            <Breadcrumb.Item>Kiracılar</Breadcrumb.Item>\r            <Breadcrumb.Item>{tenant.name}</Breadcrumb.Item>\r          </Breadcrumb>\r        </div>\r      </div>\r      {/* Tenant Header Card */}\r      <Card className=\"tenant-header-card\">\r        <Row gutter={[24, 24]} align=\"middle\">\r          <Col xs={24} sm={8} lg={6}>\r            <div className=\"tenant-avatar-section\">\r              <Avatar \r                size={120} \r                icon={<BankOutlined />}\r                className=\"tenant-avatar\"\r                style={{ \r                  background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r                }}\r              />\r              <div className=\"tenant-status-wrapper\">\r                <Badge \r                  status={getStatusColor(tenant.status) as any} \r                  text={\r                    <Tag \r                      color={getStatusColor(tenant.status)}\r                      icon={getStatusIcon(tenant.status)}\r                    >\r                      {tenant.status.toUpperCase()}\r                    </Tag>\r                  }\r                />\r              </div>\r            </div>\r          </Col>\r          <Col xs={24} sm={16} lg={12}>\r            <div className=\"tenant-info\">\r              <Title level={2}>{tenant.name}</Title>\r              <Space direction=\"vertical\" size=\"small\">\r                <Text type=\"secondary\">\r                  <GlobalOutlined /> {tenant.domain}\r                </Text>\r                <Text type=\"secondary\">\r                  <MailOutlined /> {tenant.email}\r                </Text>\r                <Text type=\"secondary\">\r                  <PhoneOutlined /> {tenant.phone}\r                </Text>\r                <Text type=\"secondary\">\r                  <EnvironmentOutlined /> {tenant.city}, {tenant.country}\r                </Text>\r              </Space>\r              <Divider />\r              <Space wrap>\r                <Tag color=\"blue\" icon={<AppstoreOutlined />}>\r                  {tenant.plan}\r                </Tag>\r                <Tag color=\"green\" icon={<TeamOutlined />}>\r                  {tenant.currentUsers}/{tenant.maxUsers} Kullanıcı\r                </Tag>\r                <Tag color=\"orange\" icon={<CalendarOutlined />}>\r                  {dayjs(tenant.expiresAt).format('DD/MM/YYYY')} tarihine kadar\r                </Tag>\r              </Space>\r            </div>\r          </Col>\r          <Col xs={24} lg={6}>\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <Button \r                type=\"primary\" \r                icon={<EditOutlined />}\r                block\r                onClick={() = aria-label=\"edit outlined\"> setEditModalVisible(true)}\r              >\r                Düzenle\r              </Button>\r              <Button \r                icon={<SettingOutlined />}\r                block\r                onClick={() = aria-label=\"setting outlined\"> setActionDrawerVisible(true)}\r              >\r                İşlemler\r              </Button>\r              <Dropdown overlay={actionMenu} trigger={['click']}>\r                <Button icon={<MoreOutlined />} block aria-label=\"more outlined\">\r                  Diğer\r                </Button>\r              </Dropdown>\r              <Divider />\r              <Space style={{ width: '100%', justifyContent: 'space-between' }}>\r                <Text>Durum</Text>\r                <Switch\r                  checked={tenant.status === 'active'}\r                  onChange={handleStatusChange}\r                  checkedChildren=\"Aktif\"\r                  unCheckedChildren=\"Pasif\"\r                />\r              </Space>\r            </Space>\r          </Col>\r        </Row>\r      </Card>\r      {/* Stats Cards */}\r      <Row gutter={[16, 16]} style={{ marginTop: 24 }}>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"stat-card\">\r            <Statistic\r              title=\"Toplam Ödeme\"\r              value={tenant.billing.totalPaid}\r              prefix=\"₺\"\r              valueStyle={{ color: '#52c41a' }}\r            />\r            <Progress percent={100} showInfo={false} strokeColor=\"#52c41a\" />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"stat-card\">\r            <Statistic\r              title=\"API Kullanımı\"\r              value={tenant.usage.apiCalls}\r              suffix=\"/ ay\"\r              valueStyle={{ color: '#1890ff' }}\r            />\r            <Progress percent={75} showInfo={false} strokeColor=\"#1890ff\" />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"stat-card\">\r            <Statistic\r              title=\"Depolama\"\r              value={tenant.storage.used}\r              suffix={`/ ${tenant.storage.total} GB`}\r              valueStyle={{ color: '#faad14' }}\r            />\r            <Progress \r              percent={(tenant.storage.used / tenant.storage.total) * 100} \r              showInfo={false} \r              strokeColor=\"#faad14\" \r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"stat-card\">\r            <Statistic\r              title=\"Aktif Modül\"\r              value={tenant.modules.length}\r              suffix=\"/ 10\"\r              valueStyle={{ color: '#722ed1' }}\r            />\r            <Progress \r              percent={(tenant.modules.length / 10) * 100} \r              showInfo={false} \r              strokeColor=\"#722ed1\" \r            />\r          </Card>\r        </Col>\r      </Row>\r      {/* Main Content Tabs */}\r      <Card style={{ marginTop: 24 }}>\r        <Tabs activeKey={activeTab} onChange={setActiveTab}>\r          <TabPane \r            tab={\r              <span>\r                <InfoCircleOutlined />\r                Genel Bilgiler\r              </span>\r            } \r            key=\"overview\"\r          >\r            <Row gutter={[24, 24]}>\r              <Col xs={24} lg={12}>\r                <Card title=\"Temel Bilgiler\" className=\"info-card\">\r                  <Descriptions column={1} bordered>\r                    <Descriptions.Item label=\"Şirket Kodu\">{tenant.code}</Descriptions.Item>\r                    <Descriptions.Item label=\"Domain\">{tenant.domain}</Descriptions.Item>\r                    <Descriptions.Item label=\"Kayıt Tarihi\">\r                      {dayjs(tenant.createdAt).format('DD/MM/YYYY HH:mm')}\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Son Giriş\">\r                      {dayjs(tenant.lastLogin).fromNow()}\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Adres\">\r                      {tenant.address}\r                    </Descriptions.Item>\r                  </Descriptions>\r                </Card>\r              </Col>\r              <Col xs={24} lg={12}>\r                <Card title=\"Abonelik Bilgileri\" className=\"info-card\">\r                  <Descriptions column={1} bordered>\r                    <Descriptions.Item label=\"Plan\">{tenant.subscription.plan}</Descriptions.Item>\r                    <Descriptions.Item label=\"Fiyat\">\r                      ₺{tenant.subscription.price} / {tenant.subscription.period === 'monthly' ? 'Ay' : 'Yıl'}\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Başlangıç\">\r                      {dayjs(tenant.subscription.startDate).format('DD/MM/YYYY')}\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Bitiş\">\r                      {dayjs(tenant.subscription.endDate).format('DD/MM/YYYY')}\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Otomatik Yenileme\">\r                      <Switch checked={tenant.subscription.autoRenew} disabled />\r                    </Descriptions.Item>\r                  </Descriptions>\r                </Card>\r              </Col>\r            </Row>\r            <Card title=\"Aktif Modüller\" style={{ marginTop: 24 }}>\r              <Space wrap size=\"large\">\r                {tenant.modules.map(module => (\r                  <Tag \r                    key={module}\r                    color=\"blue\"\r                    icon={<AppstoreOutlined />}\r                    style={{ padding: '8px 16px', fontSize: '14px' }}\r                  >\r                    {module}\r                  </Tag>\r                ))}\r              </Space>\r            </Card>\r          </TabPane>\r          <TabPane \r            tab={\r              <span>\r                <TeamOutlined />\r                Kullanıcılar\r              </span>\r            } \r            key=\"users\"\r          >\r            <Table\r              columns={[\r                {\r                  title: 'Ad Soyad',\r                  dataIndex: 'name',\r                  key: 'name',\r                  render: (text: string) => (\r                    <Space>\r                      <Avatar icon={<UserOutlined />} />\r                      {text}\r                    </Space>\r                  ),\r                },\r                {\r                  title: 'Email',\r                  dataIndex: 'email',\r                  key: 'email',\r                },\r                {\r                  title: 'Rol',\r                  dataIndex: 'role',\r                  key: 'role',\r                  render: (role: string) => (\r                    <Tag color={role === 'Süper Admin' ? 'red' : 'blue'}>{role}</Tag>\r                  ),\r                },\r                {\r                  title: 'Son Giriş',\r                  dataIndex: 'lastLogin',\r                  key: 'lastLogin',\r                  render: (date: string) => dayjs(date).fromNow(),\r                },\r                {\r                  title: 'İşlemler',\r                  key: 'actions',\r                  render: () => (\r                    <Space>\r                      <Button size=\"small\" icon={<EditOutlined />} / aria-label=\"edit outlined\">\r                      <Button size=\"small\" icon={<DeleteOutlined />} danger / aria-label=\"delete outlined\">\r                    </Space>\r                  ),\r                },\r              ]}\r              dataSource={tenant.admins}\r              rowKey=\"id\"\r            />\r          </TabPane>\r          <TabPane \r            tab={\r              <span>\r                <LineChartOutlined />\r                Kullanım\r              </span>\r            } \r            key=\"usage\"\r          >\r            <Row gutter={[24, 24]}>\r              <Col xs={24} lg={16}>\r                <Card title=\"Aylık Kullanım Trendleri\">\r                  <Line {...usageChartConfig} height={300} />\r                </Card>\r              </Col>\r              <Col xs={24} lg={8}>\r                <Card title=\"Depolama Kullanımı\">\r                  <Gauge {...storageGaugeConfig} height={200} />\r                </Card>\r                <Card title=\"Kullanım Özeti\" style={{ marginTop: 24 }}>\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <div className=\"usage-item\">\r                      <Text>API Çağrıları</Text>\r                      <Text strong>{tenant.usage.apiCalls.toLocaleString()}</Text>\r                    </div>\r                    <div className=\"usage-item\">\r                      <Text>Bant Genişliği</Text>\r                      <Text strong>{tenant.usage.bandwidth} GB</Text>\r                    </div>\r                    <div className=\"usage-item\">\r                      <Text>İşlemler</Text>\r                      <Text strong>{tenant.usage.transactions.toLocaleString()}</Text>\r                    </div>\r                    <div className=\"usage-item\">\r                      <Text>Email</Text>\r                      <Text strong>{tenant.usage.emails.toLocaleString()}</Text>\r                    </div>\r                  </Space>\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          <TabPane \r            tab={\r              <span>\r                <DollarOutlined />\r                Faturalama\r              </span>\r            } \r            key=\"billing\"\r          >\r            <Alert\r              message=\"Ödeme Durumu\"\r              description=\"Tüm ödemeler güncel. Bir sonraki ödeme tarihi: 15/02/2024\"\r              type=\"success\"\r              showIcon\r              style={{ marginBottom: 24 }}\r            />\r            <Card title=\"Ödeme Geçmişi\">\r              <Table\r                columns={[\r                  {\r                    title: 'Fatura No',\r                    dataIndex: 'invoiceNo',\r                    key: 'invoiceNo',\r                  },\r                  {\r                    title: 'Tarih',\r                    dataIndex: 'date',\r                    key: 'date',\r                  },\r                  {\r                    title: 'Tutar',\r                    dataIndex: 'amount',\r                    key: 'amount',\r                    render: (amount: number) => `₺${amount}`,\r                  },\r                  {\r                    title: 'Durum',\r                    dataIndex: 'status',\r                    key: 'status',\r                    render: (status: string) => (\r                      <Tag color={status === 'paid' ? 'success' : 'warning'}>\r                        {status === 'paid' ? 'Ödendi' : 'Bekliyor'}\r                      </Tag>\r                    ),\r                  },\r                  {\r                    title: 'İşlemler',\r                    key: 'actions',\r                    render: () => (\r                      <Space>\r                        <Button size=\"small\" icon={<EyeOutlined />} aria-label=\"eye outlined\">Görüntüle</Button>\r                        <Button size=\"small\" icon={<DownloadOutlined />} aria-label=\"download outlined\">İndir</Button>\r                      </Space>\r                    ),\r                  },\r                ]}\r                dataSource={[\r                  { invoiceNo: 'INV-2024-001', date: '15/01/2024', amount: 2999, status: 'paid' },\r                  { invoiceNo: 'INV-2023-012', date: '15/12/2023', amount: 2999, status: 'paid' },\r                  { invoiceNo: 'INV-2023-011', date: '15/11/2023', amount: 2999, status: 'paid' },\r                ]}\r                rowKey=\"invoiceNo\"\r              />\r            </Card>\r          </TabPane>\r          <TabPane \r            tab={\r              <span>\r                <HistoryOutlined />\r                Aktivite Geçmişi\r              </span>\r            } \r            key=\"activity\"\r          >\r            <Timeline mode=\"left\">\r              <Timeline.Item \r                color=\"green\" \r                label={dayjs().subtract(2, 'hours').format('DD/MM/YYYY HH:mm')}\r              >\r                Yeni kullanıcı eklendi: Mehmet Öz\r              </Timeline.Item>\r              <Timeline.Item \r                color=\"blue\" \r                label={dayjs().subtract(1, 'days').format('DD/MM/YYYY HH:mm')}\r              >\r                API limiti güncellendi: 2M → 3M\r              </Timeline.Item>\r              <Timeline.Item \r                color=\"orange\" \r                label={dayjs().subtract(3, 'days').format('DD/MM/YYYY HH:mm')}\r              >\r                Fatura ödendi: ₺2999\r              </Timeline.Item>\r              <Timeline.Item \r                color=\"red\" \r                label={dayjs().subtract(5, 'days').format('DD/MM/YYYY HH:mm')}\r              >\r                Şifre sıfırlama talebi\r              </Timeline.Item>\r              <Timeline.Item \r                label={dayjs().subtract(7, 'days').format('DD/MM/YYYY HH:mm')}\r              >\r                CRM modülü aktifleştirildi\r              </Timeline.Item>\r            </Timeline>\r          </TabPane>\r        </Tabs>\r      </Card>\r      {/* Edit Modal */}\r      <Modal\r        title=\"Kiracı Bilgilerini Düzenle\"\r        visible={editModalVisible}\r        onCancel={() => setEditModalVisible(false)}\r        footer={[\r          <Button key=\"cancel\" onClick={() => setEditModalVisible(false)}>\r            İptal\r          </Button>,\r          <Button key=\"save\" type=\"primary\" icon={<SaveOutlined />} aria-label=\"save outlined\">\r            Kaydet\r          </Button>,\r        ]}\r        width={700}\r      >\r        <Form form={form} layout=\"vertical\">\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Şirket Adı\" name=\"name\">\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Şirket Kodu\" name=\"code\">\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item label=\"Email\" name=\"email\">\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item label=\"Telefon\" name=\"phone\">\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item label=\"Adres\" name=\"address\">\r            <TextArea rows={3} />\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Action Drawer */}\r      <Drawer\r        title=\"Hızlı İşlemler\"\r        placement=\"right\"\r        onClose={() => setActionDrawerVisible(false)}\r        visible={actionDrawerVisible}\r        width={400}\r      >\r        <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\r          <Button type=\"primary\" icon={<MailOutlined />} block aria-label=\"mail outlined\">\r            Email Gönder\r          </Button>\r          <Button icon={<FileTextOutlined />} block aria-label=\"file text outlined\">\r            Fatura Oluştur\r          </Button>\r          <Button icon={<CloudServerOutlined />} block aria-label=\"cloud server outlined\">\r            Yedek Al\r          </Button>\r          <Button icon={<KeyOutlined />} block aria-label=\"key outlined\">\r            Şifre Sıfırla\r          </Button>\r          <Button icon={<BellOutlined />} block aria-label=\"bell outlined\">\r            Bildirim Gönder\r          </Button>\r          <Divider />\r          <Button danger icon={<DeleteOutlined />} block onClick={handleDelete} aria-label=\"delete outlined\">\r            Kiracıyı Sil\r          </Button>\r        </Space>\r      </Drawer>\r    </div>\r  );\r};\rexport default EnhancedTenantDetail;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/TenantDetail/EnhancedTenantDetail.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { useParams, useNavigate } from 'react-router-dom';\rimport {\r  Row,\r  Col,\r  Card,\r  Tabs,\r  Descriptions,\r  Table,\r  Tag,\r  Button,\r  Space,\r  Typography,\r  Timeline,\r  Avatar,\r  Badge,\r  Statistic,\r  Progress,\r  Switch,\r  Modal,\r  Form,\r  Input,\r  Select,\r  DatePicker,\r  message,\r  Tooltip,\r  Divider,\r  List,\r  Result,\r  Skeleton,\r  Alert,\r} from 'antd';\rimport {\r  ArrowLeftOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  LockOutlined,\r  UnlockOutlined,\r  UserOutlined,\r  TeamOutlined,\r  AppstoreOutlined,\r  DollarOutlined,\r  CalendarOutlined,\r  HistoryOutlined,\r  SettingOutlined,\r  CreditCardOutlined,\r  FileTextOutlined,\r  CloudServerOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  WarningOutlined,\r  InfoCircleOutlined,\r  RiseOutlined,\r  FallOutlined,\r  SyncOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  GlobalOutlined,\r  SafetyOutlined,\r} from '@ant-design/icons';\rimport { Area, Column, Pie } from '@ant-design/charts';\rimport { tenantsApi } from '@/shared/api/tenants.api';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst { Option } = Select;\rinterface TenantDetails {\r  id: string;\r  name: string;\r  code: string;\r  domain: string;\r  email: string;\r  phone: string;\r  status: 'active' | 'suspended' | 'pending';\r  plan: string;\r  maxUsers: number;\r  currentUsers: number;\r  storage: {\r    used: number;\r    total: number;\r  };\r  createdAt: Date;\r  expiresAt: Date;\r  lastLogin: Date;\r  modules: string[];\r  subscription: {\r    id: string;\r    plan: string;\r    price: number;\r    period: 'monthly' | 'yearly';\r    startDate: Date;\r    endDate: Date;\r    autoRenew: boolean;\r  };\r  billing: {\r    totalPaid: number;\r    totalDue: number;\r    lastPayment: Date;\r    nextPayment: Date;\r  };\r}\rconst TenantDetail: React.FC = () => {\r  const { id } = useParams<{ id: string }>();\r  const navigate = useNavigate();\r  const [loading, setLoading] = useState(true);\r  const [tenant, setTenant] = useState<TenantDetails | null>(null);\r  const [activeTab, setActiveTab] = useState('overview');\r  const [editModalVisible, setEditModalVisible] = useState(false);\r  const [form] = Form.useForm();\r  useEffect(() => {\r    if (id) {\r      fetchTenantDetails(id);\r    }\r  }, [id]);\r  const fetchTenantDetails = async (tenantId: string) => {\r    try {\r      setLoading(true);\r      const response = await tenantsApi.getById(tenantId);\r      if (response.data?.success && response.data?.data) {\r        // Mock additional data for demonstration\r        const tenantData = {\r          ...response.data.data,\r          storage: {\r            used: 3.2,\r            total: 10,\r          },\r          currentUsers: 15,\r          lastLogin: new Date(),\r          subscription: {\r            id: 'sub-1',\r            plan: response.data.data.plan || 'Professional',\r            price: 299,\r            period: 'monthly' as const,\r            startDate: new Date(response.data.data.createdAt),\r            endDate: new Date(response.data.data.expiresAt || Date.now() + 30 * 24 * 60 * 60 * 1000),\r            autoRenew: true,\r          },\r          billing: {\r            totalPaid: 2990,\r            totalDue: 0,\r            lastPayment: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),\r            nextPayment: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\r          },\r        };\r        setTenant(tenantData);\r        form.setFieldsValue(tenantData);\r      }\r    } catch (error) {\r      message.error('Tenant detayları yüklenemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleEdit = async (values: any) => {\r    try {\r      const response = await tenantsApi.update(id!, values);\r      if (response.data?.success) {\r        message.success('Tenant başarıyla güncellendi');\r        setEditModalVisible(false);\r        fetchTenantDetails(id!);\r      }\r    } catch (error) {\r      message.error('Tenant güncellenemedi');\r    }\r  };\r  const handleDelete = () => {\r    Modal.confirm({\r      title: 'Tenant Sil',\r      content: 'Bu tenant\\'ı silmek istediğinizden emin misiniz? Bu işlem geri alınamaz.',\r      okText: 'Sil',\r      okType: 'danger',\r      cancelText: 'İptal',\r      onOk: async () => {\r        try {\r          const response = await tenantsApi.delete(id!);\r          if (response.data?.success) {\r            message.success('Tenant başarıyla silindi');\r            navigate('/master/tenants');\r          }\r        } catch (error) {\r          message.error('Tenant silinemedi');\r        }\r      },\r    });\r  };\r  const handleToggleStatus = async () => {\r    try {\r      const response = await tenantsApi.toggleStatus(id!);\r      if (response.data?.success) {\r        message.success('Tenant durumu güncellendi');\r        fetchTenantDetails(id!);\r      }\r    } catch (error) {\r      message.error('Tenant durumu güncellenemedi');\r    }\r  };\r  if (loading) {\r    return (\r      <div className=\"tenant-detail-page\">\r        <Card>\r          <Skeleton active paragraph={{ rows: 8 }} />\r        </Card>\r      </div>\r    );\r  }\r  if (!tenant) {\r    return (\r      <div className=\"tenant-detail-page\">\r        <Result\r          status=\"404\"\r          title=\"Tenant Bulunamadı\"\r          subTitle=\"Aradığınız tenant mevcut değil veya silinmiş olabilir.\"\r          extra={\r            <Button type=\"primary\" onClick={() => navigate('/master/tenants')}>\r              Tenant Listesine Dön\r            </Button>\r          }\r        />\r      </div>\r    );\r  }\r  // Revenue chart data\r  const revenueData = [\r    { month: 'Oca', revenue: 299 },\r    { month: 'Şub', revenue: 299 },\r    { month: 'Mar', revenue: 299 },\r    { month: 'Nis', revenue: 299 },\r    { month: 'May', revenue: 299 },\r    { month: 'Haz', revenue: 299 },\r  ];\r  const revenueConfig = {\r    data: revenueData,\r    xField: 'month',\r    yField: 'revenue',\r    height: 200,\r    smooth: true,\r    color: '#667eea',\r  };\r  // User activity data\r  const userActivityData = [\r    { date: '01', users: 12 },\r    { date: '02', users: 15 },\r    { date: '03', users: 10 },\r    { date: '04', users: 18 },\r    { date: '05', users: 14 },\r    { date: '06', users: 16 },\r    { date: '07', users: 13 },\r  ];\r  const activityConfig = {\r    data: userActivityData,\r    xField: 'date',\r    yField: 'users',\r    height: 200,\r    columnStyle: {\r      radius: [8, 8, 0, 0],\r    },\r  };\r  // Module usage data\r  const moduleData = [\r    { type: 'CRM', value: 45 },\r    { type: 'Stok', value: 30 },\r    { type: 'Muhasebe', value: 20 },\r    { type: 'İK', value: 5 },\r  ];\r  const moduleConfig = {\r    data: moduleData,\r    angleField: 'value',\r    colorField: 'type',\r    radius: 0.8,\r    innerRadius: 0.6,\r    height: 200,\r  };\r  // User list columns\r  const userColumns = [\r    {\r      title: 'Kullanıcı',\r      dataIndex: 'name',\r      key: 'name',\r      render: (name: string, record: any) => (\r        <Space>\r          <Avatar icon={<UserOutlined />} />\r          <div>\r            <div>{name}</div>\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>{record.email}</Text>\r          </div>\r        </Space>\r      ),\r    },\r    {\r      title: 'Rol',\r      dataIndex: 'role',\r      key: 'role',\r      render: (role: string) => (\r        <Tag color={role === 'Admin' ? 'red' : 'blue'}>{role}</Tag>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      render: (status: string) => (\r        <Badge status={status === 'active' ? 'success' : 'default'} text={status === 'active' ? 'Aktif' : 'Pasif'} />\r      ),\r    },\r    {\r      title: 'Son Giriş',\r      dataIndex: 'lastLogin',\r      key: 'lastLogin',\r      render: (date: Date) => new Date(date).toLocaleDateString('tr-TR'),\r    },\r  ];\r  const mockUsers = [\r    { key: '1', name: 'John Doe', email: 'john@company.com', role: 'Admin', status: 'active', lastLogin: new Date() },\r    { key: '2', name: 'Jane Smith', email: 'jane@company.com', role: 'User', status: 'active', lastLogin: new Date() },\r    { key: '3', name: 'Bob Wilson', email: 'bob@company.com', role: 'User', status: 'inactive', lastLogin: new Date() },\r  ];\r  return (\r    <div className=\"tenant-detail-page\">\r      {/* Header */}\r      <Card className=\"header-card\">\r        <Row align=\"middle\" justify=\"space-between\">\r          <Col>\r            <Space align=\"center\" size=\"large\">\r              <Button\r                icon={<ArrowLeftOutlined />}\r                onClick={() = aria-label=\"arrow left outlined\"> navigate('/master/tenants')}\r              >\r                Geri\r              </Button>\r              <Avatar \r                size={64} \r                style={{ backgroundColor: '#667eea' }}\r                icon={<TeamOutlined />}\r              >\r                {tenant.name.substring(0, 2).toUpperCase()}\r              </Avatar>\r              <div>\r                <Title level={3} style={{ margin: 0 }}>{tenant.name}</Title>\r                <Space>\r                  <Tag color={tenant.status === 'active' ? 'success' : 'error'}>\r                    {tenant.status === 'active' ? 'Aktif' : 'Askıda'}\r                  </Tag>\r                  <Tag color=\"blue\">{tenant.plan}</Tag>\r                  <Text type=\"secondary\">Kod: {tenant.code}</Text>\r                </Space>\r              </div>\r            </Space>\r          </Col>\r          <Col>\r            <Space>\r              <Tooltip title={tenant.status === 'active' ? 'Askıya Al' : 'Aktifleştir'}>\r                <Button\r                  icon={tenant.status === 'active' ? <LockOutlined /> : <UnlockOutlined />}\r                  onClick={handleToggleStatus}\r                 aria-label=\"button\">\r                  {tenant.status === 'active' ? 'Askıya Al' : 'Aktifleştir'}\r                </Button>\r              </Tooltip>\r              <Button \r                type=\"primary\" \r                icon={<EditOutlined />}\r                onClick={() = aria-label=\"edit outlined\"> setEditModalVisible(true)}\r              >\r                Düzenle\r              </Button>\r              <Button \r                danger \r                icon={<DeleteOutlined />}\r                onClick={handleDelete}\r               aria-label=\"delete outlined\">\r                Sil\r              </Button>\r            </Space>\r          </Col>\r        </Row>\r      </Card>\r      {/* Stats Cards */}\r      <Row gutter={[16, 16]} style={{ marginTop: 16 }}>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Kullanıcılar\"\r              value={tenant.currentUsers}\r              suffix={`/ ${tenant.maxUsers}`}\r              prefix={<UserOutlined />}\r              valueStyle={{ color: '#667eea' }}\r            />\r            <Progress \r              percent={(tenant.currentUsers / tenant.maxUsers) * 100} \r              showInfo={false}\r              strokeColor=\"#667eea\"\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Depolama\"\r              value={tenant.storage.used}\r              suffix={`/ ${tenant.storage.total} GB`}\r              prefix={<DatabaseOutlined />}\r              valueStyle={{ color: '#52c41a' }}\r            />\r            <Progress \r              percent={(tenant.storage.used / tenant.storage.total) * 100} \r              showInfo={false}\r              strokeColor=\"#52c41a\"\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Aylık Ödeme\"\r              value={tenant.subscription.price}\r              prefix=\"₺\"\r              suffix=\"/ ay\"\r              valueStyle={{ color: '#faad14' }}\r            />\r            <Text type=\"secondary\">Sonraki: {tenant.billing.nextPayment.toLocaleDateString('tr-TR')}</Text>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Toplam Ödeme\"\r              value={tenant.billing.totalPaid}\r              prefix=\"₺\"\r              valueStyle={{ color: '#13c2c2' }}\r            />\r            <Text type=\"secondary\">Son: {tenant.billing.lastPayment.toLocaleDateString('tr-TR')}</Text>\r          </Card>\r        </Col>\r      </Row>\r      {/* Main Content */}\r      <Card style={{ marginTop: 16 }}>\r        <Tabs activeKey={activeTab} onChange={setActiveTab}>\r          <TabPane tab={<span><InfoCircleOutlined /> Genel Bilgiler</span>} key=\"overview\">\r            <Row gutter={[24, 24]}>\r              <Col xs={24} lg={12}>\r                <Card title=\"Tenant Bilgileri\" size=\"small\">\r                  <Descriptions column={1} size=\"small\">\r                    <Descriptions.Item label=\"Tenant Adı\">{tenant.name}</Descriptions.Item>\r                    <Descriptions.Item label=\"Tenant Kodu\">{tenant.code}</Descriptions.Item>\r                    <Descriptions.Item label=\"Domain\">\r                      <a href={`https://${tenant.domain}`} target=\"_blank\" rel=\"noopener noreferrer\">\r                        {tenant.domain} <GlobalOutlined />\r                      </a>\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"E-posta\">\r                      <Space>\r                        <MailOutlined />\r                        {tenant.email}\r                      </Space>\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Telefon\">\r                      <Space>\r                        <PhoneOutlined />\r                        {tenant.phone}\r                      </Space>\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Oluşturma Tarihi\">\r                      {new Date(tenant.createdAt).toLocaleDateString('tr-TR')}\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Son Giriş\">\r                      {new Date(tenant.lastLogin).toLocaleDateString('tr-TR')}\r                    </Descriptions.Item>\r                  </Descriptions>\r                </Card>\r              </Col>\r              <Col xs={24} lg={12}>\r                <Card title=\"Abonelik Bilgileri\" size=\"small\">\r                  <Descriptions column={1} size=\"small\">\r                    <Descriptions.Item label=\"Plan\">{tenant.subscription.plan}</Descriptions.Item>\r                    <Descriptions.Item label=\"Ücret\">\r                      ₺{tenant.subscription.price} / {tenant.subscription.period === 'monthly' ? 'Ay' : 'Yıl'}\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Başlangıç\">\r                      {tenant.subscription.startDate.toLocaleDateString('tr-TR')}\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Bitiş\">\r                      {tenant.subscription.endDate.toLocaleDateString('tr-TR')}\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Otomatik Yenileme\">\r                      <Switch checked={tenant.subscription.autoRenew} disabled />\r                    </Descriptions.Item>\r                    <Descriptions.Item label=\"Modüller\">\r                      {tenant.modules.map(module => (\r                        <Tag key={module} color=\"blue\">{module}</Tag>\r                      ))}\r                    </Descriptions.Item>\r                  </Descriptions>\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          <TabPane tab={<span><UserOutlined /> Kullanıcılar</span>} key=\"users\">\r            <Card \r              title={`Kullanıcılar (${tenant.currentUsers} / ${tenant.maxUsers})`}\r              extra={\r                <Button type=\"primary\" icon={<UserOutlined />} aria-label=\"user outlined\">\r                  Kullanıcı Ekle\r                </Button>\r              }\r            >\r              <Table\r                columns={userColumns}\r                dataSource={mockUsers}\r                pagination={{ pageSize: 10 }}\r              />\r            </Card>\r          </TabPane>\r          <TabPane tab={<span><BarChartOutlined /> Analitik</span>} key=\"analytics\">\r            <Row gutter={[16, 16]}>\r              <Col xs={24} lg={8}>\r                <Card title=\"Gelir Trendi\" size=\"small\">\r                  <Area {...revenueConfig} />\r                </Card>\r              </Col>\r              <Col xs={24} lg={8}>\r                <Card title=\"Kullanıcı Aktivitesi\" size=\"small\">\r                  <Column {...activityConfig} />\r                </Card>\r              </Col>\r              <Col xs={24} lg={8}>\r                <Card title=\"Modül Kullanımı\" size=\"small\">\r                  <Pie {...moduleConfig} />\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          <TabPane tab={<span><HistoryOutlined /> Aktivite Geçmişi</span>} key=\"activity\">\r            <Timeline mode=\"left\">\r              <Timeline.Item color=\"green\" label=\"Bugün\">\r                Admin girişi yapıldı\r              </Timeline.Item>\r              <Timeline.Item color=\"blue\" label=\"2 gün önce\">\r                Yeni kullanıcı eklendi: Jane Smith\r              </Timeline.Item>\r              <Timeline.Item label=\"5 gün önce\">\r                Abonelik yenilendi\r              </Timeline.Item>\r              <Timeline.Item color=\"red\" label=\"1 hafta önce\">\r                Ödeme başarısız\r              </Timeline.Item>\r              <Timeline.Item label=\"2 hafta önce\">\r                Plan güncellendi: Professional → Enterprise\r              </Timeline.Item>\r            </Timeline>\r          </TabPane>\r          <TabPane tab={<span><CreditCardOutlined /> Ödemeler</span>} key=\"payments\">\r            <Alert\r              message=\"Ödeme Durumu\"\r              description=\"Tüm ödemeler güncel. Sonraki ödeme tarihi: 5 gün sonra.\"\r              type=\"success\"\r              showIcon\r              style={{ marginBottom: 16 }}\r            />\r            <Table\r              columns={[\r                { title: 'Tarih', dataIndex: 'date', key: 'date' },\r                { title: 'Açıklama', dataIndex: 'description', key: 'description' },\r                { title: 'Tutar', dataIndex: 'amount', key: 'amount', render: (amount: number) => `₺${amount}` },\r                { \r                  title: 'Durum', \r                  dataIndex: 'status', \r                  key: 'status',\r                  render: (status: string) => (\r                    <Tag color={status === 'paid' ? 'success' : 'error'}>\r                      {status === 'paid' ? 'Ödendi' : 'Bekliyor'}\r                    </Tag>\r                  )\r                },\r              ]}\r              dataSource={[\r                { key: '1', date: '01.12.2024', description: 'Aylık abonelik', amount: 299, status: 'paid' },\r                { key: '2', date: '01.11.2024', description: 'Aylık abonelik', amount: 299, status: 'paid' },\r                { key: '3', date: '01.10.2024', description: 'Aylık abonelik', amount: 299, status: 'paid' },\r              ]}\r            />\r          </TabPane>\r          <TabPane tab={<span><SettingOutlined /> Ayarlar</span>} key=\"settings\">\r            <Row gutter={[16, 16]}>\r              <Col xs={24} lg={12}>\r                <Card title=\"Limit Ayarları\" size=\"small\">\r                  <Form layout=\"vertical\">\r                    <Form.Item label=\"Maksimum Kullanıcı\">\r                      <Input type=\"number\" value={tenant.maxUsers} / aria-label=\"input field\">\r                    </Form.Item>\r                    <Form.Item label=\"Maksimum Depolama (GB)\">\r                      <Input type=\"number\" value={tenant.storage.total} / aria-label=\"input field\">\r                    </Form.Item>\r                    <Form.Item label=\"API Rate Limit\">\r                      <Input value=\"1000 req/hour\" / aria-label=\"input field\">\r                    </Form.Item>\r                    <Form.Item>\r                      <Button type=\"primary\">Kaydet</Button>\r                    </Form.Item>\r                  </Form>\r                </Card>\r              </Col>\r              <Col xs={24} lg={12}>\r                <Card title=\"Güvenlik Ayarları\" size=\"small\">\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                      <Text>İki Faktörlü Doğrulama</Text>\r                      <Switch defaultChecked />\r                    </div>\r                    <Divider />\r                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                      <Text>IP Kısıtlaması</Text>\r                      <Switch />\r                    </div>\r                    <Divider />\r                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                      <Text>SSO Entegrasyonu</Text>\r                      <Switch />\r                    </div>\r                    <Divider />\r                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r                      <Text>API Erişimi</Text>\r                      <Switch defaultChecked />\r                    </div>\r                  </Space>\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r        </Tabs>\r      </Card>\r      {/* Edit Modal */}\r      <Modal\r        title=\"Tenant Düzenle\"\r        open={editModalVisible}\r        onCancel={() => setEditModalVisible(false)}\r        footer={null}\r        width={600}\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleEdit}\r        >\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"name\"\r                label=\"Tenant Adı\"\r                rules={[{ required: true, message: 'Tenant adı gerekli' }]}\r              >\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"code\"\r                label=\"Tenant Kodu\"\r                rules={[{ required: true, message: 'Tenant kodu gerekli' }]}\r              >\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"email\"\r                label=\"E-posta\"\r                rules={[\r                  { required: true, message: 'E-posta gerekli' },\r                  { type: 'email', message: 'Geçerli bir e-posta girin' }\r                ]}\r              >\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"phone\"\r                label=\"Telefon\"\r                rules={[{ required: true, message: 'Telefon gerekli' }]}\r              >\r                <Input / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"plan\"\r                label=\"Plan\"\r                rules={[{ required: true, message: 'Plan seçimi gerekli' }]}\r              >\r                <Select aria-label=\"select field\">\r                  <Option value=\"Free\">Free</Option>\r                  <Option value=\"Starter\">Starter</Option>\r                  <Option value=\"Professional\">Professional</Option>\r                  <Option value=\"Enterprise\">Enterprise</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"maxUsers\"\r                label=\"Maksimum Kullanıcı\"\r                rules={[{ required: true, message: 'Maksimum kullanıcı sayısı gerekli' }]}\r              >\r                <Input type=\"number\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item>\r            <Space>\r              <Button type=\"primary\" htmlType=\"submit\">\r                Güncelle\r              </Button>\r              <Button onClick={() => setEditModalVisible(false)}>\r                İptal\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r    </div>\r  );\r};\rexport default TenantDetail;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/TenantDetail/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect, useCallback, useMemo } from 'react';\rimport { useNavigate, useLocation } from 'react-router-dom';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport {\r  Row,\r  Col,\r  Card,\r  Table,\r  Button,\r  Space,\r  Tag,\r  Avatar,\r  Typography,\r  Input,\r  Select,\r  DatePicker,\r  Dropdown,\r  Modal,\r  Form,\r  Switch,\r  Badge,\r  Tooltip,\r  Divider,\r  Tabs,\r  Statistic,\r  Progress,\r  Timeline,\r  List,\r  message,\r  notification,\r  Drawer,\r  Segmented,\r  Empty,\r  Result,\r  Alert,\r  Popconfirm,\r  Upload,\r  Radio,\r  Checkbox,\r  InputNumber,\r  Skeleton,\r} from 'antd';\rimport { VirtualList } from '@/shared/components/VirtualList';\rimport { VirtualTable } from '@/shared/components/VirtualTable';\rimport {\r  TeamOutlined,\r  UserOutlined,\r  PlusOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  SearchOutlined,\r  FilterOutlined,\r  ExportOutlined,\r  ImportOutlined,\r  ReloadOutlined,\r  MoreOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  ClockCircleOutlined,\r  InfoCircleOutlined,\r  WarningOutlined,\r  LockOutlined,\r  UnlockOutlined,\r  LoginOutlined,\r  SettingOutlined,\r  EyeOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  GlobalOutlined,\r  CalendarOutlined,\r  DollarOutlined,\r  CrownOutlined,\r  FireOutlined,\r  RocketOutlined,\r  ThunderboltOutlined,\r  SafetyOutlined,\r  DatabaseOutlined,\r  CloudServerOutlined,\r  ApiOutlined,\r  AppstoreOutlined,\r  BarsOutlined,\r  CopyOutlined,\r  DownloadOutlined,\r  SyncOutlined,\r  StarOutlined,\r  HeartOutlined,\r  CommentOutlined,\r  ShareAltOutlined,\r  FolderOpenOutlined,\r  FileTextOutlined,\r  PaperClipOutlined,\r  BellOutlined,\r  QuestionCircleOutlined,\r} from '@ant-design/icons';\rimport { Line, Column, Pie, TinyLine, TinyColumn, Progress as TinyProgress } from '@ant-design/plots';\rimport CountUp from 'react-countup';\rimport '../../styles/master-inputs.css';\rimport '../../styles/master-layout.css';\rimport './tenants.css';\rimport { tenantsApi } from '@/shared/api/tenants.api';\rimport { Tenant as ApiTenant } from '@/shared/types';\rconst { Title, Text, Paragraph } = Typography;\rconst { Search } = Input;\rconst { RangePicker } = DatePicker;\rconst { TabPane } = Tabs;\rconst { Meta } = Card;\rconst { Option } = Select;\r// Types\rinterface Tenant {\r  id: string;\r  name: string;\r  domain: string;\r  email: string;\r  phone: string;\r  plan: 'Free' | 'Starter' | 'Professional' | 'Enterprise';\r  status: 'active' | 'suspended' | 'pending' | 'expired';\r  userCount: number;\r  maxUsers: number;\r  storageUsed: number;\r  maxStorage: number;\r  createdAt: string;\r  expiresAt: string;\r  lastLogin: string;\r  revenue: number;\r  growth: number;\r  modules: string[];\r  features: string[];\r  owner: {\r    name: string;\r    email: string;\r    avatar?: string;\r  };\r  performance: {\r    cpu: number;\r    memory: number;\r    requests: number;\r    errors: number;\r  };\r}\rinterface TenantCardProps {\r  tenant: Tenant;\r  onEdit: (tenant: Tenant) => void;\r  onDelete: (id: string) => void;\r  onToggleStatus: (id: string) => void;\r  onLoginAs: (tenant: Tenant) => void;\r  onViewDetails: (tenant: Tenant) => void;\r}\rexport const MasterTenantsPage: React.FC = () => {\r  const navigate = useNavigate();\r  const location = useLocation();\r  const [loading, setLoading] = useState(false);\r  const [viewMode, setViewMode] = useState<'grid' | 'table'>('table');\r  const [selectedTenants, setSelectedTenants] = useState<string[]>([]);\r  const [searchText, setSearchText] = useState('');\r  const [filterStatus, setFilterStatus] = useState<string>('all');\r  const [filterPlan, setFilterPlan] = useState<string>('all');\r  const [showCreateModal, setShowCreateModal] = useState(false);\r  const [showDetailsDrawer, setShowDetailsDrawer] = useState(false);\r  const [selectedTenant, setSelectedTenant] = useState<Tenant | null>(null);\r  const [form] = Form.useForm();\r  const [page, setPage] = useState(1);\r  const [pageSize, setPageSize] = useState(10);\r  const [totalCount, setTotalCount] = useState(0);\r  const [showBulkActions, setShowBulkActions] = useState(false);\r  const [bulkLoading, setBulkLoading] = useState(false);\r  // Mock data\r  const mockTenants: Tenant[] = [\r    {\r      id: '1',\r      name: 'TechCorp Solutions',\r      domain: 'techcorp.stoocker.app',\r      email: 'admin@techcorp.com',\r      phone: '+90 555 123 4567',\r      plan: 'Enterprise',\r      status: 'active',\r      userCount: 245,\r      maxUsers: 500,\r      storageUsed: 75,\r      maxStorage: 100,\r      createdAt: '2024-01-15',\r      expiresAt: '2025-01-15',\r      lastLogin: '2 saat önce',\r      revenue: 45000,\r      growth: 15,\r      modules: ['CRM', 'Sales', 'Finance', 'HR'],\r      features: ['API Access', 'Custom Domain', 'Priority Support'],\r      owner: {\r        name: 'John Doe',\r        email: 'john@techcorp.com',\r        avatar: undefined,\r      },\r      performance: {\r        cpu: 45,\r        memory: 68,\r        requests: 12450,\r        errors: 3,\r      },\r    },\r    {\r      id: '2',\r      name: 'Digital Dynamics',\r      domain: 'digital.stoocker.app',\r      email: 'info@digital.com',\r      phone: '+90 555 987 6543',\r      plan: 'Professional',\r      status: 'active',\r      userCount: 89,\r      maxUsers: 100,\r      storageUsed: 32,\r      maxStorage: 50,\r      createdAt: '2024-02-20',\r      expiresAt: '2025-02-20',\r      lastLogin: '1 gün önce',\r      revenue: 18500,\r      growth: -5,\r      modules: ['CRM', 'Sales'],\r      features: ['API Access'],\r      owner: {\r        name: 'Jane Smith',\r        email: 'jane@digital.com',\r      },\r      performance: {\r        cpu: 32,\r        memory: 45,\r        requests: 5670,\r        errors: 12,\r      },\r    },\r    {\r      id: '3',\r      name: 'StartupHub',\r      domain: 'startup.stoocker.app',\r      email: 'hello@startup.com',\r      phone: '+90 555 456 7890',\r      plan: 'Starter',\r      status: 'pending',\r      userCount: 12,\r      maxUsers: 25,\r      storageUsed: 8,\r      maxStorage: 10,\r      createdAt: '2024-03-10',\r      expiresAt: '2025-03-10',\r      lastLogin: '3 gün önce',\r      revenue: 4500,\r      growth: 22,\r      modules: ['CRM'],\r      features: [],\r      owner: {\r        name: 'Mike Johnson',\r        email: 'mike@startup.com',\r      },\r      performance: {\r        cpu: 15,\r        memory: 22,\r        requests: 890,\r        errors: 0,\r      },\r    },\r    {\r      id: '4',\r      name: 'CloudFirst Inc',\r      domain: 'cloudfirst.stoocker.app',\r      email: 'contact@cloudfirst.com',\r      phone: '+90 555 321 6547',\r      plan: 'Enterprise',\r      status: 'suspended',\r      userCount: 156,\r      maxUsers: 500,\r      storageUsed: 85,\r      maxStorage: 100,\r      createdAt: '2023-12-01',\r      expiresAt: '2024-12-01',\r      lastLogin: '1 hafta önce',\r      revenue: 38000,\r      growth: -12,\r      modules: ['CRM', 'Sales', 'Finance', 'HR', 'Production'],\r      features: ['API Access', 'Custom Domain', 'Priority Support', 'White Label'],\r      owner: {\r        name: 'Sarah Williams',\r        email: 'sarah@cloudfirst.com',\r      },\r      performance: {\r        cpu: 78,\r        memory: 82,\r        requests: 18900,\r        errors: 45,\r      },\r    },\r  ];\r  const [tenants, setTenants] = useState<Tenant[]>([]);\r  // Fetch tenants from API\r  useEffect(() => {\r    fetchTenants();\r  }, [page, pageSize]);\r  // Debounced search effect\r  useEffect(() => {\r    const timer = setTimeout(() => {\r      if (searchText !== '' || filterStatus !== 'all') {\r        fetchTenants();\r      }\r    }, 500);\r    return () => clearTimeout(timer);\r  }, [searchText, filterStatus]);\r  const fetchTenants = async () => {\r    setLoading(true);\r    try {\r      const response = await tenantsApi.getAll({\r        page,\r        pageSize,\r        search: searchText || undefined,\r        isActive: filterStatus === 'active' ? true : filterStatus === 'suspended' ? false : undefined\r      });\r      // Check if response has the expected structure\r      if (response.data && response.data.success && response.data.data) {\r        // Map API response to component format\r        const mappedTenants = response.data.data.map((t: any) => ({\r          id: t.id,\r          name: t.name,\r          domain: t.domain || `${t.code}.stoocker.app`,\r          email: t.contactEmail,\r          phone: 'N/A',\r          plan: ['Free', 'Starter', 'Professional', 'Enterprise'].includes(t.packageName) ? t.packageName : 'Free',\r          status: t.isActive ? 'active' : 'suspended',\r          userCount: t.userCount || 0,\r          maxUsers: 100, // Default max users\r          storageUsed: Math.floor(Math.random() * 50), // Mock storage\r          maxStorage: 100, // Default max storage\r          createdAt: t.createdDate ? new Date(t.createdDate).toLocaleDateString('tr-TR') : 'N/A',\r          expiresAt: t.subscriptionEndDate ? new Date(t.subscriptionEndDate).toLocaleDateString('tr-TR') : 'N/A',\r          lastLogin: 'Bilinmiyor',\r          revenue: Math.floor(Math.random() * 50000), // Mock revenue for demo\r          growth: Math.floor(Math.random() * 40) - 10, // Mock growth for demo\r          modules: ['CRM', 'Sales'], // Mock modules\r          features: ['API Access'], // Mock features\r          owner: {\r            name: 'Admin',\r            email: t.contactEmail,\r            avatar: undefined\r          },\r          performance: {\r            cpu: Math.floor(Math.random() * 100),\r            memory: Math.floor(Math.random() * 100),\r            requests: Math.floor(Math.random() * 20000),\r            errors: Math.floor(Math.random() * 50)\r          }\r        }));\r        setTenants(mappedTenants);\r        setTotalCount(mappedTenants.length);\r      } else {\r        message.warning('API veri formatı beklenenden farklı');\r        setTenants([]);\r        setTotalCount(0);\r      }\r    } catch (error: any) {\r      if (error.response?.status === 401) {\r        message.error('Oturum süreniz dolmuş, lütfen tekrar giriş yapın');\r      } else if (error.response?.status === 403) {\r        message.error('Bu sayfaya erişim yetkiniz yok');\r      } else if (error.code === 'ERR_NETWORK') {\r        message.error('Bağlantı hatası, lütfen internet bağlantınızı kontrol edin');\r        // Use mock data only for network errors during development\r        if (import.meta.env.DEV) {\r          message.info('Geliştirme modunda mock data gösteriliyor');\r          setTenants(mockTenants);\r        }\r      } else {\r        message.error('Tenant listesi yüklenirken hata oluştu');\r        setTenants([]);\r      }\r    } finally {\r      setLoading(false);\r    }\r  };\r  // Stats cards\r  const stats = [\r    {\r      title: 'Toplam Tenant',\r      value: tenants.length,\r      icon: <TeamOutlined />,\r      color: '#1890ff',\r      trend: 12,\r      suffix: '',\r    },\r    {\r      title: 'Aktif Tenant',\r      value: tenants.filter(t => t.status === 'active').length,\r      icon: <CheckCircleOutlined />,\r      color: '#52c41a',\r      trend: 8,\r      suffix: '',\r    },\r    {\r      title: 'Toplam Kullanıcı',\r      value: tenants.reduce((sum, t) => sum + t.userCount, 0),\r      icon: <UserOutlined />,\r      color: '#722ed1',\r      trend: 15,\r      suffix: '',\r    },\r    {\r      title: 'Aylık Gelir',\r      value: tenants.reduce((sum, t) => sum + t.revenue, 0),\r      icon: <DollarOutlined />,\r      color: '#fa8c16',\r      trend: 22,\r      prefix: '₺',\r    },\r  ];\r  // Plan colors and icons\r  const planConfig = {\r    Free: { color: '#8c8c8c', icon: <UserOutlined /> },\r    Starter: { color: '#52c41a', icon: <RocketOutlined /> },\r    Professional: { color: '#1890ff', icon: <ThunderboltOutlined /> },\r    Enterprise: { color: '#722ed1', icon: <CrownOutlined /> },\r  };\r  // Status config\r  const statusConfig = {\r    active: { color: 'success', text: 'Aktif', icon: <CheckCircleOutlined /> },\r    suspended: { color: 'error', text: 'Askıda', icon: <CloseCircleOutlined /> },\r    pending: { color: 'warning', text: 'Bekliyor', icon: <ClockCircleOutlined /> },\r    expired: { color: 'default', text: 'Süresi Dolmuş', icon: <InfoCircleOutlined /> },\r  };\r  // Tenant Card Component\r  const TenantCard: React.FC<TenantCardProps> = ({\r    tenant,\r    onEdit,\r    onDelete,\r    onToggleStatus,\r    onLoginAs,\r    onViewDetails,\r  }) => {\r    // Ensure plan exists in config, fallback to Free\r    const planInfo = planConfig[tenant.plan] || planConfig['Free'] || {\r      color: '#8c8c8c',\r      icon: <UserOutlined />\r    };\r    // Ensure status exists in config, fallback to pending\r    const statusInfo = statusConfig[tenant.status] || statusConfig['pending'] || {\r      color: 'default',\r      text: 'Bilinmiyor',\r      icon: <InfoCircleOutlined />\r    };\r    return (\r      <motion.div\r        layout\r        initial={{ opacity: 0, scale: 0.9 }}\r        animate={{ opacity: 1, scale: 1 }}\r        exit={{ opacity: 0, scale: 0.9 }}\r        whileHover={{ y: -5 }}\r        transition={{ duration: 0.3 }}\r      >\r        <Card\r          className=\"tenant-card glass-morphism\"\r          size=\"small\"\r          style={{\r            borderTop: `3px solid ${planInfo.color}`,\r            height: '100%',\r            minHeight: '320px',\r          }}\r          actions={[\r            <Tooltip title=\"Detaylar\">\r              <Button\r                type=\"text\"\r                icon={<EyeOutlined />}\r                onClick={() = aria-label=\"eye outlined\"> onViewDetails(tenant)}\r              />\r            </Tooltip>,\r            <Tooltip title=\"Düzenle\">\r              <Button\r                type=\"text\"\r                icon={<EditOutlined />}\r                onClick={() = aria-label=\"edit outlined\"> onEdit(tenant)}\r              />\r            </Tooltip>,\r            <Tooltip title={tenant.status === 'active' ? 'Askıya Al' : 'Aktifleştir'}>\r              <Button\r                type=\"text\"\r                icon={tenant.status === 'active' ? <LockOutlined /> : <UnlockOutlined />}\r                onClick={() = aria-label=\"button\"> onToggleStatus(tenant.id)}\r              />\r            </Tooltip>,\r            <Dropdown\r              menu={{\r                items: [\r                  {\r                    key: 'login',\r                    label: 'Tenant Olarak Giriş',\r                    icon: <LoginOutlined />,\r                    onClick: () => onLoginAs(tenant),\r                  },\r                  {\r                    key: 'copy',\r                    label: 'Domain Kopyala',\r                    icon: <CopyOutlined />,\r                    onClick: () => {\r                      navigator.clipboard.writeText(tenant.domain);\r                      message.success('Domain kopyalandı');\r                    },\r                  },\r                  { type: 'divider' },\r                  {\r                    key: 'delete',\r                    label: 'Sil',\r                    icon: <DeleteOutlined />,\r                    danger: true,\r                    onClick: () => onDelete(tenant.id),\r                  },\r                ],\r              }}\r              trigger={['click']}\r            >\r              <Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r            </Dropdown>,\r          ]}\r        >\r          {/* Header */}\r          <div className=\"tenant-card-header\">\r            <Avatar\r              size={48}\r              style={{\r                background: planInfo.color,\r                border: `2px solid ${planInfo.color}20`,\r              }}\r            >\r              {tenant.name.substring(0, 2).toUpperCase()}\r            </Avatar>\r            <div className=\"tenant-info\" style={{ flex: 1, minWidth: 0 }}>\r              <Title level={5} style={{ margin: 0, fontSize: 14, width: '100%', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis' }}>\r                {tenant.name}\r              </Title>\r              <Space size={2} style={{ marginTop: 4 }}>\r                <Tag color={planInfo.color} style={{ margin: 0, fontSize: 10 }}>\r                  {tenant.plan}\r                </Tag>\r                <Tag color={statusInfo.color} style={{ margin: 0, fontSize: 10 }}>\r                  {statusInfo.text === 'Aktif' ? 'Aktif' : 'Askıda'}\r                </Tag>\r              </Space>\r            </div>\r          </div>\r          <Divider style={{ margin: '8px 0' }} />\r          {/* Stats */}\r          <Row gutter={[8, 8]}>\r            <Col span={12}>\r              <Statistic\r                title=\"Kullanıcı\"\r                value={tenant.userCount || 0}\r                suffix={`/ ${tenant.maxUsers || 10}`}\r                prefix={<UserOutlined />}\r                valueStyle={{ fontSize: 14 }}\r              />\r              <Progress\r                percent={tenant.maxUsers ? Math.min((tenant.userCount || 0) / tenant.maxUsers * 100, 100) : 0}\r                size=\"small\"\r                showInfo={false}\r                strokeColor={planInfo?.color || '#1890ff'}\r              />\r            </Col>\r            <Col span={12}>\r              <Statistic\r                title=\"Depolama\"\r                value={tenant.storageUsed || 0}\r                suffix={`GB / ${tenant.maxStorage || 10}GB`}\r                prefix={<DatabaseOutlined />}\r                valueStyle={{ fontSize: 14 }}\r              />\r              <Progress\r                percent={tenant.maxStorage ? Math.min((tenant.storageUsed || 0) / tenant.maxStorage * 100, 100) : 0}\r                size=\"small\"\r                showInfo={false}\r                strokeColor={\r                  tenant.maxStorage && (tenant.storageUsed / tenant.maxStorage) * 100 > 80\r                    ? '#ff4d4f'\r                    : planInfo?.color || '#1890ff'\r                }\r              />\r            </Col>\r          </Row>\r          <Divider style={{ margin: '8px 0' }} />\r          {/* Info */}\r          <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\r            <div className=\"info-item\">\r              <GlobalOutlined />\r              <Text type=\"secondary\">{tenant.domain}</Text>\r            </div>\r            <div className=\"info-item\">\r              <MailOutlined />\r              <Text type=\"secondary\">{tenant.email}</Text>\r            </div>\r            <div className=\"info-item\">\r              <CalendarOutlined />\r              <Text type=\"secondary\">Son giriş: {tenant.lastLogin}</Text>\r            </div>\r          </Space>\r          <Divider style={{ margin: '8px 0' }} />\r          {/* Revenue & Growth */}\r          <Row gutter={8}>\r            <Col span={12}>\r              <div className=\"metric-box\" style={{ textAlign: 'center' }}>\r                <Text type=\"secondary\" style={{ fontSize: 11 }}>Gelir</Text>\r                <div style={{ fontSize: 13, fontWeight: 600, color: '#52c41a' }}>\r                  ₺<CountUp end={tenant.revenue} separator=\",\" />\r                </div>\r              </div>\r            </Col>\r            <Col span={12}>\r              <div className=\"metric-box\" style={{ textAlign: 'center' }}>\r                <Text type=\"secondary\" style={{ fontSize: 11 }}>Büyüme</Text>\r                <div\r                  style={{\r                    fontSize: 13,\r                    fontWeight: 600,\r                    color: tenant.growth > 0 ? '#52c41a' : '#ff4d4f',\r                  }}\r                >\r                  {tenant.growth > 0 ? '+' : ''}\r                  {tenant.growth}%\r                </div>\r              </div>\r            </Col>\r          </Row>\r          {/* Modules */}\r          <div className=\"modules-section\" style={{ marginTop: 12 }}>\r            <Space size={[4, 4]} wrap style={{ display: 'flex', flexWrap: 'wrap' }}>\r              {tenant.modules.slice(0, 3).map((module) => (\r                <Tag key={module} color=\"blue\" style={{ margin: 0, fontSize: 11 }}>\r                  {module}\r                </Tag>\r              ))}\r              {tenant.modules.length > 3 && (\r                <Tag color=\"default\" style={{ margin: 0, fontSize: 11 }}>\r                  +{tenant.modules.length - 3}\r                </Tag>\r              )}\r            </Space>\r          </div>\r        </Card>\r      </motion.div>\r    );\r  };\r  // Table columns\r  const columns = [\r    {\r      title: 'Tenant',\r      dataIndex: 'name',\r      key: 'name',\r      fixed: 'left',\r      width: 250,\r      render: (text: string, record: Tenant) => (\r        <Space>\r          <Avatar style={{ backgroundColor: planConfig[record.plan]?.color || '#8c8c8c' }}>\r            {text.substring(0, 2).toUpperCase()}\r          </Avatar>\r          <div>\r            <Text strong>{text}</Text>\r            <br />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {record.domain}\r            </Text>\r          </div>\r        </Space>\r      ),\r    },\r    {\r      title: 'Plan',\r      dataIndex: 'plan',\r      key: 'plan',\r      width: 120,\r      render: (plan: Tenant['plan']) => (\r        <Tag color={planConfig[plan]?.color || '#8c8c8c'} icon={planConfig[plan]?.icon || <UserOutlined />}>\r          {plan}\r        </Tag>\r      ),\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'status',\r      key: 'status',\r      width: 120,\r      render: (status: Tenant['status']) => (\r        <Tag color={statusConfig[status].color} icon={statusConfig[status].icon}>\r          {statusConfig[status].text}\r        </Tag>\r      ),\r    },\r    {\r      title: 'Kullanıcılar',\r      key: 'users',\r      width: 150,\r      render: (record: Tenant) => (\r        <Space direction=\"vertical\" size={0}>\r          <Text>{record.userCount} / {record.maxUsers}</Text>\r          <Progress\r            percent={(record.userCount / record.maxUsers) * 100}\r            size=\"small\"\r            showInfo={false}\r          />\r        </Space>\r      ),\r    },\r    {\r      title: 'Depolama',\r      key: 'storage',\r      width: 150,\r      render: (record: Tenant) => (\r        <Space direction=\"vertical\" size={0}>\r          <Text>{record.storageUsed}GB / {record.maxStorage}GB</Text>\r          <Progress\r            percent={(record.storageUsed / record.maxStorage) * 100}\r            size=\"small\"\r            showInfo={false}\r            strokeColor={\r              (record.storageUsed / record.maxStorage) * 100 > 80 ? '#ff4d4f' : undefined\r            }\r          />\r        </Space>\r      ),\r    },\r    {\r      title: 'Gelir',\r      dataIndex: 'revenue',\r      key: 'revenue',\r      width: 120,\r      render: (revenue: number) => (\r        <Text strong style={{ color: '#52c41a' }}>\r          ₺{revenue.toLocaleString()}\r        </Text>\r      ),\r    },\r    {\r      title: 'Büyüme',\r      dataIndex: 'growth',\r      key: 'growth',\r      width: 100,\r      render: (growth: number) => (\r        <Tag color={growth > 0 ? 'success' : 'error'}>\r          {growth > 0 ? '+' : ''}{growth}%\r        </Tag>\r      ),\r    },\r    {\r      title: 'Son Giriş',\r      dataIndex: 'lastLogin',\r      key: 'lastLogin',\r      width: 120,\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      fixed: 'right',\r      width: 120,\r      render: (record: Tenant) => (\r        <Space>\r          <Tooltip title=\"Detaylar\">\r            <Button\r              type=\"text\"\r              size=\"small\"\r              icon={<EyeOutlined />}\r              onClick={() = aria-label=\"eye outlined\"> handleViewDetails(record)}\r            />\r          </Tooltip>\r          <Tooltip title=\"Düzenle\">\r            <Button\r              type=\"text\"\r              size=\"small\"\r              icon={<EditOutlined />}\r              onClick={() = aria-label=\"edit outlined\"> handleEdit(record)}\r            />\r          </Tooltip>\r          <Dropdown\r            menu={{\r              items: [\r                {\r                  key: 'login',\r                  label: 'Tenant Olarak Giriş',\r                  icon: <LoginOutlined />,\r                },\r                {\r                  key: 'toggle',\r                  label: record.status === 'active' ? 'Askıya Al' : 'Aktifleştir',\r                  icon: record.status === 'active' ? <LockOutlined /> : <UnlockOutlined />,\r                },\r                { type: 'divider' },\r                {\r                  key: 'delete',\r                  label: 'Sil',\r                  icon: <DeleteOutlined />,\r                  danger: true,\r                },\r              ],\r              onClick: ({ key }) => handleTableAction(key, record),\r            }}\r            trigger={['click']}\r          >\r            <Button type=\"text\" size=\"small\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r          </Dropdown>\r        </Space>\r      ),\r    },\r  ];\r  // Handlers\r  const handleEdit = (tenant: Tenant) => {\r    setSelectedTenant(tenant);\r    form.setFieldsValue(tenant);\r    setShowCreateModal(true);\r  };\r  const handleDelete = (id: string) => {\r    Modal.confirm({\r      title: 'Tenant Sil',\r      content: 'Bu tenant\\'ı silmek istediğinizden emin misiniz? Bu işlem geri alınamaz.',\r      okText: 'Sil',\r      okType: 'danger',\r      cancelText: 'İptal',\r      onOk: async () => {\r        try {\r          setLoading(true);\r          const response = await tenantsApi.delete(id);\r          if (response.data?.success) {\r            message.success('Tenant başarıyla silindi');\r            fetchTenants(); // Refresh the list\r          } else {\r            message.error(response.data?.message || 'Tenant silinemedi');\r          }\r        } catch (error: any) {\r          message.error(error.response?.data?.message || 'Tenant silinirken hata oluştu');\r        } finally {\r          setLoading(false);\r        }\r      },\r    });\r  };\r  const handleToggleStatus = async (id: string) => {\r    try {\r      setLoading(true);\r      const tenant = tenants.find(t => t.id === id);\r      if (!tenant) return;\r      const response = await tenantsApi.toggleStatus(id);\r      if (response.data?.success) {\r        message.success(`Tenant ${tenant.status === 'active' ? 'askıya alındı' : 'aktifleştirildi'}`);\r        fetchTenants(); // Refresh the list\r      } else {\r        message.error(response.data?.message || 'Tenant durumu güncellenemedi');\r      }\r    } catch (error: any) {\r      message.error(error.response?.data?.message || 'Tenant durumu güncellenirken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleLoginAs = (tenant: Tenant) => {\r    message.info(`${tenant.name} olarak giriş yapılıyor...`);\r    // Implement login as tenant\r  };\r  const handleViewDetails = (tenant: Tenant) => {\r    navigate(`/master/tenants/${tenant.id}`);\r  };\r  // Bulk Operations\r  const handleBulkDelete = () => {\r    if (selectedTenants.length === 0) {\r      message.warning('Lütfen silmek için tenant seçin');\r      return;\r    }\r    Modal.confirm({\r      title: 'Toplu Silme',\r      content: `${selectedTenants.length} tenant silinecek. Bu işlem geri alınamaz. Devam etmek istiyor musunuz?`,\r      okText: 'Evet, Sil',\r      okType: 'danger',\r      cancelText: 'İptal',\r      onOk: async () => {\r        try {\r          setBulkLoading(true);\r          const promises = selectedTenants.map(id => tenantsApi.delete(id));\r          await Promise.all(promises);\r          message.success(`${selectedTenants.length} tenant başarıyla silindi`);\r          setSelectedTenants([]);\r          setShowBulkActions(false);\r          fetchTenants();\r        } catch (error) {\r          message.error('Toplu silme işlemi başarısız oldu');\r        } finally {\r          setBulkLoading(false);\r        }\r      },\r    });\r  };\r  const handleBulkStatusChange = (newStatus: 'active' | 'suspended') => {\r    if (selectedTenants.length === 0) {\r      message.warning('Lütfen durum değiştirmek için tenant seçin');\r      return;\r    }\r    Modal.confirm({\r      title: 'Toplu Durum Değişikliği',\r      content: `${selectedTenants.length} tenant'ın durumu \"${newStatus === 'active' ? 'Aktif' : 'Askıda'}\" olarak değiştirilecek. Devam etmek istiyor musunuz?`,\r      okText: 'Evet, Değiştir',\r      cancelText: 'İptal',\r      onOk: async () => {\r        try {\r          setBulkLoading(true);\r          const promises = selectedTenants.map(id => tenantsApi.toggleStatus(id));\r          await Promise.all(promises);\r          message.success(`${selectedTenants.length} tenant'ın durumu güncellendi`);\r          setSelectedTenants([]);\r          setShowBulkActions(false);\r          fetchTenants();\r        } catch (error) {\r          message.error('Toplu durum değişikliği başarısız oldu');\r        } finally {\r          setBulkLoading(false);\r        }\r      },\r    });\r  };\r  const handleExport = () => {\r    const dataToExport = selectedTenants.length > 0 \r      ? tenants.filter(t => selectedTenants.includes(t.id))\r      : tenants;\r    const csv = convertToCSV(dataToExport);\r    downloadCSV(csv, `tenants-${new Date().toISOString().split('T')[0]}.csv`);\r    message.success(`${dataToExport.length} tenant dışa aktarıldı`);\r  };\r  const convertToCSV = (data: Tenant[]) => {\r    const headers = ['ID', 'Name', 'Domain', 'Email', 'Phone', 'Plan', 'Status', 'Users', 'Storage', 'Created At', 'Revenue'];\r    const rows = data.map(t => [\r      t.id,\r      t.name,\r      t.domain,\r      t.email,\r      t.phone,\r      t.plan,\r      t.status,\r      `${t.userCount}/${t.maxUsers}`,\r      `${t.storageUsed}/${t.maxStorage}GB`,\r      t.createdAt,\r      t.revenue\r    ]);\r    return [headers, ...rows].map(row => row.join(',')).join('\\n');\r  };\r  const downloadCSV = (csv: string, filename: string) => {\r    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });\r    const link = document.createElement('a');\r    link.href = URL.createObjectURL(blob);\r    link.download = filename;\r    link.click();\r  };\r  const handleImport = (file: File) => {\r    const reader = new FileReader();\r    reader.onload = (e) => {\r      const text = e.target?.result as string;\r      // Parse CSV and import tenants\r      message.success('Tenants imported successfully');\r    };\r    reader.readAsText(file);\r    return false; // Prevent default upload behavior\r  };\r  const handleTableAction = (key: string, record: Tenant) => {\r    switch (key) {\r      case 'login':\r        handleLoginAs(record);\r        break;\r      case 'toggle':\r        handleToggleStatus(record.id);\r        break;\r      case 'delete':\r        handleDelete(record.id);\r        break;\r    }\r  };\r  const handleCreateTenant = async (values: any) => {\r    try {\r      setLoading(true);\r      const tenantData = {\r        name: values.name,\r        code: values.domain,\r        contactEmail: values.email,\r        contactPhone: values.phone,\r        packageId: values.plan === 'Enterprise' ? '1' : values.plan === 'Professional' ? '2' : values.plan === 'Starter' ? '3' : '4',\r        maxUsers: values.maxUsers || 10,\r        modules: values.modules || [],\r      };\r      const response = await tenantsApi.create(tenantData);\r      if (response.data?.success) {\r        message.success('Tenant başarıyla oluşturuldu');\r        setShowCreateModal(false);\r        form.resetFields();\r        fetchTenants(); // Refresh the list\r      } else {\r        message.error(response.data?.message || 'Tenant oluşturulamadı');\r      }\r    } catch (error: any) {\r      message.error(error.response?.data?.message || 'Tenant oluşturulurken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  // Filtered tenants\r  const filteredTenants = tenants.filter(tenant => {\r    const matchesSearch = tenant.name.toLowerCase().includes(searchText.toLowerCase()) ||\r                         tenant.domain.toLowerCase().includes(searchText.toLowerCase()) ||\r                         tenant.email.toLowerCase().includes(searchText.toLowerCase());\r    const matchesStatus = filterStatus === 'all' || tenant.status === filterStatus;\r    const matchesPlan = filterPlan === 'all' || tenant.plan === filterPlan;\r    return matchesSearch && matchesStatus && matchesPlan;\r  });\r  return (\r    <div className=\"master-tenants-page\">\r      {/* Header */}\r      <div className=\"page-header glass-morphism\">\r        <motion.div\r          initial={{ opacity: 0, x: -20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-content\"\r        >\r          <Title level={2} className=\"gradient-text\">\r            <TeamOutlined /> Tenant Yönetimi\r          </Title>\r          <Text type=\"secondary\">Tüm tenant'ları yönetin ve izleyin</Text>\r        </motion.div>\r        <motion.div\r          initial={{ opacity: 0, x: 20 }}\r          animate={{ opacity: 1, x: 0 }}\r          className=\"header-actions\"\r        >\r          <Space>\r            <Upload\r              accept=\".csv\"\r              showUploadList={false}\r              beforeUpload={handleImport}\r            >\r              <Button icon={<ImportOutlined />} aria-label=\"import outlined\">İçe Aktar</Button>\r            </Upload>\r            <Button icon={<ExportOutlined />} onClick={handleExport} aria-label=\"export outlined\">Dışa Aktar</Button>\r            {selectedTenants.length > 0 && (\r              <Badge count={selectedTenants.length} offset={[-5, 5]}>\r                <Dropdown\r                  menu={{\r                    items: [\r                      {\r                        key: 'activate',\r                        label: 'Aktifleştir',\r                        icon: <UnlockOutlined />,\r                        onClick: () => handleBulkStatusChange('active'),\r                      },\r                      {\r                        key: 'suspend',\r                        label: 'Askıya Al',\r                        icon: <LockOutlined />,\r                        onClick: () => handleBulkStatusChange('suspended'),\r                      },\r                      { type: 'divider' },\r                      {\r                        key: 'delete',\r                        label: 'Toplu Sil',\r                        icon: <DeleteOutlined />,\r                        danger: true,\r                        onClick: handleBulkDelete,\r                      },\r                    ],\r                  }}\r                >\r                  <Button type=\"primary\" loading={bulkLoading}>\r                    Toplu İşlemler ({selectedTenants.length})\r                  </Button>\r                </Dropdown>\r              </Badge>\r            )}\r            <Button\r              type=\"primary\"\r              icon={<PlusOutlined />}\r              onClick={() = aria-label=\"plus outlined\"> setShowCreateModal(true)}\r              style={{\r                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r                border: 'none',\r                height: 40,\r                borderRadius: 10,\r                fontWeight: 600,\r                boxShadow: '0 4px 12px rgba(102, 126, 234, 0.3)'\r              }}\r              onMouseEnter={(e) => {\r                e.currentTarget.style.transform = 'translateY(-2px)';\r                e.currentTarget.style.boxShadow = '0 6px 20px rgba(102, 126, 234, 0.4)';\r              }}\r              onMouseLeave={(e) => {\r                e.currentTarget.style.transform = 'translateY(0)';\r                e.currentTarget.style.boxShadow = '0 4px 12px rgba(102, 126, 234, 0.3)';\r              }}\r            >\r              Yeni Tenant\r            </Button>\r          </Space>\r        </motion.div>\r      </div>\r      {/* Stats */}\r      <Row gutter={[24, 24]} className=\"stats-row\">\r        {stats.map((stat, index) => (\r          <Col xs={24} sm={12} lg={6} key={index}>\r            <motion.div\r              initial={{ opacity: 0, y: 20 }}\r              animate={{ opacity: 1, y: 0 }}\r              transition={{ delay: index * 0.1 }}\r              whileHover={{ scale: 1.02 }}\r            >\r              <Card className=\"stat-card glass-morphism\" bodyStyle={{ padding: 20 }}>\r                <div style={{ display: 'flex', alignItems: 'center', gap: 16 }}>\r                  <div className=\"stat-icon-wrapper\" style={{ \r                    width: 60, \r                    height: 60, \r                    borderRadius: 14,\r                    background: `${stat.color}15`,\r                    display: 'flex',\r                    alignItems: 'center',\r                    justifyContent: 'center',\r                    fontSize: 26,\r                    color: stat.color,\r                    boxShadow: `0 4px 12px ${stat.color}20`\r                  }}>\r                    {stat.icon}\r                  </div>\r                  <div style={{ flex: 1 }}>\r                    <Text type=\"secondary\" style={{ fontSize: 13, fontWeight: 500, textTransform: 'uppercase', letterSpacing: 0.5 }}>{stat.title}</Text>\r                    <div style={{ fontSize: 28, fontWeight: 700, color: '#1a1a1a', marginTop: 4 }}>\r                      {stat.prefix}<CountUp end={stat.value} separator=\",\" duration={2} />{stat.suffix}\r                    </div>\r                    {stat.trend && (\r                      <div style={{ marginTop: 8, display: 'flex', alignItems: 'center', gap: 4 }}>\r                        <Tag \r                          color={stat.trend > 0 ? 'success' : 'error'} \r                          style={{ fontSize: 12 }}\r                        >\r                          {stat.trend > 0 ? '↑' : '↓'} {Math.abs(stat.trend)}%\r                        </Tag>\r                        <Text type=\"secondary\" style={{ fontSize: 12 }}>geçen aya göre</Text>\r                      </div>\r                    )}\r                  </div>\r                </div>\r              </Card>\r            </motion.div>\r          </Col>\r        ))}\r      </Row>\r      {/* Filters */}\r      <Card className=\"filters-card glass-morphism\">\r        <Row gutter={[16, 16]} align=\"middle\">\r          <Col flex=\"auto\">\r            <Space size=\"middle\" wrap>\r              <Search\r                placeholder=\"Tenant ara...\"\r                allowClear\r                onChange={(e) => setSearchText(e.target.value)}\r                style={{ width: 250 }}\r                prefix={<SearchOutlined />}\r              />\r              <Select\r                placeholder=\"Durum\"\r                value={filterStatus}\r                onChange={setFilterStatus}\r                style={{ width: 120 }}\r               aria-label=\"select field\">\r                <Option value=\"all\">Tümü</Option>\r                <Option value=\"active\">Aktif</Option>\r                <Option value=\"suspended\">Askıda</Option>\r                <Option value=\"pending\">Bekliyor</Option>\r                <Option value=\"expired\">Süresi Dolmuş</Option>\r              </Select>\r              <Select\r                placeholder=\"Plan\"\r                value={filterPlan}\r                onChange={setFilterPlan}\r                style={{ width: 120 }}\r               aria-label=\"select field\">\r                <Option value=\"all\">Tümü</Option>\r                <Option value=\"Free\">Free</Option>\r                <Option value=\"Starter\">Starter</Option>\r                <Option value=\"Professional\">Professional</Option>\r                <Option value=\"Enterprise\">Enterprise</Option>\r              </Select>\r              <RangePicker />\r            </Space>\r          </Col>\r          <Col>\r            <Space>\r              <Segmented\r                value={viewMode}\r                onChange={(value) => setViewMode(value as 'grid' | 'table')}\r                options={[\r                  { label: 'Tablo', value: 'table', icon: <BarsOutlined /> },\r                  { label: 'Grid', value: 'grid', icon: <AppstoreOutlined /> },\r                ]}\r              />\r              <Button\r                icon={<ReloadOutlined spin={loading} / aria-label=\"reload outlined\">}\r                onClick={() => fetchTenants()}\r              >\r                Yenile\r              </Button>\r            </Space>\r          </Col>\r        </Row>\r      </Card>\r      {/* Content */}\r      <AnimatePresence mode=\"wait\">\r        {viewMode === 'grid' ? (\r          <motion.div\r            key=\"grid\"\r            initial={{ opacity: 0 }}\r            animate={{ opacity: 1 }}\r            exit={{ opacity: 0 }}\r          >\r            {filteredTenants.length > 20 ? (\r              // Use virtual scrolling for large datasets\r              <div style={{ height: 'calc(100vh - 350px)' }}>\r                <VirtualList\r                  items={filteredTenants}\r                  itemHeight={350}\r                  renderItem={(tenant) => (\r                    <div style={{ padding: '12px' }}>\r                      <TenantCard\r                        tenant={tenant}\r                        onEdit={handleEdit}\r                        onDelete={handleDelete}\r                        onToggleStatus={handleToggleStatus}\r                        onLoginAs={handleLoginAs}\r                        onViewDetails={handleViewDetails}\r                      />\r                    </div>\r                  )}\r                  emptyText=\"Tenant bulunamadı\"\r                />\r              </div>\r            ) : (\r              // Use regular rendering for small datasets\r              <>\r                <Row gutter={[24, 24]}>\r                  {filteredTenants.map((tenant) => (\r                    <Col xs={24} sm={24} md={12} lg={8} xl={8} xxl={6} key={tenant.id}>\r                      <TenantCard\r                        tenant={tenant}\r                        onEdit={handleEdit}\r                        onDelete={handleDelete}\r                        onToggleStatus={handleToggleStatus}\r                        onLoginAs={handleLoginAs}\r                        onViewDetails={handleViewDetails}\r                      />\r                    </Col>\r                  ))}\r                </Row>\r                {filteredTenants.length === 0 && (\r                  <Empty\r                    description=\"Tenant bulunamadı\"\r                    image={Empty.PRESENTED_IMAGE_SIMPLE}\r                  />\r                )}\r              </>\r            )}\r          </motion.div>\r        ) : (\r          <motion.div\r            key=\"table\"\r            initial={{ opacity: 0 }}\r            animate={{ opacity: 1 }}\r            exit={{ opacity: 0 }}\r          >\r            <Card className=\"table-card glass-morphism\">\r              {filteredTenants.length > 50 ? (\r                // Use virtual table for large datasets\r                <div style={{ height: 'calc(100vh - 350px)' }}>\r                  <VirtualTable\r                    columns={columns}\r                    dataSource={filteredTenants}\r                    rowKey=\"id\"\r                    loading={loading}\r                    selectable={true}\r                    onSelectionChange={setSelectedTenants}\r                    onRowClick={handleViewDetails}\r                  />\r                </div>\r              ) : (\r                // Use regular table for small datasets\r                <Table\r                  columns={columns}\r                  dataSource={filteredTenants}\r                  rowKey=\"id\"\r                  loading={loading}\r                  pagination={{\r                    current: page,\r                    pageSize: pageSize,\r                    total: totalCount || filteredTenants.length,\r                    showSizeChanger: true,\r                    showTotal: (total) => `Toplam ${total} tenant`,\r                    onChange: (newPage, newPageSize) => {\r                      setPage(newPage);\r                      if (newPageSize) setPageSize(newPageSize);\r                    },\r                  }}\r                  scroll={{ x: 1500 }}\r                  onRow={(record) => ({\r                    onClick: () => handleViewDetails(record),\r                    style: { cursor: 'pointer' }\r                  })}\r                  rowSelection={{\r                    selectedRowKeys: selectedTenants,\r                    onChange: setSelectedTenants,\r                  }}\r                />\r              )}\r            </Card>\r          </motion.div>\r        )}\r      </AnimatePresence>\r      {/* Create/Edit Modal */}\r      <Modal\r        title={selectedTenant ? 'Tenant Düzenle' : 'Yeni Tenant Oluştur'}\r        open={showCreateModal}\r        onCancel={() => {\r          setShowCreateModal(false);\r          setSelectedTenant(null);\r          form.resetFields();\r        }}\r        footer={null}\r        width={600}\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleCreateTenant}\r        >\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"name\"\r                label=\"Tenant Adı\"\r                rules={[{ required: true, message: 'Tenant adı gerekli' }]}\r              >\r                <Input placeholder=\"Örn: TechCorp Solutions\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"domain\"\r                label=\"Domain\"\r                rules={[{ required: true, message: 'Domain gerekli' }]}\r              >\r                <Input placeholder=\"Örn: techcorp\" addonAfter=\".stoocker.app\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"email\"\r                label=\"E-posta\"\r                rules={[\r                  { required: true, message: 'E-posta gerekli' },\r                  { type: 'email', message: 'Geçerli bir e-posta girin' },\r                ]}\r              >\r                <Input placeholder=\"admin@example.com\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"phone\"\r                label=\"Telefon\"\r                rules={[{ required: true, message: 'Telefon gerekli' }]}\r              >\r                <Input placeholder=\"+90 555 123 4567\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"plan\"\r                label=\"Plan\"\r                rules={[{ required: true, message: 'Plan seçin' }]}\r              >\r                <Select placeholder=\"Plan seçin\" aria-label=\"select field\">\r                  <Option value=\"Free\">Free</Option>\r                  <Option value=\"Starter\">Starter</Option>\r                  <Option value=\"Professional\">Professional</Option>\r                  <Option value=\"Enterprise\">Enterprise</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"maxUsers\"\r                label=\"Maksimum Kullanıcı\"\r                rules={[{ required: true, message: 'Kullanıcı limiti gerekli' }]}\r              >\r                <InputNumber\r                  min={1}\r                  max={10000}\r                  style={{ width: '100%' }}\r                  placeholder=\"100\"\r                / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item\r            name=\"modules\"\r            label=\"Modüller\"\r          >\r            <Checkbox.Group>\r              <Row>\r                <Col span={8}>\r                  <Checkbox value=\"CRM\">CRM</Checkbox>\r                </Col>\r                <Col span={8}>\r                  <Checkbox value=\"Sales\">Sales</Checkbox>\r                </Col>\r                <Col span={8}>\r                  <Checkbox value=\"Finance\">Finance</Checkbox>\r                </Col>\r                <Col span={8}>\r                  <Checkbox value=\"HR\">HR</Checkbox>\r                </Col>\r                <Col span={8}>\r                  <Checkbox value=\"Production\">Production</Checkbox>\r                </Col>\r                <Col span={8}>\r                  <Checkbox value=\"Inventory\">Inventory</Checkbox>\r                </Col>\r              </Row>\r            </Checkbox.Group>\r          </Form.Item>\r          <Form.Item>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => setShowCreateModal(false)}>İptal</Button>\r              <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\r                {selectedTenant ? 'Güncelle' : 'Oluştur'}\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Details Drawer */}\r      <Drawer\r        title=\"Tenant Detayları\"\r        placement=\"right\"\r        width={600}\r        open={showDetailsDrawer}\r        onClose={() => {\r          setShowDetailsDrawer(false);\r          setSelectedTenant(null);\r        }}\r        destroyOnClose={true}\r        maskClosable={true}\r        zIndex={1000}\r        getContainer={false}\r      >\r        {selectedTenant ? (\r          <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\r            {/* Tenant Info */}\r            <Card className=\"glass-morphism\">\r              <Space align=\"start\">\r                <Avatar size={64} style={{ background: planConfig[selectedTenant.plan]?.color || '#667eea' }}>\r                  {selectedTenant.name.substring(0, 2).toUpperCase()}\r                </Avatar>\r                <div>\r                  <Title level={4}>{selectedTenant.name}</Title>\r                  <Space>\r                    <Tag color={planConfig[selectedTenant.plan]?.color || '#8c8c8c'}>\r                      {selectedTenant.plan}\r                    </Tag>\r                    <Tag color={statusConfig[selectedTenant.status]?.color || 'default'}>\r                      {statusConfig[selectedTenant.status]?.text || selectedTenant.status}\r                    </Tag>\r                  </Space>\r                </div>\r              </Space>\r            </Card>\r            {/* Performance Metrics */}\r            <Card title=\"Performans Metrikleri\" className=\"glass-morphism\">\r              <Row gutter={[16, 16]}>\r                <Col span={12}>\r                  <Text type=\"secondary\">CPU Kullanımı</Text>\r                  <Progress percent={selectedTenant.performance.cpu} />\r                </Col>\r                <Col span={12}>\r                  <Text type=\"secondary\">Memory Kullanımı</Text>\r                  <Progress percent={selectedTenant.performance.memory} />\r                </Col>\r                <Col span={12}>\r                  <Statistic\r                    title=\"Günlük İstek\"\r                    value={selectedTenant.performance.requests}\r                    prefix={<ApiOutlined />}\r                  />\r                </Col>\r                <Col span={12}>\r                  <Statistic\r                    title=\"Hata Sayısı\"\r                    value={selectedTenant.performance.errors}\r                    prefix={<WarningOutlined />}\r                    valueStyle={{ color: '#ff4d4f' }}\r                  />\r                </Col>\r              </Row>\r            </Card>\r            {/* Contact Info */}\r            <Card title=\"İletişim Bilgileri\" className=\"glass-morphism\">\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div>\r                  <Text type=\"secondary\">Sahip</Text>\r                  <br />\r                  <Text strong>{selectedTenant.owner.name}</Text>\r                </div>\r                <div>\r                  <Text type=\"secondary\">E-posta</Text>\r                  <br />\r                  <Text copyable>{selectedTenant.email}</Text>\r                </div>\r                <div>\r                  <Text type=\"secondary\">Telefon</Text>\r                  <br />\r                  <Text>{selectedTenant.phone}</Text>\r                </div>\r                <div>\r                  <Text type=\"secondary\">Domain</Text>\r                  <br />\r                  <Text copyable>{selectedTenant.domain}</Text>\r                </div>\r              </Space>\r            </Card>\r            {/* Modules & Features */}\r            <Card title=\"Modüller ve Özellikler\" className=\"glass-morphism\">\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div>\r                  <Text type=\"secondary\">Aktif Modüller</Text>\r                  <br />\r                  <Space wrap>\r                    {selectedTenant.modules.map((module) => (\r                      <Tag key={module} color=\"blue\">\r                        {module}\r                      </Tag>\r                    ))}\r                  </Space>\r                </div>\r                <div>\r                  <Text type=\"secondary\">Özellikler</Text>\r                  <br />\r                  <Space wrap>\r                    {selectedTenant.features.map((feature) => (\r                      <Tag key={feature} color=\"green\">\r                        {feature}\r                      </Tag>\r                    ))}\r                  </Space>\r                </div>\r              </Space>\r            </Card>\r            {/* Actions */}\r            <Space style={{ width: '100%' }}>\r              <Button\r                type=\"primary\"\r                icon={<LoginOutlined />}\r                block\r                onClick={() = aria-label=\"login outlined\"> handleLoginAs(selectedTenant)}\r              >\r                Tenant Olarak Giriş Yap\r              </Button>\r              <Button\r                icon={<EditOutlined />}\r                block\r                onClick={() = aria-label=\"edit outlined\"> {\r                  setShowDetailsDrawer(false);\r                  handleEdit(selectedTenant);\r                }}\r              >\r                Düzenle\r              </Button>\r            </Space>\r          </Space>\r        ) : (\r          <Empty description=\"Tenant seçilmedi\" />\r        )}\r      </Drawer>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Tenants/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Table,\r  Card,\r  Button,\r  Space,\r  Tag,\r  Modal,\r  Form,\r  Input,\r  Select,\r  Switch,\r  Dropdown,\r  Menu,\r  Typography,\r  Row,\r  Col,\r  Statistic,\r  Avatar,\r  Badge,\r  Tooltip,\r  message,\r  Popconfirm,\r  Divider,\r  Alert,\r  Descriptions,\r  Timeline,\r  List,\r  Tabs,\r} from 'antd';\rimport {\r  UserOutlined,\r  PlusOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  KeyOutlined,\r  LockOutlined,\r  UnlockOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  TeamOutlined,\r  SafetyOutlined,\r  CalendarOutlined,\r  MoreOutlined,\r  SearchOutlined,\r  FilterOutlined,\r  ExportOutlined,\r  ReloadOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  UserAddOutlined,\r  UsergroupAddOutlined,\r  CrownOutlined,\r  SettingOutlined,\r  InfoCircleOutlined,\r  EyeOutlined,\r  EyeInvisibleOutlined,\r  GlobalOutlined,\r  ApartmentOutlined,\r} from '@ant-design/icons';\rimport { motion } from 'framer-motion';\rimport dayjs from 'dayjs';\rimport relativeTime from 'dayjs/plugin/relativeTime';\rimport 'dayjs/locale/tr';\rimport { usersApi, MasterUser, CreateUserRequest, UpdateUserRequest } from '@/shared/api/users.api';\rimport '../../styles/master-layout.css';\rimport './users.css';\rimport CountUp from 'react-countup';\rdayjs.extend(relativeTime);\rdayjs.locale('tr');\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst { Option } = Select;\rexport const MasterUsersPage: React.FC = () => {\r  const [users, setUsers] = useState<MasterUser[]>([]);\r  const [loading, setLoading] = useState(false);\r  const [showModal, setShowModal] = useState(false);\r  const [showPasswordModal, setShowPasswordModal] = useState(false);\r  const [showDetailsModal, setShowDetailsModal] = useState(false);\r  const [selectedUser, setSelectedUser] = useState<MasterUser | null>(null);\r  const [searchText, setSearchText] = useState('');\r  const [filterRole, setFilterRole] = useState<string>('');\r  const [filterStatus, setFilterStatus] = useState<boolean | undefined>();\r  const [showPassword, setShowPassword] = useState(false);\r  const [form] = Form.useForm();\r  const [passwordForm] = Form.useForm();\r  const [pagination, setPagination] = useState({\r    current: 1,\r    pageSize: 10,\r    total: 0,\r  });\r  useEffect(() => {\r    fetchUsers();\r  }, [pagination.current, pagination.pageSize, searchText, filterRole, filterStatus]);\r  const fetchUsers = async () => {\r    setLoading(true);\r    try {\r      const response = await usersApi.getAll({\r        page: pagination.current,\r        pageSize: pagination.pageSize,\r        search: searchText,\r        role: filterRole,\r        isActive: filterStatus,\r      });\r      if (response.data?.success && response.data?.data) {\r        const mappedUsers = response.data.data.map((user: any) => ({\r          id: user.id,\r          username: user.username || user.userName,\r          email: user.email,\r          firstName: user.firstName,\r          lastName: user.lastName,\r          phoneNumber: user.phoneNumber,\r          role: user.role || 'User',\r          isActive: user.isActive,\r          isTwoFactorEnabled: user.isTwoFactorEnabled || false,\r          lastLoginDate: user.lastLoginDate,\r          createdDate: user.createdDate || user.createdAt,\r          tenantAccess: user.tenantAccess || [],\r        }));\r        setUsers(mappedUsers);\r        setPagination(prev => ({\r          ...prev,\r          total: response.data.totalCount || mappedUsers.length,\r        }));\r      }\r    } catch (error) {\r      message.error('Kullanıcılar yüklenirken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const getRoleColor = (role: string) => {\r    const colors: Record<string, string> = {\r      'SuperAdmin': 'purple',\r      'Admin': 'red',\r      'Support': 'blue',\r      'User': 'green',\r      'Viewer': 'default',\r    };\r    return colors[role] || 'default';\r  };\r  const getRoleIcon = (role: string) => {\r    const icons: Record<string, React.ReactNode> = {\r      'SuperAdmin': <CrownOutlined />,\r      'Admin': <SafetyOutlined />,\r      'Support': <TeamOutlined />,\r      'User': <UserOutlined />,\r      'Viewer': <EyeOutlined />,\r    };\r    return icons[role] || <UserOutlined />;\r  };\r  const stats = [\r    {\r      title: 'Toplam Kullanıcı',\r      value: users.length,\r      icon: <TeamOutlined style={{ color: '#1890ff' }} />,\r      color: '#1890ff',\r      trend: 12,\r    },\r    {\r      title: 'Aktif Kullanıcı',\r      value: users.filter(u => u.isActive).length,\r      icon: <CheckCircleOutlined style={{ color: '#52c41a' }} />,\r      color: '#52c41a',\r      trend: 8,\r    },\r    {\r      title: 'Admin Kullanıcı',\r      value: users.filter(u => u.role === 'Admin' || u.role === 'SuperAdmin').length,\r      icon: <SafetyOutlined style={{ color: '#722ed1' }} />,\r      color: '#722ed1',\r      trend: -3,\r    },\r    {\r      title: '2FA Aktif',\r      value: users.filter(u => u.isTwoFactorEnabled).length,\r      icon: <LockOutlined style={{ color: '#fa8c16' }} />,\r      color: '#fa8c16',\r      trend: 25,\r    },\r  ];\r  const columns = [\r    {\r      title: 'Kullanıcı',\r      key: 'user',\r      render: (record: MasterUser) => (\r        <Space>\r          <Badge\r            dot\r            status={record.isActive ? 'success' : 'error'}\r            offset={[-5, 5]}\r          >\r            <Avatar icon={<UserOutlined />} style={{ backgroundColor: '#1890ff' }}>\r              {record.firstName?.[0]}{record.lastName?.[0]}\r            </Avatar>\r          </Badge>\r          <div>\r            <Text strong>{`${record.firstName} ${record.lastName}`}</Text>\r            <br />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              @{record.username}\r            </Text>\r          </div>\r        </Space>\r      ),\r    },\r    {\r      title: 'E-posta',\r      dataIndex: 'email',\r      key: 'email',\r      render: (email: string) => (\r        <Space>\r          <MailOutlined />\r          <Text>{email}</Text>\r        </Space>\r      ),\r    },\r    {\r      title: 'Telefon',\r      dataIndex: 'phoneNumber',\r      key: 'phoneNumber',\r      render: (phone: string) => phone ? (\r        <Space>\r          <PhoneOutlined />\r          <Text>{phone}</Text>\r        </Space>\r      ) : <Text type=\"secondary\">-</Text>,\r    },\r    {\r      title: 'Rol',\r      dataIndex: 'role',\r      key: 'role',\r      render: (role: string) => (\r        <Tag color={getRoleColor(role)} icon={getRoleIcon(role)}>\r          {role}\r        </Tag>\r      ),\r    },\r    {\r      title: 'Güvenlik',\r      key: 'security',\r      render: (record: MasterUser) => (\r        <Space>\r          {record.isTwoFactorEnabled && (\r            <Tooltip title=\"2FA Aktif\">\r              <Tag color=\"green\" icon={<LockOutlined />}>\r                2FA\r              </Tag>\r            </Tooltip>\r          )}\r          {record.tenantAccess && record.tenantAccess.length > 0 && (\r            <Tooltip title={`${record.tenantAccess.length} Tenant Erişimi`}>\r              <Tag color=\"blue\" icon={<ApartmentOutlined />}>\r                {record.tenantAccess.length}\r              </Tag>\r            </Tooltip>\r          )}\r        </Space>\r      ),\r    },\r    {\r      title: 'Son Giriş',\r      dataIndex: 'lastLoginDate',\r      key: 'lastLoginDate',\r      render: (date: string) => date ? (\r        <Tooltip title={dayjs(date).format('DD MMMM YYYY HH:mm')}>\r          <Text type=\"secondary\">{dayjs(date).fromNow()}</Text>\r        </Tooltip>\r      ) : <Text type=\"secondary\">Hiç giriş yapmadı</Text>,\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'isActive',\r      key: 'isActive',\r      render: (isActive: boolean) => (\r        <Tag color={isActive ? 'success' : 'error'}>\r          {isActive ? 'Aktif' : 'Pasif'}\r        </Tag>\r      ),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      width: 120,\r      render: (record: MasterUser) => (\r        <Dropdown\r          overlay={\r            <Menu>\r              <Menu.Item\r                key=\"view\"\r                icon={<EyeOutlined />}\r                onClick={() => handleViewDetails(record)}\r              >\r                Detaylar\r              </Menu.Item>\r              <Menu.Item\r                key=\"edit\"\r                icon={<EditOutlined />}\r                onClick={() => handleEdit(record)}\r              >\r                Düzenle\r              </Menu.Item>\r              <Menu.Item\r                key=\"password\"\r                icon={<KeyOutlined />}\r                onClick={() => handleResetPassword(record)}\r              >\r                Şifre Sıfırla\r              </Menu.Item>\r              <Menu.Divider />\r              <Menu.Item\r                key=\"toggle\"\r                icon={record.isActive ? <LockOutlined /> : <UnlockOutlined />}\r                onClick={() => handleToggleStatus(record)}\r              >\r                {record.isActive ? 'Devre Dışı Bırak' : 'Aktif Et'}\r              </Menu.Item>\r              <Menu.Divider />\r              <Menu.Item\r                key=\"delete\"\r                icon={<DeleteOutlined />}\r                danger\r                onClick={() => handleDelete(record.id)}\r              >\r                Sil\r              </Menu.Item>\r            </Menu>\r          }\r          placement=\"bottomRight\"\r        >\r          <Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r        </Dropdown>\r      ),\r    },\r  ];\r  const handleCreate = () => {\r    form.resetFields();\r    setSelectedUser(null);\r    setShowModal(true);\r  };\r  const handleEdit = (user: MasterUser) => {\r    setSelectedUser(user);\r    form.setFieldsValue({\r      firstName: user.firstName,\r      lastName: user.lastName,\r      email: user.email,\r      username: user.username,\r      phoneNumber: user.phoneNumber,\r      role: user.role,\r      isActive: user.isActive,\r    });\r    setShowModal(true);\r  };\r  const handleSubmit = async (values: any) => {\r    setLoading(true);\r    try {\r      if (selectedUser) {\r        // Update\r        const updateData: UpdateUserRequest = {\r          firstName: values.firstName,\r          lastName: values.lastName,\r          email: values.email,\r          phoneNumber: values.phoneNumber,\r          role: values.role,\r          isActive: values.isActive,\r        };\r        await usersApi.update(selectedUser.id, updateData);\r        message.success('Kullanıcı güncellendi');\r      } else {\r        // Create\r        const createData: CreateUserRequest = {\r          username: values.username,\r          email: values.email,\r          password: values.password,\r          firstName: values.firstName,\r          lastName: values.lastName,\r          phoneNumber: values.phoneNumber,\r          role: values.role,\r          isActive: values.isActive !== false,\r        };\r        await usersApi.create(createData);\r        message.success('Kullanıcı oluşturuldu');\r      }\r      setShowModal(false);\r      fetchUsers();\r    } catch (error) {\r      message.error(selectedUser ? 'Kullanıcı güncellenemedi' : 'Kullanıcı oluşturulamadı');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleToggleStatus = async (user: MasterUser) => {\r    try {\r      await usersApi.toggleStatus(user.id);\r      message.success(`Kullanıcı ${user.isActive ? 'devre dışı bırakıldı' : 'aktif edildi'}`);\r      fetchUsers();\r    } catch (error) {\r      message.error('Durum değiştirilemedi');\r    }\r  };\r  const handleDelete = async (id: string) => {\r    Modal.confirm({\r      title: 'Kullanıcıyı Sil',\r      content: 'Bu kullanıcıyı silmek istediğinizden emin misiniz?',\r      okText: 'Sil',\r      okType: 'danger',\r      cancelText: 'İptal',\r      onOk: async () => {\r        try {\r          await usersApi.delete(id);\r          message.success('Kullanıcı silindi');\r          fetchUsers();\r        } catch (error) {\r          message.error('Kullanıcı silinemedi');\r        }\r      },\r    });\r  };\r  const handleResetPassword = (user: MasterUser) => {\r    setSelectedUser(user);\r    passwordForm.resetFields();\r    setShowPasswordModal(true);\r  };\r  const handlePasswordSubmit = async (values: any) => {\r    if (!selectedUser) return;\r    setLoading(true);\r    try {\r      await usersApi.resetPassword(selectedUser.id, values.newPassword);\r      message.success('Şifre başarıyla sıfırlandı');\r      setShowPasswordModal(false);\r    } catch (error) {\r      message.error('Şifre sıfırlanamadı');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleViewDetails = (user: MasterUser) => {\r    setSelectedUser(user);\r    setShowDetailsModal(true);\r  };\r  const handleTableChange = (newPagination: any) => {\r    setPagination({\r      current: newPagination.current,\r      pageSize: newPagination.pageSize,\r      total: pagination.total,\r    });\r  };\r  return (\r    <div className=\"master-users-page\">\r      {/* Header */}\r      <motion.div \r        className=\"users-header\"\r        initial={{ opacity: 0, y: -20 }}\r        animate={{ opacity: 1, y: 0 }}\r        transition={{ duration: 0.5 }}\r      >\r        <div className=\"users-header-content\">\r          <Title level={1}>\r            <TeamOutlined /> Kullanıcı Yönetimi\r          </Title>\r          <Paragraph>Sistem kullanıcılarını yönetin ve yetkilendirin</Paragraph>\r        </div>\r        <div className=\"users-header-actions\">\r          <Button \r            icon={<ExportOutlined />}\r            size=\"large\"\r           aria-label=\"export outlined\">\r            Dışa Aktar\r          </Button>\r          <Button\r            type=\"primary\"\r            icon={<UserAddOutlined />}\r            onClick={handleCreate}\r            className=\"gradient-btn\"\r            size=\"large\"\r           aria-label=\"user add outlined\">\r            Yeni Kullanıcı\r          </Button>\r        </div>\r      </motion.div>\r      {/* Stats */}\r      <Row gutter={[24, 24]} className=\"users-stats\">\r        {stats.map((stat, index) => (\r          <Col xs={24} sm={12} lg={6} key={index}>\r            <motion.div\r              initial={{ opacity: 0, y: 20 }}\r              animate={{ opacity: 1, y: 0 }}\r              transition={{ delay: index * 0.1 }}\r              whileHover={{ scale: 1.02 }}\r            >\r              <Card className=\"user-stat-card\">\r                <div className=\"stat-icon-box\" style={{\r                  background: `linear-gradient(135deg, ${stat.color}20 0%, ${stat.color}10 100%)`\r                }}>\r                  {stat.icon}\r                </div>\r                <div className=\"stat-value\">\r                  <CountUp end={stat.value} separator=\",\" duration={2} />\r                </div>\r                <div className=\"stat-label\">{stat.title}</div>\r                {stat.trend && (\r                  <div className=\"stat-trend\">\r                    <Tag \r                      color={stat.trend > 0 ? 'success' : 'error'}\r                      style={{ fontSize: 12 }}\r                    >\r                      {stat.trend > 0 ? '↑' : '↓'} {Math.abs(stat.trend)}%\r                    </Tag>\r                    <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                      geçen aya göre\r                    </Text>\r                  </div>\r                )}\r              </Card>\r            </motion.div>\r          </Col>\r        ))}\r      </Row>\r      {/* Filters */}\r      <Card className=\"filter-card glass-morphism\">\r        <Row gutter={[16, 16]} align=\"middle\">\r          <Col flex=\"auto\">\r            <Space size=\"middle\">\r              <Input\r                placeholder=\"Kullanıcı ara...\"\r                prefix={<SearchOutlined / aria-label=\"input field\">}\r                value={searchText}\r                onChange={(e) => setSearchText(e.target.value)}\r                style={{ width: 250 }}\r                allowClear\r              />\r              <Select\r                placeholder=\"Rol\"\r                value={filterRole}\r                onChange={setFilterRole}\r                style={{ width: 150 }}\r                allowClear\r               aria-label=\"select field\">\r                <Option value=\"SuperAdmin\">Super Admin</Option>\r                <Option value=\"Admin\">Admin</Option>\r                <Option value=\"Support\">Destek</Option>\r                <Option value=\"User\">Kullanıcı</Option>\r                <Option value=\"Viewer\">İzleyici</Option>\r              </Select>\r              <Select\r                placeholder=\"Durum\"\r                value={filterStatus}\r                onChange={setFilterStatus}\r                style={{ width: 120 }}\r                allowClear\r               aria-label=\"select field\">\r                <Option value={true}>Aktif</Option>\r                <Option value={false}>Pasif</Option>\r              </Select>\r            </Space>\r          </Col>\r          <Col>\r            <Button\r              icon={<ReloadOutlined />}\r              onClick={fetchUsers}\r              loading={loading}\r             aria-label=\"reload outlined\">\r              Yenile\r            </Button>\r          </Col>\r        </Row>\r      </Card>\r      {/* Table */}\r      <Card className=\"table-card glass-morphism\">\r        <Table\r          columns={columns}\r          dataSource={users}\r          rowKey=\"id\"\r          loading={loading}\r          pagination={pagination}\r          onChange={handleTableChange}\r        />\r      </Card>\r      {/* Create/Edit Modal */}\r      <Modal\r        title={selectedUser ? 'Kullanıcı Düzenle' : 'Yeni Kullanıcı'}\r        open={showModal}\r        onCancel={() => setShowModal(false)}\r        footer={null}\r        width={600}\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleSubmit}\r        >\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"firstName\"\r                label=\"Ad\"\r                rules={[{ required: true, message: 'Ad zorunlu' }]}\r              >\r                <Input placeholder=\"Ad\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"lastName\"\r                label=\"Soyad\"\r                rules={[{ required: true, message: 'Soyad zorunlu' }]}\r              >\r                <Input placeholder=\"Soyad\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          {!selectedUser && (\r            <Form.Item\r              name=\"username\"\r              label=\"Kullanıcı Adı\"\r              rules={[\r                { required: true, message: 'Kullanıcı adı zorunlu' },\r                { min: 3, message: 'En az 3 karakter olmalı' },\r              ]}\r            >\r              <Input placeholder=\"Kullanıcı adı\" / aria-label=\"input field\">\r            </Form.Item>\r          )}\r          <Form.Item\r            name=\"email\"\r            label=\"E-posta\"\r            rules={[\r              { required: true, message: 'E-posta zorunlu' },\r              { type: 'email', message: 'Geçerli bir e-posta girin' },\r            ]}\r          >\r            <Input placeholder=\"E-posta\" / aria-label=\"input field\">\r          </Form.Item>\r          {!selectedUser && (\r            <Form.Item\r              name=\"password\"\r              label=\"Şifre\"\r              rules={[\r                { required: true, message: 'Şifre zorunlu' },\r                { min: 6, message: 'En az 6 karakter olmalı' },\r              ]}\r            >\r              <Input.Password\r                placeholder=\"Şifre\"\r                iconRender={visible = aria-label=\"input field\"> (visible ? <EyeOutlined /> : <EyeInvisibleOutlined />)}\r              />\r            </Form.Item>\r          )}\r          <Form.Item\r            name=\"phoneNumber\"\r            label=\"Telefon\"\r          >\r            <Input placeholder=\"Telefon numarası\" / aria-label=\"input field\">\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"role\"\r                label=\"Rol\"\r                rules={[{ required: true, message: 'Rol seçimi zorunlu' }]}\r              >\r                <Select placeholder=\"Rol seçin\" aria-label=\"select field\">\r                  <Option value=\"Admin\">Admin</Option>\r                  <Option value=\"Support\">Destek</Option>\r                  <Option value=\"User\">Kullanıcı</Option>\r                  <Option value=\"Viewer\">İzleyici</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"isActive\"\r                label=\"Durum\"\r                valuePropName=\"checked\"\r                initialValue={true}\r              >\r                <Switch checkedChildren=\"Aktif\" unCheckedChildren=\"Pasif\" />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => setShowModal(false)}>İptal</Button>\r              <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\r                {selectedUser ? 'Güncelle' : 'Oluştur'}\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Password Reset Modal */}\r      <Modal\r        title=\"Şifre Sıfırla\"\r        open={showPasswordModal}\r        onCancel={() => setShowPasswordModal(false)}\r        footer={null}\r        width={400}\r      >\r        <Alert\r          message={`${selectedUser?.firstName} ${selectedUser?.lastName} kullanıcısının şifresini sıfırlıyorsunuz`}\r          type=\"info\"\r          showIcon\r          style={{ marginBottom: 16 }}\r        />\r        <Form\r          form={passwordForm}\r          layout=\"vertical\"\r          onFinish={handlePasswordSubmit}\r        >\r          <Form.Item\r            name=\"newPassword\"\r            label=\"Yeni Şifre\"\r            rules={[\r              { required: true, message: 'Şifre zorunlu' },\r              { min: 6, message: 'En az 6 karakter olmalı' },\r            ]}\r          >\r            <Input.Password\r              placeholder=\"Yeni şifre\"\r              iconRender={visible = aria-label=\"input field\"> (visible ? <EyeOutlined /> : <EyeInvisibleOutlined />)}\r            />\r          </Form.Item>\r          <Form.Item\r            name=\"confirmPassword\"\r            label=\"Şifre Tekrar\"\r            dependencies={['newPassword']}\r            rules={[\r              { required: true, message: 'Şifre tekrarı zorunlu' },\r              ({ getFieldValue }) => ({\r                validator(_, value) {\r                  if (!value || getFieldValue('newPassword') === value) {\r                    return Promise.resolve();\r                  }\r                  return Promise.reject(new Error('Şifreler eşleşmiyor'));\r                },\r              }),\r            ]}\r          >\r            <Input.Password\r              placeholder=\"Şifre tekrar\"\r              iconRender={visible = aria-label=\"input field\"> (visible ? <EyeOutlined /> : <EyeInvisibleOutlined />)}\r            />\r          </Form.Item>\r          <Form.Item>\r            <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r              <Button onClick={() => setShowPasswordModal(false)}>İptal</Button>\r              <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\r                Şifreyi Sıfırla\r              </Button>\r            </Space>\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Details Modal */}\r      <Modal\r        title=\"Kullanıcı Detayları\"\r        open={showDetailsModal}\r        onCancel={() => setShowDetailsModal(false)}\r        footer={[\r          <Button key=\"close\" onClick={() => setShowDetailsModal(false)}>\r            Kapat\r          </Button>,\r        ]}\r        width={700}\r      >\r        {selectedUser && (\r          <Tabs defaultActiveKey=\"1\">\r            <TabPane tab=\"Genel Bilgiler\" key=\"1\">\r              <Descriptions bordered column={2}>\r                <Descriptions.Item label=\"Ad Soyad\" span={2}>\r                  {selectedUser.firstName} {selectedUser.lastName}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Kullanıcı Adı\">\r                  @{selectedUser.username}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Rol\">\r                  <Tag color={getRoleColor(selectedUser.role)}>\r                    {selectedUser.role}\r                  </Tag>\r                </Descriptions.Item>\r                <Descriptions.Item label=\"E-posta\">\r                  {selectedUser.email}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Telefon\">\r                  {selectedUser.phoneNumber || '-'}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Durum\">\r                  <Tag color={selectedUser.isActive ? 'success' : 'error'}>\r                    {selectedUser.isActive ? 'Aktif' : 'Pasif'}\r                  </Tag>\r                </Descriptions.Item>\r                <Descriptions.Item label=\"2FA\">\r                  <Tag color={selectedUser.isTwoFactorEnabled ? 'success' : 'default'}>\r                    {selectedUser.isTwoFactorEnabled ? 'Aktif' : 'Pasif'}\r                  </Tag>\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Kayıt Tarihi\" span={2}>\r                  {dayjs(selectedUser.createdDate).format('DD MMMM YYYY HH:mm')}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Son Giriş\" span={2}>\r                  {selectedUser.lastLoginDate\r                    ? dayjs(selectedUser.lastLoginDate).format('DD MMMM YYYY HH:mm')\r                    : 'Henüz giriş yapmadı'}\r                </Descriptions.Item>\r              </Descriptions>\r            </TabPane>\r            <TabPane tab=\"Tenant Erişimleri\" key=\"2\">\r              {selectedUser.tenantAccess && selectedUser.tenantAccess.length > 0 ? (\r                <List\r                  dataSource={selectedUser.tenantAccess}\r                  renderItem={(tenant) => (\r                    <List.Item>\r                      <List.Item.Meta\r                        avatar={<ApartmentOutlined />}\r                        title={tenant}\r                        description=\"Erişim yetkisi var\"\r                      />\r                    </List.Item>\r                  )}\r                />\r              ) : (\r                <Alert\r                  message=\"Tenant Erişimi Yok\"\r                  description=\"Bu kullanıcının herhangi bir tenant'a erişimi bulunmuyor.\"\r                  type=\"info\"\r                  showIcon\r                />\r              )}\r            </TabPane>\r            <TabPane tab=\"İşlem Geçmişi\" key=\"3\">\r              <Timeline>\r                <Timeline.Item color=\"green\">\r                  Hesap oluşturuldu - {dayjs(selectedUser.createdDate).format('DD MMMM YYYY')}\r                </Timeline.Item>\r                {selectedUser.lastLoginDate && (\r                  <Timeline.Item color=\"blue\">\r                    Son giriş - {dayjs(selectedUser.lastLoginDate).fromNow()}\r                  </Timeline.Item>\r                )}\r              </Timeline>\r            </TabPane>\r          </Tabs>\r        )}\r      </Modal>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/master/pages/Users/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect, useRef } from 'react';\rimport {\r  Button,\r  Card,\r  Progress,\r  Space,\r  Typography,\r  Tooltip,\r  Avatar,\r  Badge,\r  Steps,\r  message\r} from 'antd';\rimport {\r  CloseOutlined,\r  ArrowLeftOutlined,\r  ArrowRightOutlined,\r  CheckCircleOutlined,\r  PlayCircleOutlined,\r  PauseCircleOutlined,\r  RedoOutlined,\r  StepForwardOutlined,\r  InfoCircleOutlined,\r  BulbOutlined,\r  RocketOutlined,\r  TrophyOutlined\r} from '@ant-design/icons';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport Joyride, { CallBackProps, STATUS, Step as JoyrideStep, Styles } from 'react-joyride';\rimport confetti from 'canvas-confetti';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Step } = Steps;\rinterface TourStep {\r  target: string;\r  title: string;\r  content: string;\r  placement?: 'top' | 'bottom' | 'left' | 'right' | 'center';\r  disableBeacon?: boolean;\r  spotlightClicks?: boolean;\r  styles?: Partial<Styles>;\r  action?: () => void;\r}\rinterface OnboardingTourProps {\r  steps: TourStep[];\r  onComplete?: () => void;\r  onSkip?: () => void;\r  showProgress?: boolean;\r  continuous?: boolean;\r  autoStart?: boolean;\r  userId?: string;\r}\rexport const OnboardingTour: React.FC<OnboardingTourProps> = ({\r  steps,\r  onComplete,\r  onSkip,\r  showProgress = true,\r  continuous = true,\r  autoStart = false,\r  userId\r}) => {\r  const [run, setRun] = useState(autoStart);\r  const [stepIndex, setStepIndex] = useState(0);\r  const [tourProgress, setTourProgress] = useState(0);\r  const [isPaused, setIsPaused] = useState(false);\r  const [achievements, setAchievements] = useState<string[]>([]);\r  // Convert custom steps to Joyride format\r  const joyrideSteps: JoyrideStep[] = steps.map(step => ({\r    target: step.target,\r    title: step.title,\r    content: (\r      <div className=\"tour-step-content\">\r        <Paragraph>{step.content}</Paragraph>\r        {step.action && (\r          <Button \r            type=\"primary\" \r            size=\"small\" \r            onClick={step.action}\r            style={{ marginTop: 8 }}\r          >\r            Try it\r          </Button>\r        )}\r      </div>\r    ),\r    placement: step.placement || 'bottom',\r    disableBeacon: step.disableBeacon,\r    spotlightClicks: step.spotlightClicks,\r    styles: {\r      options: {\r        primaryColor: '#667eea',\r        zIndex: 10000,\r        ...step.styles?.options\r      },\r      ...step.styles\r    }\r  }));\r  const handleJoyrideCallback = (data: CallBackProps) => {\r    const { status, index, type } = data;\r    if (type === 'step:after') {\r      setStepIndex(index + 1);\r      setTourProgress(((index + 1) / steps.length) * 100);\r      // Check for achievements\r      checkAchievements(index + 1);\r    }\r    if (status === STATUS.FINISHED) {\r      handleTourComplete();\r    } else if (status === STATUS.SKIPPED) {\r      handleTourSkip();\r    }\r  };\r  const checkAchievements = (completedSteps: number) => {\r    const newAchievements = [];\r    if (completedSteps === 1) {\r      newAchievements.push('first_step');\r      showAchievement('İlk Adım', 'Turu başlattınız!');\r    }\r    if (completedSteps === Math.floor(steps.length / 2)) {\r      newAchievements.push('halfway');\r      showAchievement('Yarı Yol', 'Turun yarısını tamamladınız!');\r    }\r    if (completedSteps === steps.length) {\r      newAchievements.push('completed');\r      showAchievement('Tur Tamamlandı', 'Tüm adımları bitirdiniz!');\r    }\r    setAchievements(prev => [...prev, ...newAchievements]);\r  };\r  const showAchievement = (title: string, description: string) => {\r    message.success({\r      content: (\r        <Space>\r          <TrophyOutlined style={{ color: '#faad14', fontSize: 20 }} />\r          <div>\r            <Text strong>{title}</Text>\r            <br />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>{description}</Text>\r          </div>\r        </Space>\r      ),\r      duration: 3\r    });\r  };\r  const handleTourComplete = () => {\r    // Trigger confetti animation\r    confetti({\r      particleCount: 100,\r      spread: 70,\r      origin: { y: 0.6 }\r    });\r    // Save completion to localStorage\r    const completionData = {\r      userId,\r      completedAt: new Date().toISOString(),\r      steps: steps.length,\r      achievements\r    };\r    localStorage.setItem('onboarding_completed', JSON.stringify(completionData));\r    if (onComplete) {\r      onComplete();\r    }\r    message.success('Tebrikler! Onboarding turu tamamlandı 🎉');\r  };\r  const handleTourSkip = () => {\r    if (onSkip) {\r      onSkip();\r    }\r    setRun(false);\r    message.info('Tur atlandı. İstediğiniz zaman tekrar başlatabilirsiniz.');\r  };\r  const startTour = () => {\r    setRun(true);\r    setStepIndex(0);\r    setTourProgress(0);\r  };\r  const pauseTour = () => {\r    setIsPaused(true);\r    setRun(false);\r  };\r  const resumeTour = () => {\r    setIsPaused(false);\r    setRun(true);\r  };\r  const restartTour = () => {\r    setStepIndex(0);\r    setTourProgress(0);\r    setRun(true);\r    setIsPaused(false);\r  };\r  return (\r    <>\r      <Joyride\r        steps={joyrideSteps}\r        run={run}\r        stepIndex={stepIndex}\r        continuous={continuous}\r        showProgress={false}\r        showSkipButton\r        callback={handleJoyrideCallback}\r        locale={{\r          back: 'Geri',\r          close: 'Kapat',\r          last: 'Bitir',\r          next: 'İleri',\r          open: 'Aç',\r          skip: 'Atla'\r        }}\r        styles={{\r          options: {\r            primaryColor: '#667eea',\r            zIndex: 10000\r          }\r        }}\r      />\r      {/* Floating Control Panel */}\r      {showProgress && run && (\r        <motion.div\r          className=\"tour-control-panel\"\r          initial={{ opacity: 0, y: 20 }}\r          animate={{ opacity: 1, y: 0 }}\r          exit={{ opacity: 0, y: 20 }}\r        >\r          <Card size=\"small\" className=\"tour-control-card\">\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <div className=\"tour-header\">\r                <Space>\r                  <RocketOutlined style={{ color: '#667eea' }} />\r                  <Text strong>Onboarding Turu</Text>\r                </Space>\r                <Button\r                  type=\"text\"\r                  icon={<CloseOutlined />}\r                  size=\"small\"\r                  onClick={handleTourSkip}\r                / aria-label=\"close outlined\">\r              </div>\r              <Progress\r                percent={tourProgress}\r                strokeColor={{\r                  '0%': '#667eea',\r                  '100%': '#764ba2'\r                }}\r                size=\"small\"\r              />\r              <div className=\"tour-info\">\r                <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                  Adım {stepIndex + 1} / {steps.length}\r                </Text>\r              </div>\r              <Space>\r                {isPaused ? (\r                  <Tooltip title=\"Devam Et\">\r                    <Button\r                      icon={<PlayCircleOutlined />}\r                      size=\"small\"\r                      onClick={resumeTour}\r                    / aria-label=\"play circle outlined\">\r                  </Tooltip>\r                ) : (\r                  <Tooltip title=\"Duraklat\">\r                    <Button\r                      icon={<PauseCircleOutlined />}\r                      size=\"small\"\r                      onClick={pauseTour}\r                    / aria-label=\"pause circle outlined\">\r                  </Tooltip>\r                )}\r                <Tooltip title=\"Baştan Başla\">\r                  <Button\r                    icon={<RedoOutlined />}\r                    size=\"small\"\r                    onClick={restartTour}\r                  / aria-label=\"redo outlined\">\r                </Tooltip>\r                <Tooltip title=\"Turu Atla\">\r                  <Button\r                    icon={<StepForwardOutlined />}\r                    size=\"small\"\r                    onClick={handleTourSkip}\r                  / aria-label=\"step forward outlined\">\r                </Tooltip>\r              </Space>\r            </Space>\r          </Card>\r        </motion.div>\r      )}\r      {/* Start Tour Button (when tour is not running) */}\r      {!run && (\r        <motion.div\r          className=\"tour-start-button\"\r          initial={{ scale: 0 }}\r          animate={{ scale: 1 }}\r          whileHover={{ scale: 1.1 }}\r          whileTap={{ scale: 0.9 }}\r        >\r          <Tooltip title=\"Tur Başlat\">\r            <Button\r              type=\"primary\"\r              shape=\"circle\"\r              icon={<BulbOutlined />}\r              size=\"large\"\r              onClick={startTour}\r              style={{\r                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\r                border: 'none',\r                boxShadow: '0 4px 12px rgba(102, 126, 234, 0.3)'\r              }}\r            / aria-label=\"bulb outlined\">\r          </Tooltip>\r        </motion.div>\r      )}\r    </>\r  );\r};\r// Interactive Walkthrough Component\rinterface InteractiveWalkthroughProps {\r  title: string;\r  description: string;\r  steps: Array<{\r    title: string;\r    description: string;\r    action?: () => void;\r    completed?: boolean;\r  }>;\r  onComplete?: () => void;\r}\rexport const InteractiveWalkthrough: React.FC<InteractiveWalkthroughProps> = ({\r  title,\r  description,\r  steps,\r  onComplete\r}) => {\r  const [currentStep, setCurrentStep] = useState(0);\r  const [completedSteps, setCompletedSteps] = useState<number[]>([]);\r  const handleStepComplete = (index: number) => {\r    setCompletedSteps(prev => [...prev, index]);\r    if (index < steps.length - 1) {\r      setCurrentStep(index + 1);\r    } else {\r      if (onComplete) {\r        onComplete();\r      }\r      message.success('Walkthrough tamamlandı!');\r    }\r  };\r  return (\r    <Card className=\"interactive-walkthrough\">\r      <Title level={4}>{title}</Title>\r      <Paragraph>{description}</Paragraph>\r      <Steps current={currentStep} style={{ marginTop: 24 }}>\r        {steps.map((step, index) => (\r          <Step\r            key={index}\r            title={step.title}\r            status={\r              completedSteps.includes(index) \r                ? 'finish' \r                : index === currentStep \r                ? 'process' \r                : 'wait'\r            }\r            icon={\r              completedSteps.includes(index) \r                ? <CheckCircleOutlined /> \r                : undefined\r            }\r          />\r        ))}\r      </Steps>\r      <Card\r        style={{ marginTop: 24 }}\r        className=\"walkthrough-step-card\"\r      >\r        <Title level={5}>{steps[currentStep]?.title}</Title>\r        <Paragraph>{steps[currentStep]?.description}</Paragraph>\r        <Space>\r          <Button\r            type=\"primary\"\r            onClick={() => {\r              if (steps[currentStep]?.action) {\r                steps[currentStep].action!();\r              }\r              handleStepComplete(currentStep);\r            }}\r          >\r            {currentStep === steps.length - 1 ? 'Tamamla' : 'Devam'}\r          </Button>\r          {currentStep > 0 && (\r            <Button onClick={() => setCurrentStep(currentStep - 1)}>\r              Geri\r            </Button>\r          )}\r        </Space>\r      </Card>\r    </Card>\r  );\r};\r// Checklist Component\rinterface ChecklistItem {\r  id: string;\r  title: string;\r  description?: string;\r  completed: boolean;\r  required?: boolean;\r}\rinterface OnboardingChecklistProps {\r  items: ChecklistItem[];\r  onItemComplete?: (itemId: string) => void;\r  title?: string;\r}\rexport const OnboardingChecklist: React.FC<OnboardingChecklistProps> = ({\r  items,\r  onItemComplete,\r  title = 'Başlangıç Kontrol Listesi'\r}) => {\r  const completedCount = items.filter(item => item.completed).length;\r  const progress = (completedCount / items.length) * 100;\r  return (\r    <Card className=\"onboarding-checklist\">\r      <Space direction=\"vertical\" style={{ width: '100%' }}>\r        <div className=\"checklist-header\">\r          <Title level={4}>{title}</Title>\r          <Badge\r            count={`${completedCount}/${items.length}`}\r            style={{ backgroundColor: progress === 100 ? '#52c41a' : '#667eea' }}\r          />\r        </div>\r        <Progress\r          percent={progress}\r          strokeColor={{\r            '0%': '#667eea',\r            '100%': '#764ba2'\r          }}\r          status={progress === 100 ? 'success' : 'active'}\r        />\r        <div className=\"checklist-items\">\r          {items.map(item => (\r            <motion.div\r              key={item.id}\r              className={`checklist-item ${item.completed ? 'completed' : ''}`}\r              whileHover={{ scale: 1.02 }}\r              whileTap={{ scale: 0.98 }}\r              onClick={() => !item.completed && onItemComplete && onItemComplete(item.id)}\r            >\r              <Space>\r                {item.completed ? (\r                  <CheckCircleOutlined style={{ color: '#52c41a', fontSize: 20 }} />\r                ) : (\r                  <div className=\"checklist-checkbox\" />\r                )}\r                <div>\r                  <Text strong={!item.completed} delete={item.completed}>\r                    {item.title}\r                  </Text>\r                  {item.required && !item.completed && (\r                    <Badge status=\"error\" text=\"Zorunlu\" style={{ marginLeft: 8 }} />\r                  )}\r                  {item.description && (\r                    <Text type=\"secondary\" style={{ display: 'block', fontSize: 12 }}>\r                      {item.description}\r                    </Text>\r                  )}\r                </div>\r              </Space>\r            </motion.div>\r          ))}\r        </div>\r        {progress === 100 && (\r          <motion.div\r            initial={{ opacity: 0, scale: 0.8 }}\r            animate={{ opacity: 1, scale: 1 }}\r            className=\"checklist-complete\"\r          >\r            <TrophyOutlined style={{ fontSize: 32, color: '#faad14' }} />\r            <Title level={5}>Tebrikler!</Title>\r            <Text>Tüm görevleri tamamladınız!</Text>\r          </motion.div>\r        )}\r      </Space>\r    </Card>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/onboarding/components/OnboardingTour/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { useNavigate, useSearchParams } from 'react-router-dom';\rimport {\r  Card,\r  Form,\r  Input,\r  Button,\r  Row,\r  Col,\r  Typography,\r  Space,\r  Alert,\r  Modal,\r  Steps,\r  Spin,\r  Divider,\r  Radio,\r  Select,\r  Checkbox,\r  message,\r  Tag,\r  Statistic,\r  Progress,\r  InputNumber,\r  Tooltip,\r  Badge,\r  Result,\r  List,\r  Avatar,\r  Tabs\r} from 'antd';\rimport {\r  CreditCardOutlined,\r  LockOutlined,\r  SafetyOutlined,\r  CheckCircleOutlined,\r  LoadingOutlined,\r  BankOutlined,\r  MobileOutlined,\r  WalletOutlined,\r  InfoCircleOutlined,\r  SecurityScanOutlined,\r  GlobalOutlined,\r  FieldTimeOutlined,\r  FileProtectOutlined,\r  ShoppingCartOutlined,\r  CalendarOutlined,\r  UserOutlined,\r  PhoneOutlined,\r  MailOutlined,\r  EnvironmentOutlined,\r  ExclamationCircleOutlined\r} from '@ant-design/icons';\rimport { apiClient } from '@/shared/api/client';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Step } = Steps;\rconst { TabPane } = Tabs;\rinterface PaymentData {\r  tenantId: string;\r  packageId: string;\r  packageName: string;\r  amount: number;\r  currency: string;\r  billingPeriod: string;\r  companyName: string;\r  contactEmail: string;\r}\rexport const PaymentPage: React.FC = () => {\r  const navigate = useNavigate();\r  const [searchParams] = useSearchParams();\r  const [form] = Form.useForm();\r  // Payment states\r  const [paymentMethod, setPaymentMethod] = useState<'credit_card' | 'bank_transfer' | 'digital_wallet'>('credit_card');\r  const [currentStep, setCurrentStep] = useState(0);\r  const [processing, setProcessing] = useState(false);\r  const [show3DSecure, setShow3DSecure] = useState(false);\r  const [smsCode, setSmsCode] = useState('');\r  const [timeLeft, setTimeLeft] = useState(180); // 3 minutes for 3D Secure\r  const [paymentComplete, setPaymentComplete] = useState(false);\r  const [transactionId, setTransactionId] = useState('');\r  const [invoiceNumber, setInvoiceNumber] = useState('');\r  // Payment data from registration\r  const [paymentData, setPaymentData] = useState<PaymentData | null>(null);\r  // Card display states\r  const [cardNumber, setCardNumber] = useState('');\r  const [cardName, setCardName] = useState('');\r  const [cardExpiry, setCardExpiry] = useState('');\r  const [cardCvv, setCardCvv] = useState('');\r  const [cardType, setCardType] = useState('');\r  const [installment, setInstallment] = useState(1);\r  useEffect(() => {\r    // Get payment data from URL params or session\r    const data: PaymentData = {\r      tenantId: searchParams.get('tenantId') || '',\r      packageId: searchParams.get('packageId') || '',\r      packageName: searchParams.get('package') || 'Profesyonel',\r      amount: Number(searchParams.get('amount')) || 999,\r      currency: '₺',\r      billingPeriod: searchParams.get('period') || 'Monthly',\r      companyName: searchParams.get('company') || 'Demo Şirket',\r      contactEmail: searchParams.get('email') || 'demo@example.com'\r    };\r    setPaymentData(data);\r  }, [searchParams]);\r  // 3D Secure countdown timer\r  useEffect(() => {\r    if (show3DSecure && timeLeft > 0) {\r      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\r      return () => clearTimeout(timer);\r    } else if (timeLeft === 0) {\r      message.error('3D Secure doğrulama süresi doldu');\r      setShow3DSecure(false);\r      setTimeLeft(180);\r    }\r  }, [show3DSecure, timeLeft]);\r  // Detect card type\r  const detectCardType = (number: string) => {\r    const cleanNumber = number.replace(/\\s/g, '');\r    if (cleanNumber.startsWith('4')) return 'visa';\r    if (cleanNumber.startsWith('5')) return 'mastercard';\r    if (cleanNumber.startsWith('3')) return 'amex';\r    if (cleanNumber.startsWith('6')) return 'troy';\r    return '';\r  };\r  // Format card number\r  const formatCardNumber = (value: string) => {\r    const v = value.replace(/\\s+/g, '').replace(/[^0-9]/gi, '');\r    const matches = v.match(/\\d{4,16}/g);\r    const match = (matches && matches[0]) || '';\r    const parts = [];\r    for (let i = 0, len = match.length; i < len; i += 4) {\r      parts.push(match.substring(i, i + 4));\r    }\r    if (parts.length) {\r      return parts.join(' ');\r    } else {\r      return value;\r    }\r  };\r  // Format expiry date\r  const formatExpiry = (value: string) => {\r    const v = value.replace(/\\s+/g, '').replace(/[^0-9]/gi, '');\r    if (v.length >= 2) {\r      return v.substring(0, 2) + '/' + v.substring(2, 4);\r    }\r    return v;\r  };\r  // Handle card number change\r  const handleCardNumberChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r    const formatted = formatCardNumber(e.target.value);\r    setCardNumber(formatted);\r    setCardType(detectCardType(formatted));\r  };\r  // Calculate installment options\r  const calculateInstallments = () => {\r    if (!paymentData) return [];\r    const baseAmount = paymentData.amount;\r    const installmentOptions = [\r      { value: 1, label: 'Tek Çekim', amount: baseAmount },\r      { value: 2, label: '2 Taksit', amount: baseAmount / 2 },\r      { value: 3, label: '3 Taksit', amount: baseAmount / 3 },\r      { value: 6, label: '6 Taksit', amount: baseAmount / 6 },\r      { value: 9, label: '9 Taksit', amount: baseAmount / 9 },\r      { value: 12, label: '12 Taksit', amount: baseAmount / 12 }\r    ];\r    return installmentOptions;\r  };\r  // Process credit card payment\r  const processCreditCardPayment = async (values: any) => {\r    setProcessing(true);\r    setCurrentStep(1);\r    // Simulate payment gateway processing\r    await new Promise(resolve => setTimeout(resolve, 2000));\r    // Show 3D Secure\r    setShow3DSecure(true);\r    setProcessing(false);\r  };\r  // Verify 3D Secure\r  const verify3DSecure = async () => {\r    if (smsCode !== '123456') {\r      message.error('Doğrulama kodu hatalı');\r      return;\r    }\r    setProcessing(true);\r    setShow3DSecure(false);\r    setCurrentStep(2);\r    // Simulate final payment processing\r    await new Promise(resolve => setTimeout(resolve, 3000));\r    // Generate transaction details\r    const txId = `TRX${Date.now()}`;\r    const invNo = `INV-${Date.now()}`;\r    setTransactionId(txId);\r    setInvoiceNumber(invNo);\r    // Call backend to complete payment\r    try {\r      await apiClient.post('/api/public/process-payment', {\r        tenantId: paymentData?.tenantId,\r        packageId: paymentData?.packageId,\r        amount: paymentData?.amount,\r        currency: paymentData?.currency,\r        paymentMethod: 'credit_card',\r        billingPeriod: paymentData?.billingPeriod,\r        transactionId: txId,\r        invoiceNumber: invNo\r      });\r      setPaymentComplete(true);\r      message.success('Ödeme başarıyla tamamlandı!');\r    } catch (error) {\r      message.error('Ödeme işlemi başarısız');\r    } finally {\r      setProcessing(false);\r    }\r  };\r  // Render credit card form\r  const renderCreditCardForm = () => (\r    <div className=\"payment-form-container\">\r      <Row gutter={[32, 32]}>\r        <Col xs={24} lg={14}>\r          <Card className=\"payment-form-card\">\r            <Title level={4}>\r              <CreditCardOutlined /> Kart Bilgileri\r            </Title>\r            <Form\r              form={form}\r              layout=\"vertical\"\r              onFinish={processCreditCardPayment}\r              autoComplete=\"off\"\r            >\r              <Form.Item\r                label=\"Kart Numarası\"\r                name=\"cardNumber\"\r                rules={[\r                  { required: true, message: 'Kart numarası zorunludur' },\r                  { pattern: /^[\\d\\s]{19}$/, message: 'Geçerli bir kart numarası giriniz' }\r                ]}\r              >\r                <Input\r                  size=\"large\"\r                  placeholder=\"1234 5678 9012 3456\"\r                  value={cardNumber}\r                  onChange={handleCardNumberChange}\r                  maxLength={19}\r                  prefix={<CreditCardOutlined / aria-label=\"input field\">}\r                  suffix={\r                    cardType && (\r                      <img\r                        src={`/images/cards/${cardType}.png`}\r                        alt={cardType}\r                        style={{ height: 20 }}\r                      />\r                    )\r                  }\r                />\r              </Form.Item>\r              <Form.Item\r                label=\"Kart Üzerindeki İsim\"\r                name=\"cardName\"\r                rules={[{ required: true, message: 'Kart sahibi adı zorunludur' }]}\r              >\r                <Input\r                  size=\"large\"\r                  placeholder=\"AD SOYAD\"\r                  value={cardName}\r                  onChange={(e) = aria-label=\"input field\"> setCardName(e.target.value.toUpperCase())}\r                  style={{ textTransform: 'uppercase' }}\r                />\r              </Form.Item>\r              <Row gutter={16}>\r                <Col span={12}>\r                  <Form.Item\r                    label=\"Son Kullanma Tarihi\"\r                    name=\"expiry\"\r                    rules={[\r                      { required: true, message: 'Son kullanma tarihi zorunludur' },\r                      { pattern: /^(0[1-9]|1[0-2])\\/\\d{2}$/, message: 'AA/YY formatında giriniz' }\r                    ]}\r                  >\r                    <Input\r                      size=\"large\"\r                      placeholder=\"AA/YY\"\r                      value={cardExpiry}\r                      onChange={(e) = aria-label=\"input field\"> setCardExpiry(formatExpiry(e.target.value))}\r                      maxLength={5}\r                    />\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item\r                    label={\r                      <Space>\r                        CVV\r                        <Tooltip title=\"Kartınızın arkasındaki 3 haneli güvenlik kodu\">\r                          <InfoCircleOutlined />\r                        </Tooltip>\r                      </Space>\r                    }\r                    name=\"cvv\"\r                    rules={[\r                      { required: true, message: 'CVV zorunludur' },\r                      { pattern: /^\\d{3,4}$/, message: '3 veya 4 haneli CVV giriniz' }\r                    ]}\r                  >\r                    <Input.Password\r                      size=\"large\"\r                      placeholder=\"123\"\r                      value={cardCvv}\r                      onChange={(e) = aria-label=\"input field\"> setCardCvv(e.target.value)}\r                      maxLength={4}\r                    />\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item label=\"Taksit Seçenekleri\">\r                <Radio.Group\r                  value={installment}\r                  onChange={(e) => setInstallment(e.target.value)}\r                  style={{ width: '100%' }}\r                >\r                  <Row gutter={[8, 8]}>\r                    {calculateInstallments().map((option) => (\r                      <Col span={8} key={option.value}>\r                        <Radio.Button value={option.value} style={{ width: '100%', textAlign: 'center' }}>\r                          <div>\r                            <Text strong>{option.label}</Text>\r                            <br />\r                            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                              {paymentData?.currency}{option.amount.toFixed(2)}\r                            </Text>\r                          </div>\r                        </Radio.Button>\r                      </Col>\r                    ))}\r                  </Row>\r                </Radio.Group>\r              </Form.Item>\r              <Divider />\r              <Form.Item\r                name=\"saveCard\"\r                valuePropName=\"checked\"\r              >\r                <Checkbox>\r                  Kartımı gelecek ödemeler için kaydet\r                </Checkbox>\r              </Form.Item>\r              <Form.Item\r                name=\"agreement\"\r                valuePropName=\"checked\"\r                rules={[\r                  {\r                    validator: (_, value) =>\r                      value ? Promise.resolve() : Promise.reject(new Error('Sözleşmeyi kabul etmelisiniz')),\r                  },\r                ]}\r              >\r                <Checkbox>\r                  <a href=\"#\" target=\"_blank\">Ön Bilgilendirme Formu</a> ve{' '}\r                  <a href=\"#\" target=\"_blank\">Mesafeli Satış Sözleşmesi</a>'ni okudum ve kabul ediyorum\r                </Checkbox>\r              </Form.Item>\r              <Button\r                type=\"primary\"\r                htmlType=\"submit\"\r                size=\"large\"\r                block\r                loading={processing}\r                icon={<LockOutlined />}\r               aria-label=\"lock outlined\">\r                Güvenli Ödeme Yap\r              </Button>\r            </Form>\r            <Divider />\r            <div className=\"security-badges\">\r              <Space size=\"large\" wrap>\r                <Space>\r                  <SafetyOutlined style={{ fontSize: 24, color: '#52c41a' }} />\r                  <Text>256-bit SSL</Text>\r                </Space>\r                <Space>\r                  <SecurityScanOutlined style={{ fontSize: 24, color: '#1890ff' }} />\r                  <Text>PCI DSS</Text>\r                </Space>\r                <Space>\r                  <FileProtectOutlined style={{ fontSize: 24, color: '#722ed1' }} />\r                  <Text>3D Secure</Text>\r                </Space>\r              </Space>\r            </div>\r          </Card>\r          {/* Bank logos */}\r          <Card className=\"bank-logos\" style={{ marginTop: 16 }}>\r            <Text type=\"secondary\">Anlaşmalı Bankalar:</Text>\r            <div className=\"bank-logo-grid\">\r              {['garanti', 'isbank', 'akbank', 'yapikredi', 'qnb', 'denizbank', 'teb', 'ing'].map(bank => (\r                <div key={bank} className=\"bank-logo\">\r                  <img src={`/images/banks/${bank}.png`} alt={bank} />\r                </div>\r              ))}\r            </div>\r          </Card>\r        </Col>\r        <Col xs={24} lg={10}>\r          {/* Visual credit card */}\r          <div className=\"credit-card-visual\">\r            <div className={`credit-card ${cardType}`}>\r              <div className=\"card-front\">\r                <div className=\"card-chip\"></div>\r                <div className=\"card-logo\">\r                  {cardType && <img src={`/images/cards/${cardType}-white.png`} alt={cardType} />}\r                </div>\r                <div className=\"card-number\">\r                  {cardNumber || '•••• •••• •••• ••••'}\r                </div>\r                <div className=\"card-info\">\r                  <div className=\"card-holder\">\r                    <Text className=\"label\">Card Holder</Text>\r                    <Text className=\"value\">{cardName || 'AD SOYAD'}</Text>\r                  </div>\r                  <div className=\"card-expiry\">\r                    <Text className=\"label\">Expires</Text>\r                    <Text className=\"value\">{cardExpiry || 'AA/YY'}</Text>\r                  </div>\r                </div>\r              </div>\r            </div>\r          </div>\r          {/* Order summary */}\r          <Card className=\"order-summary\" style={{ marginTop: 24 }}>\r            <Title level={4}>\r              <ShoppingCartOutlined /> Sipariş Özeti\r            </Title>\r            <div className=\"summary-item\">\r              <Text>Şirket:</Text>\r              <Text strong>{paymentData?.companyName}</Text>\r            </div>\r            <div className=\"summary-item\">\r              <Text>Paket:</Text>\r              <Text strong>{paymentData?.packageName}</Text>\r            </div>\r            <div className=\"summary-item\">\r              <Text>Dönem:</Text>\r              <Text strong>\r                {paymentData?.billingPeriod === 'Monthly' ? 'Aylık' : 'Yıllık'}\r              </Text>\r            </div>\r            {installment > 1 && (\r              <div className=\"summary-item\">\r                <Text>Taksit:</Text>\r                <Text strong>{installment} Taksit</Text>\r              </div>\r            )}\r            <Divider />\r            <div className=\"summary-total\">\r              <Title level={5}>Toplam Tutar</Title>\r              <Title level={3} style={{ margin: 0, color: '#52c41a' }}>\r                {paymentData?.currency}{paymentData?.amount}\r              </Title>\r              {installment > 1 && (\r                <Text type=\"secondary\">\r                  {installment} x {paymentData?.currency}\r                  {(paymentData?.amount || 0) / installment}\r                </Text>\r              )}\r            </div>\r            <Alert\r              message=\"Güvenli Ödeme\"\r              description=\"Tüm işlemleriniz 256-bit SSL ile korunmaktadır\"\r              type=\"success\"\r              showIcon\r              icon={<SafetyOutlined />}\r              style={{ marginTop: 16 }}\r            />\r          </Card>\r          {/* Help section */}\r          <Card style={{ marginTop: 16 }}>\r            <Title level={5}>Yardım ve Destek</Title>\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <Text>\r                <PhoneOutlined /> 0850 123 45 67\r              </Text>\r              <Text>\r                <MailOutlined /> destek@stocker.com\r              </Text>\r              <Text>\r                <FieldTimeOutlined /> 7/24 Canlı Destek\r              </Text>\r            </Space>\r          </Card>\r        </Col>\r      </Row>\r    </div>\r  );\r  // Render 3D Secure modal\r  const render3DSecure = () => (\r    <Modal\r      title={\r        <Space>\r          <SecurityScanOutlined style={{ color: '#1890ff' }} />\r          3D Secure Doğrulama\r        </Space>\r      }\r      visible={show3DSecure}\r      footer={null}\r      closable={false}\r      width={500}\r    >\r      <div className=\"secure-3d-container\">\r        <Alert\r          message=\"Güvenlik Doğrulaması\"\r          description=\"Bankanız tarafından cep telefonunuza SMS ile gönderilen 6 haneli doğrulama kodunu giriniz.\"\r          type=\"info\"\r          showIcon\r          style={{ marginBottom: 24 }}\r        />\r        <div className=\"bank-info\">\r          <img src=\"/images/banks/bank-logo.png\" alt=\"Bank\" style={{ height: 40 }} />\r          <Title level={5} style={{ margin: '16px 0' }}>\r            DEMO BANK 3D Secure\r          </Title>\r        </div>\r        <div className=\"transaction-info\">\r          <div className=\"info-row\">\r            <Text type=\"secondary\">İşyeri:</Text>\r            <Text strong>Stocker SaaS Platform</Text>\r          </div>\r          <div className=\"info-row\">\r            <Text type=\"secondary\">Tutar:</Text>\r            <Text strong>{paymentData?.currency}{paymentData?.amount}</Text>\r          </div>\r          <div className=\"info-row\">\r            <Text type=\"secondary\">Tarih:</Text>\r            <Text strong>{new Date().toLocaleString('tr-TR')}</Text>\r          </div>\r          <div className=\"info-row\">\r            <Text type=\"secondary\">Kart:</Text>\r            <Text strong>**** **** **** {cardNumber.slice(-4)}</Text>\r          </div>\r        </div>\r        <Divider />\r        <Form onFinish={verify3DSecure}>\r          <Form.Item\r            label=\"SMS Doğrulama Kodu\"\r            name=\"smsCode\"\r            rules={[{ required: true, message: 'Doğrulama kodu zorunludur' }]}\r            extra={\r              <Space>\r                <Text type=\"secondary\">Demo için kod:</Text>\r                <Text type=\"success\" strong>123456</Text>\r              </Space>\r            }\r          >\r            <Input\r              size=\"large\"\r              placeholder=\"6 haneli kod\"\r              maxLength={6}\r              value={smsCode}\r              onChange={(e) = aria-label=\"input field\"> setSmsCode(e.target.value)}\r              prefix={<MobileOutlined />}\r              suffix={\r                <Text type=\"secondary\">\r                  {Math.floor(timeLeft / 60)}:{(timeLeft % 60).toString().padStart(2, '0')}\r                </Text>\r              }\r            />\r          </Form.Item>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Button\r                size=\"large\"\r                block\r                onClick={() => {\r                  setShow3DSecure(false);\r                  message.info('İşlem iptal edildi');\r                }}\r              >\r                İptal\r              </Button>\r            </Col>\r            <Col span={12}>\r              <Button\r                type=\"primary\"\r                size=\"large\"\r                block\r                htmlType=\"submit\"\r                loading={processing}\r              >\r                Doğrula ve Öde\r              </Button>\r            </Col>\r          </Row>\r        </Form>\r        <Alert\r          message=\"Test Ortamı\"\r          description=\"Bu bir test işlemidir. Gerçek ödeme alınmayacaktır.\"\r          type=\"warning\"\r          style={{ marginTop: 16 }}\r        />\r      </div>\r    </Modal>\r  );\r  // Render payment success\r  const renderPaymentSuccess = () => (\r    <Result\r      status=\"success\"\r      title=\"Ödeme Başarılı!\"\r      subTitle={\r        <div>\r          <Paragraph>\r            Ödemeniz başarıyla alındı ve hesabınız aktif edildi.\r          </Paragraph>\r          <Space direction=\"vertical\" style={{ width: '100%', marginTop: 24 }}>\r            <div className=\"success-detail\">\r              <Text type=\"secondary\">İşlem No:</Text>\r              <Text strong copyable>{transactionId}</Text>\r            </div>\r            <div className=\"success-detail\">\r              <Text type=\"secondary\">Fatura No:</Text>\r              <Text strong copyable>{invoiceNumber}</Text>\r            </div>\r            <div className=\"success-detail\">\r              <Text type=\"secondary\">Tutar:</Text>\r              <Text strong>\r                {paymentData?.currency}{paymentData?.amount}\r              </Text>\r            </div>\r            <div className=\"success-detail\">\r              <Text type=\"secondary\">Tarih:</Text>\r              <Text strong>{new Date().toLocaleString('tr-TR')}</Text>\r            </div>\r          </Space>\r        </div>\r      }\r      extra={[\r        <Button key=\"invoice\" icon={<FileProtectOutlined />} aria-label=\"file protect outlined\">\r          Faturayı İndir\r        </Button>,\r        <Button\r          type=\"primary\"\r          key=\"console\"\r          icon={<CheckCircleOutlined />}\r          onClick={() = aria-label=\"check circle outlined\"> navigate('/login')}\r        >\r          Panele Git\r        </Button>\r      ]}\r    />\r  );\r  if (!paymentData) {\r    return (\r      <div style={{ textAlign: 'center', padding: 100 }}>\r        <Spin size=\"large\" />\r      </div>\r    );\r  }\r  return (\r    <div className=\"payment-page\">\r      <div className=\"payment-header\">\r        <div className=\"container\">\r          <Space size=\"large\">\r            <img src=\"/logo.png\" alt=\"Stocker\" style={{ height: 40 }} />\r            <Title level={3} style={{ margin: 0, color: '#fff' }}>\r              Güvenli Ödeme\r            </Title>\r          </Space>\r          <Space>\r            <SafetyOutlined style={{ fontSize: 24, color: '#52c41a' }} />\r            <Text style={{ color: '#fff' }}>256-bit SSL Güvenlik</Text>\r          </Space>\r        </div>\r      </div>\r      <div className=\"payment-content\">\r        <div className=\"container\">\r          <Steps\r            current={currentStep}\r            style={{ marginBottom: 32 }}\r            items={[\r              {\r                title: 'Ödeme Bilgileri',\r                icon: <CreditCardOutlined />\r              },\r              {\r                title: 'Doğrulama',\r                icon: <SecurityScanOutlined />\r              },\r              {\r                title: 'Tamamlandı',\r                icon: <CheckCircleOutlined />\r              }\r            ]}\r          />\r          {paymentComplete ? (\r            renderPaymentSuccess()\r          ) : (\r            <>\r              <Tabs\r                activeKey={paymentMethod}\r                onChange={(key) => setPaymentMethod(key as any)}\r                size=\"large\"\r              >\r                <TabPane\r                  tab={\r                    <Space>\r                      <CreditCardOutlined />\r                      Kredi/Banka Kartı\r                    </Space>\r                  }\r                  key=\"credit_card\"\r                >\r                  {renderCreditCardForm()}\r                </TabPane>\r                <TabPane\r                  tab={\r                    <Space>\r                      <BankOutlined />\r                      Havale/EFT\r                    </Space>\r                  }\r                  key=\"bank_transfer\"\r                >\r                  <Card>\r                    <Alert\r                      message=\"Banka Havalesi Bilgileri\"\r                      description=\"Aşağıdaki hesap bilgilerine havale/EFT yapabilirsiniz.\"\r                      type=\"info\"\r                      showIcon\r                      style={{ marginBottom: 24 }}\r                    />\r                    <List\r                      dataSource={[\r                        { bank: 'Garanti BBVA', iban: 'TR12 0006 2000 1234 0006 2345 67', branch: 'Levent Şubesi' },\r                        { bank: 'İş Bankası', iban: 'TR34 0006 4000 0011 2345 6789 00', branch: 'Maslak Şubesi' },\r                        { bank: 'Akbank', iban: 'TR56 0004 6000 5888 8000 1234 56', branch: 'Sarıyer Şubesi' }\r                      ]}\r                      renderItem={(item) => (\r                        <List.Item>\r                          <Card style={{ width: '100%' }}>\r                            <Space direction=\"vertical\" style={{ width: '100%' }}>\r                              <Text strong>{item.bank}</Text>\r                              <Text copyable>{item.iban}</Text>\r                              <Text type=\"secondary\">{item.branch}</Text>\r                            </Space>\r                          </Card>\r                        </List.Item>\r                      )}\r                    />\r                    <Alert\r                      message=\"Önemli\"\r                      description={`Açıklama kısmına \"${paymentData.companyName} - ${invoiceNumber}\" yazınız.`}\r                      type=\"warning\"\r                      style={{ marginTop: 16 }}\r                    />\r                  </Card>\r                </TabPane>\r                <TabPane\r                  tab={\r                    <Space>\r                      <WalletOutlined />\r                      Dijital Cüzdan\r                    </Space>\r                  }\r                  key=\"digital_wallet\"\r                >\r                  <Card>\r                    <Row gutter={[16, 16]}>\r                      {['PayPal', 'Apple Pay', 'Google Pay', 'BKM Express'].map((wallet) => (\r                        <Col span={12} key={wallet}>\r                          <Card\r                            hoverable\r                            className=\"wallet-card\"\r                            onClick={() => message.info(`${wallet} ile ödeme simülasyonu`)}\r                          >\r                            <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                              <WalletOutlined style={{ fontSize: 48, color: '#1890ff' }} />\r                              <Text strong>{wallet}</Text>\r                            </Space>\r                          </Card>\r                        </Col>\r                      ))}\r                    </Row>\r                  </Card>\r                </TabPane>\r              </Tabs>\r            </>\r          )}\r        </div>\r      </div>\r      {render3DSecure()}\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/payment/pages/PaymentPage/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { Layout, Typography, Card, Row, Col, Button, Tag, Space, Switch, List, Tooltip, Badge, Tabs, message } from 'antd';\rimport {\r  RocketOutlined,\r  CheckCircleOutlined,\r  CrownOutlined,\r  ThunderboltOutlined,\r  StarFilled,\r  UserOutlined,\r  ArrowLeftOutlined,\r  InfoCircleOutlined,\r  FireOutlined,\r  GiftOutlined,\r  SafetyOutlined,\r  CustomerServiceOutlined,\r  ApiOutlined,\r  CloudOutlined,\r  TeamOutlined,\r  DashboardOutlined,\r  GlobalOutlined\r} from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport { motion } from 'framer-motion';\rimport { PricingCalculator } from '../../components/PricingCalculator';\rimport './style.css';\rimport './pricing-fixes.css';\rconst { Header, Content } = Layout;\rconst { Title, Text, Paragraph } = Typography;\rinterface PricingPlan {\r  id: string;\r  name: string;\r  description: string;\r  monthlyPrice: number;\r  yearlyPrice: number;\r  discount?: string;\r  popular?: boolean;\r  enterprise?: boolean;\r  icon: React.ReactNode;\r  color: string;\r  features: string[];\r  limitations?: string[];\r  userLimit?: string;\r  storageLimit?: string;\r  supportType: string;\r  badge?: string;\r}\rexport const PricingPage: React.FC = () => {\r  const navigate = useNavigate();\r  const [billingPeriod, setBillingPeriod] = useState<'monthly' | 'yearly'>('yearly');\r  const [selectedCategory, setSelectedCategory] = useState('all');\r  const pricingPlans: PricingPlan[] = [\r    {\r      id: 'starter',\r      name: 'Başlangıç',\r      description: 'Küçük işletmeler ve girişimciler için ideal',\r      monthlyPrice: 299,\r      yearlyPrice: 2990,\r      discount: '2 Ay Ücretsiz',\r      icon: <RocketOutlined />,\r      color: '#52c41a',\r      userLimit: '1-5 Kullanıcı',\r      storageLimit: '10 GB',\r      supportType: 'E-posta Desteği',\r      features: [\r        'Temel CRM Modülü',\r        'Stok Yönetimi',\r        'Faturalama',\r        'Temel Raporlar',\r        'Mobil Uygulama',\r        'E-posta Desteği',\r        'Aylık Güncelleme'\r      ],\r      limitations: [\r        'Sınırlı Entegrasyon',\r        'Temel Raporlama'\r      ]\r    },\r    {\r      id: 'professional',\r      name: 'Profesyonel',\r      description: 'Büyüyen işletmeler için kapsamlı çözüm',\r      monthlyPrice: 599,\r      yearlyPrice: 5990,\r      discount: '2 Ay Ücretsiz',\r      popular: true,\r      badge: 'EN POPÜLER',\r      icon: <StarFilled />,\r      color: '#1890ff',\r      userLimit: '6-20 Kullanıcı',\r      storageLimit: '100 GB',\r      supportType: '7/24 Telefon Desteği',\r      features: [\r        'Tüm Başlangıç Özellikleri',\r        'Gelişmiş CRM',\r        'İnsan Kaynakları',\r        'Muhasebe Modülü',\r        'E-Ticaret Entegrasyonları',\r        'Özel Raporlar',\r        'API Erişimi',\r        '7/24 Telefon Desteği',\r        'Haftalık Güncelleme',\r        'Eğitim Videoları'\r      ]\r    },\r    {\r      id: 'business',\r      name: 'İşletme',\r      description: 'Kurumsal işletmeler için güçlü araçlar',\r      monthlyPrice: 999,\r      yearlyPrice: 9990,\r      discount: '2 Ay Ücretsiz',\r      icon: <CrownOutlined />,\r      color: '#722ed1',\r      userLimit: '21-50 Kullanıcı',\r      storageLimit: '500 GB',\r      supportType: 'Özel Müşteri Temsilcisi',\r      features: [\r        'Tüm Profesyonel Özellikleri',\r        'Üretim Modülü',\r        'Proje Yönetimi',\r        'İleri Düzey Analitik',\r        'Çoklu Şube Yönetimi',\r        'Özel Entegrasyonlar',\r        'Veri Yedekleme',\r        'Özel Müşteri Temsilcisi',\r        'Günlük Güncelleme',\r        'Yerinde Eğitim'\r      ]\r    },\r    {\r      id: 'enterprise',\r      name: 'Kurumsal',\r      description: 'Büyük ölçekli kurumlar için özel çözümler',\r      monthlyPrice: 0,\r      yearlyPrice: 0,\r      enterprise: true,\r      icon: <ThunderboltOutlined />,\r      color: '#f5222d',\r      userLimit: 'Sınırsız Kullanıcı',\r      storageLimit: 'Sınırsız',\r      supportType: 'Premium 7/24 Destek',\r      badge: 'ÖZEL FİYAT',\r      features: [\r        'Tüm Özellikler Dahil',\r        'Sınırsız Kullanıcı',\r        'Sınırsız Depolama',\r        'Özel Geliştirme',\r        'On-Premise Kurulum',\r        'Beyaz Etiket Seçeneği',\r        'SLA Garantisi',\r        'Premium 7/24 Destek',\r        'Özel Eğitim Programı',\r        'Danışmanlık Hizmeti'\r      ]\r    }\r  ];\r  const addons = [\r    {\r      name: 'E-Ticaret Plus',\r      description: 'Tüm pazaryeri entegrasyonları',\r      price: 149,\r      icon: <GlobalOutlined />\r    },\r    {\r      name: 'Gelişmiş Analitik',\r      description: 'AI destekli iş zekası raporları',\r      price: 199,\r      icon: <DashboardOutlined />\r    },\r    {\r      name: 'Ekstra Depolama',\r      description: 'Her 100 GB için',\r      price: 49,\r      icon: <CloudOutlined />\r    },\r    {\r      name: 'Ek Kullanıcı',\r      description: 'Her kullanıcı için',\r      price: 29,\r      icon: <TeamOutlined />\r    }\r  ];\r  const comparisionFeatures = [\r    { feature: 'CRM Modülü', starter: true, professional: true, business: true, enterprise: true },\r    { feature: 'Stok Yönetimi', starter: true, professional: true, business: true, enterprise: true },\r    { feature: 'Faturalama', starter: true, professional: true, business: true, enterprise: true },\r    { feature: 'İnsan Kaynakları', starter: false, professional: true, business: true, enterprise: true },\r    { feature: 'Muhasebe', starter: false, professional: true, business: true, enterprise: true },\r    { feature: 'E-Ticaret', starter: false, professional: true, business: true, enterprise: true },\r    { feature: 'Üretim', starter: false, professional: false, business: true, enterprise: true },\r    { feature: 'Proje Yönetimi', starter: false, professional: false, business: true, enterprise: true },\r    { feature: 'API Erişimi', starter: false, professional: true, business: true, enterprise: true },\r    { feature: 'Özel Raporlar', starter: false, professional: true, business: true, enterprise: true },\r    { feature: 'Çoklu Şube', starter: false, professional: false, business: true, enterprise: true },\r    { feature: 'Veri Yedekleme', starter: 'Aylık', professional: 'Haftalık', business: 'Günlük', enterprise: 'Anlık' },\r    { feature: '7/24 Destek', starter: false, professional: true, business: true, enterprise: true },\r    { feature: 'Eğitim', starter: 'Video', professional: 'Video + Webinar', business: 'Yerinde', enterprise: 'Özel Program' }\r  ];\r  const faqs = [\r    {\r      question: 'Deneme sürümü var mı?',\r      answer: '14 gün ücretsiz deneme sürümü sunuyoruz. Kredi kartı gerekmez.'\r    },\r    {\r      question: 'Planımı daha sonra değiştirebilir miyim?',\r      answer: 'Evet, istediğiniz zaman planınızı yükseltebilir veya düşürebilirsiniz.'\r    },\r    {\r      question: 'İptal politikanız nedir?',\r      answer: 'İstediğiniz zaman iptal edebilirsiniz. Yıllık planlarda kalan süre için iade yapılır.'\r    },\r    {\r      question: 'Kurulum ücreti var mı?',\r      answer: 'Hayır, kurulum tamamen ücretsizdir ve ekibimiz size destek olur.'\r    }\r  ];\r  const calculatePrice = (plan: PricingPlan) => {\r    if (plan.enterprise) return 'Teklif Al';\r    const price = billingPeriod === 'monthly' ? plan.monthlyPrice : plan.yearlyPrice;\r    return `₺${price.toLocaleString('tr-TR')}`;\r  };\r  const calculateSavings = (plan: PricingPlan) => {\r    if (plan.enterprise || billingPeriod === 'monthly') return null;\r    const yearlyTotal = plan.yearlyPrice;\r    const monthlyTotal = plan.monthlyPrice * 12;\r    const savings = monthlyTotal - yearlyTotal;\r    return savings > 0 ? `Yıllık ₺${savings.toLocaleString('tr-TR')} tasarruf` : null;\r  };\r  return (\r    <Layout className=\"pricing-layout\">\r      <Header className=\"pricing-header\">\r        <div className=\"header-container\">\r          <div className=\"header-content\">\r            <Button \r              icon={<ArrowLeftOutlined />} \r              onClick={() = aria-label=\"arrow left outlined\"> navigate('/')}\r              type=\"text\"\r              className=\"back-button\"\r            >\r              Ana Sayfa\r            </Button>\r            <div className=\"logo-section\" onClick={() => navigate('/')} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => navigate('/')(e)}>\r              <RocketOutlined className=\"logo-icon\" />\r              <span className=\"logo-text\">Stocker</span>\r            </div>\r          </div>\r          <div className=\"header-actions\">\r            <Button onClick={() => navigate('/blog')}>Blog</Button>\r            <Button onClick={() => navigate('/training')}>Eğitimler</Button>\r            <Button onClick={() => navigate('/login')}>Giriş Yap</Button>\r            <Button type=\"primary\" onClick={() => navigate('/register')}>\r              Ücretsiz Dene\r            </Button>\r          </div>\r        </div>\r      </Header>\r      <Content className=\"pricing-content\">\r        {/* Hero Section */}\r        <motion.section \r          className=\"pricing-hero\"\r          initial={{ opacity: 0, y: 20 }}\r          animate={{ opacity: 1, y: 0 }}\r          transition={{ duration: 0.5 }}\r        >\r          <Badge.Ribbon text=\"🎁 Yıl Sonu İndirimi %20\" color=\"red\">\r            <div className=\"hero-content\">\r              <Title level={1} className=\"hero-title\">\r                <span className=\"gradient-text\">İşletmeniz İçin</span>\r                <br />\r                En Uygun Planı Seçin\r              </Title>\r              <Paragraph className=\"hero-description\">\r                14 gün ücretsiz deneme • Kredi kartı gerekmez • İstediğiniz zaman iptal edin\r              </Paragraph>\r              <div className={`billing-toggle ${billingPeriod}`}>\r                <span \r                  className={billingPeriod === 'monthly' ? 'active' : ''}\r                  onClick={() => setBillingPeriod('monthly')}\r                >\r                  Aylık\r                </span>\r                <span \r                  className={billingPeriod === 'yearly' ? 'active' : ''}\r                  onClick={() => setBillingPeriod('yearly')}\r                >\r                  Yıllık\r                  {billingPeriod === 'yearly' && (\r                    <Tag color=\"green\" className=\"save-tag\" style={{ marginLeft: 8 }}>%20 İndirim</Tag>\r                  )}\r                </span>\r              </div>\r            </div>\r          </Badge.Ribbon>\r        </motion.section>\r        {/* Trust Badges */}\r        <section className=\"trust-section\">\r          <Row gutter={[32, 32]} justify=\"center\">\r            <Col xs={24} sm={8} md={6}>\r              <div className=\"trust-item\">\r                <SafetyOutlined className=\"trust-icon\" />\r                <Text strong>SSL Güvenlik</Text>\r                <Text type=\"secondary\">256-bit Şifreleme</Text>\r              </div>\r            </Col>\r            <Col xs={24} sm={8} md={6}>\r              <div className=\"trust-item\">\r                <CustomerServiceOutlined className=\"trust-icon\" />\r                <Text strong>7/24 Destek</Text>\r                <Text type=\"secondary\">Türkçe Destek Ekibi</Text>\r              </div>\r            </Col>\r            <Col xs={24} sm={8} md={6}>\r              <div className=\"trust-item\">\r                <ApiOutlined className=\"trust-icon\" />\r                <Text strong>%99.9 Uptime</Text>\r                <Text type=\"secondary\">SLA Garantili</Text>\r              </div>\r            </Col>\r            <Col xs={24} sm={8} md={6}>\r              <div className=\"trust-item\">\r                <GiftOutlined className=\"trust-icon\" />\r                <Text strong>14 Gün Deneme</Text>\r                <Text type=\"secondary\">Kredi Kartı Gerekmez</Text>\r              </div>\r            </Col>\r          </Row>\r        </section>\r        {/* Pricing Cards */}\r        <section className=\"pricing-cards-section\">\r          <Row gutter={[24, 24]} justify=\"center\">\r            {pricingPlans.map((plan, index) => (\r              <Col xs={24} sm={12} lg={6} key={plan.id}>\r                <motion.div\r                  initial={{ opacity: 0, y: 30 }}\r                  animate={{ opacity: 1, y: 0 }}\r                  transition={{ duration: 0.5, delay: index * 0.1 }}\r                >\r                  <Card \r                    className={`pricing-card ${plan.popular ? 'popular' : ''} ${plan.enterprise ? 'enterprise' : ''}`}\r                    hoverable\r                    bordered={false}\r                  >\r                    {plan.badge && (\r                      <div className=\"plan-badge\">\r                        <FireOutlined /> {plan.badge}\r                      </div>\r                    )}\r                    <div className=\"plan-header\">\r                      <div className=\"plan-icon\" style={{ color: plan.color }}>\r                        {plan.icon}\r                      </div>\r                      <Title level={3} className=\"plan-name\">{plan.name}</Title>\r                      <Paragraph className=\"plan-description\">{plan.description}</Paragraph>\r                    </div>\r                    <div className=\"plan-price\">\r                      <div className=\"price-amount\">\r                        {plan.enterprise ? (\r                          <span className=\"custom-price\">Özel Fiyat</span>\r                        ) : (\r                          <>\r                            <span className=\"currency\">₺</span>\r                            <span className=\"amount\">\r                              {billingPeriod === 'monthly' ? plan.monthlyPrice : Math.floor(plan.yearlyPrice / 12)}\r                            </span>\r                            <span className=\"period\">/ay</span>\r                          </>\r                        )}\r                      </div>\r                      {calculateSavings(plan) && (\r                        <Text type=\"success\" className=\"savings-text\">\r                          {calculateSavings(plan)}\r                        </Text>\r                      )}\r                    </div>\r                    <div className=\"plan-limits\">\r                      <Tag icon={<UserOutlined />}>{plan.userLimit}</Tag>\r                      <Tag icon={<CloudOutlined />}>{plan.storageLimit}</Tag>\r                    </div>\r                    <List\r                      className=\"plan-features\"\r                      dataSource={plan.features}\r                      renderItem={item => (\r                        <List.Item className=\"feature-item\">\r                          <CheckCircleOutlined className=\"feature-icon\" />\r                          <Text>{item}</Text>\r                        </List.Item>\r                      )}\r                    />\r                    {plan.limitations && (\r                      <div className=\"plan-limitations\">\r                        {plan.limitations.map((limit, idx) => (\r                          <Text key={idx} type=\"secondary\" className=\"limitation\">\r                            • {limit}\r                          </Text>\r                        ))}\r                      </div>\r                    )}\r                    <Button\r                      type={plan.popular ? 'primary' : 'default'}\r                      size=\"large\"\r                      block\r                      className={`plan-button ${plan.enterprise ? 'enterprise-button' : ''}`}\r                      onClick={() => {\r                        if (plan.enterprise) {\r                          message.info('Satış ekibimiz sizinle iletişime geçecek');\r                        } else {\r                          navigate('/register');\r                        }\r                      }}\r                    >\r                      {plan.enterprise ? 'Teklif Al' : 'Hemen Başla'}\r                    </Button>\r                    <Text type=\"secondary\" className=\"support-type\">\r                      <CustomerServiceOutlined /> {plan.supportType}\r                    </Text>\r                  </Card>\r                </motion.div>\r              </Col>\r            ))}\r          </Row>\r        </section>\r        {/* Comparison Table */}\r        <section className=\"comparison-section\">\r          <div className=\"section-header\">\r            <Title level={2}>Detaylı Özellik Karşılaştırması</Title>\r            <Paragraph>Tüm planlarımızın özelliklerini karşılaştırın</Paragraph>\r          </div>\r          <Card className=\"comparison-card\">\r            <div className=\"comparison-table\">\r              <table>\r                <thead>\r                  <tr>\r                    <th>Özellikler</th>\r                    <th>Başlangıç</th>\r                    <th className=\"highlighted\">Profesyonel</th>\r                    <th>İşletme</th>\r                    <th>Kurumsal</th>\r                  </tr>\r                </thead>\r                <tbody>\r                  {comparisionFeatures.map((item, index) => (\r                    <tr key={index}>\r                      <td className=\"feature-name\">\r                        <Text strong>{item.feature}</Text>\r                      </td>\r                      <td>\r                        {typeof item.starter === 'boolean' ? (\r                          item.starter ? (\r                            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r                              <CheckCircleOutlined style={{ color: '#52c41a', fontSize: 22 }} />\r                            </div>\r                          ) : (\r                            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r                              <span style={{ color: '#d1d5db', fontSize: 24 }}>-</span>\r                            </div>\r                          )\r                        ) : (\r                          <Tag color=\"blue\">{item.starter}</Tag>\r                        )}\r                      </td>\r                      <td className=\"highlighted\">\r                        {typeof item.professional === 'boolean' ? (\r                          item.professional ? (\r                            <CheckCircleOutlined style={{ color: '#52c41a', fontSize: 22 }} />\r                          ) : (\r                            <span className=\"not-included\">-</span>\r                          )\r                        ) : (\r                          <Tag color=\"blue\">{item.professional}</Tag>\r                        )}\r                      </td>\r                      <td>\r                        {typeof item.business === 'boolean' ? (\r                          item.business ? (\r                            <CheckCircleOutlined style={{ color: '#52c41a', fontSize: 22 }} />\r                          ) : (\r                            <span className=\"not-included\">-</span>\r                          )\r                        ) : (\r                          <Tag color=\"purple\">{item.business}</Tag>\r                        )}\r                      </td>\r                      <td>\r                        {typeof item.enterprise === 'boolean' ? (\r                          item.enterprise ? (\r                            <CheckCircleOutlined style={{ color: '#52c41a', fontSize: 22 }} />\r                          ) : (\r                            <span className=\"not-included\">-</span>\r                          )\r                        ) : (\r                          <Tag color=\"red\">{item.enterprise}</Tag>\r                        )}\r                      </td>\r                    </tr>\r                  ))}\r                </tbody>\r              </table>\r            </div>\r          </Card>\r        </section>\r        {/* Pricing Calculator Section */}\r        <section className=\"calculator-section\" style={{ marginBottom: 80 }}>\r          <div className=\"section-header\">\r            <Title level={2}>Özel Fiyatlandırma</Title>\r            <Paragraph>İhtiyaçlarınıza göre kendi planınızı oluşturun</Paragraph>\r          </div>\r          <PricingCalculator />\r        </section>\r        {/* Add-ons Section */}\r        <section className=\"addons-section\">\r          <div className=\"section-header\">\r            <Title level={2}>Ek Hizmetler</Title>\r            <Paragraph>İhtiyacınıza göre planınızı özelleştirin</Paragraph>\r          </div>\r          <Row gutter={[24, 24]}>\r            {addons.map((addon, index) => (\r              <Col xs={24} sm={12} md={6} key={index}>\r                <Card className=\"addon-card\" hoverable>\r                  <div className=\"addon-icon\" style={{ color: '#1890ff' }}>\r                    {addon.icon}\r                  </div>\r                  <Title level={4}>{addon.name}</Title>\r                  <Paragraph type=\"secondary\">{addon.description}</Paragraph>\r                  <div className=\"addon-price\">\r                    <Text strong style={{ fontSize: 20 }}>₺{addon.price}</Text>\r                    <Text type=\"secondary\">/ay</Text>\r                  </div>\r                  <Button type=\"link\">Ekle →</Button>\r                </Card>\r              </Col>\r            ))}\r          </Row>\r        </section>\r        {/* FAQ Section */}\r        <section className=\"faq-section\">\r          <div className=\"section-header\">\r            <Title level={2}>Sıkça Sorulan Sorular</Title>\r          </div>\r          <Row gutter={[32, 32]}>\r            {faqs.map((faq, index) => (\r              <Col xs={24} md={12} key={index}>\r                <Card className=\"faq-card\">\r                  <Title level={4}>\r                    <InfoCircleOutlined style={{ marginRight: 8, color: '#1890ff' }} />\r                    {faq.question}\r                  </Title>\r                  <Paragraph>{faq.answer}</Paragraph>\r                </Card>\r              </Col>\r            ))}\r          </Row>\r        </section>\r        {/* CTA Section */}\r        <section className=\"pricing-cta\">\r          <Card className=\"cta-card\">\r            <Title level={2} style={{ color: 'white' }}>\r              Hala Karar Veremediniz mi?\r            </Title>\r            <Paragraph style={{ color: 'rgba(255,255,255,0.9)', fontSize: 18 }}>\r              14 gün ücretsiz deneme sürümüyle başlayın. Kredi kartı gerekmez.\r            </Paragraph>\r            <Space size=\"large\">\r              <Button \r                type=\"primary\" \r                size=\"large\"\r                icon={<RocketOutlined />}\r                onClick={() = aria-label=\"rocket outlined\"> navigate('/register')}\r                className=\"cta-button\"\r              >\r                Ücretsiz Deneyin\r              </Button>\r              <Button \r                size=\"large\"\r                ghost\r                style={{ color: 'white', borderColor: 'white' }}\r                icon={<CustomerServiceOutlined />}\r                onClick={() = aria-label=\"customer service outlined\"> message.info('Satış ekibimiz sizinle iletişime geçecek')}\r              >\r                Satış Ekibiyle Görüşün\r              </Button>\r            </Space>\r          </Card>\r        </section>\r      </Content>\r    </Layout>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/pricing/pages/PricingPage/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { useNavigate } from 'react-router-dom';\rimport { \r  Card, \r  Steps, \r  Button, \r  Form, \r  Input, \r  Select, \r  Typography, \r  Space, \r  Row, \r  Col,\r  Divider,\r  Alert,\r  Badge,\r  Tag,\r  List,\r  message,\r  Modal,\r  Result,\r  Spin,\r  Checkbox,\r  Popover\r} from 'antd';\rimport {\r  CheckCircleOutlined,\r  ShoppingCartOutlined,\r  UserOutlined,\r  CreditCardOutlined,\r  RocketOutlined,\r  CheckOutlined,\r  CloseOutlined,\r  InfoCircleOutlined,\r  SafetyOutlined,\r  ThunderboltOutlined,\r  GlobalOutlined,\r  TeamOutlined,\r  BarChartOutlined,\r  CloudOutlined,\r  CustomerServiceOutlined,\r  GiftOutlined\r} from '@ant-design/icons';\rimport { apiClient } from '@/shared/api/client';\rimport PasswordStrength from '@/shared/components/PasswordStrength';\rimport { useSignalRValidation } from '@/shared/hooks/useSignalR';\rimport { ModuleSelection } from './ModuleSelection';\rimport { RegisterWizard } from './RegisterWizard';\rimport { NeonWizard } from './NeonWizard';\rimport { ModernWizard } from './ModernWizard';\rimport { PremiumPackageCard } from './PremiumPackageCard';\rimport './style.css';\rimport './module-selection.css';\rimport './premium-package-selection.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Step } = Steps;\rinterface Package {\r  id: string;\r  name: string;\r  description: string;\r  price: number;\r  currency: string;\r  billingPeriod: 'Monthly' | 'Yearly';\r  features: string[];\r  maxUsers: number;\r  maxStorage: number;\r  modules: string[];\r  isPopular?: boolean;\r  discount?: number;\r}\rinterface ModulePackageData {\r  selectedModules: string[];\r  basePackage: string;\r  totalPrice: number;\r}\rinterface RegisterFormData {\r  // Company Info\r  companyName: string;\r  companyCode: string;\r  domain?: string;\r  // Contact Info\r  contactName: string;\r  contactEmail: string;\r  contactPhone: string;\r  // Address\r  address?: string;\r  city?: string;\r  country?: string;\r  // Account\r  password: string;\r  confirmPassword: string;\r  // Package\r  packageId: string;\r  billingPeriod: 'Monthly' | 'Yearly';\r}\rexport const RegisterPage: React.FC = () => {\r  const navigate = useNavigate();\r  const [currentStep, setCurrentStep] = useState(0);\r  const [packages, setPackages] = useState<Package[]>([]);\r  const [selectedPackage, setSelectedPackage] = useState<Package | null>(null);\r  const [billingPeriod, setBillingPeriod] = useState<'Monthly' | 'Yearly'>('Monthly');\r  const [loading, setLoading] = useState(false);\r  const [paymentProcessing, setPaymentProcessing] = useState(false);\r  const [registrationComplete, setRegistrationComplete] = useState(false);\r  const [tenantId, setTenantId] = useState<string | null>(null); // Store tenant ID after registration\r  const [passwordStrength, setPasswordStrength] = useState<any>(null);\r  const [password, setPassword] = useState('');\r  const [modulePackageData, setModulePackageData] = useState<ModulePackageData | null>(null);\r  const [form] = Form.useForm();\r  // SignalR Validation Hook\r  const {\r    isConnected,\r    emailValidation,\r    passwordStrength: signalRPasswordStrength,\r    domainCheck,\r    phoneValidation,\r    companyNameCheck,\r    identityValidation,\r    tenantCodeValidation,\r    validateEmail,\r    checkPasswordStrength,\r    checkDomain,\r    validatePhone,\r    checkCompanyName,\r    validateIdentity,\r    validateTenantCode,\r    error: validationError\r  } = useSignalRValidation();\r  // Fetch available packages\r  useEffect(() => {\r    fetchPackages();\r  }, []);\r  // Show connection status\r  useEffect(() => {\r    if (isConnected) {\r      message.success('Real-time validation bağlantısı kuruldu', 2);\r    }\r  }, [isConnected]);\r  // Update password strength from SignalR\r  useEffect(() => {\r    if (signalRPasswordStrength) {\r      setPasswordStrength({\r        score: signalRPasswordStrength.score,\r        level: signalRPasswordStrength.level,\r        isAcceptable: signalRPasswordStrength.score >= 3,\r        feedback: signalRPasswordStrength.suggestions\r      });\r    }\r  }, [signalRPasswordStrength]);\r  const fetchPackages = async () => {\r    try {\r      // Fetch real packages from API\r      const response = await apiClient.get('/api/public/packages');\r      if (response.data?.success && response.data?.data && response.data.data.length > 0) {\r        const packages = response.data.data.map((pkg: any) => ({\r          id: pkg.id, // Real GUID from backend\r          name: pkg.name,\r          description: pkg.description,\r          price: pkg.basePrice?.amount || 0,\r          currency: pkg.basePrice?.currency || pkg.currency || '₺',\r          type: pkg.type,\r          billingPeriod: 'Monthly',\r          features: pkg.features?.map((f: any) => f.featureName || f.name || f) || [],\r          maxUsers: pkg.maxUsers || 0,\r          maxStorage: pkg.maxStorage || 0,\r          modules: pkg.modules?.map((m: any) => m.moduleName || m) || [],\r          isPopular: pkg.type === 'Professional' || pkg.isPopular,\r          discount: pkg.discount || 0,\r          trialDays: pkg.trialDays || 14\r        }));\r        setPackages(packages);\r        // Don't auto-select - let user choose\r      } else {\r        // Fallback to mock packages if API fails\r        const mockPackages: Package[] = [\r        {\r          id: 'a1b2c3d4-e5f6-7890-abcd-ef1234567890', // Mock GUID\r          name: 'Başlangıç',\r          description: 'Küçük işletmeler için ideal',\r          price: 499,\r          currency: '₺',\r          billingPeriod: 'Monthly',\r          features: [\r            '5 Kullanıcı',\r            '10 GB Depolama',\r            'CRM Modülü',\r            'Temel Raporlama',\r            'Email Desteği',\r            'Mobil Uygulama'\r          ],\r          maxUsers: 5,\r          maxStorage: 10,\r          modules: ['CRM'],\r        },\r        {\r          id: 'b2c3d4e5-f6a7-8901-bcde-f23456789012', // Mock GUID\r          name: 'Profesyonel',\r          description: 'Büyüyen işletmeler için',\r          price: 999,\r          currency: '₺',\r          billingPeriod: 'Monthly',\r          features: [\r            '20 Kullanıcı',\r            '50 GB Depolama',\r            'CRM + Stok Modülü',\r            'Gelişmiş Raporlama',\r            'Öncelikli Destek',\r            'API Erişimi',\r            'Özel Eğitim'\r          ],\r          maxUsers: 20,\r          maxStorage: 50,\r          modules: ['CRM', 'Inventory'],\r          isPopular: true,\r          discount: 20\r        },\r        {\r          id: 'c3d4e5f6-a7b8-9012-cdef-345678901234', // Mock GUID\r          name: 'Enterprise',\r          description: 'Büyük ölçekli işletmeler için',\r          price: 2499,\r          currency: '₺',\r          billingPeriod: 'Monthly',\r          features: [\r            'Sınırsız Kullanıcı',\r            '500 GB Depolama',\r            'Tüm Modüller',\r            'Özel Raporlama',\r            '7/24 Destek',\r            'Özel Entegrasyonlar',\r            'SLA Garantisi',\r            'Özel Sunucu Seçeneği'\r          ],\r          maxUsers: -1,\r          maxStorage: 500,\r          modules: ['CRM', 'Inventory', 'Finance', 'HR', 'Projects'],\r        }\r      ];\r        setPackages(mockPackages);\r        // Don't auto-select - let user choose\r      }\r    } catch (error: any) {\r      message.error('Paketler API\\'den yüklenemedi, mock data kullanılıyor');\r      // Use mock packages on error\r      const mockPackages: Package[] = [\r        {\r          id: 'a1b2c3d4-e5f6-7890-abcd-ef1234567890',\r          name: 'Başlangıç',\r          description: 'Küçük işletmeler için ideal',\r          price: 499,\r          currency: '₺',\r          billingPeriod: 'Monthly',\r          features: ['5 Kullanıcı', '10 GB Depolama', 'CRM Modülü'],\r          maxUsers: 5,\r          maxStorage: 10,\r          modules: ['CRM'],\r        },\r        {\r          id: 'b2c3d4e5-f6a7-8901-bcde-f23456789012',\r          name: 'Profesyonel',\r          description: 'Büyüyen işletmeler için',\r          price: 999,\r          currency: '₺',\r          billingPeriod: 'Monthly',\r          features: ['20 Kullanıcı', '50 GB Depolama', 'Tüm Modüller'],\r          maxUsers: 20,\r          maxStorage: 50,\r          modules: ['CRM', 'Inventory'],\r          isPopular: true,\r        },\r        {\r          id: 'c3d4e5f6-a7b8-9012-cdef-345678901234',\r          name: 'Enterprise',\r          description: 'Kurumsal çözümler',\r          price: 2499,\r          currency: '₺',\r          billingPeriod: 'Monthly',\r          features: ['Sınırsız Kullanıcı', '500 GB Depolama'],\r          maxUsers: -1,\r          maxStorage: 500,\r          modules: ['CRM', 'Inventory', 'Finance'],\r        }\r      ];\r      setPackages(mockPackages);\r      // Don't auto-select - let user choose\r    }\r  };\r  const handleModuleSelectionComplete = (selectedModules: string[], basePackage: string, totalPrice: number) => {\r    setModulePackageData({\r      selectedModules,\r      basePackage,\r      totalPrice\r    });\r    setCurrentStep(1);\r  };\r  const handlePackageSelect = (pkg: Package) => {\r    setSelectedPackage(pkg);\r    setCurrentStep(1);\r  };\r  const handleRegistration = async (values: any) => {\r    setLoading(true);\r    try {\r      // Backend'in beklediği formatı oluştur\r      const [firstName, ...lastNameParts] = values.contactName?.split(' ') || ['', ''];\r      const lastName = lastNameParts.join(' ') || firstName;\r      const registrationData = {\r        // Şirket bilgileri\r        companyName: values.companyName,\r        companyCode: values.companyCode,\r        identityType: values.identityType,\r        identityNumber: values.identityNumber,\r        sector: values.sector,\r        employeeCount: values.employeeCount,\r        // İletişim bilgileri\r        contactName: values.contactName,\r        contactEmail: values.contactEmail,\r        contactPhone: values.contactPhone,\r        contactTitle: values.contactTitle,\r        // Kullanıcı bilgileri\r        email: values.contactEmail, // Backend email field'ı bekliyor\r        username: values.contactEmail?.split('@')[0] || values.companyCode, // Email'den username oluştur\r        firstName: firstName,\r        lastName: lastName,\r        password: values.password,\r        // Domain ve paket\r        domain: `${values.companyCode}`,\r        packageId: selectedPackage?.id,\r        billingPeriod\r      };\r      // API call to register tenant (creates INACTIVE tenant)\r      const response = await apiClient.post('/api/public/register', registrationData);\r      if (response.data?.success && response.data?.data?.id) {\r        // Store tenant ID for payment step\r        setTenantId(response.data.data.id);\r        message.success('Kayıt başarılı! Şimdi ödeme adımına geçiliyor...');\r        // Move to payment step\r        setCurrentStep(2);\r      } else {\r        message.error('Kayıt sırasında bir hata oluştu');\r      }\r    } catch (error: any) {\r      message.error(error.response?.data?.message || 'Kayıt işlemi başarısız');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const simulatePayment = async (paymentMethod: string) => {\r    // Check if we have tenant ID from registration\r    if (!tenantId) {\r      message.error('Kayıt bilgileri bulunamadı. Lütfen önce kayıt işlemini tamamlayın.');\r      setCurrentStep(1);\r      return;\r    }\r    // Redirect to realistic payment page with tenant ID\r    const params = new URLSearchParams({\r      tenantId: tenantId, // Use actual tenant ID from registration\r      packageId: selectedPackage?.id || '',\r      package: selectedPackage?.name || '',\r      amount: calculatePrice().toString(),\r      period: billingPeriod,\r      company: form.getFieldValue('companyName'),\r      email: form.getFieldValue('contactEmail'),\r      method: paymentMethod\r    });\r    navigate(`/payment?${params.toString()}`);\r  };\r  const calculatePrice = () => {\r    if (modulePackageData) {\r      // Use module-based pricing\r      let price = modulePackageData.totalPrice;\r      // Apply yearly discount\r      if (billingPeriod === 'Yearly') {\r        price = price * 12 * 0.8; // 20% yearly discount\r      }\r      return Math.floor(price);\r    }\r    // Fallback to old pricing\r    if (!selectedPackage || !selectedPackage.price) return 0;\r    let price = selectedPackage.price;\r    // Apply yearly discount\r    if (billingPeriod === 'Yearly') {\r      price = price * 12 * 0.8; // 20% yearly discount\r    }\r    // Apply package discount if any\r    if (selectedPackage.discount) {\r      price = price * (1 - selectedPackage.discount / 100);\r    }\r    return Math.floor(price);\r  };\r  const renderModuleSelection = () => (\r    <ModuleSelection\r      onComplete={handleModuleSelectionComplete}\r      initialModules={modulePackageData?.selectedModules}\r      initialPackage={modulePackageData?.basePackage}\r    />\r  );\r  const renderPackageSelection = () => (\r    <div className=\"package-selection-wrapper\">\r      <div className=\"floating-shapes\">\r        <div className=\"floating-shape\"></div>\r        <div className=\"floating-shape\"></div>\r        <div className=\"floating-shape\"></div>\r      </div>\r      <div className=\"billing-toggle-container\">\r        <div className=\"billing-toggle\">\r          <button \r            className={`billing-toggle-btn ${billingPeriod === 'Monthly' ? 'active' : ''}`}\r            onClick={() => setBillingPeriod('Monthly')}\r          >\r            Aylık\r          </button>\r          <button \r            className={`billing-toggle-btn ${billingPeriod === 'Yearly' ? 'active' : ''}`}\r            onClick={() => setBillingPeriod('Yearly')}\r          >\r            Yıllık \r            <span className=\"discount-badge\">💸 %20 İndirim</span>\r          </button>\r        </div>\r      </div>\r      <div className=\"packages-grid\">\r        {packages.map((pkg) => (\r          <PremiumPackageCard\r            key={pkg.id}\r            package={pkg}\r            isSelected={selectedPackage?.id === pkg.id}\r            onSelect={handlePackageSelect}\r            billingPeriod={billingPeriod}\r          />\r        ))}\r      </div>\r      <div className=\"package-comparison\">\r        <Card style={{ marginTop: 48 }}>\r          <Title level={4}>\r            <InfoCircleOutlined /> Neden Stocker?\r          </Title>\r          <Row gutter={[24, 24]} style={{ marginTop: 24 }}>\r            <Col xs={24} md={6}>\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <ThunderboltOutlined style={{ fontSize: 32, color: '#667eea' }} />\r                <Text strong>Hızlı Kurulum</Text>\r                <Text type=\"secondary\" style={{ textAlign: 'center' }}>\r                  5 dakikada başlayın\r                </Text>\r              </Space>\r            </Col>\r            <Col xs={24} md={6}>\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <SafetyOutlined style={{ fontSize: 32, color: '#667eea' }} />\r                <Text strong>%99.9 Uptime</Text>\r                <Text type=\"secondary\" style={{ textAlign: 'center' }}>\r                  SLA garantisi\r                </Text>\r              </Space>\r            </Col>\r            <Col xs={24} md={6}>\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <CustomerServiceOutlined style={{ fontSize: 32, color: '#667eea' }} />\r                <Text strong>7/24 Destek</Text>\r                <Text type=\"secondary\" style={{ textAlign: 'center' }}>\r                  Her zaman yanınızdayız\r                </Text>\r              </Space>\r            </Col>\r            <Col xs={24} md={6}>\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <GiftOutlined style={{ fontSize: 32, color: '#667eea' }} />\r                <Text strong>14 Gün Deneme</Text>\r                <Text type=\"secondary\" style={{ textAlign: 'center' }}>\r                  Kredi kartı gerekmez\r                </Text>\r              </Space>\r            </Col>\r          </Row>\r        </Card>\r      </div>\r    </div>\r  );\r  const handleWizardComplete = (data: any) => {\r    // Wizard'dan gelen veriyi kaydet ve ödeme adımına geç\r    setTenantId(data.id);\r    message.success('Kayıt başarılı! Şimdi ödeme adımına geçiliyor...');\r    setCurrentStep(2);\r  };\r  const renderRegistrationForm = () => {\r    return (\r      <ModernWizard \r        onComplete={handleWizardComplete}\r        selectedPackage={selectedPackage}\r        signalRValidation={{\r          isConnected,\r          emailValidation,\r          passwordStrength: signalRPasswordStrength,\r          domainCheck,\r          phoneValidation,\r          companyNameCheck,\r          identityValidation,\r          tenantCodeValidation,\r          validateEmail,\r          checkPasswordStrength,\r          checkDomain,\r          validatePhone,\r          checkCompanyName,\r          validateIdentity,\r          validateTenantCode,\r          error: validationError\r        }}\r      />\r    );\r  };\r  const renderPayment = () => (\r    <div className=\"payment-section\">\r      <Row gutter={[48, 24]} justify=\"center\">\r        <Col xs={24} md={16}>\r          <Card>\r            <Title level={3}>\r              <CreditCardOutlined /> Ödeme Bilgileri\r            </Title>\r            {paymentProcessing ? (\r              <div style={{ textAlign: 'center', padding: '60px 0' }}>\r                <Spin size=\"large\" />\r                <Title level={4} style={{ marginTop: 24 }}>\r                  Ödeme işleniyor...\r                </Title>\r                <Text type=\"secondary\">\r                  Lütfen bekleyin, ödemeniz güvenli bir şekilde işleniyor.\r                </Text>\r              </div>\r            ) : (\r              <>\r                <Alert\r                  message=\"Kayıt Başarılı!\"\r                  description={`Tenant ID: ${tenantId}. Şimdi ödeme yaparak hesabınızı aktifleştirin.`}\r                  type=\"info\"\r                  showIcon\r                  style={{ marginBottom: 24 }}\r                />\r                <div className=\"payment-methods\">\r                  <Title level={5}>Ödeme Yöntemi Seçin</Title>\r                  <Row gutter={[16, 16]}>\r                    <Col span={12}>\r                      <Card \r                        hoverable \r                        className=\"payment-method-card\"\r                        onClick={() => simulatePayment('credit_card')}\r                      >\r                        <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                          <CreditCardOutlined style={{ fontSize: 48, color: '#667eea' }} />\r                          <Text strong>Kredi Kartı</Text>\r                          <Text type=\"secondary\">Visa, Mastercard, Amex</Text>\r                        </Space>\r                      </Card>\r                    </Col>\r                    <Col span={12}>\r                      <Card \r                        hoverable \r                        className=\"payment-method-card\"\r                        onClick={() => simulatePayment('bank_transfer')}\r                      >\r                        <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                          <img \r                            src=\"https://cdn-icons-png.flaticon.com/512/2830/2830284.png\" \r                            alt=\"Bank Transfer\" \r                            style={{ width: 48, height: 48 }}\r                          />\r                          <Text strong>Banka Havalesi / EFT</Text>\r                          <Text type=\"secondary\">3 iş günü içinde</Text>\r                        </Space>\r                      </Card>\r                    </Col>\r                  </Row>\r                </div>\r                <Divider />\r                <div className=\"payment-summary\">\r                  <Title level={5}>Ödeme Özeti</Title>\r                  <div className=\"summary-details\">\r                    <div className=\"summary-row\">\r                      <Text>Şirket:</Text>\r                      <Text strong>{form.getFieldValue('companyName')}</Text>\r                    </div>\r                    <div className=\"summary-row\">\r                      <Text>Paket:</Text>\r                      <Text strong>{selectedPackage?.name}</Text>\r                    </div>\r                    <div className=\"summary-row\">\r                      <Text>Dönem:</Text>\r                      <Text strong>{billingPeriod === 'Monthly' ? 'Aylık' : 'Yıllık'}</Text>\r                    </div>\r                    <Divider />\r                    <div className=\"summary-row total\">\r                      <Title level={5}>Toplam Tutar:</Title>\r                      <Title level={4} style={{ color: '#667eea', margin: 0 }}>\r                        {selectedPackage?.currency}{calculatePrice()}\r                      </Title>\r                    </div>\r                  </div>\r                </div>\r                <Alert\r                  message=\"Güvenli Ödeme\"\r                  description=\"Ödeme bilgileriniz 256-bit SSL şifreleme ile korunmaktadır.\"\r                  type=\"success\"\r                  showIcon\r                  icon={<SafetyOutlined />}\r                  style={{ marginTop: 24 }}\r                />\r              </>\r            )}\r          </Card>\r        </Col>\r      </Row>\r    </div>\r  );\r  // Directly render the wizard with integrated package selection\r  return renderRegistrationForm();\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/register/pages/RegisterPage/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect, useRef } from 'react';\rimport { message, Spin, Modal } from 'antd';\rimport Select from 'react-select';\rimport { apiClient } from '@/shared/api/client';\rimport { Captcha } from '@/features/auth/components/Captcha';\rimport { EmailVerificationModal } from '@/features/auth/components/EmailVerification';\r// SignalR validation will be passed as props from parent component\rimport {\r  ShopOutlined,\r  UserOutlined,\r  LockOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  IdcardOutlined,\r  BankOutlined,\r  TeamOutlined,\r  CheckOutlined,\r  SafetyOutlined,\r  InfoCircleOutlined,\r  ArrowLeftOutlined,\r  ArrowRightOutlined,\r  BarChartOutlined,\r  RiseOutlined,\r  GlobalOutlined,\r  LoadingOutlined,\r  EyeOutlined,\r  EyeInvisibleOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  ShoppingCartOutlined,\r  CrownOutlined,\r  RocketOutlined\r} from '@ant-design/icons';\rimport './modern-wizard.css';\rimport './modern-wizard-phone-validation.css';\rimport './package-selection.css';\rinterface ModernWizardProps {\r  onComplete: (data: any) => void;\r  selectedPackage?: any;\r  signalRValidation?: {\r    isConnected: boolean;\r    emailValidation: any;\r    passwordStrength: any;\r    domainCheck: any;\r    phoneValidation: any;\r    companyNameCheck: any;\r    identityValidation: any;\r    tenantCodeValidation: any;\r    validateEmail: (email: string) => Promise<void>;\r    checkPasswordStrength: (password: string) => Promise<void>;\r    checkDomain: (domain: string) => Promise<void>;\r    validatePhone: (phone: string, countryCode?: string) => Promise<void>;\r    checkCompanyName: (name: string) => Promise<void>;\r    validateIdentity: (identityNumber: string) => Promise<void>;\r    validateTenantCode: (code: string) => Promise<void>;\r    error: string | null;\r  };\r}\rexport const ModernWizard: React.FC<ModernWizardProps> = ({ onComplete, selectedPackage, signalRValidation }) => {\r  const [currentStep, setCurrentStep] = useState(0);\r  const [loading, setLoading] = useState(false);\r  const [packages, setPackages] = useState<any[]>([]);\r  const [loadingPackages, setLoadingPackages] = useState(false);\r  const [validating, setValidating] = useState<{ [key: string]: boolean }>({});\r  const [validationErrors, setValidationErrors] = useState<{ [key: string]: string }>({});\r  const [validationSuccess, setValidationSuccess] = useState<{ [key: string]: boolean }>({});\r  const [showCompanySuggestions, setShowCompanySuggestions] = useState(false);\r  const [companySuggestions, setCompanySuggestions] = useState<string[]>([]);\r  const [showTitleSuggestions, setShowTitleSuggestions] = useState(false);\r  const [titleSuggestions, setTitleSuggestions] = useState<string[]>([]);\r  const [showEmailSuggestions, setShowEmailSuggestions] = useState(false);\r  const [emailSuggestions, setEmailSuggestions] = useState<string[]>([]);\r  const [captchaToken, setCaptchaToken] = useState<string | null>(null);\r  const [showEmailVerification, setShowEmailVerification] = useState(false);\r  const [emailVerified, setEmailVerified] = useState(false);\r  const captchaRef = useRef<any>(null);\r  const [formData, setFormData] = useState({\r    // Step 1 - Company Info\r    companyName: '',\r    companyCode: '',\r    identityType: 'TC',\r    identityNumber: '',\r    sector: '',\r    employeeCount: '',\r    // Step 2 - Contact Info\r    contactName: '',\r    contactEmail: '',\r    contactPhone: '',\r    contactTitle: '',\r    // Step 3 - Security\r    password: '',\r    confirmPassword: '',\r    termsAccepted: false,\r    // Step 4 - Package\r    packageId: '',\r    packageName: '',\r    billingPeriod: 'Monthly',\r    // Step 5 - Security Verification\r    captchaVerified: false,\r    emailVerificationCode: ''\r  });\r  const [passwordStrength, setPasswordStrength] = useState({\r    score: 0,\r    hasMinLength: false,\r    hasUpperCase: false,\r    hasLowerCase: false,\r    hasNumber: false,\r    hasSpecial: false\r  });\r  // Use SignalR validation from props if provided\r  const {\r    isConnected = false,\r    emailValidation = null,\r    passwordStrength: signalRPasswordStrength = null,\r    domainCheck = null,\r    phoneValidation = null,\r    companyNameCheck = null,\r    identityValidation = null,\r    tenantCodeValidation = null,\r    validateEmail = async () => {},\r    checkPasswordStrength: checkSignalRPasswordStrength = async () => {},\r    checkDomain = async () => {},\r    validatePhone = async () => {},\r    checkCompanyName = async () => {},\r    validateIdentity = async () => {},\r    validateTenantCode = async () => {},\r    error: validationError = null\r  } = signalRValidation || {};\r  const steps = [\r    { label: 'Şirket', icon: <ShopOutlined /> },\r    { label: 'İletişim', icon: <UserOutlined /> },\r    { label: 'Güvenlik', icon: <LockOutlined /> },\r    { label: 'Paket', icon: <ShoppingCartOutlined /> }\r  ];\r  // Şirket tipleri ve sektörler için öneriler\r  const companyTypes = [\r    { suffix: 'A.Ş.', description: 'Anonim Şirket' },\r    { suffix: 'Ltd. Şti.', description: 'Limited Şirket' },\r    { suffix: 'Tic. Ltd. Şti.', description: 'Ticaret Limited' },\r    { suffix: 'San. ve Tic. A.Ş.', description: 'Sanayi ve Ticaret' }\r  ];\r  const companySectors = [\r    'Teknoloji',\r    'Yazılım',\r    'Bilişim',\r    'Danışmanlık',\r    'Pazarlama',\r    'Reklam',\r    'İnşaat',\r    'Otomotiv',\r    'Tekstil',\r    'Gıda',\r    'Lojistik',\r    'Turizm',\r    'Sağlık',\r    'Eğitim',\r    'Enerji',\r    'Üretim',\r    'Ticaret',\r    'Hizmet'\r  ];\r  // Dinamik öneri oluşturucu\r  const generateCompanySuggestions = (input: string): string[] => {\r    if (!input || input.length < 2) return [];\r    const suggestions: string[] = [];\r    const capitalizedInput = input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();\r    // Temel şirket isimleri\r    suggestions.push(`${capitalizedInput} A.Ş.`);\r    suggestions.push(`${capitalizedInput} Ltd. Şti.`);\r    // Sektör bazlı öneriler\r    if (input.length >= 3) {\r      suggestions.push(`${capitalizedInput} Teknoloji A.Ş.`);\r      suggestions.push(`${capitalizedInput} Yazılım Ltd. Şti.`);\r      suggestions.push(`${capitalizedInput} Bilişim Hizmetleri A.Ş.`);\r      suggestions.push(`${capitalizedInput} Danışmanlık Ltd. Şti.`);\r      suggestions.push(`${capitalizedInput} Ticaret A.Ş.`);\r      suggestions.push(`${capitalizedInput} Sanayi ve Ticaret A.Ş.`);\r      suggestions.push(`${capitalizedInput} İnşaat Ltd. Şti.`);\r      suggestions.push(`${capitalizedInput} Otomotiv San. ve Tic. A.Ş.`);\r    }\r    // Grup/Holding önerileri (daha uzun isimler için)\r    if (input.length >= 4) {\r      suggestions.push(`${capitalizedInput} Holding A.Ş.`);\r      suggestions.push(`${capitalizedInput} Grup Şirketleri`);\r    }\r    // Maksimum 8 öneri göster\r    return suggestions.slice(0, 8);\r  };\r  // Ünvan (Title) önerileri oluşturucu\r  const generateTitleSuggestions = (input: string): string[] => {\r    if (!input || input.length < 1) return [];\r    const titles = [\r      'Genel Müdür',\r      'Genel Koordinatör',\r      'İnsan Kaynakları Müdürü',\r      'İnsan Kaynakları Uzmanı',\r      'Yazılım Müdürü',\r      'Yazılım Geliştirici',\r      'Proje Müdürü',\r      'Proje Yöneticisi',\r      'Satış Müdürü',\r      'Satış Danışmanı',\r      'Pazarlama Müdürü',\r      'Pazarlama Uzmanı',\r      'Muhasebe Müdürü',\r      'Mali İşler Müdürü',\r      'Operasyon Müdürü',\r      'İdari İşler Müdürü',\r      'Bilgi İşlem Müdürü',\r      'Teknik Müdür',\r      'Üretim Müdürü',\r      'Kalite Müdürü',\r      'Ar-Ge Müdürü',\r      'İş Geliştirme Müdürü',\r      'Satın Alma Müdürü',\r      'Lojistik Müdürü',\r      'Fabrika Müdürü',\r      'Bölge Müdürü',\r      'Şube Müdürü',\r      'CEO',\r      'CFO',\r      'CTO',\r      'COO',\r      'CMO',\r      'Kurucu',\r      'Kurucu Ortak',\r      'Yönetim Kurulu Başkanı',\r      'Yönetim Kurulu Üyesi',\r      'İcra Kurulu Üyesi'\r    ];\r    const lowerInput = input.toLowerCase();\r    const filtered = titles.filter(title => \r      title.toLowerCase().includes(lowerInput)\r    );\r    // Başlangıç eşleşmelerini öne al\r    const startsWith = filtered.filter(title => \r      title.toLowerCase().startsWith(lowerInput)\r    );\r    const contains = filtered.filter(title => \r      !title.toLowerCase().startsWith(lowerInput)\r    );\r    return [...startsWith, ...contains].slice(0, 8);\r  };\r  // Email domain önerileri oluşturucu\r  const generateEmailSuggestions = (input: string): string[] => {\r    if (!input || input.length < 2) return [];\r    const suggestions: string[] = [];\r    const [localPart, domainPart] = input.split('@');\r    if (!localPart) return [];\r    // Eğer @ işareti yoksa veya domain kısmı boşsa\r    if (!domainPart || domainPart.length === 0) {\r      // Şirket adına göre domain öner\r      const companyName = formData.companyName.toLowerCase()\r        .replace(/\\s+/g, '')\r        .replace(/[^a-z0-9]/gi, '');\r      if (companyName) {\r        suggestions.push(`${localPart}@${companyName}.com`);\r        suggestions.push(`${localPart}@${companyName}.com.tr`);\r        suggestions.push(`${localPart}@${companyName}.net`);\r        suggestions.push(`${localPart}@${companyName}.org`);\r      }\r      // Popüler domain önerileri\r      suggestions.push(`${localPart}@gmail.com`);\r      suggestions.push(`${localPart}@hotmail.com`);\r      suggestions.push(`${localPart}@outlook.com`);\r      suggestions.push(`${localPart}@yandex.com`);\r    } else {\r      // Domain kısmı yazılmaya başlandıysa tamamlama öner\r      const domains = [\r        'gmail.com',\r        'hotmail.com',\r        'outlook.com',\r        'yahoo.com',\r        'yandex.com',\r        'icloud.com',\r        'protonmail.com'\r      ];\r      const companyName = formData.companyName.toLowerCase()\r        .replace(/\\s+/g, '')\r        .replace(/[^a-z0-9]/gi, '');\r      if (companyName) {\r        domains.unshift(`${companyName}.com`);\r        domains.unshift(`${companyName}.com.tr`);\r      }\r      const filtered = domains.filter(domain => \r        domain.startsWith(domainPart.toLowerCase())\r      );\r      filtered.forEach(domain => {\r        suggestions.push(`${localPart}@${domain}`);\r      });\r    }\r    return suggestions.slice(0, 8);\r  };\r  const sectorOptions = [\r    { value: 'Teknoloji', label: 'Teknoloji' },\r    { value: 'E-Ticaret', label: 'E-Ticaret' },\r    { value: 'Perakende', label: 'Perakende' },\r    { value: 'Üretim', label: 'Üretim' },\r    { value: 'Hizmet', label: 'Hizmet' },\r    { value: 'Sağlık', label: 'Sağlık' },\r    { value: 'Eğitim', label: 'Eğitim' },\r    { value: 'Diğer', label: 'Diğer' }\r  ];\r  const employeeCountOptions = [\r    { value: '1-10', label: '1-10 Kişi' },\r    { value: '11-50', label: '11-50 Kişi' },\r    { value: '51-100', label: '51-100 Kişi' },\r    { value: '101-500', label: '101-500 Kişi' },\r    { value: '500+', label: '500+ Kişi' }\r  ];\r  // Custom styles for react-select\r  const customSelectStyles = {\r    control: (provided: any, state: any) => ({\r      ...provided,\r      minHeight: '54px',\r      border: state.isFocused \r        ? '2px solid #667eea' \r        : validationErrors[state.selectProps.name] \r          ? '2px solid #ef4444'\r          : '2px solid #e5e7eb',\r      borderRadius: '14px',\r      boxShadow: state.isFocused ? '0 0 0 3px rgba(102, 126, 234, 0.1)' : 'none',\r      backgroundColor: validationErrors[state.selectProps.name] ? '#fef2f2' : 'white',\r      '&:hover': {\r        borderColor: state.isFocused ? '#667eea' : '#d1d5db'\r      }\r    }),\r    valueContainer: (provided: any) => ({\r      ...provided,\r      padding: '0 18px',\r      height: '50px'\r    }),\r    input: (provided: any) => ({\r      ...provided,\r      margin: '0',\r      padding: '0'\r    }),\r    placeholder: (provided: any) => ({\r      ...provided,\r      color: '#9ca3af',\r      fontSize: '16px'\r    }),\r    singleValue: (provided: any) => ({\r      ...provided,\r      color: '#1f2937',\r      fontSize: '16px'\r    }),\r    menu: (provided: any) => ({\r      ...provided,\r      borderRadius: '12px',\r      boxShadow: '0 10px 40px rgba(0, 0, 0, 0.1)',\r      border: '1px solid #e5e7eb',\r      marginTop: '4px'\r    }),\r    menuList: (provided: any) => ({\r      ...provided,\r      padding: '8px'\r    }),\r    option: (provided: any, state: any) => ({\r      ...provided,\r      backgroundColor: state.isSelected \r        ? '#667eea' \r        : state.isFocused \r          ? '#f3f4f6' \r          : 'white',\r      color: state.isSelected ? 'white' : '#1f2937',\r      padding: '12px 16px',\r      borderRadius: '8px',\r      cursor: 'pointer',\r      fontSize: '15px',\r      '&:active': {\r        backgroundColor: state.isSelected ? '#667eea' : '#e5e7eb'\r      }\r    }),\r    indicatorSeparator: () => ({\r      display: 'none'\r    }),\r    dropdownIndicator: (provided: any, state: any) => ({\r      ...provided,\r      color: state.isFocused ? '#667eea' : '#9ca3af',\r      '&:hover': {\r        color: '#667eea'\r      }\r    })\r  };\r  // Fetch packages when step 3 is reached\r  useEffect(() => {\r    if (currentStep === 3 && packages.length === 0) {\r      fetchPackages();\r    }\r  }, [currentStep]);\r  const fetchPackages = async () => {\r    setLoadingPackages(true);\r    try {\r      const response = await apiClient.get('/api/public/packages');\r      if (response.data?.success && response.data?.data) {\r        const packagesData = response.data.data.map((pkg: any) => ({\r          id: pkg.id,\r          name: pkg.name,\r          description: pkg.description,\r          price: pkg.basePrice?.amount || 0,\r          currency: pkg.basePrice?.currency || '₺',\r          type: pkg.type,\r          features: pkg.features?.map((f: any) => f.featureName || f.name || f) || [],\r          maxUsers: pkg.maxUsers || 0,\r          maxStorage: pkg.maxStorage || 0,\r          modules: pkg.modules?.map((m: any) => m.moduleName || m) || [],\r          isPopular: pkg.type === 'Professional',\r          trialDays: pkg.trialDays || 14\r        }));\r        setPackages(packagesData);\r      }\r    } catch (error) {\r      // Fallback to mock data\r      setPackages([\r        {\r          id: 'starter-package',\r          name: 'Başlangıç',\r          description: 'Küçük işletmeler için',\r          price: 499,\r          currency: '₺',\r          features: ['5 Kullanıcı', '10 GB Depolama', 'Temel Raporlama'],\r          type: 'Starter'\r        },\r        {\r          id: 'professional-package',\r          name: 'Profesyonel',\r          description: 'Büyüyen işletmeler için',\r          price: 999,\r          currency: '₺',\r          features: ['20 Kullanıcı', '50 GB Depolama', 'Gelişmiş Raporlama'],\r          isPopular: true,\r          type: 'Professional'\r        },\r        {\r          id: 'enterprise-package',\r          name: 'Enterprise',\r          description: 'Kurumsal çözümler',\r          price: 2499,\r          currency: '₺',\r          features: ['Sınırsız Kullanıcı', '500 GB Depolama', 'Özel Raporlama'],\r          type: 'Enterprise'\r        }\r      ]);\r    } finally {\r      setLoadingPackages(false);\r    }\r  };\r  useEffect(() => {\r    if (formData.password) {\r      checkPasswordStrength(formData.password);\r      // Also check with SignalR\r      if (isConnected) {\r        checkSignalRPasswordStrength(formData.password);\r      }\r    }\r  }, [formData.password, isConnected]);\r  // Handle SignalR validation responses\r  useEffect(() => {\r    if (emailValidation) {\r      setValidating(prev => ({ ...prev, email: false }));\r      if (!emailValidation.isValid) {\r        setValidationErrors(prev => ({ ...prev, email: emailValidation.message || 'Geçersiz e-posta' }));\r      } else {\r        setValidationErrors(prev => ({ ...prev, email: '' }));\r      }\r    }\r  }, [emailValidation]);\r  useEffect(() => {\r    if (phoneValidation) {\r      setValidating(prev => ({ ...prev, phone: false }));\r      if (!phoneValidation.isValid) {\r        setValidationErrors(prev => ({ ...prev, phone: phoneValidation.message || 'Geçersiz telefon' }));\r      } else {\r        setValidationErrors(prev => ({ ...prev, phone: '' }));\r      }\r    }\r  }, [phoneValidation]);\r  useEffect(() => {\r    if (identityValidation) {\r      setValidating(prev => ({ ...prev, identityNumber: false }));\r      if (!identityValidation.isValid) {\r        setValidationErrors(prev => ({ ...prev, identityNumber: identityValidation.message || 'Geçersiz kimlik/vergi numarası' }));\r        setValidationSuccess(prev => ({ ...prev, identityNumber: false }));\r      } else {\r        setValidationErrors(prev => ({ ...prev, identityNumber: '' }));\r        setValidationSuccess(prev => ({ ...prev, identityNumber: true }));\r      }\r    }\r  }, [identityValidation]);\r  useEffect(() => {\r    if (companyNameCheck) {\r      setValidating(prev => ({ ...prev, companyName: false }));\r      // Check the actual validation result from API\r      // API returns isValid: false when there are issues\r      const isValid = companyNameCheck.isValid === true;\r      const isUnique = companyNameCheck.isUnique !== false;\r      const containsRestricted = companyNameCheck.containsRestrictedWords === true;\r      // Company name is available only if it's valid, unique, and doesn't contain restricted words\r      const isAvailable = isValid && isUnique && !containsRestricted;\r      if (!isAvailable) {\r        // Build detailed error message\r        let errorMessage = companyNameCheck.message || 'Bu şirket adı kullanılamaz';\r        // Add restriction details if available\r        if (companyNameCheck.details?.restriction) {\r          errorMessage += ` (${companyNameCheck.details.restriction})`;\r        }\r        setValidationErrors(prev => ({ ...prev, companyName: errorMessage }));\r        setValidationSuccess(prev => ({ ...prev, companyName: false }));\r      } else {\r        // Company name is available - show success\r        setValidationErrors(prev => ({ ...prev, companyName: '' }));\r        setValidationSuccess(prev => ({ ...prev, companyName: true }));\r      }\r    }\r  }, [companyNameCheck]);\r  // Tenant Code Validation Effect\r  useEffect(() => {\r    if (tenantCodeValidation) {\r      setValidating(prev => ({ ...prev, companyCode: false }));\r      if (!tenantCodeValidation.isAvailable) {\r        let errorMessage = tenantCodeValidation.message || 'Bu kod kullanılamaz';\r        // Add suggestions if available\r        if (tenantCodeValidation.suggestedCodes && tenantCodeValidation.suggestedCodes.length > 0) {\r          errorMessage += ` (Öneriler: ${tenantCodeValidation.suggestedCodes.slice(0, 3).join(', ')})`;\r        }\r        setValidationErrors(prev => ({ ...prev, companyCode: errorMessage }));\r        setValidationSuccess(prev => ({ ...prev, companyCode: false }));\r      } else {\r        setValidationErrors(prev => ({ ...prev, companyCode: '' }));\r        setValidationSuccess(prev => ({ ...prev, companyCode: true }));\r      }\r    }\r  }, [tenantCodeValidation]);\r  // Domain Check Effect (for backward compatibility)\r  useEffect(() => {\r    if (domainCheck && !tenantCodeValidation) {\r      setValidating(prev => ({ ...prev, companyCode: false }));\r      if (!domainCheck.isAvailable) {\r        setValidationErrors(prev => ({ ...prev, companyCode: 'Bu kod zaten kullanımda' }));\r        setValidationSuccess(prev => ({ ...prev, companyCode: false }));\r      } else {\r        setValidationErrors(prev => ({ ...prev, companyCode: '' }));\r        setValidationSuccess(prev => ({ ...prev, companyCode: true }));\r      }\r    }\r  }, [domainCheck, tenantCodeValidation]);\r  useEffect(() => {\r    if (signalRPasswordStrength) {\r      setPasswordStrength({\r        score: signalRPasswordStrength.score,\r        hasMinLength: signalRPasswordStrength.score >= 1,\r        hasUpperCase: signalRPasswordStrength.hasUpperCase || false,\r        hasLowerCase: signalRPasswordStrength.hasLowerCase || false,\r        hasNumber: signalRPasswordStrength.hasDigit || false,\r        hasSpecial: signalRPasswordStrength.hasSpecialChar || false\r      });\r    }\r  }, [signalRPasswordStrength]);\r  const checkPasswordStrength = (password: string) => {\r    const strength = {\r      score: 0,\r      hasMinLength: password.length >= 8,\r      hasUpperCase: /[A-Z]/.test(password),\r      hasLowerCase: /[a-z]/.test(password),\r      hasNumber: /[0-9]/.test(password),\r      hasSpecial: /[!@#$%^&*(),.?\":{}|<>]/.test(password)\r    };\r    let score = 0;\r    if (strength.hasMinLength) score++;\r    if (strength.hasUpperCase) score++;\r    if (strength.hasLowerCase) score++;\r    if (strength.hasNumber) score++;\r    if (strength.hasSpecial) score++;\r    strength.score = score;\r    setPasswordStrength(strength);\r  };\r  const getPasswordStrengthLabel = () => {\r    if (passwordStrength.score === 0) return '';\r    if (passwordStrength.score <= 2) return 'weak';\r    if (passwordStrength.score === 3) return 'fair';\r    if (passwordStrength.score === 4) return 'good';\r    return 'strong';\r  };\r  const handleInputChange = (field: string, value: any) => {\r    setFormData(prev => ({ ...prev, [field]: value }));\r    // Clear previous error and success states\r    setValidationErrors(prev => ({ ...prev, [field]: '' }));\r    setValidationSuccess(prev => ({ ...prev, [field]: false }));\r    // Company name autocomplete - dinamik öneri oluştur\r    if (field === 'companyName') {\r      if (value && value.length >= 2) {\r        const generatedSuggestions = generateCompanySuggestions(value);\r        setCompanySuggestions(generatedSuggestions);\r        setShowCompanySuggestions(generatedSuggestions.length > 0);\r      } else {\r        setShowCompanySuggestions(false);\r      }\r    }\r    // Title (Ünvan) autocomplete\r    if (field === 'contactTitle') {\r      if (value && value.length >= 1) {\r        const generatedSuggestions = generateTitleSuggestions(value);\r        setTitleSuggestions(generatedSuggestions);\r        setShowTitleSuggestions(generatedSuggestions.length > 0);\r      } else {\r        setShowTitleSuggestions(false);\r      }\r    }\r    // Email autocomplete\r    if (field === 'contactEmail') {\r      if (value && value.length >= 2) {\r        const generatedSuggestions = generateEmailSuggestions(value);\r        setEmailSuggestions(generatedSuggestions);\r        setShowEmailSuggestions(generatedSuggestions.length > 0);\r      } else {\r        setShowEmailSuggestions(false);\r      }\r    }\r    // Trigger real-time validation for specific fields\r    if (isConnected) {\r      switch(field) {\r        case 'contactEmail':\r          if (value && value.includes('@')) {\r            setValidating(prev => ({ ...prev, email: true }));\r            validateEmail(value);\r          }\r          break;\r        case 'contactPhone':\r          if (value && value.length >= 10) {\r            setValidating(prev => ({ ...prev, phone: true }));\r            validatePhone(value);\r          }\r          break;\r        case 'companyName':\r          if (value && value.length >= 3) {\r            setValidating(prev => ({ ...prev, companyName: true }));\r            checkCompanyName(value);\r          }\r          break;\r        case 'companyCode':\r          if (value && value.length >= 3) {\r            setValidating(prev => ({ ...prev, companyCode: true }));\r            checkDomain(value);\r          }\r          break;\r        case 'identityNumber':\r          // TC Kimlik No: 11 haneli, Vergi No: 10 haneli\r          const cleanNumber = value.replace(/\\D/g, '');\r          if (cleanNumber.length === 10 || cleanNumber.length === 11) {\r            // Sadece SignalR bağlı ise validation yap\r            if (isConnected) {\r              setValidating(prev => ({ ...prev, identityNumber: true }));\r              // Async validation with proper error handling\r              try {\r                validateIdentity(cleanNumber).then(() => {\r                }).catch(error => {\r                  setValidating(prev => ({ ...prev, identityNumber: false }));\r                  setValidationErrors(prev => ({ ...prev, identityNumber: 'Doğrulama sırasında hata oluştu' }));\r                });\r              } catch (error) {\r                setValidating(prev => ({ ...prev, identityNumber: false }));\r                setValidationErrors(prev => ({ ...prev, identityNumber: 'Doğrulama sırasında hata oluştu' }));\r              }\r            } else {\r              // SignalR bağlı değilse basit client-side validation yap\r              const isValidLength = (formData.identityType === 'TC' && cleanNumber.length === 11) || \r                                   (formData.identityType === 'VKN' && cleanNumber.length === 10);\r              if (isValidLength) {\r                setValidationSuccess(prev => ({ ...prev, identityNumber: true }));\r              }\r            }\r          }\r          break;\r      }\r    }\r  };\r  const selectCompanySuggestion = (company: string) => {\r    setFormData(prev => ({ ...prev, companyName: company }));\r    setShowCompanySuggestions(false);\r    setValidationErrors(prev => ({ ...prev, companyName: '' }));\r    // Auto-generate company code from name\r    const code = company\r      .toLowerCase()\r      .replace(/[^a-z0-9\\s]/g, '')\r      .split(' ')\r      .slice(0, 2)\r      .join('-')\r      .substring(0, 20);\r    setFormData(prev => ({ ...prev, companyCode: code }));\r    // Validate if connected\r    if (isConnected) {\r      setValidating(prev => ({ ...prev, companyName: true }));\r      checkCompanyName(company);\r    }\r  };\r  const selectTitleSuggestion = (title: string) => {\r    setFormData(prev => ({ ...prev, contactTitle: title }));\r    setShowTitleSuggestions(false);\r    setValidationErrors(prev => ({ ...prev, contactTitle: '' }));\r  };\r  const selectEmailSuggestion = (email: string) => {\r    setFormData(prev => ({ ...prev, contactEmail: email }));\r    setShowEmailSuggestions(false);\r    setValidationErrors(prev => ({ ...prev, email: '' }));\r    // Validate email if connected\r    if (isConnected && email && email.includes('@')) {\r      setValidating(prev => ({ ...prev, email: true }));\r      validateEmail(email);\r    }\r  };\r  const validateStep = (step: number): boolean => {\r    const errors: { [key: string]: string } = {};\r    let hasError = false;\r    switch (step) {\r      case 0:\r        if (!formData.companyName) {\r          errors.companyName = 'Şirket adı zorunludur';\r          hasError = true;\r        }\r        if (!formData.companyCode) {\r          errors.companyCode = 'Şirket kodu zorunludur';\r          hasError = true;\r        }\r        if (!formData.identityNumber) {\r          errors.identityNumber = 'Kimlik/Vergi numarası zorunludur';\r          hasError = true;\r        } else if (formData.identityType === 'TC' && formData.identityNumber.length !== 11) {\r          errors.identityNumber = 'TC Kimlik numarası 11 haneli olmalıdır';\r          hasError = true;\r        } else if (formData.identityType === 'VKN' && formData.identityNumber.length !== 10) {\r          errors.identityNumber = 'Vergi numarası 10 haneli olmalıdır';\r          hasError = true;\r        }\r        if (!formData.sector) {\r          errors.sector = 'Sektör seçimi zorunludur';\r          hasError = true;\r        }\r        if (!formData.employeeCount) {\r          errors.employeeCount = 'Çalışan sayısı zorunludur';\r          hasError = true;\r        }\r        if (hasError) {\r          setValidationErrors(prev => ({ ...prev, ...errors }));\r          message.error('Lütfen tüm zorunlu alanları doldurun');\r          return false;\r        }\r        return true;\r      case 1:\r        if (!formData.contactName) {\r          errors.contactName = 'Ad Soyad zorunludur';\r          hasError = true;\r        }\r        if (!formData.contactTitle) {\r          errors.contactTitle = 'Ünvan zorunludur';\r          hasError = true;\r        }\r        if (!formData.contactEmail) {\r          errors.email = 'E-posta adresi zorunludur';\r          hasError = true;\r        } else {\r          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r          if (!emailRegex.test(formData.contactEmail)) {\r            errors.email = 'Geçerli bir e-posta adresi girin';\r            hasError = true;\r          }\r        }\r        if (!formData.contactPhone) {\r          errors.phone = 'Telefon numarası zorunludur';\r          hasError = true;\r        } else {\r          const phoneRegex = /^[0-9]{10,11}$/;\r          if (!phoneRegex.test(formData.contactPhone.replace(/\\D/g, ''))) {\r            errors.phone = 'Geçerli bir telefon numarası girin';\r            hasError = true;\r          }\r        }\r        if (hasError) {\r          setValidationErrors(prev => ({ ...prev, ...errors }));\r          message.error('Lütfen tüm zorunlu alanları doldurun');\r          return false;\r        }\r        return true;\r      case 2:\r        if (!formData.password) {\r          errors.password = 'Şifre zorunludur';\r          hasError = true;\r        } else if (passwordStrength.score < 3) {\r          errors.password = 'Lütfen daha güçlü bir şifre seçin';\r          hasError = true;\r        }\r        if (!formData.confirmPassword) {\r          errors.confirmPassword = 'Şifre tekrarı zorunludur';\r          hasError = true;\r        } else if (formData.password !== formData.confirmPassword) {\r          errors.confirmPassword = 'Şifreler eşleşmiyor';\r          hasError = true;\r        }\r        if (!formData.termsAccepted) {\r          errors.terms = 'Kullanım koşullarını kabul etmelisiniz';\r          hasError = true;\r        }\r        if (hasError) {\r          setValidationErrors(prev => ({ ...prev, ...errors }));\r          message.error('Lütfen tüm zorunlu alanları doldurun');\r          return false;\r        }\r        return true;\r      case 3:\r        if (!formData.packageId) {\r          setValidationErrors(prev => ({ ...prev, packageId: 'Lütfen bir paket seçin' }));\r          message.error('Lütfen bir paket seçin');\r          return false;\r        }\r        return true;\r      default:\r        return true;\r    }\r  };\r  const handleNext = () => {\r    if (validateStep(currentStep)) {\r      if (currentStep < steps.length - 1) {\r        setCurrentStep(currentStep + 1);\r      } else {\r        handleSubmit();\r      }\r    }\r  };\r  const handleBack = () => {\r    if (currentStep > 0) {\r      setCurrentStep(currentStep - 1);\r    }\r  };\r  const handleSubmit = async () => {\r    // Önce captcha ve e-posta doğrulaması yap\r    if (!captchaToken) {\r      message.warning('Lütfen önce güvenlik doğrulamasını tamamlayın');\r      // Captcha modal'ını aç\r      Modal.confirm({\r        title: 'Güvenlik Doğrulaması',\r        icon: <SafetyOutlined />,\r        content: (\r          <div style={{ marginTop: 16 }}>\r            <p style={{ marginBottom: 16 }}>Kayıt işlemini tamamlamak için lütfen güvenlik doğrulamasını yapın.</p>\r            <Captcha\r              siteKey={process.env.REACT_APP_RECAPTCHA_SITE_KEY || '6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI'}\r              onVerify={(token) => {\r                setCaptchaToken(token);\r                message.success('Güvenlik doğrulaması başarılı!');\r                Modal.destroyAll();\r                // Captcha tamamlandı, şimdi e-posta doğrulaması\r                if (!emailVerified) {\r                  setShowEmailVerification(true);\r                } else {\r                  // Her ikisi de tamamsa kayıt işlemini başlat\r                  performRegistration();\r                }\r              }}\r              onError={() => {\r                message.error('Güvenlik doğrulaması başarısız!');\r              }}\r            />\r          </div>\r        ),\r        okText: 'İptal',\r        cancelButtonProps: { style: { display: 'none' } },\r        onOk: () => {}\r      });\r      return;\r    }\r    // E-posta doğrulaması kontrolü\r    if (!emailVerified) {\r      setShowEmailVerification(true);\r      message.warning('Lütfen e-posta adresinizi doğrulayın');\r      return;\r    }\r    // Her şey tamam, kayıt işlemini başlat\r    performRegistration();\r  };\r  const performRegistration = async () => {\r    setLoading(true);\r    try {\r      const [firstName, ...lastNameParts] = formData.contactName.split(' ');\r      const lastName = lastNameParts.join(' ') || firstName;\r      const registrationData = {\r        companyName: formData.companyName,\r        companyCode: formData.companyCode,\r        identityType: formData.identityType,\r        identityNumber: formData.identityNumber,\r        sector: formData.sector,\r        employeeCount: formData.employeeCount,\r        contactName: formData.contactName,\r        contactEmail: formData.contactEmail,\r        contactPhone: formData.contactPhone,\r        contactTitle: formData.contactTitle,\r        email: formData.contactEmail,\r        username: formData.contactEmail.split('@')[0] || formData.companyCode,\r        firstName: firstName,\r        lastName: lastName,\r        password: formData.password,\r        domain: formData.companyCode,\r        packageId: formData.packageId || selectedPackage?.id,\r        billingPeriod: formData.billingPeriod || 'Monthly'\r      };\r      const response = await apiClient.post('/api/public/register', registrationData);\r      if (response.data?.success && response.data?.data?.id) {\r        message.success('Kayıt başarıyla tamamlandı!');\r        onComplete(response.data.data);\r      } else {\r        message.error('Kayıt sırasında bir hata oluştu');\r      }\r    } catch (error: any) {\r      // Detaylı hata mesajı\r      let errorMessage = 'Kayıt işlemi başarısız';\r      if (error.response?.data?.errors) {\r        // Validation hataları varsa\r        const errors = error.response.data.errors;\r        const errorList = Object.keys(errors).map(key => \r          `${key}: ${Array.isArray(errors[key]) ? errors[key].join(', ') : errors[key]}`\r        ).join('\\n');\r        message.error({\r          content: (\r            <div>\r              <strong>Kayıt hatası:</strong>\r              <br />\r              {errorList}\r            </div>\r          ),\r          duration: 5\r        });\r      } else if (error.response?.data?.message) {\r        // Genel hata mesajı\r        errorMessage = error.response.data.message;\r        message.error(errorMessage, 5);\r      } else if (error.response?.status === 400) {\r        errorMessage = 'Girdiğiniz bilgilerde hata var. Lütfen kontrol edin.';\r        message.error(errorMessage, 5);\r      } else if (error.response?.status === 500) {\r        errorMessage = 'Sunucu hatası. Lütfen daha sonra tekrar deneyin.';\r        message.error(errorMessage, 5);\r      } else {\r        message.error(errorMessage, 5);\r      }\r      // Debug için console'a detaylı bilgi\r    } finally {\r      setLoading(false);\r    }\r  };\r  const renderStepContent = () => {\r    switch (currentStep) {\r      case 0:\r        return (\r          <div className=\"form-fields\">\r            <div className=\"form-header\">\r              <h2 className=\"form-title\">Şirket Bilgileri</h2>\r              <p className=\"form-subtitle\">İşletmenizin temel bilgilerini girin</p>\r            </div>\r            <div className=\"form-row\">\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Şirket Adı <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"input-wrapper\">\r                  <span className=\"input-icon\"><ShopOutlined /></span>\r                  <input\r                    type=\"text\"\r                    className={`form-input form-input-icon ${validationErrors.companyName ? 'input-error' : ''} ${validationSuccess.companyName ? 'input-success' : ''} ${validating.companyName ? 'input-validating' : ''}`}\r                    placeholder=\"Örn: ABC Teknoloji A.Ş.\"\r                    value={formData.companyName}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('companyName', e.target.value)}\r                    onFocus={() => {\r                      if (formData.companyName && formData.companyName.length >= 2) {\r                        const generatedSuggestions = generateCompanySuggestions(formData.companyName);\r                        setCompanySuggestions(generatedSuggestions);\r                        setShowCompanySuggestions(generatedSuggestions.length > 0);\r                      }\r                    }}\r                    onBlur={() => {\r                      // Delay to allow click on suggestions\r                      setTimeout(() => setShowCompanySuggestions(false), 200);\r                    }}\r                  />\r                  {validating.companyName && <Spin size=\"small\" className=\"input-spinner\" />}\r                  {/* Autocomplete Suggestions */}\r                  {showCompanySuggestions && (\r                    <div className=\"autocomplete-suggestions\">\r                      {companySuggestions.map((suggestion, index) => (\r                        <div\r                          key={index}\r                          className=\"suggestion-item\"\r                          onClick={() => selectCompanySuggestion(suggestion)}\r                         role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => selectCompanySuggestion(suggestion)(e)}>\r                          <ShopOutlined className=\"suggestion-icon\" />\r                          <span className=\"suggestion-text\">{suggestion}</span>\r                          {suggestion.includes('A.Ş.') && !suggestion.includes('San.') && !suggestion.includes('Holding') && (\r                            <span className=\"suggestion-badge\">A.Ş.</span>\r                          )}\r                          {suggestion.includes('Ltd. Şti.') && (\r                            <span className=\"suggestion-badge\">Ltd.</span>\r                          )}\r                          {suggestion.includes('Holding') && (\r                            <span className=\"suggestion-badge\">Holding</span>\r                          )}\r                          {suggestion.includes('Teknoloji') && (\r                            <span className=\"suggestion-badge\" style={{background: 'linear-gradient(135deg, #3B82F6, #8B5CF6)'}}>Teknoloji</span>\r                          )}\r                          {suggestion.includes('Yazılım') && (\r                            <span className=\"suggestion-badge\" style={{background: 'linear-gradient(135deg, #10B981, #059669)'}}>Yazılım</span>\r                          )}\r                        </div>\r                      ))}\r                      <div className=\"suggestion-footer\">\r                        <span className=\"suggestion-hint\">💡 Bir öneriyi seçin veya kendi şirket adınızı yazın</span>\r                      </div>\r                    </div>\r                  )}\r                </div>\r                {validationErrors.companyName && <span className=\"error-message\">{validationErrors.companyName}</span>}\r                {validationSuccess.companyName && !validationErrors.companyName && <span className=\"success-message\">✓ Şirket adı kullanılabilir</span>}\r              </div>\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Şirket Kodu <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"input-wrapper\">\r                  <span className=\"input-icon\"><IdcardOutlined /></span>\r                  <input\r                    type=\"text\"\r                    className={`form-input form-input-icon ${validationErrors.companyCode ? 'input-error' : ''} ${validationSuccess.companyCode ? 'input-success' : ''} ${validating.companyCode ? 'input-validating' : ''}`}\r                    placeholder=\"Örn: abc-tech\"\r                    value={formData.companyCode}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('companyCode', e.target.value.toLowerCase().replace(/[^a-z0-9-]/g, ''))}\r                    onBlur={() => {\r                      if (formData.companyCode && formData.companyCode.length >= 3 && !validating.companyCode) {\r                        setValidating(prev => ({ ...prev, companyCode: true }));\r                        // Use tenant code validation if available, fallback to domain check\r                        if (validateTenantCode) {\r                          validateTenantCode(formData.companyCode);\r                        } else if (checkDomain) {\r                          checkDomain(formData.companyCode);\r                        }\r                      }\r                    }}\r                  />\r                  {validating.companyCode && <Spin size=\"small\" className=\"input-spinner\" />}\r                  {validationErrors.companyCode && <span className=\"error-message\">{validationErrors.companyCode}</span>}\r                {validationSuccess.companyCode && !validationErrors.companyCode && <span className=\"success-message\">✓ Şirket kodu kullanılabilir</span>}\r                </div>\r              </div>\r            </div>\r            <div className=\"form-row single\">\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Kimlik Türü <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"radio-cards\">\r                  <div className=\"radio-card\">\r                    <input\r                      type=\"radio\"\r                      id=\"tc\"\r                      name=\"identityType\"\r                      value=\"TC\"\r                      checked={formData.identityType === 'TC'}\r                      onChange={(e) = aria-label=\"input field\"> handleInputChange('identityType', e.target.value)}\r                    />\r                    <label htmlFor=\"tc\" className=\"radio-card-label\">\r                      <div className=\"radio-card-icon\"><UserOutlined /></div>\r                      <div className=\"radio-card-text\">\r                        <div className=\"radio-card-title\">TC Kimlik</div>\r                        <div className=\"radio-card-desc\">Şahıs şirketleri için</div>\r                      </div>\r                    </label>\r                  </div>\r                  <div className=\"radio-card\">\r                    <input\r                      type=\"radio\"\r                      id=\"vkn\"\r                      name=\"identityType\"\r                      value=\"VKN\"\r                      checked={formData.identityType === 'VKN'}\r                      onChange={(e) = aria-label=\"input field\"> handleInputChange('identityType', e.target.value)}\r                    />\r                    <label htmlFor=\"vkn\" className=\"radio-card-label\">\r                      <div className=\"radio-card-icon\"><BankOutlined /></div>\r                      <div className=\"radio-card-text\">\r                        <div className=\"radio-card-title\">Vergi No</div>\r                        <div className=\"radio-card-desc\">Kurumsal şirketler için</div>\r                      </div>\r                    </label>\r                  </div>\r                </div>\r              </div>\r            </div>\r            <div className=\"form-row single\">\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  {formData.identityType === 'TC' ? 'TC Kimlik No' : 'Vergi No'} <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"input-wrapper\">\r                  <input\r                    type=\"text\"\r                    className={`form-input ${validationErrors.identityNumber ? 'input-error' : ''} ${validationSuccess.identityNumber ? 'input-success' : ''} ${validating.identityNumber ? 'input-validating' : ''}`}\r                    placeholder={formData.identityType === 'TC' ? '11 haneli TC kimlik numarası' : '10 haneli vergi numarası'}\r                    value={formData.identityNumber}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('identityNumber', e.target.value.replace(/\\D/g, ''))}\r                    maxLength={formData.identityType === 'TC' ? 11 : 10}\r                  />\r                  {validating.identityNumber && (\r                    <div className=\"input-spinner\">\r                      <LoadingOutlined style={{ fontSize: 16, color: '#667eea' }} />\r                    </div>\r                  )}\r                </div>\r                {validationErrors.identityNumber && <span className=\"error-message\">{validationErrors.identityNumber}</span>}\r                {validationSuccess.identityNumber && <span className=\"success-message\">✓ {formData.identityType === 'TC' ? 'TC Kimlik numarası' : 'Vergi numarası'} geçerli</span>}\r              </div>\r            </div>\r            <div className=\"form-row\">\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Sektör <span className=\"form-label-required\">*</span>\r                </label>\r                <Select\r                  name=\"sector\"\r                  options={sectorOptions}\r                  value={sectorOptions.find(opt = aria-label=\"select field\"> opt.value === formData.sector)}\r                  onChange={(option) => handleInputChange('sector', option?.value || '')}\r                  placeholder=\"Sektör seçin\"\r                  styles={customSelectStyles}\r                  isSearchable={true}\r                  isClearable={true}\r                  noOptionsMessage={() => \"Sonuç bulunamadı\"}\r                />\r                {validationErrors.sector && <span className=\"error-message\">{validationErrors.sector}</span>}\r              </div>\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Çalışan Sayısı <span className=\"form-label-required\">*</span>\r                </label>\r                <Select\r                  name=\"employeeCount\"\r                  options={employeeCountOptions}\r                  value={employeeCountOptions.find(opt = aria-label=\"select field\"> opt.value === formData.employeeCount)}\r                  onChange={(option) => handleInputChange('employeeCount', option?.value || '')}\r                  placeholder=\"Çalışan sayısı seçin\"\r                  styles={customSelectStyles}\r                  isSearchable={false}\r                  isClearable={true}\r                  noOptionsMessage={() => \"Sonuç bulunamadı\"}\r                />\r                {validationErrors.employeeCount && <span className=\"error-message\">{validationErrors.employeeCount}</span>}\r              </div>\r            </div>\r          </div>\r        );\r      case 1:\r        return (\r          <div className=\"form-fields\">\r            <div className=\"form-header\">\r              <h2 className=\"form-title\">İletişim Bilgileri</h2>\r              <p className=\"form-subtitle\">Hesap yöneticisi bilgilerini girin</p>\r            </div>\r            <div className=\"info-box\">\r              <span className=\"info-box-icon\"><InfoCircleOutlined /></span>\r              <div className=\"info-box-content\">\r                <div className=\"info-box-title\">Önemli Bilgi</div>\r                <div className=\"info-box-text\">\r                  Bu bilgiler hesabınızın ana yöneticisi için kullanılacaktır.\r                  Kayıt sonrası ek kullanıcılar ekleyebilirsiniz.\r                </div>\r              </div>\r            </div>\r            <div className=\"form-row\">\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Ad Soyad <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"input-wrapper\">\r                  <span className=\"input-icon\"><UserOutlined /></span>\r                  <input\r                    type=\"text\"\r                    className={`form-input form-input-icon ${validationErrors.contactName ? 'input-error' : ''}`}\r                    placeholder=\"Örn: Ahmet Yılmaz\"\r                    value={formData.contactName}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('contactName', e.target.value)}\r                  />\r                </div>\r                {validationErrors.contactName && <span className=\"error-message\">{validationErrors.contactName}</span>}\r              </div>\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Ünvan <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"input-wrapper\" style={{ position: 'relative' }}>\r                  <span className=\"input-icon\"><IdcardOutlined /></span>\r                  <input\r                    type=\"text\"\r                    className={`form-input form-input-icon ${validationErrors.contactTitle ? 'input-error' : ''}`}\r                    placeholder=\"Örn: Genel Müdür\"\r                    value={formData.contactTitle}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('contactTitle', e.target.value)}\r                    onFocus={() => {\r                      if (formData.contactTitle.length >= 1) {\r                        const suggestions = generateTitleSuggestions(formData.contactTitle);\r                        setTitleSuggestions(suggestions);\r                        setShowTitleSuggestions(suggestions.length > 0);\r                      }\r                    }}\r                    onBlur={() => {\r                      setTimeout(() => setShowTitleSuggestions(false), 200);\r                    }}\r                  />\r                  {showTitleSuggestions && (\r                    <div className=\"autocomplete-suggestions\">\r                      {titleSuggestions.map((title, index) => (\r                        <div\r                          key={index}\r                          className=\"suggestion-item\"\r                          onClick={() => selectTitleSuggestion(title)}\r                         role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => selectTitleSuggestion(title)(e)}>\r                          <span className=\"suggestion-icon\">👤</span>\r                          <span className=\"suggestion-text\">{title}</span>\r                        </div>\r                      ))}\r                      <div className=\"suggestion-footer\">\r                        <span className=\"suggestion-hint\">💡 Yönetici pozisyonları</span>\r                      </div>\r                    </div>\r                  )}\r                </div>\r                {validationErrors.contactTitle && <span className=\"error-message\">{validationErrors.contactTitle}</span>}\r              </div>\r            </div>\r            <div className=\"form-row single\">\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  E-posta Adresi <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"input-wrapper\" style={{ position: 'relative' }}>\r                  <span className=\"input-icon\"><MailOutlined /></span>\r                  <input\r                    type=\"email\"\r                    className={`form-input form-input-icon ${validationErrors.email ? 'input-error' : ''} ${validating.email ? 'input-validating' : ''}`}\r                    placeholder=\"ornek@sirket.com\"\r                    value={formData.contactEmail}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('contactEmail', e.target.value)}\r                    onFocus={() => {\r                      if (formData.contactEmail.length >= 2) {\r                        const suggestions = generateEmailSuggestions(formData.contactEmail);\r                        setEmailSuggestions(suggestions);\r                        setShowEmailSuggestions(suggestions.length > 0);\r                      }\r                    }}\r                    onBlur={() => {\r                      setTimeout(() => setShowEmailSuggestions(false), 200);\r                    }}\r                  />\r                  {validating.email && <Spin size=\"small\" className=\"input-spinner\" />}\r                  {showEmailSuggestions && (\r                    <div className=\"autocomplete-suggestions\">\r                      {emailSuggestions.map((email, index) => (\r                        <div\r                          key={index}\r                          className=\"suggestion-item\"\r                          onClick={() => selectEmailSuggestion(email)}\r                         role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => selectEmailSuggestion(email)(e)}>\r                          <span className=\"suggestion-icon\">✉️</span>\r                          <span className=\"suggestion-text\">{email}</span>\r                          {email.includes(formData.companyName.toLowerCase().replace(/\\s+/g, '').replace(/[^a-z0-9]/gi, '')) && (\r                            <span className=\"suggestion-badge\">Şirket</span>\r                          )}\r                        </div>\r                      ))}\r                      <div className=\"suggestion-footer\">\r                        <span className=\"suggestion-hint\">🌐 Domain önerileri</span>\r                      </div>\r                    </div>\r                  )}\r                  {validationErrors.email && <span className=\"error-message\">{validationErrors.email}</span>}\r                </div>\r              </div>\r            </div>\r            <div className=\"form-row single\">\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Telefon <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"input-wrapper\">\r                  <span className=\"input-icon\"><PhoneOutlined /></span>\r                  <input\r                    type=\"tel\"\r                    className={`form-input form-input-icon ${validationErrors.phone ? 'input-error' : ''} ${validating.phone ? 'input-validating' : ''} ${phoneValidation?.isValid && !validating.phone ? 'input-success' : ''}`}\r                    placeholder=\"5XX XXX XX XX\"\r                    value={formData.contactPhone}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('contactPhone', e.target.value)}\r                  />\r                  {validating.phone && <Spin size=\"small\" className=\"input-spinner\" />}\r                  {!validating.phone && phoneValidation && !validationErrors.phone && (\r                    <span className=\"validation-icon\">\r                      {phoneValidation.isValid ? (\r                        <CheckCircleOutlined style={{ color: '#52c41a', fontSize: '16px' }} />\r                      ) : (\r                        <CloseCircleOutlined style={{ color: '#ff4d4f', fontSize: '16px' }} />\r                      )}\r                    </span>\r                  )}\r                  {validationErrors.phone && <span className=\"error-message\">{validationErrors.phone}</span>}\r                  {!validating.phone && phoneValidation && phoneValidation.formattedNumber && phoneValidation.isValid && (\r                    <span className=\"success-hint\" style={{ color: '#52c41a', fontSize: '12px', marginTop: '4px' }}>\r                      Formatlanmış: {phoneValidation.formattedNumber}\r                    </span>\r                  )}\r                </div>\r              </div>\r            </div>\r          </div>\r        );\r      case 2:\r        return (\r          <div className=\"form-fields\">\r            <div className=\"form-header\">\r              <h2 className=\"form-title\">Hesap Güvenliği</h2>\r              <p className=\"form-subtitle\">Güçlü bir şifre belirleyin</p>\r            </div>\r            <div className=\"form-row single\">\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Şifre <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"input-wrapper\">\r                  <span className=\"input-icon\"><LockOutlined /></span>\r                  <input\r                    type=\"password\"\r                    className={`form-input form-input-icon ${validationErrors.password ? 'input-error' : ''}`}\r                    placeholder=\"En az 8 karakter\"\r                    value={formData.password}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('password', e.target.value)}\r                  />\r                </div>\r                {validationErrors.password && <span className=\"error-message\">{validationErrors.password}</span>}\r              </div>\r            </div>\r            <div className=\"form-row single\">\r              <div className=\"form-group\">\r                <label className=\"form-label\">\r                  Şifre Tekrar <span className=\"form-label-required\">*</span>\r                </label>\r                <div className=\"input-wrapper\">\r                  <span className=\"input-icon\"><LockOutlined /></span>\r                  <input\r                    type=\"password\"\r                    className={`form-input form-input-icon ${validationErrors.confirmPassword ? 'input-error' : ''}`}\r                    placeholder=\"Şifreyi tekrar girin\"\r                    value={formData.confirmPassword}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('confirmPassword', e.target.value)}\r                  />\r                </div>\r                {validationErrors.confirmPassword && <span className=\"error-message\">{validationErrors.confirmPassword}</span>}\r              </div>\r            </div>\r            {formData.password && (\r              <div className=\"password-meter\">\r                <div className=\"password-meter-bar\">\r                  <div className={`password-meter-fill ${getPasswordStrengthLabel()}`} />\r                </div>\r                <div className=\"password-requirements\">\r                  <div className={`requirement-item ${passwordStrength.hasMinLength ? 'met' : ''}`}>\r                    <span className=\"requirement-icon\">{passwordStrength.hasMinLength ? <CheckOutlined /> : '○'}</span>\r                    En az 8 karakter\r                  </div>\r                  <div className={`requirement-item ${passwordStrength.hasUpperCase ? 'met' : ''}`}>\r                    <span className=\"requirement-icon\">{passwordStrength.hasUpperCase ? <CheckOutlined /> : '○'}</span>\r                    Büyük harf\r                  </div>\r                  <div className={`requirement-item ${passwordStrength.hasLowerCase ? 'met' : ''}`}>\r                    <span className=\"requirement-icon\">{passwordStrength.hasLowerCase ? <CheckOutlined /> : '○'}</span>\r                    Küçük harf\r                  </div>\r                  <div className={`requirement-item ${passwordStrength.hasNumber ? 'met' : ''}`}>\r                    <span className=\"requirement-icon\">{passwordStrength.hasNumber ? <CheckOutlined /> : '○'}</span>\r                    Rakam\r                  </div>\r                  <div className={`requirement-item ${passwordStrength.hasSpecial ? 'met' : ''}`}>\r                    <span className=\"requirement-icon\">{passwordStrength.hasSpecial ? <CheckOutlined /> : '○'}</span>\r                    Özel karakter\r                  </div>\r                </div>\r              </div>\r            )}\r            <div className=\"form-row single\">\r              <div className=\"form-group\">\r                <label className=\"checkbox-label\">\r                  <input\r                    type=\"checkbox\"\r                    checked={formData.termsAccepted}\r                    onChange={(e) = aria-label=\"input field\"> handleInputChange('termsAccepted', e.target.checked)}\r                  />\r                  <span>\r                    <a href=\"#\" onClick={(e) => e.preventDefault()}>Kullanım koşullarını</a> ve \r                    <a href=\"#\" onClick={(e) => e.preventDefault()}> gizlilik politikasını</a> okudum, kabul ediyorum.\r                  </span>\r                </label>\r                {validationErrors.terms && <span className=\"error-message\" style={{marginTop: '8px', display: 'block'}}>{validationErrors.terms}</span>}\r              </div>\r            </div>\r            <div className=\"info-box\">\r              <span className=\"info-box-icon\"><SafetyOutlined /></span>\r              <div className=\"info-box-content\">\r                <div className=\"info-box-title\">Güvenlik Garantisi</div>\r                <div className=\"info-box-text\">\r                  Tüm verileriniz 256-bit SSL şifreleme ile korunur.\r                  Şifreniz güvenli bir şekilde hashlenerek saklanır.\r                </div>\r              </div>\r            </div>\r          </div>\r        );\r      case 3:\r        return (\r          <div className=\"form-fields package-selection-step\">\r            <div className=\"form-header\">\r              <h2 className=\"form-title\">Paket Seçimi</h2>\r              <p className=\"form-subtitle\">İşletmenize en uygun paketi seçin</p>\r            </div>\r            {/* Billing Period Toggle - Üstte */}\r            <div className=\"billing-toggle-container\">\r              <div className=\"billing-toggle\">\r                <button \r                  className={`billing-toggle-btn ${formData.billingPeriod === 'Monthly' ? 'active' : ''}`}\r                  onClick={() => handleInputChange('billingPeriod', 'Monthly')}\r                >\r                  Aylık\r                </button>\r                <button \r                  className={`billing-toggle-btn ${formData.billingPeriod === 'Yearly' ? 'active' : ''}`}\r                  onClick={() => handleInputChange('billingPeriod', 'Yearly')}\r                >\r                  Yıllık\r                  <span className=\"discount-badge\">%20 İndirim</span>\r                </button>\r              </div>\r            </div>\r            {loadingPackages ? (\r              <div className=\"packages-loading\">\r                <Spin size=\"large\" />\r                <p>Paketler yükleniyor...</p>\r              </div>\r            ) : (\r              <div className=\"packages-container\">\r                {packages.map((pkg) => (\r                  <div \r                    key={pkg.id}\r                    className={`package-item ${formData.packageId === pkg.id ? 'selected' : ''} ${pkg.isPopular ? 'popular' : ''}`}\r                    onClick={() => {\r                      setFormData(prev => ({\r                        ...prev,\r                        packageId: pkg.id,\r                        packageName: pkg.name\r                      }));\r                    }}\r                   role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => {\r                      setFormData(prev => ({\r                        ...prev,\r                        packageId: pkg.id,\r                        packageName: pkg.name\r                      (e)}>\r                    {pkg.isPopular && (\r                      <div className=\"package-badge\">\r                        <span>EN POPÜLER</span>\r                      </div>\r                    )}\r                    <div className=\"package-content\">\r                      <div className=\"package-header\">\r                        <div className=\"package-icon\">\r                          {pkg.type === 'Starter' || pkg.name === 'Başlangıç' ? <RocketOutlined /> : null}\r                          {pkg.type === 'Professional' || pkg.name === 'Profesyonel' ? <CrownOutlined /> : null}\r                          {pkg.type === 'Enterprise' || pkg.name === 'Enterprise' ? <GlobalOutlined /> : null}\r                          {!pkg.type && pkg.name !== 'Başlangıç' && pkg.name !== 'Profesyonel' && pkg.name !== 'Enterprise' ? <ShoppingCartOutlined /> : null}\r                        </div>\r                        <div className=\"package-info\">\r                          <h3 className=\"package-name\">{pkg.name}</h3>\r                          <p className=\"package-description\">{pkg.description}</p>\r                        </div>\r                      </div>\r                      <div className=\"package-price-section\">\r                        <div className=\"package-price\">\r                          <span className=\"price-amount\">\r                            {pkg.currency}{formData.billingPeriod === 'Yearly' \r                              ? Math.floor(pkg.price * 12 * 0.8 / 12) \r                              : pkg.price}\r                          </span>\r                          <span className=\"price-period\">/ay</span>\r                        </div>\r                        {formData.billingPeriod === 'Yearly' && (\r                          <div style={{ marginTop: '4px' }}>\r                            <span className=\"price-original\">{pkg.currency}{pkg.price}</span>\r                            <span style={{ color: '#10b981', fontSize: '12px', marginLeft: '8px' }}>\r                              %20 tasarruf\r                            </span>\r                          </div>\r                        )}\r                        <div className=\"package-select\" style={{ marginTop: '16px' }}>\r                          <div className={`package-radio ${formData.packageId === pkg.id ? 'checked' : ''}`}>\r                            {formData.packageId === pkg.id && <CheckOutlined />}\r                          </div>\r                        </div>\r                      </div>\r                      <ul className=\"package-features\">\r                        {pkg.features?.map((feature, idx) => (\r                          <li key={idx}>\r                            <CheckOutlined style={{ color: '#10b981' }} /> {feature}\r                          </li>\r                        ))}\r                      </ul>\r                    </div>\r                  </div>\r                ))}\r              </div>\r            )}\r            {validationErrors.packageId && (\r              <span className=\"error-message package-error\">\r                {validationErrors.packageId}\r              </span>\r            )}\r          </div>\r        );\r      default:\r        return null;\r    }\r  };\r  const getProgressWidth = () => {\r    return `${((currentStep) / (steps.length - 1)) * 100}%`;\r  };\r  const getStepTitle = () => {\r    switch(currentStep) {\r      case 0: return 'Şirket Profili Oluşturun';\r      case 1: return 'İletişim Bilgilerini Tamamlayın';\r      case 2: return 'Güvenlik Ayarlarını Yapın';\r      case 3: return 'Paket Seçimi Yapın';\r      default: return 'İşletmenizi Güçlendirin';\r    }\r  };\r  const getStepDescription = () => {\r    switch(currentStep) {\r      case 0: return 'Şirketinizin temel bilgilerini girerek profilinizi oluşturun. Bu bilgiler faturalama ve yasal süreçlerde kullanılacaktır.';\r      case 1: return 'Hesap yöneticisi bilgilerinizi ekleyin. Size özel destek ve güncellemeler için iletişim bilgileriniz önemlidir.';\r      case 2: return 'Güçlü bir şifre belirleyerek hesabınızı koruma altına alın. Verilerinizin güvenliği bizim için önceliklidir.';\r      case 3: return 'İhtiyaçlarınıza en uygun paketi seçin. Her pakette farklı özellikler ve limitler bulunur.';\r      default: return 'Modern CRM ve stok yönetimi çözümleriyle işletmenizin verimliliğini artırın.';\r    }\r  };\r  return (\r    <div className=\"modern-wizard-container\">\r      {/* Left Side - Form Panel */}\r      <div className=\"wizard-form-panel\">\r        <div className=\"form-progress\">\r          <div className=\"progress-steps\">\r            <div className=\"progress-line\" style={{ width: getProgressWidth() }} />\r            {steps.map((step, index) => (\r              <div\r                key={index}\r                className={`progress-step ${\r                  index === currentStep ? 'active' : ''\r                } ${\r                  index < currentStep ? 'completed' : ''\r                }`}\r              >\r                <div className=\"step-circle\">\r                  {index < currentStep ? <CheckOutlined /> : (index + 1)}\r                </div>\r                <div className=\"step-label\">{step.label}</div>\r              </div>\r            ))}\r          </div>\r        </div>\r        {loading ? (\r          <div className=\"form-loading\">\r            <div className=\"loading-spinner\"></div>\r            <div className=\"loading-text\">İşleniyor...</div>\r          </div>\r        ) : (\r          <>\r            {renderStepContent()}\r            <div className=\"form-actions\">\r              {currentStep > 0 && (\r                <button\r                  className=\"btn btn-secondary\"\r                  onClick={handleBack}\r                >\r                  <ArrowLeftOutlined /> Geri\r                </button>\r              )}\r              <div className=\"step-dots\">\r                {steps.map((_, index) => (\r                  <div\r                    key={index}\r                    className={`step-dot ${index === currentStep ? 'active' : ''}`}\r                  />\r                ))}\r              </div>\r              <button\r                className=\"btn btn-primary\"\r                onClick={handleNext}\r                disabled={loading}\r              >\r                {currentStep === steps.length - 1 ? (\r                  <>Kayıt Ol <CheckOutlined /></>\r                ) : (\r                  <>İleri <ArrowRightOutlined /></>\r                )}\r              </button>\r            </div>\r          </>\r        )}\r      </div>\r      {/* Right Side - Visual Panel */}\r      <div className=\"wizard-visual-panel\">\r        <div className=\"floating-element\"></div>\r        <div className=\"floating-element\"></div>\r        <div className=\"floating-element\"></div>\r        <div className=\"wizard-brand\">\r          <h1>\r            <span className=\"wizard-brand-icon\">📊</span>\r            Stocker\r          </h1>\r          <p>İşletmenizi dijitalleştirin, büyütün</p>\r          {isConnected && (\r            <div className=\"connection-status\">\r              <span className=\"status-dot active\"></span>\r              <span className=\"status-text\">Canlı doğrulama aktif</span>\r            </div>\r          )}\r        </div>\r        <div className=\"wizard-illustration\">\r          <div className=\"illustration-container step-illustration\">\r            <div className={`illustration-graphic step-${currentStep}-graphic`}>\r              <div className=\"chart-bars\">\r                <div className=\"chart-bar\"></div>\r                <div className=\"chart-bar\"></div>\r                <div className=\"chart-bar\"></div>\r                <div className=\"chart-bar\"></div>\r                <div className=\"chart-bar\"></div>\r              </div>\r            </div>\r            <div className=\"illustration-text\">\r              <h2>{getStepTitle()}</h2>\r              <p>{getStepDescription()}</p>\r            </div>\r          </div>\r        </div>\r        <div className=\"wizard-features\">\r          <div className=\"feature-item\">\r            <div className=\"feature-icon\">🚀</div>\r            <div className=\"feature-text\">\r              <h4>Hızlı Kurulum</h4>\r              <p>5 dakikada başlayın</p>\r            </div>\r          </div>\r          <div className=\"feature-item\">\r            <div className=\"feature-icon\">🔒</div>\r            <div className=\"feature-text\">\r              <h4>Güvenli Altyapı</h4>\r              <p>256-bit SSL şifreleme</p>\r            </div>\r          </div>\r          <div className=\"feature-item\">\r            <div className=\"feature-icon\">📱</div>\r            <div className=\"feature-text\">\r              <h4>Mobil Uyumlu</h4>\r              <p>Her yerden erişim</p>\r            </div>\r          </div>\r        </div>\r      </div>\r      {/* E-posta Doğrulama Modal */}\r      <EmailVerificationModal\r        visible={showEmailVerification}\r        email={formData.contactEmail}\r        onClose={() => setShowEmailVerification(false)}\r        onVerified={() => {\r          setEmailVerified(true);\r          setShowEmailVerification(false);\r          message.success('E-posta adresiniz başarıyla doğrulandı!');\r          // Eğer captcha da tamamlandıysa kayıt işlemini başlat\r          if (captchaToken) {\r            performRegistration();\r          }\r        }}\r      />\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/register/pages/RegisterPage/ModernWizard.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { \r  Card, \r  Row, \r  Col, \r  Checkbox, \r  Typography, \r  Tag, \r  Space, \r  Button, \r  Divider,\r  Badge,\r  Tooltip,\r  message\r} from 'antd';\rimport {\r  UserOutlined,\r  InboxOutlined,\r  CalculatorOutlined,\r  TeamOutlined,\r  ShoppingCartOutlined,\r  ToolOutlined,\r  ProjectOutlined,\r  CarOutlined,\r  ShopOutlined,\r  FileTextOutlined,\r  ApiOutlined,\r  BankOutlined,\r  BarChartOutlined,\r  CheckCircleOutlined,\r  InfoCircleOutlined,\r  CrownOutlined,\r  PlusCircleOutlined,\r  AppstoreOutlined\r} from '@ant-design/icons';\rimport { modules, basePackages, calculateTotalPrice, getRequiredModules, getModulesByCategory } from '../../data/modules';\rconst { Title, Text, Paragraph } = Typography;\rinterface ModuleSelectionProps {\r  onComplete: (selectedModules: string[], basePackage: string, totalPrice: number) => void;\r  initialModules?: string[];\r  initialPackage?: string;\r}\rconst iconMap: { [key: string]: React.ReactNode } = {\r  'UserOutlined': <UserOutlined />,\r  'InboxOutlined': <InboxOutlined />,\r  'CalculatorOutlined': <CalculatorOutlined />,\r  'TeamOutlined': <TeamOutlined />,\r  'ShoppingCartOutlined': <ShoppingCartOutlined />,\r  'ToolOutlined': <ToolOutlined />,\r  'ProjectOutlined': <ProjectOutlined />,\r  'CarOutlined': <CarOutlined />,\r  'ShopOutlined': <ShopOutlined />,\r  'FileTextOutlined': <FileTextOutlined />,\r  'ApiOutlined': <ApiOutlined />,\r  'BankOutlined': <BankOutlined />,\r  'BarChartOutlined': <BarChartOutlined />\r};\rexport const ModuleSelection: React.FC<ModuleSelectionProps> = ({ \r  onComplete, \r  initialModules = [], \r  initialPackage = 'starter' \r}) => {\r  const [selectedModules, setSelectedModules] = useState<string[]>([...getRequiredModules(), ...initialModules]);\r  const [selectedPackage, setSelectedPackage] = useState<string>(initialPackage);\r  const [totalPrice, setTotalPrice] = useState(0);\r  useEffect(() => {\r    const price = calculateTotalPrice(selectedModules, selectedPackage);\r    setTotalPrice(price);\r  }, [selectedModules, selectedPackage]);\r  const handleModuleToggle = (moduleId: string, checked: boolean) => {\r    const module = modules.find(m => m.id === moduleId);\r    if (module?.required && !checked) {\r      message.warning('Bu modül zorunludur ve kaldırılamaz');\r      return;\r    }\r    if (checked) {\r      setSelectedModules([...selectedModules, moduleId]);\r    } else {\r      setSelectedModules(selectedModules.filter(id => id !== moduleId));\r    }\r  };\r  const handlePackageSelect = (packageId: string) => {\r    setSelectedPackage(packageId);\r  };\r  const handleContinue = () => {\r    if (selectedModules.length === 0) {\r      message.error('En az bir modül seçmelisiniz');\r      return;\r    }\r    onComplete(selectedModules, selectedPackage, totalPrice);\r  };\r  const renderModuleCard = (module: typeof modules[0]) => {\r    const isSelected = selectedModules.includes(module.id);\r    const icon = module.icon ? iconMap[module.icon] : <AppstoreOutlined />;\r    return (\r      <Card\r        key={module.id}\r        className={`module-card ${isSelected ? 'selected' : ''} ${module.required ? 'required' : ''}`}\r        hoverable={!module.required}\r        style={{\r          borderColor: isSelected ? '#667eea' : undefined,\r          borderWidth: isSelected ? 2 : 1\r        }}\r      >\r        <div style={{ position: 'relative' }}>\r          {module.popular && (\r            <Badge.Ribbon text=\"Popüler\" color=\"red\" />\r          )}\r          {module.required && (\r            <Tag color=\"blue\" style={{ position: 'absolute', top: 0, right: 0 }}>\r              Zorunlu\r            </Tag>\r          )}\r          <Checkbox\r            checked={isSelected}\r            disabled={module.required}\r            onChange={(e) => handleModuleToggle(module.id, e.target.checked)}\r            style={{ position: 'absolute', top: 0, left: 0 }}\r          />\r          <div style={{ textAlign: 'center', marginTop: 20 }}>\r            <div style={{ fontSize: 32, color: isSelected ? '#667eea' : '#999', marginBottom: 16 }}>\r              {icon}\r            </div>\r            <Title level={5} style={{ marginBottom: 8 }}>{module.name}</Title>\r            <Paragraph type=\"secondary\" style={{ fontSize: 13, marginBottom: 16 }}>\r              {module.description}\r            </Paragraph>\r            <div style={{ marginBottom: 16, display: 'flex', justifyContent: 'center', alignItems: 'baseline', flexWrap: 'wrap' }}>\r              <Text strong style={{ fontSize: 20, color: '#667eea' }}>\r                ₺{module.price}\r              </Text>\r              <Text type=\"secondary\" style={{ fontSize: 14, marginLeft: 4 }}>/ay</Text>\r            </div>\r            <div style={{ textAlign: 'left' }}>\r              {module.features.slice(0, 3).map((feature, idx) => (\r                <div key={idx} style={{ marginBottom: 4 }}>\r                  <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 6 }} />\r                  <Text style={{ fontSize: 12 }}>{feature}</Text>\r                </div>\r              ))}\r              {module.features.length > 3 && (\r                <Tooltip title={\r                  <div>\r                    {module.features.slice(3).map((feature, idx) => (\r                      <div key={idx}>{feature}</div>\r                    ))}\r                  </div>\r                }>\r                  <Text type=\"secondary\" style={{ fontSize: 12, cursor: 'pointer' }}>\r                    +{module.features.length - 3} özellik daha...\r                  </Text>\r                </Tooltip>\r              )}\r            </div>\r          </div>\r        </div>\r      </Card>\r    );\r  };\r  return (\r    <div className=\"module-selection\">\r      {/* Base Package Selection */}\r      <div style={{ marginBottom: 48 }}>\r        <Title level={3}>\r          <CrownOutlined /> Temel Paket Seçimi\r        </Title>\r        <Paragraph type=\"secondary\">\r          İşletmenizin büyüklüğüne uygun paketi seçin\r        </Paragraph>\r        <Row gutter={[24, 24]}>\r          {basePackages.map(pkg => (\r            <Col xs={24} md={8} key={pkg.id}>\r              <Badge.Ribbon \r                text=\"Popüler\" \r                color=\"red\"\r                style={{ display: pkg.popular ? 'block' : 'none' }}\r              >\r                <Card\r                  hoverable\r                  className={`package-card ${selectedPackage === pkg.id ? 'selected' : ''}`}\r                  onClick={() => handlePackageSelect(pkg.id)}\r                  style={{\r                    borderColor: selectedPackage === pkg.id ? '#667eea' : undefined,\r                    borderWidth: selectedPackage === pkg.id ? 2 : 1\r                  }}\r                >\r                  <div style={{ textAlign: 'center' }}>\r                    <Title level={4}>{pkg.name}</Title>\r                    <Text type=\"secondary\">{pkg.description}</Text>\r                    <div style={{ margin: '20px 0', display: 'flex', justifyContent: 'center', alignItems: 'baseline', flexWrap: 'wrap' }}>\r                      <Text strong style={{ fontSize: 24, color: '#667eea' }}>\r                        ₺{pkg.basePrice}\r                      </Text>\r                      <Text type=\"secondary\" style={{ fontSize: 14, marginLeft: 4 }}>/ay</Text>\r                    </div>\r                    <div style={{ textAlign: 'left' }}>\r                      {pkg.features.map((feature, idx) => (\r                        <div key={idx} style={{ marginBottom: 8 }}>\r                          <CheckCircleOutlined style={{ color: '#52c41a', marginRight: 8 }} />\r                          <Text>{feature}</Text>\r                        </div>\r                      ))}\r                    </div>\r                    <Button\r                      type={selectedPackage === pkg.id ? 'primary' : 'default'}\r                      block\r                      style={{ marginTop: 16 }}\r                    >\r                      {selectedPackage === pkg.id ? 'Seçildi' : 'Seç'}\r                    </Button>\r                  </div>\r                </Card>\r              </Badge.Ribbon>\r            </Col>\r          ))}\r        </Row>\r      </div>\r      <Divider />\r      {/* Core Modules */}\r      <div style={{ marginBottom: 48 }}>\r        <Title level={3}>\r          <AppstoreOutlined /> Temel Modüller\r        </Title>\r        <Paragraph type=\"secondary\">\r          İşletmenizin temel ihtiyaçlarını karşılayan modüller\r        </Paragraph>\r        <Row gutter={[16, 16]}>\r          {getModulesByCategory('core').map(module => (\r            <Col xs={24} sm={12} md={8} lg={6} key={module.id}>\r              {renderModuleCard(module)}\r            </Col>\r          ))}\r        </Row>\r      </div>\r      {/* Addon Modules */}\r      <div style={{ marginBottom: 48 }}>\r        <Title level={3}>\r          <PlusCircleOutlined /> Eklenti Modüller\r        </Title>\r        <Paragraph type=\"secondary\">\r          İşletmenizi bir üst seviyeye taşıyacak özellikler\r        </Paragraph>\r        <Row gutter={[16, 16]}>\r          {getModulesByCategory('addon').map(module => (\r            <Col xs={24} sm={12} md={8} lg={6} key={module.id}>\r              {renderModuleCard(module)}\r            </Col>\r          ))}\r        </Row>\r      </div>\r      {/* Integration Modules */}\r      <div style={{ marginBottom: 48 }}>\r        <Title level={3}>\r          <ApiOutlined /> Entegrasyon Modülleri\r        </Title>\r        <Paragraph type=\"secondary\">\r          Diğer sistemlerle entegrasyon özellikleri\r        </Paragraph>\r        <Row gutter={[16, 16]}>\r          {getModulesByCategory('integration').map(module => (\r            <Col xs={24} sm={12} md={8} lg={6} key={module.id}>\r              {renderModuleCard(module)}\r            </Col>\r          ))}\r        </Row>\r      </div>\r      {/* Price Summary */}\r      <Card\r        style={{\r          position: 'sticky',\r          bottom: 0,\r          background: '#fff',\r          borderRadius: '8px 8px 0 0',\r          boxShadow: '0 -4px 12px rgba(0,0,0,0.1)',\r          zIndex: 10\r        }}\r      >\r        <Row align=\"middle\" justify=\"space-between\">\r          <Col>\r            <Space size=\"large\">\r              <div>\r                <Text type=\"secondary\">Temel Paket:</Text>\r                <br />\r                <Text strong style={{ fontSize: 18 }}>\r                  {basePackages.find(p => p.id === selectedPackage)?.name}\r                </Text>\r              </div>\r              <Divider type=\"vertical\" style={{ height: 40 }} />\r              <div>\r                <Text type=\"secondary\">Seçilen Modüller:</Text>\r                <br />\r                <Text strong style={{ fontSize: 18 }}>\r                  {selectedModules.length} modül\r                </Text>\r              </div>\r              <Divider type=\"vertical\" style={{ height: 40 }} />\r              <div>\r                <Text type=\"secondary\">Toplam Fiyat:</Text>\r                <br />\r                <Text strong style={{ fontSize: 24, color: '#667eea' }}>\r                  ₺{totalPrice}/ay\r                </Text>\r              </div>\r            </Space>\r          </Col>\r          <Col>\r            <Button\r              type=\"primary\"\r              size=\"large\"\r              onClick={handleContinue}\r              disabled={selectedModules.length === 0}\r            >\r              Devam Et\r            </Button>\r          </Col>\r        </Row>\r      </Card>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/register/pages/RegisterPage/ModuleSelection.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { Form, message } from 'antd';\rimport {\r  UserOutlined,\r  ShopOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  LockOutlined,\r  InfoCircleOutlined,\r  TeamOutlined,\r  CheckCircleOutlined,\r  IdcardOutlined,\r  CheckOutlined,\r  CloseOutlined,\r  SafetyOutlined,\r  BankOutlined,\r  SolutionOutlined,\r  ArrowLeftOutlined,\r  ArrowRightOutlined,\r  RocketOutlined\r} from '@ant-design/icons';\rimport { apiClient } from '@/shared/api/client';\rimport './neon-wizard.css';\rinterface NeonWizardProps {\r  onComplete: (data: any) => void;\r  selectedPackage?: any;\r}\rexport const NeonWizard: React.FC<NeonWizardProps> = ({ onComplete, selectedPackage }) => {\r  const [form] = Form.useForm();\r  const [currentStep, setCurrentStep] = useState(0);\r  const [loading, setLoading] = useState(false);\r  const [formData, setFormData] = useState<any>({});\r  const [password, setPassword] = useState('');\r  const [completedSteps, setCompletedSteps] = useState<number[]>([]);\r  const steps = [\r    {\r      id: 1,\r      title: 'Şirket Bilgileri',\r      description: 'İşletme detayları',\r      icon: <ShopOutlined />\r    },\r    {\r      id: 2, \r      title: 'Yetkili Bilgileri',\r      description: 'İletişim bilgileri',\r      icon: <UserOutlined />\r    },\r    {\r      id: 3,\r      title: 'Hesap Güvenliği',\r      description: 'Şifre oluşturma',\r      icon: <LockOutlined />\r    }\r  ];\r  const passwordRequirements = [\r    { key: 'length', label: 'En az 8 karakter', test: (pwd: string) => pwd.length >= 8 },\r    { key: 'uppercase', label: 'Büyük harf (A-Z)', test: (pwd: string) => /[A-Z]/.test(pwd) },\r    { key: 'lowercase', label: 'Küçük harf (a-z)', test: (pwd: string) => /[a-z]/.test(pwd) },\r    { key: 'number', label: 'Rakam (0-9)', test: (pwd: string) => /\\d/.test(pwd) },\r    { key: 'special', label: 'Özel karakter (!@#$%)', test: (pwd: string) => /[@$!%*?&]/.test(pwd) },\r    { key: 'noSpace', label: 'Boşluk içermemeli', test: (pwd: string) => !/\\s/.test(pwd) }\r  ];\r  const next = async () => {\r    try {\r      const values = await form.validateFields();\r      const newFormData = { ...formData, ...values };\r      setFormData(newFormData);\r      if (!completedSteps.includes(currentStep)) {\r        setCompletedSteps([...completedSteps, currentStep]);\r      }\r      if (currentStep === steps.length - 1) {\r        handleSubmit(newFormData);\r      } else {\r        setCurrentStep(currentStep + 1);\r      }\r    } catch (error) {\r      message.error('Lütfen tüm zorunlu alanları doldurun');\r    }\r  };\r  const prev = () => {\r    setCurrentStep(currentStep - 1);\r  };\r  const goToStep = (stepIndex: number) => {\r    if (stepIndex <= Math.max(...completedSteps, 0) + 1) {\r      setCurrentStep(stepIndex);\r    }\r  };\r  const handleSubmit = async (allValues: any) => {\r    setLoading(true);\r    try {\r      const [firstName, ...lastNameParts] = allValues.contactName?.split(' ') || ['', ''];\r      const lastName = lastNameParts.join(' ') || firstName;\r      const registrationData = {\r        companyName: allValues.companyName,\r        companyCode: allValues.companyCode,\r        identityType: allValues.identityType,\r        identityNumber: allValues.identityNumber,\r        sector: allValues.sector,\r        employeeCount: allValues.employeeCount,\r        contactName: allValues.contactName,\r        contactEmail: allValues.email,\r        contactPhone: allValues.phone,\r        contactTitle: allValues.title,\r        email: allValues.email,\r        username: allValues.email?.split('@')[0] || allValues.companyCode,\r        firstName: firstName,\r        lastName: lastName,\r        password: allValues.password,\r        domain: allValues.companyCode,\r        packageId: selectedPackage?.id,\r        billingPeriod: 'Monthly'\r      };\r      const response = await apiClient.post('/api/public/register', registrationData);\r      if (response.data?.success) {\r        message.success('Kayıt başarılı! Yönlendiriliyorsunuz...');\r        onComplete(response.data.data);\r      } else {\r        message.error(response.data?.message || 'Kayıt başarısız');\r      }\r    } catch (error: any) {\r      message.error(error.response?.data?.message || 'Bir hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const getProgressPercentage = () => {\r    return ((currentStep + 1) / steps.length) * 100;\r  };\r  const renderStepContent = () => {\r    switch (currentStep) {\r      case 0:\r        return (\r          <>\r            <div className=\"neon-form-header\">\r              <h3>Şirket Bilgilerinizi Girin</h3>\r              <p>İşletmenizin temel bilgilerini doldurun</p>\r            </div>\r            <div className=\"neon-form-body\">\r              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '24px' }}>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <ShopOutlined className=\"neon-form-label-icon\" />\r                    Şirket Adı\r                  </label>\r                  <Form.Item\r                    name=\"companyName\"\r                    rules={[{ required: true, message: 'Şirket adı zorunludur' }]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <input \r                        className=\"neon-input\"\r                        placeholder=\"ABC Teknoloji A.Ş.\"\r                      / aria-label=\"input field\">\r                      <ShopOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <InfoCircleOutlined className=\"neon-form-label-icon\" />\r                    Şirket Kodu\r                  </label>\r                  <Form.Item\r                    name=\"companyCode\"\r                    rules={[\r                      { required: true, message: 'Şirket kodu zorunludur' },\r                      { pattern: /^[a-z0-9-]+$/, message: 'Küçük harf, rakam ve tire' }\r                    ]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <input \r                        className=\"neon-input\"\r                        placeholder=\"abc-teknoloji\"\r                      / aria-label=\"input field\">\r                      <RocketOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r              </div>\r              <div className=\"neon-form-group\">\r                <label className=\"neon-form-label\">\r                  <IdcardOutlined className=\"neon-form-label-icon\" />\r                  Vergi Türü\r                </label>\r                <Form.Item\r                  name=\"identityType\"\r                  initialValue=\"vergi\"\r                  rules={[{ required: true, message: 'Vergi türü seçimi zorunludur' }]}\r                  noStyle\r                >\r                  <div className=\"neon-radio-group\">\r                    <div className=\"neon-radio-button\">\r                      <input type=\"radio\" id=\"tc\" name=\"identityType\" value=\"tc\" / aria-label=\"input field\">\r                      <label htmlFor=\"tc\" className=\"neon-radio-label\" onClick={() => form.setFieldsValue({ identityType: 'tc' })}>\r                        <IdcardOutlined className=\"neon-radio-icon\" />\r                        Şahıs Şirketi\r                      </label>\r                    </div>\r                    <div className=\"neon-radio-button\">\r                      <input type=\"radio\" id=\"vergi\" name=\"identityType\" value=\"vergi\" defaultChecked / aria-label=\"input field\">\r                      <label htmlFor=\"vergi\" className=\"neon-radio-label\" onClick={() => form.setFieldsValue({ identityType: 'vergi' })}>\r                        <BankOutlined className=\"neon-radio-icon\" />\r                        Kurumsal\r                      </label>\r                    </div>\r                  </div>\r                </Form.Item>\r              </div>\r              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '24px' }}>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <IdcardOutlined className=\"neon-form-label-icon\" />\r                    TC Kimlik / Vergi No\r                  </label>\r                  <Form.Item\r                    name=\"identityNumber\"\r                    rules={[\r                      { required: true, message: 'Bu alan zorunludur' },\r                      { pattern: /^\\d{10,11}$/, message: '10-11 haneli olmalı' }\r                    ]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <input \r                        className=\"neon-input\"\r                        placeholder=\"12345678901\"\r                        maxLength={11}\r                      / aria-label=\"input field\">\r                      <IdcardOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <TeamOutlined className=\"neon-form-label-icon\" />\r                    Çalışan Sayısı\r                  </label>\r                  <Form.Item\r                    name=\"employeeCount\"\r                    rules={[{ required: true, message: 'Çalışan sayısı zorunludur' }]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <select className=\"neon-input neon-select\" aria-label=\"select field\">\r                        <option value=\"\">Seçiniz</option>\r                        <option value=\"1-10\">1-10 Kişi</option>\r                        <option value=\"11-50\">11-50 Kişi</option>\r                        <option value=\"51-100\">51-100 Kişi</option>\r                        <option value=\"101-500\">101-500 Kişi</option>\r                        <option value=\"500+\">500+ Kişi</option>\r                      </select>\r                      <TeamOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r              </div>\r              <div className=\"neon-form-group\">\r                <label className=\"neon-form-label\">\r                  <ShopOutlined className=\"neon-form-label-icon\" />\r                  Sektör\r                </label>\r                <Form.Item\r                  name=\"sector\"\r                  rules={[{ required: true, message: 'Sektör seçimi zorunludur' }]}\r                  noStyle\r                >\r                  <div className=\"neon-input-wrapper\">\r                    <select className=\"neon-input neon-select\" aria-label=\"select field\">\r                      <option value=\"\">Sektörünüzü seçin</option>\r                      <option value=\"Teknoloji\">💻 Teknoloji</option>\r                      <option value=\"Perakende\">🛍️ Perakende</option>\r                      <option value=\"Üretim\">🏭 Üretim</option>\r                      <option value=\"Hizmet\">🤝 Hizmet</option>\r                      <option value=\"İnşaat\">🏗️ İnşaat</option>\r                      <option value=\"Sağlık\">🏥 Sağlık</option>\r                      <option value=\"Eğitim\">🎓 Eğitim</option>\r                      <option value=\"Lojistik\">🚚 Lojistik</option>\r                      <option value=\"Gıda\">🍽️ Gıda</option>\r                      <option value=\"Diğer\">📋 Diğer</option>\r                    </select>\r                    <ShopOutlined className=\"neon-input-icon\" />\r                  </div>\r                </Form.Item>\r              </div>\r            </div>\r          </>\r        );\r      case 1:\r        return (\r          <>\r            <div className=\"neon-form-header\">\r              <h3>Yetkili Bilgileri</h3>\r              <p>İletişim ve yetkili kişi bilgilerini girin</p>\r            </div>\r            <div className=\"neon-form-body\">\r              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '24px' }}>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <UserOutlined className=\"neon-form-label-icon\" />\r                    Ad Soyad\r                  </label>\r                  <Form.Item\r                    name=\"contactName\"\r                    rules={[{ required: true, message: 'Ad soyad zorunludur' }]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <input \r                        className=\"neon-input\"\r                        placeholder=\"Ahmet Yılmaz\"\r                      / aria-label=\"input field\">\r                      <UserOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <SolutionOutlined className=\"neon-form-label-icon\" />\r                    Unvan\r                  </label>\r                  <Form.Item\r                    name=\"title\"\r                    rules={[{ required: true, message: 'Unvan zorunludur' }]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <select className=\"neon-input neon-select\" aria-label=\"select field\">\r                        <option value=\"\">Unvanınızı seçin</option>\r                        <option value=\"Genel Müdür\">Genel Müdür</option>\r                        <option value=\"İşletme Sahibi\">İşletme Sahibi</option>\r                        <option value=\"Müdür\">Müdür</option>\r                        <option value=\"Yönetici\">Yönetici</option>\r                        <option value=\"Muhasebe Müdürü\">Muhasebe Müdürü</option>\r                        <option value=\"IT Müdürü\">IT Müdürü</option>\r                        <option value=\"Satın Alma Müdürü\">Satın Alma Müdürü</option>\r                        <option value=\"İnsan Kaynakları\">İnsan Kaynakları</option>\r                        <option value=\"Diğer\">Diğer</option>\r                      </select>\r                      <SolutionOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r              </div>\r              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '24px' }}>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <MailOutlined className=\"neon-form-label-icon\" />\r                    E-posta Adresi\r                  </label>\r                  <Form.Item\r                    name=\"email\"\r                    rules={[\r                      { required: true, message: 'E-posta zorunludur' },\r                      { type: 'email', message: 'Geçerli bir e-posta girin' }\r                    ]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <input \r                        type=\"email\"\r                        className=\"neon-input\"\r                        placeholder=\"ahmet@sirket.com\"\r                      / aria-label=\"input field\">\r                      <MailOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <PhoneOutlined className=\"neon-form-label-icon\" />\r                    Telefon Numarası\r                  </label>\r                  <Form.Item\r                    name=\"phone\"\r                    rules={[\r                      { required: true, message: 'Telefon zorunludur' },\r                      { pattern: /^[0-9]{10,11}$/, message: 'Geçerli telefon girin' }\r                    ]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <input \r                        className=\"neon-input\"\r                        placeholder=\"5551234567\"\r                        maxLength={11}\r                      / aria-label=\"input field\">\r                      <PhoneOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r              </div>\r              <div className=\"neon-info-box\">\r                <InfoCircleOutlined className=\"neon-info-icon\" />\r                <div className=\"neon-info-content\">\r                  <h5>Önemli Bilgilendirme</h5>\r                  <p>\r                    E-posta adresiniz hem iletişim hem de sisteme giriş için kullanılacaktır. \r                    Lütfen aktif olarak kullandığınız bir e-posta adresi girin.\r                  </p>\r                </div>\r              </div>\r            </div>\r          </>\r        );\r      case 2:\r        return (\r          <>\r            <div className=\"neon-form-header\">\r              <h3>Hesap Güvenliği</h3>\r              <p>Güçlü bir şifre oluşturarak hesabınızı koruyun</p>\r            </div>\r            <div className=\"neon-form-body\">\r              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '24px' }}>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <LockOutlined className=\"neon-form-label-icon\" />\r                    Şifre\r                  </label>\r                  <Form.Item\r                    name=\"password\"\r                    rules={[\r                      { required: true, message: 'Şifre zorunludur' },\r                      { min: 8, message: 'En az 8 karakter olmalı' },\r                      { \r                        pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/,\r                        message: 'Şifre gereksinimleri karşılanmıyor'\r                      }\r                    ]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <input \r                        type=\"password\"\r                        className=\"neon-input\"\r                        placeholder=\"Güvenli şifreniz\"\r                        onChange={(e) = aria-label=\"input field\"> setPassword(e.target.value)}\r                      />\r                      <LockOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r                <div className=\"neon-form-group\">\r                  <label className=\"neon-form-label\">\r                    <LockOutlined className=\"neon-form-label-icon\" />\r                    Şifre Tekrar\r                  </label>\r                  <Form.Item\r                    name=\"confirmPassword\"\r                    dependencies={['password']}\r                    rules={[\r                      { required: true, message: 'Şifre tekrarı zorunludur' },\r                      ({ getFieldValue }) => ({\r                        validator(_, value) {\r                          if (!value || getFieldValue('password') === value) {\r                            return Promise.resolve();\r                          }\r                          return Promise.reject(new Error('Şifreler eşleşmiyor'));\r                        },\r                      }),\r                    ]}\r                    noStyle\r                  >\r                    <div className=\"neon-input-wrapper\">\r                      <input \r                        type=\"password\"\r                        className=\"neon-input\"\r                        placeholder=\"Şifrenizi tekrar girin\"\r                      / aria-label=\"input field\">\r                      <LockOutlined className=\"neon-input-icon\" />\r                    </div>\r                  </Form.Item>\r                </div>\r              </div>\r              {password && (\r                <div className=\"neon-password-strength\">\r                  <div className=\"neon-password-header\">\r                    <SafetyOutlined className=\"neon-password-header-icon\" />\r                    <h5>Şifre Gereksinimleri</h5>\r                  </div>\r                  <div className=\"neon-password-requirements\">\r                    {passwordRequirements.map(req => (\r                      <div \r                        key={req.key} \r                        className={`neon-requirement ${req.test(password) ? 'valid' : ''}`}\r                      >\r                        {req.test(password) ? (\r                          <CheckCircleOutlined className=\"neon-requirement-icon\" />\r                        ) : (\r                          <CloseOutlined className=\"neon-requirement-icon\" />\r                        )}\r                        {req.label}\r                      </div>\r                    ))}\r                  </div>\r                </div>\r              )}\r              {selectedPackage && (\r                <div className=\"neon-info-box\">\r                  <CheckCircleOutlined className=\"neon-info-icon\" />\r                  <div className=\"neon-info-content\">\r                    <h5>Seçili Paket: {selectedPackage.name}</h5>\r                    <p>\r                      Aylık {selectedPackage.price}₺ ödeme ile başlayacaksınız. \r                      İlk 14 gün ücretsiz deneme süreniz bulunmaktadır.\r                    </p>\r                  </div>\r                </div>\r              )}\r            </div>\r          </>\r        );\r      default:\r        return null;\r    }\r  };\r  return (\r    <div className=\"neon-wizard-wrapper\">\r      {/* Animated Background Shapes */}\r      <div className=\"floating-shapes\">\r        <div className=\"shape shape-1\"></div>\r        <div className=\"shape shape-2\"></div>\r        <div className=\"shape shape-3\"></div>\r      </div>\r      <div className=\"neon-wizard-card\">\r        {/* Left Sidebar */}\r        <div className=\"neon-wizard-sidebar\">\r          <div className=\"wizard-logo\">\r            <h2>Stocker</h2>\r            <p>İşletme Yönetim Sistemi</p>\r          </div>\r          <div className=\"neon-steps\">\r            {steps.map((step, index) => (\r              <div \r                key={step.id}\r                className={`neon-step ${currentStep === index ? 'active' : ''} ${completedSteps.includes(index) ? 'completed' : ''}`}\r                onClick={() => goToStep(index)}\r               role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => goToStep(index)(e)}>\r                <div className=\"neon-step-indicator\">\r                  {completedSteps.includes(index) && currentStep !== index ? (\r                    <CheckOutlined className=\"neon-step-check\" />\r                  ) : (\r                    <span>{index + 1}</span>\r                  )}\r                </div>\r                <div className=\"neon-step-content\">\r                  <h4>{step.title}</h4>\r                  <p>{step.description}</p>\r                </div>\r              </div>\r            ))}\r          </div>\r        </div>\r        {/* Right Content */}\r        <div className=\"neon-wizard-content\">\r          {/* Progress Bar */}\r          <div className=\"neon-progress-bar\">\r            <div \r              className=\"neon-progress-fill\" \r              style={{ width: `${getProgressPercentage()}%` }}\r            />\r          </div>\r          <Form\r            form={form}\r            layout=\"vertical\"\r            autoComplete=\"off\"\r          >\r            {loading ? (\r              <div className=\"neon-loading\">\r                <div className=\"neon-spinner\"></div>\r                <div className=\"neon-loading-text\">İşleminiz gerçekleştiriliyor...</div>\r              </div>\r            ) : (\r              renderStepContent()\r            )}\r          </Form>\r          {/* Footer */}\r          <div className=\"neon-wizard-footer\">\r            <button\r              className=\"neon-btn neon-btn-secondary\"\r              onClick={prev}\r              disabled={currentStep === 0}\r            >\r              <ArrowLeftOutlined />\r              Geri\r            </button>\r            <div className=\"neon-step-dots\">\r              {steps.map((_, index) => (\r                <div \r                  key={index} \r                  className={`neon-dot ${currentStep === index ? 'active' : ''}`}\r                />\r              ))}\r            </div>\r            <button\r              className=\"neon-btn neon-btn-primary\"\r              onClick={next}\r              disabled={loading}\r            >\r              {currentStep === steps.length - 1 ? 'Kaydı Tamamla' : 'İleri'}\r              {currentStep < steps.length - 1 && <ArrowRightOutlined />}\r              {currentStep === steps.length - 1 && <CheckOutlined />}\r            </button>\r          </div>\r        </div>\r      </div>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/register/pages/RegisterPage/NeonWizard.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React from 'react';\rimport { CheckCircleOutlined, RocketOutlined, CrownOutlined, ThunderboltOutlined } from '@ant-design/icons';\rimport './premium-package-selection.css';\rinterface Package {\r  id: string;\r  name: string;\r  description: string;\r  price: number;\r  currency: string;\r  billingPeriod: string;\r  features: string[];\r  maxUsers: number;\r  maxStorage: number;\r  modules: string[];\r  isPopular?: boolean;\r  discount?: number;\r}\rinterface PremiumPackageCardProps {\r  package: Package;\r  isSelected: boolean;\r  onSelect: (pkg: Package) => void;\r  billingPeriod: 'Monthly' | 'Yearly';\r}\rconst packageIcons: { [key: string]: React.ReactNode } = {\r  'Başlangıç': '🚀',\r  'Profesyonel': '💎',\r  'Enterprise': '👑'\r};\rconst packageThemes: { [key: string]: string } = {\r  'Başlangıç': 'starter',\r  'Profesyonel': 'professional',\r  'Enterprise': 'enterprise'\r};\rconst featureIcons: { [key: string]: string } = {\r  'Kullanıcı': '👤',\r  'Depolama': '💾',\r  'CRM': '📊',\r  'Stok': '📦',\r  'Muhasebe': '💰',\r  'İK': '👥',\r  'Proje': '📋',\r  'Destek': '🎧',\r  'API': '🔌',\r  'Eğitim': '🎓',\r  'Raporlama': '📈',\r  'Entegrasyon': '🔗',\r  'Mobil': '📱',\r  'Email': '✉️',\r  'SLA': '🛡️',\r  'Sunucu': '🖥️'\r};\rexport const PremiumPackageCard: React.FC<PremiumPackageCardProps> = ({\r  package: pkg,\r  isSelected,\r  onSelect,\r  billingPeriod\r}) => {\r  const theme = packageThemes[pkg.name] || 'starter';\r  const calculatePrice = () => {\r    let price = pkg.price;\r    if (billingPeriod === 'Yearly') {\r      price = Math.floor(price * 12 * 0.8 / 12); // 20% yearly discount\r    }\r    return price;\r  };\r  const getFeatureIcon = (feature: string) => {\r    const foundIcon = Object.keys(featureIcons).find(key => \r      feature.toLowerCase().includes(key.toLowerCase())\r    );\r    return foundIcon ? featureIcons[foundIcon] : '✨';\r  };\r  const formatFeature = (feature: string) => {\r    // Parse feature text to extract value and label\r    const match = feature.match(/(\\d+)\\s*(.*)/);\r    if (match) {\r      return {\r        value: match[1],\r        label: match[2]\r      };\r    }\r    return {\r      value: '',\r      label: feature\r    };\r  };\r  return (\r    <div className={`premium-package-card ${isSelected ? 'selected' : ''}`} onClick={() => onSelect(pkg)} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => onSelect(pkg)(e)}>\r      {pkg.isPopular && (\r        <div className=\"package-special-badge\">\r          <div className=\"badge-popular\">En Popüler</div>\r        </div>\r      )}\r      <div className={`package-card-header ${theme}`}>\r        <div className=\"package-icon-container\">\r          <div className=\"package-mega-icon\">\r            {packageIcons[pkg.name] || '📦'}\r          </div>\r        </div>\r        <div className=\"package-title-group\">\r          <h2 className=\"package-main-title\">{pkg.name}</h2>\r          <p className=\"package-subtitle\">{pkg.description}</p>\r        </div>\r        <div className=\"package-price-display\">\r          <div className=\"price-tag\">\r            <span className=\"price-currency\">{pkg.currency}</span>\r            <span className=\"price-value\">{calculatePrice()}</span>\r            <span className=\"price-period\">/ay</span>\r          </div>\r          {billingPeriod === 'Yearly' && (\r            <div className=\"price-discount\">%20 İndirim</div>\r          )}\r        </div>\r      </div>\r      <div className=\"package-card-body\">\r        <ul className=\"premium-features-list\">\r          {pkg.features.map((feature, index) => {\r            const { value, label } = formatFeature(feature);\r            return (\r              <li key={index} className=\"premium-feature-item\">\r                <div className={`feature-icon-wrapper ${theme}`}>\r                  {getFeatureIcon(feature)}\r                </div>\r                <span className=\"feature-text\">\r                  {value && <span className=\"feature-value\">{value} </span>}\r                  {label}\r                </span>\r              </li>\r            );\r          })}\r        </ul>\r        {pkg.modules && pkg.modules.length > 0 && (\r          <div className=\"package-modules\">\r            {pkg.modules.map((module, index) => (\r              <span key={index} className=\"module-pill\">\r                {module}\r              </span>\r            ))}\r          </div>\r        )}\r        <button className={`package-select-button ${theme}`}>\r          {isSelected ? 'Seçildi ✓' : 'Bu Paketi Seç'}\r        </button>\r      </div>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/register/pages/RegisterPage/PremiumPackageCard.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Steps,\r  Form,\r  Input,\r  Select,\r  Button,\r  Card,\r  Row,\r  Col,\r  Typography,\r  Space,\r  Divider,\r  Radio,\r  message,\r  Alert,\r  Tooltip,\r  Progress,\r  Spin,\r  Checkbox\r} from 'antd';\rimport Swal from 'sweetalert2';\rimport withReactContent from 'sweetalert2-react-content';\rimport { showRegistrationSuccess, showApiResponse } from '../../../../shared/utils/sweetAlert';\rimport {\r  UserOutlined,\r  ShopOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  LockOutlined,\r  InfoCircleOutlined,\r  BuildOutlined,\r  TeamOutlined,\r  CheckCircleOutlined,\r  IdcardOutlined,\r  CheckOutlined,\r  CloseOutlined,\r  LoadingOutlined,\r  SafetyOutlined,\r  BankOutlined,\r  GlobalOutlined,\r  SolutionOutlined,\r  ArrowLeftOutlined,\r  ArrowRightOutlined\r} from '@ant-design/icons';\rimport { apiClient } from '@/shared/api/client';\rimport PasswordStrength from '@/shared/components/PasswordStrength';\rimport { useRealTimeValidation } from '../../hooks/useRealTimeValidation';\rimport ReCAPTCHA from 'react-google-recaptcha';\rimport './register-wizard.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Step } = Steps;\rconst MySwal = withReactContent(Swal);\rinterface RegisterWizardProps {\r  onComplete: (data: any) => void;\r  selectedPackage?: any;\r}\rexport const RegisterWizard: React.FC<RegisterWizardProps> = ({ onComplete, selectedPackage }) => {\r  const [form] = Form.useForm();\r  const [currentStep, setCurrentStep] = useState(0);\r  const [loading, setLoading] = useState(false);\r  const [formData, setFormData] = useState<any>({});\r  const [password, setPassword] = useState('');\r  const [captchaToken, setCaptchaToken] = useState<string | null>(null);\r  const recaptchaRef = React.useRef<ReCAPTCHA>(null);\r  // Real-time validation hook\r  const {\r    isConnected,\r    validationResults,\r    loading: validationLoading,\r    validateEmail,\r    checkPasswordStrength,\r    checkDomain,\r    validatePhone,\r    checkCompanyName,\r    validateIdentity,\r    clearValidation\r  } = useRealTimeValidation();\r  const steps = [\r    {\r      title: 'Şirket Bilgileri',\r      icon: <ShopOutlined />,\r      description: 'Şirket detaylarınızı girin'\r    },\r    {\r      title: 'Yetkili Bilgileri',\r      icon: <UserOutlined />,\r      description: 'İletişim bilgilerinizi girin'\r    },\r    {\r      title: 'Hesap Güvenliği',\r      icon: <LockOutlined />,\r      description: 'Giriş bilgilerinizi oluşturun'\r    }\r  ];\r  // Password requirements check\r  const passwordRequirements = [\r    { key: 'length', label: 'En az 8 karakter', test: (pwd: string) => pwd.length >= 8 },\r    { key: 'uppercase', label: 'En az 1 büyük harf', test: (pwd: string) => /[A-Z]/.test(pwd) },\r    { key: 'lowercase', label: 'En az 1 küçük harf', test: (pwd: string) => /[a-z]/.test(pwd) },\r    { key: 'number', label: 'En az 1 rakam', test: (pwd: string) => /\\d/.test(pwd) },\r    { key: 'special', label: 'En az 1 özel karakter', test: (pwd: string) => /[@$!%*?&]/.test(pwd) }\r  ];\r  const next = async () => {\r    try {\r      const values = await form.validateFields();\r      // Check captcha on last step\r      if (currentStep === steps.length - 1 && !captchaToken) {\r        message.error('Lütfen güvenlik doğrulamasını tamamlayın');\r        return;\r      }\r      const newFormData = { ...formData, ...values };\r      setFormData(newFormData);\r      if (currentStep === steps.length - 1) {\r        handleSubmit(newFormData);\r      } else {\r        setCurrentStep(currentStep + 1);\r      }\r    } catch (error) {\r      message.error('Lütfen tüm zorunlu alanları doldurun');\r    }\r  };\r  const prev = () => {\r    setCurrentStep(currentStep - 1);\r  };\r  const handleSubmit = async (allValues: any) => {\r    setLoading(true);\r    try {\r      const [firstName, ...lastNameParts] = allValues.contactName?.split(' ') || ['', ''];\r      const lastName = lastNameParts.join(' ') || firstName;\r      const registrationData = {\r        // Company Information\r        companyName: allValues.companyName,\r        companyCode: allValues.companyCode,\r        taxNumber: allValues.identityType === 'vergi' ? allValues.identityNumber : null,\r        taxOffice: allValues.taxOffice,\r        tradeRegistryNumber: allValues.tradeRegistryNumber || null,\r        mersisNumber: allValues.mersisNumber || null,\r        // Contact Information\r        contactEmail: allValues.email,\r        contactPhone: allValues.phone,\r        contactFax: allValues.fax || null,\r        website: allValues.website || null,\r        // Address\r        addressLine1: allValues.address || null,\r        addressLine2: allValues.addressLine2 || null,\r        city: allValues.city || null,\r        state: allValues.state || null,\r        country: allValues.country || 'Türkiye',\r        postalCode: allValues.postalCode || null,\r        // Business Information\r        industryType: allValues.sector,\r        businessType: allValues.identityType === 'vergi' ? 'Kurumsal' : 'Şahıs',\r        employeeCountRange: allValues.employeeCount,\r        annualRevenue: allValues.annualRevenue || null,\r        currency: 'TRY',\r        // Admin User Information\r        adminEmail: allValues.email,\r        adminUsername: allValues.email?.split('@')[0] || allValues.companyCode,\r        adminFirstName: firstName,\r        adminLastName: lastName,\r        adminPhone: allValues.phone,\r        adminTitle: allValues.title || null,\r        adminPassword: allValues.password,\r        // Package & Subscription\r        packageId: selectedPackage?.id || null,\r        billingCycle: 'Monthly',\r        // Preferences\r        preferredLanguage: 'tr-TR',\r        preferredTimeZone: 'Turkey Standard Time',\r        acceptTerms: true,\r        acceptPrivacyPolicy: true,\r        allowMarketing: allValues.allowMarketing || false,\r        // Captcha\r        captchaToken: captchaToken\r      };\r      const response = await apiClient.post('/api/public/tenant-registration/register', registrationData);\r      if (response.data?.success) {\r        // Başarılı kayıt alert'i - sweetAlert utility'sini kullan\r        await showRegistrationSuccess(allValues.email);\r        onComplete(response.data.data);\r      } else {\r        // Hata alert'i - sweetAlert utility'sini kullan\r        await showApiResponse.error(\r          response.data?.message || 'Kayıt işlemi sırasında bir hata oluştu.',\r          'Kayıt Başarısız'\r        );\r      }\r    } catch (error: any) {\r      // Detaylı hata alert'i - sweetAlert utility'sini kullan\r      await showApiResponse.error(error, 'Kayıt işlemi sırasında bir hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const getProgressPercentage = () => {\r    return ((currentStep + 1) / steps.length) * 100;\r  };\r  const renderStepContent = () => {\r    switch (currentStep) {\r      case 0:\r        return (\r          <div className=\"form-section\">\r            <div className=\"form-section-title\">\r              <ShopOutlined />\r              <h3>Şirket Bilgileri</h3>\r            </div>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"companyName\"\r                  label=\"Şirket Adı\"\r                  className=\"wizard-form-item\"\r                  rules={[{ required: true, message: 'Şirket adı zorunludur' }]}\r                >\r                  <Input \r                    size=\"large\"\r                    prefix={<ShopOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"ABC Teknoloji A.Ş.\" \r                  />\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"companyCode\"\r                  label={\r                    <Space>\r                      Şirket Kodu\r                      <Tooltip title=\"URL'de kullanılacak benzersiz kod\">\r                        <InfoCircleOutlined className=\"wizard-tooltip\" />\r                      </Tooltip>\r                    </Space>\r                  }\r                  className=\"wizard-form-item\"\r                  rules={[\r                    { required: true, message: 'Şirket kodu zorunludur' },\r                    { pattern: /^[a-z0-9-]+$/, message: 'Küçük harf, rakam ve tire kullanın' }\r                  ]}\r                  validateStatus={\r                    validationResults.domain?.isAvailable === false ? 'error' : \r                    validationResults.domain?.isAvailable === true ? 'success' : ''\r                  }\r                  help={\r                    validationLoading.domain ? 'Kontrol ediliyor...' :\r                    validationResults.domain?.message\r                  }\r                  hasFeedback={!!validationResults.domain}\r                >\r                  <Input \r                    size=\"large\"\r                    placeholder=\"abc-teknoloji\" \r                    addonAfter=\".stocker.app\"\r                    onChange={(e) = aria-label=\"input field\"> {\r                      const value = e.target.value.toLowerCase().replace(/[^a-z0-9-]/g, '');\r                      form.setFieldValue('companyCode', value);\r                      if (value.length >= 3) {\r                        checkDomain(value);\r                      }\r                    }}\r                  />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"identityType\"\r                  label=\"Vergi Türü\"\r                  className=\"wizard-form-item\"\r                  rules={[{ required: true, message: 'Vergi türü seçimi zorunludur' }]}\r                  initialValue=\"vergi\"\r                >\r                  <Radio.Group size=\"large\" className=\"identity-type-selector\">\r                    <Radio.Button value=\"tc\">\r                      <Space>\r                        <IdcardOutlined />\r                        Şahıs Şirketi\r                      </Space>\r                    </Radio.Button>\r                    <Radio.Button value=\"vergi\">\r                      <Space>\r                        <BankOutlined />\r                        Kurumsal\r                      </Space>\r                    </Radio.Button>\r                  </Radio.Group>\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"identityNumber\"\r                  label=\"TC Kimlik / Vergi No\"\r                  className=\"wizard-form-item\"\r                  rules={[\r                    { required: true, message: 'Bu alan zorunludur' },\r                    { pattern: /^\\d{10,11}$/, message: '10-11 haneli olmalı' }\r                  ]}\r                  validateStatus={\r                    validationResults.identity?.isValid === false ? 'error' : \r                    validationResults.identity?.isValid === true ? 'success' : ''\r                  }\r                  help={\r                    validationLoading.identity ? 'Doğrulanıyor...' :\r                    validationResults.identity?.message\r                  }\r                  hasFeedback={!!validationResults.identity}\r                >\r                  <Input \r                    size=\"large\"\r                    prefix={<IdcardOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"12345678901\" \r                    maxLength={11}\r                    onChange={(e) => {\r                      const value = e.target.value.replace(/\\D/g, '');\r                      form.setFieldValue('identityNumber', value);\r                      if (value.length === 10 || value.length === 11) {\r                        validateIdentity(value);\r                      }\r                    }}\r                  />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"sector\"\r                  label=\"Sektör\"\r                  className=\"wizard-form-item\"\r                  rules={[{ required: true, message: 'Sektör seçimi zorunludur' }]}\r                >\r                  <Select size=\"large\" placeholder=\"Sektörünüzü seçin\" className=\"sector-select\" aria-label=\"select field\">\r                    <Select.Option value=\"Teknoloji\" aria-label=\"select field\">\r                      <Space>\r                        <span>💻</span>\r                        <span>Teknoloji</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Perakende\" aria-label=\"select field\">\r                      <Space>\r                        <span>🛍️</span>\r                        <span>Perakende</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Üretim\" aria-label=\"select field\">\r                      <Space>\r                        <span>🏭</span>\r                        <span>Üretim</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Hizmet\" aria-label=\"select field\">\r                      <Space>\r                        <span>🤝</span>\r                        <span>Hizmet</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"İnşaat\" aria-label=\"select field\">\r                      <Space>\r                        <span>🏗️</span>\r                        <span>İnşaat</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Sağlık\" aria-label=\"select field\">\r                      <Space>\r                        <span>🏥</span>\r                        <span>Sağlık</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Eğitim\" aria-label=\"select field\">\r                      <Space>\r                        <span>🎓</span>\r                        <span>Eğitim</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Lojistik\" aria-label=\"select field\">\r                      <Space>\r                        <span>🚚</span>\r                        <span>Lojistik</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Gıda\" aria-label=\"select field\">\r                      <Space>\r                        <span>🍽️</span>\r                        <span>Gıda</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Diğer\" aria-label=\"select field\">\r                      <Space>\r                        <span>📋</span>\r                        <span>Diğer</span>\r                      </Space>\r                    </Select.Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"employeeCount\"\r                  label=\"Çalışan Sayısı\"\r                  className=\"wizard-form-item\"\r                  rules={[{ required: true, message: 'Çalışan sayısı zorunludur' }]}\r                >\r                  <Select size=\"large\" placeholder=\"Çalışan sayınızı seçin\" aria-label=\"select field\">\r                    <Select.Option value=\"1-10\" aria-label=\"select field\">\r                      <Space>\r                        <TeamOutlined />\r                        <span>1-10 Kişi</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"11-50\" aria-label=\"select field\">\r                      <Space>\r                        <TeamOutlined />\r                        <span>11-50 Kişi</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"51-100\" aria-label=\"select field\">\r                      <Space>\r                        <TeamOutlined />\r                        <span>51-100 Kişi</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"101-500\" aria-label=\"select field\">\r                      <Space>\r                        <TeamOutlined />\r                        <span>101-500 Kişi</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"500+\" aria-label=\"select field\">\r                      <Space>\r                        <TeamOutlined />\r                        <span>500+ Kişi</span>\r                      </Space>\r                    </Select.Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"taxOffice\"\r                  label=\"Vergi Dairesi\"\r                  className=\"wizard-form-item\"\r                >\r                  <Input \r                    size=\"large\"\r                    prefix={<BankOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"Merkez Vergi Dairesi\" \r                  />\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"tradeRegistryNumber\"\r                  label=\"Ticaret Sicil No\"\r                  className=\"wizard-form-item\"\r                >\r                  <Input \r                    size=\"large\"\r                    placeholder=\"123456\" \r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"mersisNumber\"\r                  label=\"MERSİS No\"\r                  className=\"wizard-form-item\"\r                >\r                  <Input \r                    size=\"large\"\r                    placeholder=\"0123456789012345\" \r                    maxLength={16}\r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"annualRevenue\"\r                  label=\"Yıllık Ciro (Opsiyonel)\"\r                  className=\"wizard-form-item\"\r                >\r                  <Select size=\"large\" placeholder=\"Yıllık ciro aralığı\" aria-label=\"select field\">\r                    <Select.Option value=\"0-1M\" aria-label=\"select field\">0 - 1 Milyon TL</Select.Option>\r                    <Select.Option value=\"1M-5M\" aria-label=\"select field\">1 - 5 Milyon TL</Select.Option>\r                    <Select.Option value=\"5M-10M\" aria-label=\"select field\">5 - 10 Milyon TL</Select.Option>\r                    <Select.Option value=\"10M-50M\" aria-label=\"select field\">10 - 50 Milyon TL</Select.Option>\r                    <Select.Option value=\"50M+\" aria-label=\"select field\">50+ Milyon TL</Select.Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider orientation=\"left\">Adres Bilgileri</Divider>\r            <Row gutter={[24, 0]}>\r              <Col xs={24}>\r                <Form.Item\r                  name=\"address\"\r                  label=\"Adres\"\r                  className=\"wizard-form-item\"\r                >\r                  <Input.TextArea \r                    size=\"large\"\r                    rows={2}\r                    placeholder=\"Cadde, sokak, bina no\" \r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={8}>\r                <Form.Item\r                  name=\"city\"\r                  label=\"İl\"\r                  className=\"wizard-form-item\"\r                >\r                  <Select \r                    size=\"large\" \r                    showSearch\r                    placeholder=\"İl seçin\"\r                   aria-label=\"select field\">\r                    <Select.Option value=\"İstanbul\" aria-label=\"select field\">İstanbul</Select.Option>\r                    <Select.Option value=\"Ankara\" aria-label=\"select field\">Ankara</Select.Option>\r                    <Select.Option value=\"İzmir\" aria-label=\"select field\">İzmir</Select.Option>\r                    <Select.Option value=\"Bursa\" aria-label=\"select field\">Bursa</Select.Option>\r                    <Select.Option value=\"Antalya\" aria-label=\"select field\">Antalya</Select.Option>\r                    <Select.Option value=\"Adana\" aria-label=\"select field\">Adana</Select.Option>\r                    <Select.Option value=\"Kocaeli\" aria-label=\"select field\">Kocaeli</Select.Option>\r                    <Select.Option value=\"Konya\" aria-label=\"select field\">Konya</Select.Option>\r                    <Select.Option value=\"Gaziantep\" aria-label=\"select field\">Gaziantep</Select.Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={8}>\r                <Form.Item\r                  name=\"state\"\r                  label=\"İlçe\"\r                  className=\"wizard-form-item\"\r                >\r                  <Input \r                    size=\"large\"\r                    placeholder=\"İlçe adı\" \r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={8}>\r                <Form.Item\r                  name=\"postalCode\"\r                  label=\"Posta Kodu\"\r                  className=\"wizard-form-item\"\r                >\r                  <Input \r                    size=\"large\"\r                    placeholder=\"34100\" \r                    maxLength={5}\r                  / aria-label=\"input field\">\r                </Form.Item>\r              </Col>\r            </Row>\r          </div>\r        );\r      case 1:\r        return (\r          <div className=\"form-section\">\r            <div className=\"form-section-title\">\r              <UserOutlined />\r              <h3>Yetkili Bilgileri</h3>\r            </div>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"contactName\"\r                  label=\"Ad Soyad\"\r                  className=\"wizard-form-item\"\r                  rules={[{ required: true, message: 'Ad soyad zorunludur' }]}\r                >\r                  <Input \r                    size=\"large\"\r                    prefix={<UserOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"Ahmet Yılmaz\" \r                  />\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"title\"\r                  label=\"Unvan\"\r                  className=\"wizard-form-item\"\r                  rules={[{ required: true, message: 'Unvan zorunludur' }]}\r                >\r                  <Select size=\"large\" placeholder=\"Unvanınızı seçin\" aria-label=\"select field\">\r                    <Select.Option value=\"Genel Müdür\" aria-label=\"select field\">\r                      <Space>\r                        <SolutionOutlined />\r                        <span>Genel Müdür</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"İşletme Sahibi\" aria-label=\"select field\">\r                      <Space>\r                        <SolutionOutlined />\r                        <span>İşletme Sahibi</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Müdür\" aria-label=\"select field\">\r                      <Space>\r                        <SolutionOutlined />\r                        <span>Müdür</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Yönetici\" aria-label=\"select field\">\r                      <Space>\r                        <SolutionOutlined />\r                        <span>Yönetici</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Muhasebe Müdürü\" aria-label=\"select field\">\r                      <Space>\r                        <SolutionOutlined />\r                        <span>Muhasebe Müdürü</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"IT Müdürü\" aria-label=\"select field\">\r                      <Space>\r                        <SolutionOutlined />\r                        <span>IT Müdürü</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Satın Alma Müdürü\" aria-label=\"select field\">\r                      <Space>\r                        <SolutionOutlined />\r                        <span>Satın Alma Müdürü</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"İnsan Kaynakları\" aria-label=\"select field\">\r                      <Space>\r                        <SolutionOutlined />\r                        <span>İnsan Kaynakları</span>\r                      </Space>\r                    </Select.Option>\r                    <Select.Option value=\"Diğer\" aria-label=\"select field\">\r                      <Space>\r                        <SolutionOutlined />\r                        <span>Diğer</span>\r                      </Space>\r                    </Select.Option>\r                  </Select>\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"email\"\r                  label=\"E-posta\"\r                  className=\"wizard-form-item\"\r                  rules={[\r                    { required: true, message: 'E-posta zorunludur' },\r                    { type: 'email', message: 'Geçerli bir e-posta girin' }\r                  ]}\r                  validateStatus={\r                    validationResults.email?.isValid === false ? 'error' : \r                    validationResults.email?.isValid === true ? 'success' : ''\r                  }\r                  help={\r                    validationLoading.email ? 'Kontrol ediliyor...' :\r                    validationResults.email?.message\r                  }\r                  hasFeedback={!!validationResults.email}\r                >\r                  <Input \r                    size=\"large\"\r                    prefix={<MailOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"ahmet@sirket.com\" \r                    onChange={(e) => {\r                      const value = e.target.value;\r                      if (value.includes('@') && value.includes('.')) {\r                        validateEmail(value);\r                      }\r                    }}\r                  />\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"phone\"\r                  label=\"Telefon\"\r                  className=\"wizard-form-item\"\r                  rules={[\r                    { required: true, message: 'Telefon zorunludur' },\r                    { pattern: /^[0-9]{10,11}$/, message: 'Geçerli telefon girin' }\r                  ]}\r                  validateStatus={\r                    validationResults.phone?.isValid === false ? 'error' : \r                    validationResults.phone?.isValid === true ? 'success' : ''\r                  }\r                  help={\r                    validationLoading.phone ? 'Doğrulanıyor...' :\r                    validationResults.phone?.details?.formattedNumber || validationResults.phone?.message\r                  }\r                  hasFeedback={!!validationResults.phone}\r                >\r                  <Input \r                    size=\"large\"\r                    prefix={<PhoneOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"5551234567\" \r                    maxLength={11}\r                    onChange={(e) => {\r                      const value = e.target.value.replace(/\\D/g, '');\r                      form.setFieldValue('phone', value);\r                      if (value.length >= 10) {\r                        validatePhone(value);\r                      }\r                    }}\r                  />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"fax\"\r                  label=\"Faks (Opsiyonel)\"\r                  className=\"wizard-form-item\"\r                >\r                  <Input \r                    size=\"large\"\r                    prefix={<PhoneOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"2121234567\" \r                    maxLength={11}\r                  />\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"website\"\r                  label=\"Web Sitesi (Opsiyonel)\"\r                  className=\"wizard-form-item\"\r                  rules={[\r                    { type: 'url', message: 'Geçerli bir URL girin' }\r                  ]}\r                >\r                  <Input \r                    size=\"large\"\r                    prefix={<GlobalOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"https://www.sirket.com\" \r                  />\r                </Form.Item>\r              </Col>\r            </Row>\r            <Alert\r              message=\"Önemli Bilgilendirme\"\r              description=\"Bu e-posta adresiniz hem iletişim hem de sisteme giriş için kullanılacaktır. Lütfen aktif olarak kullandığınız bir e-posta adresi girin.\"\r              type=\"info\"\r              showIcon\r              className=\"wizard-info-alert\"\r              icon={<InfoCircleOutlined />}\r            />\r          </div>\r        );\r      case 2:\r        return (\r          <div className=\"form-section\">\r            <div className=\"form-section-title\">\r              <LockOutlined />\r              <h3>Hesap Güvenliği</h3>\r            </div>\r            <Row gutter={[24, 0]}>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"password\"\r                  label=\"Şifre\"\r                  className=\"wizard-form-item\"\r                  rules={[\r                    { required: true, message: 'Şifre zorunludur' },\r                    { min: 8, message: 'En az 8 karakter olmalı' },\r                    { \r                      pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/,\r                      message: 'Şifre gereksinimleri karşılanmıyor'\r                    }\r                  ]}\r                >\r                  <Input.Password \r                    size=\"large\"\r                    prefix={<LockOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"Güvenli şifreniz\"\r                    onChange={(e) => {\r                      const value = e.target.value;\r                      setPassword(value);\r                      if (value.length > 0) {\r                        checkPasswordStrength(value);\r                      }\r                    }}\r                  />\r                </Form.Item>\r              </Col>\r              <Col xs={24} md={12}>\r                <Form.Item\r                  name=\"confirmPassword\"\r                  label=\"Şifre Tekrar\"\r                  className=\"wizard-form-item\"\r                  dependencies={['password']}\r                  rules={[\r                    { required: true, message: 'Şifre tekrarı zorunludur' },\r                    ({ getFieldValue }) => ({\r                      validator(_, value) {\r                        if (!value || getFieldValue('password') === value) {\r                          return Promise.resolve();\r                        }\r                        return Promise.reject(new Error('Şifreler eşleşmiyor'));\r                      },\r                    }),\r                  ]}\r                >\r                  <Input.Password \r                    size=\"large\"\r                    prefix={<LockOutlined className=\"field-icon\" / aria-label=\"input field\">}\r                    placeholder=\"Şifrenizi tekrar girin\" \r                  />\r                </Form.Item>\r              </Col>\r            </Row>\r            {password && (\r              <div className=\"password-requirements\">\r                <div className=\"password-requirements-title\">\r                  <SafetyOutlined /> Şifre Gereksinimleri\r                </div>\r                {/* Real-time password strength */}\r                {validationResults.password && (\r                  <div className=\"password-strength-meter\">\r                    <Progress \r                      percent={validationResults.password.score * 20} \r                      strokeColor={validationResults.password.color}\r                      showInfo={false}\r                    />\r                    <span style={{ color: validationResults.password.color }}>\r                      Güç: {validationResults.password.level}\r                    </span>\r                  </div>\r                )}\r                {passwordRequirements.map(req => (\r                  <div \r                    key={req.key} \r                    className={`password-requirement-item ${req.test(password) ? 'fulfilled' : ''}`}\r                  >\r                    {req.test(password) ? (\r                      <CheckCircleOutlined style={{ color: '#52c41a' }} />\r                    ) : (\r                      <CloseOutlined style={{ color: '#ff4d4f' }} />\r                    )}\r                    <span>{req.label}</span>\r                  </div>\r                ))}\r                {/* Password suggestions */}\r                {validationResults.password?.suggestions?.length > 0 && (\r                  <Alert\r                    message=\"Öneriler\"\r                    description={\r                      <ul style={{ margin: 0, paddingLeft: 20 }}>\r                        {validationResults.password.suggestions.map((suggestion: string, index: number) => (\r                          <li key={index}>{suggestion}</li>\r                        ))}\r                      </ul>\r                    }\r                    type=\"info\"\r                    showIcon\r                    style={{ marginTop: 10 }}\r                  />\r                )}\r              </div>\r            )}\r            <Divider orientation=\"left\">Sözleşmeler ve İzinler</Divider>\r            <Row gutter={[24, 0]}>\r              <Col xs={24}>\r                <Form.Item\r                  name=\"acceptTerms\"\r                  valuePropName=\"checked\"\r                  className=\"wizard-form-item\"\r                  rules={[\r                    {\r                      validator: (_, value) =>\r                        value ? Promise.resolve() : Promise.reject(new Error('Kullanım koşullarını kabul etmelisiniz')),\r                    },\r                  ]}\r                >\r                  <Checkbox>\r                    <span>\r                      <a href=\"/terms\" target=\"_blank\" rel=\"noopener noreferrer\">Kullanım Koşulları</a>'nı okudum ve kabul ediyorum\r                    </span>\r                  </Checkbox>\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={[24, 0]}>\r              <Col xs={24}>\r                <Form.Item\r                  name=\"acceptPrivacy\"\r                  valuePropName=\"checked\"\r                  className=\"wizard-form-item\"\r                  rules={[\r                    {\r                      validator: (_, value) =>\r                        value ? Promise.resolve() : Promise.reject(new Error('Gizlilik politikasını kabul etmelisiniz')),\r                    },\r                  ]}\r                >\r                  <Checkbox>\r                    <span>\r                      <a href=\"/privacy\" target=\"_blank\" rel=\"noopener noreferrer\">Gizlilik Politikası</a>'nı okudum ve kabul ediyorum\r                    </span>\r                  </Checkbox>\r                </Form.Item>\r              </Col>\r            </Row>\r            <Row gutter={[24, 0]}>\r              <Col xs={24}>\r                <Form.Item\r                  name=\"allowMarketing\"\r                  valuePropName=\"checked\"\r                  className=\"wizard-form-item\"\r                  initialValue={false}\r                >\r                  <Checkbox>\r                    <span>Stocker'dan pazarlama e-postaları almak istiyorum (Opsiyonel)</span>\r                  </Checkbox>\r                </Form.Item>\r              </Col>\r            </Row>\r            <Divider orientation=\"left\">Güvenlik Doğrulaması</Divider>\r            <Row gutter={[24, 0]}>\r              <Col xs={24}>\r                <div style={{ display: 'flex', justifyContent: 'center', marginBottom: 16 }}>\r                  <ReCAPTCHA\r                    ref={recaptchaRef}\r                    sitekey={import.meta.env.VITE_RECAPTCHA_SITE_KEY || \"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\"} // Test key\r                    onChange={(token) => {\r                      setCaptchaToken(token);\r                      if (token) {\r                        message.success('Güvenlik doğrulaması başarılı');\r                      }\r                    }}\r                    onExpired={() => {\r                      setCaptchaToken(null);\r                      message.warning('Güvenlik doğrulaması süresi doldu, lütfen tekrar deneyin');\r                    }}\r                    onErrored={() => {\r                      setCaptchaToken(null);\r                      message.error('Güvenlik doğrulaması başarısız');\r                    }}\r                    theme=\"light\"\r                    size=\"normal\"\r                  />\r                </div>\r                {!captchaToken && (\r                  <Alert\r                    message=\"Robot olmadığınızı doğrulayın\"\r                    description=\"Kayıt işlemini tamamlamak için yukarıdaki güvenlik doğrulamasını tamamlamanız gerekmektedir.\"\r                    type=\"warning\"\r                    showIcon\r                  />\r                )}\r              </Col>\r            </Row>\r            {selectedPackage && (\r              <div className=\"wizard-summary\">\r                <div className=\"wizard-summary-item\">\r                  <span className=\"wizard-summary-label\">Seçili Paket:</span>\r                  <span className=\"wizard-summary-value\">{selectedPackage.name}</span>\r                </div>\r                <div className=\"wizard-summary-item\">\r                  <span className=\"wizard-summary-label\">Aylık Ücret:</span>\r                  <span className=\"wizard-summary-value\">{selectedPackage.price}₺</span>\r                </div>\r                <div className=\"wizard-summary-item\">\r                  <span className=\"wizard-summary-label\">Deneme Süresi:</span>\r                  <span className=\"wizard-summary-value\">14 Gün Ücretsiz</span>\r                </div>\r              </div>\r            )}\r          </div>\r        );\r      default:\r        return null;\r    }\r  };\r  return (\r    <div className=\"register-wizard-container\">\r      <Card className=\"wizard-card\">\r        <div className=\"wizard-header\">\r          <h2>Stocker'a Hoş Geldiniz</h2>\r          <p>İşletmenizi dijitalleştirmek için doğru yerdesiniz</p>\r        </div>\r        <div className=\"step-progress-bar\">\r          <div \r            className=\"step-progress-fill\" \r            style={{ width: `${getProgressPercentage()}%` }}\r          />\r        </div>\r        <div className=\"wizard-steps\">\r          <Steps current={currentStep}>\r            {steps.map((step, index) => (\r              <Step\r                key={index}\r                title={step.title}\r                description={step.description}\r                icon={step.icon}\r              />\r            ))}\r          </Steps>\r        </div>\r        <Form\r          form={form}\r          layout=\"vertical\"\r          autoComplete=\"off\"\r          className=\"wizard-form\"\r        >\r          <div className=\"wizard-form-content\">\r            {loading ? (\r              <div className=\"wizard-loading\">\r                <Spin \r                  size=\"large\" \r                  indicator={<LoadingOutlined style={{ fontSize: 48 }} spin />}\r                />\r              </div>\r            ) : (\r              renderStepContent()\r            )}\r          </div>\r        </Form>\r        <div className=\"wizard-footer\">\r          <div className=\"wizard-footer-content\">\r            <Button\r              size=\"large\"\r              onClick={prev}\r              disabled={currentStep === 0}\r              className=\"wizard-btn wizard-btn-secondary\"\r              icon={<ArrowLeftOutlined />}\r             aria-label=\"arrow left outlined\">\r              Geri\r            </Button>\r            <Space size={8}>\r              {[...Array(steps.length)].map((_, index) => (\r                <div\r                  key={index}\r                  style={{\r                    width: 8,\r                    height: 8,\r                    borderRadius: '50%',\r                    background: index === currentStep ? '#667eea' : '#e8e8e8',\r                    transition: 'all 0.3s ease'\r                  }}\r                />\r              ))}\r            </Space>\r            <Button \r              type=\"primary\"\r              size=\"large\"\r              loading={loading}\r              onClick={next}\r              className=\"wizard-btn wizard-btn-primary\"\r              icon={currentStep === steps.length - 1 ? <CheckOutlined /> : <ArrowRightOutlined />}\r             aria-label=\"button\">\r              {currentStep === steps.length - 1 ? 'Kaydı Tamamla' : 'İleri'}\r            </Button>\r          </div>\r        </div>\r      </Card>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/register/pages/RegisterPage/RegisterWizard.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { useNavigate } from 'react-router-dom';\rimport {\r  Card,\r  Steps,\r  Button,\r  Form,\r  Input,\r  Typography,\r  Space,\r  Row,\r  Col,\r  Progress,\r  message,\r  Radio,\r  Tooltip,\r  Tag,\r  Alert,\r  Checkbox,\r  Spin,\r  AutoComplete\r} from 'antd';\rimport {\r  UserOutlined,\r  LockOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  RocketOutlined,\r  CheckCircleOutlined,\r  ArrowRightOutlined,\r  ArrowLeftOutlined,\r  TeamOutlined,\r  BankOutlined,\r  InfoCircleOutlined,\r  LoadingOutlined,\r  IdcardOutlined,\r  BankFilled as BuildingOutlined,\r  ClockCircleOutlined,\r  ShopOutlined,\r  CheckOutlined,\r  HomeOutlined,\r  CloseOutlined\r} from '@ant-design/icons';\rimport { useSignalRValidation } from '@/shared/hooks/useSignalR';\rimport { apiClient } from '@/shared/api/client';\rimport PasswordStrength from '@/shared/components/PasswordStrength';\rimport { useAuthStore } from '@/app/store/auth.store';\rimport { showApiResponse, showRegistrationSuccess } from '@/shared/utils/sweetAlert';\rimport Swal from 'sweetalert2';\rimport { navigateToSubdomain } from '@/shared/utils/subdomain';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rinterface RegisterData {\r  // Step 1: Account Type\r  accountType: 'company' | 'individual';\r  // Step 2: Basic Info\r  companyName?: string;\r  fullName?: string;\r  subdomain?: string;\r  identityType: 'tc' | 'vergi';\r  identityNumber: string;\r  // Step 3: Business Details\r  sector: string;\r  employeeCount: string;\r  // Step 4: Contact Info\r  email: string;\r  phone: string;\r  // Step 5: Security\r  password: string;\r  confirmPassword: string;\r  // Step 6: Agreement\r  termsAccepted: boolean;\r  marketingAccepted: boolean;\r}\rconst RegisterWizard: React.FC = () => {\r  const navigate = useNavigate();\r  const [form] = Form.useForm();\r  const [currentStep, setCurrentStep] = useState(0);\r  const [registerData, setRegisterData] = useState<Partial<RegisterData>>({ \r    accountType: 'company', // Default to company\r    identityType: 'vergi' \r  });\r  const [loading, setLoading] = useState(false);\r  const [identityType, setIdentityType] = useState<'tc' | 'vergi'>('vergi');\r  const [isValidating, setIsValidating] = useState(false);\r  const [subdomain, setSubdomain] = useState('');\r  const [subdomainAvailable, setSubdomainAvailable] = useState<boolean | null>(null);\r  const [checkingSubdomain, setCheckingSubdomain] = useState(false);\r  // const [completionTime, setCompletionTime] = useState(3); // minutes - Removed\r  const [progressPercent, setProgressPercent] = useState(0);\r  const {\r    emailValidation,\r    identityValidation,\r    domainCheck,\r    validateEmail,\r    validateIdentity,\r    checkDomain,\r    isConnected\r  } = useSignalRValidation();\r  // Calculate progress\r  useEffect(() => {\r    const totalSteps = 6;\r    const percent = Math.round(((currentStep + 1) / totalSteps) * 100);\r    setProgressPercent(percent);\r  }, [currentStep]);\r  useEffect(() => {\r    if (identityValidation) {\r      setIsValidating(false);\r    }\r  }, [identityValidation]);\r  // Company name suggestions\r  const [companySuggestions, setCompanySuggestions] = useState<string[]>([]);\r  const handleCompanySearch = (value: string) => {\r    // Simulate company suggestions\r    if (value) {\r      setCompanySuggestions([\r        `${value} Teknoloji A.Ş.`,\r        `${value} Bilişim Ltd. Şti.`,\r        `${value} Yazılım ve Danışmanlık`,\r        `${value} İnovasyon Merkezi`\r      ]);\r      // Auto-generate subdomain suggestion\r      const suggestedSubdomain = value\r        .toLowerCase()\r        .replace(/[^a-z0-9]/g, '')\r        .substring(0, 30);\r      if (suggestedSubdomain && suggestedSubdomain !== subdomain) {\r        setSubdomain(suggestedSubdomain);\r        checkSubdomainAvailability(suggestedSubdomain);\r      }\r    }\r  };\r  // Check subdomain availability via SignalR\r  const checkSubdomainAvailability = async (domain: string) => {\r    if (!domain || domain.length < 3) {\r      setSubdomainAvailable(null);\r      return;\r    }\r    // Use SignalR if connected, otherwise fallback to API\r    if (isConnected) {\r      setCheckingSubdomain(true);\r      // SignalR will handle the response via the hook\r      // The response will come through the validation hub\r    } else {\r      // Fallback to direct API call\r      setCheckingSubdomain(true);\r      try {\r        const response = await apiClient.get(`/api/tenants/check-subdomain/${domain}`);\r        setSubdomainAvailable(response.data.available);\r      } catch (error) {\r        // If error, assume it's available (API might not be implemented yet)\r        setSubdomainAvailable(true);\r      } finally {\r        setCheckingSubdomain(false);\r      }\r    }\r  };\r  // Debounced subdomain check\r  useEffect(() => {\r    const timer = setTimeout(() => {\r      if (subdomain && subdomain.length >= 3) {\r        if (isConnected) {\r          // Use SignalR for real-time validation\r          checkDomain(subdomain);\r          setCheckingSubdomain(true);\r        } else {\r          // Fallback to API\r          checkSubdomainAvailability(subdomain);\r        }\r      }\r    }, 500);\r    return () => clearTimeout(timer);\r  }, [subdomain, isConnected, checkDomain]);\r  // Listen to SignalR domain check results\r  useEffect(() => {\r    if (domainCheck) {\r      setSubdomainAvailable(domainCheck.isAvailable);\r      setCheckingSubdomain(false);\r    }\r  }, [domainCheck]);\r  const handleNext = async () => {\r    try {\r      const values = await form.validateFields();\r      setRegisterData({ ...registerData, ...values });\r      if (currentStep < 5) {\r        setCurrentStep(currentStep + 1);\r        window.scrollTo({ top: 0, behavior: 'smooth' });\r      } else {\r        handleSubmit();\r      }\r    } catch (error) {\r      showApiResponse.toast.error('Lütfen gerekli alanları doldurun');\r    }\r  };\r  const handlePrev = () => {\r    setCurrentStep(currentStep - 1);\r    window.scrollTo({ top: 0, behavior: 'smooth' });\r  };\r  const handleSubmit = async () => {\r    setLoading(true);\r    try {\r      const values = await form.validateFields();\r      const allData = { ...registerData, ...values };\r      // Show loading alert\r      showApiResponse.loading('Hesabınız oluşturuluyor...');\r      // Prepare registration data for API\r      const registrationData = {\r        // User info\r        email: allData.email,\r        password: allData.password,\r        firstName: allData.fullName?.split(' ')[0] || allData.contactName?.split(' ')[0] || '',\r        lastName: allData.fullName?.split(' ').slice(1).join(' ') || allData.contactName?.split(' ').slice(1).join(' ') || '',\r        username: allData.email.split('@')[0],\r        // Company info\r        companyName: allData.companyName || allData.fullName,\r        companyCode: allData.subdomain || allData.companyName?.toLowerCase().replace(/[^a-z0-9]/g, '') || 'company',\r        domain: allData.subdomain || allData.companyName?.toLowerCase().replace(/[^a-z0-9]/g, '') || 'company',\r        // Identity info\r        identityType: allData.identityType,\r        identityNumber: allData.identityNumber,\r        // Business details\r        sector: allData.sector,\r        employeeCount: allData.employeeCount,\r        // Contact info\r        contactName: allData.fullName || allData.contactName || `${allData.firstName} ${allData.lastName}`,\r        phoneNumber: allData.phone,\r        title: allData.accountType === 'company' ? 'Yönetici' : 'Kullanıcı'\r      };\r      // Call actual API\r      const response = await apiClient.post('/api/auth/register', registrationData);\r      // Close loading alert\r      Swal.close();\r      // Check if registration was successful\r      // API might return data directly or wrapped in response.data\r      const responseData = response.data;\r      if (response.status === 200 || response.status === 201) {\r        // Show success message with email verification info\r        await showRegistrationSuccess(allData.email);\r        // Auto login after registration\r        try {\r          // Small delay before login attempt\r          await new Promise(resolve => setTimeout(resolve, 1000));\r          const loginResponse = await apiClient.post('/api/auth/login', {\r            email: allData.email,\r            password: allData.password\r          });\r          if (loginResponse.data.accessToken || loginResponse.data.token) {\r            const token = loginResponse.data.accessToken || loginResponse.data.token;\r            localStorage.setItem('token', token);\r            localStorage.setItem('user', JSON.stringify(loginResponse.data.user || loginResponse.data));\r            // Show final success and redirect\r            await showApiResponse.success(\r              'Hesabınız başarıyla oluşturuldu ve giriş yapıldı. Yönlendiriliyorsunuz...',\r              'Hoş Geldiniz!'\r            );\r            // Redirect to subdomain if available\r            setTimeout(() => {\r              if (response.data.subdomain) {\r                // Navigate to the tenant's subdomain\r                navigateToSubdomain(response.data.subdomain, '/dashboard');\r              } else {\r                navigate('/dashboard');\r              }\r            }, 1000);\r          } else {\r            throw new Error('No token received');\r          }\r        } catch (loginError: any) {\r          // If auto-login fails, still show success but redirect to login\r          await showApiResponse.info(\r            'Hesabınız oluşturuldu. E-posta doğrulaması sonrası giriş yapabilirsiniz.',\r            'Kayıt Başarılı'\r          );\r          setTimeout(() => {\r            navigate('/login');\r          }, 2000);\r        }\r      } else {\r        // Show error with API message\r        showApiResponse.error(\r          { response: { data: responseData } },\r          'Kayıt işlemi başarısız oldu'\r        );\r      }\r    } catch (error: any) {\r      // Close loading alert if open\r      Swal.close();\r      // Parse error details\r      let errorMessage = 'Kayıt sırasında bir hata oluştu';\r      let errorDetails = null;\r      if (error.response?.data) {\r        const data = error.response.data;\r        // Check for validation errors\r        if (data.errors) {\r          // If errors is an object with field-specific errors\r          if (typeof data.errors === 'object' && !Array.isArray(data.errors)) {\r            const fieldErrors: string[] = [];\r            Object.entries(data.errors).forEach(([field, errors]: [string, any]) => {\r              if (Array.isArray(errors)) {\r                errors.forEach(err => {\r                  fieldErrors.push(`${field}: ${err}`);\r                });\r              } else {\r                fieldErrors.push(`${field}: ${errors}`);\r              }\r            });\r            if (fieldErrors.length > 0) {\r              errorMessage = 'Lütfen formdaki hataları düzeltin';\r              errorDetails = fieldErrors;\r            }\r          }\r          // If errors is a simple array\r          else if (Array.isArray(data.errors)) {\r            errorMessage = 'Kayıt işlemi başarısız';\r            errorDetails = data.errors;\r          }\r        }\r        // Check for general message\r        else if (data.message) {\r          errorMessage = data.message;\r        }\r        // Check for title and detail (API problem response)\r        else if (data.title) {\r          errorMessage = data.title;\r          if (data.detail) {\r            errorDetails = [data.detail];\r          }\r        }\r      }\r      // Show error with parsed details\r      if (errorDetails && Array.isArray(errorDetails) && errorDetails.length > 0) {\r        // Show validation errors in a formatted way\r        Swal.fire({\r          icon: 'error',\r          title: 'Kayıt Hatası',\r          html: `\r            <div style=\"text-align: left;\">\r              <p>${errorMessage}</p>\r              <ul style=\"margin-top: 10px; padding-left: 20px;\">\r                ${errorDetails.map(err => `<li style=\"margin: 5px 0;\">${err}</li>`).join('')}\r              </ul>\r            </div>\r          `,\r          confirmButtonText: 'Tamam',\r          confirmButtonColor: '#667eea',\r          width: '500px'\r        });\r      } else {\r        // Show general error\r        showApiResponse.error(error, errorMessage);\r      }\r    } finally {\r      setLoading(false);\r    }\r  };\r  const renderStepContent = () => {\r    switch (currentStep) {\r      case 0: // Account Type Selection\r        return (\r          <div className=\"step-account-type\">\r            <div className=\"step-header\">\r              <Title level={2}>Hesap Türünüzü Seçin</Title>\r              <Paragraph type=\"secondary\">\r                İşletmeniz için kurumsal hesap mı, yoksa kişisel kullanım için bireysel hesap mı açmak istiyorsunuz?\r              </Paragraph>\r            </div>\r            <Form.Item name=\"accountType\" rules={[{ required: true, message: 'Hesap türü seçimi zorunludur' }]}>\r              <Radio.Group \r                size=\"large\" \r                className=\"account-type-cards\"\r              >\r                <Space direction=\"vertical\" size={16} style={{ width: '100%' }}>\r                  <Radio.Button value=\"company\" className=\"account-type-card selected-default\">\r                    <div className=\"card-content\">\r                      <div className=\"selection-indicator\">\r                        <CheckOutlined />\r                      </div>\r                      <ShopOutlined className=\"card-icon company-icon\" />\r                      <div className=\"card-text\">\r                        <Title level={4}>Kurumsal Hesap</Title>\r                        <Text type=\"secondary\">Şirketler ve işletmeler için profesyonel çözüm</Text>\r                      </div>\r                      <div className=\"card-benefits\">\r                        <ul className=\"benefit-list\">\r                          <li>Sınırsız kullanıcı ekleme</li>\r                          <li>E-Fatura ve E-Arşiv entegrasyonu</li>\r                          <li>Gelişmiş raporlama ve analiz</li>\r                          <li>Özel destek ve eğitim</li>\r                        </ul>\r                      </div>\r                      <Tag color=\"green\" className=\"recommended-tag\">\r                        <CheckCircleOutlined /> Önerilen\r                      </Tag>\r                    </div>\r                  </Radio.Button>\r                  <Radio.Button value=\"individual\" className=\"account-type-card\">\r                    <div className=\"card-content\">\r                      <div className=\"selection-indicator\">\r                        <CheckOutlined />\r                      </div>\r                      <UserOutlined className=\"card-icon individual-icon\" />\r                      <div className=\"card-text\">\r                        <Title level={4}>Bireysel Hesap</Title>\r                        <Text type=\"secondary\">Freelancer ve bireysel kullanıcılar için ideal</Text>\r                      </div>\r                      <div className=\"card-benefits\">\r                        <ul className=\"benefit-list\">\r                          <li>Tek kullanıcı hesabı</li>\r                          <li>Temel stok takibi</li>\r                          <li>Basit raporlama</li>\r                          <li>E-posta desteği</li>\r                        </ul>\r                      </div>\r                    </div>\r                  </Radio.Button>\r                </Space>\r              </Radio.Group>\r            </Form.Item>\r            <Alert\r              message=\"Bilgi\"\r              description=\"Hesap türünüzü daha sonra yükseltebilir veya değiştirebilirsiniz.\"\r              type=\"info\"\r              showIcon\r              style={{ marginTop: 24 }}\r            />\r          </div>\r        );\r      case 1: // Basic Information\r        return (\r          <div className=\"step-basic-info\">\r            <div className=\"step-header\">\r              <Title level={2}>Temel Bilgiler</Title>\r              <Paragraph type=\"secondary\">\r                {registerData.accountType === 'company' ? 'Şirket' : 'Kişisel'} bilgilerinizi girin\r              </Paragraph>\r            </div>\r            <Space direction=\"vertical\" size={24} style={{ width: '100%' }}>\r              {registerData.accountType === 'company' ? (\r                <Form.Item \r                  name=\"companyName\" \r                  label={\r                    <span>\r                      <ShopOutlined style={{ marginRight: 8, color: '#667eea' }} />\r                      Şirket Adı <Text type=\"danger\">*</Text>\r                    </span>\r                  }\r                  rules={[{ required: true, message: 'Şirket adı zorunludur' }]}\r                  extra=\"Resmi şirket unvanınızı yazın\"\r                >\r                  <AutoComplete\r                    size=\"large\"\r                    placeholder=\"Örn: ABC Teknoloji A.Ş.\"\r                    onSearch={handleCompanySearch}\r                    options={companySuggestions.map(s => ({ value: s }))}\r                    suffixIcon={<ShopOutlined />}\r                  />\r                </Form.Item>\r              ) : null}\r              {registerData.accountType === 'company' && (\r                <Form.Item\r                  name=\"subdomain\"\r                  label={\r                    <span>\r                      <HomeOutlined style={{ marginRight: 8, color: '#667eea' }} />\r                      Web Adresi (Subdomain) <Text type=\"danger\">*</Text>\r                    </span>\r                  }\r                  rules={[\r                    { required: true, message: 'Web adresi zorunludur' },\r                    { min: 3, message: 'En az 3 karakter olmalıdır' },\r                    { max: 30, message: 'En fazla 30 karakter olabilir' },\r                    { pattern: /^[a-z0-9][a-z0-9-]*[a-z0-9]$/, message: 'Sadece küçük harf, rakam ve tire kullanabilirsiniz' }\r                  ]}\r                  validateStatus={\r                    checkingSubdomain ? 'validating' :\r                    subdomainAvailable === false ? 'error' :\r                    subdomainAvailable === true ? 'success' : ''\r                  }\r                  hasFeedback={subdomain.length > 0}\r                  help={\r                    subdomainAvailable === false ? 'Bu adres kullanımda, başka bir tane deneyin' :\r                    subdomainAvailable === true ? 'Bu adres müsait!' : \r                    subdomain.length > 0 && subdomain.length < 3 ? 'En az 3 karakter olmalıdır' : ''\r                  }\r                  extra={\r                    <div style={{ marginTop: 8 }}>\r                      <Text type=\"secondary\">Şirketinizin web adresi: </Text>\r                      <Text strong style={{ color: '#667eea' }}>\r                        {subdomain || 'sirketiniz'}.stoocker.app\r                      </Text>\r                    </div>\r                  }\r                >\r                  <Input\r                    size=\"large\"\r                    placeholder=\"sirketiniz\"\r                    value={subdomain}\r                    onChange={(e) = aria-label=\"input field\"> {\r                      const value = e.target.value.toLowerCase().replace(/[^a-z0-9-]/g, '');\r                      setSubdomain(value);\r                      form.setFieldsValue({ subdomain: value });\r                    }}\r                    prefix={<HomeOutlined style={{ color: '#999' }} />}\r                    suffix={\r                      checkingSubdomain ? <LoadingOutlined /> :\r                      subdomainAvailable === true ? <CheckCircleOutlined style={{ color: '#52c41a' }} /> :\r                      subdomainAvailable === false ? <CloseOutlined style={{ color: '#f5222d' }} /> : null\r                    }\r                    addonAfter=\".stoocker.app\"\r                  />\r                </Form.Item>\r              )}\r              {registerData.accountType === 'individual' ? (\r                <Form.Item \r                  name=\"fullName\" \r                  label={\r                    <span>\r                      <UserOutlined style={{ marginRight: 8, color: '#667eea' }} />\r                      Ad Soyad <Text type=\"danger\">*</Text>\r                    </span>\r                  }\r                  rules={[{ required: true, message: 'Ad soyad zorunludur' }]}\r                >\r                  <Input \r                    size=\"large\" \r                    placeholder=\"Adınız ve soyadınız\"\r                    prefix={<UserOutlined style={{ color: '#999' }} / aria-label=\"input field\">}\r                  />\r                </Form.Item>\r              ) : null}\r              <div className=\"identity-selector\">\r                <Text strong style={{ marginBottom: 8, display: 'block' }}>\r                  <IdcardOutlined style={{ marginRight: 8, color: '#667eea' }} />\r                  Kimlik Doğrulama Tipi <Text type=\"danger\">*</Text>\r                </Text>\r                <Radio.Group \r                  value={identityType}\r                  onChange={(e) => setIdentityType(e.target.value)}\r                  size=\"large\"\r                  style={{ width: '100%' }}\r                >\r                  <Space direction=\"vertical\" size={12} style={{ width: '100%' }}>\r                    <Radio value=\"tc\" className=\"identity-option\">\r                      <Space>\r                        <IdcardOutlined />\r                        <span>TC Kimlik No</span>\r                        <Tooltip title=\"11 haneli TC kimlik numaranız\">\r                          <InfoCircleOutlined style={{ color: '#999' }} />\r                        </Tooltip>\r                      </Space>\r                    </Radio>\r                    <Radio value=\"vergi\" className=\"identity-option\">\r                      <Space>\r                        <BankOutlined />\r                        <span>Vergi No</span>\r                        <Tooltip title=\"10 haneli vergi numaranız\">\r                          <InfoCircleOutlined style={{ color: '#999' }} />\r                        </Tooltip>\r                      </Space>\r                    </Radio>\r                  </Space>\r                </Radio.Group>\r              </div>\r              <Form.Item\r                name=\"identityNumber\"\r                label={\r                  <span>\r                    {identityType === 'tc' ? \r                      <IdcardOutlined style={{ marginRight: 8, color: '#667eea' }} /> : \r                      <BankOutlined style={{ marginRight: 8, color: '#667eea' }} />\r                    }\r                    {identityType === 'tc' ? 'TC Kimlik No' : 'Vergi No'} <Text type=\"danger\">*</Text>\r                  </span>\r                }\r                rules={[\r                  { required: true, message: `${identityType === 'tc' ? 'TC Kimlik No' : 'Vergi No'} zorunludur` },\r                  { len: identityType === 'tc' ? 11 : 10, message: `${identityType === 'tc' ? '11' : '10'} haneli olmalıdır` }\r                ]}\r                validateStatus={identityValidation?.isValid === false ? 'error' : ''}\r                help={identityValidation?.isValid === false ? identityValidation.message : ''}\r              >\r                <Input\r                  size=\"large\"\r                  placeholder={identityType === 'tc' ? '11 haneli TC Kimlik No' : '10 haneli Vergi No'}\r                  maxLength={identityType === 'tc' ? 11 : 10}\r                  suffix={\r                    isValidating ? <LoadingOutlined / aria-label=\"input field\"> :\r                    identityValidation?.isValid ? <CheckCircleOutlined style={{ color: '#52c41a' }} /> : null\r                  }\r                  onChange={async (e) => {\r                    const value = e.target.value.replace(/\\D/g, '');\r                    form.setFieldsValue({ identityNumber: value });\r                    if (value.length === (identityType === 'tc' ? 11 : 10)) {\r                      setIsValidating(true);\r                      try {\r                        await validateIdentity(value);\r                      } catch (error) {\r                      } finally {\r                        setTimeout(() => setIsValidating(false), 1000);\r                      }\r                    }\r                  }}\r                />\r              </Form.Item>\r            </Space>\r          </div>\r        );\r      case 2: // Business Details\r        return (\r          <div className=\"step-business\">\r            <div className=\"step-header\">\r              <Title level={2}>İşletme Detayları</Title>\r              <Paragraph type=\"secondary\">\r                Sektörünüzü ve işletme büyüklüğünüzü belirtin\r              </Paragraph>\r            </div>\r            <Space direction=\"vertical\" size={32} style={{ width: '100%' }}>\r              <div>\r                <Text strong style={{ marginBottom: 16, display: 'block', fontSize: 16 }}>\r                  Faaliyet Sektörünüz <Text type=\"danger\">*</Text>\r                </Text>\r                <Form.Item \r                  name=\"sector\" \r                  rules={[{ required: true, message: 'Sektör seçimi zorunludur' }]}\r                >\r                  <Radio.Group className=\"sector-cards\">\r                    <Row gutter={[16, 16]}>\r                      {[\r                        { value: 'tech', label: 'Teknoloji', icon: '💻' },\r                        { value: 'retail', label: 'Perakende', icon: '🛍️' },\r                        { value: 'service', label: 'Hizmet', icon: '🤝' },\r                        { value: 'production', label: 'Üretim', icon: '🏭' },\r                        { value: 'health', label: 'Sağlık', icon: '🏥' },\r                        { value: 'education', label: 'Eğitim', icon: '🎓' },\r                        { value: 'construction', label: 'İnşaat', icon: '🏗️' },\r                        { value: 'other', label: 'Diğer', icon: '📊' }\r                      ].map(sector => (\r                        <Col xs={12} sm={8} md={6} key={sector.value}>\r                          <Radio.Button value={sector.value} className=\"sector-card\">\r                            <div className=\"sector-card-content\">\r                              <span className=\"sector-icon\">{sector.icon}</span>\r                              <span className=\"sector-label\">{sector.label}</span>\r                            </div>\r                          </Radio.Button>\r                        </Col>\r                      ))}\r                    </Row>\r                  </Radio.Group>\r                </Form.Item>\r              </div>\r              <div>\r                <Text strong style={{ marginBottom: 16, display: 'block', fontSize: 16 }}>\r                  Çalışan Sayısı <Text type=\"danger\">*</Text>\r                </Text>\r                <Form.Item \r                  name=\"employeeCount\" \r                  rules={[{ required: true, message: 'Çalışan sayısı seçimi zorunludur' }]}\r                >\r                  <Radio.Group className=\"employee-cards\">\r                    <Row gutter={[16, 16]}>\r                      {[\r                        { value: '1-10', label: '1-10', desc: 'Mikro İşletme' },\r                        { value: '11-50', label: '11-50', desc: 'Küçük İşletme' },\r                        { value: '51-200', label: '51-200', desc: 'Orta Ölçekli' },\r                        { value: '200+', label: '200+', desc: 'Büyük İşletme' }\r                      ].map(size => (\r                        <Col xs={12} sm={6} key={size.value}>\r                          <Radio.Button value={size.value} className=\"employee-card\">\r                            <TeamOutlined style={{ fontSize: 24, marginBottom: 8 }} />\r                            <div className=\"employee-count\">{size.label}</div>\r                            <div className=\"employee-desc\">{size.desc}</div>\r                          </Radio.Button>\r                        </Col>\r                      ))}\r                    </Row>\r                  </Radio.Group>\r                </Form.Item>\r              </div>\r            </Space>\r          </div>\r        );\r      case 3: // Contact Information\r        return (\r          <div className=\"step-contact\">\r            <div className=\"step-header\">\r              <Title level={2}>İletişim Bilgileri</Title>\r              <Paragraph type=\"secondary\">\r                Size ulaşabileceğimiz iletişim bilgilerinizi girin\r              </Paragraph>\r            </div>\r            <Space direction=\"vertical\" size={24} style={{ width: '100%' }}>\r              <Form.Item\r                name=\"email\"\r                label={\r                  <span>\r                    E-posta Adresi <Text type=\"danger\">*</Text>\r                  </span>\r                }\r                rules={[\r                  { required: true, message: 'E-posta adresi zorunludur' },\r                  { type: 'email', message: 'Geçerli bir e-posta adresi girin' }\r                ]}\r                validateStatus={emailValidation?.isValid === false ? 'error' : ''}\r                help={emailValidation?.isValid === false ? 'Bu e-posta adresi zaten kullanımda' : ''}\r                extra=\"Giriş yapmak ve bildirimler için kullanılacak\"\r              >\r                <Input\r                  size=\"large\"\r                  prefix={<MailOutlined / aria-label=\"input field\">}\r                  placeholder=\"ornek@sirket.com\"\r                  onChange={(e) => validateEmail(e.target.value)}\r                  suffix={\r                    emailValidation?.isValid ? \r                    <CheckCircleOutlined style={{ color: '#52c41a' }} /> : null\r                  }\r                />\r              </Form.Item>\r              <Form.Item\r                name=\"phone\"\r                label={\r                  <span>\r                    Telefon Numarası <Text type=\"danger\">*</Text>\r                  </span>\r                }\r                rules={[\r                  { required: true, message: 'Telefon numarası zorunludur' },\r                  { pattern: /^[0-9]{10,11}$/, message: 'Geçerli bir telefon numarası girin' }\r                ]}\r                extra=\"Başında 0 olmadan, 10 haneli olarak girin\"\r              >\r                <Input\r                  size=\"large\"\r                  prefix={<PhoneOutlined / aria-label=\"input field\">}\r                  placeholder=\"5XX XXX XX XX\"\r                  maxLength={10}\r                />\r              </Form.Item>\r            </Space>\r          </div>\r        );\r      case 4: // Security\r        return (\r          <div className=\"step-security\">\r            <div className=\"step-header\">\r              <Title level={2}>Güvenlik</Title>\r              <Paragraph type=\"secondary\">\r                Hesabınız için güçlü bir şifre belirleyin\r              </Paragraph>\r            </div>\r            <Space direction=\"vertical\" size={24} style={{ width: '100%' }}>\r              <Form.Item\r                name=\"password\"\r                label={\r                  <span>\r                    Şifre <Text type=\"danger\">*</Text>\r                  </span>\r                }\r                rules={[\r                  { required: true, message: 'Şifre zorunludur' },\r                  { min: 8, message: 'Şifre en az 8 karakter olmalıdır' }\r                ]}\r                extra={<PasswordStrength password={form.getFieldValue('password')} />}\r              >\r                <Input.Password\r                  size=\"large\"\r                  prefix={<LockOutlined / aria-label=\"input field\">}\r                  placeholder=\"En az 8 karakter\"\r                />\r              </Form.Item>\r              <Form.Item\r                name=\"confirmPassword\"\r                label={\r                  <span>\r                    Şifre Tekrar <Text type=\"danger\">*</Text>\r                  </span>\r                }\r                dependencies={['password']}\r                rules={[\r                  { required: true, message: 'Şifre tekrarı zorunludur' },\r                  ({ getFieldValue }) => ({\r                    validator(_, value) {\r                      if (!value || getFieldValue('password') === value) {\r                        return Promise.resolve();\r                      }\r                      return Promise.reject(new Error('Şifreler eşleşmiyor'));\r                    },\r                  }),\r                ]}\r              >\r                <Input.Password\r                  size=\"large\"\r                  prefix={<LockOutlined / aria-label=\"input field\">}\r                  placeholder=\"Şifrenizi tekrar girin\"\r                />\r              </Form.Item>\r              <Alert\r                message=\"Güvenlik İpuçları\"\r                description={\r                  <ul style={{ marginBottom: 0, paddingLeft: 20 }}>\r                    <li>Büyük ve küçük harf kullanın</li>\r                    <li>En az bir rakam ekleyin</li>\r                    <li>Özel karakter kullanın (!@#$%)</li>\r                    <li>Kişisel bilgilerinizi kullanmayın</li>\r                  </ul>\r                }\r                type=\"info\"\r                showIcon\r              />\r            </Space>\r          </div>\r        );\r      case 5: // Agreement & Summary\r        return (\r          <div className=\"step-agreement\">\r            <div className=\"step-header\">\r              <Title level={2}>Neredeyse Hazırsınız!</Title>\r              <Paragraph type=\"secondary\">\r                Son adım: Sözleşmeleri onaylayın ve hesabınızı oluşturun\r              </Paragraph>\r            </div>\r            <Card className=\"summary-card\">\r              <Title level={4}>Hesap Özeti</Title>\r              <Space direction=\"vertical\" size={12} style={{ width: '100%' }}>\r                <div className=\"summary-item\">\r                  <Text type=\"secondary\">Hesap Türü:</Text>\r                  <Text strong>{registerData.accountType === 'company' ? 'Kurumsal' : 'Bireysel'}</Text>\r                </div>\r                {registerData.companyName && (\r                  <div className=\"summary-item\">\r                    <Text type=\"secondary\">Şirket:</Text>\r                    <Text strong>{registerData.companyName}</Text>\r                  </div>\r                )}\r                <div className=\"summary-item\">\r                  <Text type=\"secondary\">E-posta:</Text>\r                  <Text strong>{registerData.email}</Text>\r                </div>\r                <div className=\"summary-item\">\r                  <Text type=\"secondary\">Sektör:</Text>\r                  <Text strong>{registerData.sector}</Text>\r                </div>\r              </Space>\r            </Card>\r            <Space direction=\"vertical\" size={16} style={{ width: '100%', marginTop: 24 }}>\r              <Form.Item\r                name=\"termsAccepted\"\r                valuePropName=\"checked\"\r                rules={[\r                  {\r                    validator: (_, value) =>\r                      value ? Promise.resolve() : Promise.reject(new Error('Sözleşmeyi kabul etmelisiniz')),\r                  },\r                ]}\r              >\r                <Checkbox>\r                  <Space>\r                    <span>\r                      <a href=\"/terms\" target=\"_blank\">Kullanım Sözleşmesi</a> ve{' '}\r                      <a href=\"/privacy\" target=\"_blank\">Gizlilik Politikası</a>'nı okudum, kabul ediyorum\r                    </span>\r                    <Text type=\"danger\">*</Text>\r                  </Space>\r                </Checkbox>\r              </Form.Item>\r              <Form.Item name=\"marketingAccepted\" valuePropName=\"checked\">\r                <Checkbox>\r                  Stocker'dan haberler ve kampanyalar hakkında e-posta almak istiyorum\r                </Checkbox>\r              </Form.Item>\r            </Space>\r            <Alert\r              message=\"Hesabınız oluşturulduktan sonra:\"\r              description={\r                <ul style={{ marginBottom: 0, paddingLeft: 20 }}>\r                  <li>14 gün ücretsiz deneme başlayacak</li>\r                  <li>Tüm özelliklere erişim sağlanacak</li>\r                  <li>İstediğiniz zaman iptal edebileceksiniz</li>\r                  <li>7/24 destek alabileceksiniz</li>\r                </ul>\r              }\r              type=\"success\"\r              showIcon\r              style={{ marginTop: 24 }}\r            />\r          </div>\r        );\r      default:\r        return null;\r    }\r  };\r  return (\r    <div className=\"register-wizard-container\">\r      <div className=\"wizard-header\">\r        <div className=\"wizard-header-content\">\r          <div className=\"wizard-logo\">\r            <RocketOutlined />\r            <span>Stocker</span>\r          </div>\r          <Button \r            className=\"wizard-home-button\" \r            onClick={() => navigate('/')}\r            icon={<HomeOutlined />}\r            type=\"primary\"\r            size=\"large\"\r            style={{ \r              background: 'white', \r              color: '#667eea',\r              border: 'none',\r              fontWeight: 600,\r              boxShadow: '0 4px 12px rgba(0,0,0,0.15)',\r              display: 'flex',\r              alignItems: 'center',\r              gap: '8px'\r            }}\r          >\r            Anasayfaya Dön\r          </Button>\r        </div>\r        <div className=\"wizard-progress\">\r          <div className=\"wizard-title\">\r            {currentStep === 0 && (\r              <>\r                <Title level={3} style={{ color: 'white', margin: 0 }}>Kayıt Sihirbazına Hoş Geldiniz</Title>\r                <Text style={{ color: 'rgba(255, 255, 255, 0.9)' }}>Hesabınızı oluşturmak için adımları takip edin</Text>\r              </>\r            )}\r            {currentStep === 1 && (\r              <>\r                <Title level={3} style={{ color: 'white', margin: 0 }}>Kimlik Doğrulama</Title>\r                <Text style={{ color: 'rgba(255, 255, 255, 0.9)' }}>Güvenliğiniz için kimlik bilgilerinizi doğrulayın</Text>\r              </>\r            )}\r            {currentStep === 2 && (\r              <>\r                <Title level={3} style={{ color: 'white', margin: 0 }}>İşletme Profili</Title>\r                <Text style={{ color: 'rgba(255, 255, 255, 0.9)' }}>Size özel çözümler sunabilmemiz için</Text>\r              </>\r            )}\r            {currentStep === 3 && (\r              <>\r                <Title level={3} style={{ color: 'white', margin: 0 }}>İletişim Tercihleri</Title>\r                <Text style={{ color: 'rgba(255, 255, 255, 0.9)' }}>Size ulaşabileceğimiz bilgiler</Text>\r              </>\r            )}\r            {currentStep === 4 && (\r              <>\r                <Title level={3} style={{ color: 'white', margin: 0 }}>Güvenlik Ayarları</Title>\r                <Text style={{ color: 'rgba(255, 255, 255, 0.9)' }}>Hesabınızı korumak için güçlü bir şifre</Text>\r              </>\r            )}\r            {currentStep === 5 && (\r              <>\r                <Title level={3} style={{ color: 'white', margin: 0 }}>Son Adım!</Title>\r                <Text style={{ color: 'rgba(255, 255, 255, 0.9)' }}>Sözleşmeleri onaylayın ve başlayalım</Text>\r              </>\r            )}\r          </div>\r          <div className=\"step-indicators\">\r            {['Hesap Türü', 'Temel Bilgiler', 'İşletme', 'İletişim', 'Güvenlik', 'Onay'].map((step, index) => (\r              <div \r                key={index} \r                className={`step-indicator ${index === currentStep ? 'active' : ''} ${index < currentStep ? 'completed' : ''}`}\r              >\r                <div className=\"step-number\">\r                  {index < currentStep ? <CheckOutlined /> : index + 1}\r                </div>\r                <span className=\"step-label\">{step}</span>\r              </div>\r            ))}\r          </div>\r          <Progress \r            percent={progressPercent} \r            strokeColor=\"#667eea\"\r            showInfo={false}\r            style={{ marginBottom: 0 }}\r          />\r        </div>\r      </div>\r      <div className=\"wizard-content\">\r        <Card className=\"wizard-card\">\r          {!isConnected && (\r            <Alert\r              message=\"Bağlantı Kontrol Ediliyor\"\r              description=\"Gerçek zamanlı doğrulama servisi bağlanıyor...\"\r              type=\"warning\"\r              showIcon\r              icon={<LoadingOutlined />}\r              style={{ marginBottom: 24 }}\r            />\r          )}\r          <Form\r            form={form}\r            layout=\"vertical\"\r            size=\"large\"\r            initialValues={registerData}\r            onFinish={handleSubmit}\r          >\r            {renderStepContent()}\r          </Form>\r          <div className=\"wizard-actions\">\r            {currentStep > 0 && (\r              <Button \r                size=\"large\" \r                onClick={handlePrev}\r                icon={<ArrowLeftOutlined />}\r               aria-label=\"arrow left outlined\">\r                Geri\r              </Button>\r            )}\r            <Button\r              type=\"primary\"\r              size=\"large\"\r              onClick={handleNext}\r              loading={loading}\r              icon={currentStep === 5 ? <CheckCircleOutlined /> : <ArrowRightOutlined />}\r              iconPosition=\"end\"\r             aria-label=\"button\">\r              {currentStep === 5 ? 'Hesabı Oluştur' : 'Devam Et'}\r            </Button>\r          </div>\r        </Card>\r      </div>\r    </div>\r  );\r};\rexport default RegisterWizard;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/register/pages/RegisterWizard/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { Card, Input, Form, Typography, Space, Alert, Badge, Tag, Spin, Row, Col, Button, Tabs, Divider, Radio } from 'antd';\rimport { CheckCircleOutlined, CloseCircleOutlined, LoadingOutlined, ApiOutlined, WifiOutlined, IdcardOutlined } from '@ant-design/icons';\rimport { useSignalRValidation } from '@/shared/hooks/useSignalR';\rimport { apiClient } from '@/shared/api/client';\rconst { Title, Text } = Typography;\rconst { TabPane } = Tabs;\rexport const SignalRTestPage: React.FC = () => {\r  // SignalR Hook\r  const {\r    isConnected,\r    emailValidation,\r    passwordStrength,\r    domainCheck,\r    phoneValidation,\r    companyNameCheck,\r    identityValidation,\r    error,\r    validateEmail,\r    checkPasswordStrength,\r    checkDomain,\r    validatePhone,\r    checkCompanyName,\r    validateIdentity,\r  } = useSignalRValidation();\r  // State for inputs\r  const [emailInput, setEmailInput] = useState('');\r  const [passwordInput, setPasswordInput] = useState('');\r  const [domainInput, setDomainInput] = useState('');\r  const [phoneInput, setPhoneInput] = useState('');\r  const [companyInput, setCompanyInput] = useState('');\r  const [identityInput, setIdentityInput] = useState('');\r  const [identityType, setIdentityType] = useState<'tc' | 'vkn'>('tc');\r  // State for validation loading\r  const [isValidatingEmail, setIsValidatingEmail] = useState(false);\r  const [isValidatingPassword, setIsValidatingPassword] = useState(false);\r  const [isValidatingDomain, setIsValidatingDomain] = useState(false);\r  const [isValidatingPhone, setIsValidatingPhone] = useState(false);\r  const [isValidatingCompany, setIsValidatingCompany] = useState(false);\r  const [isValidatingIdentity, setIsValidatingIdentity] = useState(false);\r  // State for REST API results\r  const [apiEmailResult, setApiEmailResult] = useState<any>(null);\r  const [apiPasswordResult, setApiPasswordResult] = useState<any>(null);\r  const [apiDomainResult, setApiDomainResult] = useState<any>(null);\r  const [apiPhoneResult, setApiPhoneResult] = useState<any>(null);\r  const [apiCompanyResult, setApiCompanyResult] = useState<any>(null);\r  const [apiIdentityResult, setApiIdentityResult] = useState<any>(null);\r  // State for API loading\r  const [apiEmailLoading, setApiEmailLoading] = useState(false);\r  const [apiPasswordLoading, setApiPasswordLoading] = useState(false);\r  const [apiDomainLoading, setApiDomainLoading] = useState(false);\r  const [apiPhoneLoading, setApiPhoneLoading] = useState(false);\r  const [apiCompanyLoading, setApiCompanyLoading] = useState(false);\r  const [apiIdentityLoading, setApiIdentityLoading] = useState(false);\r  // SignalR Handlers\r  const handleEmailChange = async (value: string) => {\r    setEmailInput(value);\r    if (value && value.includes('@')) {\r      setIsValidatingEmail(true);\r      await validateEmail(value);\r    }\r  };\r  const handlePasswordChange = async (value: string) => {\r    setPasswordInput(value);\r    if (value) {\r      setIsValidatingPassword(true);\r      await checkPasswordStrength(value);\r    }\r  };\r  const handleDomainChange = async (value: string) => {\r    setDomainInput(value);\r    if (value && value.length > 2) {\r      setIsValidatingDomain(true);\r      await checkDomain(`${value}.stocker.app`);\r    }\r  };\r  const handlePhoneChange = async (value: string) => {\r    setPhoneInput(value);\r    if (value && value.length > 6) {\r      setIsValidatingPhone(true);\r      await validatePhone(value, 'TR');\r    }\r  };\r  const handleCompanyChange = async (value: string) => {\r    setCompanyInput(value);\r    if (value && value.length > 2) {\r      setIsValidatingCompany(true);\r      await checkCompanyName(value);\r    }\r  };\r  const handleIdentityChange = async (value: string) => {\r    setIdentityInput(value);\r    const cleanValue = value.replace(/\\D/g, '');\r    const expectedLength = identityType === 'tc' ? 11 : 10;\r    if (cleanValue.length === expectedLength) {\r      setIsValidatingIdentity(true);\r      try {\r        await validateIdentity(cleanValue);\r      } catch (error) {\r      }\r    }\r  };\r  // REST API Handlers\r  const validateEmailViaAPI = async () => {\r    if (!emailInput || !emailInput.includes('@')) {\r      return;\r    }\r    setApiEmailLoading(true);\r    try {\r      const response = await apiClient.post('/api/public/validate/email', { email: emailInput });\r      setApiEmailResult(response.data);\r    } catch (error: any) {\r      setApiEmailResult({ \r        isValid: false, \r        message: error.response?.data?.message || 'API hatası'\r      });\r    } finally {\r      setApiEmailLoading(false);\r    }\r  };\r  const checkPasswordViaAPI = async () => {\r    if (!passwordInput) {\r      return;\r    }\r    setApiPasswordLoading(true);\r    try {\r      const response = await apiClient.post('/api/public/validate/password-strength', { password: passwordInput });\r      setApiPasswordResult(response.data);\r    } catch (error: any) {\r      setApiPasswordResult({ \r        score: 0,\r        message: error.response?.data?.message || 'API hatası'\r      });\r    } finally {\r      setApiPasswordLoading(false);\r    }\r  };\r  const checkDomainViaAPI = async () => {\r    if (!domainInput || domainInput.length < 3) {\r      return;\r    }\r    setApiDomainLoading(true);\r    try {\r      const response = await apiClient.post('/api/public/validate/domain', { \r        domain: `${domainInput}.stocker.app` \r      });\r      setApiDomainResult(response.data);\r    } catch (error: any) {\r      setApiDomainResult({ \r        isAvailable: false,\r        message: error.response?.data?.message || 'API hatası'\r      });\r    } finally {\r      setApiDomainLoading(false);\r    }\r  };\r  const validatePhoneViaAPI = async () => {\r    if (!phoneInput || phoneInput.length < 7) {\r      return;\r    }\r    setApiPhoneLoading(true);\r    try {\r      const response = await apiClient.post('/api/public/validate/phone', { \r        phoneNumber: phoneInput,\r        countryCode: 'TR'\r      });\r      setApiPhoneResult(response.data);\r    } catch (error: any) {\r      setApiPhoneResult({ \r        isValid: false,\r        message: error.response?.data?.message || 'API hatası'\r      });\r    } finally {\r      setApiPhoneLoading(false);\r    }\r  };\r  const checkCompanyViaAPI = async () => {\r    if (!companyInput || companyInput.length < 3) {\r      return;\r    }\r    setApiCompanyLoading(true);\r    try {\r      const response = await apiClient.post('/api/public/validate/company-name', { \r        companyName: companyInput \r      });\r      setApiCompanyResult(response.data);\r    } catch (error: any) {\r      setApiCompanyResult({ \r        isValid: false,\r        message: error.response?.data?.message || 'API hatası'\r      });\r    } finally {\r      setApiCompanyLoading(false);\r    }\r  };\r  const validateIdentityViaAPI = async () => {\r    const cleanValue = identityInput.replace(/\\D/g, '');\r    const expectedLength = identityType === 'tc' ? 11 : 10;\r    if (cleanValue.length !== expectedLength) {\r      return;\r    }\r    setApiIdentityLoading(true);\r    try {\r      const response = await apiClient.post('/api/public/validate/identity', { \r        identityNumber: cleanValue \r      });\r      setApiIdentityResult(response.data);\r    } catch (error: any) {\r      setApiIdentityResult({ \r        isValid: false,\r        message: error.response?.data?.message || 'API hatası',\r        numberType: identityType === 'tc' ? 'TCKimlik' : 'VergiNo'\r      });\r    } finally {\r      setApiIdentityLoading(false);\r    }\r  };\r  // Reset loading states when results come in\r  useEffect(() => {\r    if (emailValidation) setIsValidatingEmail(false);\r  }, [emailValidation]);\r  useEffect(() => {\r    if (passwordStrength) setIsValidatingPassword(false);\r  }, [passwordStrength]);\r  useEffect(() => {\r    if (domainCheck) setIsValidatingDomain(false);\r  }, [domainCheck]);\r  useEffect(() => {\r    if (phoneValidation) setIsValidatingPhone(false);\r  }, [phoneValidation]);\r  useEffect(() => {\r    if (companyNameCheck) setIsValidatingCompany(false);\r  }, [companyNameCheck]);\r  useEffect(() => {\r    if (identityValidation) setIsValidatingIdentity(false);\r  }, [identityValidation]);\r  const getPasswordStrengthColor = (level?: string) => {\r    switch (level) {\r      case 'VeryWeak': return '#ff4d4f';\r      case 'Weak': return '#faad14';\r      case 'Fair': return '#fadb14';\r      case 'Strong': return '#52c41a';\r      case 'VeryStrong': return '#389e0d';\r      default: return '#d9d9d9';\r    }\r  };\r  const renderValidationCard = (\r    title: string,\r    input: string,\r    setInput: (value: string) => void,\r    signalRResult: any,\r    apiResult: any,\r    handleSignalR: (value: string) => void,\r    handleAPI: () => void,\r    isSignalRLoading: boolean,\r    isAPILoading: boolean,\r    placeholder: string,\r    isPassword: boolean = false,\r    addonAfter?: string\r  ) => (\r    <Card title={title}>\r      <Tabs defaultActiveKey=\"signalr\">\r        <TabPane\r          tab={\r            <span>\r              <WifiOutlined /> SignalR (Real-time)\r            </span>\r          }\r          key=\"signalr\"\r        >\r          <Form.Item\r            label={`${title} - SignalR`}\r            validateStatus={\r              isSignalRLoading ? 'validating' :\r              signalRResult ? (signalRResult.isValid || signalRResult.score >= 3 ? 'success' : 'error') : ''\r            }\r            hasFeedback={isSignalRLoading || !!signalRResult}\r            help={signalRResult?.message || (signalRResult?.suggestions && signalRResult.suggestions.join(', '))}\r          >\r            {isPassword ? (\r              <Input.Password\r                placeholder={placeholder}\r                value={input}\r                onChange={(e) = aria-label=\"input field\"> {\r                  setInput(e.target.value);\r                  handleSignalR(e.target.value);\r                }}\r              />\r            ) : (\r              <Input\r                placeholder={placeholder}\r                value={input}\r                onChange={(e) = aria-label=\"input field\"> {\r                  setInput(e.target.value);\r                  handleSignalR(e.target.value);\r                }}\r                addonAfter={addonAfter}\r                suffix={\r                  isSignalRLoading ? <Spin indicator={<LoadingOutlined />} /> :\r                  signalRResult ? (\r                    signalRResult.isValid || signalRResult.score >= 3 ? \r                    <CheckCircleOutlined style={{ color: '#52c41a' }} /> :\r                    <CloseCircleOutlined style={{ color: '#ff4d4f' }} />\r                  ) : null\r                }\r              />\r            )}\r          </Form.Item>\r          {signalRResult && (\r            <Alert\r              message=\"SignalR Result\"\r              description={\r                <div>\r                  {signalRResult.score !== undefined && (\r                    <div>\r                      <Text>Score: </Text>\r                      <Tag color={getPasswordStrengthColor(signalRResult.level)}>\r                        {signalRResult.level} ({signalRResult.score}/5)\r                      </Tag>\r                    </div>\r                  )}\r                  {signalRResult.details && (\r                    <pre>{JSON.stringify(signalRResult.details, null, 2)}</pre>\r                  )}\r                  {signalRResult.suggestions && signalRResult.suggestions.length > 0 && (\r                    <ul>\r                      {signalRResult.suggestions.map((s: string, i: number) => (\r                        <li key={i}>{s}</li>\r                      ))}\r                    </ul>\r                  )}\r                </div>\r              }\r              type={signalRResult.isValid || signalRResult.score >= 3 ? \"success\" : \"warning\"}\r            />\r          )}\r        </TabPane>\r        <TabPane\r          tab={\r            <span>\r              <ApiOutlined /> REST API\r            </span>\r          }\r          key=\"api\"\r        >\r          <Form.Item\r            label={`${title} - REST API`}\r            validateStatus={\r              isAPILoading ? 'validating' :\r              apiResult ? (apiResult.isValid || apiResult.score >= 3 || apiResult.isAvailable ? 'success' : 'error') : ''\r            }\r            hasFeedback={isAPILoading}\r          >\r            <Space.Compact style={{ width: '100%' }}>\r              {isPassword ? (\r                <Input.Password\r                  placeholder={placeholder}\r                  value={input}\r                  onChange={(e) = aria-label=\"input field\"> setInput(e.target.value)}\r                />\r              ) : (\r                <Input\r                  placeholder={placeholder}\r                  value={input}\r                  onChange={(e) = aria-label=\"input field\"> setInput(e.target.value)}\r                  addonAfter={addonAfter}\r                />\r              )}\r              <Button\r                type=\"primary\"\r                onClick={handleAPI}\r                loading={isAPILoading}\r              >\r                Validate\r              </Button>\r            </Space.Compact>\r          </Form.Item>\r          {apiResult && (\r            <Alert\r              message=\"API Result\"\r              description={\r                <div>\r                  <p><strong>Message:</strong> {apiResult.message}</p>\r                  {apiResult.score !== undefined && (\r                    <p>\r                      <strong>Score:</strong>{' '}\r                      <Tag color={getPasswordStrengthColor(apiResult.level)}>\r                        {apiResult.level} ({apiResult.score}/5)\r                      </Tag>\r                    </p>\r                  )}\r                  {apiResult.formattedNumber && (\r                    <p><strong>Formatted:</strong> {apiResult.formattedNumber}</p>\r                  )}\r                  {apiResult.carrier && (\r                    <p><strong>Carrier:</strong> {apiResult.carrier}</p>\r                  )}\r                  {apiResult.suggestions && apiResult.suggestions.length > 0 && (\r                    <div>\r                      <strong>Suggestions:</strong>\r                      <ul>\r                        {apiResult.suggestions.map((s: string, i: number) => (\r                          <li key={i}>{s}</li>\r                        ))}\r                      </ul>\r                    </div>\r                  )}\r                  {apiResult.details && Object.keys(apiResult.details).length > 0 && (\r                    <details>\r                      <summary>Details</summary>\r                      <pre>{JSON.stringify(apiResult.details, null, 2)}</pre>\r                    </details>\r                  )}\r                </div>\r              }\r              type={apiResult.isValid || apiResult.score >= 3 || apiResult.isAvailable ? \"success\" : \"warning\"}\r            />\r          )}\r        </TabPane>\r      </Tabs>\r    </Card>\r  );\r  return (\r    <div style={{ padding: 24, maxWidth: 1400, margin: '0 auto' }}>\r      <Title level={2}>Validation Test Page</Title>\r      <Alert\r        message={isConnected ? \"SignalR Connected\" : \"SignalR Disconnected\"}\r        description={isConnected \r          ? \"Real-time validation is active. Type in the fields to see instant validation.\" \r          : \"SignalR is not connected. Using mock service for real-time validation.\"}\r        type={isConnected ? \"success\" : \"warning\"}\r        showIcon\r        style={{ marginBottom: 24 }}\r      />\r      {error && (\r        <Alert\r          message=\"Validation Error\"\r          description={error}\r          type=\"error\"\r          showIcon\r          closable\r          style={{ marginBottom: 24 }}\r        />\r      )}\r      <Row gutter={[24, 24]}>\r        <Col xs={24} md={12}>\r          {renderValidationCard(\r            \"Email Validation\",\r            emailInput,\r            setEmailInput,\r            emailValidation,\r            apiEmailResult,\r            handleEmailChange,\r            validateEmailViaAPI,\r            isValidatingEmail,\r            apiEmailLoading,\r            \"test@example.com\"\r          )}\r        </Col>\r        <Col xs={24} md={12}>\r          {renderValidationCard(\r            \"Password Strength\",\r            passwordInput,\r            setPasswordInput,\r            passwordStrength,\r            apiPasswordResult,\r            handlePasswordChange,\r            checkPasswordViaAPI,\r            isValidatingPassword,\r            apiPasswordLoading,\r            \"Enter a password\",\r            true\r          )}\r        </Col>\r        <Col xs={24} md={12}>\r          {renderValidationCard(\r            \"Domain Availability\",\r            domainInput,\r            setDomainInput,\r            domainCheck,\r            apiDomainResult,\r            handleDomainChange,\r            checkDomainViaAPI,\r            isValidatingDomain,\r            apiDomainLoading,\r            \"mycompany\",\r            false,\r            \".stocker.app\"\r          )}\r        </Col>\r        <Col xs={24} md={12}>\r          {renderValidationCard(\r            \"Phone Validation\",\r            phoneInput,\r            setPhoneInput,\r            phoneValidation,\r            apiPhoneResult,\r            handlePhoneChange,\r            validatePhoneViaAPI,\r            isValidatingPhone,\r            apiPhoneLoading,\r            \"+90 555 123 4567\"\r          )}\r        </Col>\r        <Col xs={24} md={12}>\r          {renderValidationCard(\r            \"Company Name Validation\",\r            companyInput,\r            setCompanyInput,\r            companyNameCheck,\r            apiCompanyResult,\r            handleCompanyChange,\r            checkCompanyViaAPI,\r            isValidatingCompany,\r            apiCompanyLoading,\r            \"ABC Technology Inc.\"\r          )}\r        </Col>\r        <Col xs={24} md={12}>\r          <Card title=\"TC Kimlik / Vergi No Validation\">\r            <Space direction=\"vertical\" style={{ width: '100%', marginBottom: 16 }}>\r              <Radio.Group \r                value={identityType} \r                onChange={(e) => {\r                  setIdentityType(e.target.value);\r                  setIdentityInput('');\r                  setApiIdentityResult(null);\r                }}\r              >\r                <Radio.Button value=\"tc\">TC Kimlik No</Radio.Button>\r                <Radio.Button value=\"vkn\">Vergi No</Radio.Button>\r              </Radio.Group>\r            </Space>\r            <Tabs defaultActiveKey=\"signalr\">\r              <TabPane\r                tab={\r                  <span>\r                    <WifiOutlined /> SignalR (Real-time)\r                  </span>\r                }\r                key=\"signalr\"\r              >\r                <Form.Item\r                  label={`${identityType === 'tc' ? 'TC Kimlik No' : 'Vergi No'} - SignalR`}\r                  validateStatus={\r                    isValidatingIdentity ? 'validating' :\r                    identityValidation ? (identityValidation.isValid ? 'success' : 'error') : ''\r                  }\r                  hasFeedback={isValidatingIdentity || !!identityValidation}\r                  help={identityValidation?.message}\r                >\r                  <Input\r                    placeholder={identityType === 'tc' ? '11111111110' : '1234567890'}\r                    value={identityInput}\r                    onChange={(e) = aria-label=\"input field\"> {\r                      setIdentityInput(e.target.value);\r                      handleIdentityChange(e.target.value);\r                    }}\r                    maxLength={identityType === 'tc' ? 11 : 10}\r                    prefix={<IdcardOutlined />}\r                    suffix={\r                      isValidatingIdentity ? <Spin indicator={<LoadingOutlined />} /> :\r                      identityValidation ? (\r                        identityValidation.isValid ? \r                        <CheckCircleOutlined style={{ color: '#52c41a' }} /> :\r                        <CloseCircleOutlined style={{ color: '#ff4d4f' }} />\r                      ) : null\r                    }\r                  />\r                </Form.Item>\r                {identityValidation && (\r                  <Alert\r                    message=\"SignalR Result\"\r                    description={\r                      <div>\r                        <p><strong>Type:</strong> {identityValidation.numberType}</p>\r                        <p><strong>Message:</strong> {identityValidation.message}</p>\r                        {identityValidation.details && Object.keys(identityValidation.details).length > 0 && (\r                          <details>\r                            <summary>Details</summary>\r                            <pre>{JSON.stringify(identityValidation.details, null, 2)}</pre>\r                          </details>\r                        )}\r                      </div>\r                    }\r                    type={identityValidation.isValid ? \"success\" : \"warning\"}\r                  />\r                )}\r              </TabPane>\r              <TabPane\r                tab={\r                  <span>\r                    <ApiOutlined /> REST API\r                  </span>\r                }\r                key=\"api\"\r              >\r                <Form.Item\r                  label={`${identityType === 'tc' ? 'TC Kimlik No' : 'Vergi No'} - REST API`}\r                  validateStatus={\r                    apiIdentityLoading ? 'validating' :\r                    apiIdentityResult ? (apiIdentityResult.isValid ? 'success' : 'error') : ''\r                  }\r                  hasFeedback={apiIdentityLoading}\r                >\r                  <Space.Compact style={{ width: '100%' }}>\r                    <Input\r                      placeholder={identityType === 'tc' ? '11111111110' : '1234567890'}\r                      value={identityInput}\r                      onChange={(e) = aria-label=\"input field\"> setIdentityInput(e.target.value)}\r                      maxLength={identityType === 'tc' ? 11 : 10}\r                      prefix={<IdcardOutlined />}\r                    />\r                    <Button\r                      type=\"primary\"\r                      onClick={validateIdentityViaAPI}\r                      loading={apiIdentityLoading}\r                    >\r                      Validate\r                    </Button>\r                  </Space.Compact>\r                </Form.Item>\r                {apiIdentityResult && (\r                  <Alert\r                    message=\"API Result\"\r                    description={\r                      <div>\r                        <p><strong>Type:</strong> {apiIdentityResult.numberType}</p>\r                        <p><strong>Message:</strong> {apiIdentityResult.message}</p>\r                        {apiIdentityResult.formattedNumber && (\r                          <p><strong>Formatted:</strong> {apiIdentityResult.formattedNumber}</p>\r                        )}\r                        {apiIdentityResult.details && Object.keys(apiIdentityResult.details).length > 0 && (\r                          <details>\r                            <summary>Details</summary>\r                            <pre>{JSON.stringify(apiIdentityResult.details, null, 2)}</pre>\r                          </details>\r                        )}\r                      </div>\r                    }\r                    type={apiIdentityResult.isValid ? \"success\" : \"warning\"}\r                  />\r                )}\r              </TabPane>\r            </Tabs>\r          </Card>\r        </Col>\r      </Row>\r      <Divider />\r      <Card title=\"Connection & API Information\" style={{ marginTop: 24 }}>\r        <Row gutter={[24, 24]}>\r          <Col xs={24} md={12}>\r            <Title level={5}>SignalR Status</Title>\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <Space>\r                <Badge status={isConnected ? \"success\" : \"error\"} />\r                <Text strong>Connection: </Text>\r                <Text>{isConnected ? 'Connected' : 'Disconnected'}</Text>\r              </Space>\r              <Space>\r                <Text strong>Validation Hub: </Text>\r                <Text code>http://localhost:5104/hubs/validation</Text>\r              </Space>\r              <Space>\r                <Text strong>Protocol: </Text>\r                <Text>WebSockets / LongPolling</Text>\r              </Space>\r            </Space>\r          </Col>\r          <Col xs={24} md={12}>\r            <Title level={5}>REST API Endpoints</Title>\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <Text code>POST /api/public/validate/email</Text>\r              <Text code>POST /api/public/validate/phone</Text>\r              <Text code>POST /api/public/validate/password-strength</Text>\r              <Text code>POST /api/public/validate/domain</Text>\r              <Text code>POST /api/public/validate/company-name</Text>\r            </Space>\r          </Col>\r        </Row>\r      </Card>\r      <Card title=\"Test Scenarios\" style={{ marginTop: 24 }}>\r        <Title level={5}>Try these test cases:</Title>\r        <Row gutter={[24, 24]}>\r          <Col xs={24} md={8}>\r            <Text strong>Email Tests:</Text>\r            <ul>\r              <li>Valid: test@example.com</li>\r              <li>Typo: test@gmial.com</li>\r              <li>Disposable: test@tempmail.com</li>\r              <li>Invalid: test@</li>\r            </ul>\r          </Col>\r          <Col xs={24} md={8}>\r            <Text strong>Phone Tests (TR):</Text>\r            <ul>\r              <li>Valid: 5551234567</li>\r              <li>With code: 905551234567</li>\r              <li>Invalid: 1234567890</li>\r              <li>Short: 555123</li>\r            </ul>\r          </Col>\r          <Col xs={24} md={8}>\r            <Text strong>Password Tests:</Text>\r            <ul>\r              <li>Weak: 123456</li>\r              <li>Medium: Test123</li>\r              <li>Strong: Test@123456</li>\r              <li>Very Strong: MyP@ssw0rd!2024</li>\r            </ul>\r          </Col>\r        </Row>\r        <Row gutter={[24, 24]} style={{ marginTop: 16 }}>\r          <Col xs={24} md={8}>\r            <Text strong>TC Kimlik No Tests:</Text>\r            <ul>\r              <li>Valid Test: 11111111110</li>\r              <li>Valid Test: 10000000146</li>\r              <li>Invalid: 12345678901</li>\r              <li>Invalid: 00000000000</li>\r            </ul>\r          </Col>\r          <Col xs={24} md={8}>\r            <Text strong>Vergi No Tests:</Text>\r            <ul>\r              <li>Valid Test: 1234567890</li>\r              <li>Invalid: 1111111111</li>\r              <li>Invalid: 0000000000</li>\r              <li>Short: 123456</li>\r            </ul>\r          </Col>\r          <Col xs={24} md={8}>\r            <Text strong>Company Name Tests:</Text>\r            <ul>\r              <li>Available: MyUniqueCompany</li>\r              <li>Similar: Microsoft Tech</li>\r              <li>Premium: DataCloud</li>\r              <li>Short: AB</li>\r            </ul>\r          </Col>\r        </Row>\r      </Card>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/register/pages/SignalRTest/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Tabs,\r  Form,\r  Input,\r  Button,\r  Select,\r  Switch,\r  Row,\r  Col,\r  Upload,\r  message,\r  Alert,\r  Divider,\r  Typography,\r  Space,\r  InputNumber,\r  TimePicker,\r  Radio,\r  Checkbox,\r  Modal,\r  List,\r  Avatar,\r  Badge,\r  Tag,\r  Tooltip,\r  notification,\r} from 'antd';\rimport {\r  SaveOutlined,\r  UploadOutlined,\r  SettingOutlined,\r  BellOutlined,\r  MailOutlined,\r  GlobalOutlined,\r  SafetyOutlined,\r  FileTextOutlined,\r  DollarOutlined,\r  ClockCircleOutlined,\r  UserOutlined,\r  LockOutlined,\r  ApiOutlined,\r  DatabaseOutlined,\r  CloudUploadOutlined,\r  InfoCircleOutlined,\r  CheckCircleOutlined,\r  ExclamationCircleOutlined,\r  KeyOutlined,\r  TeamOutlined,\r  PhoneOutlined,\r  EnvironmentOutlined,\r  BankOutlined,\r  PlusOutlined,\r} from '@ant-design/icons';\rimport { PageHeader } from '@/shared/components/PageHeader';\rimport { formRules } from '@/shared/utils/validators';\rimport dayjs from 'dayjs';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Option } = Select;\rconst { TabPane } = Tabs;\rconst { TextArea } = Input;\rconst { Dragger } = Upload;\rinterface CompanySettings {\r  companyName: string;\r  companyLogo?: string;\r  companyAddress: string;\r  companyPhone: string;\r  companyEmail: string;\r  taxNumber: string;\r  taxOffice: string;\r  website?: string;\r  industry: string;\r}\rinterface GeneralSettings {\r  timezone: string;\r  language: string;\r  currency: string;\r  dateFormat: string;\r  timeFormat: string;\r  weekStartsOn: string;\r  fiscalYearStart: string;\r}\rinterface NotificationSettings {\r  emailNotifications: boolean;\r  smsNotifications: boolean;\r  pushNotifications: boolean;\r  invoiceReminders: boolean;\r  paymentReminders: boolean;\r  systemUpdates: boolean;\r  marketingEmails: boolean;\r  reminderDays: number;\r}\rinterface InvoiceSettings {\r  invoicePrefix: string;\r  invoiceStartNumber: number;\r  invoiceNumberFormat: string;\r  dueDays: number;\r  defaultTaxRate: number;\r  defaultPaymentMethod: string;\r  showLogo: boolean;\r  showQRCode: boolean;\r  footerText: string;\r}\rinterface SecuritySettings {\r  twoFactorAuth: boolean;\r  sessionTimeout: number;\r  passwordExpiry: number;\r  passwordComplexity: string;\r  ipWhitelist: string[];\r  loginAttempts: number;\r  lockoutDuration: number;\r}\rexport const TenantSettings: React.FC = () => {\r  const [activeTab, setActiveTab] = useState('company');\r  const [loading, setLoading] = useState(false);\r  const [saving, setSaving] = useState(false);\r  const [companyForm] = Form.useForm();\r  const [generalForm] = Form.useForm();\r  const [notificationForm] = Form.useForm();\r  const [invoiceForm] = Form.useForm();\r  const [securityForm] = Form.useForm();\r  const [emailForm] = Form.useForm();\r  useEffect(() => {\r    loadSettings();\r  }, []);\r  const loadSettings = async () => {\r    setLoading(true);\r    try {\r      // API'den ayarları yükle\r      // const response = await settingsService.getTenantSettings();\r      // Mock data\r      const mockSettings = {\r        company: {\r          companyName: 'ABC Teknoloji A.Ş.',\r          companyAddress: 'Maslak Mah. Teknoloji Cad. No:15\\nSarıyer/İstanbul',\r          companyPhone: '+90 212 555 0100',\r          companyEmail: 'info@abcteknoloji.com',\r          taxNumber: '1234567890',\r          taxOffice: 'Sarıyer',\r          website: 'www.abcteknoloji.com',\r          industry: 'technology',\r        },\r        general: {\r          timezone: 'Europe/Istanbul',\r          language: 'tr',\r          currency: 'TRY',\r          dateFormat: 'DD.MM.YYYY',\r          timeFormat: '24h',\r          weekStartsOn: 'monday',\r          fiscalYearStart: '01-01',\r        },\r        notifications: {\r          emailNotifications: true,\r          smsNotifications: false,\r          pushNotifications: true,\r          invoiceReminders: true,\r          paymentReminders: true,\r          systemUpdates: true,\r          marketingEmails: false,\r          reminderDays: 3,\r        },\r        invoice: {\r          invoicePrefix: 'INV',\r          invoiceStartNumber: 1000,\r          invoiceNumberFormat: '{prefix}-{year}-{number}',\r          dueDays: 30,\r          defaultTaxRate: 18,\r          defaultPaymentMethod: 'BankTransfer',\r          showLogo: true,\r          showQRCode: true,\r          footerText: 'Teşekkür ederiz.',\r        },\r        security: {\r          twoFactorAuth: false,\r          sessionTimeout: 30,\r          passwordExpiry: 90,\r          passwordComplexity: 'medium',\r          ipWhitelist: [],\r          loginAttempts: 5,\r          lockoutDuration: 30,\r        },\r      };\r      companyForm.setFieldsValue(mockSettings.company);\r      generalForm.setFieldsValue(mockSettings.general);\r      notificationForm.setFieldsValue(mockSettings.notifications);\r      invoiceForm.setFieldsValue(mockSettings.invoice);\r      securityForm.setFieldsValue(mockSettings.security);\r    } catch (error) {\r      message.error('Ayarlar yüklenemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleSaveCompanySettings = async (values: CompanySettings) => {\r    setSaving(true);\r    try {\r      // await settingsService.updateCompanySettings(values);\r      message.success('Şirket bilgileri güncellendi');\r    } catch (error) {\r      message.error('Güncelleme başarısız');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleSaveGeneralSettings = async (values: GeneralSettings) => {\r    setSaving(true);\r    try {\r      // await settingsService.updateGeneralSettings(values);\r      message.success('Genel ayarlar güncellendi');\r    } catch (error) {\r      message.error('Güncelleme başarısız');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleSaveNotificationSettings = async (values: NotificationSettings) => {\r    setSaving(true);\r    try {\r      // await settingsService.updateNotificationSettings(values);\r      message.success('Bildirim ayarları güncellendi');\r    } catch (error) {\r      message.error('Güncelleme başarısız');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleSaveInvoiceSettings = async (values: InvoiceSettings) => {\r    setSaving(true);\r    try {\r      // await settingsService.updateInvoiceSettings(values);\r      message.success('Fatura ayarları güncellendi');\r    } catch (error) {\r      message.error('Güncelleme başarısız');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleSaveSecuritySettings = async (values: SecuritySettings) => {\r    setSaving(true);\r    try {\r      // await settingsService.updateSecuritySettings(values);\r      message.success('Güvenlik ayarları güncellendi');\r    } catch (error) {\r      message.error('Güncelleme başarısız');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handleTestEmailSettings = async () => {\r    const values = emailForm.getFieldsValue();\r    try {\r      // await settingsService.testEmailSettings(values);\r      notification.success({\r        message: 'Test Başarılı',\r        description: 'Test e-postası başarıyla gönderildi.',\r      });\r    } catch (error) {\r      notification.error({\r        message: 'Test Başarısız',\r        description: 'E-posta gönderilemedi. Ayarları kontrol edin.',\r      });\r    }\r  };\r  const uploadProps = {\r    name: 'logo',\r    action: '/api/upload/logo',\r    headers: {\r      authorization: 'authorization-text',\r    },\r    onChange(info: any) {\r      if (info.file.status === 'done') {\r        message.success(`${info.file.name} yüklendi`);\r      } else if (info.file.status === 'error') {\r        message.error(`${info.file.name} yüklenemedi`);\r      }\r    },\r  };\r  return (\r    <div className=\"tenant-settings-page\">\r      <PageHeader\r        title=\"Ayarlar\"\r        subtitle=\"Sistem ve şirket ayarlarını yönetin\"\r        breadcrumbs={[\r          { title: 'Ana Sayfa', path: '/app/tenant' },\r          { title: 'Ayarlar' },\r        ]}\r      />\r      <Card loading={loading}>\r        <Tabs activeKey={activeTab} onChange={setActiveTab}>\r          {/* Şirket Bilgileri */}\r          <TabPane\r            tab={\r              <span>\r                <BankOutlined />\r                Şirket Bilgileri\r              </span>\r            }\r            key=\"company\"\r          >\r            <Form\r              form={companyForm}\r              layout=\"vertical\"\r              onFinish={handleSaveCompanySettings}\r            >\r              <Title level={4}>Şirket Bilgileri</Title>\r              <Paragraph type=\"secondary\">\r                Faturalarda ve raporlarda görünecek şirket bilgilerinizi güncelleyin.\r              </Paragraph>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"companyName\"\r                    label=\"Şirket Adı\"\r                    rules={[formRules.required()]}\r                  >\r                    <Input prefix={<BankOutlined / aria-label=\"input field\">} placeholder=\"Şirket adı\" />\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item name=\"website\" label=\"Web Sitesi\">\r                    <Input prefix={<GlobalOutlined / aria-label=\"input field\">} placeholder=\"www.sirket.com\" />\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"companyEmail\"\r                    label=\"E-posta\"\r                    rules={[formRules.required(), formRules.email()]}\r                  >\r                    <Input prefix={<MailOutlined / aria-label=\"input field\">} placeholder=\"info@sirket.com\" />\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"companyPhone\"\r                    label=\"Telefon\"\r                    rules={[formRules.required()]}\r                  >\r                    <Input prefix={<PhoneOutlined / aria-label=\"input field\">} placeholder=\"+90 XXX XXX XX XX\" />\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item\r                name=\"companyAddress\"\r                label=\"Adres\"\r                rules={[formRules.required()]}\r              >\r                <TextArea\r                  rows={3}\r                  placeholder=\"Şirket adresi\"\r                />\r              </Form.Item>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"taxNumber\"\r                    label=\"Vergi No\"\r                    rules={[formRules.required()]}\r                  >\r                    <Input placeholder=\"Vergi numarası\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"taxOffice\"\r                    label=\"Vergi Dairesi\"\r                    rules={[formRules.required()]}\r                  >\r                    <Input placeholder=\"Vergi dairesi\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item name=\"industry\" label=\"Sektör\">\r                <Select placeholder=\"Sektör seçin\" aria-label=\"select field\">\r                  <Option value=\"technology\">Teknoloji</Option>\r                  <Option value=\"retail\">Perakende</Option>\r                  <Option value=\"manufacturing\">Üretim</Option>\r                  <Option value=\"service\">Hizmet</Option>\r                  <Option value=\"education\">Eğitim</Option>\r                  <Option value=\"healthcare\">Sağlık</Option>\r                  <Option value=\"other\">Diğer</Option>\r                </Select>\r              </Form.Item>\r              <Divider />\r              <Title level={5}>Logo</Title>\r              <Dragger {...uploadProps} style={{ marginBottom: 24 }}>\r                <p className=\"ant-upload-drag-icon\">\r                  <CloudUploadOutlined />\r                </p>\r                <p className=\"ant-upload-text\">\r                  Logo yüklemek için tıklayın veya sürükleyin\r                </p>\r                <p className=\"ant-upload-hint\">\r                  PNG, JPG veya SVG formatında, maksimum 2MB\r                </p>\r              </Dragger>\r              <Form.Item>\r                <Button\r                  type=\"primary\"\r                  htmlType=\"submit\"\r                  loading={saving}\r                  icon={<SaveOutlined />}\r                 aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r              </Form.Item>\r            </Form>\r          </TabPane>\r          {/* Genel Ayarlar */}\r          <TabPane\r            tab={\r              <span>\r                <SettingOutlined />\r                Genel Ayarlar\r              </span>\r            }\r            key=\"general\"\r          >\r            <Form\r              form={generalForm}\r              layout=\"vertical\"\r              onFinish={handleSaveGeneralSettings}\r            >\r              <Title level={4}>Genel Ayarlar</Title>\r              <Paragraph type=\"secondary\">\r                Dil, para birimi ve tarih formatı gibi genel sistem ayarlarını yapılandırın.\r              </Paragraph>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item name=\"language\" label=\"Dil\">\r                    <Select aria-label=\"select field\">\r                      <Option value=\"tr\">Türkçe</Option>\r                      <Option value=\"en\">English</Option>\r                    </Select>\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item name=\"timezone\" label=\"Saat Dilimi\">\r                    <Select showSearch aria-label=\"select field\">\r                      <Option value=\"Europe/Istanbul\">İstanbul (UTC+3)</Option>\r                      <Option value=\"Europe/London\">Londra (UTC+0)</Option>\r                      <Option value=\"America/New_York\">New York (UTC-5)</Option>\r                    </Select>\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item name=\"currency\" label=\"Para Birimi\">\r                    <Select aria-label=\"select field\">\r                      <Option value=\"TRY\">TRY - Türk Lirası (₺)</Option>\r                      <Option value=\"USD\">USD - Amerikan Doları ($)</Option>\r                      <Option value=\"EUR\">EUR - Euro (€)</Option>\r                    </Select>\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item name=\"fiscalYearStart\" label=\"Mali Yıl Başlangıcı\">\r                    <Select aria-label=\"select field\">\r                      <Option value=\"01-01\">1 Ocak</Option>\r                      <Option value=\"04-01\">1 Nisan</Option>\r                      <Option value=\"07-01\">1 Temmuz</Option>\r                      <Option value=\"10-01\">1 Ekim</Option>\r                    </Select>\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item name=\"dateFormat\" label=\"Tarih Formatı\">\r                    <Select aria-label=\"select field\">\r                      <Option value=\"DD.MM.YYYY\">DD.MM.YYYY (31.12.2024)</Option>\r                      <Option value=\"MM/DD/YYYY\">MM/DD/YYYY (12/31/2024)</Option>\r                      <Option value=\"YYYY-MM-DD\">YYYY-MM-DD (2024-12-31)</Option>\r                    </Select>\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item name=\"timeFormat\" label=\"Saat Formatı\">\r                    <Radio.Group>\r                      <Radio value=\"24h\">24 Saat (14:30)</Radio>\r                      <Radio value=\"12h\">12 Saat (2:30 PM)</Radio>\r                    </Radio.Group>\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item name=\"weekStartsOn\" label=\"Hafta Başlangıcı\">\r                <Radio.Group>\r                  <Radio value=\"monday\">Pazartesi</Radio>\r                  <Radio value=\"sunday\">Pazar</Radio>\r                </Radio.Group>\r              </Form.Item>\r              <Form.Item>\r                <Button\r                  type=\"primary\"\r                  htmlType=\"submit\"\r                  loading={saving}\r                  icon={<SaveOutlined />}\r                 aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r              </Form.Item>\r            </Form>\r          </TabPane>\r          {/* Bildirim Ayarları */}\r          <TabPane\r            tab={\r              <span>\r                <BellOutlined />\r                Bildirimler\r              </span>\r            }\r            key=\"notifications\"\r          >\r            <Form\r              form={notificationForm}\r              layout=\"vertical\"\r              onFinish={handleSaveNotificationSettings}\r            >\r              <Title level={4}>Bildirim Ayarları</Title>\r              <Paragraph type=\"secondary\">\r                Hangi bildirimleri almak istediğinizi seçin.\r              </Paragraph>\r              <Title level={5}>Bildirim Kanalları</Title>\r              <Row gutter={24} style={{ marginBottom: 24 }}>\r                <Col span={8}>\r                  <Form.Item name=\"emailNotifications\" valuePropName=\"checked\">\r                    <Switch /> E-posta Bildirimleri\r                  </Form.Item>\r                </Col>\r                <Col span={8}>\r                  <Form.Item name=\"smsNotifications\" valuePropName=\"checked\">\r                    <Switch /> SMS Bildirimleri\r                  </Form.Item>\r                </Col>\r                <Col span={8}>\r                  <Form.Item name=\"pushNotifications\" valuePropName=\"checked\">\r                    <Switch /> Push Bildirimleri\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Divider />\r              <Title level={5}>Bildirim Türleri</Title>\r              <Row gutter={[24, 16]}>\r                <Col span={12}>\r                  <Form.Item name=\"invoiceReminders\" valuePropName=\"checked\">\r                    <Switch /> Fatura Hatırlatmaları\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item name=\"paymentReminders\" valuePropName=\"checked\">\r                    <Switch /> Ödeme Hatırlatmaları\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item name=\"systemUpdates\" valuePropName=\"checked\">\r                    <Switch /> Sistem Güncellemeleri\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item name=\"marketingEmails\" valuePropName=\"checked\">\r                    <Switch /> Pazarlama E-postaları\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Divider />\r              <Form.Item\r                name=\"reminderDays\"\r                label=\"Hatırlatma Süresi (Vade tarihinden kaç gün önce)\"\r              >\r                <InputNumber min={1} max={30} style={{ width: 200 }} / aria-label=\"input field\">\r              </Form.Item>\r              <Form.Item>\r                <Button\r                  type=\"primary\"\r                  htmlType=\"submit\"\r                  loading={saving}\r                  icon={<SaveOutlined />}\r                 aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r              </Form.Item>\r            </Form>\r          </TabPane>\r          {/* Fatura Ayarları */}\r          <TabPane\r            tab={\r              <span>\r                <FileTextOutlined />\r                Fatura\r              </span>\r            }\r            key=\"invoice\"\r          >\r            <Form\r              form={invoiceForm}\r              layout=\"vertical\"\r              onFinish={handleSaveInvoiceSettings}\r            >\r              <Title level={4}>Fatura Ayarları</Title>\r              <Paragraph type=\"secondary\">\r                Fatura numaralandırma ve varsayılan değerleri ayarlayın.\r              </Paragraph>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"invoicePrefix\"\r                    label=\"Fatura Ön Eki\"\r                    rules={[formRules.required()]}\r                  >\r                    <Input placeholder=\"INV\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"invoiceStartNumber\"\r                    label=\"Başlangıç Numarası\"\r                    rules={[formRules.required()]}\r                  >\r                    <InputNumber min={1} style={{ width: '100%' }} / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item\r                name=\"invoiceNumberFormat\"\r                label=\"Numara Formatı\"\r                extra=\"Kullanılabilir: {prefix}, {year}, {month}, {number}\"\r              >\r                <Input placeholder=\"{prefix}-{year}-{number}\" / aria-label=\"input field\">\r              </Form.Item>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"dueDays\"\r                    label=\"Varsayılan Vade (Gün)\"\r                    rules={[formRules.required()]}\r                  >\r                    <InputNumber min={0} max={365} style={{ width: '100%' }} / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"defaultTaxRate\"\r                    label=\"Varsayılan KDV Oranı (%)\"\r                    rules={[formRules.required()]}\r                  >\r                    <Select aria-label=\"select field\">\r                      <Option value={0}>%0</Option>\r                      <Option value={1}>%1</Option>\r                      <Option value={8}>%8</Option>\r                      <Option value={18}>%18</Option>\r                    </Select>\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item name=\"defaultPaymentMethod\" label=\"Varsayılan Ödeme Yöntemi\">\r                <Select aria-label=\"select field\">\r                  <Option value=\"BankTransfer\">Banka Havalesi</Option>\r                  <Option value=\"CreditCard\">Kredi Kartı</Option>\r                  <Option value=\"Cash\">Nakit</Option>\r                  <Option value=\"Check\">Çek</Option>\r                </Select>\r              </Form.Item>\r              <Divider />\r              <Title level={5}>Görünüm Ayarları</Title>\r              <Row gutter={[24, 16]}>\r                <Col span={12}>\r                  <Form.Item name=\"showLogo\" valuePropName=\"checked\">\r                    <Switch /> Logo Göster\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item name=\"showQRCode\" valuePropName=\"checked\">\r                    <Switch /> QR Kod Göster\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item name=\"footerText\" label=\"Fatura Alt Metni\">\r                <TextArea\r                  rows={2}\r                  placeholder=\"Faturanın altında görünecek metin\"\r                />\r              </Form.Item>\r              <Form.Item>\r                <Button\r                  type=\"primary\"\r                  htmlType=\"submit\"\r                  loading={saving}\r                  icon={<SaveOutlined />}\r                 aria-label=\"save outlined\">\r                  Kaydet\r                </Button>\r              </Form.Item>\r            </Form>\r          </TabPane>\r          {/* Güvenlik Ayarları */}\r          <TabPane\r            tab={\r              <span>\r                <SafetyOutlined />\r                Güvenlik\r              </span>\r            }\r            key=\"security\"\r          >\r            <Form\r              form={securityForm}\r              layout=\"vertical\"\r              onFinish={handleSaveSecuritySettings}\r            >\r              <Title level={4}>Güvenlik Ayarları</Title>\r              <Paragraph type=\"secondary\">\r                Hesap güvenliği ve erişim kontrolü ayarlarını yapılandırın.\r              </Paragraph>\r              <Alert\r                message=\"Güvenlik Uyarısı\"\r                description=\"Bu ayarlar tüm kullanıcıları etkileyecektir. Dikkatli bir şekilde yapılandırın.\"\r                type=\"warning\"\r                showIcon\r                style={{ marginBottom: 24 }}\r              />\r              <Title level={5}>Kimlik Doğrulama</Title>\r              <Form.Item name=\"twoFactorAuth\" valuePropName=\"checked\">\r                <Switch /> İki Faktörlü Kimlik Doğrulama\r              </Form.Item>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"sessionTimeout\"\r                    label=\"Oturum Zaman Aşımı (Dakika)\"\r                  >\r                    <InputNumber min={5} max={480} style={{ width: '100%' }} / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"passwordExpiry\"\r                    label=\"Şifre Geçerlilik Süresi (Gün)\"\r                  >\r                    <InputNumber min={0} max={365} style={{ width: '100%' }} / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item name=\"passwordComplexity\" label=\"Şifre Karmaşıklığı\">\r                <Radio.Group>\r                  <Radio value=\"low\">Düşük (En az 6 karakter)</Radio>\r                  <Radio value=\"medium\">Orta (8 karakter, büyük/küçük harf)</Radio>\r                  <Radio value=\"high\">Yüksek (8 karakter, özel karakter)</Radio>\r                </Radio.Group>\r              </Form.Item>\r              <Divider />\r              <Title level={5}>Erişim Kontrolü</Title>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"loginAttempts\"\r                    label=\"Maksimum Giriş Denemesi\"\r                  >\r                    <InputNumber min={3} max={10} style={{ width: '100%' }} / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"lockoutDuration\"\r                    label=\"Hesap Kilitleme Süresi (Dakika)\"\r                  >\r                    <InputNumber min={5} max={1440} style={{ width: '100%' }} / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item\r                name=\"ipWhitelist\"\r                label=\"IP Beyaz Listesi\"\r                extra=\"Her satıra bir IP adresi girin. Boş bırakılırsa tüm IP'ler kabul edilir.\"\r              >\r                <TextArea\r                  rows={4}\r                  placeholder=\"192.168.1.1&#10;10.0.0.0/24\"\r                />\r              </Form.Item>\r              <Form.Item>\r                <Space>\r                  <Button\r                    type=\"primary\"\r                    htmlType=\"submit\"\r                    loading={saving}\r                    icon={<SaveOutlined />}\r                   aria-label=\"save outlined\">\r                    Kaydet\r                  </Button>\r                  <Button icon={<KeyOutlined />} aria-label=\"key outlined\">\r                    Tüm Oturumları Sonlandır\r                  </Button>\r                </Space>\r              </Form.Item>\r            </Form>\r          </TabPane>\r          {/* E-posta Ayarları */}\r          <TabPane\r            tab={\r              <span>\r                <MailOutlined />\r                E-posta\r              </span>\r            }\r            key=\"email\"\r          >\r            <Form\r              form={emailForm}\r              layout=\"vertical\"\r              onFinish={(values) => {\r                message.success('E-posta ayarları güncellendi');\r              }}\r            >\r              <Title level={4}>E-posta Ayarları</Title>\r              <Paragraph type=\"secondary\">\r                Sistem e-postalarının gönderimi için SMTP ayarlarını yapılandırın.\r              </Paragraph>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"smtpHost\"\r                    label=\"SMTP Sunucu\"\r                    rules={[formRules.required()]}\r                  >\r                    <Input placeholder=\"smtp.gmail.com\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"smtpPort\"\r                    label=\"Port\"\r                    rules={[formRules.required()]}\r                  >\r                    <Select aria-label=\"select field\">\r                      <Option value={25}>25 (Varsayılan)</Option>\r                      <Option value={465}>465 (SSL)</Option>\r                      <Option value={587}>587 (TLS)</Option>\r                      <Option value={2525}>2525 (Alternatif)</Option>\r                    </Select>\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"smtpUser\"\r                    label=\"Kullanıcı Adı\"\r                    rules={[formRules.required()]}\r                  >\r                    <Input placeholder=\"email@domain.com\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"smtpPassword\"\r                    label=\"Şifre\"\r                    rules={[formRules.required()]}\r                  >\r                    <Input.Password placeholder=\"SMTP şifresi\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item name=\"smtpSecure\" valuePropName=\"checked\">\r                <Switch /> SSL/TLS Kullan\r              </Form.Item>\r              <Divider />\r              <Title level={5}>Gönderen Bilgileri</Title>\r              <Row gutter={24}>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"fromEmail\"\r                    label=\"Gönderen E-posta\"\r                    rules={[formRules.required(), formRules.email()]}\r                  >\r                    <Input placeholder=\"noreply@domain.com\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col xs={24} md={12}>\r                  <Form.Item\r                    name=\"fromName\"\r                    label=\"Gönderen Adı\"\r                    rules={[formRules.required()]}\r                  >\r                    <Input placeholder=\"Stocker Sistem\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item>\r                <Space>\r                  <Button\r                    type=\"primary\"\r                    htmlType=\"submit\"\r                    loading={saving}\r                    icon={<SaveOutlined />}\r                   aria-label=\"save outlined\">\r                    Kaydet\r                  </Button>\r                  <Button onClick={handleTestEmailSettings} icon={<MailOutlined />} aria-label=\"mail outlined\">\r                    Test E-postası Gönder\r                  </Button>\r                </Space>\r              </Form.Item>\r            </Form>\r          </TabPane>\r          {/* API Ayarları */}\r          <TabPane\r            tab={\r              <span>\r                <ApiOutlined />\r                API\r              </span>\r            }\r            key=\"api\"\r          >\r            <Title level={4}>API Ayarları</Title>\r            <Paragraph type=\"secondary\">\r              API anahtarlarını ve webhook ayarlarını yönetin.\r            </Paragraph>\r            <Alert\r              message=\"API Anahtarı\"\r              description=\"API anahtarınız sistem tarafından otomatik oluşturulur ve güvenli bir şekilde saklanır.\"\r              type=\"info\"\r              showIcon\r              style={{ marginBottom: 24 }}\r            />\r            <Card title=\"API Anahtarları\" style={{ marginBottom: 24 }}>\r              <List\r                dataSource={[\r                  {\r                    id: '1',\r                    name: 'Production API Key',\r                    key: 'sk_live_***************',\r                    created: '2024-01-01',\r                    lastUsed: '2024-01-15',\r                  },\r                  {\r                    id: '2',\r                    name: 'Test API Key',\r                    key: 'sk_test_***************',\r                    created: '2024-01-01',\r                    lastUsed: '2024-01-14',\r                  },\r                ]}\r                renderItem={(item) => (\r                  <List.Item\r                    actions={[\r                      <Button type=\"link\" danger size=\"small\">\r                        İptal Et\r                      </Button>,\r                    ]}\r                  >\r                    <List.Item.Meta\r                      title={item.name}\r                      description={\r                        <Space>\r                          <Text code>{item.key}</Text>\r                          <Text type=\"secondary\">\r                            Son kullanım: {item.lastUsed}\r                          </Text>\r                        </Space>\r                      }\r                    />\r                  </List.Item>\r                )}\r              />\r              <Button type=\"dashed\" icon={<PlusOutlined />} block aria-label=\"plus outlined\">\r                Yeni API Anahtarı Oluştur\r              </Button>\r            </Card>\r            <Card title=\"Webhook Ayarları\">\r              <Form layout=\"vertical\">\r                <Form.Item\r                  label=\"Webhook URL\"\r                  extra=\"Sistem olayları bu adrese POST isteği olarak gönderilir\"\r                >\r                  <Input placeholder=\"https://your-domain.com/webhook\" / aria-label=\"input field\">\r                </Form.Item>\r                <Form.Item label=\"Webhook Olayları\">\r                  <Checkbox.Group>\r                    <Row>\r                      <Col span={12}>\r                        <Checkbox value=\"invoice.created\">Fatura Oluşturuldu</Checkbox>\r                      </Col>\r                      <Col span={12}>\r                        <Checkbox value=\"invoice.paid\">Fatura Ödendi</Checkbox>\r                      </Col>\r                      <Col span={12}>\r                        <Checkbox value=\"user.created\">Kullanıcı Oluşturuldu</Checkbox>\r                      </Col>\r                      <Col span={12}>\r                        <Checkbox value=\"user.deleted\">Kullanıcı Silindi</Checkbox>\r                      </Col>\r                    </Row>\r                  </Checkbox.Group>\r                </Form.Item>\r                <Form.Item>\r                  <Button type=\"primary\" icon={<SaveOutlined />} aria-label=\"save outlined\">\r                    Webhook Ayarlarını Kaydet\r                  </Button>\r                </Form.Item>\r              </Form>\r            </Card>\r          </TabPane>\r        </Tabs>\r      </Card>\r    </div>\r  );\r};\rexport default TenantSettings;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/settings/pages/TenantSettings/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect, useRef } from 'react';\rimport {\r  Badge,\r  Button,\r  Input,\r  Avatar,\r  Space,\r  Typography,\r  Tooltip,\r  Card,\r  List,\r  Upload,\r  message as antMessage,\r  Popover,\r  Rate,\r  Tag\r} from 'antd';\rimport {\r  MessageOutlined,\r  SendOutlined,\r  CloseOutlined,\r  SmileOutlined,\r  PaperClipOutlined,\r  CustomerServiceOutlined,\r  MinusOutlined,\r  SoundOutlined,\r  VideoCameraOutlined,\r  PhoneOutlined,\r  MoreOutlined,\r  CheckCircleOutlined,\r  ClockCircleOutlined\r} from '@ant-design/icons';\rimport { motion, AnimatePresence } from 'framer-motion';\rimport EmojiPicker, { EmojiClickData } from 'emoji-picker-react';\rimport './style.css';\rconst { Text, Title } = Typography;\rconst { TextArea } = Input;\rinterface Message {\r  id: string;\r  type: 'user' | 'agent' | 'system';\r  content: string;\r  timestamp: Date;\r  status?: 'sending' | 'sent' | 'delivered' | 'read';\r  attachments?: string[];\r  agentInfo?: {\r    name: string;\r    avatar?: string;\r    title?: string;\r  };\r}\rinterface LiveChatProps {\r  position?: 'bottom-right' | 'bottom-left';\r  primaryColor?: string;\r  onClose?: () => void;\r  userId?: string;\r  metadata?: Record<string, any>;\r}\rexport const LiveChat: React.FC<LiveChatProps> = ({\r  position = 'bottom-right',\r  primaryColor = '#667eea',\r  onClose,\r  userId,\r  metadata\r}) => {\r  const [isOpen, setIsOpen] = useState(false);\r  const [isMinimized, setIsMinimized] = useState(false);\r  const [messages, setMessages] = useState<Message[]>([]);\r  const [inputMessage, setInputMessage] = useState('');\r  const [isTyping, setIsTyping] = useState(false);\r  const [showEmoji, setShowEmoji] = useState(false);\r  const [isConnected, setIsConnected] = useState(false);\r  const [isConnecting, setIsConnecting] = useState(false);\r  const [unreadCount, setUnreadCount] = useState(0);\r  const [agentTyping, setAgentTyping] = useState(false);\r  const [satisfaction, setSatisfaction] = useState<number | null>(null);\r  const messagesEndRef = useRef<HTMLDivElement>(null);\r  const inputRef = useRef<HTMLTextAreaElement>(null);\r  const fileInputRef = useRef<HTMLInputElement>(null);\r  // Auto scroll to bottom\r  const scrollToBottom = () => {\r    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r  };\r  useEffect(() => {\r    scrollToBottom();\r  }, [messages]);\r  // Initialize chat\r  useEffect(() => {\r    if (isOpen && !isConnected && !isConnecting) {\r      connectToAgent();\r    }\r  }, [isOpen]);\r  // Simulate connection to agent\r  const connectToAgent = async () => {\r    setIsConnecting(true);\r    // Add system message\r    addMessage({\r      type: 'system',\r      content: 'Destek ekibine bağlanıyorsunuz...'\r    });\r    // Simulate connection delay\r    setTimeout(() => {\r      setIsConnected(true);\r      setIsConnecting(false);\r      // Add agent joined message\r      addMessage({\r        type: 'agent',\r        content: 'Merhaba! Ben Ayşe, müşteri temsilcinizim. Size nasıl yardımcı olabilirim?',\r        agentInfo: {\r          name: 'Ayşe Y.',\r          title: 'Müşteri Temsilcisi',\r          avatar: 'https://i.pravatar.cc/150?img=1'\r        }\r      });\r    }, 2000);\r  };\r  const addMessage = (messageData: Partial<Message>) => {\r    const newMessage: Message = {\r      id: Date.now().toString(),\r      timestamp: new Date(),\r      status: 'sent',\r      ...messageData\r    } as Message;\r    setMessages(prev => [...prev, newMessage]);\r    // Update unread count if chat is minimized\r    if (isMinimized && messageData.type === 'agent') {\r      setUnreadCount(prev => prev + 1);\r    }\r  };\r  const handleSendMessage = () => {\r    if (!inputMessage.trim()) return;\r    // Add user message\r    addMessage({\r      type: 'user',\r      content: inputMessage,\r      status: 'sending'\r    });\r    setInputMessage('');\r    // Simulate agent typing\r    setTimeout(() => {\r      setAgentTyping(true);\r    }, 1000);\r    // Simulate agent response\r    setTimeout(() => {\r      setAgentTyping(false);\r      addMessage({\r        type: 'agent',\r        content: getAutoResponse(inputMessage),\r        agentInfo: {\r          name: 'Ayşe Y.',\r          title: 'Müşteri Temsilcisi',\r          avatar: 'https://i.pravatar.cc/150?img=1'\r        }\r      });\r    }, 3000);\r  };\r  const getAutoResponse = (message: string): string => {\r    const lowerMessage = message.toLowerCase();\r    if (lowerMessage.includes('fiyat') || lowerMessage.includes('ücret')) {\r      return 'Fiyatlandırma hakkında detaylı bilgi için https://stocker.app/pricing sayfamızı ziyaret edebilirsiniz. Özel teklifler için satış ekibimizle iletişime geçebilirsiniz.';\r    }\r    if (lowerMessage.includes('demo')) {\r      return 'Demo talebi için https://stocker.app/demo linkinden form doldurabilirsiniz. Satış ekibimiz en kısa sürede sizinle iletişime geçecektir.';\r    }\r    if (lowerMessage.includes('destek') || lowerMessage.includes('yardım')) {\r      return 'Size yardımcı olmaktan mutluluk duyarım! Lütfen yaşadığınız sorunu detaylı bir şekilde açıklayın.';\r    }\r    return 'Mesajınız için teşekkürler. Size en iyi şekilde yardımcı olabilmem için biraz daha detay verebilir misiniz?';\r  };\r  const handleEmojiClick = (emojiData: EmojiClickData) => {\r    setInputMessage(prev => prev + emojiData.emoji);\r    setShowEmoji(false);\r    inputRef.current?.focus();\r  };\r  const handleFileUpload = (file: File) => {\r    // Simulate file upload\r    antMessage.success(`${file.name} yüklendi`);\r    addMessage({\r      type: 'user',\r      content: `Dosya gönderildi: ${file.name}`,\r      attachments: [file.name]\r    });\r    return false; // Prevent default upload\r  };\r  const toggleChat = () => {\r    setIsOpen(!isOpen);\r    if (!isOpen) {\r      setIsMinimized(false);\r      setUnreadCount(0);\r    }\r  };\r  const handleMinimize = () => {\r    setIsMinimized(!isMinimized);\r    if (!isMinimized) {\r      setUnreadCount(0);\r    }\r  };\r  const handleClose = () => {\r    setIsOpen(false);\r    if (onClose) {\r      onClose();\r    }\r  };\r  const renderMessage = (message: Message) => {\r    const isUser = message.type === 'user';\r    const isSystem = message.type === 'system';\r    if (isSystem) {\r      return (\r        <div key={message.id} className=\"chat-message-system\">\r          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r            {message.content}\r          </Text>\r        </div>\r      );\r    }\r    return (\r      <motion.div\r        key={message.id}\r        className={`chat-message ${isUser ? 'chat-message-user' : 'chat-message-agent'}`}\r        initial={{ opacity: 0, y: 10 }}\r        animate={{ opacity: 1, y: 0 }}\r        transition={{ duration: 0.3 }}\r      >\r        {!isUser && message.agentInfo && (\r          <Avatar\r            src={message.agentInfo.avatar}\r            style={{ marginRight: 8 }}\r          >\r            {message.agentInfo.name[0]}\r          </Avatar>\r        )}\r        <div className=\"chat-message-content\">\r          {!isUser && message.agentInfo && (\r            <div className=\"chat-message-header\">\r              <Text strong>{message.agentInfo.name}</Text>\r              <Text type=\"secondary\" style={{ fontSize: 11, marginLeft: 8 }}>\r                {message.agentInfo.title}\r              </Text>\r            </div>\r          )}\r          <div className={`chat-message-bubble ${isUser ? 'user-bubble' : 'agent-bubble'}`}>\r            <Text>{message.content}</Text>\r            {message.attachments && (\r              <div className=\"chat-message-attachments\">\r                {message.attachments.map((file, index) => (\r                  <Tag key={index} icon={<PaperClipOutlined />}>\r                    {file}\r                  </Tag>\r                ))}\r              </div>\r            )}\r          </div>\r          <div className=\"chat-message-meta\">\r            <Text type=\"secondary\" style={{ fontSize: 11 }}>\r              {new Date(message.timestamp).toLocaleTimeString('tr-TR', {\r                hour: '2-digit',\r                minute: '2-digit'\r              })}\r            </Text>\r            {isUser && message.status && (\r              <span className=\"chat-message-status\">\r                {message.status === 'sending' && <ClockCircleOutlined />}\r                {message.status === 'sent' && <CheckCircleOutlined />}\r                {message.status === 'delivered' && (\r                  <span style={{ color: primaryColor }}>\r                    <CheckCircleOutlined />\r                    <CheckCircleOutlined style={{ marginLeft: -8 }} />\r                  </span>\r                )}\r                {message.status === 'read' && (\r                  <span style={{ color: primaryColor }}>\r                    <CheckCircleOutlined />\r                    <CheckCircleOutlined style={{ marginLeft: -8 }} />\r                  </span>\r                )}\r              </span>\r            )}\r          </div>\r        </div>\r      </motion.div>\r    );\r  };\r  return (\r    <>\r      {/* Chat Button */}\r      <AnimatePresence>\r        {!isOpen && (\r          <motion.div\r            className={`live-chat-button live-chat-${position}`}\r            initial={{ scale: 0 }}\r            animate={{ scale: 1 }}\r            exit={{ scale: 0 }}\r            whileHover={{ scale: 1.1 }}\r            whileTap={{ scale: 0.9 }}\r            onClick={toggleChat}\r            style={{ background: primaryColor }}\r          >\r            <Badge count={unreadCount} offset={[-5, 5]}>\r              <MessageOutlined style={{ fontSize: 24, color: 'white' }} />\r            </Badge>\r          </motion.div>\r        )}\r      </AnimatePresence>\r      {/* Chat Window */}\r      <AnimatePresence>\r        {isOpen && (\r          <motion.div\r            className={`live-chat-window live-chat-${position} ${isMinimized ? 'minimized' : ''}`}\r            initial={{ opacity: 0, y: 20, scale: 0.9 }}\r            animate={{ opacity: 1, y: 0, scale: 1 }}\r            exit={{ opacity: 0, y: 20, scale: 0.9 }}\r            transition={{ duration: 0.3 }}\r          >\r            {/* Header */}\r            <div \r              className=\"chat-header\"\r              style={{ background: `linear-gradient(135deg, ${primaryColor} 0%, ${primaryColor}dd 100%)` }}\r            >\r              <div className=\"chat-header-info\">\r                <Space>\r                  <Badge status={isConnected ? 'success' : 'processing'} />\r                  <div>\r                    <Text strong style={{ color: 'white', display: 'block' }}>\r                      Canlı Destek\r                    </Text>\r                    <Text style={{ color: 'rgba(255, 255, 255, 0.8)', fontSize: 11 }}>\r                      {isConnected ? 'Çevrimiçi' : 'Bağlanıyor...'}\r                    </Text>\r                  </div>\r                </Space>\r              </div>\r              <Space>\r                <Tooltip title=\"Küçült\">\r                  <Button\r                    type=\"text\"\r                    icon={<MinusOutlined />}\r                    onClick={handleMinimize}\r                    style={{ color: 'white' }}\r                  / aria-label=\"minus outlined\">\r                </Tooltip>\r                <Tooltip title=\"Kapat\">\r                  <Button\r                    type=\"text\"\r                    icon={<CloseOutlined />}\r                    onClick={handleClose}\r                    style={{ color: 'white' }}\r                  / aria-label=\"close outlined\">\r                </Tooltip>\r              </Space>\r            </div>\r            {/* Messages */}\r            {!isMinimized && (\r              <>\r                <div className=\"chat-messages\">\r                  {messages.map(renderMessage)}\r                  {agentTyping && (\r                    <div className=\"chat-typing\">\r                      <Avatar size=\"small\" src=\"https://i.pravatar.cc/150?img=1\">\r                        A\r                      </Avatar>\r                      <div className=\"typing-indicator\">\r                        <span></span>\r                        <span></span>\r                        <span></span>\r                      </div>\r                    </div>\r                  )}\r                  <div ref={messagesEndRef} />\r                </div>\r                {/* Input */}\r                <div className=\"chat-input\">\r                  {showEmoji && (\r                    <div className=\"emoji-picker-wrapper\">\r                      <EmojiPicker onEmojiClick={handleEmojiClick} />\r                    </div>\r                  )}\r                  <div className=\"chat-input-actions\">\r                    <Space>\r                      <Tooltip title=\"Emoji\">\r                        <Button\r                          type=\"text\"\r                          icon={<SmileOutlined />}\r                          onClick={() = aria-label=\"smile outlined\"> setShowEmoji(!showEmoji)}\r                        />\r                      </Tooltip>\r                      <Upload\r                        beforeUpload={handleFileUpload}\r                        showUploadList={false}\r                      >\r                        <Tooltip title=\"Dosya Ekle\">\r                          <Button\r                            type=\"text\"\r                            icon={<PaperClipOutlined />}\r                          / aria-label=\"paper clip outlined\">\r                        </Tooltip>\r                      </Upload>\r                    </Space>\r                  </div>\r                  <TextArea\r                    ref={inputRef}\r                    value={inputMessage}\r                    onChange={(e) => setInputMessage(e.target.value)}\r                    onPressEnter={(e) => {\r                      if (!e.shiftKey) {\r                        e.preventDefault();\r                        handleSendMessage();\r                      }\r                    }}\r                    placeholder=\"Mesajınızı yazın...\"\r                    autoSize={{ minRows: 1, maxRows: 4 }}\r                    disabled={!isConnected}\r                  />\r                  <Button\r                    type=\"primary\"\r                    icon={<SendOutlined />}\r                    onClick={handleSendMessage}\r                    disabled={!inputMessage.trim() || !isConnected}\r                    style={{ background: primaryColor }}\r                  / aria-label=\"send outlined\">\r                </div>\r              </>\r            )}\r          </motion.div>\r        )}\r      </AnimatePresence>\r    </>\r  );\r};\r// Quick Actions Floating Button\rexport const QuickActions: React.FC = () => {\r  const [visible, setVisible] = useState(false);\r  const actions = [\r    { icon: <MessageOutlined />, label: 'Canlı Destek', onClick: () => {} },\r    { icon: <PhoneOutlined />, label: 'Bizi Arayın', onClick: () => {} },\r    { icon: <MailOutlined />, label: 'E-posta Gönder', onClick: () => {} },\r    { icon: <VideoCameraOutlined />, label: 'Video Görüşme', onClick: () => {} }\r  ];\r  return (\r    <Popover\r      content={\r        <List\r          dataSource={actions}\r          renderItem={(item) => (\r            <List.Item onClick={item.onClick} style={{ cursor: 'pointer' }}>\r              <Space>\r                {item.icon}\r                <Text>{item.label}</Text>\r              </Space>\r            </List.Item>\r          )}\r        />\r      }\r      trigger=\"click\"\r      open={visible}\r      onOpenChange={setVisible}\r      placement=\"topRight\"\r    >\r      <motion.div\r        className=\"quick-actions-button\"\r        whileHover={{ scale: 1.1 }}\r        whileTap={{ scale: 0.9 }}\r      >\r        <CustomerServiceOutlined style={{ fontSize: 24 }} />\r      </motion.div>\r    </Popover>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/support/components/LiveChat/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Row,\r  Col,\r  Statistic,\r  Space,\r  Typography,\r  Button,\r  Progress,\r  Tag,\r  Alert,\r  Divider,\r  Timeline,\r  List,\r  Avatar,\r  Badge,\r  Tooltip,\r  Spin,\r  message\r} from 'antd';\rimport {\r  UserOutlined,\r  TeamOutlined,\r  ShopOutlined,\r  AppstoreOutlined,\r  DatabaseOutlined,\r  CloudServerOutlined,\r  BarChartOutlined,\r  RiseOutlined,\r  FallOutlined,\r  CheckCircleOutlined,\r  ClockCircleOutlined,\r  WarningOutlined,\r  InfoCircleOutlined,\r  RocketOutlined,\r  SettingOutlined,\r  BellOutlined,\r  DollarOutlined,\r  CalendarOutlined,\r  FileTextOutlined,\r  ApiOutlined,\r  SafetyOutlined,\r  SyncOutlined\r} from '@ant-design/icons';\rimport { useParams, useNavigate } from 'react-router-dom';\rimport { apiClient } from '@/shared/api/client';\rimport SetupWizard from '@/features/tenant/setup/components/SetupWizard';\rimport SetupChecklist from '@/features/tenant/setup/components/SetupChecklist';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rinterface DashboardMetrics {\r  users: {\r    total: number;\r    active: number;\r    inactive: number;\r    growth: number;\r  };\r  storage: {\r    used: number;\r    total: number;\r    percentage: number;\r  };\r  billing: {\r    currentPlan: string;\r    monthlyRevenue: number;\r    nextBillingDate: string;\r    paymentStatus: string;\r  };\r  activity: {\r    dailyActiveUsers: number;\r    weeklyActiveUsers: number;\r    monthlyActiveUsers: number;\r    lastActivity: string;\r  };\r  modules: {\r    total: number;\r    active: number;\r    names: string[];\r  };\r  health: {\r    status: 'healthy' | 'warning' | 'critical';\r    uptime: number;\r    lastIncident: string | null;\r    apiLatency: number;\r  };\r}\rinterface RecentActivity {\r  id: string;\r  type: 'user' | 'system' | 'billing' | 'security';\r  title: string;\r  description: string;\r  timestamp: string;\r  icon: React.ReactNode;\r  color: string;\r}\rconst TenantDashboard: React.FC = () => {\r  const { tenantId } = useParams<{ tenantId: string }>();\r  const navigate = useNavigate();\r  const [loading, setLoading] = useState(true);\r  const [refreshing, setRefreshing] = useState(false);\r  const [metrics, setMetrics] = useState<DashboardMetrics | null>(null);\r  const [recentActivities, setRecentActivities] = useState<RecentActivity[]>([]);\r  const [setupProgress, setSetupProgress] = useState<any>(null);\r  const [showSetupWizard, setShowSetupWizard] = useState(false);\r  useEffect(() => {\r    if (tenantId) {\r      fetchDashboardData();\r    }\r  }, [tenantId]);\r  const fetchDashboardData = async () => {\r    try {\r      setLoading(true);\r      // Fetch multiple endpoints in parallel\r      const [metricsRes, setupRes, activitiesRes] = await Promise.all([\r        apiClient.get(`/api/master/tenants/${tenantId}/statistics`),\r        apiClient.get(`/api/master/tenants/${tenantId}/setup-checklist`),\r        apiClient.get(`/api/master/tenants/${tenantId}/activities?limit=5`)\r      ]);\r      if (metricsRes.data?.success) {\r        setMetrics(metricsRes.data.data);\r      }\r      if (setupRes.data?.success) {\r        setSetupProgress(setupRes.data.data);\r      }\r      if (activitiesRes.data?.success) {\r        setRecentActivities(activitiesRes.data.data);\r      }\r    } catch (error) {\r      message.error('Dashboard verileri yüklenemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleRefresh = async () => {\r    setRefreshing(true);\r    await fetchDashboardData();\r    setRefreshing(false);\r    message.success('Dashboard güncellendi');\r  };\r  const getHealthStatusColor = (status: string) => {\r    switch (status) {\r      case 'healthy': return '#52c41a';\r      case 'warning': return '#faad14';\r      case 'critical': return '#f5222d';\r      default: return '#d9d9d9';\r    }\r  };\r  const getPaymentStatusTag = (status: string) => {\r    switch (status) {\r      case 'paid': return <Tag color=\"success\">Ödendi</Tag>;\r      case 'pending': return <Tag color=\"warning\">Bekliyor</Tag>;\r      case 'overdue': return <Tag color=\"error\">Gecikmiş</Tag>;\r      default: return <Tag>{status}</Tag>;\r    }\r  };\r  const quickActions = [\r    {\r      title: 'Kullanıcı Davet Et',\r      icon: <UserOutlined />,\r      color: '#1890ff',\r      onClick: () => navigate(`/tenant/${tenantId}/users/invite`)\r    },\r    {\r      title: 'Modül Ekle',\r      icon: <AppstoreOutlined />,\r      color: '#52c41a',\r      onClick: () => navigate(`/tenant/${tenantId}/modules`)\r    },\r    {\r      title: 'Fatura Detayları',\r      icon: <DollarOutlined />,\r      color: '#faad14',\r      onClick: () => navigate(`/tenant/${tenantId}/billing`)\r    },\r    {\r      title: 'Sistem Ayarları',\r      icon: <SettingOutlined />,\r      color: '#722ed1',\r      onClick: () => navigate(`/tenant/${tenantId}/settings`)\r    }\r  ];\r  if (loading) {\r    return (\r      <div className=\"dashboard-loading\">\r        <Spin size=\"large\" tip=\"Dashboard yükleniyor...\" />\r      </div>\r    );\r  }\r  return (\r    <div className=\"tenant-dashboard-container\">\r      {/* Header Section */}\r      <div className=\"dashboard-header\">\r        <Row align=\"middle\" justify=\"space-between\">\r          <Col>\r            <Space direction=\"vertical\" size={0}>\r              <Title level={2} style={{ margin: 0 }}>\r                <BarChartOutlined /> Tenant Dashboard\r              </Title>\r              <Text type=\"secondary\">\r                Tenant ID: {tenantId}\r              </Text>\r            </Space>\r          </Col>\r          <Col>\r            <Space>\r              <Button\r                icon={<SyncOutlined spin={refreshing} / aria-label=\"sync outlined\">}\r                onClick={handleRefresh}\r                disabled={refreshing}\r              >\r                Yenile\r              </Button>\r              <Button\r                type=\"primary\"\r                icon={<RocketOutlined />}\r                onClick={() = aria-label=\"rocket outlined\"> setShowSetupWizard(true)}\r              >\r                Kurulum Sihirbazı\r              </Button>\r            </Space>\r          </Col>\r        </Row>\r      </div>\r      {/* Setup Progress Alert */}\r      {setupProgress && !setupProgress.canGoLive && (\r        <Alert\r          message=\"Kurulum Tamamlanmamış\"\r          description={`Sistemin canlıya geçmesi için ${setupProgress.requiredItems - setupProgress.requiredCompletedItems} zorunlu adım tamamlanmalı.`}\r          type=\"warning\"\r          showIcon\r          icon={<WarningOutlined />}\r          action={\r            <Button size=\"small\" type=\"primary\" onClick={() => setShowSetupWizard(true)}>\r              Kurulumu Tamamla\r            </Button>\r          }\r          style={{ marginBottom: 24 }}\r        />\r      )}\r      {/* Key Metrics */}\r      <Row gutter={[16, 16]} className=\"metrics-row\">\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"metric-card\">\r            <Statistic\r              title=\"Toplam Kullanıcı\"\r              value={metrics?.users.total || 0}\r              prefix={<TeamOutlined />}\r              suffix={\r                <span className={metrics?.users.growth >= 0 ? 'growth-positive' : 'growth-negative'}>\r                  {metrics?.users.growth >= 0 ? <RiseOutlined /> : <FallOutlined />}\r                  {Math.abs(metrics?.users.growth || 0)}%\r                </span>\r              }\r            />\r            <Progress\r              percent={(metrics?.users.active / metrics?.users.total) * 100 || 0}\r              strokeColor=\"#52c41a\"\r              showInfo={false}\r              size=\"small\"\r              style={{ marginTop: 8 }}\r            />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {metrics?.users.active} aktif kullanıcı\r            </Text>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"metric-card\">\r            <Statistic\r              title=\"Depolama Kullanımı\"\r              value={metrics?.storage.percentage || 0}\r              suffix=\"%\"\r              prefix={<DatabaseOutlined />}\r            />\r            <Progress\r              percent={metrics?.storage.percentage || 0}\r              strokeColor={metrics?.storage.percentage > 80 ? '#ff4d4f' : '#1890ff'}\r              size=\"small\"\r              style={{ marginTop: 8 }}\r            />\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {metrics?.storage.used}GB / {metrics?.storage.total}GB\r            </Text>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"metric-card\">\r            <Statistic\r              title=\"Aylık Gelir\"\r              value={metrics?.billing.monthlyRevenue || 0}\r              prefix=\"₺\"\r              precision={2}\r              valueStyle={{ color: '#52c41a' }}\r            />\r            <div style={{ marginTop: 8 }}>\r              <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                Plan: {metrics?.billing.currentPlan}\r              </Text>\r              <br />\r              {getPaymentStatusTag(metrics?.billing.paymentStatus || '')}\r            </div>\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} lg={6}>\r          <Card className=\"metric-card\">\r            <Statistic\r              title=\"Sistem Durumu\"\r              value={metrics?.health.uptime || 0}\r              suffix=\"%\"\r              valueStyle={{ color: getHealthStatusColor(metrics?.health.status || '') }}\r            />\r            <div style={{ marginTop: 8 }}>\r              <Badge\r                status={metrics?.health.status === 'healthy' ? 'success' : 'error'}\r                text={metrics?.health.status === 'healthy' ? 'Sağlıklı' : 'Sorunlu'}\r              />\r              <br />\r              <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                API Gecikme: {metrics?.health.apiLatency}ms\r              </Text>\r            </div>\r          </Card>\r        </Col>\r      </Row>\r      {/* Main Content Grid */}\r      <Row gutter={[16, 16]} style={{ marginTop: 24 }}>\r        {/* Setup Progress */}\r        <Col xs={24} lg={8}>\r          <Card\r            title={\r              <Space>\r                <CheckCircleOutlined />\r                <span>Kurulum Durumu</span>\r              </Space>\r            }\r            extra={\r              <Button\r                type=\"link\"\r                size=\"small\"\r                onClick={() => navigate(`/tenant/${tenantId}/setup`)}\r              >\r                Detaylar\r              </Button>\r            }\r            className=\"dashboard-card\"\r          >\r            {setupProgress && (\r              <Space direction=\"vertical\" style={{ width: '100%' }}>\r                <div>\r                  <Text strong>Genel İlerleme</Text>\r                  <Progress\r                    percent={setupProgress.overallProgress || 0}\r                    strokeColor={{\r                      '0%': '#108ee9',\r                      '100%': '#87d068',\r                    }}\r                  />\r                </div>\r                <div>\r                  <Text strong>Zorunlu Adımlar</Text>\r                  <Progress\r                    percent={setupProgress.requiredProgress || 0}\r                    strokeColor=\"#ff4d4f\"\r                    format={percent => (\r                      <span style={{ fontSize: 12 }}>\r                        {setupProgress.requiredCompletedItems}/{setupProgress.requiredItems}\r                      </span>\r                    )}\r                  />\r                </div>\r                <Divider style={{ margin: '12px 0' }} />\r                <Space wrap>\r                  <Badge status=\"success\" text={`${setupProgress.completedItems} Tamamlandı`} />\r                  <Badge status=\"processing\" text={`${setupProgress.totalItems - setupProgress.completedItems} Bekliyor`} />\r                </Space>\r                {setupProgress.canGoLive && (\r                  <Alert\r                    message=\"Canlıya Geçmeye Hazır!\"\r                    type=\"success\"\r                    showIcon\r                    style={{ marginTop: 12 }}\r                  />\r                )}\r              </Space>\r            )}\r          </Card>\r        </Col>\r        {/* Active Modules */}\r        <Col xs={24} lg={8}>\r          <Card\r            title={\r              <Space>\r                <AppstoreOutlined />\r                <span>Aktif Modüller</span>\r              </Space>\r            }\r            extra={\r              <Button\r                type=\"link\"\r                size=\"small\"\r                onClick={() => navigate(`/tenant/${tenantId}/modules`)}\r              >\r                Yönet\r              </Button>\r            }\r            className=\"dashboard-card\"\r          >\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <div style={{ marginBottom: 16 }}>\r                <Text type=\"secondary\">Toplam Modül</Text>\r                <Title level={3} style={{ margin: '8px 0' }}>\r                  {metrics?.modules.active} / {metrics?.modules.total}\r                </Title>\r              </div>\r              <div className=\"module-tags\">\r                {metrics?.modules.names.map(module => (\r                  <Tag key={module} color=\"blue\" style={{ marginBottom: 8 }}>\r                    {module}\r                  </Tag>\r                ))}\r              </div>\r              <Button\r                type=\"dashed\"\r                block\r                icon={<AppstoreOutlined />}\r                onClick={() = aria-label=\"appstore outlined\"> navigate(`/tenant/${tenantId}/modules/add`)}\r              >\r                Yeni Modül Ekle\r              </Button>\r            </Space>\r          </Card>\r        </Col>\r        {/* Recent Activity */}\r        <Col xs={24} lg={8}>\r          <Card\r            title={\r              <Space>\r                <ClockCircleOutlined />\r                <span>Son Aktiviteler</span>\r              </Space>\r            }\r            extra={\r              <Button\r                type=\"link\"\r                size=\"small\"\r                onClick={() => navigate(`/tenant/${tenantId}/activities`)}\r              >\r                Tümü\r              </Button>\r            }\r            className=\"dashboard-card\"\r          >\r            <Timeline mode=\"left\">\r              {recentActivities.map(activity => (\r                <Timeline.Item\r                  key={activity.id}\r                  dot={activity.icon}\r                  color={activity.color}\r                >\r                  <Text strong>{activity.title}</Text>\r                  <br />\r                  <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                    {activity.description}\r                  </Text>\r                  <br />\r                  <Text type=\"secondary\" style={{ fontSize: 11 }}>\r                    {activity.timestamp}\r                  </Text>\r                </Timeline.Item>\r              ))}\r            </Timeline>\r          </Card>\r        </Col>\r      </Row>\r      {/* Quick Actions */}\r      <Card\r        title={\r          <Space>\r            <RocketOutlined />\r            <span>Hızlı İşlemler</span>\r          </Space>\r        }\r        className=\"dashboard-card\"\r        style={{ marginTop: 16 }}\r      >\r        <Row gutter={[16, 16]}>\r          {quickActions.map((action, index) => (\r            <Col xs={12} sm={6} key={index}>\r              <Button\r                type=\"default\"\r                block\r                size=\"large\"\r                icon={action.icon}\r                onClick={action.onClick}\r                style={{ height: 'auto', padding: '16px' }}\r               aria-label=\"button\">\r                <div style={{ marginTop: 8 }}>{action.title}</div>\r              </Button>\r            </Col>\r          ))}\r        </Row>\r      </Card>\r      {/* Setup Wizard Modal */}\r      {showSetupWizard && tenantId && (\r        <SetupWizard\r          tenantId={tenantId}\r          onClose={() => {\r            setShowSetupWizard(false);\r            fetchDashboardData();\r          }}\r        />\r      )}\r    </div>\r  );\r};\rexport default TenantDashboard;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/tenant/dashboard/pages/DashboardPage/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Row,\r  Col,\r  Typography,\r  Badge,\r  Switch,\r  Button,\r  Space,\r  Tag,\r  Statistic,\r  message,\r  Spin,\r  Modal,\r  Descriptions,\r  Progress,\r  Alert,\r  Tooltip\r} from 'antd';\rimport {\r  AppstoreOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  ClockCircleOutlined,\r  ExperimentOutlined,\r  WarningOutlined,\r  ReloadOutlined,\r  InfoCircleOutlined,\r  TeamOutlined,\r  DatabaseOutlined,\r  FolderOutlined\r} from '@ant-design/icons';\rimport tenantModulesService from '../../../../../services/tenant/modulesService';\rimport { ModuleDto, ModulesSummaryDto } from '../../../../../types/tenant/modules';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst ModulesPage: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [modules, setModules] = useState<ModuleDto[]>([]);\r  const [summary, setSummary] = useState<ModulesSummaryDto | null>(null);\r  const [selectedModule, setSelectedModule] = useState<ModuleDto | null>(null);\r  const [detailModalVisible, setDetailModalVisible] = useState(false);\r  const [toggleLoading, setToggleLoading] = useState<string | null>(null);\r  useEffect(() => {\r    loadModules();\r  }, []);\r  const loadModules = async () => {\r    try {\r      setLoading(true);\r      const [modulesData, summaryData] = await Promise.all([\r        tenantModulesService.getModules(),\r        tenantModulesService.getModulesSummary()\r      ]);\r      setModules(modulesData);\r      setSummary(summaryData);\r    } catch (error) {\r      message.error('Modüller yüklenirken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleToggleModule = async (module: ModuleDto) => {\r    try {\r      setToggleLoading(module.moduleCode);\r      const newStatus = !module.isEnabled;\r      await tenantModulesService.toggleModule(module.moduleCode, newStatus);\r      message.success(`${module.moduleName} ${newStatus ? 'etkinleştirildi' : 'devre dışı bırakıldı'}`);\r      loadModules();\r    } catch (error: any) {\r      message.error(error.response?.data?.message || 'İşlem başarısız oldu');\r    } finally {\r      setToggleLoading(null);\r    }\r  };\r  const showModuleDetail = (module: ModuleDto) => {\r    setSelectedModule(module);\r    setDetailModalVisible(true);\r  };\r  const getModuleIcon = (moduleCode: string) => {\r    const icons: { [key: string]: React.ReactNode } = {\r      CRM: <TeamOutlined />,\r      HR: <TeamOutlined />,\r      INVENTORY: <DatabaseOutlined />,\r      FINANCE: <FolderOutlined />,\r      SALES: <AppstoreOutlined />,\r      PURCHASE: <AppstoreOutlined />\r    };\r    return icons[moduleCode] || <AppstoreOutlined />;\r  };\r  const getModuleColor = (module: ModuleDto) => {\r    if (!module.isEnabled) return '#d9d9d9';\r    if (module.isExpired) return '#ff4d4f';\r    if (module.isTrial) return '#faad14';\r    return '#52c41a';\r  };\r  const getModuleStatus = (module: ModuleDto) => {\r    if (module.isExpired) return <Tag color=\"error\">Süresi Dolmuş</Tag>;\r    if (!module.isEnabled) return <Tag>Devre Dışı</Tag>;\r    if (module.isTrial) return <Tag color=\"warning\">Deneme</Tag>;\r    return <Tag color=\"success\">Aktif</Tag>;\r  };\r  const calculateUsagePercentage = (used?: number, limit?: number) => {\r    if (!used || !limit) return 0;\r    return Math.min((used / limit) * 100, 100);\r  };\r  if (loading) {\r    return (\r      <div className=\"modules-loading\">\r        <Spin size=\"large\" tip=\"Modüller yükleniyor...\" />\r      </div>\r    );\r  }\r  return (\r    <div className=\"modules-page\">\r      <Card className=\"modules-header\">\r        <Row gutter={[16, 16]} align=\"middle\">\r          <Col flex=\"1\">\r            <Title level={2}>\r              <AppstoreOutlined /> Modül Yönetimi\r            </Title>\r            <Text type=\"secondary\">\r              Sistemde bulunan modülleri yönetin ve durumlarını kontrol edin\r            </Text>\r          </Col>\r          <Col>\r            <Button \r              icon={<ReloadOutlined />}\r              onClick={loadModules}\r             aria-label=\"reload outlined\">\r              Yenile\r            </Button>\r          </Col>\r        </Row>\r      </Card>\r      {summary && (\r        <Row gutter={[16, 16]} className=\"modules-stats\">\r          <Col xs={24} sm={12} md={8} lg={4}>\r            <Card>\r              <Statistic\r                title=\"Toplam Modül\"\r                value={summary.totalModules}\r                prefix={<AppstoreOutlined />}\r              />\r            </Card>\r          </Col>\r          <Col xs={24} sm={12} md={8} lg={4}>\r            <Card>\r              <Statistic\r                title=\"Aktif Modül\"\r                value={summary.enabledModules}\r                prefix={<CheckCircleOutlined />}\r                valueStyle={{ color: '#52c41a' }}\r              />\r            </Card>\r          </Col>\r          <Col xs={24} sm={12} md={8} lg={4}>\r            <Card>\r              <Statistic\r                title=\"Devre Dışı\"\r                value={summary.disabledModules}\r                prefix={<CloseCircleOutlined />}\r                valueStyle={{ color: '#d9d9d9' }}\r              />\r            </Card>\r          </Col>\r          <Col xs={24} sm={12} md={8} lg={4}>\r            <Card>\r              <Statistic\r                title=\"Deneme\"\r                value={summary.trialModules}\r                prefix={<ExperimentOutlined />}\r                valueStyle={{ color: '#faad14' }}\r              />\r            </Card>\r          </Col>\r          <Col xs={24} sm={12} md={8} lg={4}>\r            <Card>\r              <Statistic\r                title=\"Süresi Dolmuş\"\r                value={summary.expiredModules}\r                prefix={<WarningOutlined />}\r                valueStyle={{ color: '#ff4d4f' }}\r              />\r            </Card>\r          </Col>\r        </Row>\r      )}\r      <Row gutter={[16, 16]} className=\"modules-grid\">\r        {modules.map(module => (\r          <Col xs={24} sm={12} md={8} lg={6} key={module.id}>\r            <Card\r              className={`module-card ${!module.isEnabled ? 'disabled' : ''} ${module.isExpired ? 'expired' : ''}`}\r              actions={[\r                <Switch\r                  checked={module.isEnabled}\r                  onChange={() => handleToggleModule(module)}\r                  loading={toggleLoading === module.moduleCode}\r                  disabled={module.isExpired}\r                />,\r                <Button\r                  type=\"link\"\r                  icon={<InfoCircleOutlined />}\r                  onClick={() = aria-label=\"info circle outlined\"> showModuleDetail(module)}\r                >\r                  Detay\r                </Button>\r              ]}\r            >\r              <Card.Meta\r                avatar={\r                  <div className=\"module-icon\" style={{ color: getModuleColor(module) }}>\r                    {getModuleIcon(module.moduleCode)}\r                  </div>\r                }\r                title={\r                  <Space>\r                    {module.moduleName}\r                    {getModuleStatus(module)}\r                  </Space>\r                }\r                description={module.description}\r              />\r              {module.userLimit && (\r                <div className=\"module-limit\">\r                  <Text type=\"secondary\">Kullanıcı Limiti:</Text>\r                  <Progress\r                    percent={calculateUsagePercentage(0, module.userLimit)}\r                    size=\"small\"\r                    format={() => `0 / ${module.userLimit}`}\r                  />\r                </div>\r              )}\r              {module.storageLimit && (\r                <div className=\"module-limit\">\r                  <Text type=\"secondary\">Depolama Limiti:</Text>\r                  <Progress\r                    percent={calculateUsagePercentage(0, module.storageLimit)}\r                    size=\"small\"\r                    format={() => `0 / ${module.storageLimit} MB`}\r                  />\r                </div>\r              )}\r              {module.expiryDate && (\r                <div className=\"module-expiry\">\r                  <ClockCircleOutlined />\r                  <Text type=\"secondary\">\r                    Son Kullanım: {new Date(module.expiryDate).toLocaleDateString('tr-TR')}\r                  </Text>\r                </div>\r              )}\r            </Card>\r          </Col>\r        ))}\r      </Row>\r      <Modal\r        title={`${selectedModule?.moduleName} Modül Detayı`}\r        visible={detailModalVisible}\r        onCancel={() => setDetailModalVisible(false)}\r        footer={[\r          <Button key=\"close\" onClick={() => setDetailModalVisible(false)}>\r            Kapat\r          </Button>\r        ]}\r        width={600}\r      >\r        {selectedModule && (\r          <Descriptions bordered column={1}>\r            <Descriptions.Item label=\"Modül Adı\">\r              {selectedModule.moduleName}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Modül Kodu\">\r              {selectedModule.moduleCode}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Açıklama\">\r              {selectedModule.description || '-'}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Durum\">\r              {getModuleStatus(selectedModule)}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Etkinleştirme Tarihi\">\r              {selectedModule.enabledDate\r                ? new Date(selectedModule.enabledDate).toLocaleString('tr-TR')\r                : '-'}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Devre Dışı Bırakma Tarihi\">\r              {selectedModule.disabledDate\r                ? new Date(selectedModule.disabledDate).toLocaleString('tr-TR')\r                : '-'}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Kullanıcı Limiti\">\r              {selectedModule.userLimit || 'Sınırsız'}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Depolama Limiti\">\r              {selectedModule.storageLimit ? `${selectedModule.storageLimit} MB` : 'Sınırsız'}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Kayıt Limiti\">\r              {selectedModule.recordLimit || 'Sınırsız'}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Son Kullanım Tarihi\">\r              {selectedModule.expiryDate\r                ? new Date(selectedModule.expiryDate).toLocaleString('tr-TR')\r                : 'Süresiz'}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Oluşturulma Tarihi\">\r              {new Date(selectedModule.createdAt).toLocaleString('tr-TR')}\r            </Descriptions.Item>\r            <Descriptions.Item label=\"Güncellenme Tarihi\">\r              {selectedModule.updatedAt\r                ? new Date(selectedModule.updatedAt).toLocaleString('tr-TR')\r                : '-'}\r            </Descriptions.Item>\r          </Descriptions>\r        )}\r      </Modal>\r    </div>\r  );\r};\rexport default ModulesPage;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/tenant/modules/pages/ModulesPage/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Tabs,\r  Form,\r  Input,\r  InputNumber,\r  Switch,\r  Button,\r  Space,\r  Typography,\r  message,\r  Spin,\r  Row,\r  Col,\r  Empty,\r  Tag,\r  Divider,\r} from 'antd';\rimport {\r  SettingOutlined,\r  SaveOutlined,\r  ReloadOutlined,\r  GlobalOutlined,\r  SecurityScanOutlined,\r  MailOutlined,\r  FileTextOutlined,\r  BankOutlined,\r} from '@ant-design/icons';\rimport tenantSettingsService from '@/services/tenant/settingsService';\rimport { SettingDto } from '@/types/tenant/settings';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { TextArea } = Input;\rinterface GroupedSettings {\r  [category: string]: SettingDto[];\r}\rconst SystemSettingsPage: React.FC = () => {\r  const [loading, setLoading] = useState(true);\r  const [saving, setSaving] = useState(false);\r  const [settings, setSettings] = useState<SettingDto[]>([]);\r  const [groupedSettings, setGroupedSettings] = useState<GroupedSettings>({});\r  const [editedValues, setEditedValues] = useState<{ [key: string]: string }>({});\r  const [form] = Form.useForm();\r  useEffect(() => {\r    loadSettings();\r  }, []);\r  const loadSettings = async () => {\r    setLoading(true);\r    try {\r      const categories = await tenantSettingsService.getSettings();\r      // Flatten settings from categories\r      const allSettings: SettingDto[] = [];\r      const grouped: GroupedSettings = {};\r      categories.forEach(category => {\r        const categorySettings = category.settings.map(setting => ({\r          ...setting,\r          category: category.category\r        }));\r        allSettings.push(...categorySettings);\r        grouped[category.category] = categorySettings;\r      });\r      setSettings(allSettings);\r      setGroupedSettings(grouped);\r      // Set initial form values\r      const formValues: { [key: string]: any } = {};\r      allSettings.forEach(setting => {\r        formValues[setting.settingKey] = convertValue(setting.settingValue, setting.dataType);\r      });\r      form.setFieldsValue(formValues);\r    } catch (error) {\r      message.error('Ayarlar yüklenirken bir hata oluştu');\r    }\r    setLoading(false);\r  };\r  const convertValue = (value: string, dataType: string) => {\r    if (dataType === 'boolean') return value === 'true';\r    if (dataType === 'number') return parseInt(value) || 0;\r    return value;\r  };\r  const handleFieldChange = (key: string, value: any, dataType: string) => {\r    let stringValue = value;\r    if (dataType === 'boolean') stringValue = value ? 'true' : 'false';\r    else if (dataType === 'number') stringValue = value?.toString() || '0';\r    else stringValue = value?.toString() || '';\r    setEditedValues(prev => ({\r      ...prev,\r      [key]: stringValue\r    }));\r  };\r  const handleSave = async () => {\r    if (Object.keys(editedValues).length === 0) {\r      message.info('Değişiklik yapılmadı');\r      return;\r    }\r    setSaving(true);\r    try {\r      const promises = Object.entries(editedValues).map(([key, value]) =>\r        tenantSettingsService.updateSettingValue(key, value)\r      );\r      await Promise.all(promises);\r      message.success('Ayarlar başarıyla kaydedildi');\r      setEditedValues({});\r      await loadSettings();\r    } catch (error) {\r      message.error('Ayarlar kaydedilirken hata oluştu');\r    }\r    setSaving(false);\r  };\r  const handleReset = () => {\r    setEditedValues({});\r    loadSettings();\r    message.info('Değişiklikler geri alındı');\r  };\r  const getIcon = (category: string) => {\r    const icons: { [key: string]: React.ReactNode } = {\r      'Genel': <GlobalOutlined />,\r      'Güvenlik': <SecurityScanOutlined />,\r      'E-posta': <MailOutlined />,\r      'Fatura': <FileTextOutlined />,\r      'Yerelleştirme': <GlobalOutlined />,\r    };\r    return icons[category] || <SettingOutlined />;\r  };\r  const renderField = (setting: SettingDto) => {\r    const { settingKey, dataType, isSystemSetting, description } = setting;\r    const value = form.getFieldValue(settingKey);\r    if (dataType === 'boolean') {\r      return (\r        <Switch\r          checked={value}\r          disabled={isSystemSetting}\r          onChange={(checked) => handleFieldChange(settingKey, checked, dataType)}\r        />\r      );\r    }\r    if (dataType === 'number') {\r      return (\r        <InputNumber\r          value={value}\r          disabled={isSystemSetting}\r          style={{ width: '100%' }}\r          onChange={(val) = aria-label=\"input field\"> handleFieldChange(settingKey, val, dataType)}\r        />\r      );\r    }\r    if (settingKey.includes('description') || settingKey.includes('message')) {\r      return (\r        <TextArea\r          value={value}\r          disabled={isSystemSetting}\r          rows={3}\r          placeholder={description}\r          onChange={(e) => handleFieldChange(settingKey, e.target.value, dataType)}\r        />\r      );\r    }\r    return (\r      <Input\r        value={value}\r        disabled={isSystemSetting}\r        placeholder={description}\r        onChange={(e) = aria-label=\"input field\"> handleFieldChange(settingKey, e.target.value, dataType)}\r      />\r    );\r  };\r  if (loading) {\r    return (\r      <div className=\"settings-loading\">\r        <Spin size=\"large\" />\r        <Title level={4}>Ayarlar Yükleniyor...</Title>\r      </div>\r    );\r  }\r  if (settings.length === 0) {\r    return (\r      <Card className=\"settings-empty\">\r        <Empty description=\"Ayar bulunamadı\" />\r      </Card>\r    );\r  }\r  const tabItems = Object.entries(groupedSettings).map(([category, categorySettings]) => ({\r    key: category,\r    label: (\r      <span>\r        {getIcon(category)}\r        <span style={{ marginLeft: 8 }}>{category}</span>\r      </span>\r    ),\r    children: (\r      <div className=\"settings-category\">\r        <Row gutter={[16, 16]}>\r          {categorySettings.map(setting => (\r            <Col xs={24} sm={24} md={12} key={setting.id}>\r              <Card size=\"small\" className=\"setting-card\">\r                <div className=\"setting-header\">\r                  <Text strong>{setting.settingKey}</Text>\r                  {setting.isSystemSetting && (\r                    <Tag color=\"orange\" size=\"small\">Sistem</Tag>\r                  )}\r                  {editedValues[setting.settingKey] !== undefined && (\r                    <Tag color=\"blue\" size=\"small\">Değişti</Tag>\r                  )}\r                </div>\r                {setting.description && (\r                  <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                    {setting.description}\r                  </Text>\r                )}\r                <Form.Item\r                  name={setting.settingKey}\r                  style={{ marginBottom: 0, marginTop: 8 }}\r                >\r                  {renderField(setting)}\r                </Form.Item>\r              </Card>\r            </Col>\r          ))}\r        </Row>\r      </div>\r    ),\r  }));\r  return (\r    <div className=\"system-settings-page\">\r      <Card className=\"settings-header-card\">\r        <div className=\"settings-header\">\r          <div>\r            <Title level={3}>\r              <SettingOutlined /> Sistem Ayarları\r            </Title>\r            <Text type=\"secondary\">\r              Tenant ayarlarınızı buradan yönetebilirsiniz\r            </Text>\r          </div>\r          <Space>\r            <Button\r              icon={<ReloadOutlined />}\r              onClick={handleReset}\r              disabled={Object.keys(editedValues).length === 0}\r             aria-label=\"reload outlined\">\r              Sıfırla\r            </Button>\r            <Button\r              type=\"primary\"\r              icon={<SaveOutlined />}\r              onClick={handleSave}\r              loading={saving}\r              disabled={Object.keys(editedValues).length === 0}\r             aria-label=\"save outlined\">\r              Kaydet ({Object.keys(editedValues).length})\r            </Button>\r          </Space>\r        </div>\r      </Card>\r      <Card className=\"settings-content\">\r        <Form form={form} layout=\"vertical\">\r          <Tabs items={tabItems} />\r        </Form>\r      </Card>\r    </div>\r  );\r};\rexport default SystemSettingsPage;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/tenant/pages/SystemSettingsPage/SystemSettingsPage.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { \r  Card, \r  Tabs, \r  Form, \r  Input, \r  Switch, \r  Button, \r  Space, \r  Typography, \r  message, \r  Spin,\r  Descriptions,\r  Divider,\r  Alert,\r  Select\r} from 'antd';\rimport { \r  SettingOutlined, \r  SaveOutlined, \r  ReloadOutlined,\r  LockOutlined,\r  GlobalOutlined,\r  DatabaseOutlined,\r  MailOutlined,\r  BellOutlined\r} from '@ant-design/icons';\rimport tenantSettingsService from '../../../../../services/tenant/settingsService';\rimport { SettingCategoryDto, SettingDto } from '../../../../../types/tenant/settings';\rimport './style.css';\rconst { Title, Text } = Typography;\rconst { TabPane } = Tabs;\rconst SettingsPage: React.FC = () => {\r  const [loading, setLoading] = useState(false);\r  const [saving, setSaving] = useState(false);\r  const [settings, setSettings] = useState<SettingCategoryDto[]>([]);\r  const [form] = Form.useForm();\r  const [activeTab, setActiveTab] = useState('General');\r  useEffect(() => {\r    loadSettings();\r  }, []);\r  const loadSettings = async () => {\r    try {\r      setLoading(true);\r      const data = await tenantSettingsService.getSettings();\r      setSettings(data);\r      // Form değerlerini ayarla\r      const formValues: any = {};\r      data.forEach(category => {\r        category.settings.forEach(setting => {\r          formValues[setting.settingKey] = setting.settingValue;\r        });\r      });\r      form.setFieldsValue(formValues);\r    } catch (error) {\r      message.error('Ayarlar yüklenirken hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleSave = async (values: any) => {\r    try {\r      setSaving(true);\r      const promises = Object.entries(values).map(([key, value]) => \r        tenantSettingsService.updateSettingValue(key, value as string)\r      );\r      await Promise.all(promises);\r      message.success('Ayarlar başarıyla kaydedildi');\r      loadSettings();\r    } catch (error) {\r      message.error('Ayarlar kaydedilirken hata oluştu');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const getCategoryIcon = (category: string) => {\r    switch(category.toLowerCase()) {\r      case 'general': return <SettingOutlined />;\r      case 'security': return <LockOutlined />;\r      case 'localization': return <GlobalOutlined />;\r      case 'database': return <DatabaseOutlined />;\r      case 'email': return <MailOutlined />;\r      case 'notifications': return <BellOutlined />;\r      default: return <SettingOutlined />;\r    }\r  };\r  const renderSettingField = (setting: SettingDto) => {\r    const fieldProps = {\r      label: setting.settingKey,\r      name: setting.settingKey,\r      help: setting.description,\r      rules: [{ required: !setting.isPublic }]\r    };\r    if (setting.dataType === 'Boolean') {\r      return (\r        <Form.Item {...fieldProps} valuePropName=\"checked\">\r          <Switch disabled={setting.isSystemSetting} />\r        </Form.Item>\r      );\r    }\r    if (setting.dataType === 'Number') {\r      return (\r        <Form.Item {...fieldProps}>\r          <Input \r            type=\"number\" \r            disabled={setting.isSystemSetting}\r            prefix={setting.isEncrypted ? <LockOutlined / aria-label=\"input field\"> : undefined}\r          />\r        </Form.Item>\r      );\r    }\r    if (setting.dataType === 'Select') {\r      // Configuration'dan seçenekleri parse et\r      const options = setting.configuration ? JSON.parse(setting.configuration) : [];\r      return (\r        <Form.Item {...fieldProps}>\r          <Select disabled={setting.isSystemSetting} aria-label=\"select field\">\r            {options.map((opt: any) => (\r              <Select.Option key={opt.value} value={opt.value} aria-label=\"select field\">\r                {opt.label}\r              </Select.Option>\r            ))}\r          </Select>\r        </Form.Item>\r      );\r    }\r    return (\r      <Form.Item {...fieldProps}>\r        <Input \r          disabled={setting.isSystemSetting}\r          type={setting.isEncrypted ? 'password' : 'text'}\r          prefix={setting.isEncrypted ? <LockOutlined / aria-label=\"input field\"> : undefined}\r        />\r      </Form.Item>\r    );\r  };\r  if (loading) {\r    return (\r      <div className=\"settings-loading\">\r        <Spin size=\"large\" tip=\"Ayarlar yükleniyor...\" />\r      </div>\r    );\r  }\r  return (\r    <div className=\"settings-page\">\r      <Card className=\"settings-header\">\r        <Space direction=\"vertical\" style={{ width: '100%' }}>\r          <Title level={2}>\r            <SettingOutlined /> Sistem Ayarları\r          </Title>\r          <Text type=\"secondary\">\r            Sistemin genel ayarlarını bu sayfadan yönetebilirsiniz\r          </Text>\r        </Space>\r      </Card>\r      <Card className=\"settings-content\">\r        <Form\r          form={form}\r          layout=\"vertical\"\r          onFinish={handleSave}\r          autoComplete=\"off\"\r        >\r          <Tabs \r            activeKey={activeTab} \r            onChange={setActiveTab}\r            type=\"card\"\r          >\r            {settings.map(category => (\r              <TabPane \r                tab={\r                  <span>\r                    {getCategoryIcon(category.category)}\r                    {' '}\r                    {category.category}\r                  </span>\r                } \r                key={category.category}\r              >\r                {category.description && (\r                  <Alert\r                    message={category.description}\r                    type=\"info\"\r                    showIcon\r                    style={{ marginBottom: 20 }}\r                  />\r                )}\r                <div className=\"settings-category\">\r                  {category.settings.map(setting => (\r                    <div key={setting.id} className=\"setting-item\">\r                      {renderSettingField(setting)}\r                      {setting.isSystemSetting && (\r                        <Text type=\"warning\" style={{ fontSize: 12 }}>\r                          * Sistem ayarı - Değiştirilemez\r                        </Text>\r                      )}\r                    </div>\r                  ))}\r                </div>\r              </TabPane>\r            ))}\r          </Tabs>\r          <Divider />\r          <Space>\r            <Button \r              type=\"primary\" \r              icon={<SaveOutlined />}\r              loading={saving}\r              htmlType=\"submit\"\r             aria-label=\"save outlined\">\r              Kaydet\r            </Button>\r            <Button \r              icon={<ReloadOutlined />}\r              onClick={loadSettings}\r             aria-label=\"reload outlined\">\r              Yenile\r            </Button>\r          </Space>\r        </Form>\r      </Card>\r    </div>\r  );\r};\rexport default SettingsPage;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/tenant/settings/pages/SettingsPage/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Progress,\r  List,\r  Button,\r  Space,\r  Typography,\r  Badge,\r  Tag,\r  Tooltip,\r  Row,\r  Col,\r  Divider,\r  Alert,\r  Spin,\r  message,\r  Drawer,\r  Timeline\r} from 'antd';\rimport {\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  ClockCircleOutlined,\r  ExclamationCircleOutlined,\r  RocketOutlined,\r  ShopOutlined,\r  TeamOutlined,\r  AppstoreOutlined,\r  DatabaseOutlined,\r  SafetyOutlined,\r  CloudUploadOutlined,\r  FileTextOutlined,\r  SettingOutlined,\r  InfoCircleOutlined,\r  WarningOutlined,\r  SyncOutlined,\r  CheckOutlined,\r  LoadingOutlined\r} from '@ant-design/icons';\rimport { apiClient } from '@/shared/api/client';\rimport './styles.css';\rconst { Title, Text, Paragraph } = Typography;\rinterface SetupChecklistProps {\r  tenantId: string;\r  onGoLive?: () => void;\r  compact?: boolean;\r}\rinterface ChecklistItem {\r  key: string;\r  title: string;\r  description: string;\r  icon: React.ReactNode;\r  required: boolean;\r  completed: boolean;\r  category: 'basic' | 'organization' | 'modules' | 'financial' | 'security' | 'advanced';\r  action?: () => void;\r  helpLink?: string;\r}\rconst SetupChecklist: React.FC<SetupChecklistProps> = ({ \r  tenantId, \r  onGoLive,\r  compact = false \r}) => {\r  const [loading, setLoading] = useState(true);\r  const [checklistData, setChecklistData] = useState<any>(null);\r  const [selectedCategory, setSelectedCategory] = useState<string>('all');\r  const [detailDrawerVisible, setDetailDrawerVisible] = useState(false);\r  const [selectedItem, setSelectedItem] = useState<ChecklistItem | null>(null);\r  const [refreshing, setRefreshing] = useState(false);\r  const categories = [\r    { key: 'all', label: 'Tümü', color: '#1890ff' },\r    { key: 'basic', label: 'Temel Ayarlar', color: '#52c41a' },\r    { key: 'organization', label: 'Organizasyon', color: '#722ed1' },\r    { key: 'modules', label: 'Modüller', color: '#fa8c16' },\r    { key: 'financial', label: 'Mali İşlemler', color: '#eb2f96' },\r    { key: 'security', label: 'Güvenlik', color: '#f5222d' },\r    { key: 'advanced', label: 'Gelişmiş', color: '#13c2c2' }\r  ];\r  const checklistItems: ChecklistItem[] = [\r    // Basic Setup\r    {\r      key: 'companyinfo',\r      title: 'Şirket Bilgileri',\r      description: 'Temel şirket bilgilerini tamamlayın',\r      icon: <ShopOutlined />,\r      required: true,\r      completed: checklistData?.companyInfoCompleted || false,\r      category: 'basic',\r      action: () => handleItemAction('companyinfo')\r    },\r    {\r      key: 'logo',\r      title: 'Logo Yükleme',\r      description: 'Şirket logonuzu yükleyin',\r      icon: <FileTextOutlined />,\r      required: false,\r      completed: checklistData?.logoUploaded || false,\r      category: 'basic',\r      action: () => handleItemAction('logo')\r    },\r    {\r      key: 'adminuser',\r      title: 'Yönetici Kullanıcı',\r      description: 'Ana yönetici hesabını oluşturun',\r      icon: <TeamOutlined />,\r      required: true,\r      completed: checklistData?.adminUserCreated || false,\r      category: 'basic',\r      action: () => handleItemAction('adminuser')\r    },\r    // Organization Setup\r    {\r      key: 'departments',\r      title: 'Departmanlar',\r      description: 'Departman yapısını oluşturun',\r      icon: <TeamOutlined />,\r      required: false,\r      completed: checklistData?.departmentsCreated || false,\r      category: 'organization',\r      action: () => handleItemAction('departments')\r    },\r    {\r      key: 'branches',\r      title: 'Şubeler',\r      description: 'Şube bilgilerini ekleyin',\r      icon: <ShopOutlined />,\r      required: false,\r      completed: checklistData?.branchesCreated || false,\r      category: 'organization',\r      action: () => handleItemAction('branches')\r    },\r    {\r      key: 'roles',\r      title: 'Roller ve Yetkiler',\r      description: 'Kullanıcı rollerini tanımlayın',\r      icon: <SafetyOutlined />,\r      required: true,\r      completed: checklistData?.rolesConfigured || false,\r      category: 'organization',\r      action: () => handleItemAction('roles')\r    },\r    {\r      key: 'users',\r      title: 'Kullanıcıları Davet Et',\r      description: 'Takım üyelerini sisteme davet edin',\r      icon: <TeamOutlined />,\r      required: false,\r      completed: checklistData?.usersInvited || false,\r      category: 'organization',\r      action: () => handleItemAction('users')\r    },\r    // Module Setup\r    {\r      key: 'modules',\r      title: 'Modül Seçimi',\r      description: 'İhtiyacınız olan modülleri seçin',\r      icon: <AppstoreOutlined />,\r      required: true,\r      completed: checklistData?.modulesSelected || false,\r      category: 'modules',\r      action: () => handleItemAction('modules')\r    },\r    {\r      key: 'moduleconfig',\r      title: 'Modül Yapılandırması',\r      description: 'Seçili modülleri yapılandırın',\r      icon: <SettingOutlined />,\r      required: true,\r      completed: checklistData?.modulesConfigured || false,\r      category: 'modules',\r      action: () => handleItemAction('moduleconfig')\r    },\r    // Financial Setup\r    {\r      key: 'chartofaccounts',\r      title: 'Hesap Planı',\r      description: 'Muhasebe hesap planını oluşturun',\r      icon: <DatabaseOutlined />,\r      required: true,\r      completed: checklistData?.chartOfAccountsSetup || false,\r      category: 'financial',\r      action: () => handleItemAction('chartofaccounts')\r    },\r    {\r      key: 'taxsettings',\r      title: 'Vergi Ayarları',\r      description: 'KDV ve diğer vergi ayarlarını yapın',\r      icon: <DatabaseOutlined />,\r      required: true,\r      completed: checklistData?.taxSettingsConfigured || false,\r      category: 'financial',\r      action: () => handleItemAction('taxsettings')\r    },\r    {\r      key: 'currency',\r      title: 'Para Birimi',\r      description: 'Varsayılan para birimini ayarlayın',\r      icon: <DatabaseOutlined />,\r      required: true,\r      completed: checklistData?.currencyConfigured || false,\r      category: 'financial',\r      action: () => handleItemAction('currency')\r    },\r    // Security\r    {\r      key: 'security',\r      title: 'Güvenlik Ayarları',\r      description: 'Güvenlik politikalarını yapılandırın',\r      icon: <SafetyOutlined />,\r      required: true,\r      completed: checklistData?.securitySettingsConfigured || false,\r      category: 'security',\r      action: () => handleItemAction('security')\r    },\r    {\r      key: 'passwordpolicy',\r      title: 'Şifre Politikası',\r      description: 'Şifre kurallarını belirleyin',\r      icon: <SafetyOutlined />,\r      required: true,\r      completed: checklistData?.passwordPolicySet || false,\r      category: 'security',\r      action: () => handleItemAction('passwordpolicy')\r    },\r    {\r      key: 'backup',\r      title: 'Yedekleme Ayarları',\r      description: 'Otomatik yedekleme yapılandırın',\r      icon: <CloudUploadOutlined />,\r      required: true,\r      completed: checklistData?.backupConfigured || false,\r      category: 'security',\r      action: () => handleItemAction('backup')\r    }\r  ];\r  useEffect(() => {\r    fetchChecklistData();\r  }, [tenantId]);\r  const fetchChecklistData = async () => {\r    try {\r      setLoading(true);\r      const response = await apiClient.get(`/api/master/tenants/${tenantId}/setup-checklist`);\r      if (response.data?.success) {\r        setChecklistData(response.data.data);\r      }\r    } catch (error) {\r      message.error('Checklist bilgileri yüklenemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleRefresh = async () => {\r    setRefreshing(true);\r    await fetchChecklistData();\r    setRefreshing(false);\r    message.success('Checklist güncellendi');\r  };\r  const handleItemAction = async (itemKey: string) => {\r    const item = checklistItems.find(i => i.key === itemKey);\r    if (item) {\r      setSelectedItem(item);\r      setDetailDrawerVisible(true);\r    }\r  };\r  const handleCompleteItem = async (itemKey: string) => {\r    try {\r      const response = await apiClient.put(\r        `/api/master/tenants/${tenantId}/setup-checklist/${checklistData.id}`,\r        {\r          itemKey,\r          isCompleted: true,\r          completedBy: 'current-user' // This should come from auth context\r        }\r      );\r      if (response.data?.success) {\r        setChecklistData(response.data.data);\r        message.success('Öğe tamamlandı olarak işaretlendi');\r        setDetailDrawerVisible(false);\r      }\r    } catch (error) {\r      message.error('İşlem sırasında hata oluştu');\r    }\r  };\r  const handleGoLive = async () => {\r    if (!checklistData?.canGoLive) {\r      message.warning('Canlıya geçiş için tüm zorunlu adımlar tamamlanmalıdır');\r      return;\r    }\r    // Call go-live process\r    onGoLive?.();\r  };\r  const getFilteredItems = () => {\r    if (selectedCategory === 'all') return checklistItems;\r    return checklistItems.filter(item => item.category === selectedCategory);\r  };\r  const getProgressColor = () => {\r    const progress = checklistData?.overallProgress || 0;\r    if (progress < 30) return '#ff4d4f';\r    if (progress < 60) return '#faad14';\r    if (progress < 90) return '#52c41a';\r    return '#1890ff';\r  };\r  const getCategoryProgress = (category: string) => {\r    const items = checklistItems.filter(item => item.category === category);\r    const completed = items.filter(item => item.completed).length;\r    return items.length > 0 ? (completed / items.length) * 100 : 0;\r  };\r  if (loading) {\r    return (\r      <Card className=\"checklist-loading\">\r        <Spin size=\"large\" indicator={<LoadingOutlined style={{ fontSize: 48 }} />} />\r      </Card>\r    );\r  }\r  if (compact) {\r    return (\r      <Card className=\"checklist-compact\">\r        <Space direction=\"vertical\" style={{ width: '100%' }}>\r          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r            <Title level={5} style={{ margin: 0 }}>Kurulum Durumu</Title>\r            <Button size=\"small\" onClick={() => setDetailDrawerVisible(true)}>\r              Detaylar\r            </Button>\r          </div>\r          <Progress\r            percent={checklistData?.overallProgress || 0}\r            strokeColor={getProgressColor()}\r            size=\"small\"\r          />\r          <Space>\r            <Text type=\"secondary\">\r              {checklistData?.completedItems || 0} / {checklistData?.totalItems || 0} tamamlandı\r            </Text>\r            {checklistData?.canGoLive && (\r              <Tag color=\"success\">Canlıya Geçmeye Hazır</Tag>\r            )}\r          </Space>\r        </Space>\r      </Card>\r    );\r  }\r  return (\r    <div className=\"setup-checklist-container\">\r      <Card className=\"checklist-header-card\">\r        <Row align=\"middle\" justify=\"space-between\">\r          <Col>\r            <Space direction=\"vertical\" size={0}>\r              <Title level={3} style={{ margin: 0 }}>\r                <CheckCircleOutlined /> Kurulum Kontrol Listesi\r              </Title>\r              <Text type=\"secondary\">\r                Sistemin canlıya geçmesi için gereken adımları takip edin\r              </Text>\r            </Space>\r          </Col>\r          <Col>\r            <Space>\r              <Button\r                icon={<SyncOutlined spin={refreshing} / aria-label=\"sync outlined\">}\r                onClick={handleRefresh}\r                disabled={refreshing}\r              >\r                Yenile\r              </Button>\r              {checklistData?.canGoLive && (\r                <Button\r                  type=\"primary\"\r                  icon={<RocketOutlined />}\r                  onClick={handleGoLive}\r                  size=\"large\"\r                 aria-label=\"rocket outlined\">\r                  Canlıya Geç\r                </Button>\r              )}\r            </Space>\r          </Col>\r        </Row>\r        <Divider />\r        <Row gutter={[16, 16]}>\r          <Col xs={24} lg={12}>\r            <div className=\"progress-section\">\r              <Text strong>Genel İlerleme</Text>\r              <Progress\r                percent={checklistData?.overallProgress || 0}\r                strokeColor={getProgressColor()}\r                format={(percent) => (\r                  <span style={{ fontSize: '16px', fontWeight: 500 }}>\r                    %{Math.round(percent || 0)}\r                  </span>\r                )}\r              />\r              <Space style={{ marginTop: 8 }}>\r                <Badge status=\"success\" text={`${checklistData?.completedItems || 0} Tamamlandı`} />\r                <Divider type=\"vertical\" />\r                <Badge status=\"processing\" text={`${(checklistData?.totalItems || 0) - (checklistData?.completedItems || 0)} Bekliyor`} />\r              </Space>\r            </div>\r          </Col>\r          <Col xs={24} lg={12}>\r            <div className=\"progress-section\">\r              <Text strong>Zorunlu Adımlar</Text>\r              <Progress\r                percent={checklistData?.requiredProgress || 0}\r                strokeColor=\"#ff4d4f\"\r                format={(percent) => (\r                  <span style={{ fontSize: '16px', fontWeight: 500 }}>\r                    %{Math.round(percent || 0)}\r                  </span>\r                )}\r              />\r              <Space style={{ marginTop: 8 }}>\r                <Badge status=\"error\" text={`${checklistData?.requiredCompletedItems || 0} / ${checklistData?.requiredItems || 0} Zorunlu`} />\r                {!checklistData?.canGoLive && (\r                  <>\r                    <Divider type=\"vertical\" />\r                    <Text type=\"danger\">\r                      <WarningOutlined /> Canlıya geçiş için tamamlanmalı\r                    </Text>\r                  </>\r                )}\r              </Space>\r            </div>\r          </Col>\r        </Row>\r      </Card>\r      <Card className=\"checklist-content-card\">\r        <div className=\"category-filters\">\r          <Space wrap>\r            {categories.map(cat => (\r              <Tag\r                key={cat.key}\r                color={selectedCategory === cat.key ? cat.color : 'default'}\r                style={{ cursor: 'pointer', padding: '4px 12px' }}\r                onClick={() => setSelectedCategory(cat.key)}\r              >\r                {cat.label}\r                {cat.key !== 'all' && (\r                  <Badge\r                    count={checklistItems.filter(i => i.category === cat.key && !i.completed).length}\r                    style={{ marginLeft: 8 }}\r                  />\r                )}\r              </Tag>\r            ))}\r          </Space>\r        </div>\r        <List\r          className=\"checklist-items\"\r          dataSource={getFilteredItems()}\r          renderItem={(item) => (\r            <List.Item\r              className={`checklist-item ${item.completed ? 'completed' : ''}`}\r              actions={[\r                item.completed ? (\r                  <CheckCircleOutlined style={{ color: '#52c41a', fontSize: 24 }} />\r                ) : (\r                  <Button\r                    size=\"small\"\r                    type=\"primary\"\r                    onClick={() => handleItemAction(item.key)}\r                  >\r                    Başla\r                  </Button>\r                )\r              ]}\r            >\r              <List.Item.Meta\r                avatar={\r                  <div className={`item-icon ${item.completed ? 'completed' : ''}`}>\r                    {item.icon}\r                  </div>\r                }\r                title={\r                  <Space>\r                    {item.title}\r                    {item.required && (\r                      <Tag color=\"red\" style={{ fontSize: 10 }}>ZORUNLU</Tag>\r                    )}\r                  </Space>\r                }\r                description={item.description}\r              />\r            </List.Item>\r          )}\r        />\r      </Card>\r      <Drawer\r        title={selectedItem?.title}\r        placement=\"right\"\r        width={480}\r        onClose={() => setDetailDrawerVisible(false)}\r        open={detailDrawerVisible}\r        footer={\r          <Space style={{ float: 'right' }}>\r            <Button onClick={() => setDetailDrawerVisible(false)}>İptal</Button>\r            {selectedItem && !selectedItem.completed && (\r              <Button\r                type=\"primary\"\r                icon={<CheckOutlined />}\r                onClick={() = aria-label=\"check outlined\"> handleCompleteItem(selectedItem.key)}\r              >\r                Tamamlandı Olarak İşaretle\r              </Button>\r            )}\r          </Space>\r        }\r      >\r        {selectedItem && (\r          <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\r            <Alert\r              message={selectedItem.description}\r              type={selectedItem.completed ? 'success' : 'info'}\r              showIcon\r            />\r            {selectedItem.required && !selectedItem.completed && (\r              <Alert\r                message=\"Zorunlu Adım\"\r                description=\"Bu adım canlıya geçiş için tamamlanmalıdır.\"\r                type=\"warning\"\r                showIcon\r              />\r            )}\r            {selectedItem.completed && (\r              <Alert\r                message=\"Tamamlandı\"\r                description=\"Bu adım başarıyla tamamlandı.\"\r                type=\"success\"\r                showIcon\r                icon={<CheckCircleOutlined />}\r              />\r            )}\r            <Divider />\r            <div>\r              <Title level={5}>Yapılması Gerekenler</Title>\r              <Timeline>\r                <Timeline.Item color=\"blue\">Gerekli bilgileri girin</Timeline.Item>\r                <Timeline.Item color=\"blue\">Ayarları yapılandırın</Timeline.Item>\r                <Timeline.Item color=\"blue\">Değişiklikleri kaydedin</Timeline.Item>\r                <Timeline.Item color=\"green\">Tamamlandı olarak işaretleyin</Timeline.Item>\r              </Timeline>\r            </div>\r            {selectedItem.helpLink && (\r              <Button\r                type=\"link\"\r                icon={<InfoCircleOutlined />}\r                href={selectedItem.helpLink}\r                target=\"_blank\"\r               aria-label=\"info circle outlined\">\r                Yardım Dokümantasyonu\r              </Button>\r            )}\r          </Space>\r        )}\r      </Drawer>\r    </div>\r  );\r};\rexport default SetupChecklist;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/tenant/setup/components/SetupChecklist/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Steps,\r  Button,\r  Progress,\r  Space,\r  Typography,\r  Alert,\r  Spin,\r  Result,\r  Badge,\r  Row,\r  Col,\r  Divider,\r  message\r} from 'antd';\rimport {\r  CheckCircleOutlined,\r  ClockCircleOutlined,\r  LoadingOutlined,\r  RocketOutlined,\r  SettingOutlined,\r  TeamOutlined,\r  ShopOutlined,\r  SafetyOutlined,\r  AppstoreOutlined,\r  DatabaseOutlined,\r  CloudUploadOutlined,\r  CheckOutlined,\r  ArrowLeftOutlined,\r  ArrowRightOutlined,\r  PauseCircleOutlined,\r  PlayCircleOutlined,\r  QuestionCircleOutlined\r} from '@ant-design/icons';\rimport { apiClient } from '@/shared/api/client';\rimport './styles.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Step } = Steps;\rinterface SetupWizardProps {\r  tenantId: string;\r  onComplete?: () => void;\r}\rinterface WizardStep {\r  key: string;\r  title: string;\r  description: string;\r  icon: React.ReactNode;\r  component: React.ReactNode;\r  required: boolean;\r  category: 'basic' | 'organization' | 'modules' | 'advanced' | 'review';\r}\rconst SetupWizard: React.FC<SetupWizardProps> = ({ tenantId, onComplete }) => {\r  const [loading, setLoading] = useState(true);\r  const [wizardData, setWizardData] = useState<any>(null);\r  const [currentStep, setCurrentStep] = useState(0);\r  const [saving, setSaving] = useState(false);\r  const [needsHelp, setNeedsHelp] = useState(false);\r  const wizardSteps: WizardStep[] = [\r    {\r      key: 'company',\r      title: 'Şirket Bilgileri',\r      description: 'Temel şirket bilgilerini tamamlayın',\r      icon: <ShopOutlined />,\r      component: null, // Will be implemented\r      required: true,\r      category: 'basic'\r    },\r    {\r      key: 'organization',\r      title: 'Organizasyon Yapısı',\r      description: 'Departman ve şubeleri oluşturun',\r      icon: <TeamOutlined />,\r      component: null,\r      required: false,\r      category: 'organization'\r    },\r    {\r      key: 'users',\r      title: 'Kullanıcılar',\r      description: 'Kullanıcıları davet edin ve roller atayın',\r      icon: <TeamOutlined />,\r      component: null,\r      required: true,\r      category: 'organization'\r    },\r    {\r      key: 'modules',\r      title: 'Modül Seçimi',\r      description: 'İhtiyacınız olan modülleri seçin',\r      icon: <AppstoreOutlined />,\r      component: null,\r      required: true,\r      category: 'modules'\r    },\r    {\r      key: 'finance',\r      title: 'Mali Ayarlar',\r      description: 'Hesap planı ve vergi ayarları',\r      icon: <DatabaseOutlined />,\r      component: null,\r      required: true,\r      category: 'modules'\r    },\r    {\r      key: 'security',\r      title: 'Güvenlik',\r      description: 'Güvenlik politikalarını yapılandırın',\r      icon: <SafetyOutlined />,\r      component: null,\r      required: true,\r      category: 'advanced'\r    },\r    {\r      key: 'integrations',\r      title: 'Entegrasyonlar',\r      description: 'Dış sistemlerle bağlantı kurun',\r      icon: <CloudUploadOutlined />,\r      component: null,\r      required: false,\r      category: 'advanced'\r    },\r    {\r      key: 'review',\r      title: 'Gözden Geçir',\r      description: 'Ayarları kontrol edin ve onaylayın',\r      icon: <CheckCircleOutlined />,\r      component: null,\r      required: true,\r      category: 'review'\r    }\r  ];\r  useEffect(() => {\r    fetchWizardData();\r  }, [tenantId]);\r  const fetchWizardData = async () => {\r    try {\r      setLoading(true);\r      const response = await apiClient.get(`/api/public/tenant-registration/wizard/${tenantId}`);\r      if (response.data?.success) {\r        setWizardData(response.data.data);\r        setCurrentStep(response.data.data.currentStep - 1);\r      }\r    } catch (error) {\r      message.error('Kurulum bilgileri yüklenemedi');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleNext = async () => {\r    try {\r      setSaving(true);\r      const response = await apiClient.put(`/api/public/tenant-registration/wizard/${wizardData.id}/step`, {\r        action: 'complete',\r        stepData: {} // Current step data\r      });\r      if (response.data?.success) {\r        setWizardData(response.data.data);\r        if (currentStep < wizardSteps.length - 1) {\r          setCurrentStep(currentStep + 1);\r        } else {\r          message.success('Kurulum tamamlandı!');\r          onComplete?.();\r        }\r      }\r    } catch (error) {\r      message.error('İşlem sırasında hata oluştu');\r    } finally {\r      setSaving(false);\r    }\r  };\r  const handlePrevious = () => {\r    if (currentStep > 0) {\r      setCurrentStep(currentStep - 1);\r    }\r  };\r  const handleSkip = async () => {\r    const currentStepData = wizardSteps[currentStep];\r    if (!currentStepData.required) {\r      try {\r        setSaving(true);\r        await apiClient.put(`/api/public/tenant-registration/wizard/${wizardData.id}/step`, {\r          action: 'skip',\r          reason: 'User skipped optional step'\r        });\r        if (currentStep < wizardSteps.length - 1) {\r          setCurrentStep(currentStep + 1);\r        }\r        message.info('Adım atlandı');\r      } catch (error) {\r        message.error('İşlem sırasında hata oluştu');\r      } finally {\r        setSaving(false);\r      }\r    }\r  };\r  const handleRequestHelp = async () => {\r    setNeedsHelp(true);\r    try {\r      await apiClient.put(`/api/public/tenant-registration/wizard/${wizardData.id}/step`, {\r        action: 'requestHelp',\r        notes: `Help requested for step: ${wizardSteps[currentStep].title}`\r      });\r      message.success('Yardım talebiniz alındı. En kısa sürede size dönüş yapılacak.');\r    } catch (error) {\r    }\r  };\r  const getStepStatus = (stepIndex: number) => {\r    if (!wizardData) return 'wait';\r    if (stepIndex < wizardData.completedSteps) return 'finish';\r    if (stepIndex === currentStep) return 'process';\r    if (stepIndex > currentStep) return 'wait';\r    return 'wait';\r  };\r  const getProgressColor = () => {\r    const progress = wizardData?.progressPercentage || 0;\r    if (progress < 30) return '#ff4d4f';\r    if (progress < 60) return '#faad14';\r    if (progress < 90) return '#52c41a';\r    return '#1890ff';\r  };\r  if (loading) {\r    return (\r      <Card className=\"setup-wizard-loading\">\r        <Spin size=\"large\" indicator={<LoadingOutlined style={{ fontSize: 48 }} />} />\r        <Title level={4} style={{ marginTop: 24 }}>Kurulum hazırlanıyor...</Title>\r      </Card>\r    );\r  }\r  if (!wizardData) {\r    return (\r      <Result\r        status=\"404\"\r        title=\"Kurulum Bulunamadı\"\r        subTitle=\"Bu tenant için kurulum sihirbazı bulunamadı.\"\r        extra={<Button type=\"primary\" onClick={fetchWizardData}>Tekrar Dene</Button>}\r      />\r    );\r  }\r  const currentStepData = wizardSteps[currentStep];\r  return (\r    <div className=\"setup-wizard-container\">\r      <Card className=\"wizard-header-card\">\r        <Row align=\"middle\" justify=\"space-between\">\r          <Col>\r            <Space direction=\"vertical\" size={0}>\r              <Title level={3} style={{ margin: 0 }}>\r                <RocketOutlined /> Kurulum Sihirbazı\r              </Title>\r              <Text type=\"secondary\">\r                Sistemi kullanmaya başlamak için gerekli adımları tamamlayın\r              </Text>\r            </Space>\r          </Col>\r          <Col>\r            <Space>\r              <Badge status={wizardData.status === 'InProgress' ? 'processing' : 'success'} />\r              <Text>{wizardData.status === 'Completed' ? 'Tamamlandı' : 'Devam Ediyor'}</Text>\r            </Space>\r          </Col>\r        </Row>\r        <Divider />\r        <Row gutter={[16, 16]}>\r          <Col xs={24} lg={18}>\r            <Progress\r              percent={wizardData.progressPercentage}\r              strokeColor={getProgressColor()}\r              format={(percent) => (\r                <span style={{ fontSize: '14px', fontWeight: 500 }}>\r                  %{Math.round(percent || 0)}\r                </span>\r              )}\r            />\r            <Space style={{ marginTop: 8 }}>\r              <Text type=\"secondary\">\r                {wizardData.completedSteps} / {wizardData.totalSteps} adım tamamlandı\r              </Text>\r              {wizardData.estimatedCompletionTime && (\r                <>\r                  <Divider type=\"vertical\" />\r                  <ClockCircleOutlined />\r                  <Text type=\"secondary\">\r                    Tahmini süre: {wizardData.estimatedCompletionTime}\r                  </Text>\r                </>\r              )}\r            </Space>\r          </Col>\r          <Col xs={24} lg={6} style={{ textAlign: 'right' }}>\r            {needsHelp && (\r              <Alert\r                message=\"Yardım Talep Edildi\"\r                type=\"info\"\r                showIcon\r                closable\r                onClose={() => setNeedsHelp(false)}\r              />\r            )}\r            <Button\r              icon={<QuestionCircleOutlined />}\r              onClick={handleRequestHelp}\r              disabled={needsHelp}\r             aria-label=\"question circle outlined\">\r              Yardım İste\r            </Button>\r          </Col>\r        </Row>\r      </Card>\r      <Card className=\"wizard-content-card\">\r        <Steps current={currentStep} className=\"wizard-steps\">\r          {wizardSteps.map((step, index) => (\r            <Step\r              key={step.key}\r              title={step.title}\r              description={step.description}\r              icon={step.icon}\r              status={getStepStatus(index)}\r            />\r          ))}\r        </Steps>\r        <div className=\"wizard-step-content\">\r          <Card className=\"step-detail-card\">\r            <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\r              <div className=\"step-header\">\r                <Space>\r                  <div className=\"step-icon\">{currentStepData.icon}</div>\r                  <div>\r                    <Title level={4} style={{ margin: 0 }}>\r                      {currentStepData.title}\r                    </Title>\r                    <Text type=\"secondary\">{currentStepData.description}</Text>\r                  </div>\r                </Space>\r                {currentStepData.required && (\r                  <Badge color=\"red\" text=\"Zorunlu\" />\r                )}\r              </div>\r              <Divider />\r              {/* Step component will be rendered here */}\r              <div className=\"step-component-container\">\r                {currentStepData.component || (\r                  <Alert\r                    message=\"Bu adım henüz hazır değil\"\r                    description=\"İlgili bileşen yakında eklenecek\"\r                    type=\"info\"\r                    showIcon\r                  />\r                )}\r              </div>\r            </Space>\r          </Card>\r        </div>\r        <div className=\"wizard-actions\">\r          <Button\r            size=\"large\"\r            onClick={handlePrevious}\r            disabled={currentStep === 0}\r            icon={<ArrowLeftOutlined />}\r           aria-label=\"arrow left outlined\">\r            Önceki\r          </Button>\r          <Space>\r            {!currentStepData.required && currentStep < wizardSteps.length - 1 && (\r              <Button\r                size=\"large\"\r                onClick={handleSkip}\r                disabled={saving}\r              >\r                Atla\r              </Button>\r            )}\r            <Button\r              type=\"primary\"\r              size=\"large\"\r              onClick={handleNext}\r              loading={saving}\r              icon={currentStep === wizardSteps.length - 1 ? <CheckOutlined /> : <ArrowRightOutlined />}\r             aria-label=\"button\">\r              {currentStep === wizardSteps.length - 1 ? 'Kurulumu Tamamla' : 'İleri'}\r            </Button>\r          </Space>\r        </div>\r      </Card>\r    </div>\r  );\r};\rexport default SetupWizard;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/tenant/setup/components/SetupWizard/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport {\r  Card,\r  Tabs,\r  Button,\r  Space,\r  Typography,\r  Divider,\r  Alert,\r  Form,\r  Input,\r  Switch,\r  Badge,\r  message,\r  Modal,\r  Row,\r  Col,\r  Collapse,\r  Tag\r} from 'antd';\rimport {\r  SafetyOutlined,\r  LockOutlined,\r  MailOutlined,\r  GiftOutlined,\r  MessageOutlined,\r  GlobalOutlined,\r  RocketOutlined,\r  MobileOutlined,\r  CheckCircleOutlined,\r  BugOutlined,\r  ExperimentOutlined,\r  SettingOutlined\r} from '@ant-design/icons';\r// Import all features\rimport { Captcha, CaptchaV3 } from '../../../auth/components/Captcha';\rimport { useRateLimit, useBruteForceProtection } from '../../../auth/hooks/useRateLimit';\rimport { TwoFactorSetup, TwoFactorVerify } from '../../../auth/components/TwoFactorAuth';\rimport { EmailVerification, EmailVerificationModal } from '../../../auth/components/EmailVerification';\rimport { useFormAutoSave, useAutoSaveStatus } from '../../../auth/hooks/useFormAutoSave';\rimport { FormProgress, CircularProgress } from '../../../auth/components/FormProgress';\rimport { SocialLogin, QuickSocialLogin } from '../../../auth/components/SocialLogin';\rimport { ReferralInput, ReferralShare, ReferralStats } from '../../../auth/components/ReferralCode';\rimport { LiveChat } from '../../../support/components/LiveChat';\r// import { useTranslation } from '../../../i18n';\rimport { OnboardingTour, OnboardingChecklist } from '../../../onboarding/components/OnboardingTour';\rimport { usePWAInstall, useOfflineDetection } from '../../../pwa/serviceWorkerRegistration';\rimport { useBiometricAuth } from '../../../auth/services/biometric';\rimport { analytics } from '../../../auth/services/analytics';\rimport { useLazyLoad, useLazyImage } from '../../../auth/hooks/useLazyLoad';\rimport { useOptimisticUI } from '../../../auth/hooks/useOptimisticUI';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst { Panel } = Collapse;\rconst FeatureTestPage: React.FC = () => {\r  const [activeTab, setActiveTab] = useState('security');\r  // const { t, changeLanguage, currentLanguage } = useTranslation();\r  const t = (key: string) => key; // Mock translation\r  const changeLanguage = (lang: string) => \r  const currentLanguage = 'tr';\r  // Test states\r  const [show2FA, setShow2FA] = useState(false);\r  const [showEmailVerification, setShowEmailVerification] = useState(false);\r  const [showLiveChat, setShowLiveChat] = useState(false);\r  const [startTour, setStartTour] = useState(false);\r  // Form data for auto-save test\r  const [formData, setFormData] = useState({\r    name: '',\r    email: '',\r    phone: '',\r    company: ''\r  });\r  // Hooks\r  const { checkLimit, isBlocked, remainingAttempts } = useRateLimit({\r    maxAttempts: 5,\r    windowMs: 60000,\r    storageKey: 'test_rate_limit'\r  });\r  const { saveData, restoreData, lastSaveTime, isSaving } = useFormAutoSave(formData, {\r    storageKey: 'test_form_autosave',\r    debounceMs: 1000\r  });\r  const autoSaveStatus = useAutoSaveStatus(lastSaveTime, isSaving);\r  const { isInstallable, isInstalled, install } = usePWAInstall();\r  const isOnline = useOfflineDetection();\r  const { isAvailable: biometricAvailable, register: registerBiometric, authenticate: authenticateBiometric } = useBiometricAuth();\r  const { data: optimisticData, applyOptimisticUpdate, rollback } = useOptimisticUI({ count: 0 });\r  // Test functions\r  const testRateLimit = () => {\r    if (checkLimit()) {\r      message.success(`İstek gönderildi! Kalan deneme: ${remainingAttempts}`);\r    }\r  };\r  const testAnalytics = () => {\r    analytics.track('test_event', {\r      feature: 'analytics',\r      action: 'button_click'\r    });\r    message.success('Analytics event gönderildi! (Console\\'u kontrol edin)');\r  };\r  const testOptimisticUI = () => {\r    applyOptimisticUpdate((current: any) => ({\r      ...current,\r      count: current.count + 1\r    }));\r    message.info(`Optimistic update: ${optimisticData.count + 1}`);\r    // Simulate rollback after 2 seconds\r    setTimeout(() => {\r      rollback();\r      message.warning('Update rolled back!');\r    }, 2000);\r  };\r  const testBiometric = async () => {\r    if (!biometricAvailable) {\r      message.error('Biometric authentication mevcut değil!');\r      return;\r    }\r    try {\r      await registerBiometric('test-user', 'test@example.com');\r      message.success('Biometric kaydedildi!');\r      const result = await authenticateBiometric();\r      if (result?.verified) {\r        message.success('Biometric doğrulama başarılı!');\r      }\r    } catch (error) {\r      message.error('Biometric test başarısız!');\r    }\r  };\r  // Tour steps\r  const tourSteps = [\r    {\r      target: '.test-security-tab',\r      title: 'Güvenlik Özellikleri',\r      content: 'Bu sekmede güvenlik özelliklerini test edebilirsiniz.'\r    },\r    {\r      target: '.test-ux-tab',\r      title: 'UX İyileştirmeleri',\r      content: 'Kullanıcı deneyimi özelliklerini buradan test edin.'\r    },\r    {\r      target: '.test-performance-tab',\r      title: 'Performans',\r      content: 'Performans optimizasyonlarını test edin.'\r    }\r  ];\r  // Checklist items\r  const checklistItems = [\r    { id: '1', title: 'CAPTCHA Test Et', completed: false, required: true },\r    { id: '2', title: '2FA Kur', completed: false, required: true },\r    { id: '3', title: 'E-posta Doğrula', completed: false },\r    { id: '4', title: 'Sosyal Giriş Dene', completed: false },\r    { id: '5', title: 'PWA Yükle', completed: false }\r  ];\r  return (\r    <div style={{ padding: 24, maxWidth: 1400, margin: '0 auto' }}>\r      <Card>\r        <div style={{ marginBottom: 24 }}>\r          <Title level={2}>\r            <ExperimentOutlined /> Feature Test Dashboard\r          </Title>\r          <Paragraph>\r            Tüm eklenen özellikleri bu sayfadan test edebilirsiniz.\r          </Paragraph>\r          {/* Status Badges */}\r          <Space wrap style={{ marginTop: 16 }}>\r            <Badge status={isOnline ? 'success' : 'error'} text={isOnline ? 'Online' : 'Offline'} />\r            <Badge status={isInstalled ? 'success' : 'default'} text={isInstalled ? 'PWA Yüklü' : 'PWA Yüklenmemiş'} />\r            <Badge status={biometricAvailable ? 'success' : 'error'} text={biometricAvailable ? 'Biometric Mevcut' : 'Biometric Yok'} />\r            <Tag color=\"blue\">Dil: {currentLanguage.toUpperCase()}</Tag>\r          </Space>\r        </div>\r        <Tabs activeKey={activeTab} onChange={setActiveTab}>\r          {/* Security Features */}\r          <TabPane \r            tab={<span className=\"test-security-tab\"><SafetyOutlined /> Güvenlik</span>} \r            key=\"security\"\r          >\r            <Row gutter={[16, 16]}>\r              <Col xs={24} md={12}>\r                <Card title=\"🔐 CAPTCHA / reCAPTCHA\" size=\"small\">\r                  <Alert\r                    message=\"Not: reCAPTCHA için geçerli site key gerekli\"\r                    type=\"info\"\r                    showIcon\r                    style={{ marginBottom: 16 }}\r                  />\r                  <Captcha\r                    siteKey=\"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\" // Test key\r                    onVerify={(token) => message.success(`Token: ${token.substring(0, 20)}...`)}\r                    onError={() => message.error('CAPTCHA doğrulanamadı')}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"⚡ Rate Limiting\" size=\"small\">\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <Alert\r                      message={`Kalan deneme: ${remainingAttempts}/5`}\r                      type={isBlocked ? 'error' : 'warning'}\r                    />\r                    <Button \r                      onClick={testRateLimit}\r                      disabled={isBlocked}\r                      type=\"primary\"\r                    >\r                      Test Rate Limit\r                    </Button>\r                    {isBlocked && <Text type=\"danger\">Çok fazla deneme! Bekleyin...</Text>}\r                  </Space>\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"🔑 Two-Factor Authentication\" size=\"small\">\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <Button onClick={() => setShow2FA(true)} type=\"primary\">\r                      2FA Kurulumu Başlat\r                    </Button>\r                    <Text type=\"secondary\">Authenticator app veya SMS ile</Text>\r                  </Space>\r                  <TwoFactorSetup\r                    visible={show2FA}\r                    onClose={() => setShow2FA(false)}\r                    onComplete={(method, data) => {\r                      message.success(`2FA etkinleştirildi: ${method}`);\r                      setShow2FA(false);\r                    }}\r                    userEmail=\"test@example.com\"\r                    userPhone=\"+90 555 123 4567\"\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"✉️ E-posta Doğrulama\" size=\"small\">\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <Button onClick={() => setShowEmailVerification(true)} type=\"primary\">\r                      E-posta Doğrulama Test\r                    </Button>\r                    <Text type=\"secondary\">Test kodu: 123456</Text>\r                  </Space>\r                  <EmailVerificationModal\r                    visible={showEmailVerification}\r                    email=\"test@example.com\"\r                    onClose={() => setShowEmailVerification(false)}\r                    onVerified={() => {\r                      message.success('E-posta doğrulandı!');\r                      setShowEmailVerification(false);\r                    }}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"🔒 Biometric Authentication\" size=\"small\">\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    <Button \r                      onClick={testBiometric}\r                      disabled={!biometricAvailable}\r                      type=\"primary\"\r                    >\r                      Test Biometric (Touch ID/Face ID)\r                    </Button>\r                    {!biometricAvailable && (\r                      <Alert message=\"Cihazınız biometric desteklemiyor\" type=\"warning\" />\r                    )}\r                  </Space>\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          {/* UX Features */}\r          <TabPane \r            tab={<span className=\"test-ux-tab\"><RocketOutlined /> UX Özellikleri</span>} \r            key=\"ux\"\r          >\r            <Row gutter={[16, 16]}>\r              <Col xs={24} md={12}>\r                <Card title=\"💾 Form Auto-Save\" size=\"small\">\r                  <Form layout=\"vertical\">\r                    <Form.Item label=\"Ad Soyad\">\r                      <Input\r                        value={formData.name}\r                        onChange={(e) = aria-label=\"input field\"> setFormData({...formData, name: e.target.value})}\r                        placeholder=\"Test için yazın...\"\r                      />\r                    </Form.Item>\r                    <Form.Item label=\"E-posta\">\r                      <Input\r                        value={formData.email}\r                        onChange={(e) = aria-label=\"input field\"> setFormData({...formData, email: e.target.value})}\r                        placeholder=\"Otomatik kaydedilecek...\"\r                      />\r                    </Form.Item>\r                  </Form>\r                  <Text type=\"secondary\">{autoSaveStatus}</Text>\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"📊 Form Progress\" size=\"small\">\r                  <FormProgress\r                    fields={[\r                      { name: 'name', label: 'Ad', value: formData.name, required: true },\r                      { name: 'email', label: 'E-posta', value: formData.email, required: true },\r                      { name: 'phone', label: 'Telefon', value: formData.phone },\r                      { name: 'company', label: 'Şirket', value: formData.company }\r                    ]}\r                    showDetails={true}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"🌐 Social Login\" size=\"small\">\r                  <SocialLogin\r                    providers={['google', 'microsoft', 'linkedin']}\r                    layout=\"vertical\"\r                    size=\"middle\"\r                    onSuccess={(provider, data) => message.success(`${provider} login simulated`)}\r                    onError={(provider, error) => message.error(`${provider} login failed`)}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"🎁 Referral System\" size=\"small\">\r                  <ReferralInput\r                    placeholder=\"WELCOME20 veya FRIEND50 deneyin\"\r                    onValidate={async (code) => {\r                      message.success(`Referans kodu geçerli: ${code}`);\r                      return null;\r                    }}\r                  />\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"💬 Live Chat\" size=\"small\">\r                  <Button onClick={() => setShowLiveChat(!showLiveChat)} type=\"primary\">\r                    {showLiveChat ? 'Chat Kapat' : 'Chat Aç'}\r                  </Button>\r                  {showLiveChat && <LiveChat position=\"bottom-right\" />}\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"🌍 Multi-Language\" size=\"small\">\r                  <Space>\r                    <Button onClick={() => changeLanguage('tr')} type={currentLanguage === 'tr' ? 'primary' : 'default'}>\r                      🇹🇷 Türkçe\r                    </Button>\r                    <Button onClick={() => changeLanguage('en')} type={currentLanguage === 'en' ? 'primary' : 'default'}>\r                      🇬🇧 English\r                    </Button>\r                  </Space>\r                  <Divider />\r                  <Text>{t('common.welcome')}</Text>\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          {/* Performance Features */}\r          <TabPane \r            tab={<span className=\"test-performance-tab\"><SettingOutlined /> Performans</span>} \r            key=\"performance\"\r          >\r            <Row gutter={[16, 16]}>\r              <Col xs={24} md={12}>\r                <Card title=\"🚀 Lazy Loading\" size=\"small\">\r                  <Text>Scroll yaparak lazy loading test edin</Text>\r                  <div style={{ height: 200, overflow: 'auto', border: '1px solid #f0f0f0', marginTop: 16 }}>\r                    <div style={{ height: 500, padding: 16 }}>\r                      <LazyLoadedComponent />\r                    </div>\r                  </div>\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"⚡ Optimistic UI\" size=\"small\">\r                  <Space direction=\"vertical\">\r                    <Text>Count: {optimisticData.count}</Text>\r                    <Button onClick={testOptimisticUI} type=\"primary\">\r                      Test Optimistic Update\r                    </Button>\r                    <Text type=\"secondary\">2 saniye sonra rollback olacak</Text>\r                  </Space>\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"📈 Analytics\" size=\"small\">\r                  <Button onClick={testAnalytics} type=\"primary\">\r                    Send Analytics Event\r                  </Button>\r                  <Text type=\"secondary\" style={{ display: 'block', marginTop: 8 }}>\r                    Console'u kontrol edin\r                  </Text>\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"📱 PWA Support\" size=\"small\">\r                  <Space direction=\"vertical\" style={{ width: '100%' }}>\r                    {isInstallable && (\r                      <Button onClick={install} type=\"primary\">\r                        PWA Olarak Yükle\r                      </Button>\r                    )}\r                    {isInstalled && (\r                      <Alert message=\"PWA yüklü!\" type=\"success\" />\r                    )}\r                    {!isInstallable && !isInstalled && (\r                      <Alert message=\"PWA yüklenemez (HTTPS gerekli)\" type=\"warning\" />\r                    )}\r                  </Space>\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          {/* Onboarding */}\r          <TabPane tab={<span><BugOutlined /> Onboarding</span>} key=\"onboarding\">\r            <Row gutter={[16, 16]}>\r              <Col xs={24} md={12}>\r                <Card title=\"🎯 Onboarding Tour\" size=\"small\">\r                  <Button \r                    onClick={() => setStartTour(true)} \r                    type=\"primary\"\r                  >\r                    Turu Başlat\r                  </Button>\r                  {startTour && (\r                    <OnboardingTour\r                      steps={tourSteps}\r                      autoStart={true}\r                      onComplete={() => {\r                        message.success('Tur tamamlandı!');\r                        setStartTour(false);\r                      }}\r                      onSkip={() => setStartTour(false)}\r                    />\r                  )}\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <OnboardingChecklist\r                  items={checklistItems}\r                  onItemComplete={(id) => message.success(`Görev ${id} tamamlandı!`)}\r                />\r              </Col>\r            </Row>\r          </TabPane>\r        </Tabs>\r      </Card>\r      {/* Quick Test Panel */}\r      <Card style={{ marginTop: 24 }}>\r        <Title level={4}>Hızlı Test Paneli</Title>\r        <Space direction=\"vertical\" style={{ width: '100%' }}>\r          <Alert\r            message=\"Test Bilgileri\"\r            description={\r              <ul>\r                <li>CAPTCHA Test Key: 6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI</li>\r                <li>E-posta Doğrulama Kodu: 123456</li>\r                <li>Referans Kodları: WELCOME20, FRIEND50</li>\r                <li>Rate Limit: 5 deneme / dakika</li>\r              </ul>\r            }\r            type=\"info\"\r            showIcon\r          />\r          <Divider />\r          <Title level={5}>Diğer Test Sayfaları</Title>\r          <Space wrap>\r            <Button type=\"primary\" onClick={() => window.location.href = '/test-wizard'}>\r              Register Wizard Test\r            </Button>\r            <Button onClick={() => window.location.href = '/signalr-test'}>\r              SignalR Test\r            </Button>\r            <Button onClick={() => window.location.href = '/test-sweetalert'}>\r              SweetAlert Test\r            </Button>\r          </Space>\r        </Space>\r      </Card>\r    </div>\r  );\r};\r// Lazy loaded component for testing\rconst LazyLoadedComponent: React.FC = () => {\r  const { ref, isLoaded } = useLazyLoad({ threshold: 0.1 });\r  return (\r    <div ref={ref as any} style={{ marginTop: 400 }}>\r      {isLoaded ? (\r        <Alert message=\"Component yüklendi!\" type=\"success\" />\r      ) : (\r        <Text>Scroll yapın...</Text>\r      )}\r    </div>\r  );\r};\r// Default export\rexport default FeatureTestPage;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/test/pages/FeatureTestPage/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport {\r  Card,\r  Tabs,\r  Button,\r  Space,\r  Typography,\r  Alert,\r  Form,\r  Input,\r  Badge,\r  message,\r  Row,\r  Col,\r  Progress,\r  Divider\r} from 'antd';\rimport {\r  SafetyOutlined,\r  RocketOutlined,\r  SettingOutlined,\r  ExperimentOutlined,\r  CheckCircleOutlined\r} from '@ant-design/icons';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rconst SimpleFeatureTest: React.FC = () => {\r  const [activeTab, setActiveTab] = useState('overview');\r  const [testResults, setTestResults] = useState<Record<string, boolean>>({});\r  // Test form data\r  const [formData, setFormData] = useState({\r    name: '',\r    email: '',\r    password: '',\r    company: ''\r  });\r  const runTest = (testName: string, testFn: () => boolean) => {\r    try {\r      const result = testFn();\r      setTestResults(prev => ({ ...prev, [testName]: result }));\r      if (result) {\r        message.success(`${testName} testi başarılı!`);\r      } else {\r        message.error(`${testName} testi başarısız!`);\r      }\r    } catch (error) {\r      message.error(`${testName} test hatası: ${error}`);\r      setTestResults(prev => ({ ...prev, [testName]: false }));\r    }\r  };\r  const completedTests = Object.values(testResults).filter(r => r).length;\r  const totalTests = Object.keys(testResults).length;\r  const progress = totalTests > 0 ? (completedTests / totalTests) * 100 : 0;\r  return (\r    <div style={{ padding: 24, maxWidth: 1200, margin: '0 auto' }}>\r      <Card>\r        <div style={{ marginBottom: 24 }}>\r          <Title level={2}>\r            <ExperimentOutlined /> Özellik Test Sayfası\r          </Title>\r          <Paragraph>\r            Tüm eklenen özellikleri buradan test edebilirsiniz.\r          </Paragraph>\r          {totalTests > 0 && (\r            <>\r              <Progress percent={Math.round(progress)} status={progress === 100 ? 'success' : 'active'} />\r              <Text>{completedTests}/{totalTests} test tamamlandı</Text>\r            </>\r          )}\r        </div>\r        <Tabs activeKey={activeTab} onChange={setActiveTab}>\r          {/* Overview Tab */}\r          <TabPane tab={<span><CheckCircleOutlined /> Genel Bakış</span>} key=\"overview\">\r            <Alert\r              message=\"Eklenen Özellikler\"\r              description={\r                <ul>\r                  <li>✅ CAPTCHA/reCAPTCHA entegrasyonu</li>\r                  <li>✅ Rate limiting</li>\r                  <li>✅ 2FA (Two-Factor Authentication)</li>\r                  <li>✅ E-posta doğrulama</li>\r                  <li>✅ Şifre göster/gizle</li>\r                  <li>✅ Form auto-save</li>\r                  <li>✅ Progress indicator</li>\r                  <li>✅ Sosyal medya girişi</li>\r                  <li>✅ Lazy loading</li>\r                  <li>✅ Optimistic UI</li>\r                  <li>✅ Analytics</li>\r                  <li>✅ Referans sistemi</li>\r                  <li>✅ Canlı destek</li>\r                  <li>✅ Çoklu dil desteği</li>\r                  <li>✅ Onboarding tour</li>\r                  <li>✅ PWA desteği</li>\r                  <li>✅ Biometric authentication</li>\r                </ul>\r              }\r              type=\"success\"\r              showIcon\r            />\r            <Divider />\r            <Title level={4}>Hızlı Testler</Title>\r            <Space wrap>\r              <Button \r                type=\"primary\"\r                onClick={() => runTest('LocalStorage', () => {\r                  localStorage.setItem('test', 'value');\r                  return localStorage.getItem('test') === 'value';\r                })}\r              >\r                LocalStorage Test\r              </Button>\r              <Button \r                type=\"primary\"\r                onClick={() => runTest('SessionStorage', () => {\r                  sessionStorage.setItem('test', 'value');\r                  return sessionStorage.getItem('test') === 'value';\r                })}\r              >\r                SessionStorage Test\r              </Button>\r              <Button \r                type=\"primary\"\r                onClick={() => runTest('Notification', () => {\r                  return 'Notification' in window;\r                })}\r              >\r                Notification API Test\r              </Button>\r              <Button \r                type=\"primary\"\r                onClick={() => runTest('ServiceWorker', () => {\r                  return 'serviceWorker' in navigator;\r                })}\r              >\r                Service Worker Test\r              </Button>\r              <Button \r                type=\"primary\"\r                onClick={() => runTest('WebAuthn', () => {\r                  return !!window.PublicKeyCredential;\r                })}\r              >\r                WebAuthn Test\r              </Button>\r            </Space>\r          </TabPane>\r          {/* Security Tab */}\r          <TabPane tab={<span><SafetyOutlined /> Güvenlik</span>} key=\"security\">\r            <Row gutter={[16, 16]}>\r              <Col xs={24} md={12}>\r                <Card title=\"Rate Limiting\" size=\"small\">\r                  <Alert\r                    message=\"Test: Butona 5 kez tıklayın\"\r                    type=\"info\"\r                    style={{ marginBottom: 16 }}\r                  />\r                  <RateLimitTest />\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"Password Strength\" size=\"small\">\r                  <PasswordStrengthTest />\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"Form Validation\" size=\"small\">\r                  <FormValidationTest />\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          {/* UX Tab */}\r          <TabPane tab={<span><RocketOutlined /> UX</span>} key=\"ux\">\r            <Row gutter={[16, 16]}>\r              <Col xs={24} md={12}>\r                <Card title=\"Form Auto-Save\" size=\"small\">\r                  <Form layout=\"vertical\">\r                    <Form.Item label=\"İsim\">\r                      <Input\r                        value={formData.name}\r                        onChange={(e) = aria-label=\"input field\"> {\r                          const newData = { ...formData, name: e.target.value };\r                          setFormData(newData);\r                          // Simulate auto-save\r                          localStorage.setItem('formData', JSON.stringify(newData));\r                          message.info('Otomatik kaydedildi', 0.5);\r                        }}\r                        placeholder=\"Yazın, otomatik kaydedilecek...\"\r                      />\r                    </Form.Item>\r                  </Form>\r                  <Button \r                    onClick={() => {\r                      const saved = localStorage.getItem('formData');\r                      if (saved) {\r                        setFormData(JSON.parse(saved));\r                        message.success('Form verileri geri yüklendi');\r                      }\r                    }}\r                  >\r                    Geri Yükle\r                  </Button>\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"Progress Indicator\" size=\"small\">\r                  <FormProgressTest formData={formData} />\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r          {/* Performance Tab */}\r          <TabPane tab={<span><SettingOutlined /> Performans</span>} key=\"performance\">\r            <Row gutter={[16, 16]}>\r              <Col xs={24} md={12}>\r                <Card title=\"Browser Info\" size=\"small\">\r                  <BrowserInfoTest />\r                </Card>\r              </Col>\r              <Col xs={24} md={12}>\r                <Card title=\"Network Status\" size=\"small\">\r                  <NetworkStatusTest />\r                </Card>\r              </Col>\r            </Row>\r          </TabPane>\r        </Tabs>\r      </Card>\r    </div>\r  );\r};\r// Sub-components for testing\rconst RateLimitTest: React.FC = () => {\r  const [clicks, setClicks] = useState(0);\r  const [blocked, setBlocked] = useState(false);\r  const maxClicks = 5;\r  const handleClick = () => {\r    if (clicks >= maxClicks) {\r      setBlocked(true);\r      message.error('Rate limit aşıldı! 5 saniye bekleyin.');\r      setTimeout(() => {\r        setClicks(0);\r        setBlocked(false);\r      }, 5000);\r      return;\r    }\r    setClicks(clicks + 1);\r    message.info(`Tıklama: ${clicks + 1}/${maxClicks}`);\r  };\r  return (\r    <Space direction=\"vertical\" style={{ width: '100%' }}>\r      <Progress percent={(clicks / maxClicks) * 100} status={blocked ? 'exception' : 'active'} />\r      <Button onClick={handleClick} disabled={blocked} type=\"primary\">\r        Test Et ({clicks}/{maxClicks})\r      </Button>\r      {blocked && <Alert message=\"Rate limit aktif!\" type=\"error\" />}\r    </Space>\r  );\r};\rconst PasswordStrengthTest: React.FC = () => {\r  const [password, setPassword] = useState('');\r  const getStrength = () => {\r    if (!password) return 0;\r    let strength = 0;\r    if (password.length >= 8) strength += 25;\r    if (/[A-Z]/.test(password)) strength += 25;\r    if (/[0-9]/.test(password)) strength += 25;\r    if (/[^A-Za-z0-9]/.test(password)) strength += 25;\r    return strength;\r  };\r  const strength = getStrength();\r  const strengthText = strength === 0 ? 'Çok Zayıf' : \r                       strength <= 25 ? 'Zayıf' :\r                       strength <= 50 ? 'Orta' :\r                       strength <= 75 ? 'İyi' : 'Güçlü';\r  return (\r    <Space direction=\"vertical\" style={{ width: '100%' }}>\r      <Input.Password\r        value={password}\r        onChange={(e) = aria-label=\"input field\"> setPassword(e.target.value)}\r        placeholder=\"Şifre girin...\"\r      />\r      <Progress \r        percent={strength} \r        status={strength === 100 ? 'success' : strength >= 50 ? 'active' : 'exception'}\r        format={() => strengthText}\r      />\r      <Text type=\"secondary\">\r        ✓ En az 8 karakter {password.length >= 8 && '✓'}<br />\r        ✓ Büyük harf {/[A-Z]/.test(password) && '✓'}<br />\r        ✓ Rakam {/[0-9]/.test(password) && '✓'}<br />\r        ✓ Özel karakter {/[^A-Za-z0-9]/.test(password) && '✓'}\r      </Text>\r    </Space>\r  );\r};\rconst FormValidationTest: React.FC = () => {\r  const [email, setEmail] = useState('');\r  const [isValid, setIsValid] = useState<boolean | null>(null);\r  const validateEmail = (email: string) => {\r    const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r    return re.test(email);\r  };\r  return (\r    <Space direction=\"vertical\" style={{ width: '100%' }}>\r      <Input\r        value={email}\r        onChange={(e) = aria-label=\"input field\"> {\r          setEmail(e.target.value);\r          setIsValid(e.target.value ? validateEmail(e.target.value) : null);\r        }}\r        placeholder=\"E-posta adresi girin...\"\r        status={isValid === false ? 'error' : isValid === true ? 'success' : ''}\r      />\r      {isValid !== null && (\r        <Alert\r          message={isValid ? 'Geçerli e-posta' : 'Geçersiz e-posta'}\r          type={isValid ? 'success' : 'error'}\r          showIcon\r        />\r      )}\r    </Space>\r  );\r};\rconst FormProgressTest: React.FC<{ formData: any }> = ({ formData }) => {\r  const fields = ['name', 'email', 'password', 'company'];\r  const filled = fields.filter(field => formData[field]).length;\r  const progress = (filled / fields.length) * 100;\r  return (\r    <Space direction=\"vertical\" style={{ width: '100%' }}>\r      <Progress percent={progress} status={progress === 100 ? 'success' : 'active'} />\r      <Text>{filled}/{fields.length} alan dolduruldu</Text>\r      <Space>\r        {fields.map(field => (\r          <Badge\r            key={field}\r            status={formData[field] ? 'success' : 'default'}\r            text={field}\r          />\r        ))}\r      </Space>\r    </Space>\r  );\r};\rconst BrowserInfoTest: React.FC = () => {\r  const info = {\r    'User Agent': navigator.userAgent.substring(0, 50) + '...',\r    'Platform': navigator.platform,\r    'Language': navigator.language,\r    'Cookies Enabled': navigator.cookieEnabled ? 'Evet' : 'Hayır',\r    'Online': navigator.onLine ? 'Evet' : 'Hayır',\r    'Screen': `${screen.width}x${screen.height}`,\r  };\r  return (\r    <Space direction=\"vertical\" style={{ width: '100%' }}>\r      {Object.entries(info).map(([key, value]) => (\r        <div key={key}>\r          <Text strong>{key}: </Text>\r          <Text>{value}</Text>\r        </div>\r      ))}\r    </Space>\r  );\r};\rconst NetworkStatusTest: React.FC = () => {\r  const [isOnline, setIsOnline] = useState(navigator.onLine);\r  React.useEffect(() => {\r    const handleOnline = () => setIsOnline(true);\r    const handleOffline = () => setIsOnline(false);\r    window.addEventListener('online', handleOnline);\r    window.addEventListener('offline', handleOffline);\r    return () => {\r      window.removeEventListener('online', handleOnline);\r      window.removeEventListener('offline', handleOffline);\r    };\r  }, []);\r  return (\r    <Space direction=\"vertical\" style={{ width: '100%' }}>\r      <Badge status={isOnline ? 'success' : 'error'} text={isOnline ? 'Online' : 'Offline'} />\r      <Alert\r        message={isOnline ? 'İnternet bağlantısı var' : 'İnternet bağlantısı yok'}\r        type={isOnline ? 'success' : 'error'}\r        showIcon\r      />\r    </Space>\r  );\r};\rexport default SimpleFeatureTest;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/test/pages/FeatureTestPage/SimpleTest.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { Card, Button, Space, Typography, Divider, Tag, Alert } from 'antd';\rimport { ReloadOutlined, ArrowLeftOutlined, CheckCircleOutlined } from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport { ModernWizard } from '@/features/register/pages/RegisterPage/ModernWizard';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rexport const RegisterWizardTest: React.FC = () => {\r  const navigate = useNavigate();\r  const [wizardKey, setWizardKey] = useState(0);\r  const [completedData, setCompletedData] = useState<any>(null);\r  const [showResult, setShowResult] = useState(false);\r  const handleWizardComplete = (data: any) => {\r    setCompletedData(data);\r    setShowResult(true);\r  };\r  const resetWizard = () => {\r    setWizardKey(prev => prev + 1);\r    setCompletedData(null);\r    setShowResult(false);\r  };\r  // Mock package for testing\r  const mockPackage = {\r    id: 'test-package-1',\r    name: 'Test Paketi',\r    description: 'Test için kullanılan paket',\r    price: 999,\r    currency: '₺',\r    features: ['Özellik 1', 'Özellik 2', 'Özellik 3'],\r    maxUsers: 10,\r    maxStorage: 50,\r    modules: ['CRM', 'Inventory']\r  };\r  // Mock SignalR validation (always returns success immediately)\r  const mockSignalRValidation = {\r    isConnected: false, // Disable connection to skip validations\r    emailValidation: { isValid: true, message: 'Test mode - always valid' },\r    passwordStrength: { \r      score: 5, \r      level: 'VeryStrong', \r      color: '#52c41a',\r      suggestions: [],\r      hasUpperCase: true,\r      hasLowerCase: true,\r      hasDigit: true,\r      hasSpecialChar: true\r    },\r    domainCheck: { isAvailable: true, message: 'Test mode - always available' },\r    phoneValidation: { isValid: true, message: 'Test mode - always valid' },\r    companyNameCheck: { isValid: true, isUnique: true, message: 'Test mode - always valid' },\r    identityValidation: { isValid: true, message: 'Test mode - always valid' },\r    tenantCodeValidation: { isAvailable: true, message: 'Test mode - always available', code: '', suggestedCodes: [] },\r    validateEmail: async () => Promise.resolve(),\r    checkPasswordStrength: async () => Promise.resolve(),\r    checkDomain: async () => Promise.resolve(),\r    validatePhone: async () => Promise.resolve(),\r    checkCompanyName: async () => Promise.resolve(),\r    validateIdentity: async () => Promise.resolve(),\r    validateTenantCode: async () => Promise.resolve(),\r    error: null\r  };\r  return (\r    <div className=\"register-wizard-test-container\">\r      <Card className=\"test-header-card\">\r        <Space direction=\"vertical\" style={{ width: '100%' }}>\r          <Space style={{ justifyContent: 'space-between', width: '100%' }}>\r            <Space>\r              <Button \r                icon={<ArrowLeftOutlined />} \r                onClick={() = aria-label=\"arrow left outlined\"> navigate('/test')}\r              >\r                Test Sayfasına Dön\r              </Button>\r            </Space>\r            <Title level={3} style={{ margin: 0 }}>Register Wizard Test</Title>\r            <Space>\r              <Button \r                type=\"primary\" \r                icon={<ReloadOutlined />} \r                onClick={resetWizard}\r               aria-label=\"reload outlined\">\r                Wizard'ı Sıfırla\r              </Button>\r            </Space>\r          </Space>\r          <Divider style={{ margin: '12px 0' }} />\r          <Space wrap>\r            <Tag color=\"blue\">Validasyon Kapalı</Tag>\r            <Tag color=\"green\">Test Modu</Tag>\r            <Tag color=\"orange\">Mock Data</Tag>\r          </Space>\r          <Alert\r            message=\"Test Modu\"\r            description=\"Bu sayfa sadece wizard'ın görsel ve işlevsel testleri içindir. Validasyonlar devre dışı bırakılmıştır.\"\r            type=\"info\"\r            showIcon\r          />\r        </Space>\r      </Card>\r      {!showResult ? (\r        <div className=\"wizard-test-wrapper\">\r          <ModernWizard\r            key={wizardKey}\r            onComplete={handleWizardComplete}\r            selectedPackage={mockPackage}\r            signalRValidation={mockSignalRValidation}\r          />\r        </div>\r      ) : (\r        <Card className=\"result-card\">\r          <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\r            <div style={{ textAlign: 'center' }}>\r              <CheckCircleOutlined style={{ fontSize: 64, color: '#52c41a' }} />\r              <Title level={3} style={{ marginTop: 16 }}>Wizard Tamamlandı!</Title>\r            </div>\r            <Card type=\"inner\" title=\"Toplanan Veriler\">\r              <pre className=\"data-preview\">\r                {JSON.stringify(completedData, null, 2)}\r              </pre>\r            </Card>\r            <Space style={{ width: '100%', justifyContent: 'center' }}>\r              <Button type=\"primary\" onClick={resetWizard}>\r                Yeni Test Başlat\r              </Button>\r              <Button onClick={() => setShowResult(false)}>\r                Wizard'a Geri Dön\r              </Button>\r            </Space>\r          </Space>\r        </Card>\r      )}\r      <Card className=\"test-info-card\">\r        <Title level={4}>Test Bilgileri</Title>\r        <Divider />\r        <Space direction=\"vertical\" style={{ width: '100%' }}>\r          <div>\r            <Text strong>Wizard Durumu:</Text>\r            <Text> {showResult ? 'Tamamlandı' : 'Devam Ediyor'}</Text>\r          </div>\r          <div>\r            <Text strong>Test Sayısı:</Text>\r            <Text> {wizardKey + 1}</Text>\r          </div>\r          <div>\r            <Text strong>Mock Paket:</Text>\r            <Text> {mockPackage.name} - {mockPackage.currency}{mockPackage.price}/ay</Text>\r          </div>\r        </Space>\r        <Divider />\r        <Title level={5}>Test Edilecek Özellikler</Title>\r        <ul className=\"test-checklist\">\r          <li>Step geçişleri</li>\r          <li>Form validasyonları (kapalı)</li>\r          <li>Paket seçimi görünümü</li>\r          <li>Responsive tasarım</li>\r          <li>İleri/Geri butonları</li>\r          <li>Progress bar</li>\r          <li>Form alanları</li>\r          <li>Captcha entegrasyonu</li>\r          <li>E-posta doğrulama</li>\r        </ul>\r      </Card>\r    </div>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/test/pages/RegisterWizardTest/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React from 'react';\rimport { Button, Space } from 'antd';\rimport { showApiResponse } from '@/shared/utils/sweetAlert';\rimport Swal from 'sweetalert2';\rconst TestSweetAlert: React.FC = () => {\r  const testSuccess = () => {\r    showApiResponse.success('İşlem başarıyla tamamlandı!', 'Başarılı');\r  };\r  const testError = () => {\r    showApiResponse.error(\r      {\r        response: {\r          data: {\r            message: 'E-posta adresi zaten kullanımda',\r            errors: {\r              email: ['Bu e-posta adresi başka bir hesap tarafından kullanılıyor'],\r              password: ['Şifre en az 8 karakter olmalı', 'Şifre en az bir büyük harf içermeli']\r            }\r          },\r          status: 400\r        }\r      },\r      'Kayıt işlemi başarısız'\r    );\r  };\r  const testWarning = () => {\r    showApiResponse.warning('Dikkat! Bu işlem geri alınamaz.', 'Uyarı');\r  };\r  const testInfo = () => {\r    showApiResponse.info('Hesabınız 24 saat içinde aktif olacaktır.', 'Bilgilendirme');\r  };\r  const testLoading = () => {\r    showApiResponse.loading('İşleminiz gerçekleştiriliyor...');\r    setTimeout(() => {\r      Swal.close();\r      showApiResponse.success('İşlem tamamlandı!');\r    }, 3000);\r  };\r  const testToast = () => {\r    showApiResponse.toast.success('Ayarlar kaydedildi');\r    setTimeout(() => {\r      showApiResponse.toast.error('Bağlantı hatası');\r    }, 1000);\r    setTimeout(() => {\r      showApiResponse.toast.warning('Disk alanı azalıyor');\r    }, 2000);\r    setTimeout(() => {\r      showApiResponse.toast.info('Yeni güncelleme mevcut');\r    }, 3000);\r  };\r  const testConfirm = async () => {\r    const result = await showApiResponse.confirm(\r      'Bu hesabı silmek istediğinizden emin misiniz?',\r      'Hesap Silme',\r      'Evet, Sil',\r      'İptal'\r    );\r    if (result) {\r      showApiResponse.success('Hesap başarıyla silindi');\r    } else {\r      showApiResponse.info('İşlem iptal edildi');\r    }\r  };\r  const testPrompt = async () => {\r    const result = await showApiResponse.prompt(\r      'Yeni Kategori Oluştur',\r      'Kategori Adı:',\r      'Örn: Elektronik',\r      ''\r    );\r    if (result) {\r      showApiResponse.success(`\"${result}\" kategorisi oluşturuldu`);\r    }\r  };\r  return (\r    <div style={{ padding: '50px', background: '#f5f5f5', minHeight: '100vh' }}>\r      <h1>SweetAlert2 Test Sayfası</h1>\r      <Space direction=\"vertical\" size={20} style={{ width: '100%' }}>\r        <div>\r          <h3>Temel Alert Tipleri</h3>\r          <Space wrap>\r            <Button type=\"primary\" onClick={testSuccess}>Başarı Mesajı</Button>\r            <Button danger onClick={testError}>Hata Mesajı (Detaylı)</Button>\r            <Button onClick={testWarning}>Uyarı Mesajı</Button>\r            <Button onClick={testInfo}>Bilgi Mesajı</Button>\r            <Button onClick={testLoading}>Loading Mesajı</Button>\r          </Space>\r        </div>\r        <div>\r          <h3>Toast Bildirimleri</h3>\r          <Button onClick={testToast}>Toast Mesajları (Sıralı)</Button>\r        </div>\r        <div>\r          <h3>Etkileşimli Dialog'lar</h3>\r          <Space wrap>\r            <Button onClick={testConfirm}>Onay Dialog'u</Button>\r            <Button onClick={testPrompt}>Input Dialog'u</Button>\r          </Space>\r        </div>\r      </Space>\r    </div>\r  );\r};\rexport default TestSweetAlert;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/test/TestSweetAlert.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { Layout, Typography, Card, Row, Col, Button, Tag, Space, Input, Select, Tabs } from 'antd';\rimport {\r  PlayCircleOutlined,\r  BookOutlined,\r  ClockCircleOutlined,\r  UserOutlined,\r  StarOutlined,\r  SearchOutlined,\r  FilterOutlined,\r  RocketOutlined,\r  ArrowLeftOutlined\r} from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport './style.css';\rconst { Header, Content } = Layout;\rconst { Title, Text, Paragraph } = Typography;\rconst { Search } = Input;\rconst { Option } = Select;\rinterface Video {\r  id: number;\r  title: string;\r  description: string;\r  duration: string;\r  category: string;\r  level: 'Başlangıç' | 'Orta' | 'İleri';\r  thumbnail: string;\r  instructor: string;\r  views: number;\r  rating: number;\r}\rinterface Tutorial {\r  id: number;\r  title: string;\r  description: string;\r  readTime: string;\r  category: string;\r  level: 'Başlangıç' | 'Orta' | 'İleri';\r  author: string;\r  date: string;\r}\rexport const TrainingPage: React.FC = () => {\r  const navigate = useNavigate();\r  const [searchText, setSearchText] = useState('');\r  const [selectedCategory, setSelectedCategory] = useState('all');\r  const [selectedLevel, setSelectedLevel] = useState('all');\r  const [activeTab, setActiveTab] = useState('videos');\r  const videos: Video[] = [\r    {\r      id: 1,\r      title: \"Stocker'a Başlarken\",\r      description: 'Platform hakkında genel bilgiler ve ilk adımlar',\r      duration: '12:45',\r      category: 'Genel',\r      level: 'Başlangıç',\r      thumbnail: 'https://images.unsplash.com/photo-1611162617474-5b21e879e113?w=400&h=225&fit=crop',\r      instructor: 'Ahmet Yılmaz',\r      views: 1250,\r      rating: 4.8\r    },\r    {\r      id: 2,\r      title: 'Stok Yönetimi Modülü',\r      description: 'Stok takibi, envanter yönetimi ve raporlama',\r      duration: '25:30',\r      category: 'Modüller',\r      level: 'Orta',\r      thumbnail: 'https://images.unsplash.com/photo-1586281380349-632531db7ed4?w=400&h=225&fit=crop',\r      instructor: 'Mehmet Demir',\r      views: 890,\r      rating: 4.7\r    },\r    {\r      id: 3,\r      title: 'CRM Modülü Detaylı Anlatım',\r      description: 'Müşteri ilişkileri yönetimi ve satış süreçleri',\r      duration: '32:15',\r      category: 'Modüller',\r      level: 'Orta',\r      thumbnail: 'https://images.unsplash.com/photo-1552664730-d307ca884978?w=400&h=225&fit=crop',\r      instructor: 'Ayşe Kara',\r      views: 1120,\r      rating: 4.9\r    },\r    {\r      id: 4,\r      title: 'Muhasebe Entegrasyonları',\r      description: 'e-Fatura, e-Arşiv ve muhasebe sistemleri entegrasyonu',\r      duration: '18:20',\r      category: 'Entegrasyonlar',\r      level: 'İleri',\r      thumbnail: 'https://images.unsplash.com/photo-1554224155-6726b3ff858f?w=400&h=225&fit=crop',\r      instructor: 'Fatma Şahin',\r      views: 650,\r      rating: 4.6\r    },\r    {\r      id: 5,\r      title: 'Raporlama ve Analizler',\r      description: 'Özel raporlar oluşturma ve veri analizi',\r      duration: '28:40',\r      category: 'Raporlama',\r      level: 'İleri',\r      thumbnail: 'https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=400&h=225&fit=crop',\r      instructor: 'Ali Veli',\r      views: 780,\r      rating: 4.8\r    },\r    {\r      id: 6,\r      title: 'İnsan Kaynakları Modülü',\r      description: 'Personel yönetimi, bordro ve izin takibi',\r      duration: '22:10',\r      category: 'Modüller',\r      level: 'Orta',\r      thumbnail: 'https://images.unsplash.com/photo-1521737711867-e3b97375f902?w=400&h=225&fit=crop',\r      instructor: 'Zeynep Yıldız',\r      views: 540,\r      rating: 4.7\r    }\r  ];\r  const tutorials: Tutorial[] = [\r    {\r      id: 1,\r      title: 'Hızlı Başlangıç Rehberi',\r      description: 'Stocker platformunu kullanmaya başlamak için ihtiyacınız olan temel bilgiler',\r      readTime: '5 dk',\r      category: 'Başlangıç',\r      level: 'Başlangıç',\r      author: 'Stocker Team',\r      date: '2024-01-15'\r    },\r    {\r      id: 2,\r      title: 'Gelişmiş Stok Yönetimi Teknikleri',\r      description: 'ABC analizi, minimum-maksimum stok seviyeleri ve otomatik sipariş sistemleri',\r      readTime: '12 dk',\r      category: 'İleri Düzey',\r      level: 'İleri',\r      author: 'Dr. Mehmet Özkan',\r      date: '2024-01-12'\r    },\r    {\r      id: 3,\r      title: 'API Kullanımı ve Entegrasyonlar',\r      description: 'REST API ile özel entegrasyonlar geliştirme',\r      readTime: '15 dk',\r      category: 'Geliştirici',\r      level: 'İleri',\r      author: 'Teknik Ekip',\r      date: '2024-01-10'\r    },\r    {\r      id: 4,\r      title: 'Satış Süreci Optimizasyonu',\r      description: 'CRM modülü ile satış süreçlerinizi optimize etme yöntemleri',\r      readTime: '8 dk',\r      category: 'Satış',\r      level: 'Orta',\r      author: 'Satış Uzmanları',\r      date: '2024-01-08'\r    }\r  ];\r  const categories = [\r    { value: 'all', label: 'Tüm Kategoriler' },\r    { value: 'general', label: 'Genel' },\r    { value: 'modules', label: 'Modüller' },\r    { value: 'integrations', label: 'Entegrasyonlar' },\r    { value: 'reporting', label: 'Raporlama' },\r    { value: 'developer', label: 'Geliştirici' }\r  ];\r  const levels = [\r    { value: 'all', label: 'Tüm Seviyeler' },\r    { value: 'beginner', label: 'Başlangıç' },\r    { value: 'intermediate', label: 'Orta' },\r    { value: 'advanced', label: 'İleri' }\r  ];\r  const getLevelColor = (level: string) => {\r    switch (level) {\r      case 'Başlangıç': return 'green';\r      case 'Orta': return 'blue';\r      case 'İleri': return 'purple';\r      default: return 'default';\r    }\r  };\r  return (\r    <Layout className=\"training-layout\">\r      <Header className=\"training-header\">\r        <div className=\"header-container\">\r          <div className=\"header-content\">\r            <Button \r              icon={<ArrowLeftOutlined />} \r              onClick={() = aria-label=\"arrow left outlined\"> navigate('/')}\r              type=\"text\"\r              style={{ marginRight: 16 }}\r            >\r              Ana Sayfa\r            </Button>\r            <div className=\"logo-section\" onClick={() => navigate('/')} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => navigate('/')(e)}>\r              <RocketOutlined className=\"logo-icon\" />\r              <span className=\"logo-text\">Stocker Eğitim Merkezi</span>\r            </div>\r          </div>\r          <div className=\"header-actions\">\r            <Button onClick={() => navigate('/login')}>Giriş Yap</Button>\r            <Button type=\"primary\" onClick={() => navigate('/register')}>\r              Ücretsiz Dene\r            </Button>\r          </div>\r        </div>\r      </Header>\r      <Content className=\"training-content\">\r        <div className=\"hero-section\">\r          <Title level={1}>Eğitim ve Video Rehberleri</Title>\r          <Paragraph>\r            Stocker platformunu en verimli şekilde kullanmanız için hazırladığımız \r            kapsamlı eğitim içerikleri ve video rehberleri\r          </Paragraph>\r        </div>\r        <div className=\"filter-section\">\r          <Row gutter={[16, 16]} align=\"middle\">\r            <Col xs={24} sm={8}>\r              <Search\r                placeholder=\"Eğitim ara...\"\r                onSearch={setSearchText}\r                onChange={(e) => setSearchText(e.target.value)}\r                prefix={<SearchOutlined />}\r                size=\"large\"\r              />\r            </Col>\r            <Col xs={12} sm={4}>\r              <Select\r                defaultValue=\"all\"\r                style={{ width: '100%' }}\r                onChange={setSelectedCategory}\r                size=\"large\"\r               aria-label=\"select field\">\r                {categories.map(cat => (\r                  <Option key={cat.value} value={cat.value}>{cat.label}</Option>\r                ))}\r              </Select>\r            </Col>\r            <Col xs={12} sm={4}>\r              <Select\r                defaultValue=\"all\"\r                style={{ width: '100%' }}\r                onChange={setSelectedLevel}\r                size=\"large\"\r               aria-label=\"select field\">\r                {levels.map(level => (\r                  <Option key={level.value} value={level.value}>{level.label}</Option>\r                ))}\r              </Select>\r            </Col>\r          </Row>\r        </div>\r        <Tabs \r          activeKey={activeTab} \r          onChange={setActiveTab}\r          size=\"large\"\r          className=\"content-tabs\"\r        >\r          <Tabs.TabPane tab={<span><PlayCircleOutlined /> Video Eğitimler</span>} key=\"videos\">\r            <Row gutter={[24, 24]}>\r              {videos.map(video => (\r                <Col xs={24} sm={12} lg={8} key={video.id}>\r                  <Card \r                    hoverable\r                    cover={\r                      <div className=\"video-thumbnail\">\r                        <img alt={video.title} src={video.thumbnail} />\r                        <div className=\"duration-badge\">{video.duration}</div>\r                        <PlayCircleOutlined className=\"play-icon\" />\r                      </div>\r                    }\r                    className=\"video-card\"\r                  >\r                    <Tag color={getLevelColor(video.level)}>{video.level}</Tag>\r                    <Title level={4}>{video.title}</Title>\r                    <Paragraph ellipsis={{ rows: 2 }}>{video.description}</Paragraph>\r                    <div className=\"video-meta\">\r                      <Space>\r                        <Text type=\"secondary\">\r                          <UserOutlined /> {video.instructor}\r                        </Text>\r                        <Text type=\"secondary\">•</Text>\r                        <Text type=\"secondary\">{video.views} görüntülenme</Text>\r                      </Space>\r                      <div className=\"rating\">\r                        <StarOutlined style={{ color: '#faad14' }} />\r                        <Text strong>{video.rating}</Text>\r                      </div>\r                    </div>\r                  </Card>\r                </Col>\r              ))}\r            </Row>\r          </Tabs.TabPane>\r          <Tabs.TabPane tab={<span><BookOutlined /> Yazılı Rehberler</span>} key=\"tutorials\">\r            <Row gutter={[24, 24]}>\r              {tutorials.map(tutorial => (\r                <Col xs={24} sm={12} lg={8} key={tutorial.id}>\r                  <Card hoverable className=\"tutorial-card\">\r                    <Space direction=\"vertical\" style={{ width: '100%' }}>\r                      <div>\r                        <Tag color={getLevelColor(tutorial.level)}>{tutorial.level}</Tag>\r                        <Tag><ClockCircleOutlined /> {tutorial.readTime}</Tag>\r                      </div>\r                      <Title level={4}>{tutorial.title}</Title>\r                      <Paragraph ellipsis={{ rows: 2 }}>{tutorial.description}</Paragraph>\r                      <div className=\"tutorial-meta\">\r                        <Text type=\"secondary\">\r                          <UserOutlined /> {tutorial.author}\r                        </Text>\r                        <Text type=\"secondary\">{tutorial.date}</Text>\r                      </div>\r                      <Button type=\"primary\" block>Okumaya Başla</Button>\r                    </Space>\r                  </Card>\r                </Col>\r              ))}\r            </Row>\r          </Tabs.TabPane>\r        </Tabs>\r        <div className=\"cta-section\">\r          <Card>\r            <Row align=\"middle\" gutter={24}>\r              <Col xs={24} md={16}>\r                <Title level={3}>Daha Fazla Eğitim İçeriğine Mi İhtiyacınız Var?</Title>\r                <Paragraph>\r                  Canlı eğitimlerimize katılın veya özel eğitim talebinde bulunun.\r                </Paragraph>\r              </Col>\r              <Col xs={24} md={8} style={{ textAlign: 'right' }}>\r                <Space>\r                  <Button size=\"large\">Canlı Eğitimler</Button>\r                  <Button type=\"primary\" size=\"large\">İletişime Geç</Button>\r                </Space>\r              </Col>\r            </Row>\r          </Card>\r        </div>\r      </Content>\r    </Layout>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/training/pages/TrainingPage/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport {\r  Card,\r  Table,\r  Button,\r  Space,\r  Tag,\r  Input,\r  Select,\r  Modal,\r  Form,\r  Row,\r  Col,\r  Avatar,\r  Dropdown,\r  message,\r  Tooltip,\r  Badge,\r  Switch,\r  Divider,\r  Typography,\r  Descriptions,\r  Alert,\r  Popconfirm,\r  Timeline,\r  Tabs,\r  List,\r  Statistic,\r} from 'antd';\rimport {\r  UserAddOutlined,\r  SearchOutlined,\r  EditOutlined,\r  DeleteOutlined,\r  MoreOutlined,\r  LockOutlined,\r  UnlockOutlined,\r  MailOutlined,\r  PhoneOutlined,\r  TeamOutlined,\r  SafetyOutlined,\r  KeyOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  ExclamationCircleOutlined,\r  ReloadOutlined,\r  DownloadOutlined,\r  UserOutlined,\r  CalendarOutlined,\r  ClockCircleOutlined,\r  EyeOutlined,\r  EyeInvisibleOutlined,\r} from '@ant-design/icons';\rimport { PageHeader } from '@/shared/components/PageHeader';\rimport { DataTable } from '@/shared/components/DataTable';\rimport { formatDate, formatPhoneNumber } from '@/shared/utils/formatters';\rimport { formRules } from '@/shared/utils/validators';\rimport type { ColumnsType } from 'antd/es/table';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rconst { Option } = Select;\rconst { TabPane } = Tabs;\rinterface User {\r  id: string;\r  email: string;\r  firstName: string;\r  lastName: string;\r  fullName: string;\r  phoneNumber?: string;\r  role: string;\r  department?: string;\r  title?: string;\r  isActive: boolean;\r  emailVerified: boolean;\r  lastLogin?: string;\r  createdAt: string;\r  avatar?: string;\r  permissions?: string[];\r}\rinterface UserFormData {\r  email: string;\r  firstName: string;\r  lastName: string;\r  phoneNumber?: string;\r  role: string;\r  department?: string;\r  title?: string;\r  password?: string;\r  confirmPassword?: string;\r  sendWelcomeEmail?: boolean;\r}\rexport const TenantUsers: React.FC = () => {\r  const [users, setUsers] = useState<User[]>([]);\r  const [loading, setLoading] = useState(false);\r  const [searchText, setSearchText] = useState('');\r  const [selectedRole, setSelectedRole] = useState<string>('all');\r  const [selectedStatus, setSelectedStatus] = useState<string>('all');\r  const [selectedUser, setSelectedUser] = useState<User | null>(null);\r  const [isModalVisible, setIsModalVisible] = useState(false);\r  const [isDetailModalVisible, setIsDetailModalVisible] = useState(false);\r  const [isPasswordModalVisible, setIsPasswordModalVisible] = useState(false);\r  const [editingUser, setEditingUser] = useState<User | null>(null);\r  const [form] = Form.useForm();\r  const [passwordForm] = Form.useForm();\r  // Mock data\r  const mockUsers: User[] = [\r    {\r      id: '1',\r      email: 'admin@company.com',\r      firstName: 'Ahmet',\r      lastName: 'Yılmaz',\r      fullName: 'Ahmet Yılmaz',\r      phoneNumber: '+90 532 111 2233',\r      role: 'Admin',\r      department: 'Yönetim',\r      title: 'Genel Müdür',\r      isActive: true,\r      emailVerified: true,\r      lastLogin: '2024-01-15T10:30:00',\r      createdAt: '2023-06-01T00:00:00',\r      permissions: ['users.create', 'users.edit', 'users.delete', 'invoices.*', 'settings.*'],\r    },\r    {\r      id: '2',\r      email: 'muhasebe@company.com',\r      firstName: 'Ayşe',\r      lastName: 'Demir',\r      fullName: 'Ayşe Demir',\r      phoneNumber: '+90 533 444 5566',\r      role: 'Accountant',\r      department: 'Muhasebe',\r      title: 'Muhasebe Uzmanı',\r      isActive: true,\r      emailVerified: true,\r      lastLogin: '2024-01-15T09:15:00',\r      createdAt: '2023-07-15T00:00:00',\r      permissions: ['invoices.*', 'reports.view'],\r    },\r    {\r      id: '3',\r      email: 'satis@company.com',\r      firstName: 'Mehmet',\r      lastName: 'Kaya',\r      fullName: 'Mehmet Kaya',\r      phoneNumber: '+90 534 777 8899',\r      role: 'Sales',\r      department: 'Satış',\r      title: 'Satış Temsilcisi',\r      isActive: true,\r      emailVerified: false,\r      lastLogin: '2024-01-14T16:45:00',\r      createdAt: '2023-09-01T00:00:00',\r      permissions: ['customers.*', 'orders.create', 'orders.view'],\r    },\r    {\r      id: '4',\r      email: 'depo@company.com',\r      firstName: 'Fatma',\r      lastName: 'Öz',\r      fullName: 'Fatma Öz',\r      phoneNumber: '+90 535 222 3344',\r      role: 'Staff',\r      department: 'Depo',\r      title: 'Depo Sorumlusu',\r      isActive: false,\r      emailVerified: true,\r      lastLogin: '2024-01-10T11:20:00',\r      createdAt: '2023-10-01T00:00:00',\r      permissions: ['inventory.*'],\r    },\r  ];\r  useEffect(() => {\r    fetchUsers();\r  }, []);\r  const fetchUsers = async () => {\r    setLoading(true);\r    try {\r      // API çağrısı yapılacak\r      // const response = await userService.getTenantUsers();\r      // setUsers(response.data);\r      // Mock data kullan\r      setTimeout(() => {\r        setUsers(mockUsers);\r        setLoading(false);\r      }, 1000);\r    } catch (error) {\r      message.error('Kullanıcılar yüklenemedi');\r      setLoading(false);\r    }\r  };\r  const handleCreateUser = () => {\r    setEditingUser(null);\r    form.resetFields();\r    setIsModalVisible(true);\r  };\r  const handleEditUser = (user: User) => {\r    setEditingUser(user);\r    form.setFieldsValue({\r      ...user,\r      sendWelcomeEmail: false,\r    });\r    setIsModalVisible(true);\r  };\r  const handleDeleteUser = async (userId: string) => {\r    try {\r      // await userService.deleteUser(userId);\r      message.success('Kullanıcı silindi');\r      fetchUsers();\r    } catch (error) {\r      message.error('Kullanıcı silinemedi');\r    }\r  };\r  const handleToggleUserStatus = async (userId: string, isActive: boolean) => {\r    try {\r      // await userService.toggleUserStatus(userId, isActive);\r      message.success(isActive ? 'Kullanıcı aktifleştirildi' : 'Kullanıcı pasifleştirildi');\r      fetchUsers();\r    } catch (error) {\r      message.error('İşlem başarısız');\r    }\r  };\r  const handleResetPassword = async (values: any) => {\r    try {\r      // await userService.resetUserPassword(selectedUser?.id, values.newPassword);\r      message.success('Şifre güncellendi');\r      setIsPasswordModalVisible(false);\r      passwordForm.resetFields();\r    } catch (error) {\r      message.error('Şifre güncellenemedi');\r    }\r  };\r  const handleModalOk = async () => {\r    try {\r      const values = await form.validateFields();\r      if (editingUser) {\r        // await userService.updateUser(editingUser.id, values);\r        message.success('Kullanıcı güncellendi');\r      } else {\r        // await userService.createUser(values);\r        message.success('Kullanıcı oluşturuldu');\r        if (values.sendWelcomeEmail) {\r          message.info('Hoşgeldin e-postası gönderildi');\r        }\r      }\r      setIsModalVisible(false);\r      form.resetFields();\r      fetchUsers();\r    } catch (error) {\r      // Handle form validation error silently\r    }\r  };\r  const handleViewDetails = (user: User) => {\r    setSelectedUser(user);\r    setIsDetailModalVisible(true);\r  };\r  const handlePasswordModal = (user: User) => {\r    setSelectedUser(user);\r    passwordForm.resetFields();\r    setIsPasswordModalVisible(true);\r  };\r  const getRoleColor = (role: string) => {\r    const colors: Record<string, string> = {\r      Admin: 'red',\r      Accountant: 'blue',\r      Sales: 'green',\r      Staff: 'default',\r      Manager: 'purple',\r    };\r    return colors[role] || 'default';\r  };\r  const getStatusBadge = (isActive: boolean) => {\r    return isActive ? (\r      <Badge status=\"success\" text=\"Aktif\" />\r    ) : (\r      <Badge status=\"error\" text=\"Pasif\" />\r    );\r  };\r  const columns: ColumnsType<User> = [\r    {\r      title: 'Kullanıcı',\r      key: 'user',\r      fixed: 'left',\r      width: 280,\r      render: (_, record) => (\r        <Space>\r          <Avatar \r            size={40} \r            style={{ backgroundColor: '#667eea' }}\r            icon={<UserOutlined />}\r          >\r            {record.firstName[0]}{record.lastName[0]}\r          </Avatar>\r          <div>\r            <div>\r              <Text strong>{record.fullName}</Text>\r              {!record.emailVerified && (\r                <Tooltip title=\"E-posta doğrulanmamış\">\r                  <ExclamationCircleOutlined style={{ color: '#faad14', marginLeft: 8 }} />\r                </Tooltip>\r              )}\r            </div>\r            <Text type=\"secondary\" style={{ fontSize: 12 }}>\r              {record.email}\r            </Text>\r          </div>\r        </Space>\r      ),\r    },\r    {\r      title: 'Rol',\r      dataIndex: 'role',\r      key: 'role',\r      width: 120,\r      filters: [\r        { text: 'Admin', value: 'Admin' },\r        { text: 'Muhasebe', value: 'Accountant' },\r        { text: 'Satış', value: 'Sales' },\r        { text: 'Personel', value: 'Staff' },\r      ],\r      render: (role) => (\r        <Tag color={getRoleColor(role)}>\r          {role === 'Admin' ? 'Yönetici' :\r           role === 'Accountant' ? 'Muhasebe' :\r           role === 'Sales' ? 'Satış' :\r           role === 'Staff' ? 'Personel' : role}\r        </Tag>\r      ),\r    },\r    {\r      title: 'Departman',\r      dataIndex: 'department',\r      key: 'department',\r      width: 120,\r      render: (department) => department || '-',\r    },\r    {\r      title: 'Ünvan',\r      dataIndex: 'title',\r      key: 'title',\r      width: 150,\r      ellipsis: true,\r      render: (title) => title || '-',\r    },\r    {\r      title: 'Telefon',\r      dataIndex: 'phoneNumber',\r      key: 'phoneNumber',\r      width: 140,\r      render: (phone) => formatPhoneNumber(phone) || '-',\r    },\r    {\r      title: 'Son Giriş',\r      dataIndex: 'lastLogin',\r      key: 'lastLogin',\r      width: 150,\r      sorter: true,\r      render: (date) => date ? (\r        <Tooltip title={formatDate(date, 'DD.MM.YYYY HH:mm')}>\r          {formatDate(date, 'DD.MM.YYYY')}\r        </Tooltip>\r      ) : '-',\r    },\r    {\r      title: 'Durum',\r      dataIndex: 'isActive',\r      key: 'isActive',\r      width: 100,\r      filters: [\r        { text: 'Aktif', value: true },\r        { text: 'Pasif', value: false },\r      ],\r      render: (isActive) => getStatusBadge(isActive),\r    },\r    {\r      title: 'İşlemler',\r      key: 'actions',\r      fixed: 'right',\r      width: 120,\r      render: (_, record) => {\r        const items = [\r          {\r            key: 'view',\r            label: 'Detayları Gör',\r            icon: <EyeOutlined />,\r            onClick: () => handleViewDetails(record),\r          },\r          {\r            key: 'edit',\r            label: 'Düzenle',\r            icon: <EditOutlined />,\r            onClick: () => handleEditUser(record),\r          },\r          {\r            key: 'password',\r            label: 'Şifre Değiştir',\r            icon: <KeyOutlined />,\r            onClick: () => handlePasswordModal(record),\r          },\r          {\r            type: 'divider' as const,\r          },\r          {\r            key: 'toggle',\r            label: record.isActive ? 'Pasifleştir' : 'Aktifleştir',\r            icon: record.isActive ? <LockOutlined /> : <UnlockOutlined />,\r            onClick: () => handleToggleUserStatus(record.id, !record.isActive),\r          },\r          {\r            key: 'delete',\r            label: 'Sil',\r            icon: <DeleteOutlined />,\r            danger: true,\r            onClick: () => {\r              Modal.confirm({\r                title: 'Kullanıcıyı Sil',\r                content: `${record.fullName} adlı kullanıcıyı silmek istediğinizden emin misiniz?`,\r                okText: 'Sil',\r                cancelText: 'İptal',\r                okType: 'danger',\r                onOk: () => handleDeleteUser(record.id),\r              });\r            },\r          },\r        ];\r        return (\r          <Dropdown menu={{ items }} trigger={['click']}>\r            <Button type=\"text\" icon={<MoreOutlined />} / aria-label=\"more outlined\">\r          </Dropdown>\r        );\r      },\r    },\r  ];\r  const filteredUsers = users.filter(user => {\r    const matchesSearch = user.fullName.toLowerCase().includes(searchText.toLowerCase()) ||\r                         user.email.toLowerCase().includes(searchText.toLowerCase());\r    const matchesRole = selectedRole === 'all' || user.role === selectedRole;\r    const matchesStatus = selectedStatus === 'all' || \r                          (selectedStatus === 'active' ? user.isActive : !user.isActive);\r    return matchesSearch && matchesRole && matchesStatus;\r  });\r  return (\r    <div className=\"tenant-users-page\">\r      <PageHeader\r        title=\"Kullanıcı Yönetimi\"\r        subtitle={`Toplam ${users.length} kullanıcı`}\r        breadcrumbs={[\r          { title: 'Ana Sayfa', path: '/app/tenant' },\r          { title: 'Kullanıcılar' },\r        ]}\r        extra={\r          <Space>\r            <Button icon={<DownloadOutlined />} aria-label=\"download outlined\">\r              Dışa Aktar\r            </Button>\r            <Button\r              type=\"primary\"\r              icon={<UserAddOutlined />}\r              onClick={handleCreateUser}\r             aria-label=\"user add outlined\">\r              Yeni Kullanıcı\r            </Button>\r          </Space>\r        }\r      />\r      {/* İstatistikler */}\r      <Row gutter={16} style={{ marginBottom: 24 }}>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Toplam Kullanıcı\"\r              value={users.length}\r              prefix={<TeamOutlined />}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Aktif Kullanıcı\"\r              value={users.filter(u => u.isActive).length}\r              prefix={<CheckCircleOutlined />}\r              valueStyle={{ color: '#52c41a' }}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Yönetici\"\r              value={users.filter(u => u.role === 'Admin').length}\r              prefix={<SafetyOutlined />}\r              valueStyle={{ color: '#1890ff' }}\r            />\r          </Card>\r        </Col>\r        <Col xs={24} sm={12} md={6}>\r          <Card>\r            <Statistic\r              title=\"Son 7 Gün Giriş\"\r              value={users.filter(u => {\r                if (!u.lastLogin) return false;\r                const lastLogin = new Date(u.lastLogin);\r                const weekAgo = new Date();\r                weekAgo.setDate(weekAgo.getDate() - 7);\r                return lastLogin > weekAgo;\r              }).length}\r              prefix={<ClockCircleOutlined />}\r            />\r          </Card>\r        </Col>\r      </Row>\r      {/* Filtreler */}\r      <Card style={{ marginBottom: 24 }}>\r        <Row gutter={16}>\r          <Col xs={24} sm={12} md={8}>\r            <Input\r              placeholder=\"Ad, soyad veya email ile ara...\"\r              prefix={<SearchOutlined / aria-label=\"input field\">}\r              value={searchText}\r              onChange={(e) => setSearchText(e.target.value)}\r              allowClear\r            />\r          </Col>\r          <Col xs={24} sm={12} md={8}>\r            <Select\r              style={{ width: '100%' }}\r              placeholder=\"Rol Seçin\"\r              value={selectedRole}\r              onChange={setSelectedRole}\r             aria-label=\"select field\">\r              <Option value=\"all\">Tüm Roller</Option>\r              <Option value=\"Admin\">Yönetici</Option>\r              <Option value=\"Accountant\">Muhasebe</Option>\r              <Option value=\"Sales\">Satış</Option>\r              <Option value=\"Staff\">Personel</Option>\r            </Select>\r          </Col>\r          <Col xs={24} sm={12} md={8}>\r            <Select\r              style={{ width: '100%' }}\r              placeholder=\"Durum Seçin\"\r              value={selectedStatus}\r              onChange={setSelectedStatus}\r             aria-label=\"select field\">\r              <Option value=\"all\">Tüm Durumlar</Option>\r              <Option value=\"active\">Aktif</Option>\r              <Option value=\"inactive\">Pasif</Option>\r            </Select>\r          </Col>\r        </Row>\r      </Card>\r      {/* Kullanıcı Tablosu */}\r      <Card>\r        <Table\r          columns={columns}\r          dataSource={filteredUsers}\r          rowKey=\"id\"\r          loading={loading}\r          scroll={{ x: 1200 }}\r          pagination={{\r            showSizeChanger: true,\r            showTotal: (total) => `Toplam ${total} kullanıcı`,\r          }}\r        />\r      </Card>\r      {/* Kullanıcı Oluştur/Düzenle Modal */}\r      <Modal\r        title={editingUser ? 'Kullanıcı Düzenle' : 'Yeni Kullanıcı'}\r        open={isModalVisible}\r        onOk={handleModalOk}\r        onCancel={() => {\r          setIsModalVisible(false);\r          form.resetFields();\r        }}\r        width={700}\r        okText={editingUser ? 'Güncelle' : 'Oluştur'}\r        cancelText=\"İptal\"\r      >\r        <Form\r          form={form}\r          layout=\"vertical\"\r          initialValues={{\r            role: 'Staff',\r            isActive: true,\r            sendWelcomeEmail: true,\r          }}\r        >\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"firstName\"\r                label=\"Ad\"\r                rules={[formRules.required('Ad zorunludur')]}\r              >\r                <Input placeholder=\"Ad\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"lastName\"\r                label=\"Soyad\"\r                rules={[formRules.required('Soyad zorunludur')]}\r              >\r                <Input placeholder=\"Soyad\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"email\"\r                label=\"E-posta\"\r                rules={[\r                  formRules.required('E-posta zorunludur'),\r                  formRules.email('Geçerli bir e-posta giriniz'),\r                ]}\r              >\r                <Input prefix={<MailOutlined / aria-label=\"input field\">} placeholder=\"ornek@email.com\" />\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item\r                name=\"phoneNumber\"\r                label=\"Telefon\"\r                rules={[formRules.phone()]}\r              >\r                <Input prefix={<PhoneOutlined / aria-label=\"input field\">} placeholder=\"+90 5XX XXX XX XX\" />\r              </Form.Item>\r            </Col>\r          </Row>\r          <Row gutter={16}>\r            <Col span={12}>\r              <Form.Item\r                name=\"role\"\r                label=\"Rol\"\r                rules={[formRules.required('Rol zorunludur')]}\r              >\r                <Select aria-label=\"select field\">\r                  <Option value=\"Admin\">Yönetici</Option>\r                  <Option value=\"Accountant\">Muhasebe</Option>\r                  <Option value=\"Sales\">Satış</Option>\r                  <Option value=\"Staff\">Personel</Option>\r                </Select>\r              </Form.Item>\r            </Col>\r            <Col span={12}>\r              <Form.Item name=\"department\" label=\"Departman\">\r                <Input placeholder=\"Departman\" / aria-label=\"input field\">\r              </Form.Item>\r            </Col>\r          </Row>\r          <Form.Item name=\"title\" label=\"Ünvan\">\r            <Input placeholder=\"Ünvan\" / aria-label=\"input field\">\r          </Form.Item>\r          {!editingUser && (\r            <>\r              <Divider />\r              <Row gutter={16}>\r                <Col span={12}>\r                  <Form.Item\r                    name=\"password\"\r                    label=\"Şifre\"\r                    rules={[\r                      formRules.required('Şifre zorunludur'),\r                      formRules.min(8, 'En az 8 karakter olmalıdır'),\r                    ]}\r                  >\r                    <Input.Password placeholder=\"Şifre\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r                <Col span={12}>\r                  <Form.Item\r                    name=\"confirmPassword\"\r                    label=\"Şifre Tekrar\"\r                    dependencies={['password']}\r                    rules={[\r                      formRules.required('Şifre tekrarı zorunludur'),\r                      ({ getFieldValue }) => ({\r                        validator(_, value) {\r                          if (!value || getFieldValue('password') === value) {\r                            return Promise.resolve();\r                          }\r                          return Promise.reject(new Error('Şifreler eşleşmiyor'));\r                        },\r                      }),\r                    ]}\r                  >\r                    <Input.Password placeholder=\"Şifre Tekrar\" / aria-label=\"input field\">\r                  </Form.Item>\r                </Col>\r              </Row>\r              <Form.Item name=\"sendWelcomeEmail\" valuePropName=\"checked\">\r                <Switch /> Hoşgeldin e-postası gönder\r              </Form.Item>\r            </>\r          )}\r        </Form>\r      </Modal>\r      {/* Şifre Değiştir Modal */}\r      <Modal\r        title=\"Şifre Değiştir\"\r        open={isPasswordModalVisible}\r        onOk={() => passwordForm.submit()}\r        onCancel={() => {\r          setIsPasswordModalVisible(false);\r          passwordForm.resetFields();\r        }}\r        okText=\"Değiştir\"\r        cancelText=\"İptal\"\r      >\r        <Alert\r          message={`${selectedUser?.fullName} için yeni şifre belirleyin`}\r          type=\"info\"\r          showIcon\r          style={{ marginBottom: 16 }}\r        />\r        <Form\r          form={passwordForm}\r          layout=\"vertical\"\r          onFinish={handleResetPassword}\r        >\r          <Form.Item\r            name=\"newPassword\"\r            label=\"Yeni Şifre\"\r            rules={[\r              formRules.required('Yeni şifre zorunludur'),\r              formRules.min(8, 'En az 8 karakter olmalıdır'),\r            ]}\r          >\r            <Input.Password placeholder=\"Yeni şifre\" / aria-label=\"input field\">\r          </Form.Item>\r          <Form.Item\r            name=\"confirmPassword\"\r            label=\"Yeni Şifre Tekrar\"\r            dependencies={['newPassword']}\r            rules={[\r              formRules.required('Şifre tekrarı zorunludur'),\r              ({ getFieldValue }) => ({\r                validator(_, value) {\r                  if (!value || getFieldValue('newPassword') === value) {\r                    return Promise.resolve();\r                  }\r                  return Promise.reject(new Error('Şifreler eşleşmiyor'));\r                },\r              }),\r            ]}\r          >\r            <Input.Password placeholder=\"Yeni şifre tekrar\" / aria-label=\"input field\">\r          </Form.Item>\r        </Form>\r      </Modal>\r      {/* Kullanıcı Detay Modal */}\r      <Modal\r        title=\"Kullanıcı Detayları\"\r        open={isDetailModalVisible}\r        onCancel={() => setIsDetailModalVisible(false)}\r        footer={[\r          <Button key=\"close\" onClick={() => setIsDetailModalVisible(false)}>\r            Kapat\r          </Button>,\r          <Button\r            key=\"edit\"\r            type=\"primary\"\r            icon={<EditOutlined />}\r            onClick={() = aria-label=\"edit outlined\"> {\r              setIsDetailModalVisible(false);\r              handleEditUser(selectedUser!);\r            }}\r          >\r            Düzenle\r          </Button>,\r        ]}\r        width={700}\r      >\r        {selectedUser && (\r          <Tabs defaultActiveKey=\"1\">\r            <TabPane tab=\"Genel Bilgiler\" key=\"1\">\r              <Descriptions bordered column={2}>\r                <Descriptions.Item label=\"Ad Soyad\" span={2}>\r                  <Space>\r                    <Avatar style={{ backgroundColor: '#667eea' }}>\r                      {selectedUser.firstName[0]}{selectedUser.lastName[0]}\r                    </Avatar>\r                    {selectedUser.fullName}\r                  </Space>\r                </Descriptions.Item>\r                <Descriptions.Item label=\"E-posta\">\r                  {selectedUser.email}\r                  {selectedUser.emailVerified ? (\r                    <CheckCircleOutlined style={{ color: '#52c41a', marginLeft: 8 }} />\r                  ) : (\r                    <ExclamationCircleOutlined style={{ color: '#faad14', marginLeft: 8 }} />\r                  )}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Telefon\">\r                  {formatPhoneNumber(selectedUser.phoneNumber) || '-'}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Rol\">\r                  <Tag color={getRoleColor(selectedUser.role)}>\r                    {selectedUser.role}\r                  </Tag>\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Departman\">\r                  {selectedUser.department || '-'}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Ünvan\">\r                  {selectedUser.title || '-'}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Durum\">\r                  {getStatusBadge(selectedUser.isActive)}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Kayıt Tarihi\">\r                  {formatDate(selectedUser.createdAt)}\r                </Descriptions.Item>\r                <Descriptions.Item label=\"Son Giriş\">\r                  {selectedUser.lastLogin ? formatDate(selectedUser.lastLogin, 'DD.MM.YYYY HH:mm') : '-'}\r                </Descriptions.Item>\r              </Descriptions>\r            </TabPane>\r            <TabPane tab=\"Yetkiler\" key=\"2\">\r              <Title level={5}>Rol Yetkileri</Title>\r              <List\r                dataSource={selectedUser.permissions || []}\r                renderItem={(permission) => (\r                  <List.Item>\r                    <Space>\r                      <CheckCircleOutlined style={{ color: '#52c41a' }} />\r                      <Text>{permission}</Text>\r                    </Space>\r                  </List.Item>\r                )}\r                locale={{ emptyText: 'Yetki tanımlanmamış' }}\r              />\r            </TabPane>\r            <TabPane tab=\"Aktivite Geçmişi\" key=\"3\">\r              <Timeline\r                items={[\r                  {\r                    color: 'green',\r                    children: (\r                      <>\r                        <Text strong>Son giriş yapıldı</Text>\r                        <div>\r                          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                            {selectedUser.lastLogin ? formatDate(selectedUser.lastLogin, 'DD.MM.YYYY HH:mm') : '-'}\r                          </Text>\r                        </div>\r                      </>\r                    ),\r                  },\r                  {\r                    color: 'blue',\r                    children: (\r                      <>\r                        <Text strong>Profil güncellendi</Text>\r                        <div>\r                          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                            10.01.2024 14:30\r                          </Text>\r                        </div>\r                      </>\r                    ),\r                  },\r                  {\r                    color: 'gray',\r                    children: (\r                      <>\r                        <Text strong>Hesap oluşturuldu</Text>\r                        <div>\r                          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                            {formatDate(selectedUser.createdAt)}\r                          </Text>\r                        </div>\r                      </>\r                    ),\r                  },\r                ]}\r              />\r            </TabPane>\r          </Tabs>\r        )}\r      </Modal>\r    </div>\r  );\r};\rexport default TenantUsers;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/users/pages/TenantUsers/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { useNavigate, useParams } from 'react-router-dom';\rimport {\r  Card,\r  Typography,\r  Steps,\r  Button,\r  Space,\r  Row,\r  Col,\r  Progress,\r  Avatar,\r  Tag,\r  Divider,\r  Timeline,\r  Alert,\r  Badge,\r  Statistic,\r  Result,\r  Tooltip,\r  notification\r} from 'antd';\rimport {\r  CheckCircleOutlined,\r  RocketOutlined,\r  TeamOutlined,\r  SettingOutlined,\r  DatabaseOutlined,\r  SafetyOutlined,\r  MailOutlined,\r  DashboardOutlined,\r  ShopOutlined,\r  UserAddOutlined,\r  FileTextOutlined,\r  LineChartOutlined,\r  BellOutlined,\r  CrownOutlined,\r  ThunderboltOutlined,\r  GiftOutlined,\r  StarOutlined,\r  TrophyOutlined,\r  ArrowRightOutlined\r} from '@ant-design/icons';\rimport { useAuthStore } from '@/app/store/auth.store';\rimport confetti from 'canvas-confetti';\rimport './style.css';\rconst { Title, Text, Paragraph } = Typography;\rinterface SetupStep {\r  key: string;\r  title: string;\r  description: string;\r  icon: React.ReactNode;\r  status: 'wait' | 'process' | 'finish' | 'error';\r  action?: () => void;\r}\rconst WelcomePage: React.FC = () => {\r  const navigate = useNavigate();\r  const { tenantId } = useParams();\r  const { user } = useAuthStore();\r  const [currentStep, setCurrentStep] = useState(0);\r  const [setupProgress, setSetupProgress] = useState(0);\r  const [emailVerified, setEmailVerified] = useState(false);\r  useEffect(() => {\r    // Trigger confetti animation on mount\r    const duration = 3 * 1000;\r    const animationEnd = Date.now() + duration;\r    const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };\r    function randomInRange(min: number, max: number) {\r      return Math.random() * (max - min) + min;\r    }\r    const interval: any = setInterval(function() {\r      const timeLeft = animationEnd - Date.now();\r      if (timeLeft <= 0) {\r        return clearInterval(interval);\r      }\r      const particleCount = 50 * (timeLeft / duration);\r      confetti({\r        ...defaults,\r        particleCount,\r        origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 }\r      });\r      confetti({\r        ...defaults,\r        particleCount,\r        origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 }\r      });\r    }, 250);\r    // Show welcome notification\r    notification.success({\r      message: 'Hoşgeldiniz!',\r      description: 'Stocker ailesine katıldığınız için teşekkür ederiz. Başarılı bir yolculuk dileriz!',\r      placement: 'topRight',\r      duration: 5,\r      icon: <TrophyOutlined style={{ color: '#52c41a' }} />\r    });\r    return () => clearInterval(interval);\r  }, []);\r  const setupSteps: SetupStep[] = [\r    {\r      key: 'email',\r      title: 'Email Doğrulama',\r      description: 'Email adresinizi doğrulayın',\r      icon: <MailOutlined />,\r      status: emailVerified ? 'finish' : 'process',\r      action: () => {\r        notification.info({\r          message: 'Doğrulama emaili gönderildi',\r          description: 'Lütfen email kutunuzu kontrol edin'\r        });\r      }\r    },\r    {\r      key: 'company',\r      title: 'Şirket Bilgileri',\r      description: 'Şirket profilinizi tamamlayın',\r      icon: <ShopOutlined />,\r      status: 'wait',\r      action: () => navigate(`/app/${tenantId}/settings/company`)\r    },\r    {\r      key: 'users',\r      title: 'Kullanıcılar',\r      description: 'Ekip üyelerinizi davet edin',\r      icon: <UserAddOutlined />,\r      status: 'wait',\r      action: () => navigate(`/app/${tenantId}/users`)\r    },\r    {\r      key: 'products',\r      title: 'Ürünler',\r      description: 'İlk ürünlerinizi ekleyin',\r      icon: <DatabaseOutlined />,\r      status: 'wait',\r      action: () => navigate(`/app/${tenantId}/products`)\r    },\r    {\r      key: 'settings',\r      title: 'Ayarlar',\r      description: 'Sistem ayarlarını yapılandırın',\r      icon: <SettingOutlined />,\r      status: 'wait',\r      action: () => navigate(`/app/${tenantId}/settings`)\r    }\r  ];\r  const quickActions = [\r    {\r      title: 'Dashboard',\r      description: 'Ana kontrol panelinizi görüntüleyin',\r      icon: <DashboardOutlined style={{ fontSize: 32, color: '#1890ff' }} />,\r      color: '#e6f7ff',\r      action: () => navigate(`/app/${tenantId}/dashboard`)\r    },\r    {\r      title: 'CRM',\r      description: 'Müşteri ilişkilerini yönetin',\r      icon: <TeamOutlined style={{ fontSize: 32, color: '#52c41a' }} />,\r      color: '#f6ffed',\r      action: () => navigate(`/app/${tenantId}/crm`)\r    },\r    {\r      title: 'Stok',\r      description: 'Envanter takibi yapın',\r      icon: <DatabaseOutlined style={{ fontSize: 32, color: '#722ed1' }} />,\r      color: '#f9f0ff',\r      action: () => navigate(`/app/${tenantId}/inventory`)\r    },\r    {\r      title: 'Raporlar',\r      description: 'İş analizlerinizi görüntüleyin',\r      icon: <LineChartOutlined style={{ fontSize: 32, color: '#fa8c16' }} />,\r      color: '#fff7e6',\r      action: () => navigate(`/app/${tenantId}/reports`)\r    }\r  ];\r  const features = [\r    {\r      icon: <CrownOutlined />,\r      title: 'Premium Özellikler',\r      description: '30 gün ücretsiz deneme'\r    },\r    {\r      icon: <ThunderboltOutlined />,\r      title: 'Hızlı Başlangıç',\r      description: 'Dakikalar içinde hazır'\r    },\r    {\r      icon: <SafetyOutlined />,\r      title: 'Güvenli Altyapı',\r      description: '256-bit şifreleme'\r    },\r    {\r      icon: <TeamOutlined />,\r      title: '7/24 Destek',\r      description: 'Her zaman yanınızdayız'\r    }\r  ];\r  return (\r    <div className=\"welcome-page\">\r      {/* Hero Section */}\r      <div className=\"welcome-hero\">\r        <Card className=\"hero-card\">\r          <Row align=\"middle\" gutter={32}>\r            <Col xs={24} md={16}>\r              <Space direction=\"vertical\" size=\"large\">\r                <div>\r                  <Title level={1} className=\"hero-title\">\r                    <RocketOutlined style={{ marginRight: 16, color: '#667eea' }} />\r                    Hoşgeldiniz, {user?.fullName}!\r                  </Title>\r                  <Paragraph className=\"hero-description\">\r                    Stocker ile işletmenizi dijitale taşımanın ilk adımını attınız. \r                    Şimdi birkaç basit adımda sisteminizi hazır hale getirelim.\r                  </Paragraph>\r                </div>\r                <Space wrap>\r                  <Tag color=\"blue\" icon={<CheckCircleOutlined />}>\r                    Hesap Aktif\r                  </Tag>\r                  <Tag color=\"green\" icon={<GiftOutlined />}>\r                    30 Gün Ücretsiz Deneme\r                  </Tag>\r                  <Tag color=\"purple\" icon={<StarOutlined />}>\r                    Premium Paket\r                  </Tag>\r                </Space>\r                <div className=\"hero-actions\">\r                  <Button \r                    type=\"primary\" \r                    size=\"large\" \r                    icon={<DashboardOutlined />}\r                    onClick={() = aria-label=\"dashboard outlined\"> navigate(`/app/${tenantId}/dashboard`)}\r                  >\r                    Dashboard'a Git\r                  </Button>\r                  <Button \r                    size=\"large\" \r                    icon={<FileTextOutlined />}\r                    onClick={() = aria-label=\"file text outlined\"> window.open('/docs', '_blank')}\r                  >\r                    Dokümantasyon\r                  </Button>\r                </div>\r              </Space>\r            </Col>\r            <Col xs={24} md={8}>\r              <div className=\"progress-card\">\r                <Progress\r                  type=\"circle\"\r                  percent={setupProgress}\r                  width={180}\r                  strokeColor={{\r                    '0%': '#667eea',\r                    '100%': '#764ba2'\r                  }}\r                  format={percent => (\r                    <div className=\"progress-content\">\r                      <div className=\"progress-value\">{percent}%</div>\r                      <div className=\"progress-label\">Tamamlandı</div>\r                    </div>\r                  )}\r                />\r              </div>\r            </Col>\r          </Row>\r        </Card>\r      </div>\r      {/* Setup Steps */}\r      <Card title=\"Kurulum Adımları\" className=\"setup-card\">\r        <Timeline mode=\"left\">\r          {setupSteps.map((step, index) => (\r            <Timeline.Item\r              key={step.key}\r              color={step.status === 'finish' ? 'green' : step.status === 'process' ? 'blue' : 'gray'}\r              dot={step.icon}\r            >\r              <Card \r                size=\"small\" \r                className={`step-card ${step.status}`}\r                hoverable={step.status !== 'finish'}\r                onClick={step.action}\r              >\r                <Row align=\"middle\" justify=\"space-between\">\r                  <Col span={20}>\r                    <Space direction=\"vertical\" size={0}>\r                      <Text strong>{step.title}</Text>\r                      <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                        {step.description}\r                      </Text>\r                    </Space>\r                  </Col>\r                  <Col span={4} style={{ textAlign: 'right' }}>\r                    {step.status === 'finish' ? (\r                      <CheckCircleOutlined style={{ fontSize: 20, color: '#52c41a' }} />\r                    ) : step.status === 'process' ? (\r                      <Button type=\"primary\" size=\"small\">\r                        Başla\r                      </Button>\r                    ) : (\r                      <Badge status=\"default\" />\r                    )}\r                  </Col>\r                </Row>\r              </Card>\r            </Timeline.Item>\r          ))}\r        </Timeline>\r      </Card>\r      {/* Quick Actions */}\r      <Card title=\"Hızlı Erişim\" className=\"quick-actions-card\">\r        <Row gutter={[16, 16]}>\r          {quickActions.map((action, index) => (\r            <Col xs={24} sm={12} md={6} key={index}>\r              <Card\r                hoverable\r                className=\"action-card\"\r                style={{ backgroundColor: action.color }}\r                onClick={action.action}\r              >\r                <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                  {action.icon}\r                  <Text strong>{action.title}</Text>\r                  <Text type=\"secondary\" style={{ fontSize: 12, textAlign: 'center' }}>\r                    {action.description}\r                  </Text>\r                </Space>\r              </Card>\r            </Col>\r          ))}\r        </Row>\r      </Card>\r      {/* Features */}\r      <Card className=\"features-card\">\r        <Row gutter={[32, 32]}>\r          {features.map((feature, index) => (\r            <Col xs={24} sm={12} md={6} key={index}>\r              <Space direction=\"vertical\" align=\"center\" style={{ width: '100%' }}>\r                <Avatar size={64} style={{ backgroundColor: '#667eea' }}>\r                  {feature.icon}\r                </Avatar>\r                <Text strong>{feature.title}</Text>\r                <Text type=\"secondary\" style={{ textAlign: 'center' }}>\r                  {feature.description}\r                </Text>\r              </Space>\r            </Col>\r          ))}\r        </Row>\r      </Card>\r      {/* Tips */}\r      <Alert\r        message=\"İpucu\"\r        description={\r          <Space direction=\"vertical\">\r            <Text>\r              🎯 İlk 7 gün içinde kurulumu tamamlayan kullanıcılarımız %40 daha verimli çalışıyor.\r            </Text>\r            <Text>\r              📚 Eğitim videolarımızı izleyerek sistemi daha etkin kullanabilirsiniz.\r            </Text>\r            <Text>\r              💬 Herhangi bir sorunuz olursa 7/24 destek ekibimiz yanınızda.\r            </Text>\r          </Space>\r        }\r        type=\"info\"\r        showIcon\r        icon={<BellOutlined />}\r        action={\r          <Button size=\"small\" type=\"primary\">\r            Destek Al\r          </Button>\r        }\r      />\r    </div>\r  );\r};\rexport default WelcomePage;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/features/welcome/pages/WelcomePage/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { Outlet, useNavigate, useLocation } from 'react-router-dom';\rimport { ProLayout, ProLayoutProps } from '@ant-design/pro-components';\rimport {\r  DashboardOutlined,\r  TeamOutlined,\r  AppstoreOutlined,\r  CreditCardOutlined,\r  UserOutlined,\r  BarChartOutlined,\r  SettingOutlined,\r  LogoutOutlined,\r} from '@ant-design/icons';\rimport { Dropdown, Avatar } from 'antd';\rimport { useAuthStore } from '@/app/store/auth.store';\rconst menuItems = [\r  {\r    path: '/admin',\r    name: 'Kontrol Paneli',\r    icon: <DashboardOutlined />,\r  },\r  {\r    path: '/admin/tenants',\r    name: 'Kiracılar',\r    icon: <TeamOutlined />,\r  },\r  {\r    path: '/admin/packages',\r    name: 'Paketler',\r    icon: <AppstoreOutlined />,\r  },\r  {\r    path: '/admin/subscriptions',\r    name: 'Abonelikler',\r    icon: <CreditCardOutlined />,\r  },\r  {\r    path: '/admin/users',\r    name: 'Kullanıcılar',\r    icon: <UserOutlined />,\r  },\r  {\r    path: '/admin/reports',\r    name: 'Raporlar',\r    icon: <BarChartOutlined />,\r  },\r  {\r    path: '/admin/settings',\r    name: 'Ayarlar',\r    icon: <SettingOutlined />,\r  },\r];\rexport const AdminLayout: React.FC = () => {\r  const navigate = useNavigate();\r  const location = useLocation();\r  const { user, logout } = useAuthStore();\r  const [collapsed, setCollapsed] = useState(false);\r  const settings: ProLayoutProps = {\r    title: 'Stocker Admin',\r    logo: 'https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg',\r    layout: 'mix',\r    splitMenus: false,\r    navTheme: 'light',\r    contentWidth: 'Fluid',\r    fixedHeader: true,\r    fixSiderbar: true,\r    colorPrimary: '#667eea',\r    token: {\r      pageContainer: {\r        paddingBlockPageContainerContent: 32,\r        paddingInlinePageContainerContent: 40,\r      },\r      header: {\r        colorBgHeader: '#fff',\r        colorHeaderTitle: '#000',\r        colorTextMenu: '#595959',\r        colorTextMenuSecondary: '#8c8c8c',\r        colorTextMenuSelected: '#667eea',\r        colorBgMenuItemSelected: 'rgba(102, 126, 234, 0.08)',\r        colorTextMenuActive: '#667eea',\r        colorTextRightActionsItem: '#595959',\r      },\r      sider: {\r        colorMenuBackground: '#fff',\r        colorMenuItemDivider: '#f0f0f0',\r        colorBgMenuItemHover: 'rgba(102, 126, 234, 0.04)',\r        colorTextMenu: '#595959',\r        colorTextMenuSelected: '#667eea',\r        colorBgMenuItemSelected: 'rgba(102, 126, 234, 0.08)',\r      },\r    },\r    collapsed,\r    onCollapse: setCollapsed,\r    location: {\r      pathname: location.pathname,\r    },\r    menu: {\r      locale: false,\r      defaultOpenAll: false,\r    },\r    menuItemRender: (item, dom) => (\r      <a\r        onClick={(e) => {\r          e.preventDefault();\r          navigate(item.path || '/');\r        }}\r      >\r        {dom}\r      </a>\r    ),\r    rightContentRender: () => (\r      <div style={{ paddingRight: 16 }}>\r        <Dropdown\r          menu={{\r            items: [\r              {\r                key: 'profile',\r                icon: <UserOutlined />,\r                label: 'Profil',\r                onClick: () => navigate('/admin/profile'),\r              },\r              {\r                key: 'settings',\r                icon: <SettingOutlined />,\r                label: 'Ayarlar',\r                onClick: () => navigate('/admin/settings'),\r              },\r              {\r                type: 'divider',\r              },\r              {\r                key: 'logout',\r                icon: <LogoutOutlined />,\r                label: 'Çıkış Yap',\r                onClick: async () => {\r                  await logout();\r                  navigate('/login');\r                },\r              },\r            ],\r          }}\r        >\r          <div style={{ cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 8 }}>\r            <Avatar size=\"small\" style={{ backgroundColor: '#667eea' }}>\r              {user?.email?.[0]?.toUpperCase() || user?.username?.[0]?.toUpperCase()}\r            </Avatar>\r            <span>{user?.fullName || user?.username}</span>\r          </div>\r        </Dropdown>\r      </div>\r    ),\r    route: {\r      path: '/admin',\r      routes: menuItems,\r    },\r  };\r  return (\r    <ProLayout {...settings}>\r      <Outlet />\r    </ProLayout>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/layouts/AdminLayout/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { Outlet, useNavigate, useLocation, useParams } from 'react-router-dom';\rimport { ProLayout, ProLayoutProps } from '@ant-design/pro-components';\rimport {\r  DashboardOutlined,\r  ContactsOutlined,\r  ShoppingCartOutlined,\r  UserOutlined,\r  SettingOutlined,\r  LogoutOutlined,\r  FileTextOutlined,\r  TeamOutlined,\r  FundProjectionScreenOutlined,\r  CalendarOutlined,\r  SolutionOutlined,\r  AppstoreOutlined,\r} from '@ant-design/icons';\rimport { Dropdown, Avatar } from 'antd';\rimport { useAuthStore } from '@/app/store/auth.store';\rexport const TenantLayout: React.FC = () => {\r  const navigate = useNavigate();\r  const location = useLocation();\r  const { tenantId } = useParams();\r  const { user, logout } = useAuthStore();\r  const [collapsed, setCollapsed] = useState(false);\r  const menuItems = [\r    {\r      path: `/app/${tenantId}`,\r      name: 'Kontrol Paneli',\r      icon: <DashboardOutlined />,\r    },\r    {\r      path: `/app/${tenantId}/invoices`,\r      name: 'Faturalar',\r      icon: <FileTextOutlined />,\r      // badge: { count: 5, dot: true }, // ProLayout badge özelliği devre dışı\r    },\r    {\r      path: `/app/${tenantId}/crm`,\r      name: 'CRM',\r      icon: <ContactsOutlined />,\r      routes: [\r        {\r          path: `/app/${tenantId}/crm/dashboard`,\r          name: 'CRM Dashboard',\r          icon: <DashboardOutlined />,\r        },\r        {\r          path: `/app/${tenantId}/crm/leads`,\r          name: 'Potansiyel Müşteriler',\r          icon: <SolutionOutlined />,\r        },\r        {\r          path: `/app/${tenantId}/crm/customers`,\r          name: 'Müşteriler',\r          icon: <TeamOutlined />,\r        },\r        {\r          path: `/app/${tenantId}/crm/pipeline`,\r          name: 'Satış Hattı',\r          icon: <FundProjectionScreenOutlined />,\r        },\r        {\r          path: `/app/${tenantId}/crm/activities`,\r          name: 'Aktiviteler',\r          icon: <CalendarOutlined />,\r        },\r      ],\r    },\r    {\r      path: `/app/${tenantId}/inventory`,\r      name: 'Stok',\r      icon: <ShoppingCartOutlined />,\r    },\r    {\r      path: `/app/${tenantId}/users`,\r      name: 'Kullanıcılar',\r      icon: <UserOutlined />,\r    },\r    {\r      path: `/app/${tenantId}/modules`,\r      name: 'Modüller',\r      icon: <AppstoreOutlined />,\r    },\r    {\r      path: `/app/${tenantId}/settings`,\r      name: 'Ayarlar',\r      icon: <SettingOutlined />,\r    },\r  ];\r  const settings: ProLayoutProps = {\r    title: user?.tenantName || 'Stocker',\r    logo: 'https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg',\r    layout: 'mix',\r    splitMenus: false,\r    navTheme: 'light',\r    contentWidth: 'Fluid',\r    fixedHeader: true,\r    fixSiderbar: true,\r    colorPrimary: '#1890ff',\r    collapsed,\r    onCollapse: setCollapsed,\r    location: {\r      pathname: location.pathname,\r    },\r    menu: {\r      locale: false,\r      defaultOpenAll: false,\r    },\r    menuItemRender: (item, dom) => (\r      <a\r        onClick={(e) => {\r          e.preventDefault();\r          navigate(item.path || '/');\r        }}\r      >\r        {dom}\r      </a>\r    ),\r    rightContentRender: () => (\r      <div style={{ paddingRight: 16 }}>\r        <Dropdown\r          menu={{\r            items: [\r              {\r                key: 'profile',\r                icon: <UserOutlined />,\r                label: 'Profil',\r                onClick: () => navigate(`/app/${tenantId}/profile`),\r              },\r              {\r                key: 'settings',\r                icon: <SettingOutlined />,\r                label: 'Ayarlar',\r                onClick: () => navigate(`/app/${tenantId}/settings`),\r              },\r              {\r                type: 'divider',\r              },\r              {\r                key: 'logout',\r                icon: <LogoutOutlined />,\r                label: 'Çıkış Yap',\r                onClick: async () => {\r                  await logout();\r                  navigate('/login');\r                },\r              },\r            ],\r          }}\r        >\r          <div style={{ cursor: 'pointer', display: 'flex', alignItems: 'center', gap: 8 }}>\r            <Avatar size=\"small\" style={{ backgroundColor: '#1890ff' }}>\r              {user?.username?.[0]?.toUpperCase()}\r            </Avatar>\r            <span>{user?.username}</span>\r          </div>\r        </Dropdown>\r      </div>\r    ),\r    route: {\r      path: `/app/${tenantId}`,\r      routes: menuItems,\r    },\r  };\r  return (\r    <ProLayout {...settings}>\r      <Outlet />\r    </ProLayout>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/layouts/TenantLayout/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { \r  Card, \r  Row, \r  Col, \r  Typography, \r  Space, \r  Divider, \r  Table, \r  DatePicker,\r  InputNumber,\r  Select,\r  Button,\r  message,\r  Alert,\r  Tag,\r  List,\r  Tabs,\r} from 'antd';\rimport { \r  GlobalOutlined, \r  CalendarOutlined, \r  DollarOutlined,\r  PercentageOutlined,\r  NumberOutlined,\r  TranslationOutlined,\r  CheckCircleOutlined,\r  InfoCircleOutlined,\r} from '@ant-design/icons';\rimport { useI18n } from '@/hooks/useI18n';\rimport { LanguageSwitcher } from '@/components/LanguageSwitcher';\rimport { TranslatedText } from '@/components/TranslatedText';\rimport dayjs from 'dayjs';\rconst { Title, Text, Paragraph } = Typography;\rconst { TabPane } = Tabs;\rexport default function I18nDemo() {\r  const { t, currentLanguage, languageConfig, formatters, changeLanguage } = useI18n();\r  const [testNumber, setTestNumber] = useState(1234567.89);\r  const [testDate, setTestDate] = useState(new Date());\r  const [selectedNamespace, setSelectedNamespace] = useState('common');\r  const namespaces = ['common', 'auth', 'dashboard', 'products', 'customers', 'orders', 'invoices', 'settings'];\r  const formatterExamples = [\r    { label: 'Number', value: formatters.number(testNumber), icon: <NumberOutlined /> },\r    { label: 'Currency', value: formatters.currency(testNumber), icon: <DollarOutlined /> },\r    { label: 'Percentage', value: formatters.percentage(85.5), icon: <PercentageOutlined /> },\r    { label: 'Compact', value: formatters.compact(testNumber), icon: <NumberOutlined /> },\r    { label: 'Decimal (2)', value: formatters.decimal(testNumber, 2), icon: <NumberOutlined /> },\r    { label: 'Date', value: formatters.date(testDate), icon: <CalendarOutlined /> },\r    { label: 'Date (short)', value: formatters.date(testDate, 'short'), icon: <CalendarOutlined /> },\r  ];\r  const translationExamples = [\r    { key: 'common.welcome', params: undefined },\r    { key: 'dashboard.welcome', params: { name: 'John Doe' } },\r    { key: 'messages.success.created', params: { item: t('products.title') } },\r    { key: 'messages.warning.confirmDelete', params: { item: t('customers.title') } },\r    { key: 'dashboard.lastDays', params: { days: 7 } },\r    { key: 'validation.minLength', params: { min: 8 } },\r    { key: 'validation.maxLength', params: { max: 255 } },\r  ];\r  return (\r    <div style={{ padding: '24px' }}>\r      <Card>\r        <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\r          <div>\r            <Title level={2}>\r              <GlobalOutlined /> Internationalization (i18n) Demo\r            </Title>\r            <Paragraph>\r              This page demonstrates the i18n features of the application, including language switching,\r              translations, number/date formatting, and more.\r            </Paragraph>\r          </div>\r          <Alert\r            message={`Current Language: ${languageConfig.name} ${languageConfig.flag}`}\r            description={`Locale: ${currentLanguage === 'tr' ? 'tr-TR' : 'en-US'} | Currency: ${languageConfig.currency} | Date Format: ${languageConfig.dateFormat}`}\r            type=\"info\"\r            showIcon\r            icon={<InfoCircleOutlined />}\r          />\r          <Divider orientation=\"left\">Language Switcher Components</Divider>\r          <Row gutter={[16, 16]}>\r            <Col xs={24} sm={8}>\r              <Card title=\"Select Mode\" size=\"small\">\r                <LanguageSwitcher mode=\"select\" />\r              </Card>\r            </Col>\r            <Col xs={24} sm={8}>\r              <Card title=\"Button Mode\" size=\"small\">\r                <LanguageSwitcher mode=\"button\" />\r              </Card>\r            </Col>\r            <Col xs={24} sm={8}>\r              <Card title=\"Dropdown Mode\" size=\"small\">\r                <LanguageSwitcher mode=\"dropdown\" />\r              </Card>\r            </Col>\r          </Row>\r          <Divider orientation=\"left\">Number & Date Formatting</Divider>\r          <Row gutter={[16, 16]}>\r            <Col xs={24} md={12}>\r              <Card title=\"Test Input\" size=\"small\">\r                <Space direction=\"vertical\" style={{ width: '100%' }}>\r                  <InputNumber\r                    style={{ width: '100%' }}\r                    value={testNumber}\r                    onChange={(value) = aria-label=\"input field\"> setTestNumber(value || 0)}\r                    placeholder=\"Enter a number\"\r                    addonBefore={<NumberOutlined />}\r                  />\r                  <DatePicker\r                    style={{ width: '100%' }}\r                    value={dayjs(testDate)}\r                    onChange={(date) => setTestDate(date?.toDate() || new Date())}\r                    format={languageConfig.dateFormat}\r                  />\r                </Space>\r              </Card>\r            </Col>\r            <Col xs={24} md={12}>\r              <Card title=\"Formatted Output\" size=\"small\">\r                <List\r                  dataSource={formatterExamples}\r                  renderItem={(item) => (\r                    <List.Item>\r                      <Space>\r                        {item.icon}\r                        <Text strong>{item.label}:</Text>\r                        <Tag color=\"blue\">{item.value}</Tag>\r                      </Space>\r                    </List.Item>\r                  )}\r                />\r              </Card>\r            </Col>\r          </Row>\r          <Divider orientation=\"left\">Translation Examples</Divider>\r          <Card>\r            <Tabs defaultActiveKey=\"examples\">\r              <TabPane tab=\"Examples\" key=\"examples\">\r                <Table\r                  dataSource={translationExamples}\r                  columns={[\r                    {\r                      title: 'Key',\r                      dataIndex: 'key',\r                      key: 'key',\r                      render: (text) => <Text code>{text}</Text>,\r                    },\r                    {\r                      title: 'Parameters',\r                      dataIndex: 'params',\r                      key: 'params',\r                      render: (params) => params ? <Text code>{JSON.stringify(params)}</Text> : '-',\r                    },\r                    {\r                      title: 'Result',\r                      key: 'result',\r                      render: (_, record) => (\r                        <Tag color=\"green\">{t(record.key, record.params)}</Tag>\r                      ),\r                    },\r                  ]}\r                  pagination={false}\r                />\r              </TabPane>\r              <TabPane tab=\"Namespace Browser\" key=\"browser\">\r                <Space direction=\"vertical\" style={{ width: '100%' }} size=\"large\">\r                  <Select\r                    style={{ width: 200 }}\r                    value={selectedNamespace}\r                    onChange={setSelectedNamespace}\r                    placeholder=\"Select namespace\"\r                   aria-label=\"select field\">\r                    {namespaces.map((ns) => (\r                      <Select.Option key={ns} value={ns} aria-label=\"select field\">\r                        {ns}\r                      </Select.Option>\r                    ))}\r                  </Select>\r                  <Alert\r                    message=\"Translation Keys\"\r                    description={`Browse translations in the \"${selectedNamespace}\" namespace`}\r                    type=\"info\"\r                  />\r                  <div style={{ maxHeight: 400, overflow: 'auto' }}>\r                    <List\r                      dataSource={Object.keys(t(selectedNamespace, { returnObjects: true }) || {})}\r                      renderItem={(key) => (\r                        <List.Item>\r                          <Space style={{ width: '100%', justifyContent: 'space-between' }}>\r                            <Text code>{`${selectedNamespace}.${key}`}</Text>\r                            <Tag>{t(`${selectedNamespace}.${key}`)}</Tag>\r                          </Space>\r                        </List.Item>\r                      )}\r                    />\r                  </div>\r                </Space>\r              </TabPane>\r              <TabPane tab=\"TranslatedText Component\" key=\"component\">\r                <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\r                  <Card size=\"small\" title=\"Basic Usage\">\r                    <TranslatedText i18nKey=\"common.welcome\" />\r                  </Card>\r                  <Card size=\"small\" title=\"With Namespace\">\r                    <TranslatedText i18nKey=\"loginTitle\" namespace=\"auth\" />\r                  </Card>\r                  <Card size=\"small\" title=\"With Values\">\r                    <TranslatedText \r                      i18nKey=\"dashboard.welcome\" \r                      values={{ name: 'Alice' }}\r                    />\r                  </Card>\r                  <Card size=\"small\" title=\"With Fallback\">\r                    <TranslatedText \r                      i18nKey=\"non.existent.key\" \r                      fallback=\"This is a fallback text\"\r                    />\r                  </Card>\r                  <Card size=\"small\" title=\"With Custom Component\">\r                    <TranslatedText \r                      i18nKey=\"common.welcome\" \r                      component=\"h3\"\r                      style={{ color: '#667eea' }}\r                    />\r                  </Card>\r                </Space>\r              </TabPane>\r            </Tabs>\r          </Card>\r          <Divider orientation=\"left\">Quick Actions</Divider>\r          <Space wrap>\r            <Button \r              type=\"primary\" \r              icon={<TranslationOutlined />}\r              onClick={() = aria-label=\"translation outlined\"> {\r                changeLanguage(currentLanguage === 'tr' ? 'en' : 'tr');\r                message.success(t('messages.success.saved'));\r              }}\r            >\r              Toggle Language\r            </Button>\r            <Button \r              icon={<CheckCircleOutlined />}\r              onClick={() = aria-label=\"check circle outlined\"> {\r                message.success(t('messages.success.created', { item: 'Demo' }));\r              }}\r            >\r              Show Success Message\r            </Button>\r            <Button \r              danger\r              onClick={() => {\r                message.error(t('messages.error.general'));\r              }}\r            >\r              Show Error Message\r            </Button>\r            <Button \r              onClick={() => {\r                message.warning(t('messages.warning.unsavedChanges'));\r              }}\r            >\r              Show Warning\r            </Button>\r            <Button \r              onClick={() => {\r                message.info(t('messages.info.loading'));\r              }}\r            >\r              Show Info\r            </Button>\r          </Space>\r          <Divider />\r          <Alert\r            message=\"Implementation Notes\"\r            description={\r              <ul>\r                <li>Translations are stored in JSON files under src/i18n/locales/</li>\r                <li>Language preference is persisted in localStorage</li>\r                <li>Date and number formatting adapts to the selected locale</li>\r                <li>Missing translations are logged in development mode</li>\r                <li>The useI18n hook provides convenient access to all i18n features</li>\r                <li>Ant Design components automatically adapt to the selected language</li>\r              </ul>\r            }\r            type=\"success\"\r            showIcon\r          />\r        </Space>\r      </Card>\r    </div>\r  );\r}",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/pages/I18nDemo.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React from 'react';\rimport { Card, Button, Space, Badge, Typography, Divider, Alert, Switch, Row, Col } from 'antd';\rimport {\r  DownloadOutlined,\r  BellOutlined,\r  WifiOutlined,\r  ShareAltOutlined,\r  ReloadOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r} from '@ant-design/icons';\rimport { usePWA } from '@/hooks/usePWA';\rconst { Title, Text, Paragraph } = Typography;\rexport default function PWADemo() {\r  const {\r    isInstalled,\r    isInstallable,\r    isOffline,\r    isUpdateAvailable,\r    installPWA,\r    requestNotificationPermission,\r    subscribeToPush,\r    unsubscribeFromPush,\r    share,\r  } = usePWA();\r  const handleShare = async () => {\r    const shared = await share({\r      title: 'Stocker App',\r      text: 'Modern envanter yönetim sistemi',\r      url: window.location.origin,\r    });\r    if (shared) {\r    }\r  };\r  const handleTestNotification = () => {\r    if ('Notification' in window && Notification.permission === 'granted') {\r      new Notification('Test Bildirimi', {\r        body: 'Bu bir test bildirimidir!',\r        icon: '/logo192.png',\r        badge: '/logo192.png',\r        vibrate: [200, 100, 200],\r        tag: 'test-notification',\r        actions: [\r          { action: 'view', title: 'Görüntüle' },\r          { action: 'dismiss', title: 'Kapat' },\r        ],\r      });\r    }\r  };\r  return (\r    <div style={{ padding: '24px' }}>\r      <Title level={2}>PWA Özellikleri Demo</Title>\r      <Paragraph>\r        Progressive Web App özelliklerini test edin ve kullanın.\r      </Paragraph>\r      <Row gutter={[16, 16]}>\r        {/* Kurulum Durumu */}\r        <Col xs={24} md={12}>\r          <Card title=\"Uygulama Kurulumu\" bordered>\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <Alert\r                message={isInstalled ? 'Uygulama Kurulu' : 'Uygulama Kurulu Değil'}\r                type={isInstalled ? 'success' : 'info'}\r                icon={isInstalled ? <CheckCircleOutlined /> : <CloseCircleOutlined />}\r                showIcon\r              />\r              {isInstallable && !isInstalled && (\r                <Button\r                  type=\"primary\"\r                  icon={<DownloadOutlined />}\r                  onClick={installPWA}\r                  block\r                 aria-label=\"download outlined\">\r                  Uygulamayı Kur\r                </Button>\r              )}\r              {!isInstallable && !isInstalled && (\r                <Alert\r                  message=\"Kurulum Bilgisi\"\r                  description=\"Uygulama kurulumu için Chrome/Edge tarayıcıda HTTPS üzerinden erişin.\"\r                  type=\"info\"\r                />\r              )}\r            </Space>\r          </Card>\r        </Col>\r        {/* Bağlantı Durumu */}\r        <Col xs={24} md={12}>\r          <Card title=\"Bağlantı Durumu\" bordered>\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <Badge\r                status={isOffline ? 'error' : 'success'}\r                text={\r                  <Space>\r                    <WifiOutlined />\r                    {isOffline ? 'Çevrimdışı' : 'Çevrimiçi'}\r                  </Space>\r                }\r              />\r              {isOffline && (\r                <Alert\r                  message=\"Çevrimdışı Mod\"\r                  description=\"Önbelleğe alınmış verilerle çalışıyorsunuz.\"\r                  type=\"warning\"\r                />\r              )}\r              {isUpdateAvailable && (\r                <Alert\r                  message=\"Güncelleme Mevcut\"\r                  description=\"Yeni sürüm hazır. Sayfayı yenileyin.\"\r                  type=\"info\"\r                  action={\r                    <Button\r                      size=\"small\"\r                      icon={<ReloadOutlined />}\r                      onClick={() = aria-label=\"reload outlined\"> window.location.reload()}\r                    >\r                      Yenile\r                    </Button>\r                  }\r                />\r              )}\r            </Space>\r          </Card>\r        </Col>\r        {/* Bildirimler */}\r        <Col xs={24} md={12}>\r          <Card title=\"Push Bildirimleri\" bordered>\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <Button\r                icon={<BellOutlined />}\r                onClick={requestNotificationPermission}\r                block\r               aria-label=\"bell outlined\">\r                Bildirim İzni Ver\r              </Button>\r              <Button\r                type=\"primary\"\r                icon={<BellOutlined />}\r                onClick={subscribeToPush}\r                block\r               aria-label=\"bell outlined\">\r                Push Bildirimlere Abone Ol\r              </Button>\r              <Button\r                danger\r                onClick={unsubscribeFromPush}\r                block\r              >\r                Abonelikten Çık\r              </Button>\r              <Divider />\r              <Button\r                onClick={handleTestNotification}\r                block\r              >\r                Test Bildirimi Gönder\r              </Button>\r            </Space>\r          </Card>\r        </Col>\r        {/* Paylaşım */}\r        <Col xs={24} md={12}>\r          <Card title=\"Web Share API\" bordered>\r            <Space direction=\"vertical\" style={{ width: '100%' }}>\r              <Paragraph>\r                Uygulamayı sosyal medyada veya diğer uygulamalarda paylaşın.\r              </Paragraph>\r              <Button\r                type=\"primary\"\r                icon={<ShareAltOutlined />}\r                onClick={handleShare}\r                block\r               aria-label=\"share alt outlined\">\r                Uygulamayı Paylaş\r              </Button>\r              <Alert\r                message=\"Not\"\r                description=\"Share API mobil cihazlarda ve bazı modern tarayıcılarda çalışır.\"\r                type=\"info\"\r              />\r            </Space>\r          </Card>\r        </Col>\r      </Row>\r      <Divider />\r      {/* Kullanım Örneği */}\r      <Card title=\"Kodda Kullanım Örneği\" bordered>\r        <pre style={{ \r          background: '#f5f5f5', \r          padding: '16px', \r          borderRadius: '4px',\r          overflow: 'auto' \r        }}>\r          <code>{`import { usePWA } from '@/hooks/usePWA';\rfunction MyComponent() {\r  const {\r    isInstalled,\r    isInstallable,\r    isOffline,\r    installPWA,\r    subscribeToPush,\r    share,\r  } = usePWA();\r  // Uygulama kurulumu\r  if (isInstallable && !isInstalled) {\r    <Button onClick={installPWA}>\r      Uygulamayı Kur\r    </Button>\r  }\r  // Çevrimdışı durumu\r  if (isOffline) {\r    <Alert message=\"Çevrimdışı moddasınız\" />\r  }\r  // Push bildirimleri\r  const enableNotifications = async () => {\r    await subscribeToPush();\r  };\r  // Paylaşım\r  const shareApp = async () => {\r    await share({\r      title: 'Başlık',\r      text: 'Açıklama',\r      url: 'https://example.com'\r    });\r  };\r}`}</code>\r        </pre>\r      </Card>\r    </div>\r  );\r}",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/pages/PWADemo.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState } from 'react';\rimport { Modal, Form, Input, Button, message, Alert, Space, Typography, Divider } from 'antd';\rimport { LockOutlined, KeyOutlined } from '@ant-design/icons';\rimport PasswordStrength from '../PasswordStrength';\rimport { apiClient } from '@/shared/api/client';\rconst { Title } = Typography;\rinterface ChangePasswordModalProps {\r  visible: boolean;\r  onClose: () => void;\r  userId?: string;\r  userEmail?: string;\r  requireCurrentPassword?: boolean;\r}\rconst ChangePasswordModal: React.FC<ChangePasswordModalProps> = ({\r  visible,\r  onClose,\r  userId,\r  userEmail,\r  requireCurrentPassword = true\r}) => {\r  const [form] = Form.useForm();\r  const [loading, setLoading] = useState(false);\r  const [newPassword, setNewPassword] = useState('');\r  const [passwordStrength, setPasswordStrength] = useState<any>(null);\r  const handleSubmit = async (values: any) => {\r    // Check password strength\r    if (passwordStrength && !passwordStrength.isAcceptable) {\r      message.error('Şifre güvenlik seviyesi yetersiz!');\r      return;\r    }\r    setLoading(true);\r    try {\r      const response = await apiClient.post('/api/account/change-password', {\r        userId,\r        currentPassword: values.currentPassword,\r        newPassword: values.newPassword\r      });\r      if (response.data?.success) {\r        message.success('Şifreniz başarıyla değiştirildi');\r        form.resetFields();\r        setNewPassword('');\r        setPasswordStrength(null);\r        onClose();\r      } else {\r        message.error(response.data?.message || 'Şifre değiştirilemedi');\r      }\r    } catch (error: any) {\r      message.error(error.response?.data?.message || 'Bir hata oluştu');\r    } finally {\r      setLoading(false);\r    }\r  };\r  const handleCancel = () => {\r    form.resetFields();\r    setNewPassword('');\r    setPasswordStrength(null);\r    onClose();\r  };\r  return (\r    <Modal\r      title={\r        <Space>\r          <KeyOutlined style={{ color: '#1890ff' }} />\r          <span>Şifre Değiştir</span>\r        </Space>\r      }\r      open={visible}\r      onCancel={handleCancel}\r      footer={null}\r      width={600}\r    >\r      <Alert\r        message=\"Güvenlik İpucu\"\r        description=\"Güçlü bir şifre oluşturmak hesabınızın güvenliği için önemlidir. Şifrenizi düzenli olarak değiştirin ve başkalarıyla paylaşmayın.\"\r        type=\"info\"\r        showIcon\r        style={{ marginBottom: 24 }}\r      />\r      <Form\r        form={form}\r        layout=\"vertical\"\r        onFinish={handleSubmit}\r        autoComplete=\"off\"\r      >\r        {requireCurrentPassword && (\r          <Form.Item\r            name=\"currentPassword\"\r            label=\"Mevcut Şifre\"\r            rules={[{ required: true, message: 'Mevcut şifrenizi giriniz' }]}\r          >\r            <Input.Password\r              prefix={<LockOutlined / aria-label=\"input field\">}\r              placeholder=\"Mevcut şifreniz\"\r              size=\"large\"\r            />\r          </Form.Item>\r        )}\r        <Divider />\r        <Form.Item\r          name=\"newPassword\"\r          label=\"Yeni Şifre\"\r          rules={[\r            { required: true, message: 'Yeni şifre zorunludur' },\r            { min: 8, message: 'Şifre en az 8 karakter olmalıdır' },\r            () => ({\r              validator(_, value) {\r                if (!value) return Promise.resolve();\r                if (passwordStrength && !passwordStrength.isAcceptable) {\r                  return Promise.reject(new Error('Şifre güvenlik seviyesi yetersiz'));\r                }\r                return Promise.resolve();\r              },\r            }),\r          ]}\r          extra={\r            newPassword && (\r              <PasswordStrength\r                password={newPassword}\r                email={userEmail}\r                onStrengthChange={setPasswordStrength}\r                showRequirements={true}\r                showSuggestions={true}\r              />\r            )\r          }\r        >\r          <Input.Password\r            prefix={<KeyOutlined / aria-label=\"input field\">}\r            placeholder=\"Güçlü bir şifre oluşturun\"\r            size=\"large\"\r            onChange={(e) => setNewPassword(e.target.value)}\r          />\r        </Form.Item>\r        <Form.Item\r          name=\"confirmPassword\"\r          label=\"Yeni Şifre Tekrar\"\r          dependencies={['newPassword']}\r          rules={[\r            { required: true, message: 'Şifre tekrarı zorunludur' },\r            ({ getFieldValue }) => ({\r              validator(_, value) {\r                if (!value || getFieldValue('newPassword') === value) {\r                  return Promise.resolve();\r                }\r                return Promise.reject(new Error('Şifreler eşleşmiyor'));\r              },\r            }),\r          ]}\r        >\r          <Input.Password\r            prefix={<KeyOutlined / aria-label=\"input field\">}\r            placeholder=\"Yeni şifre tekrar\"\r            size=\"large\"\r          />\r        </Form.Item>\r        <Form.Item style={{ marginBottom: 0 }}>\r          <Space style={{ width: '100%', justifyContent: 'flex-end' }}>\r            <Button onClick={handleCancel}>İptal</Button>\r            <Button\r              type=\"primary\"\r              htmlType=\"submit\"\r              loading={loading}\r              disabled={newPassword && passwordStrength && !passwordStrength.isAcceptable}\r              icon={<LockOutlined />}\r             aria-label=\"lock outlined\">\r              {newPassword && passwordStrength && !passwordStrength.isAcceptable\r                ? 'Güvenli bir şifre oluşturun'\r                : 'Şifreyi Değiştir'}\r            </Button>\r          </Space>\r        </Form.Item>\r      </Form>\r      {/* Password Tips */}\r      <div style={{ marginTop: 24, padding: 16, background: '#f5f5f5', borderRadius: 8 }}>\r        <Title level={5}>Güvenli Şifre İpuçları:</Title>\r        <ul style={{ marginBottom: 0 }}>\r          <li>Şifrenizi kimseyle paylaşmayın</li>\r          <li>Her hesap için farklı şifre kullanın</li>\r          <li>Kişisel bilgilerinizi (doğum tarihi, ad vb.) kullanmayın</li>\r          <li>Sözlükte bulunan kelimeleri doğrudan kullanmayın</li>\r          <li>Şifre yöneticisi kullanmayı düşünün</li>\r        </ul>\r      </div>\r    </Modal>\r  );\r};\rexport default ChangePasswordModal;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/ChangePasswordModal/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useState, useEffect } from 'react';\rimport { Button, Tooltip, FloatButton, message, Modal } from 'antd';\rimport {\r  QuestionCircleOutlined,\r  MessageOutlined,\r  PhoneOutlined,\r  PlayCircleOutlined,\r  LockOutlined,\r  UserAddOutlined,\r  EyeOutlined,\r} from '@ant-design/icons';\rimport { useLocation } from 'react-router-dom';\rimport { useVisitorTracking } from '@/shared/hooks/useVisitorTracking';\rimport './style.css';\rinterface ContextualHelpersProps {\r  showChatSupport?: boolean;\r  showForgotPassword?: boolean;\r  showCreateAccount?: boolean;\r  showDemoAccess?: boolean;\r  context?: 'login' | 'landing' | 'register' | 'general';\r}\rexport const ContextualHelpers: React.FC<ContextualHelpersProps> = ({\r  showChatSupport = true,\r  showForgotPassword = false,\r  showCreateAccount = false,\r  showDemoAccess = false,\r  context = 'general',\r}) => {\r  const [chatModalVisible, setChatModalVisible] = useState(false);\r  const [demoModalVisible, setDemoModalVisible] = useState(false);\r  const location = useLocation();\r  const { trackInterest } = useVisitorTracking();\r  const handleChatSupport = () => {\r    setChatModalVisible(true);\r    trackInterest(`chat-support-${context}`);\r  };\r  const handlePhoneSupport = () => {\r    window.open('tel:08501234567', '_self');\r    trackInterest(`phone-support-${context}`);\r  };\r  const handleWhatsAppSupport = () => {\r    window.open('https://wa.me/905555555555?text=Merhaba, Stocker hakkında bilgi almak istiyorum.', '_blank');\r    trackInterest(`whatsapp-support-${context}`);\r  };\r  const handleDemoAccess = () => {\r    setDemoModalVisible(true);\r    trackInterest(`demo-access-${context}`);\r  };\r  const handleForgotPassword = () => {\r    window.location.href = '/forgot-password';\r    trackInterest(`forgot-password-${context}`);\r  };\r  const handleCreateAccount = () => {\r    window.location.href = '/register';\r    trackInterest(`create-account-${context}`);\r  };\r  // Auto-show chat support based on user behavior\r  useEffect(() => {\r    const timer = setTimeout(() => {\r      if (context === 'landing' && !localStorage.getItem('chat-prompt-shown')) {\r        message.info({\r          content: '💬 Sorularınız mı var? Canlı destek hattımızdan yardım alabilirsiniz!',\r          duration: 5,\r          icon: <MessageOutlined />,\r          onClick: handleChatSupport,\r          style: { cursor: 'pointer' },\r        });\r        localStorage.setItem('chat-prompt-shown', 'true');\r      }\r    }, 30000); // Show after 30 seconds\r    return () => clearTimeout(timer);\r  }, [context]);\r  const renderFloatingHelpers = () => (\r    <FloatButton.Group\r      trigger=\"click\"\r      type=\"primary\"\r      style={{ right: 24, bottom: 24 }}\r      icon={<QuestionCircleOutlined />}\r      tooltip=\"Yardım\"\r      className=\"contextual-float-group\"\r    >\r      {showChatSupport && (\r        <FloatButton\r          icon={<MessageOutlined />}\r          tooltip=\"Canlı Destek\"\r          onClick={handleChatSupport}\r          className=\"chat-float-btn\"\r        />\r      )}\r      <FloatButton\r        icon={<PhoneOutlined />}\r        tooltip=\"Telefon Desteği\"\r        onClick={handlePhoneSupport}\r        className=\"phone-float-btn\"\r      />\r      <FloatButton\r        icon={<MessageOutlined />}\r        tooltip=\"WhatsApp\"\r        onClick={handleWhatsAppSupport}\r        className=\"whatsapp-float-btn\"\r      />\r      {showDemoAccess && (\r        <FloatButton\r          icon={<PlayCircleOutlined />}\r          tooltip=\"Demo İzle\"\r          onClick={handleDemoAccess}\r          className=\"demo-float-btn\"\r        />\r      )}\r    </FloatButton.Group>\r  );\r  const renderInlineHelpers = () => (\r    <div className={`contextual-helpers contextual-helpers--${context}`}>\r      {showForgotPassword && (\r        <Tooltip title=\"Şifrenizi mi unuttunuz? Hemen sıfırlayın!\">\r          <Button\r            type=\"link\"\r            icon={<LockOutlined />}\r            onClick={handleForgotPassword}\r            className=\"helper-link forgot-password-link\"\r           aria-label=\"lock outlined\">\r            Şifremi Unuttum\r          </Button>\r        </Tooltip>\r      )}\r      {showCreateAccount && (\r        <Tooltip title=\"Hesabınız yok mu? Hemen ücretsiz kayıt olun!\">\r          <Button\r            type=\"link\"\r            icon={<UserAddOutlined />}\r            onClick={handleCreateAccount}\r            className=\"helper-link create-account-link\"\r           aria-label=\"user add outlined\">\r            Hesabım Yok mu?\r          </Button>\r        </Tooltip>\r      )}\r      {showDemoAccess && (\r        <Tooltip title=\"Önce demo izleyerek platformu keşfedin\">\r          <Button\r            type=\"link\"\r            icon={<EyeOutlined />}\r            onClick={handleDemoAccess}\r            className=\"helper-link demo-access-link\"\r           aria-label=\"eye outlined\">\r            Önce İzle\r          </Button>\r        </Tooltip>\r      )}\r    </div>\r  );\r  return (\r    <>\r      {/* Inline Helpers */}\r      {(showForgotPassword || showCreateAccount || showDemoAccess) && renderInlineHelpers()}\r      {/* Floating Helpers */}\r      {renderFloatingHelpers()}\r      {/* Chat Support Modal */}\r      <Modal\r        title=\"Canlı Destek\"\r        open={chatModalVisible}\r        onCancel={() => setChatModalVisible(false)}\r        footer={null}\r        width={400}\r        className=\"chat-support-modal\"\r      >\r        <div className=\"chat-support-content\">\r          <div className=\"support-options\">\r            <div className=\"support-option\" onClick={handleWhatsAppSupport} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && handleWhatsAppSupport(e)}>\r              <div className=\"support-icon\">📱</div>\r              <div className=\"support-details\">\r                <h4>WhatsApp Destek</h4>\r                <p>En hızlı destek için</p>\r              </div>\r              <div className=\"support-badge\">Önerilen</div>\r            </div>\r            <div className=\"support-option\" onClick={handlePhoneSupport} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && handlePhoneSupport(e)}>\r              <div className=\"support-icon\">📞</div>\r              <div className=\"support-details\">\r                <h4>Telefon Desteği</h4>\r                <p>0850 123 45 67</p>\r              </div>\r              <div className=\"support-time\">09:00 - 18:00</div>\r            </div>\r            <div className=\"support-option\" onClick={() => window.open('mailto:destek@stocker.com.tr', '_blank')} role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => window.open('mailto:destek@stocker.com.tr', '_blank')(e)}>\r              <div className=\"support-icon\">✉️</div>\r              <div className=\"support-details\">\r                <h4>E-posta Desteği</h4>\r                <p>destek@stocker.com.tr</p>\r              </div>\r              <div className=\"support-time\">24 saat</div>\r            </div>\r          </div>\r          <div className=\"support-note\">\r            <QuestionCircleOutlined style={{ color: '#667eea', marginRight: 8 }} />\r            <span>Teknik ekibimiz size 2 dakika içinde yanıt verecektir.</span>\r          </div>\r        </div>\r      </Modal>\r      {/* Demo Access Modal */}\r      <Modal\r        title=\"Platform Demosu\"\r        open={demoModalVisible}\r        onCancel={() => setDemoModalVisible(false)}\r        footer={null}\r        width={500}\r        className=\"demo-access-modal\"\r      >\r        <div className=\"demo-access-content\">\r          <div className=\"demo-video-placeholder\">\r            <PlayCircleOutlined style={{ fontSize: 64, color: '#667eea' }} />\r            <h3>Platform Demo Videosu</h3>\r            <p>Stocker'ın tüm özelliklerini 5 dakikada keşfedin</p>\r          </div>\r          <div className=\"demo-actions\">\r            <Button\r              type=\"primary\"\r              size=\"large\"\r              icon={<PlayCircleOutlined />}\r              onClick={() = aria-label=\"play circle outlined\"> {\r                // Simulate video play\r                message.success('Demo video oynatılıyor...');\r                trackInterest('demo-video-play');\r              }}\r              className=\"demo-play-btn\"\r            >\r              Demo'yu İzle\r            </Button>\r            <Button\r              size=\"large\"\r              ghost\r              onClick={() => {\r                window.location.href = '/register';\r                trackInterest('demo-to-register');\r              }}\r            >\r              Hemen Dene\r            </Button>\r          </div>\r          <div className=\"demo-benefits\">\r            <h4>Demo'da neler göreceksiniz:</h4>\r            <ul>\r              <li>✅ Müşteri yönetimi nasıl çalışır</li>\r              <li>✅ Stok takibi ve raporlama</li>\r              <li>✅ Faturalama işlemleri</li>\r              <li>✅ Modüller arası entegrasyon</li>\r            </ul>\r          </div>\r        </div>\r      </Modal>\r    </>\r  );\r};",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/ContextualHelpers/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React from 'react';\rimport { Table, TableProps, Card, Input, Space, Button } from 'antd';\rimport { SearchOutlined, ReloadOutlined } from '@ant-design/icons';\rimport { EmptyState } from '../EmptyState';\rimport './style.css';\rinterface DataTableProps<T> extends Omit<TableProps<T>, 'title'> {\r  title?: string;\r  searchable?: boolean;\r  searchPlaceholder?: string;\r  onSearch?: (value: string) => void;\r  onRefresh?: () => void;\r  showCard?: boolean;\r  emptyStateProps?: {\r    title?: string;\r    description?: string;\r    showAction?: boolean;\r    actionText?: string;\r    onAction?: () => void;\r  };\r  extra?: React.ReactNode;\r}\rexport function DataTable<T extends object>({\r  title,\r  searchable = false,\r  searchPlaceholder = 'Ara...',\r  onSearch,\r  onRefresh,\r  showCard = true,\r  emptyStateProps,\r  extra,\r  locale,\r  ...tableProps\r}: DataTableProps<T>) {\r  const [searchValue, setSearchValue] = React.useState('');\r  const handleSearch = (value: string) => {\r    setSearchValue(value);\r    onSearch?.(value);\r  };\r  const tableLocale = locale || {\r    emptyText: <EmptyState {...emptyStateProps} />,\r  };\r  const headerContent = (\r    <>\r      {(title || searchable || onRefresh || extra) && (\r        <div className=\"data-table-header\">\r          <div className=\"data-table-header-left\">\r            {title && <h3 className=\"data-table-title\">{title}</h3>}\r          </div>\r          <div className=\"data-table-header-right\">\r            <Space size=\"middle\">\r              {searchable && (\r                <Input\r                  placeholder={searchPlaceholder}\r                  value={searchValue}\r                  onChange={(e) = aria-label=\"input field\"> handleSearch(e.target.value)}\r                  prefix={<SearchOutlined />}\r                  style={{ width: 250 }}\r                  allowClear\r                />\r              )}\r              {onRefresh && (\r                <Button\r                  icon={<ReloadOutlined />}\r                  onClick={onRefresh}\r                  title=\"Yenile\"\r                / aria-label=\"reload outlined\">\r              )}\r              {extra}\r            </Space>\r          </div>\r        </div>\r      )}\r    </>\r  );\r  const tableContent = (\r    <Table<T>\r      {...tableProps}\r      locale={tableLocale}\r      className={`data-table ${tableProps.className || ''}`}\r    />\r  );\r  if (!showCard) {\r    return (\r      <>\r        {headerContent}\r        {tableContent}\r      </>\r    );\r  }\r  return (\r    <Card className=\"data-table-card\" bordered={false}>\r      {headerContent}\r      {tableContent}\r    </Card>\r  );\r}\rexport default DataTable;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/DataTable/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React from 'react';\rimport { Empty, Button } from 'antd';\rimport { PlusOutlined } from '@ant-design/icons';\rinterface EmptyStateProps {\r  title?: string;\r  description?: string;\r  image?: React.ReactNode;\r  actionText?: string;\r  onAction?: () => void;\r  showAction?: boolean;\r  icon?: React.ReactNode;\r}\rexport const EmptyState: React.FC<EmptyStateProps> = ({\r  title = 'Veri Bulunamadı',\r  description = 'Henüz hiç veri eklenmemiş.',\r  image,\r  actionText = 'Yeni Ekle',\r  onAction,\r  showAction = false,\r  icon = <PlusOutlined />,\r}) => {\r  return (\r    <div style={{ padding: '40px 0', textAlign: 'center' }}>\r      <Empty\r        image={image || Empty.PRESENTED_IMAGE_SIMPLE}\r        description={\r          <div>\r            <h3 style={{ marginBottom: 8, fontSize: 16, fontWeight: 500 }}>\r              {title}\r            </h3>\r            <p style={{ color: '#8c8c8c', marginBottom: showAction ? 16 : 0 }}>\r              {description}\r            </p>\r          </div>\r        }\r      >\r        {showAction && onAction && (\r          <Button type=\"primary\" icon={icon} onClick={onAction} aria-label=\"button\">\r            {actionText}\r          </Button>\r        )}\r      </Empty>\r    </div>\r  );\r};\rexport default EmptyState;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/EmptyState/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { Component, ErrorInfo, ReactNode } from 'react';\rimport { Alert, Button } from 'antd';\rinterface Props {\r  children: ReactNode;\r  fallback?: ReactNode;\r}\rinterface State {\r  hasError: boolean;\r  error: Error | null;\r  errorInfo: ErrorInfo | null;\r}\rexport class ErrorBoundary extends Component<Props, State> {\r  public state: State = {\r    hasError: false,\r    error: null,\r    errorInfo: null\r  };\r  public static getDerivedStateFromError(error: Error): State {\r    return { \r      hasError: true, \r      error,\r      errorInfo: null \r    };\r  }\r  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r    ,\r      message: error.message,\r      stack: error.stack,\r      componentStack: errorInfo.componentStack\r    });\r    this.setState({\r      error,\r      errorInfo\r    });\r  }\r  private handleReset = () => {\r    this.setState({\r      hasError: false,\r      error: null,\r      errorInfo: null\r    });\r  };\r  public render() {\r    if (this.state.hasError) {\r      if (this.props.fallback) {\r        return this.props.fallback;\r      }\r      return (\r        <div style={{ padding: '24px', background: '#fff', minHeight: '100vh' }}>\r          <Alert\r            message=\"Bir Hata Oluştu\"\r            description={\r              <div>\r                <p><strong>Hata Mesajı:</strong> {this.state.error?.message}</p>\r                <details style={{ marginTop: 16 }}>\r                  <summary style={{ cursor: 'pointer', userSelect: 'none' }}>\r                    Teknik Detaylar (Tıklayın)\r                  </summary>\r                  <div style={{ marginTop: 8 }}>\r                    <p><strong>Error Stack:</strong></p>\r                    <pre style={{ \r                      fontSize: 11, \r                      background: '#f5f5f5', \r                      padding: 12, \r                      borderRadius: 4,\r                      overflow: 'auto',\r                      maxHeight: 200\r                    }}>\r                      {this.state.error?.stack}\r                    </pre>\r                    {this.state.errorInfo && (\r                      <>\r                        <p><strong>Component Stack:</strong></p>\r                        <pre style={{ \r                          fontSize: 11, \r                          background: '#f5f5f5', \r                          padding: 12, \r                          borderRadius: 4,\r                          overflow: 'auto',\r                          maxHeight: 200\r                        }}>\r                          {this.state.errorInfo.componentStack}\r                        </pre>\r                      </>\r                    )}\r                  </div>\r                </details>\r                <Button \r                  type=\"primary\" \r                  onClick={this.handleReset}\r                  style={{ marginTop: 16 }}\r                >\r                  Tekrar Dene\r                </Button>\r              </div>\r            }\r            type=\"error\"\r            showIcon\r          />\r        </div>\r      );\r    }\r    return this.props.children;\r  }\r}",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/ErrorBoundary.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import { Component, ErrorInfo, ReactNode } from 'react';\rimport { Result, Button } from 'antd';\rimport { CloseCircleOutlined } from '@ant-design/icons';\rinterface Props {\r  children: ReactNode;\r  fallback?: ReactNode;\r}\rinterface State {\r  hasError: boolean;\r  error: Error | null;\r  errorInfo: ErrorInfo | null;\r}\rexport class ErrorBoundary extends Component<Props, State> {\r  constructor(props: Props) {\r    super(props);\r    this.state = {\r      hasError: false,\r      error: null,\r      errorInfo: null,\r    };\r  }\r  static getDerivedStateFromError(error: Error): State {\r    return {\r      hasError: true,\r      error,\r      errorInfo: null,\r    };\r  }\r  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r    this.setState({\r      error,\r      errorInfo,\r    });\r  }\r  handleReset = () => {\r    this.setState({\r      hasError: false,\r      error: null,\r      errorInfo: null,\r    });\r    window.location.reload();\r  };\r  render() {\r    if (this.state.hasError) {\r      if (this.props.fallback) {\r        return this.props.fallback;\r      }\r      return (\r        <div style={{ padding: '50px' }}>\r          <Result\r            status=\"error\"\r            icon={<CloseCircleOutlined style={{ color: '#ff4d4f' }} />}\r            title=\"Bir Hata Oluştu\"\r            subTitle=\"Üzgünüz, beklenmeyen bir hata oluştu. Lütfen sayfayı yenileyin veya daha sonra tekrar deneyin.\"\r            extra={[\r              <Button type=\"primary\" onClick={this.handleReset} key=\"refresh\">\r                Sayfayı Yenile\r              </Button>,\r              <Button key=\"home\" onClick={() => window.location.href = '/'}>\r                Ana Sayfaya Dön\r              </Button>,\r            ]}\r          >\r            {process.env.NODE_ENV === 'development' && this.state.error && (\r              <div style={{ textAlign: 'left', marginTop: 20 }}>\r                <details style={{ whiteSpace: 'pre-wrap' }}>\r                  <summary>Hata Detayları (Geliştirici Modu)</summary>\r                  <p style={{ color: 'red', marginTop: 10 }}>\r                    {this.state.error.toString()}\r                  </p>\r                  {this.state.errorInfo && (\r                    <pre style={{ fontSize: 12, marginTop: 10 }}>\r                      {this.state.errorInfo.componentStack}\r                    </pre>\r                  )}\r                </details>\r              </div>\r            )}\r          </Result>\r        </div>\r      );\r    }\r    return this.props.children;\r  }\r}\rexport default ErrorBoundary;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/ErrorBoundary/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useEffect, useState } from 'react';\rimport { notification, Badge, Button, Drawer, List, Avatar, Space, Typography, Tag, Empty, Tooltip } from 'antd';\rimport {\r  BellOutlined,\r  CheckCircleOutlined,\r  CloseCircleOutlined,\r  InfoCircleOutlined,\r  WarningOutlined,\r  DeleteOutlined,\r  CheckOutlined,\r  ClearOutlined,\r  SyncOutlined,\r  TeamOutlined,\r  DollarOutlined,\r  UserOutlined,\r  ShoppingCartOutlined,\r  DatabaseOutlined,\r  ApiOutlined,\r} from '@ant-design/icons';\rimport signalRService from '@/services/signalr.service';\rimport masterDashboardService from '@/services/masterDashboard.service';\rimport './NotificationManager.css';\rconst { Text, Title } = Typography;\rinterface NotificationItem {\r  id: string;\r  title: string;\r  description: string;\r  type: 'success' | 'info' | 'warning' | 'error';\r  timestamp: Date;\r  read: boolean;\r  icon?: React.ReactNode;\r  actionUrl?: string;\r  source?: string;\r}\rexport const NotificationManager: React.FC = () => {\r  const [notifications, setNotifications] = useState<NotificationItem[]>([]);\r  const [unreadCount, setUnreadCount] = useState(0);\r  const [drawerVisible, setDrawerVisible] = useState(false);\r  const [loading, setLoading] = useState(false);\r  useEffect(() => {\r    // Setup SignalR listeners\r    setupSignalRListeners();\r    // Load initial notifications from localStorage\r    loadStoredNotifications();\r    return () => {\r      // Cleanup\r    };\r  }, []);\r  const setupSignalRListeners = () => {\r    // Listen for general notifications\r    signalRService.onNotificationReceived((notification) => {\r      const newNotification: NotificationItem = {\r        id: notification.id || Date.now().toString(),\r        title: notification.title,\r        description: notification.message,\r        type: notification.type.toLowerCase() as NotificationItem['type'],\r        timestamp: new Date(notification.createdAt),\r        read: false,\r        icon: getIconForType(notification.type),\r        actionUrl: notification.actionUrl,\r        source: 'system',\r      };\r      addNotification(newNotification);\r      showNotificationPopup(newNotification);\r    });\r    // Listen for dashboard-specific events\r    masterDashboardService.onNewTenant((tenant) => {\r      const notification: NotificationItem = {\r        id: `tenant-${tenant.id}`,\r        title: 'Yeni Tenant',\r        description: `${tenant.name} sisteme eklendi`,\r        type: 'success',\r        timestamp: new Date(),\r        read: false,\r        icon: <TeamOutlined />,\r        source: 'dashboard',\r      };\r      addNotification(notification);\r      showNotificationPopup(notification);\r    });\r    masterDashboardService.onAlertReceived((alert) => {\r      const notification: NotificationItem = {\r        id: alert.id,\r        title: alert.title,\r        description: alert.message,\r        type: alert.level as NotificationItem['type'],\r        timestamp: new Date(alert.timestamp),\r        read: false,\r        icon: getIconForAlert(alert.level),\r        source: alert.source,\r      };\r      addNotification(notification);\r      if (alert.level === 'critical' || alert.level === 'error') {\r        showNotificationPopup(notification);\r      }\r    });\r    masterDashboardService.onSystemHealthChanged((health) => {\r      if (health.status === 'critical') {\r        const notification: NotificationItem = {\r          id: `health-${Date.now()}`,\r          title: 'Sistem Sağlık Uyarısı',\r          description: `Sistem kritik durumda: CPU %${health.cpu}, Memory %${health.memory}`,\r          type: 'error',\r          timestamp: new Date(),\r          read: false,\r          icon: <WarningOutlined />,\r          source: 'system',\r        };\r        addNotification(notification);\r        showNotificationPopup(notification);\r      }\r    });\r  };\r  const getIconForType = (type: string): React.ReactNode => {\r    const iconMap: Record<string, React.ReactNode> = {\r      'Success': <CheckCircleOutlined style={{ color: '#52c41a' }} />,\r      'Info': <InfoCircleOutlined style={{ color: '#1890ff' }} />,\r      'Warning': <WarningOutlined style={{ color: '#faad14' }} />,\r      'Error': <CloseCircleOutlined style={{ color: '#ff4d4f' }} />,\r      'Payment': <DollarOutlined style={{ color: '#52c41a' }} />,\r      'User': <UserOutlined style={{ color: '#1890ff' }} />,\r      'Order': <ShoppingCartOutlined style={{ color: '#722ed1' }} />,\r      'Stock': <DatabaseOutlined style={{ color: '#fa8c16' }} />,\r      'System': <ApiOutlined style={{ color: '#595959' }} />,\r    };\r    return iconMap[type] || <InfoCircleOutlined />;\r  };\r  const getIconForAlert = (level: string): React.ReactNode => {\r    switch (level) {\r      case 'critical':\r        return <CloseCircleOutlined style={{ color: '#ff4d4f' }} />;\r      case 'error':\r        return <CloseCircleOutlined style={{ color: '#ff4d4f' }} />;\r      case 'warning':\r        return <WarningOutlined style={{ color: '#faad14' }} />;\r      default:\r        return <InfoCircleOutlined style={{ color: '#1890ff' }} />;\r    }\r  };\r  const addNotification = (notification: NotificationItem) => {\r    setNotifications((prev) => {\r      const updated = [notification, ...prev].slice(0, 100); // Keep last 100 notifications\r      saveNotificationsToStorage(updated);\r      return updated;\r    });\r    setUnreadCount((prev) => prev + 1);\r  };\r  const showNotificationPopup = (notification: NotificationItem) => {\r    const key = `notification-${notification.id}`;\r    notification[notification.type]({\r      key,\r      message: notification.title,\r      description: notification.description,\r      placement: 'topRight',\r      duration: 4,\r      icon: notification.icon,\r      btn: notification.actionUrl ? (\r        <Button \r          type=\"primary\" \r          size=\"small\"\r          onClick={() => {\r            window.open(notification.actionUrl, '_blank');\r            notification.close(key);\r          }}\r        >\r          Görüntüle\r        </Button>\r      ) : undefined,\r    });\r  };\r  const markAsRead = (id: string) => {\r    setNotifications((prev) => {\r      const updated = prev.map((n) => \r        n.id === id ? { ...n, read: true } : n\r      );\r      saveNotificationsToStorage(updated);\r      return updated;\r    });\r    setUnreadCount((prev) => Math.max(0, prev - 1));\r  };\r  const markAllAsRead = () => {\r    setNotifications((prev) => {\r      const updated = prev.map((n) => ({ ...n, read: true }));\r      saveNotificationsToStorage(updated);\r      return updated;\r    });\r    setUnreadCount(0);\r  };\r  const deleteNotification = (id: string) => {\r    setNotifications((prev) => {\r      const notification = prev.find(n => n.id === id);\r      const updated = prev.filter((n) => n.id !== id);\r      saveNotificationsToStorage(updated);\r      if (notification && !notification.read) {\r        setUnreadCount((count) => Math.max(0, count - 1));\r      }\r      return updated;\r    });\r  };\r  const clearAll = () => {\r    setNotifications([]);\r    setUnreadCount(0);\r    localStorage.removeItem('notifications');\r  };\r  const saveNotificationsToStorage = (notifications: NotificationItem[]) => {\r    try {\r      localStorage.setItem('notifications', JSON.stringify(notifications));\r    } catch (error) {\r    }\r  };\r  const loadStoredNotifications = () => {\r    try {\r      const stored = localStorage.getItem('notifications');\r      if (stored) {\r        const parsed = JSON.parse(stored) as NotificationItem[];\r        setNotifications(parsed);\r        setUnreadCount(parsed.filter(n => !n.read).length);\r      }\r    } catch (error) {\r    }\r  };\r  const getRelativeTime = (date: Date): string => {\r    const now = new Date();\r    const diff = now.getTime() - new Date(date).getTime();\r    const minutes = Math.floor(diff / 60000);\r    const hours = Math.floor(diff / 3600000);\r    const days = Math.floor(diff / 86400000);\r    if (minutes < 1) return 'Az önce';\r    if (minutes < 60) return `${minutes} dakika önce`;\r    if (hours < 24) return `${hours} saat önce`;\r    if (days < 7) return `${days} gün önce`;\r    return new Date(date).toLocaleDateString('tr-TR');\r  };\r  return (\r    <>\r      <Tooltip title=\"Bildirimler\">\r        <Badge count={unreadCount} overflowCount={99}>\r          <Button\r            type=\"text\"\r            icon={<BellOutlined />}\r            onClick={() = aria-label=\"bell outlined\"> setDrawerVisible(true)}\r            style={{ fontSize: 18 }}\r          />\r        </Badge>\r      </Tooltip>\r      <Drawer\r        title={\r          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r            <Title level={4} style={{ margin: 0 }}>\r              Bildirimler\r              {unreadCount > 0 && (\r                <Badge \r                  count={unreadCount} \r                  style={{ marginLeft: 12 }}\r                  overflowCount={99}\r                />\r              )}\r            </Title>\r            <Space>\r              {notifications.length > 0 && (\r                <>\r                  <Tooltip title=\"Tümünü okundu işaretle\">\r                    <Button\r                      type=\"text\"\r                      icon={<CheckOutlined />}\r                      onClick={markAllAsRead}\r                      disabled={unreadCount === 0}\r                    / aria-label=\"check outlined\">\r                  </Tooltip>\r                  <Tooltip title=\"Tümünü temizle\">\r                    <Button\r                      type=\"text\"\r                      icon={<ClearOutlined />}\r                      onClick={clearAll}\r                      danger\r                    / aria-label=\"clear outlined\">\r                  </Tooltip>\r                </>\r              )}\r              <Tooltip title=\"Yenile\">\r                <Button\r                  type=\"text\"\r                  icon={<SyncOutlined spin={loading} / aria-label=\"sync outlined\">}\r                  onClick={() => {\r                    setLoading(true);\r                    setTimeout(() => setLoading(false), 1000);\r                  }}\r                />\r              </Tooltip>\r            </Space>\r          </div>\r        }\r        placement=\"right\"\r        width={400}\r        open={drawerVisible}\r        onClose={() => setDrawerVisible(false)}\r        bodyStyle={{ padding: 0 }}\r      >\r        {notifications.length > 0 ? (\r          <List\r            dataSource={notifications}\r            renderItem={(item) => (\r              <List.Item\r                key={item.id}\r                className={`notification-item ${!item.read ? 'unread' : ''}`}\r                onClick={() => !item.read && markAsRead(item.id)}\r                actions={[\r                  <Tooltip title=\"Sil\" key=\"delete\">\r                    <Button\r                      type=\"text\"\r                      size=\"small\"\r                      icon={<DeleteOutlined />}\r                      onClick={(e) = aria-label=\"delete outlined\"> {\r                        e.stopPropagation();\r                        deleteNotification(item.id);\r                      }}\r                      danger\r                    />\r                  </Tooltip>\r                ]}\r              >\r                <List.Item.Meta\r                  avatar={\r                    <Avatar \r                      icon={item.icon}\r                      style={{ \r                        backgroundColor: item.type === 'error' ? '#fff2f0' :\r                                       item.type === 'warning' ? '#fffbe6' :\r                                       item.type === 'success' ? '#f6ffed' : '#f0f5ff'\r                      }}\r                    />\r                  }\r                  title={\r                    <Space>\r                      <Text strong={!item.read}>{item.title}</Text>\r                      {!item.read && <Badge status=\"processing\" />}\r                    </Space>\r                  }\r                  description={\r                    <div>\r                      <Text type=\"secondary\" style={{ fontSize: 13 }}>\r                        {item.description}\r                      </Text>\r                      <div style={{ marginTop: 8 }}>\r                        <Space size=\"small\">\r                          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r                            {getRelativeTime(item.timestamp)}\r                          </Text>\r                          {item.source && (\r                            <Tag color=\"default\" style={{ fontSize: 11 }}>\r                              {item.source}\r                            </Tag>\r                          )}\r                        </Space>\r                      </div>\r                    </div>\r                  }\r                />\r              </List.Item>\r            )}\r          />\r        ) : (\r          <Empty\r            description=\"Bildirim yok\"\r            style={{ marginTop: 100 }}\r          />\r        )}\r      </Drawer>\r    </>\r  );\r};\rexport default NotificationManager;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/NotificationManager.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React from 'react';\rimport { PageHeader as AntPageHeader } from '@ant-design/pro-components';\rimport { ArrowLeftOutlined } from '@ant-design/icons';\rimport { useNavigate } from 'react-router-dom';\rimport './style.css';\rinterface BreadcrumbItem {\r  title: string;\r  path?: string;\r}\rinterface PageHeaderProps {\r  title: string;\r  subtitle?: string;\r  breadcrumbs?: BreadcrumbItem[];\r  showBack?: boolean;\r  onBack?: () => void;\r  extra?: React.ReactNode;\r  actions?: React.ReactNode;\r  ghost?: boolean;\r  children?: React.ReactNode;\r}\rexport const PageHeader: React.FC<PageHeaderProps> = ({\r  title,\r  subtitle,\r  breadcrumbs,\r  showBack = false,\r  onBack,\r  extra,\r  actions,\r  ghost = true,\r  children,\r}) => {\r  const navigate = useNavigate();\r  const handleBack = () => {\r    if (onBack) {\r      onBack();\r    } else {\r      navigate(-1);\r    }\r  };\r  const breadcrumbItems = breadcrumbs?.map((item, index) => ({\r    title: item.path && index < (breadcrumbs?.length || 0) - 1 ? (\r      <a onClick={() => navigate(item.path!)}>{item.title}</a>\r    ) : (\r      item.title\r    ),\r  }));\r  return (\r    <div className=\"page-header-wrapper\">\r      <AntPageHeader\r        ghost={ghost}\r        title={title}\r        subTitle={subtitle}\r        onBack={showBack ? handleBack : undefined}\r        backIcon={showBack ? <ArrowLeftOutlined /> : false}\r        breadcrumb={breadcrumbItems ? { items: breadcrumbItems } : undefined}\r        extra={actions || extra}\r      >\r        {children}\r      </AntPageHeader>\r    </div>\r  );\r};\rexport default PageHeader;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/PageHeader/index.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      },
      {
        "type": "missingRoles",
        "line": 1,
        "code": "import React, { useMemo, useCallback, useState, useEffect } from 'react';\rimport { Checkbox, Space } from 'antd';\rimport type { ColumnsType } from 'antd/es/table';\rimport { SortAscendingOutlined, SortDescendingOutlined } from '@ant-design/icons';\rimport * as ReactWindow from 'react-window';\rimport AutoSizer from 'react-virtualized-auto-sizer';\rconst List = ReactWindow.FixedSizeList;\rinterface VirtualTableProps<T> {\r  columns: ColumnsType<T>;\r  dataSource: T[];\r  rowKey: string | ((record: T) => string);\r  rowHeight?: number;\r  headerHeight?: number;\r  loading?: boolean;\r  selectable?: boolean;\r  onSelectionChange?: (selectedKeys: React.Key[]) => void;\r  onRowClick?: (record: T) => void;\r  className?: string;\r  style?: React.CSSProperties;\r}\rexport function VirtualTable<T extends Record<string, any>>({\r  columns,\r  dataSource,\r  rowKey,\r  rowHeight = 54,\r  headerHeight = 55,\r  loading = false,\r  selectable = false,\r  onSelectionChange,\r  onRowClick,\r  className,\r  style,\r}: VirtualTableProps<T>) {\r  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\r  const [sortColumn, setSortColumn] = useState<string | null>(null);\r  const [sortOrder, setSortOrder] = useState<'ascend' | 'descend' | null>(null);\r  const getRowKey = useCallback(\r    (record: T) => {\r      if (typeof rowKey === 'function') {\r        return rowKey(record);\r      }\r      return record[rowKey];\r    },\r    [rowKey]\r  );\r  const sortedData = useMemo(() => {\r    if (!sortColumn || !sortOrder) {\r      return dataSource;\r    }\r    return [...dataSource].sort((a, b) => {\r      const aValue = a[sortColumn];\r      const bValue = b[sortColumn];\r      if (aValue === bValue) return 0;\r      const comparison = aValue > bValue ? 1 : -1;\r      return sortOrder === 'ascend' ? comparison : -comparison;\r    });\r  }, [dataSource, sortColumn, sortOrder]);\r  const handleSort = useCallback((columnKey: string) => {\r    if (sortColumn === columnKey) {\r      if (sortOrder === 'ascend') {\r        setSortOrder('descend');\r      } else if (sortOrder === 'descend') {\r        setSortOrder(null);\r        setSortColumn(null);\r      }\r    } else {\r      setSortColumn(columnKey);\r      setSortOrder('ascend');\r    }\r  }, [sortColumn, sortOrder]);\r  const handleSelectAll = useCallback((checked: boolean) => {\r    if (checked) {\r      const allKeys = sortedData.map(record => getRowKey(record));\r      setSelectedRowKeys(allKeys);\r      onSelectionChange?.(allKeys);\r    } else {\r      setSelectedRowKeys([]);\r      onSelectionChange?.([]);\r    }\r  }, [sortedData, getRowKey, onSelectionChange]);\r  const handleSelectRow = useCallback((key: React.Key, checked: boolean) => {\r    const newSelectedKeys = checked\r      ? [...selectedRowKeys, key]\r      : selectedRowKeys.filter(k => k !== key);\r    setSelectedRowKeys(newSelectedKeys);\r    onSelectionChange?.(newSelectedKeys);\r  }, [selectedRowKeys, onSelectionChange]);\r  const renderHeader = () => (\r    <div \r      className=\"virtual-table-header\"\r      style={{\r        display: 'flex',\r        alignItems: 'center',\r        height: headerHeight,\r        borderBottom: '1px solid #f0f0f0',\r        backgroundColor: '#fafafa',\r        fontWeight: 500,\r        padding: '0 16px',\r      }}\r    >\r      {selectable && (\r        <div style={{ width: 50, flexShrink: 0 }}>\r          <Checkbox\r            checked={selectedRowKeys.length === sortedData.length && sortedData.length > 0}\r            indeterminate={selectedRowKeys.length > 0 && selectedRowKeys.length < sortedData.length}\r            onChange={(e) => handleSelectAll(e.target.checked)}\r          />\r        </div>\r      )}\r      {columns.map((column, index) => {\r        const columnKey = column.dataIndex as string;\r        const isSorted = sortColumn === columnKey;\r        return (\r          <div\r            key={columnKey || index}\r            style={{\r              flex: column.width ? `0 0 ${column.width}px` : 1,\r              padding: '0 8px',\r              display: 'flex',\r              alignItems: 'center',\r              justifyContent: 'space-between',\r              cursor: column.sorter ? 'pointer' : 'default',\r            }}\r            onClick={() => column.sorter && handleSort(columnKey)}\r           role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => column.sorter && handleSort(columnKey)(e)}>\r            <span>{column.title as React.ReactNode}</span>\r            {column.sorter && (\r              <Space size={4}>\r                {isSorted && sortOrder === 'ascend' && <SortAscendingOutlined />}\r                {isSorted && sortOrder === 'descend' && <SortDescendingOutlined />}\r              </Space>\r            )}\r          </div>\r        );\r      })}\r    </div>\r  );\r  const Row = ({ index, style }: { index: number; style: React.CSSProperties }) => {\r    const record = sortedData[index];\r    const key = getRowKey(record);\r    const isSelected = selectedRowKeys.includes(key);\r    return (\r      <div\r        style={{\r          ...style,\r          display: 'flex',\r          alignItems: 'center',\r          borderBottom: '1px solid #f0f0f0',\r          padding: '0 16px',\r          cursor: onRowClick ? 'pointer' : 'default',\r          backgroundColor: isSelected ? '#f5f5f5' : undefined,\r        }}\r        className=\"virtual-table-row\"\r        onClick={() => onRowClick?.(record)}\r       role=\"button\" tabIndex={0} onKeyDown={(e) => e.key === 'Enter' && () => onRowClick?.(record)(e)}>\r        {selectable && (\r          <div style={{ width: 50, flexShrink: 0 }}>\r            <Checkbox\r              checked={isSelected}\r              onChange={(e) => handleSelectRow(key, e.target.checked)}\r              onClick={(e) => e.stopPropagation()}\r            />\r          </div>\r        )}\r        {columns.map((column, colIndex) => {\r          const dataIndex = column.dataIndex as string;\r          const value = record[dataIndex];\r          return (\r            <div\r              key={dataIndex || colIndex}\r              style={{\r                flex: column.width ? `0 0 ${column.width}px` : 1,\r                padding: '0 8px',\r                overflow: 'hidden',\r                textOverflow: 'ellipsis',\r                whiteSpace: 'nowrap',\r              }}\r            >\r              {column.render ? column.render(value, record, index) : value}\r            </div>\r          );\r        })}\r      </div>\r    );\r  };\r  useEffect(() => {\r    setSelectedRowKeys([]);\r  }, [dataSource]);\r  return (\r    <div className={className} style={{ height: '100%', width: '100%', ...style }}>\r      {renderHeader()}\r      <div style={{ height: `calc(100% - ${headerHeight}px)` }}>\r        <AutoSizer>\r          {({ height, width }) => (\r            <List\r              height={height}\r              itemCount={sortedData.length}\r              itemSize={rowHeight}\r              width={width}\r              overscanCount={10}\r            >\r              {Row}\r            </List>\r          )}\r        </AutoSizer>\r      </div>\r    </div>\r  );\r}\rexport default VirtualTable;",
        "file": "C:/Users/PC/source/repos/Stocker/stocker-web/src/shared/components/VirtualTable.tsx",
        "severity": "warning",
        "message": "Clickable div should be a button or have role=\"button\""
      }
    ],
    "headingOrder": [],
    "formIssues": [],
    "focusIssues": []
  }
}