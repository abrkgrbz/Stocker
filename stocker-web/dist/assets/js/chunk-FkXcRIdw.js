var e,t,n=Object.defineProperty,o=Object.defineProperties,s=Object.getOwnPropertyDescriptors,r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,a=(e,t,o)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o,l=(e,t)=>{for(var n in t||(t={}))i.call(t,n)&&a(e,n,t[n]);if(r)for(var n of r(t))c.call(t,n)&&a(e,n,t[n]);return e},h=(e,t)=>o(e,s(t)),u=(e,t,n)=>new Promise((o,s)=>{var r=e=>{try{c(n.next(e))}catch(t){s(t)}},i=e=>{try{c(n.throw(e))}catch(t){s(t)}},c=e=>e.done?o(e.value):Promise.resolve(e.value).then(r,i);c((n=n.apply(e,t)).next())});class g extends Error{constructor(e,t){const n=new.target.prototype;super(`${e}: Status code '${t}'`),this.statusCode=t,this.__proto__=n}}class d extends Error{constructor(e="A timeout occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class _ extends Error{constructor(e="An abort occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class p extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.transport=t,this.errorType="UnsupportedTransportError",this.__proto__=n}}class f extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.transport=t,this.errorType="DisabledTransportError",this.__proto__=n}}class m extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.transport=t,this.errorType="FailedToStartTransportError",this.__proto__=n}}class b extends Error{constructor(e){const t=new.target.prototype;super(e),this.errorType="FailedToNegotiateWithServerError",this.__proto__=t}}class w extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.innerErrors=t,this.__proto__=n}}class v{constructor(e,t,n){this.statusCode=e,this.statusText=t,this.content=n}}class y{get(e,t){return this.send(h(l({},t),{method:"GET",url:e}))}post(e,t){return this.send(h(l({},t),{method:"POST",url:e}))}delete(e,t){return this.send(h(l({},t),{method:"DELETE",url:e}))}getCookieString(e){return""}}(t=e||(e={}))[t.Trace=0]="Trace",t[t.Debug=1]="Debug",t[t.Information=2]="Information",t[t.Warning=3]="Warning",t[t.Error=4]="Error",t[t.Critical=5]="Critical",t[t.None=6]="None";class S{constructor(){}log(e,t){}}S.instance=new S;class C{static isRequired(e,t){if(null==e)throw new Error(`The '${t}' argument is required.`)}static isNotEmpty(e,t){if(!e||e.match(/^\s*$/))throw new Error(`The '${t}' argument should not be empty.`)}static isIn(e,t,n){if(!(e in t))throw new Error(`Unknown ${n} value: ${e}.`)}}class k{static get isBrowser(){return!k.isNode&&"object"==typeof window&&"object"==typeof window.document}static get isWebWorker(){return!k.isNode&&"object"==typeof self&&"importScripts"in self}static get isReactNative(){return!k.isNode&&"object"==typeof window&&void 0===window.document}static get isNode(){return"undefined"!=typeof process&&process.release&&"node"===process.release.name}}function I(e,t){let n="";return E(e)?(n=`Binary data of length ${e.byteLength}`,t&&(n+=`. Content: '${function(e){const t=new Uint8Array(e);let n="";return t.forEach(e=>{n+=`0x${e<16?"0":""}${e.toString(16)} `}),n.substr(0,n.length-1)}(e)}'`)):"string"==typeof e&&(n=`String data of length ${e.length}`,t&&(n+=`. Content: '${e}'`)),n}function E(e){return e&&"undefined"!=typeof ArrayBuffer&&(e instanceof ArrayBuffer||e.constructor&&"ArrayBuffer"===e.constructor.name)}function T(t,n,o,s,r,i){return u(this,null,function*(){const c={},[a,h]=R();c[a]=h,t.log(e.Trace,`(${n} transport) sending data. ${I(r,i.logMessageContent)}.`);const u=E(r)?"arraybuffer":"text",g=yield o.post(s,{content:r,headers:l(l({},c),i.headers),responseType:u,timeout:i.timeout,withCredentials:i.withCredentials});t.log(e.Trace,`(${n} transport) request complete. Response status: ${g.statusCode}.`)})}class P{constructor(e,t){this._subject=e,this._observer=t}dispose(){const e=this._subject.observers.indexOf(this._observer);e>-1&&this._subject.observers.splice(e,1),0===this._subject.observers.length&&this._subject.cancelCallback&&this._subject.cancelCallback().catch(e=>{})}}class ${constructor(e){this._minLevel=e,this.out=console}log(t,n){if(t>=this._minLevel){const o=`[${(new Date).toISOString()}] ${e[t]}: ${n}`;switch(t){case e.Critical:case e.Error:this.out.error(o);break;case e.Warning:this.out.warn(o);break;case e.Information:this.out.info(o);break;default:this.out.log(o)}}}}function R(){let e="X-SignalR-User-Agent";return k.isNode&&(e="User-Agent"),[e,D("9.0.6",q(),x(),M())]}function D(e,t,n,o){let s="Microsoft SignalR/";const r=e.split(".");return s+=`${r[0]}.${r[1]}`,s+=` (${e}; `,s+=t&&""!==t?`${t}; `:"Unknown OS; ",s+=`${n}`,s+=o?`; ${o}`:"; Unknown Runtime Version",s+=")",s}function q(){if(!k.isNode)return"";switch(process.platform){case"win32":return"Windows NT";case"darwin":return"macOS";case"linux":return"Linux";default:return process.platform}}function M(){if(k.isNode)return process.versions.node}function x(){return k.isNode?"NodeJS":"Browser"}function H(e){return e.stack?e.stack:e.message?e.message:`${e}`}class A extends y{constructor(e){if(super(),this._logger=e,"undefined"==typeof fetch||k.isNode){const e="function"==typeof __webpack_require__?__non_webpack_require__:require;this._jar=new(e("tough-cookie").CookieJar),"undefined"==typeof fetch?this._fetchType=e("node-fetch"):this._fetchType=fetch,this._fetchType=e("fetch-cookie")(this._fetchType,this._jar)}else this._fetchType=fetch.bind(function(){if("undefined"!=typeof globalThis)return globalThis;if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if("undefined"!=typeof global)return global;throw new Error("could not find global")}());if("undefined"==typeof AbortController){const e="function"==typeof __webpack_require__?__non_webpack_require__:require;this._abortControllerType=e("abort-controller")}else this._abortControllerType=AbortController}send(t){return u(this,null,function*(){if(t.abortSignal&&t.abortSignal.aborted)throw new _;if(!t.method)throw new Error("No method defined.");if(!t.url)throw new Error("No url defined.");const n=new this._abortControllerType;let o;t.abortSignal&&(t.abortSignal.onabort=()=>{n.abort(),o=new _});let s,r=null;if(t.timeout){const s=t.timeout;r=setTimeout(()=>{n.abort(),this._logger.log(e.Warning,"Timeout from HTTP request."),o=new d},s)}""===t.content&&(t.content=void 0),t.content&&(t.headers=t.headers||{},E(t.content)?t.headers["Content-Type"]="application/octet-stream":t.headers["Content-Type"]="text/plain;charset=UTF-8");try{s=yield this._fetchType(t.url,{body:t.content,cache:"no-cache",credentials:!0===t.withCredentials?"include":"same-origin",headers:l({"X-Requested-With":"XMLHttpRequest"},t.headers),method:t.method,mode:"cors",redirect:"follow",signal:n.signal})}catch(a){if(o)throw o;throw this._logger.log(e.Warning,`Error from HTTP request. ${a}.`),a}finally{r&&clearTimeout(r),t.abortSignal&&(t.abortSignal.onabort=null)}if(!s.ok){const e=yield N(s,"text");throw new g(e||s.statusText,s.status)}const i=N(s,t.responseType),c=yield i;return new v(s.status,s.statusText,c)})}getCookieString(e){let t="";return k.isNode&&this._jar&&this._jar.getCookies(e,(e,n)=>t=n.join("; ")),t}}function N(e,t){let n;switch(t){case"arraybuffer":n=e.arrayBuffer();break;case"text":default:n=e.text();break;case"blob":case"document":case"json":throw new Error(`${t} is not supported.`)}return n}class W extends y{constructor(e){super(),this._logger=e}send(t){return t.abortSignal&&t.abortSignal.aborted?Promise.reject(new _):t.method?t.url?new Promise((n,o)=>{const s=new XMLHttpRequest;s.open(t.method,t.url,!0),s.withCredentials=void 0===t.withCredentials||t.withCredentials,s.setRequestHeader("X-Requested-With","XMLHttpRequest"),""===t.content&&(t.content=void 0),t.content&&(E(t.content)?s.setRequestHeader("Content-Type","application/octet-stream"):s.setRequestHeader("Content-Type","text/plain;charset=UTF-8"));const r=t.headers;r&&Object.keys(r).forEach(e=>{s.setRequestHeader(e,r[e])}),t.responseType&&(s.responseType=t.responseType),t.abortSignal&&(t.abortSignal.onabort=()=>{s.abort(),o(new _)}),t.timeout&&(s.timeout=t.timeout),s.onload=()=>{t.abortSignal&&(t.abortSignal.onabort=null),s.status>=200&&s.status<300?n(new v(s.status,s.statusText,s.response||s.responseText)):o(new g(s.response||s.responseText||s.statusText,s.status))},s.onerror=()=>{this._logger.log(e.Warning,`Error from HTTP request. ${s.status}: ${s.statusText}.`),o(new g(s.statusText,s.status))},s.ontimeout=()=>{this._logger.log(e.Warning,"Timeout from HTTP request."),o(new d)},s.send(t.content)}):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}}class j extends y{constructor(e){if(super(),"undefined"!=typeof fetch||k.isNode)this._httpClient=new A(e);else{if("undefined"==typeof XMLHttpRequest)throw new Error("No usable HttpClient found.");this._httpClient=new W(e)}}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new _):e.method?e.url?this._httpClient.send(e):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}getCookieString(e){return this._httpClient.getCookieString(e)}}class L{static write(e){return`${e}${L.RecordSeparator}`}static parse(e){if(e[e.length-1]!==L.RecordSeparator)throw new Error("Message is incomplete.");const t=e.split(L.RecordSeparator);return t.pop(),t}}L.RecordSeparatorCode=30,L.RecordSeparator=String.fromCharCode(L.RecordSeparatorCode);class B{writeHandshakeRequest(e){return L.write(JSON.stringify(e))}parseHandshakeResponse(e){let t,n;if(E(e)){const o=new Uint8Array(e),s=o.indexOf(L.RecordSeparatorCode);if(-1===s)throw new Error("Message is incomplete.");const r=s+1;t=String.fromCharCode.apply(null,Array.prototype.slice.call(o.slice(0,r))),n=o.byteLength>r?o.slice(r).buffer:null}else{const o=e,s=o.indexOf(L.RecordSeparator);if(-1===s)throw new Error("Message is incomplete.");const r=s+1;t=o.substring(0,r),n=o.length>r?o.substring(r):null}const o=L.parse(t),s=JSON.parse(o[0]);if(s.type)throw new Error("Expected a handshake response from the server.");return[n,s]}}var O,F;(F=O||(O={}))[F.Invocation=1]="Invocation",F[F.StreamItem=2]="StreamItem",F[F.Completion=3]="Completion",F[F.StreamInvocation=4]="StreamInvocation",F[F.CancelInvocation=5]="CancelInvocation",F[F.Ping=6]="Ping",F[F.Close=7]="Close",F[F.Ack=8]="Ack",F[F.Sequence=9]="Sequence";class U{constructor(){this.observers=[]}next(e){for(const t of this.observers)t.next(e)}error(e){for(const t of this.observers)t.error&&t.error(e)}complete(){for(const e of this.observers)e.complete&&e.complete()}subscribe(e){return this.observers.push(e),new P(this,e)}}class z{constructor(e,t,n){this._bufferSize=1e5,this._messages=[],this._totalMessageCount=0,this._waitForSequenceMessage=!1,this._nextReceivingSequenceId=1,this._latestReceivedSequenceId=0,this._bufferedByteCount=0,this._reconnectInProgress=!1,this._protocol=e,this._connection=t,this._bufferSize=n}_send(e){return u(this,null,function*(){const t=this._protocol.writeMessage(e);let n=Promise.resolve();if(this._isInvocationMessage(e)){this._totalMessageCount++;let e=()=>{},o=()=>{};E(t)?this._bufferedByteCount+=t.byteLength:this._bufferedByteCount+=t.length,this._bufferedByteCount>=this._bufferSize&&(n=new Promise((t,n)=>{e=t,o=n})),this._messages.push(new K(t,this._totalMessageCount,e,o))}try{this._reconnectInProgress||(yield this._connection.send(t))}catch(o){this._disconnected()}yield n})}_ack(e){let t=-1;for(let n=0;n<this._messages.length;n++){const o=this._messages[n];if(o._id<=e.sequenceId)t=n,E(o._message)?this._bufferedByteCount-=o._message.byteLength:this._bufferedByteCount-=o._message.length,o._resolver();else{if(!(this._bufferedByteCount<this._bufferSize))break;o._resolver()}}-1!==t&&(this._messages=this._messages.slice(t+1))}_shouldProcessMessage(e){if(this._waitForSequenceMessage)return e.type===O.Sequence&&(this._waitForSequenceMessage=!1,!0);if(!this._isInvocationMessage(e))return!0;const t=this._nextReceivingSequenceId;return this._nextReceivingSequenceId++,t<=this._latestReceivedSequenceId?(t===this._latestReceivedSequenceId&&this._ackTimer(),!1):(this._latestReceivedSequenceId=t,this._ackTimer(),!0)}_resetSequence(e){e.sequenceId>this._nextReceivingSequenceId?this._connection.stop(new Error("Sequence ID greater than amount of messages we've received.")):this._nextReceivingSequenceId=e.sequenceId}_disconnected(){this._reconnectInProgress=!0,this._waitForSequenceMessage=!0}_resend(){return u(this,null,function*(){const e=0!==this._messages.length?this._messages[0]._id:this._totalMessageCount+1;yield this._connection.send(this._protocol.writeMessage({type:O.Sequence,sequenceId:e}));const t=this._messages;for(const n of t)yield this._connection.send(n._message);this._reconnectInProgress=!1})}_dispose(e){null!=e||(e=new Error("Unable to reconnect to server."));for(const t of this._messages)t._rejector(e)}_isInvocationMessage(e){switch(e.type){case O.Invocation:case O.StreamItem:case O.Completion:case O.StreamInvocation:case O.CancelInvocation:return!0;case O.Close:case O.Sequence:case O.Ping:case O.Ack:return!1}}_ackTimer(){void 0===this._ackTimerHandle&&(this._ackTimerHandle=setTimeout(()=>u(this,null,function*(){try{this._reconnectInProgress||(yield this._connection.send(this._protocol.writeMessage({type:O.Ack,sequenceId:this._latestReceivedSequenceId})))}catch(e){}clearTimeout(this._ackTimerHandle),this._ackTimerHandle=void 0}),1e3))}}class K{constructor(e,t,n,o){this._message=e,this._id=t,this._resolver=n,this._rejector=o}}var X,J;(J=X||(X={})).Disconnected="Disconnected",J.Connecting="Connecting",J.Connected="Connected",J.Disconnecting="Disconnecting",J.Reconnecting="Reconnecting";class V{static create(e,t,n,o,s,r,i){return new V(e,t,n,o,s,r,i)}constructor(t,n,o,s,r,i,c){this._nextKeepAlive=0,this._freezeEventListener=()=>{this._logger.log(e.Warning,"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://learn.microsoft.com/aspnet/core/signalr/javascript-client#bsleep")},C.isRequired(t,"connection"),C.isRequired(n,"logger"),C.isRequired(o,"protocol"),this.serverTimeoutInMilliseconds=null!=r?r:3e4,this.keepAliveIntervalInMilliseconds=null!=i?i:15e3,this._statefulReconnectBufferSize=null!=c?c:1e5,this._logger=n,this._protocol=o,this.connection=t,this._reconnectPolicy=s,this._handshakeProtocol=new B,this.connection.onreceive=e=>this._processIncomingData(e),this.connection.onclose=e=>this._connectionClosed(e),this._callbacks={},this._methods={},this._closedCallbacks=[],this._reconnectingCallbacks=[],this._reconnectedCallbacks=[],this._invocationId=0,this._receivedHandshakeResponse=!1,this._connectionState=X.Disconnected,this._connectionStarted=!1,this._cachedPingMessage=this._protocol.writeMessage({type:O.Ping})}get state(){return this._connectionState}get connectionId(){return this.connection&&this.connection.connectionId||null}get baseUrl(){return this.connection.baseUrl||""}set baseUrl(e){if(this._connectionState!==X.Disconnected&&this._connectionState!==X.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!e)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=e}start(){return this._startPromise=this._startWithStateTransitions(),this._startPromise}_startWithStateTransitions(){return u(this,null,function*(){if(this._connectionState!==X.Disconnected)return Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."));this._connectionState=X.Connecting,this._logger.log(e.Debug,"Starting HubConnection.");try{yield this._startInternal(),k.isBrowser&&window.document.addEventListener("freeze",this._freezeEventListener),this._connectionState=X.Connected,this._connectionStarted=!0,this._logger.log(e.Debug,"HubConnection connected successfully.")}catch(t){return this._connectionState=X.Disconnected,this._logger.log(e.Debug,`HubConnection failed to start successfully because of error '${t}'.`),Promise.reject(t)}})}_startInternal(){return u(this,null,function*(){this._stopDuringStartError=void 0,this._receivedHandshakeResponse=!1;const t=new Promise((e,t)=>{this._handshakeResolver=e,this._handshakeRejecter=t});yield this.connection.start(this._protocol.transferFormat);try{let n=this._protocol.version;this.connection.features.reconnect||(n=1);const o={protocol:this._protocol.name,version:n};if(this._logger.log(e.Debug,"Sending handshake request."),yield this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(o)),this._logger.log(e.Information,`Using HubProtocol '${this._protocol.name}'.`),this._cleanupTimeout(),this._resetTimeoutPeriod(),this._resetKeepAliveInterval(),yield t,this._stopDuringStartError)throw this._stopDuringStartError;(this.connection.features.reconnect||!1)&&(this._messageBuffer=new z(this._protocol,this.connection,this._statefulReconnectBufferSize),this.connection.features.disconnected=this._messageBuffer._disconnected.bind(this._messageBuffer),this.connection.features.resend=()=>{if(this._messageBuffer)return this._messageBuffer._resend()}),this.connection.features.inherentKeepAlive||(yield this._sendMessage(this._cachedPingMessage))}catch(n){throw this._logger.log(e.Debug,`Hub handshake failed with error '${n}' during start(). Stopping HubConnection.`),this._cleanupTimeout(),this._cleanupPingTimer(),yield this.connection.stop(n),n}})}stop(){return u(this,null,function*(){const e=this._startPromise;this.connection.features.reconnect=!1,this._stopPromise=this._stopInternal(),yield this._stopPromise;try{yield e}catch(t){}})}_stopInternal(t){if(this._connectionState===X.Disconnected)return this._logger.log(e.Debug,`Call to HubConnection.stop(${t}) ignored because it is already in the disconnected state.`),Promise.resolve();if(this._connectionState===X.Disconnecting)return this._logger.log(e.Debug,`Call to HttpConnection.stop(${t}) ignored because the connection is already in the disconnecting state.`),this._stopPromise;const n=this._connectionState;return this._connectionState=X.Disconnecting,this._logger.log(e.Debug,"Stopping HubConnection."),this._reconnectDelayHandle?(this._logger.log(e.Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this._reconnectDelayHandle),this._reconnectDelayHandle=void 0,this._completeClose(),Promise.resolve()):(n===X.Connected&&this._sendCloseMessage(),this._cleanupTimeout(),this._cleanupPingTimer(),this._stopDuringStartError=t||new _("The connection was stopped before the hub handshake could complete."),this.connection.stop(t))}_sendCloseMessage(){return u(this,null,function*(){try{yield this._sendWithProtocol(this._createCloseMessage())}catch(e){}})}stream(e,...t){const[n,o]=this._replaceStreamingParams(t),s=this._createStreamInvocation(e,t,o);let r;const i=new U;return i.cancelCallback=()=>{const e=this._createCancelInvocation(s.invocationId);return delete this._callbacks[s.invocationId],r.then(()=>this._sendWithProtocol(e))},this._callbacks[s.invocationId]=(e,t)=>{t?i.error(t):e&&(e.type===O.Completion?e.error?i.error(new Error(e.error)):i.complete():i.next(e.item))},r=this._sendWithProtocol(s).catch(e=>{i.error(e),delete this._callbacks[s.invocationId]}),this._launchStreams(n,r),i}_sendMessage(e){return this._resetKeepAliveInterval(),this.connection.send(e)}_sendWithProtocol(e){return this._messageBuffer?this._messageBuffer._send(e):this._sendMessage(this._protocol.writeMessage(e))}send(e,...t){const[n,o]=this._replaceStreamingParams(t),s=this._sendWithProtocol(this._createInvocation(e,t,!0,o));return this._launchStreams(n,s),s}invoke(e,...t){const[n,o]=this._replaceStreamingParams(t),s=this._createInvocation(e,t,!1,o);return new Promise((e,t)=>{this._callbacks[s.invocationId]=(n,o)=>{o?t(o):n&&(n.type===O.Completion?n.error?t(new Error(n.error)):e(n.result):t(new Error(`Unexpected message type: ${n.type}`)))};const o=this._sendWithProtocol(s).catch(e=>{t(e),delete this._callbacks[s.invocationId]});this._launchStreams(n,o)})}on(e,t){e&&t&&(e=e.toLowerCase(),this._methods[e]||(this._methods[e]=[]),-1===this._methods[e].indexOf(t)&&this._methods[e].push(t))}off(e,t){if(!e)return;e=e.toLowerCase();const n=this._methods[e];if(n)if(t){const o=n.indexOf(t);-1!==o&&(n.splice(o,1),0===n.length&&delete this._methods[e])}else delete this._methods[e]}onclose(e){e&&this._closedCallbacks.push(e)}onreconnecting(e){e&&this._reconnectingCallbacks.push(e)}onreconnected(e){e&&this._reconnectedCallbacks.push(e)}_processIncomingData(t){if(this._cleanupTimeout(),this._receivedHandshakeResponse||(t=this._processHandshakeResponse(t),this._receivedHandshakeResponse=!0),t){const o=this._protocol.parseMessages(t,this._logger);for(const t of o)if(!this._messageBuffer||this._messageBuffer._shouldProcessMessage(t))switch(t.type){case O.Invocation:this._invokeClientMethod(t).catch(t=>{this._logger.log(e.Error,`Invoke client method threw error: ${H(t)}`)});break;case O.StreamItem:case O.Completion:{const o=this._callbacks[t.invocationId];if(o){t.type===O.Completion&&delete this._callbacks[t.invocationId];try{o(t)}catch(n){this._logger.log(e.Error,`Stream callback threw error: ${H(n)}`)}}break}case O.Ping:break;case O.Close:{this._logger.log(e.Information,"Close message received from server.");const n=t.error?new Error("Server returned an error on close: "+t.error):void 0;!0===t.allowReconnect?this.connection.stop(n):this._stopPromise=this._stopInternal(n);break}case O.Ack:this._messageBuffer&&this._messageBuffer._ack(t);break;case O.Sequence:this._messageBuffer&&this._messageBuffer._resetSequence(t);break;default:this._logger.log(e.Warning,`Invalid message type: ${t.type}.`)}}this._resetTimeoutPeriod()}_processHandshakeResponse(t){let n,o;try{[o,n]=this._handshakeProtocol.parseHandshakeResponse(t)}catch(s){const t="Error parsing handshake response: "+s;this._logger.log(e.Error,t);const n=new Error(t);throw this._handshakeRejecter(n),n}if(n.error){const t="Server returned handshake error: "+n.error;this._logger.log(e.Error,t);const o=new Error(t);throw this._handshakeRejecter(o),o}return this._logger.log(e.Debug,"Server handshake complete."),this._handshakeResolver(),o}_resetKeepAliveInterval(){this.connection.features.inherentKeepAlive||(this._nextKeepAlive=(new Date).getTime()+this.keepAliveIntervalInMilliseconds,this._cleanupPingTimer())}_resetTimeoutPeriod(){if(!(this.connection.features&&this.connection.features.inherentKeepAlive||(this._timeoutHandle=setTimeout(()=>this.serverTimeout(),this.serverTimeoutInMilliseconds),void 0!==this._pingServerHandle))){let e=this._nextKeepAlive-(new Date).getTime();e<0&&(e=0),this._pingServerHandle=setTimeout(()=>u(this,null,function*(){if(this._connectionState===X.Connected)try{yield this._sendMessage(this._cachedPingMessage)}catch(e){this._cleanupPingTimer()}}),e)}}serverTimeout(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))}_invokeClientMethod(t){return u(this,null,function*(){const n=t.target.toLowerCase(),o=this._methods[n];if(!o)return this._logger.log(e.Warning,`No client method with the name '${n}' found.`),void(t.invocationId&&(this._logger.log(e.Warning,`No result given for '${n}' method and invocation ID '${t.invocationId}'.`),yield this._sendWithProtocol(this._createCompletionMessage(t.invocationId,"Client didn't provide a result.",null))));const s=o.slice(),r=!!t.invocationId;let i,c,a;for(const h of s)try{const o=i;i=yield h.apply(this,t.arguments),r&&i&&o&&(this._logger.log(e.Error,`Multiple results provided for '${n}'. Sending error to server.`),a=this._createCompletionMessage(t.invocationId,"Client provided multiple results.",null)),c=void 0}catch(l){c=l,this._logger.log(e.Error,`A callback for the method '${n}' threw error '${l}'.`)}a?yield this._sendWithProtocol(a):r?(c?a=this._createCompletionMessage(t.invocationId,`${c}`,null):void 0!==i?a=this._createCompletionMessage(t.invocationId,null,i):(this._logger.log(e.Warning,`No result given for '${n}' method and invocation ID '${t.invocationId}'.`),a=this._createCompletionMessage(t.invocationId,"Client didn't provide a result.",null)),yield this._sendWithProtocol(a)):i&&this._logger.log(e.Error,`Result given for '${n}' method but server is not expecting a result.`)})}_connectionClosed(t){this._logger.log(e.Debug,`HubConnection.connectionClosed(${t}) called while in state ${this._connectionState}.`),this._stopDuringStartError=this._stopDuringStartError||t||new _("The underlying connection was closed before the hub handshake could complete."),this._handshakeResolver&&this._handshakeResolver(),this._cancelCallbacksWithError(t||new Error("Invocation canceled due to the underlying connection being closed.")),this._cleanupTimeout(),this._cleanupPingTimer(),this._connectionState===X.Disconnecting?this._completeClose(t):this._connectionState===X.Connected&&this._reconnectPolicy?this._reconnect(t):this._connectionState===X.Connected&&this._completeClose(t)}_completeClose(t){if(this._connectionStarted){this._connectionState=X.Disconnected,this._connectionStarted=!1,this._messageBuffer&&(this._messageBuffer._dispose(null!=t?t:new Error("Connection closed.")),this._messageBuffer=void 0),k.isBrowser&&window.document.removeEventListener("freeze",this._freezeEventListener);try{this._closedCallbacks.forEach(e=>e.apply(this,[t]))}catch(n){this._logger.log(e.Error,`An onclose callback called with error '${t}' threw error '${n}'.`)}}}_reconnect(t){return u(this,null,function*(){const n=Date.now();let o=0,s=void 0!==t?t:new Error("Attempting to reconnect due to a unknown error."),r=this._getNextRetryDelay(o++,0,s);if(null===r)return this._logger.log(e.Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),void this._completeClose(t);if(this._connectionState=X.Reconnecting,t?this._logger.log(e.Information,`Connection reconnecting because of error '${t}'.`):this._logger.log(e.Information,"Connection reconnecting."),0!==this._reconnectingCallbacks.length){try{this._reconnectingCallbacks.forEach(e=>e.apply(this,[t]))}catch(i){this._logger.log(e.Error,`An onreconnecting callback called with error '${t}' threw error '${i}'.`)}if(this._connectionState!==X.Reconnecting)return void this._logger.log(e.Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.")}for(;null!==r;){if(this._logger.log(e.Information,`Reconnect attempt number ${o} will start in ${r} ms.`),yield new Promise(e=>{this._reconnectDelayHandle=setTimeout(e,r)}),this._reconnectDelayHandle=void 0,this._connectionState!==X.Reconnecting)return void this._logger.log(e.Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting.");try{if(yield this._startInternal(),this._connectionState=X.Connected,this._logger.log(e.Information,"HubConnection reconnected successfully."),0!==this._reconnectedCallbacks.length)try{this._reconnectedCallbacks.forEach(e=>e.apply(this,[this.connection.connectionId]))}catch(i){this._logger.log(e.Error,`An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${i}'.`)}return}catch(i){if(this._logger.log(e.Information,`Reconnect attempt failed because of error '${i}'.`),this._connectionState!==X.Reconnecting)return this._logger.log(e.Debug,`Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`),void(this._connectionState===X.Disconnecting&&this._completeClose());s=i instanceof Error?i:new Error(i.toString()),r=this._getNextRetryDelay(o++,Date.now()-n,s)}}this._logger.log(e.Information,`Reconnect retries have been exhausted after ${Date.now()-n} ms and ${o} failed attempts. Connection disconnecting.`),this._completeClose()})}_getNextRetryDelay(t,n,o){try{return this._reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:n,previousRetryCount:t,retryReason:o})}catch(s){return this._logger.log(e.Error,`IRetryPolicy.nextRetryDelayInMilliseconds(${t}, ${n}) threw error '${s}'.`),null}}_cancelCallbacksWithError(t){const n=this._callbacks;this._callbacks={},Object.keys(n).forEach(o=>{const s=n[o];try{s(null,t)}catch(r){this._logger.log(e.Error,`Stream 'error' callback called with '${t}' threw error: ${H(r)}`)}})}_cleanupPingTimer(){this._pingServerHandle&&(clearTimeout(this._pingServerHandle),this._pingServerHandle=void 0)}_cleanupTimeout(){this._timeoutHandle&&clearTimeout(this._timeoutHandle)}_createInvocation(e,t,n,o){if(n)return 0!==o.length?{target:e,arguments:t,streamIds:o,type:O.Invocation}:{target:e,arguments:t,type:O.Invocation};{const n=this._invocationId;return this._invocationId++,0!==o.length?{target:e,arguments:t,invocationId:n.toString(),streamIds:o,type:O.Invocation}:{target:e,arguments:t,invocationId:n.toString(),type:O.Invocation}}}_launchStreams(e,t){if(0!==e.length){t||(t=Promise.resolve());for(const n in e)e[n].subscribe({complete:()=>{t=t.then(()=>this._sendWithProtocol(this._createCompletionMessage(n)))},error:e=>{let o;o=e instanceof Error?e.message:e&&e.toString?e.toString():"Unknown error",t=t.then(()=>this._sendWithProtocol(this._createCompletionMessage(n,o)))},next:e=>{t=t.then(()=>this._sendWithProtocol(this._createStreamItemMessage(n,e)))}})}}_replaceStreamingParams(e){const t=[],n=[];for(let o=0;o<e.length;o++){const s=e[o];if(this._isObservable(s)){const r=this._invocationId;this._invocationId++,t[r]=s,n.push(r.toString()),e.splice(o,1)}}return[t,n]}_isObservable(e){return e&&e.subscribe&&"function"==typeof e.subscribe}_createStreamInvocation(e,t,n){const o=this._invocationId;return this._invocationId++,0!==n.length?{target:e,arguments:t,invocationId:o.toString(),streamIds:n,type:O.StreamInvocation}:{target:e,arguments:t,invocationId:o.toString(),type:O.StreamInvocation}}_createCancelInvocation(e){return{invocationId:e,type:O.CancelInvocation}}_createStreamItemMessage(e,t){return{invocationId:e,item:t,type:O.StreamItem}}_createCompletionMessage(e,t,n){return t?{error:t,invocationId:e,type:O.Completion}:{invocationId:e,result:n,type:O.Completion}}_createCloseMessage(){return{type:O.Close}}}const Q=[0,2e3,1e4,3e4,null];class G{constructor(e){this._retryDelays=void 0!==e?[...e,null]:Q}nextRetryDelayInMilliseconds(e){return this._retryDelays[e.previousRetryCount]}}class Y{}Y.Authorization="Authorization",Y.Cookie="Cookie";class Z extends y{constructor(e,t){super(),this._innerClient=e,this._accessTokenFactory=t}send(e){return u(this,null,function*(){let t=!0;this._accessTokenFactory&&(!this._accessToken||e.url&&e.url.indexOf("/negotiate?")>0)&&(t=!1,this._accessToken=yield this._accessTokenFactory()),this._setAuthorizationHeader(e);const n=yield this._innerClient.send(e);return t&&401===n.statusCode&&this._accessTokenFactory?(this._accessToken=yield this._accessTokenFactory(),this._setAuthorizationHeader(e),yield this._innerClient.send(e)):n})}_setAuthorizationHeader(e){e.headers||(e.headers={}),this._accessToken?e.headers[Y.Authorization]=`Bearer ${this._accessToken}`:this._accessTokenFactory&&e.headers[Y.Authorization]&&delete e.headers[Y.Authorization]}getCookieString(e){return this._innerClient.getCookieString(e)}}var ee,te,ne,oe;(te=ee||(ee={}))[te.None=0]="None",te[te.WebSockets=1]="WebSockets",te[te.ServerSentEvents=2]="ServerSentEvents",te[te.LongPolling=4]="LongPolling",(oe=ne||(ne={}))[oe.Text=1]="Text",oe[oe.Binary=2]="Binary";let se=class{constructor(){this._isAborted=!1,this.onabort=null}abort(){this._isAborted||(this._isAborted=!0,this.onabort&&this.onabort())}get signal(){return this}get aborted(){return this._isAborted}};class re{get pollAborted(){return this._pollAbort.aborted}constructor(e,t,n){this._httpClient=e,this._logger=t,this._pollAbort=new se,this._options=n,this._running=!1,this.onreceive=null,this.onclose=null}connect(t,n){return u(this,null,function*(){if(C.isRequired(t,"url"),C.isRequired(n,"transferFormat"),C.isIn(n,ne,"transferFormat"),this._url=t,this._logger.log(e.Trace,"(LongPolling transport) Connecting."),n===ne.Binary&&"undefined"!=typeof XMLHttpRequest&&"string"!=typeof(new XMLHttpRequest).responseType)throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");const[o,s]=R(),r=l({[o]:s},this._options.headers),i={abortSignal:this._pollAbort.signal,headers:r,timeout:1e5,withCredentials:this._options.withCredentials};n===ne.Binary&&(i.responseType="arraybuffer");const c=`${t}&_=${Date.now()}`;this._logger.log(e.Trace,`(LongPolling transport) polling: ${c}.`);const a=yield this._httpClient.get(c,i);200!==a.statusCode?(this._logger.log(e.Error,`(LongPolling transport) Unexpected response code: ${a.statusCode}.`),this._closeError=new g(a.statusText||"",a.statusCode),this._running=!1):this._running=!0,this._receiving=this._poll(this._url,i)})}_poll(t,n){return u(this,null,function*(){try{for(;this._running;)try{const o=`${t}&_=${Date.now()}`;this._logger.log(e.Trace,`(LongPolling transport) polling: ${o}.`);const s=yield this._httpClient.get(o,n);204===s.statusCode?(this._logger.log(e.Information,"(LongPolling transport) Poll terminated by server."),this._running=!1):200!==s.statusCode?(this._logger.log(e.Error,`(LongPolling transport) Unexpected response code: ${s.statusCode}.`),this._closeError=new g(s.statusText||"",s.statusCode),this._running=!1):s.content?(this._logger.log(e.Trace,`(LongPolling transport) data received. ${I(s.content,this._options.logMessageContent)}.`),this.onreceive&&this.onreceive(s.content)):this._logger.log(e.Trace,"(LongPolling transport) Poll timed out, reissuing.")}catch(o){this._running?o instanceof d?this._logger.log(e.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this._closeError=o,this._running=!1):this._logger.log(e.Trace,`(LongPolling transport) Poll errored after shutdown: ${o.message}`)}}finally{this._logger.log(e.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this._raiseOnClose()}})}send(e){return u(this,null,function*(){return this._running?T(this._logger,"LongPolling",this._httpClient,this._url,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))})}stop(){return u(this,null,function*(){this._logger.log(e.Trace,"(LongPolling transport) Stopping polling."),this._running=!1,this._pollAbort.abort();try{yield this._receiving,this._logger.log(e.Trace,`(LongPolling transport) sending DELETE request to ${this._url}.`);const n={},[o,s]=R();n[o]=s;const r={headers:l(l({},n),this._options.headers),timeout:this._options.timeout,withCredentials:this._options.withCredentials};let i;try{yield this._httpClient.delete(this._url,r)}catch(t){i=t}i?i instanceof g&&(404===i.statusCode?this._logger.log(e.Trace,"(LongPolling transport) A 404 response was returned from sending a DELETE request."):this._logger.log(e.Trace,`(LongPolling transport) Error sending a DELETE request: ${i}`)):this._logger.log(e.Trace,"(LongPolling transport) DELETE request accepted.")}finally{this._logger.log(e.Trace,"(LongPolling transport) Stop finished."),this._raiseOnClose()}})}_raiseOnClose(){if(this.onclose){let t="(LongPolling transport) Firing onclose event.";this._closeError&&(t+=" Error: "+this._closeError),this._logger.log(e.Trace,t),this.onclose(this._closeError)}}}class ie{constructor(e,t,n,o){this._httpClient=e,this._accessToken=t,this._logger=n,this._options=o,this.onreceive=null,this.onclose=null}connect(t,n){return u(this,null,function*(){return C.isRequired(t,"url"),C.isRequired(n,"transferFormat"),C.isIn(n,ne,"transferFormat"),this._logger.log(e.Trace,"(SSE transport) Connecting."),this._url=t,this._accessToken&&(t+=(t.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(this._accessToken)}`),new Promise((o,s)=>{let r,i=!1;if(n===ne.Text){if(k.isBrowser||k.isWebWorker)r=new this._options.EventSource(t,{withCredentials:this._options.withCredentials});else{const e=this._httpClient.getCookieString(t),n={};n.Cookie=e;const[o,s]=R();n[o]=s,r=new this._options.EventSource(t,{withCredentials:this._options.withCredentials,headers:l(l({},n),this._options.headers)})}try{r.onmessage=t=>{if(this.onreceive)try{this._logger.log(e.Trace,`(SSE transport) data received. ${I(t.data,this._options.logMessageContent)}.`),this.onreceive(t.data)}catch(n){return void this._close(n)}},r.onerror=e=>{i?this._close():s(new Error("EventSource failed to connect. The connection could not be found on the server, either the connection ID is not present on the server, or a proxy is refusing/buffering the connection. If you have multiple servers check that sticky sessions are enabled."))},r.onopen=()=>{this._logger.log(e.Information,`SSE connected to ${this._url}`),this._eventSource=r,i=!0,o()}}catch(c){return void s(c)}}else s(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"))})})}send(e){return u(this,null,function*(){return this._eventSource?T(this._logger,"SSE",this._httpClient,this._url,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))})}stop(){return this._close(),Promise.resolve()}_close(e){this._eventSource&&(this._eventSource.close(),this._eventSource=void 0,this.onclose&&this.onclose(e))}}class ce{constructor(e,t,n,o,s,r){this._logger=n,this._accessTokenFactory=t,this._logMessageContent=o,this._webSocketConstructor=s,this._httpClient=e,this.onreceive=null,this.onclose=null,this._headers=r}connect(t,n){return u(this,null,function*(){let o;return C.isRequired(t,"url"),C.isRequired(n,"transferFormat"),C.isIn(n,ne,"transferFormat"),this._logger.log(e.Trace,"(WebSockets transport) Connecting."),this._accessTokenFactory&&(o=yield this._accessTokenFactory()),new Promise((s,r)=>{let i;t=t.replace(/^http/,"ws");const c=this._httpClient.getCookieString(t);let a=!1;if(k.isNode||k.isReactNative){const e={},[n,s]=R();e[n]=s,o&&(e[Y.Authorization]=`Bearer ${o}`),c&&(e[Y.Cookie]=c),i=new this._webSocketConstructor(t,void 0,{headers:l(l({},e),this._headers)})}else o&&(t+=(t.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(o)}`);i||(i=new this._webSocketConstructor(t)),n===ne.Binary&&(i.binaryType="arraybuffer"),i.onopen=n=>{this._logger.log(e.Information,`WebSocket connected to ${t}.`),this._webSocket=i,a=!0,s()},i.onerror=t=>{let n=null;n="undefined"!=typeof ErrorEvent&&t instanceof ErrorEvent?t.error:"There was an error with the transport",this._logger.log(e.Information,`(WebSockets transport) ${n}.`)},i.onmessage=t=>{if(this._logger.log(e.Trace,`(WebSockets transport) data received. ${I(t.data,this._logMessageContent)}.`),this.onreceive)try{this.onreceive(t.data)}catch(n){return void this._close(n)}},i.onclose=e=>{if(a)this._close(e);else{let t=null;t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:"WebSocket failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking WebSockets. If you have multiple servers check that sticky sessions are enabled.",r(new Error(t))}}})})}send(t){return this._webSocket&&this._webSocket.readyState===this._webSocketConstructor.OPEN?(this._logger.log(e.Trace,`(WebSockets transport) sending data. ${I(t,this._logMessageContent)}.`),this._webSocket.send(t),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")}stop(){return this._webSocket&&this._close(void 0),Promise.resolve()}_close(t){this._webSocket&&(this._webSocket.onclose=()=>{},this._webSocket.onmessage=()=>{},this._webSocket.onerror=()=>{},this._webSocket.close(),this._webSocket=void 0),this._logger.log(e.Trace,"(WebSockets transport) socket closed."),this.onclose&&(!this._isCloseEvent(t)||!1!==t.wasClean&&1e3===t.code?t instanceof Error?this.onclose(t):this.onclose():this.onclose(new Error(`WebSocket closed with status code: ${t.code} (${t.reason||"no reason given"}).`)))}_isCloseEvent(e){return e&&"boolean"==typeof e.wasClean&&"number"==typeof e.code}}class ae{constructor(t,n={}){var o;if(this._stopPromiseResolver=()=>{},this.features={},this._negotiateVersion=1,C.isRequired(t,"url"),this._logger=void 0===(o=n.logger)?new $(e.Information):null===o?S.instance:void 0!==o.log?o:new $(o),this.baseUrl=this._resolveUrl(t),(n=n||{}).logMessageContent=void 0!==n.logMessageContent&&n.logMessageContent,"boolean"!=typeof n.withCredentials&&void 0!==n.withCredentials)throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");n.withCredentials=void 0===n.withCredentials||n.withCredentials,n.timeout=void 0===n.timeout?1e5:n.timeout;let s=null,r=null;if(k.isNode&&"undefined"!=typeof require){const e="function"==typeof __webpack_require__?__non_webpack_require__:require;s=e("ws"),r=e("eventsource")}k.isNode||"undefined"==typeof WebSocket||n.WebSocket?k.isNode&&!n.WebSocket&&s&&(n.WebSocket=s):n.WebSocket=WebSocket,k.isNode||"undefined"==typeof EventSource||n.EventSource?k.isNode&&!n.EventSource&&void 0!==r&&(n.EventSource=r):n.EventSource=EventSource,this._httpClient=new Z(n.httpClient||new j(this._logger),n.accessTokenFactory),this._connectionState="Disconnected",this._connectionStarted=!1,this._options=n,this.onreceive=null,this.onclose=null}start(t){return u(this,null,function*(){if(t=t||ne.Binary,C.isIn(t,ne,"transferFormat"),this._logger.log(e.Debug,`Starting connection with transfer format '${ne[t]}'.`),"Disconnected"!==this._connectionState)return Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."));if(this._connectionState="Connecting",this._startInternalPromise=this._startInternal(t),yield this._startInternalPromise,"Disconnecting"===this._connectionState){const t="Failed to start the HttpConnection before stop() was called.";return this._logger.log(e.Error,t),yield this._stopPromise,Promise.reject(new _(t))}if("Connected"!==this._connectionState){const t="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!";return this._logger.log(e.Error,t),Promise.reject(new _(t))}this._connectionStarted=!0})}send(e){return"Connected"!==this._connectionState?Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")):(this._sendQueue||(this._sendQueue=new le(this.transport)),this._sendQueue.send(e))}stop(t){return u(this,null,function*(){return"Disconnected"===this._connectionState?(this._logger.log(e.Debug,`Call to HttpConnection.stop(${t}) ignored because the connection is already in the disconnected state.`),Promise.resolve()):"Disconnecting"===this._connectionState?(this._logger.log(e.Debug,`Call to HttpConnection.stop(${t}) ignored because the connection is already in the disconnecting state.`),this._stopPromise):(this._connectionState="Disconnecting",this._stopPromise=new Promise(e=>{this._stopPromiseResolver=e}),yield this._stopInternal(t),void(yield this._stopPromise))})}_stopInternal(t){return u(this,null,function*(){this._stopError=t;try{yield this._startInternalPromise}catch(n){}if(this.transport){try{yield this.transport.stop()}catch(n){this._logger.log(e.Error,`HttpConnection.transport.stop() threw error '${n}'.`),this._stopConnection()}this.transport=void 0}else this._logger.log(e.Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.")})}_startInternal(t){return u(this,null,function*(){let n=this.baseUrl;this._accessTokenFactory=this._options.accessTokenFactory,this._httpClient._accessTokenFactory=this._accessTokenFactory;try{if(this._options.skipNegotiation){if(this._options.transport!==ee.WebSockets)throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");this.transport=this._constructTransport(ee.WebSockets),yield this._startTransport(n,t)}else{let e=null,o=0;do{if(e=yield this._getNegotiationResponse(n),"Disconnecting"===this._connectionState||"Disconnected"===this._connectionState)throw new _("The connection was stopped during negotiation.");if(e.error)throw new Error(e.error);if(e.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");if(e.url&&(n=e.url),e.accessToken){const t=e.accessToken;this._accessTokenFactory=()=>t,this._httpClient._accessToken=t,this._httpClient._accessTokenFactory=void 0}o++}while(e.url&&o<100);if(100===o&&e.url)throw new Error("Negotiate redirection limit exceeded.");yield this._createTransport(n,this._options.transport,e,t)}this.transport instanceof re&&(this.features.inherentKeepAlive=!0),"Connecting"===this._connectionState&&(this._logger.log(e.Debug,"The HttpConnection connected successfully."),this._connectionState="Connected")}catch(o){return this._logger.log(e.Error,"Failed to start the connection: "+o),this._connectionState="Disconnected",this.transport=void 0,this._stopPromiseResolver(),Promise.reject(o)}})}_getNegotiationResponse(t){return u(this,null,function*(){const n={},[o,s]=R();n[o]=s;const r=this._resolveNegotiateUrl(t);this._logger.log(e.Debug,`Sending negotiation request: ${r}.`);try{const e=yield this._httpClient.post(r,{content:"",headers:l(l({},n),this._options.headers),timeout:this._options.timeout,withCredentials:this._options.withCredentials});if(200!==e.statusCode)return Promise.reject(new Error(`Unexpected status code returned from negotiate '${e.statusCode}'`));const t=JSON.parse(e.content);return(!t.negotiateVersion||t.negotiateVersion<1)&&(t.connectionToken=t.connectionId),t.useStatefulReconnect&&!0!==this._options._useStatefulReconnect?Promise.reject(new b("Client didn't negotiate Stateful Reconnect but the server did.")):t}catch(i){let t="Failed to complete negotiation with the server: "+i;return i instanceof g&&404===i.statusCode&&(t+=" Either this is not a SignalR endpoint or there is a proxy blocking the connection."),this._logger.log(e.Error,t),Promise.reject(new b(t))}})}_createConnectUrl(e,t){return t?e+(-1===e.indexOf("?")?"?":"&")+`id=${t}`:e}_createTransport(t,n,o,s){return u(this,null,function*(){let r=this._createConnectUrl(t,o.connectionToken);if(this._isITransport(n))return this._logger.log(e.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=n,yield this._startTransport(r,s),void(this.connectionId=o.connectionId);const i=[],c=o.availableTransports||[];let a=o;for(const o of c){const c=this._resolveTransportOrError(o,n,s,!0===(null==a?void 0:a.useStatefulReconnect));if(c instanceof Error)i.push(`${o.transport} failed:`),i.push(c);else if(this._isITransport(c)){if(this.transport=c,!a){try{a=yield this._getNegotiationResponse(t)}catch(l){return Promise.reject(l)}r=this._createConnectUrl(t,a.connectionToken)}try{return yield this._startTransport(r,s),void(this.connectionId=a.connectionId)}catch(l){if(this._logger.log(e.Error,`Failed to start the transport '${o.transport}': ${l}`),a=void 0,i.push(new m(`${o.transport} failed: ${l}`,ee[o.transport])),"Connecting"!==this._connectionState){const t="Failed to select transport before stop() was called.";return this._logger.log(e.Debug,t),Promise.reject(new _(t))}}}}return i.length>0?Promise.reject(new w(`Unable to connect to the server with any of the available transports. ${i.join(" ")}`,i)):Promise.reject(new Error("None of the transports supported by the client are supported by the server."))})}_constructTransport(e){switch(e){case ee.WebSockets:if(!this._options.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new ce(this._httpClient,this._accessTokenFactory,this._logger,this._options.logMessageContent,this._options.WebSocket,this._options.headers||{});case ee.ServerSentEvents:if(!this._options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new ie(this._httpClient,this._httpClient._accessToken,this._logger,this._options);case ee.LongPolling:return new re(this._httpClient,this._logger,this._options);default:throw new Error(`Unknown transport: ${e}.`)}}_startTransport(e,t){return this.transport.onreceive=this.onreceive,this.features.reconnect?this.transport.onclose=n=>u(this,null,function*(){let o=!1;if(this.features.reconnect){try{this.features.disconnected(),yield this.transport.connect(e,t),yield this.features.resend()}catch(s){o=!0}o&&this._stopConnection(n)}else this._stopConnection(n)}):this.transport.onclose=e=>this._stopConnection(e),this.transport.connect(e,t)}_resolveTransportOrError(t,n,o,s){const r=ee[t.transport];if(null==r)return this._logger.log(e.Debug,`Skipping transport '${t.transport}' because it is not supported by this client.`),new Error(`Skipping transport '${t.transport}' because it is not supported by this client.`);if(!function(e,t){return!e||0!==(t&e)}(n,r))return this._logger.log(e.Debug,`Skipping transport '${ee[r]}' because it was disabled by the client.`),new f(`'${ee[r]}' is disabled by the client.`,r);if(!(t.transferFormats.map(e=>ne[e]).indexOf(o)>=0))return this._logger.log(e.Debug,`Skipping transport '${ee[r]}' because it does not support the requested transfer format '${ne[o]}'.`),new Error(`'${ee[r]}' does not support ${ne[o]}.`);if(r===ee.WebSockets&&!this._options.WebSocket||r===ee.ServerSentEvents&&!this._options.EventSource)return this._logger.log(e.Debug,`Skipping transport '${ee[r]}' because it is not supported in your environment.'`),new p(`'${ee[r]}' is not supported in your environment.`,r);this._logger.log(e.Debug,`Selecting transport '${ee[r]}'.`);try{return this.features.reconnect=r===ee.WebSockets?s:void 0,this._constructTransport(r)}catch(i){return i}}_isITransport(e){return e&&"object"==typeof e&&"connect"in e}_stopConnection(t){if(this._logger.log(e.Debug,`HttpConnection.stopConnection(${t}) called while in state ${this._connectionState}.`),this.transport=void 0,t=this._stopError||t,this._stopError=void 0,"Disconnected"!==this._connectionState){if("Connecting"===this._connectionState)throw this._logger.log(e.Warning,`Call to HttpConnection.stopConnection(${t}) was ignored because the connection is still in the connecting state.`),new Error(`HttpConnection.stopConnection(${t}) was called while the connection is still in the connecting state.`);if("Disconnecting"===this._connectionState&&this._stopPromiseResolver(),t?this._logger.log(e.Error,`Connection disconnected with error '${t}'.`):this._logger.log(e.Information,"Connection disconnected."),this._sendQueue&&(this._sendQueue.stop().catch(t=>{this._logger.log(e.Error,`TransportSendQueue.stop() threw error '${t}'.`)}),this._sendQueue=void 0),this.connectionId=void 0,this._connectionState="Disconnected",this._connectionStarted){this._connectionStarted=!1;try{this.onclose&&this.onclose(t)}catch(n){this._logger.log(e.Error,`HttpConnection.onclose(${t}) threw error '${n}'.`)}}}else this._logger.log(e.Debug,`Call to HttpConnection.stopConnection(${t}) was ignored because the connection is already in the disconnected state.`)}_resolveUrl(t){if(0===t.lastIndexOf("https://",0)||0===t.lastIndexOf("http://",0))return t;if(!k.isBrowser)throw new Error(`Cannot resolve '${t}'.`);const n=window.document.createElement("a");return n.href=t,this._logger.log(e.Information,`Normalizing '${t}' to '${n.href}'.`),n.href}_resolveNegotiateUrl(e){const t=new URL(e);t.pathname.endsWith("/")?t.pathname+="negotiate":t.pathname+="/negotiate";const n=new URLSearchParams(t.searchParams);return n.has("negotiateVersion")||n.append("negotiateVersion",this._negotiateVersion.toString()),n.has("useStatefulReconnect")?"true"===n.get("useStatefulReconnect")&&(this._options._useStatefulReconnect=!0):!0===this._options._useStatefulReconnect&&n.append("useStatefulReconnect","true"),t.search=n.toString(),t.toString()}}class le{constructor(e){this._transport=e,this._buffer=[],this._executing=!0,this._sendBufferedData=new he,this._transportResult=new he,this._sendLoopPromise=this._sendLoop()}send(e){return this._bufferData(e),this._transportResult||(this._transportResult=new he),this._transportResult.promise}stop(){return this._executing=!1,this._sendBufferedData.resolve(),this._sendLoopPromise}_bufferData(e){if(this._buffer.length&&typeof this._buffer[0]!=typeof e)throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof e}`);this._buffer.push(e),this._sendBufferedData.resolve()}_sendLoop(){return u(this,null,function*(){for(;;){if(yield this._sendBufferedData.promise,!this._executing){this._transportResult&&this._transportResult.reject("Connection stopped.");break}this._sendBufferedData=new he;const t=this._transportResult;this._transportResult=void 0;const n="string"==typeof this._buffer[0]?this._buffer.join(""):le._concatBuffers(this._buffer);this._buffer.length=0;try{yield this._transport.send(n),t.resolve()}catch(e){t.reject(e)}}})}static _concatBuffers(e){const t=e.map(e=>e.byteLength).reduce((e,t)=>e+t),n=new Uint8Array(t);let o=0;for(const s of e)n.set(new Uint8Array(s),o),o+=s.byteLength;return n.buffer}}class he{constructor(){this.promise=new Promise((e,t)=>[this._resolver,this._rejecter]=[e,t])}resolve(){this._resolver()}reject(e){this._rejecter(e)}}class ue{constructor(){this.name="json",this.version=2,this.transferFormat=ne.Text}parseMessages(t,n){if("string"!=typeof t)throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!t)return[];null===n&&(n=S.instance);const o=L.parse(t),s=[];for(const r of o){const t=JSON.parse(r);if("number"!=typeof t.type)throw new Error("Invalid payload.");switch(t.type){case O.Invocation:this._isInvocationMessage(t);break;case O.StreamItem:this._isStreamItemMessage(t);break;case O.Completion:this._isCompletionMessage(t);break;case O.Ping:case O.Close:break;case O.Ack:this._isAckMessage(t);break;case O.Sequence:this._isSequenceMessage(t);break;default:n.log(e.Information,"Unknown message type '"+t.type+"' ignored.");continue}s.push(t)}return s}writeMessage(e){return L.write(JSON.stringify(e))}_isInvocationMessage(e){this._assertNotEmptyString(e.target,"Invalid payload for Invocation message."),void 0!==e.invocationId&&this._assertNotEmptyString(e.invocationId,"Invalid payload for Invocation message.")}_isStreamItemMessage(e){if(this._assertNotEmptyString(e.invocationId,"Invalid payload for StreamItem message."),void 0===e.item)throw new Error("Invalid payload for StreamItem message.")}_isCompletionMessage(e){if(e.result&&e.error)throw new Error("Invalid payload for Completion message.");!e.result&&e.error&&this._assertNotEmptyString(e.error,"Invalid payload for Completion message."),this._assertNotEmptyString(e.invocationId,"Invalid payload for Completion message.")}_isAckMessage(e){if("number"!=typeof e.sequenceId)throw new Error("Invalid SequenceId for Ack message.")}_isSequenceMessage(e){if("number"!=typeof e.sequenceId)throw new Error("Invalid SequenceId for Sequence message.")}_assertNotEmptyString(e,t){if("string"!=typeof e||""===e)throw new Error(t)}}const ge={trace:e.Trace,debug:e.Debug,info:e.Information,information:e.Information,warn:e.Warning,warning:e.Warning,error:e.Error,critical:e.Critical,none:e.None};class de{configureLogging(e){if(C.isRequired(e,"logging"),void 0!==e.log)this.logger=e;else if("string"==typeof e){const t=function(e){const t=ge[e.toLowerCase()];if(void 0!==t)return t;throw new Error(`Unknown log level: ${e}`)}(e);this.logger=new $(t)}else this.logger=new $(e);return this}withUrl(e,t){return C.isRequired(e,"url"),C.isNotEmpty(e,"url"),this.url=e,this.httpConnectionOptions="object"==typeof t?l(l({},this.httpConnectionOptions),t):h(l({},this.httpConnectionOptions),{transport:t}),this}withHubProtocol(e){return C.isRequired(e,"protocol"),this.protocol=e,this}withAutomaticReconnect(e){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return e?Array.isArray(e)?this.reconnectPolicy=new G(e):this.reconnectPolicy=e:this.reconnectPolicy=new G,this}withServerTimeout(e){return C.isRequired(e,"milliseconds"),this._serverTimeoutInMilliseconds=e,this}withKeepAliveInterval(e){return C.isRequired(e,"milliseconds"),this._keepAliveIntervalInMilliseconds=e,this}withStatefulReconnect(e){return void 0===this.httpConnectionOptions&&(this.httpConnectionOptions={}),this.httpConnectionOptions._useStatefulReconnect=!0,this._statefulReconnectBufferSize=null==e?void 0:e.bufferSize,this}build(){const e=this.httpConnectionOptions||{};if(void 0===e.logger&&(e.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");const t=new ae(this.url,e);return V.create(t,this.logger||S.instance,this.protocol||new ue,this.reconnectPolicy,this._serverTimeoutInMilliseconds,this._keepAliveIntervalInMilliseconds,this._statefulReconnectBufferSize)}}export{X as H,e as L,de as a,ee as b};
